/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/user/csse4011/Vidar-Blue/ESP_GPIO_TEST/blinky/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /wifi
 *   4   /buttons
 *   5   /soc
 *   6   /soc/interrupt-controller@600c2000
 *   7   /soc/gpio@60004000
 *   8   /buttons/button_0
 *   9   /cpus
 *   10  /power-states
 *   11  /power-states/deep_sleep
 *   12  /power-states/light_sleep
 *   13  /cpus/cpu@0
 *   14  /gpio_keys
 *   15  /gpio_keys/button_1
 *   16  /leds
 *   17  /leds/led_0
 *   18  /pin-controller
 *   19  /pin-controller/i2c0_default
 *   20  /pin-controller/i2c0_default/group1
 *   21  /pin-controller/spim2_default
 *   22  /pin-controller/spim2_default/group1
 *   23  /pin-controller/spim2_default/group2
 *   24  /pin-controller/twai_default
 *   25  /pin-controller/twai_default/group1
 *   26  /pin-controller/uart0_default
 *   27  /pin-controller/uart0_default/group1
 *   28  /pin-controller/uart0_default/group2
 *   29  /soc/adc@60040000
 *   30  /soc/adc@60040004
 *   31  /soc/rtc@60008000
 *   32  /soc/can@6002b000
 *   33  /soc/coretemp@60040058
 *   34  /soc/counter@6001f000
 *   35  /soc/counter@60020000
 *   36  /soc/dma@6003f000
 *   37  /soc/i2c@60013000
 *   38  /soc/ledc@60019000
 *   39  /soc/memory@3fc7c000
 *   40  /soc/spi@60024000
 *   41  /soc/systimer@60023000
 *   42  /soc/trng@3ff700b0
 *   43  /soc/uart@60000000
 *   44  /soc/uart@60010000
 *   45  /soc/uart@60043000
 *   46  /soc/watchdog@6001f048
 *   47  /soc/watchdog@60020048
 *   48  /soc/flash-controller@60002000
 *   49  /soc/flash-controller@60002000/flash@0
 *   50  /soc/flash-controller@60002000/flash@0/partitions
 *   51  /soc/flash-controller@60002000/flash@0/partitions/partition@0
 *   52  /soc/flash-controller@60002000/flash@0/partitions/partition@10000
 *   53  /soc/flash-controller@60002000/flash@0/partitions/partition@110000
 *   54  /soc/flash-controller@60002000/flash@0/partitions/partition@210000
 *   55  /soc/flash-controller@60002000/flash@0/partitions/partition@250000
 *   56  /soc/rtc@60008000/rtc_timer
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_pin_controller) fn(DT_N_S_wifi) fn(DT_N_S_soc) fn(DT_N_S_aliases) fn(DT_N_S_power_states) fn(DT_N_S_gpio_keys) fn(DT_N_S_leds) fn(DT_N_S_buttons)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_wifi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_power_states) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_wifi, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_power_states, __VA_ARGS__) fn(DT_N_S_gpio_keys, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_wifi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_power_states, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_pin_controller) fn(DT_N_S_soc) fn(DT_N_S_aliases) fn(DT_N_S_power_states) fn(DT_N_S_gpio_keys) fn(DT_N_S_leds) fn(DT_N_S_buttons)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_power_states) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_power_states, __VA_ARGS__) fn(DT_N_S_gpio_keys, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_power_states, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /wifi */ \
	4, /* /buttons */ \
	5, /* /soc */ \
	9, /* /cpus */ \
	10, /* /power-states */ \
	14, /* /gpio_keys */ \
	16, /* /leds */ \
	18, /* /pin-controller */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_espressif_esp32c3 DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_espressif_esp32c3 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "esp32c3"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"espressif,esp32c3"}
#define DT_N_P_compatible_IDX_0 "espressif,esp32c3"
#define DT_N_P_compatible_IDX_0_STRING_TOKEN espressif_esp32c3
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32C3
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /wifi
 *
 * Node identifier: DT_N_S_wifi
 *
 * Binding (compatible = espressif,esp32-wifi):
 *   $ZEPHYR_BASE/dts/bindings/wifi/espressif,esp32-wifi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_wifi_PATH "/wifi"

/* Node's name with unit-address: */
#define DT_N_S_wifi_FULL_NAME "wifi"

/* Node parent (/) identifier: */
#define DT_N_S_wifi_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_wifi_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_wifi_FOREACH_CHILD(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_wifi_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_wifi_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_wifi_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_wifi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_wifi_EXISTS 1
#define DT_N_INST_0_espressif_esp32_wifi DT_N_S_wifi
#define DT_N_NODELABEL_wifi              DT_N_S_wifi

/* Macros for properties that are special in the specification: */
#define DT_N_S_wifi_REG_NUM 0
#define DT_N_S_wifi_RANGES_NUM 0
#define DT_N_S_wifi_FOREACH_RANGE(fn) 
#define DT_N_S_wifi_IRQ_NUM 0
#define DT_N_S_wifi_COMPAT_MATCHES_espressif_esp32_wifi 1
#define DT_N_S_wifi_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_wifi_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_wifi_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_wifi_COMPAT_MODEL_IDX_0 "esp32-wifi"
#define DT_N_S_wifi_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_wifi_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_wifi_P_compatible {"espressif,esp32-wifi"}
#define DT_N_S_wifi_P_compatible_IDX_0 "espressif,esp32-wifi"
#define DT_N_S_wifi_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_wifi
#define DT_N_S_wifi_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WIFI
#define DT_N_S_wifi_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, compatible, 0)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_wifi, compatible, 0)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_wifi, compatible, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_wifi, compatible, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_compatible_LEN 1
#define DT_N_S_wifi_P_compatible_EXISTS 1
#define DT_N_S_wifi_P_status "disabled"
#define DT_N_S_wifi_P_status_STRING_TOKEN disabled
#define DT_N_S_wifi_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_wifi_P_status_ENUM_IDX 2
#define DT_N_S_wifi_P_status_ENUM_TOKEN disabled
#define DT_N_S_wifi_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, status, 0) \
	fn(DT_N_S_wifi, status, 1) \
	fn(DT_N_S_wifi, status, 2) \
	fn(DT_N_S_wifi, status, 3) \
	fn(DT_N_S_wifi, status, 4) \
	fn(DT_N_S_wifi, status, 5) \
	fn(DT_N_S_wifi, status, 6) \
	fn(DT_N_S_wifi, status, 7)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_wifi, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 7)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_wifi, status, 0, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 1, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 2, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 3, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 4, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 5, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 6, __VA_ARGS__) \
	fn(DT_N_S_wifi, status, 7, __VA_ARGS__)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_wifi, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_wifi, status, 7, __VA_ARGS__)
#define DT_N_S_wifi_P_status_EXISTS 1

/*
 * Devicetree node: /buttons
 *
 * Node identifier: DT_N_S_buttons
 *
 * Binding (compatible = gpio-keys):
 *   $ZEPHYR_BASE/dts/bindings/input/gpio-keys.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_buttons_PATH "/buttons"

/* Node's name with unit-address: */
#define DT_N_S_buttons_FULL_NAME "buttons"

/* Node parent (/) identifier: */
#define DT_N_S_buttons_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_buttons_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_buttons_FOREACH_CHILD(fn) fn(DT_N_S_buttons_S_button_0)
#define DT_N_S_buttons_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0)
#define DT_N_S_buttons_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_buttons_S_button_0)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_buttons_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_buttons_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_buttons_SUPPORTS_ORDS \
	8, /* /buttons/button_0 */

/* Existence and alternate IDs: */
#define DT_N_S_buttons_EXISTS 1
#define DT_N_INST_1_gpio_keys DT_N_S_buttons

/* Macros for properties that are special in the specification: */
#define DT_N_S_buttons_REG_NUM 0
#define DT_N_S_buttons_RANGES_NUM 0
#define DT_N_S_buttons_FOREACH_RANGE(fn) 
#define DT_N_S_buttons_IRQ_NUM 0
#define DT_N_S_buttons_COMPAT_MATCHES_gpio_keys 1
#define DT_N_S_buttons_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_buttons_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_buttons_P_debounce_interval_ms 30
#define DT_N_S_buttons_P_debounce_interval_ms_EXISTS 1
#define DT_N_S_buttons_P_compatible {"gpio-keys"}
#define DT_N_S_buttons_P_compatible_IDX_0 "gpio-keys"
#define DT_N_S_buttons_P_compatible_IDX_0_STRING_TOKEN gpio_keys
#define DT_N_S_buttons_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_KEYS
#define DT_N_S_buttons_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons, compatible, 0)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons, compatible, 0)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons, compatible, 0, __VA_ARGS__)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons, compatible, 0, __VA_ARGS__)
#define DT_N_S_buttons_P_compatible_LEN 1
#define DT_N_S_buttons_P_compatible_EXISTS 1
#define DT_N_S_buttons_P_wakeup_source 0
#define DT_N_S_buttons_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_memory_3fc7c000) fn(DT_N_S_soc_S_interrupt_controller_600c2000) fn(DT_N_S_soc_S_systimer_60023000) fn(DT_N_S_soc_S_rtc_60008000) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc_S_gpio_60004000) fn(DT_N_S_soc_S_i2c_60013000) fn(DT_N_S_soc_S_uart_60000000) fn(DT_N_S_soc_S_uart_60010000) fn(DT_N_S_soc_S_ledc_60019000) fn(DT_N_S_soc_S_uart_60043000) fn(DT_N_S_soc_S_counter_6001f000) fn(DT_N_S_soc_S_counter_60020000) fn(DT_N_S_soc_S_trng_3ff700b0) fn(DT_N_S_soc_S_can_6002b000) fn(DT_N_S_soc_S_spi_60024000) fn(DT_N_S_soc_S_watchdog_6001f048) fn(DT_N_S_soc_S_watchdog_60020048) fn(DT_N_S_soc_S_coretemp_60040058) fn(DT_N_S_soc_S_adc_60040000) fn(DT_N_S_soc_S_adc_60040004) fn(DT_N_S_soc_S_dma_6003f000)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3fc7c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_600c2000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_systimer_60023000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_60008000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_60004000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_60013000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60010000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ledc_60019000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60043000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_6001f000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_60020000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff700b0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_can_6002b000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_60024000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_6001f048) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_60020048) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_coretemp_60040058) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_60040000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_60040004) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_dma_6003f000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3fc7c000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60010000, __VA_ARGS__) fn(DT_N_S_soc_S_ledc_60019000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_60020048, __VA_ARGS__) fn(DT_N_S_soc_S_coretemp_60040058, __VA_ARGS__) fn(DT_N_S_soc_S_adc_60040000, __VA_ARGS__) fn(DT_N_S_soc_S_adc_60040004, __VA_ARGS__) fn(DT_N_S_soc_S_dma_6003f000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3fc7c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60010000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ledc_60019000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_60020048, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_coretemp_60040058, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_60040000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_60040004, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_dma_6003f000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_memory_3fc7c000) fn(DT_N_S_soc_S_interrupt_controller_600c2000) fn(DT_N_S_soc_S_systimer_60023000) fn(DT_N_S_soc_S_rtc_60008000) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc_S_gpio_60004000) fn(DT_N_S_soc_S_i2c_60013000) fn(DT_N_S_soc_S_uart_60000000) fn(DT_N_S_soc_S_uart_60043000) fn(DT_N_S_soc_S_trng_3ff700b0) fn(DT_N_S_soc_S_spi_60024000) fn(DT_N_S_soc_S_watchdog_6001f048)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3fc7c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_600c2000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_systimer_60023000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_60008000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_60004000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_60013000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60043000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff700b0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_60024000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_6001f048)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3fc7c000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3fc7c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	6, /* /soc/interrupt-controller@600c2000 */ \
	7, /* /soc/gpio@60004000 */ \
	29, /* /soc/adc@60040000 */ \
	30, /* /soc/adc@60040004 */ \
	31, /* /soc/rtc@60008000 */ \
	32, /* /soc/can@6002b000 */ \
	33, /* /soc/coretemp@60040058 */ \
	34, /* /soc/counter@6001f000 */ \
	35, /* /soc/counter@60020000 */ \
	36, /* /soc/dma@6003f000 */ \
	37, /* /soc/i2c@60013000 */ \
	38, /* /soc/ledc@60019000 */ \
	39, /* /soc/memory@3fc7c000 */ \
	40, /* /soc/spi@60024000 */ \
	41, /* /soc/systimer@60023000 */ \
	42, /* /soc/trng@3ff700b0 */ \
	43, /* /soc/uart@60000000 */ \
	44, /* /soc/uart@60010000 */ \
	45, /* /soc/uart@60043000 */ \
	46, /* /soc/watchdog@6001f048 */ \
	47, /* /soc/watchdog@60020048 */ \
	48, /* /soc/flash-controller@60002000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@600c2000
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_600c2000
 *
 * Binding (compatible = espressif,esp32-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/espressif,esp32-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_PATH "/soc/interrupt-controller@600c2000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_FULL_NAME "interrupt-controller@600c2000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_SUPPORTS_ORDS \
	7, /* /soc/gpio@60004000 */ \
	32, /* /soc/can@6002b000 */ \
	34, /* /soc/counter@6001f000 */ \
	35, /* /soc/counter@60020000 */ \
	36, /* /soc/dma@6003f000 */ \
	37, /* /soc/i2c@60013000 */ \
	40, /* /soc/spi@60024000 */ \
	41, /* /soc/systimer@60023000 */ \
	43, /* /soc/uart@60000000 */ \
	44, /* /soc/uart@60010000 */ \
	45, /* /soc/uart@60043000 */ \
	46, /* /soc/watchdog@6001f048 */ \
	47, /* /soc/watchdog@60020048 */ \
	56, /* /soc/rtc@60008000/rtc_timer */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_intc DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_NODELABEL_intc              DT_N_S_soc_S_interrupt_controller_600c2000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_REG_IDX_0_VAL_ADDRESS 1611407360 /* 0x600c2000 */
#define DT_N_S_soc_S_interrupt_controller_600c2000_REG_IDX_0_VAL_SIZE 408 /* 0x198 */
#define DT_N_S_soc_S_interrupt_controller_600c2000_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_MATCHES_espressif_esp32_intc 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_MODEL_IDX_0 "esp32-intc"
#define DT_N_S_soc_S_interrupt_controller_600c2000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg {1611407360 /* 0x600c2000 */, 408 /* 0x198 */}
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_IDX_0 1611407360
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_IDX_1 408
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_600c2000, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_600c2000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status "okay"
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 2) \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 3)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 3)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible {"espressif,esp32-intc"}
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0 "espressif,esp32-intc"
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_intc
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_INTC
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_600c2000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_600c2000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@60004000
 *
 * Node identifier: DT_N_S_soc_S_gpio_60004000
 *
 * Binding (compatible = espressif,esp32-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/espressif,esp32-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_60004000_PATH "/soc/gpio@60004000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_60004000_FULL_NAME "gpio@60004000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_60004000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_60004000_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_60004000_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_60004000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_60004000_SUPPORTS_ORDS \
	8, /* /buttons/button_0 */ \
	15, /* /gpio_keys/button_1 */ \
	17, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_60004000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_gpio DT_N_S_soc_S_gpio_60004000
#define DT_N_NODELABEL_gpio0             DT_N_S_soc_S_gpio_60004000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_60004000_REG_NUM 1
#define DT_N_S_soc_S_gpio_60004000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_REG_IDX_0_VAL_ADDRESS 1610629120 /* 0x60004000 */
#define DT_N_S_soc_S_gpio_60004000_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_gpio_60004000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_60004000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_60004000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_VAL_irq 16
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_COMPAT_MATCHES_espressif_esp32_gpio 1
#define DT_N_S_soc_S_gpio_60004000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_gpio_60004000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_COMPAT_MODEL_IDX_0 "esp32-gpio"
#define DT_N_S_soc_S_gpio_60004000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_60004000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_60004000_P_reg {1610629120 /* 0x60004000 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_gpio_60004000_P_reg_IDX_0 1610629120
#define DT_N_S_soc_S_gpio_60004000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_reg_IDX_1 2048
#define DT_N_S_soc_S_gpio_60004000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_60004000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_60004000, reg, 1)
#define DT_N_S_soc_S_gpio_60004000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_60004000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_60004000, reg, 1)
#define DT_N_S_soc_S_gpio_60004000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_60004000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_60004000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_60004000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_60004000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_ngpios 32
#define DT_N_S_soc_S_gpio_60004000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_status "okay"
#define DT_N_S_soc_S_gpio_60004000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_60004000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_60004000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_60004000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_60004000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_60004000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_60004000, status, 0) \
	fn(DT_N_S_soc_S_gpio_60004000, status, 1) \
	fn(DT_N_S_soc_S_gpio_60004000, status, 2) \
	fn(DT_N_S_soc_S_gpio_60004000, status, 3)
#define DT_N_S_soc_S_gpio_60004000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_60004000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_60004000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_60004000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_60004000, status, 3)
#define DT_N_S_soc_S_gpio_60004000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_60004000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_60004000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_60004000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_60004000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_60004000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_60004000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_60004000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_compatible {"espressif,esp32-gpio"}
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0 "espressif,esp32-gpio"
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_gpio
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_GPIO
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_60004000, compatible, 0)
#define DT_N_S_soc_S_gpio_60004000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_60004000, compatible, 0)
#define DT_N_S_soc_S_gpio_60004000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_60004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_60004000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupts {16 /* 0x10 */}
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_IDX_0 16
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_60004000, interrupts, 0)
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_60004000, interrupts, 0)
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_60004000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_60004000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /buttons/button_0
 *
 * Node identifier: DT_N_S_buttons_S_button_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_buttons_S_button_0_PATH "/buttons/button_0"

/* Node's name with unit-address: */
#define DT_N_S_buttons_S_button_0_FULL_NAME "button_0"

/* Node parent (/buttons) identifier: */
#define DT_N_S_buttons_S_button_0_PARENT DT_N_S_buttons

/* Node's index in its parent's list of children: */
#define DT_N_S_buttons_S_button_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD(fn) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_buttons_S_button_0_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_buttons_S_button_0_REQUIRES_ORDS \
	4, /* /buttons */ \
	7, /* /soc/gpio@60004000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_buttons_S_button_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_buttons_S_button_0_EXISTS 1
#define DT_N_NODELABEL_button0 DT_N_S_buttons_S_button_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_buttons_S_button_0_REG_NUM 0
#define DT_N_S_buttons_S_button_0_RANGES_NUM 0
#define DT_N_S_buttons_S_button_0_FOREACH_RANGE(fn) 
#define DT_N_S_buttons_S_button_0_IRQ_NUM 0
#define DT_N_S_buttons_S_button_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_buttons_S_button_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_60004000
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin 25
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_button_0, gpios, 0)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0, gpios, 0)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_gpios_LEN 1
#define DT_N_S_buttons_S_button_0_P_gpios_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_label "Button"
#define DT_N_S_buttons_S_button_0_P_label_STRING_TOKEN Button
#define DT_N_S_buttons_S_button_0_P_label_STRING_UPPER_TOKEN BUTTON
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_button_0, label, 0) \
	fn(DT_N_S_buttons_S_button_0, label, 1) \
	fn(DT_N_S_buttons_S_button_0, label, 2) \
	fn(DT_N_S_buttons_S_button_0, label, 3) \
	fn(DT_N_S_buttons_S_button_0, label, 4) \
	fn(DT_N_S_buttons_S_button_0, label, 5)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 5)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_buttons_S_button_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_buttons_S_button_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_buttons_S_button_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_buttons_S_button_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_buttons_S_button_0, label, 5, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_buttons_S_button_0, label, 5, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_label_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_zephyr_code 0
#define DT_N_S_buttons_S_button_0_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	13, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /power-states
 *
 * Node identifier: DT_N_S_power_states
 */

/* Node's full path: */
#define DT_N_S_power_states_PATH "/power-states"

/* Node's name with unit-address: */
#define DT_N_S_power_states_FULL_NAME "power-states"

/* Node parent (/) identifier: */
#define DT_N_S_power_states_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_power_states_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_power_states_FOREACH_CHILD(fn) fn(DT_N_S_power_states_S_light_sleep) fn(DT_N_S_power_states_S_deep_sleep)
#define DT_N_S_power_states_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_power_states_S_light_sleep) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_power_states_S_deep_sleep)
#define DT_N_S_power_states_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_power_states_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_power_states_S_light_sleep, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_power_states_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_power_states_S_light_sleep) fn(DT_N_S_power_states_S_deep_sleep)
#define DT_N_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_power_states_S_light_sleep) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_power_states_S_deep_sleep)
#define DT_N_S_power_states_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_power_states_S_light_sleep, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_power_states_S_deep_sleep, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_power_states_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_power_states_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_power_states_SUPPORTS_ORDS \
	11, /* /power-states/deep_sleep */ \
	12, /* /power-states/light_sleep */

/* Existence and alternate IDs: */
#define DT_N_S_power_states_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_power_states_REG_NUM 0
#define DT_N_S_power_states_RANGES_NUM 0
#define DT_N_S_power_states_FOREACH_RANGE(fn) 
#define DT_N_S_power_states_IRQ_NUM 0
#define DT_N_S_power_states_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_power_states_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /power-states/deep_sleep
 *
 * Node identifier: DT_N_S_power_states_S_deep_sleep
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_power_states_S_deep_sleep_PATH "/power-states/deep_sleep"

/* Node's name with unit-address: */
#define DT_N_S_power_states_S_deep_sleep_FULL_NAME "deep_sleep"

/* Node parent (/power-states) identifier: */
#define DT_N_S_power_states_S_deep_sleep_PARENT DT_N_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_power_states_S_deep_sleep_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_power_states_S_deep_sleep_FOREACH_CHILD(fn) 
#define DT_N_S_power_states_S_deep_sleep_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_power_states_S_deep_sleep_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_power_states_S_deep_sleep_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_power_states_S_deep_sleep_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_power_states_S_deep_sleep_REQUIRES_ORDS \
	10, /* /power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_power_states_S_deep_sleep_SUPPORTS_ORDS \
	13, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_power_states_S_deep_sleep_EXISTS 1
#define DT_N_INST_1_zephyr_power_state DT_N_S_power_states_S_deep_sleep
#define DT_N_NODELABEL_deep_sleep      DT_N_S_power_states_S_deep_sleep

/* Macros for properties that are special in the specification: */
#define DT_N_S_power_states_S_deep_sleep_REG_NUM 0
#define DT_N_S_power_states_S_deep_sleep_RANGES_NUM 0
#define DT_N_S_power_states_S_deep_sleep_FOREACH_RANGE(fn) 
#define DT_N_S_power_states_S_deep_sleep_IRQ_NUM 0
#define DT_N_S_power_states_S_deep_sleep_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_power_states_S_deep_sleep_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_power_states_S_deep_sleep_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_power_states_S_deep_sleep_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_power_states_S_deep_sleep_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_power_states_S_deep_sleep_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_power_states_S_deep_sleep_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name "soft-off"
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_STRING_TOKEN soft_off
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_STRING_UPPER_TOKEN SOFT_OFF
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_ENUM_IDX 6
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_ENUM_TOKEN soft_off
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_ENUM_UPPER_TOKEN SOFT_OFF
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 0) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 1) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 2) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 3) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 4) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 5) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 6) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 7)
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 7)
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 0, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 1, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 2, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 3, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 4, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 5, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 6, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 7, __VA_ARGS__)
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_deep_sleep, power_state_name, 7, __VA_ARGS__)
#define DT_N_S_power_states_S_deep_sleep_P_power_state_name_EXISTS 1
#define DT_N_S_power_states_S_deep_sleep_P_min_residency_us 660
#define DT_N_S_power_states_S_deep_sleep_P_min_residency_us_EXISTS 1
#define DT_N_S_power_states_S_deep_sleep_P_exit_latency_us 105
#define DT_N_S_power_states_S_deep_sleep_P_exit_latency_us_EXISTS 1

/*
 * Devicetree node: /power-states/light_sleep
 *
 * Node identifier: DT_N_S_power_states_S_light_sleep
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_power_states_S_light_sleep_PATH "/power-states/light_sleep"

/* Node's name with unit-address: */
#define DT_N_S_power_states_S_light_sleep_FULL_NAME "light_sleep"

/* Node parent (/power-states) identifier: */
#define DT_N_S_power_states_S_light_sleep_PARENT DT_N_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_power_states_S_light_sleep_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_power_states_S_light_sleep_FOREACH_CHILD(fn) 
#define DT_N_S_power_states_S_light_sleep_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_power_states_S_light_sleep_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_power_states_S_light_sleep_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_power_states_S_light_sleep_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_power_states_S_light_sleep_REQUIRES_ORDS \
	10, /* /power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_power_states_S_light_sleep_SUPPORTS_ORDS \
	13, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_power_states_S_light_sleep_EXISTS 1
#define DT_N_INST_0_zephyr_power_state DT_N_S_power_states_S_light_sleep
#define DT_N_NODELABEL_light_sleep     DT_N_S_power_states_S_light_sleep

/* Macros for properties that are special in the specification: */
#define DT_N_S_power_states_S_light_sleep_REG_NUM 0
#define DT_N_S_power_states_S_light_sleep_RANGES_NUM 0
#define DT_N_S_power_states_S_light_sleep_FOREACH_RANGE(fn) 
#define DT_N_S_power_states_S_light_sleep_IRQ_NUM 0
#define DT_N_S_power_states_S_light_sleep_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_power_states_S_light_sleep_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_power_states_S_light_sleep_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_power_states_S_light_sleep_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_power_states_S_light_sleep_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_power_states_S_light_sleep_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_power_states_S_light_sleep_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_power_states_S_light_sleep_P_power_state_name "standby"
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_STRING_TOKEN standby
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_STRING_UPPER_TOKEN STANDBY
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_ENUM_IDX 3
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_ENUM_TOKEN standby
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_ENUM_UPPER_TOKEN STANDBY
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_power_states_S_light_sleep, power_state_name, 0) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 1) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 2) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 3) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 4) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 5) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 6)
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_power_states_S_light_sleep, power_state_name, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 6)
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_power_states_S_light_sleep, power_state_name, 0, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 1, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 2, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 3, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 4, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 5, __VA_ARGS__) \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 6, __VA_ARGS__)
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_power_states_S_light_sleep, power_state_name, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_power_states_S_light_sleep, power_state_name, 6, __VA_ARGS__)
#define DT_N_S_power_states_S_light_sleep_P_power_state_name_EXISTS 1
#define DT_N_S_power_states_S_light_sleep_P_min_residency_us 200
#define DT_N_S_power_states_S_light_sleep_P_min_residency_us_EXISTS 1
#define DT_N_S_power_states_S_light_sleep_P_exit_latency_us 60
#define DT_N_S_power_states_S_light_sleep_P_exit_latency_us_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = espressif,riscv):
 *   $ZEPHYR_BASE/dts/bindings/cpu/espressif,riscv.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	9, /* /cpus */ \
	11, /* /power-states/deep_sleep */ \
	12, /* /power-states/light_sleep */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_espressif_riscv DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0         DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_espressif_riscv 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency 160000000
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0 DT_N_S_power_states_S_deep_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_PH DT_N_S_power_states_S_deep_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1 DT_N_S_power_states_S_light_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_PH DT_N_S_power_states_S_light_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_LEN 2
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"espressif,riscv"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "espressif,riscv"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN espressif_riscv
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_RISCV
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /gpio_keys
 *
 * Node identifier: DT_N_S_gpio_keys
 *
 * Binding (compatible = gpio-keys):
 *   $ZEPHYR_BASE/dts/bindings/input/gpio-keys.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_keys_PATH "/gpio_keys"

/* Node's name with unit-address: */
#define DT_N_S_gpio_keys_FULL_NAME "gpio_keys"

/* Node parent (/) identifier: */
#define DT_N_S_gpio_keys_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_keys_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_keys_FOREACH_CHILD(fn) fn(DT_N_S_gpio_keys_S_button_1)
#define DT_N_S_gpio_keys_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_1)
#define DT_N_S_gpio_keys_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_1, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_1, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_gpio_keys_S_button_1)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_1)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_1, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_gpio_keys_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_keys_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_keys_SUPPORTS_ORDS \
	15, /* /gpio_keys/button_1 */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_keys_EXISTS 1
#define DT_N_INST_0_gpio_keys DT_N_S_gpio_keys

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_keys_REG_NUM 0
#define DT_N_S_gpio_keys_RANGES_NUM 0
#define DT_N_S_gpio_keys_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_keys_IRQ_NUM 0
#define DT_N_S_gpio_keys_COMPAT_MATCHES_gpio_keys 1
#define DT_N_S_gpio_keys_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_keys_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_keys_P_debounce_interval_ms 30
#define DT_N_S_gpio_keys_P_debounce_interval_ms_EXISTS 1
#define DT_N_S_gpio_keys_P_compatible {"gpio-keys"}
#define DT_N_S_gpio_keys_P_compatible_IDX_0 "gpio-keys"
#define DT_N_S_gpio_keys_P_compatible_IDX_0_STRING_TOKEN gpio_keys
#define DT_N_S_gpio_keys_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_KEYS
#define DT_N_S_gpio_keys_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys, compatible, 0)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys, compatible, 0)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_P_compatible_LEN 1
#define DT_N_S_gpio_keys_P_compatible_EXISTS 1
#define DT_N_S_gpio_keys_P_wakeup_source 0
#define DT_N_S_gpio_keys_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /gpio_keys/button_1
 *
 * Node identifier: DT_N_S_gpio_keys_S_button_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_keys_S_button_1_PATH "/gpio_keys/button_1"

/* Node's name with unit-address: */
#define DT_N_S_gpio_keys_S_button_1_FULL_NAME "button_1"

/* Node parent (/gpio_keys) identifier: */
#define DT_N_S_gpio_keys_S_button_1_PARENT DT_N_S_gpio_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_keys_S_button_1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_keys_S_button_1_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_keys_S_button_1_REQUIRES_ORDS \
	7, /* /soc/gpio@60004000 */ \
	14, /* /gpio_keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_keys_S_button_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_keys_S_button_1_EXISTS 1
#define DT_N_ALIAS_sw0              DT_N_S_gpio_keys_S_button_1
#define DT_N_NODELABEL_user_button1 DT_N_S_gpio_keys_S_button_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_keys_S_button_1_REG_NUM 0
#define DT_N_S_gpio_keys_S_button_1_RANGES_NUM 0
#define DT_N_S_gpio_keys_S_button_1_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_keys_S_button_1_IRQ_NUM 0
#define DT_N_S_gpio_keys_S_button_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_keys_S_button_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_60004000
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_VAL_pin 9
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_VAL_flags 17
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button_1, gpios, 0)
#define DT_N_S_gpio_keys_S_button_1_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_1, gpios, 0)
#define DT_N_S_gpio_keys_S_button_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_1_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_1_P_gpios_LEN 1
#define DT_N_S_gpio_keys_S_button_1_P_gpios_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_label "User SW1"
#define DT_N_S_gpio_keys_S_button_1_P_label_STRING_TOKEN User_SW1
#define DT_N_S_gpio_keys_S_button_1_P_label_STRING_UPPER_TOKEN USER_SW1
#define DT_N_S_gpio_keys_S_button_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button_1, label, 0) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 1) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 2) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 3) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 4) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 5) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 6) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 7)
#define DT_N_S_gpio_keys_S_button_1_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_1, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 7)
#define DT_N_S_gpio_keys_S_button_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 4, __VA_ARGS__) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 5, __VA_ARGS__) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 6, __VA_ARGS__) \
	fn(DT_N_S_gpio_keys_S_button_1, label, 7, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_1_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_1, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_gpio_keys_S_button_1, label, 7, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_1_P_label_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_zephyr_code 0
#define DT_N_S_gpio_keys_S_button_1_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_0)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	17, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /leds/led_0
 *
 * Node identifier: DT_N_S_leds_S_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_0_PATH "/leds/led_0"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_0_FULL_NAME "led_0"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_0_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_0_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_0_REQUIRES_ORDS \
	7, /* /soc/gpio@60004000 */ \
	16, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_0_EXISTS 1
#define DT_N_ALIAS_l0       DT_N_S_leds_S_led_0
#define DT_N_NODELABEL_led0 DT_N_S_leds_S_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_0_REG_NUM 0
#define DT_N_S_leds_S_led_0_RANGES_NUM 0
#define DT_N_S_leds_S_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_0_IRQ_NUM 0
#define DT_N_S_leds_S_led_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_60004000
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin 4
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_LEN 1
#define DT_N_S_leds_S_led_0_P_gpios_EXISTS 1

/*
 * Devicetree node: /pin-controller
 *
 * Node identifier: DT_N_S_pin_controller
 *
 * Binding (compatible = espressif,esp32-pinctrl):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/espressif,esp32-pinctrl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_PATH "/pin-controller"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_FULL_NAME "pin-controller"

/* Node parent (/) identifier: */
#define DT_N_S_pin_controller_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_twai_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_twai_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_twai_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_twai_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_SUPPORTS_ORDS \
	19, /* /pin-controller/i2c0_default */ \
	21, /* /pin-controller/spim2_default */ \
	24, /* /pin-controller/twai_default */ \
	26, /* /pin-controller/uart0_default */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_EXISTS 1
#define DT_N_INST_0_espressif_esp32_pinctrl DT_N_S_pin_controller
#define DT_N_NODELABEL_pinctrl              DT_N_S_pin_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_REG_NUM 0
#define DT_N_S_pin_controller_RANGES_NUM 0
#define DT_N_S_pin_controller_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_IRQ_NUM 0
#define DT_N_S_pin_controller_COMPAT_MATCHES_espressif_esp32_pinctrl 1
#define DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_pin_controller_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_COMPAT_MODEL_IDX_0 "esp32-pinctrl"
#define DT_N_S_pin_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_P_status "okay"
#define DT_N_S_pin_controller_P_status_STRING_TOKEN okay
#define DT_N_S_pin_controller_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pin_controller_P_status_ENUM_IDX 1
#define DT_N_S_pin_controller_P_status_ENUM_TOKEN okay
#define DT_N_S_pin_controller_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller, status, 0) \
	fn(DT_N_S_pin_controller, status, 1) \
	fn(DT_N_S_pin_controller, status, 2) \
	fn(DT_N_S_pin_controller, status, 3)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller, status, 3)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pin_controller, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pin_controller, status, 3, __VA_ARGS__)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller, status, 3, __VA_ARGS__)
#define DT_N_S_pin_controller_P_status_EXISTS 1
#define DT_N_S_pin_controller_P_compatible {"espressif,esp32-pinctrl"}
#define DT_N_S_pin_controller_P_compatible_IDX_0 "espressif,esp32-pinctrl"
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_pinctrl
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_PINCTRL
#define DT_N_S_pin_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller, compatible, 0)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller, compatible, 0)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_compatible_LEN 1
#define DT_N_S_pin_controller_P_compatible_EXISTS 1
#define DT_N_S_pin_controller_P_wakeup_source 0
#define DT_N_S_pin_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pin-controller/i2c0_default
 *
 * Node identifier: DT_N_S_pin_controller_S_i2c0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_i2c0_default_PATH "/pin-controller/i2c0_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_i2c0_default_FULL_NAME "i2c0_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_i2c0_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_i2c0_default_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_i2c0_default_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_i2c0_default_REQUIRES_ORDS \
	18, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_i2c0_default_SUPPORTS_ORDS \
	20, /* /pin-controller/i2c0_default/group1 */ \
	37, /* /soc/i2c@60013000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_i2c0_default_EXISTS 1
#define DT_N_NODELABEL_i2c0_default DT_N_S_pin_controller_S_i2c0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_i2c0_default_REG_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_i2c0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/i2c0_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_i2c0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PATH "/pin-controller/i2c0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/i2c0_default) identifier: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PARENT DT_N_S_pin_controller_S_i2c0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_REQUIRES_ORDS \
	19, /* /pin-controller/i2c0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux {1772929 /* 0x1b0d81 */, 1740099 /* 0x1a8d43 */}
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_0 1772929
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_1 1740099
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_up 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_open_drain 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_high 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/spim2_default
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_PATH "/pin-controller/spim2_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_FULL_NAME "spim2_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_REQUIRES_ORDS \
	18, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_SUPPORTS_ORDS \
	22, /* /pin-controller/spim2_default/group1 */ \
	23, /* /pin-controller/spim2_default/group2 */ \
	40, /* /soc/spi@60024000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_EXISTS 1
#define DT_N_NODELABEL_spim2_default DT_N_S_pin_controller_S_spim2_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/spim2_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PATH "/pin-controller/spim2_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/spim2_default) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PARENT DT_N_S_pin_controller_S_spim2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_REQUIRES_ORDS \
	21, /* /pin-controller/spim2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux {16748546 /* 0xff9002 */, 2097094 /* 0x1fffc6 */, 2260938 /* 0x227fca */}
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_0 16748546
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_1 2097094
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_2 2260938
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 2)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 2)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_LEN 3
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/spim2_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PATH "/pin-controller/spim2_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FULL_NAME "group2"

/* Node parent (/pin-controller/spim2_default) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PARENT DT_N_S_pin_controller_S_spim2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_REQUIRES_ORDS \
	21, /* /pin-controller/spim2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux {2162631 /* 0x20ffc7 */}
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_IDX_0 2162631
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_low 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/twai_default
 *
 * Node identifier: DT_N_S_pin_controller_S_twai_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_twai_default_PATH "/pin-controller/twai_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_twai_default_FULL_NAME "twai_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_twai_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_twai_default_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_twai_default_S_group1)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_twai_default_S_group1)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_twai_default_S_group1)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_twai_default_S_group1)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_twai_default_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_twai_default_REQUIRES_ORDS \
	18, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_twai_default_SUPPORTS_ORDS \
	25, /* /pin-controller/twai_default/group1 */ \
	32, /* /soc/can@6002b000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_twai_default_EXISTS 1
#define DT_N_NODELABEL_twai_default DT_N_S_pin_controller_S_twai_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_twai_default_REG_NUM 0
#define DT_N_S_pin_controller_S_twai_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_twai_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_twai_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_twai_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_twai_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/twai_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_twai_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_PATH "/pin-controller/twai_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/twai_default) identifier: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_PARENT DT_N_S_pin_controller_S_twai_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_REQUIRES_ORDS \
	24, /* /pin-controller/twai_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux {2457540 /* 0x257fc4 */, 16749189 /* 0xff9285 */}
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_IDX_0 2457540
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_IDX_1 16749189
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart0_default
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_PATH "/pin-controller/uart0_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_FULL_NAME "uart0_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_REQUIRES_ORDS \
	18, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_SUPPORTS_ORDS \
	27, /* /pin-controller/uart0_default/group1 */ \
	28, /* /pin-controller/uart0_default/group2 */ \
	43, /* /soc/uart@60000000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_EXISTS 1
#define DT_N_NODELABEL_uart0_default DT_N_S_pin_controller_S_uart0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/uart0_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PATH "/pin-controller/uart0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/uart0_default) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PARENT DT_N_S_pin_controller_S_uart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_ORD 27

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_REQUIRES_ORDS \
	26, /* /pin-controller/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux {229333 /* 0x37fd5 */}
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_IDX_0 229333
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart0_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PATH "/pin-controller/uart0_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FULL_NAME "group2"

/* Node parent (/pin-controller/uart0_default) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PARENT DT_N_S_pin_controller_S_uart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_ORD 28

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_REQUIRES_ORDS \
	26, /* /pin-controller/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux {16744852 /* 0xff8194 */}
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_IDX_0 16744852
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_up 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_low 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /soc/adc@60040000
 *
 * Node identifier: DT_N_S_soc_S_adc_60040000
 *
 * Binding (compatible = espressif,esp32-adc):
 *   $ZEPHYR_BASE/dts/bindings/adc/espressif,esp32-adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_adc_60040000_PATH "/soc/adc@60040000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_adc_60040000_FULL_NAME "adc@60040000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_adc_60040000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_adc_60040000_CHILD_IDX 19

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_adc_60040000_ORD 29

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_adc_60040000_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_adc_60040000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_adc_60040000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_adc DT_N_S_soc_S_adc_60040000
#define DT_N_NODELABEL_adc0             DT_N_S_soc_S_adc_60040000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_adc_60040000_REG_NUM 1
#define DT_N_S_soc_S_adc_60040000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_REG_IDX_0_VAL_ADDRESS 1610874880 /* 0x60040000 */
#define DT_N_S_soc_S_adc_60040000_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_adc_60040000_RANGES_NUM 0
#define DT_N_S_soc_S_adc_60040000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_adc_60040000_IRQ_NUM 0
#define DT_N_S_soc_S_adc_60040000_COMPAT_MATCHES_espressif_esp32_adc 1
#define DT_N_S_soc_S_adc_60040000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_adc_60040000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_COMPAT_MODEL_IDX_0 "esp32-adc"
#define DT_N_S_soc_S_adc_60040000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_adc_60040000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_adc_60040000_P_unit 1
#define DT_N_S_soc_S_adc_60040000_P_unit_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_channel_count 5
#define DT_N_S_soc_S_adc_60040000_P_channel_count_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_status "disabled"
#define DT_N_S_soc_S_adc_60040000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_adc_60040000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_60040000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_adc_60040000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_adc_60040000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_60040000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040000, status, 0) \
	fn(DT_N_S_soc_S_adc_60040000, status, 1) \
	fn(DT_N_S_soc_S_adc_60040000, status, 2) \
	fn(DT_N_S_soc_S_adc_60040000, status, 3) \
	fn(DT_N_S_soc_S_adc_60040000, status, 4) \
	fn(DT_N_S_soc_S_adc_60040000, status, 5) \
	fn(DT_N_S_soc_S_adc_60040000, status, 6) \
	fn(DT_N_S_soc_S_adc_60040000, status, 7)
#define DT_N_S_soc_S_adc_60040000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 7)
#define DT_N_S_soc_S_adc_60040000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_status_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_compatible {"espressif,esp32-adc"}
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0 "espressif,esp32-adc"
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_adc
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_ADC
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040000, compatible, 0)
#define DT_N_S_soc_S_adc_60040000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040000, compatible, 0)
#define DT_N_S_soc_S_adc_60040000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_compatible_LEN 1
#define DT_N_S_soc_S_adc_60040000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_reg {1610874880 /* 0x60040000 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_adc_60040000_P_reg_IDX_0 1610874880
#define DT_N_S_soc_S_adc_60040000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_reg_IDX_1 4
#define DT_N_S_soc_S_adc_60040000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040000, reg, 0) \
	fn(DT_N_S_soc_S_adc_60040000, reg, 1)
#define DT_N_S_soc_S_adc_60040000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, reg, 1)
#define DT_N_S_soc_S_adc_60040000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_reg_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_wakeup_source 0
#define DT_N_S_soc_S_adc_60040000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/adc@60040004
 *
 * Node identifier: DT_N_S_soc_S_adc_60040004
 *
 * Binding (compatible = espressif,esp32-adc):
 *   $ZEPHYR_BASE/dts/bindings/adc/espressif,esp32-adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_adc_60040004_PATH "/soc/adc@60040004"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_adc_60040004_FULL_NAME "adc@60040004"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_adc_60040004_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_adc_60040004_CHILD_IDX 20

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_adc_60040004_ORD 30

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_adc_60040004_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_adc_60040004_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_adc_60040004_EXISTS 1
#define DT_N_INST_1_espressif_esp32_adc DT_N_S_soc_S_adc_60040004
#define DT_N_NODELABEL_adc1             DT_N_S_soc_S_adc_60040004

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_adc_60040004_REG_NUM 1
#define DT_N_S_soc_S_adc_60040004_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_REG_IDX_0_VAL_ADDRESS 1610874884 /* 0x60040004 */
#define DT_N_S_soc_S_adc_60040004_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_adc_60040004_RANGES_NUM 0
#define DT_N_S_soc_S_adc_60040004_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_adc_60040004_IRQ_NUM 0
#define DT_N_S_soc_S_adc_60040004_COMPAT_MATCHES_espressif_esp32_adc 1
#define DT_N_S_soc_S_adc_60040004_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_adc_60040004_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_COMPAT_MODEL_IDX_0 "esp32-adc"
#define DT_N_S_soc_S_adc_60040004_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_adc_60040004_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_adc_60040004_P_unit 2
#define DT_N_S_soc_S_adc_60040004_P_unit_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_channel_count 2
#define DT_N_S_soc_S_adc_60040004_P_channel_count_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_status "disabled"
#define DT_N_S_soc_S_adc_60040004_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_adc_60040004_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_60040004_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_adc_60040004_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_adc_60040004_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_60040004_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040004, status, 0) \
	fn(DT_N_S_soc_S_adc_60040004, status, 1) \
	fn(DT_N_S_soc_S_adc_60040004, status, 2) \
	fn(DT_N_S_soc_S_adc_60040004, status, 3) \
	fn(DT_N_S_soc_S_adc_60040004, status, 4) \
	fn(DT_N_S_soc_S_adc_60040004, status, 5) \
	fn(DT_N_S_soc_S_adc_60040004, status, 6) \
	fn(DT_N_S_soc_S_adc_60040004, status, 7)
#define DT_N_S_soc_S_adc_60040004_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040004, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 7)
#define DT_N_S_soc_S_adc_60040004_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040004, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040004, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040004, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040004, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040004, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040004, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040004, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040004, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040004, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_status_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_compatible {"espressif,esp32-adc"}
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0 "espressif,esp32-adc"
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_adc
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_ADC
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040004, compatible, 0)
#define DT_N_S_soc_S_adc_60040004_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040004, compatible, 0)
#define DT_N_S_soc_S_adc_60040004_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040004, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040004, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_compatible_LEN 1
#define DT_N_S_soc_S_adc_60040004_P_compatible_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_reg {1610874884 /* 0x60040004 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_adc_60040004_P_reg_IDX_0 1610874884
#define DT_N_S_soc_S_adc_60040004_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_reg_IDX_1 4
#define DT_N_S_soc_S_adc_60040004_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040004, reg, 0) \
	fn(DT_N_S_soc_S_adc_60040004, reg, 1)
#define DT_N_S_soc_S_adc_60040004_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040004, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, reg, 1)
#define DT_N_S_soc_S_adc_60040004_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040004, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_adc_60040004, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040004, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_adc_60040004, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_reg_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_wakeup_source 0
#define DT_N_S_soc_S_adc_60040004_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/rtc@60008000
 *
 * Node identifier: DT_N_S_soc_S_rtc_60008000
 *
 * Binding (compatible = espressif,esp32-rtc):
 *   $ZEPHYR_BASE/dts/bindings/clock/espressif,esp32-rtc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_60008000_PATH "/soc/rtc@60008000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_60008000_FULL_NAME "rtc@60008000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_rtc_60008000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_rtc_60008000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_60008000_ORD 31

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_60008000_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_60008000_SUPPORTS_ORDS \
	32, /* /soc/can@6002b000 */ \
	36, /* /soc/dma@6003f000 */ \
	37, /* /soc/i2c@60013000 */ \
	38, /* /soc/ledc@60019000 */ \
	40, /* /soc/spi@60024000 */ \
	43, /* /soc/uart@60000000 */ \
	44, /* /soc/uart@60010000 */ \
	45, /* /soc/uart@60043000 */ \
	46, /* /soc/watchdog@6001f048 */ \
	47, /* /soc/watchdog@60020048 */ \
	56, /* /soc/rtc@60008000/rtc_timer */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_60008000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_rtc DT_N_S_soc_S_rtc_60008000
#define DT_N_NODELABEL_rtc              DT_N_S_soc_S_rtc_60008000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_60008000_REG_NUM 1
#define DT_N_S_soc_S_rtc_60008000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_REG_IDX_0_VAL_ADDRESS 1610645504 /* 0x60008000 */
#define DT_N_S_soc_S_rtc_60008000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_rtc_60008000_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_60008000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_60008000_IRQ_NUM 0
#define DT_N_S_soc_S_rtc_60008000_COMPAT_MATCHES_espressif_esp32_rtc 1
#define DT_N_S_soc_S_rtc_60008000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_rtc_60008000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_COMPAT_MODEL_IDX_0 "esp32-rtc"
#define DT_N_S_soc_S_rtc_60008000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_60008000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_60008000_P_reg {1610645504 /* 0x60008000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_rtc_60008000_P_reg_IDX_0 1610645504
#define DT_N_S_soc_S_rtc_60008000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_rtc_60008000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_60008000, reg, 0) \
	fn(DT_N_S_soc_S_rtc_60008000, reg, 1)
#define DT_N_S_soc_S_rtc_60008000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000, reg, 1)
#define DT_N_S_soc_S_rtc_60008000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_60008000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_reg_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_xtal_freq 1
#define DT_N_S_soc_S_rtc_60008000_P_xtal_freq_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_status "okay"
#define DT_N_S_soc_S_rtc_60008000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_rtc_60008000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_60008000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_rtc_60008000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_rtc_60008000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_60008000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_60008000, status, 0) \
	fn(DT_N_S_soc_S_rtc_60008000, status, 1) \
	fn(DT_N_S_soc_S_rtc_60008000, status, 2) \
	fn(DT_N_S_soc_S_rtc_60008000, status, 3)
#define DT_N_S_soc_S_rtc_60008000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000, status, 3)
#define DT_N_S_soc_S_rtc_60008000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_60008000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_60008000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_60008000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_compatible {"espressif,esp32-rtc"}
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0 "espressif,esp32-rtc"
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_rtc
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_RTC
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_60008000, compatible, 0)
#define DT_N_S_soc_S_rtc_60008000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000, compatible, 0)
#define DT_N_S_soc_S_rtc_60008000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_60008000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_wakeup_source 0
#define DT_N_S_soc_S_rtc_60008000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/can@6002b000
 *
 * Node identifier: DT_N_S_soc_S_can_6002b000
 *
 * Binding (compatible = espressif,esp32-twai):
 *   $ZEPHYR_BASE/dts/bindings/can/espressif,esp32-twai.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_can_6002b000_PATH "/soc/can@6002b000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_can_6002b000_FULL_NAME "can@6002b000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_can_6002b000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_can_6002b000_CHILD_IDX 14

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_can_6002b000_ORD 32

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_can_6002b000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	24, /* /pin-controller/twai_default */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_can_6002b000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_can_6002b000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_twai DT_N_S_soc_S_can_6002b000
#define DT_N_NODELABEL_twai              DT_N_S_soc_S_can_6002b000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_can_6002b000_REG_NUM 1
#define DT_N_S_soc_S_can_6002b000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_REG_IDX_0_VAL_ADDRESS 1610788864 /* 0x6002b000 */
#define DT_N_S_soc_S_can_6002b000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_can_6002b000_RANGES_NUM 0
#define DT_N_S_soc_S_can_6002b000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_can_6002b000_IRQ_NUM 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_VAL_irq 25
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_COMPAT_MATCHES_espressif_esp32_twai 1
#define DT_N_S_soc_S_can_6002b000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_can_6002b000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_COMPAT_MODEL_IDX_0 "esp32-twai"
#define DT_N_S_soc_S_can_6002b000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_can_6002b000_PINCTRL_NUM 1
#define DT_N_S_soc_S_can_6002b000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_can_6002b000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_can_6002b000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_can_6002b000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_twai_default

/* Generic property macros: */
#define DT_N_S_soc_S_can_6002b000_P_reg {1610788864 /* 0x6002b000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_can_6002b000_P_reg_IDX_0 1610788864
#define DT_N_S_soc_S_can_6002b000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_can_6002b000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, reg, 0) \
	fn(DT_N_S_soc_S_can_6002b000, reg, 1)
#define DT_N_S_soc_S_can_6002b000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, reg, 1)
#define DT_N_S_soc_S_can_6002b000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_6002b000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_reg_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupts {25 /* 0x19 */}
#define DT_N_S_soc_S_can_6002b000_P_interrupts_IDX_0 25
#define DT_N_S_soc_S_can_6002b000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, interrupts, 0)
#define DT_N_S_soc_S_can_6002b000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, interrupts, 0)
#define DT_N_S_soc_S_can_6002b000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_can_6002b000_P_clocks_IDX_0_VAL_offset 12
#define DT_N_S_soc_S_can_6002b000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, clocks, 0)
#define DT_N_S_soc_S_can_6002b000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, clocks, 0)
#define DT_N_S_soc_S_can_6002b000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_clocks_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_twai_default
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_twai_default
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, pinctrl_0, 0)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, pinctrl_0, 0)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, pinctrl_names, 0)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, pinctrl_names, 0)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_bus_speed 125000
#define DT_N_S_soc_S_can_6002b000_P_bus_speed_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_sjw 1
#define DT_N_S_soc_S_can_6002b000_P_sjw_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_sample_point 875
#define DT_N_S_soc_S_can_6002b000_P_sample_point_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_status "disabled"
#define DT_N_S_soc_S_can_6002b000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_can_6002b000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_can_6002b000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_can_6002b000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_can_6002b000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_can_6002b000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, status, 0) \
	fn(DT_N_S_soc_S_can_6002b000, status, 1) \
	fn(DT_N_S_soc_S_can_6002b000, status, 2) \
	fn(DT_N_S_soc_S_can_6002b000, status, 3) \
	fn(DT_N_S_soc_S_can_6002b000, status, 4) \
	fn(DT_N_S_soc_S_can_6002b000, status, 5) \
	fn(DT_N_S_soc_S_can_6002b000, status, 6) \
	fn(DT_N_S_soc_S_can_6002b000, status, 7)
#define DT_N_S_soc_S_can_6002b000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 7)
#define DT_N_S_soc_S_can_6002b000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_6002b000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_6002b000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_6002b000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_6002b000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_6002b000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_6002b000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_6002b000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_can_6002b000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_status_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_compatible {"espressif,esp32-twai"}
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0 "espressif,esp32-twai"
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_twai
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TWAI
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, compatible, 0)
#define DT_N_S_soc_S_can_6002b000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, compatible, 0)
#define DT_N_S_soc_S_can_6002b000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_compatible_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_wakeup_source 0
#define DT_N_S_soc_S_can_6002b000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/coretemp@60040058
 *
 * Node identifier: DT_N_S_soc_S_coretemp_60040058
 *
 * Binding (compatible = espressif,esp32-temp):
 *   $ZEPHYR_BASE/dts/bindings/sensor/espressif,esp32-temp.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_coretemp_60040058_PATH "/soc/coretemp@60040058"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_coretemp_60040058_FULL_NAME "coretemp@60040058"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_coretemp_60040058_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_coretemp_60040058_CHILD_IDX 18

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_coretemp_60040058_ORD 33

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_coretemp_60040058_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_coretemp_60040058_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_coretemp_60040058_EXISTS 1
#define DT_N_INST_0_espressif_esp32_temp DT_N_S_soc_S_coretemp_60040058
#define DT_N_NODELABEL_coretemp          DT_N_S_soc_S_coretemp_60040058

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_coretemp_60040058_REG_NUM 1
#define DT_N_S_soc_S_coretemp_60040058_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_REG_IDX_0_VAL_ADDRESS 1610874968 /* 0x60040058 */
#define DT_N_S_soc_S_coretemp_60040058_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_coretemp_60040058_RANGES_NUM 0
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_coretemp_60040058_IRQ_NUM 0
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_MATCHES_espressif_esp32_temp 1
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_MODEL_IDX_0 "esp32-temp"
#define DT_N_S_soc_S_coretemp_60040058_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_coretemp_60040058_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_coretemp_60040058_P_range 2
#define DT_N_S_soc_S_coretemp_60040058_P_range_ENUM_IDX 2
#define DT_N_S_soc_S_coretemp_60040058_P_range_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name "coretemp"
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_STRING_TOKEN coretemp
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_STRING_UPPER_TOKEN CORETEMP
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 0) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 1) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 2) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 3) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 4) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 5) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 6) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 7)
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 7)
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 7, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 7, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_status "disabled"
#define DT_N_S_soc_S_coretemp_60040058_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_coretemp_60040058_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_coretemp_60040058_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_coretemp_60040058_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_coretemp_60040058_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_coretemp_60040058_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_coretemp_60040058, status, 0) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 1) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 2) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 3) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 4) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 5) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 6) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 7)
#define DT_N_S_soc_S_coretemp_60040058_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_coretemp_60040058, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 7)
#define DT_N_S_soc_S_coretemp_60040058_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_coretemp_60040058, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_coretemp_60040058, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_status_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_compatible {"espressif,esp32-temp"}
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0 "espressif,esp32-temp"
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_temp
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TEMP
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_coretemp_60040058, compatible, 0)
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_coretemp_60040058, compatible, 0)
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_coretemp_60040058, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_coretemp_60040058, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_LEN 1
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_reg {1610874968 /* 0x60040058 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_coretemp_60040058_P_reg_IDX_0 1610874968
#define DT_N_S_soc_S_coretemp_60040058_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_reg_IDX_1 4
#define DT_N_S_soc_S_coretemp_60040058_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_coretemp_60040058, reg, 0) \
	fn(DT_N_S_soc_S_coretemp_60040058, reg, 1)
#define DT_N_S_soc_S_coretemp_60040058_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_coretemp_60040058, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, reg, 1)
#define DT_N_S_soc_S_coretemp_60040058_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_coretemp_60040058, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_coretemp_60040058, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_coretemp_60040058, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_coretemp_60040058, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_reg_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_wakeup_source 0
#define DT_N_S_soc_S_coretemp_60040058_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/counter@6001f000
 *
 * Node identifier: DT_N_S_soc_S_counter_6001f000
 *
 * Binding (compatible = espressif,esp32-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_6001f000_PATH "/soc/counter@6001f000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_6001f000_FULL_NAME "counter@6001f000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_6001f000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_counter_6001f000_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_6001f000_ORD 34

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_6001f000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_6001f000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_6001f000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_timer DT_N_S_soc_S_counter_6001f000
#define DT_N_NODELABEL_timer0             DT_N_S_soc_S_counter_6001f000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_6001f000_REG_NUM 1
#define DT_N_S_soc_S_counter_6001f000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_REG_IDX_0_VAL_ADDRESS 1610739712 /* 0x6001f000 */
#define DT_N_S_soc_S_counter_6001f000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_6001f000_RANGES_NUM 0
#define DT_N_S_soc_S_counter_6001f000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_6001f000_IRQ_NUM 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_VAL_irq 32
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_6001f000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_counter_6001f000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_COMPAT_MODEL_IDX_0 "esp32-timer"
#define DT_N_S_soc_S_counter_6001f000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_6001f000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_6001f000_P_group 0
#define DT_N_S_soc_S_counter_6001f000_P_group_ENUM_IDX 0
#define DT_N_S_soc_S_counter_6001f000_P_group_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_index 0
#define DT_N_S_soc_S_counter_6001f000_P_index_ENUM_IDX 0
#define DT_N_S_soc_S_counter_6001f000_P_index_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_prescaler 2
#define DT_N_S_soc_S_counter_6001f000_P_prescaler_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_status "disabled"
#define DT_N_S_soc_S_counter_6001f000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_counter_6001f000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_6001f000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_counter_6001f000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_counter_6001f000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_6001f000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_6001f000, status, 0) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 1) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 2) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 3) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 4) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 5) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 6) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 7)
#define DT_N_S_soc_S_counter_6001f000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_6001f000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 7)
#define DT_N_S_soc_S_counter_6001f000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_6001f000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_6001f000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_timer
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TIMER
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_6001f000, compatible, 0)
#define DT_N_S_soc_S_counter_6001f000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_6001f000, compatible, 0)
#define DT_N_S_soc_S_counter_6001f000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_6001f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_6001f000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_reg {1610739712 /* 0x6001f000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_6001f000_P_reg_IDX_0 1610739712
#define DT_N_S_soc_S_counter_6001f000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_6001f000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_6001f000, reg, 0) \
	fn(DT_N_S_soc_S_counter_6001f000, reg, 1)
#define DT_N_S_soc_S_counter_6001f000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_6001f000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, reg, 1)
#define DT_N_S_soc_S_counter_6001f000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_6001f000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_6001f000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_6001f000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupts {32 /* 0x20 */}
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_IDX_0 32
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_6001f000, interrupts, 0)
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_6001f000, interrupts, 0)
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_6001f000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_wakeup_source 0
#define DT_N_S_soc_S_counter_6001f000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/counter@60020000
 *
 * Node identifier: DT_N_S_soc_S_counter_60020000
 *
 * Binding (compatible = espressif,esp32-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_60020000_PATH "/soc/counter@60020000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_60020000_FULL_NAME "counter@60020000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_60020000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_counter_60020000_CHILD_IDX 12

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_60020000_ORD 35

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_60020000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_60020000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_60020000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_timer DT_N_S_soc_S_counter_60020000
#define DT_N_NODELABEL_timer1             DT_N_S_soc_S_counter_60020000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_60020000_REG_NUM 1
#define DT_N_S_soc_S_counter_60020000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_REG_IDX_0_VAL_ADDRESS 1610743808 /* 0x60020000 */
#define DT_N_S_soc_S_counter_60020000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_60020000_RANGES_NUM 0
#define DT_N_S_soc_S_counter_60020000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_60020000_IRQ_NUM 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_VAL_irq 34
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_60020000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_counter_60020000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_COMPAT_MODEL_IDX_0 "esp32-timer"
#define DT_N_S_soc_S_counter_60020000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_60020000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_60020000_P_group 1
#define DT_N_S_soc_S_counter_60020000_P_group_ENUM_IDX 1
#define DT_N_S_soc_S_counter_60020000_P_group_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_index 0
#define DT_N_S_soc_S_counter_60020000_P_index_ENUM_IDX 0
#define DT_N_S_soc_S_counter_60020000_P_index_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_prescaler 2
#define DT_N_S_soc_S_counter_60020000_P_prescaler_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_status "disabled"
#define DT_N_S_soc_S_counter_60020000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_counter_60020000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_60020000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_counter_60020000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_counter_60020000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_counter_60020000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_60020000, status, 0) \
	fn(DT_N_S_soc_S_counter_60020000, status, 1) \
	fn(DT_N_S_soc_S_counter_60020000, status, 2) \
	fn(DT_N_S_soc_S_counter_60020000, status, 3) \
	fn(DT_N_S_soc_S_counter_60020000, status, 4) \
	fn(DT_N_S_soc_S_counter_60020000, status, 5) \
	fn(DT_N_S_soc_S_counter_60020000, status, 6) \
	fn(DT_N_S_soc_S_counter_60020000, status, 7)
#define DT_N_S_soc_S_counter_60020000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_60020000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 7)
#define DT_N_S_soc_S_counter_60020000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_60020000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_60020000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_60020000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_60020000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_60020000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_60020000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_60020000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_60020000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_60020000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_timer
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TIMER
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_60020000, compatible, 0)
#define DT_N_S_soc_S_counter_60020000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_60020000, compatible, 0)
#define DT_N_S_soc_S_counter_60020000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_60020000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_60020000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_60020000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_reg {1610743808 /* 0x60020000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_60020000_P_reg_IDX_0 1610743808
#define DT_N_S_soc_S_counter_60020000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_60020000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_60020000, reg, 0) \
	fn(DT_N_S_soc_S_counter_60020000, reg, 1)
#define DT_N_S_soc_S_counter_60020000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_60020000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, reg, 1)
#define DT_N_S_soc_S_counter_60020000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_60020000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_60020000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_60020000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_counter_60020000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupts {34 /* 0x22 */}
#define DT_N_S_soc_S_counter_60020000_P_interrupts_IDX_0 34
#define DT_N_S_soc_S_counter_60020000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_60020000, interrupts, 0)
#define DT_N_S_soc_S_counter_60020000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_60020000, interrupts, 0)
#define DT_N_S_soc_S_counter_60020000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_60020000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_60020000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_wakeup_source 0
#define DT_N_S_soc_S_counter_60020000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/dma@6003f000
 *
 * Node identifier: DT_N_S_soc_S_dma_6003f000
 *
 * Binding (compatible = espressif,esp32-gdma):
 *   $ZEPHYR_BASE/dts/bindings/dma/espressif,esp32-gdma.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_dma_6003f000_PATH "/soc/dma@6003f000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_dma_6003f000_FULL_NAME "dma@6003f000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_dma_6003f000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_dma_6003f000_CHILD_IDX 21

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_dma_6003f000_ORD 36

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_dma_6003f000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_dma_6003f000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_dma_6003f000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_gdma DT_N_S_soc_S_dma_6003f000
#define DT_N_NODELABEL_dma               DT_N_S_soc_S_dma_6003f000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_dma_6003f000_REG_NUM 1
#define DT_N_S_soc_S_dma_6003f000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_REG_IDX_0_VAL_ADDRESS 1610870784 /* 0x6003f000 */
#define DT_N_S_soc_S_dma_6003f000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_dma_6003f000_RANGES_NUM 0
#define DT_N_S_soc_S_dma_6003f000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_dma_6003f000_IRQ_NUM 3
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_VAL_irq 44
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_VAL_irq 45
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_VAL_irq 46
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_COMPAT_MATCHES_espressif_esp32_gdma 1
#define DT_N_S_soc_S_dma_6003f000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_dma_6003f000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_COMPAT_MODEL_IDX_0 "esp32-gdma"
#define DT_N_S_soc_S_dma_6003f000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_dma_6003f000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_dma_6003f000_P_dma_channels 6
#define DT_N_S_soc_S_dma_6003f000_P_dma_channels_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_dma_buf_addr_alignment 4
#define DT_N_S_soc_S_dma_6003f000_P_dma_buf_addr_alignment_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_status "disabled"
#define DT_N_S_soc_S_dma_6003f000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_dma_6003f000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_dma_6003f000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_dma_6003f000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_dma_6003f000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_dma_6003f000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, status, 0) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 1) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 2) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 3) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 4) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 5) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 6) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 7)
#define DT_N_S_soc_S_dma_6003f000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 7)
#define DT_N_S_soc_S_dma_6003f000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_status_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_compatible {"espressif,esp32-gdma"}
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0 "espressif,esp32-gdma"
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_gdma
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_GDMA
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, compatible, 0)
#define DT_N_S_soc_S_dma_6003f000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, compatible, 0)
#define DT_N_S_soc_S_dma_6003f000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_compatible_LEN 1
#define DT_N_S_soc_S_dma_6003f000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_reg {1610870784 /* 0x6003f000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_dma_6003f000_P_reg_IDX_0 1610870784
#define DT_N_S_soc_S_dma_6003f000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_dma_6003f000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, reg, 0) \
	fn(DT_N_S_soc_S_dma_6003f000, reg, 1)
#define DT_N_S_soc_S_dma_6003f000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, reg, 1)
#define DT_N_S_soc_S_dma_6003f000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_reg_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts {44 /* 0x2c */, 45 /* 0x2d */, 46 /* 0x2e */}
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_0 44
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_1 45
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_2 46
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, interrupts, 0) \
	fn(DT_N_S_soc_S_dma_6003f000, interrupts, 1) \
	fn(DT_N_S_soc_S_dma_6003f000, interrupts, 2)
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, interrupts, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, interrupts, 2)
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_6003f000, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, interrupts, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dma_6003f000, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_dma_6003f000_P_clocks_IDX_0_VAL_offset 24
#define DT_N_S_soc_S_dma_6003f000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, clocks, 0)
#define DT_N_S_soc_S_dma_6003f000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, clocks, 0)
#define DT_N_S_soc_S_dma_6003f000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_clocks_LEN 1
#define DT_N_S_soc_S_dma_6003f000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_wakeup_source 0
#define DT_N_S_soc_S_dma_6003f000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/i2c@60013000
 *
 * Node identifier: DT_N_S_soc_S_i2c_60013000
 *
 * Binding (compatible = espressif,esp32-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/espressif,esp32-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_60013000_PATH "/soc/i2c@60013000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_60013000_FULL_NAME "i2c@60013000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_60013000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_60013000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_60013000_ORD 37

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_60013000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	19, /* /pin-controller/i2c0_default */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_60013000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_60013000_EXISTS 1
#define DT_N_ALIAS_i2c_0                DT_N_S_soc_S_i2c_60013000
#define DT_N_INST_0_espressif_esp32_i2c DT_N_S_soc_S_i2c_60013000
#define DT_N_NODELABEL_i2c0             DT_N_S_soc_S_i2c_60013000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_60013000_REG_NUM 1
#define DT_N_S_soc_S_i2c_60013000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_REG_IDX_0_VAL_ADDRESS 1610690560 /* 0x60013000 */
#define DT_N_S_soc_S_i2c_60013000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_60013000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_60013000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_60013000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_VAL_irq 29
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_COMPAT_MATCHES_espressif_esp32_i2c 1
#define DT_N_S_soc_S_i2c_60013000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_i2c_60013000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_COMPAT_MODEL_IDX_0 "esp32-i2c"
#define DT_N_S_soc_S_i2c_60013000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_NUM 1
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_i2c0_default

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_60013000_P_reg {1610690560 /* 0x60013000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_60013000_P_reg_IDX_0 1610690560
#define DT_N_S_soc_S_i2c_60013000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_60013000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_60013000, reg, 1)
#define DT_N_S_soc_S_i2c_60013000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_60013000, reg, 1)
#define DT_N_S_soc_S_i2c_60013000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_60013000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_60013000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_i2c0_default
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_i2c0_default
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_tx_lsb 0
#define DT_N_S_soc_S_i2c_60013000_P_tx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_rx_lsb 0
#define DT_N_S_soc_S_i2c_60013000_P_rx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_60013000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_status "okay"
#define DT_N_S_soc_S_i2c_60013000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_i2c_60013000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_60013000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_i2c_60013000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_i2c_60013000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_60013000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, status, 0) \
	fn(DT_N_S_soc_S_i2c_60013000, status, 1) \
	fn(DT_N_S_soc_S_i2c_60013000, status, 2) \
	fn(DT_N_S_soc_S_i2c_60013000, status, 3)
#define DT_N_S_soc_S_i2c_60013000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_60013000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_60013000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_60013000, status, 3)
#define DT_N_S_soc_S_i2c_60013000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_60013000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_60013000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_60013000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_60013000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_60013000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_60013000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_compatible {"espressif,esp32-i2c"}
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0 "espressif,esp32-i2c"
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_i2c
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_I2C
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, compatible, 0)
#define DT_N_S_soc_S_i2c_60013000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, compatible, 0)
#define DT_N_S_soc_S_i2c_60013000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupts {29 /* 0x1d */}
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_IDX_0 29
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, interrupts, 0)
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, interrupts, 0)
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_i2c_60013000_P_clocks_IDX_0_VAL_offset 4
#define DT_N_S_soc_S_i2c_60013000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, clocks, 0)
#define DT_N_S_soc_S_i2c_60013000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, clocks, 0)
#define DT_N_S_soc_S_i2c_60013000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_60013000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/ledc@60019000
 *
 * Node identifier: DT_N_S_soc_S_ledc_60019000
 *
 * Binding (compatible = espressif,esp32-ledc):
 *   $ZEPHYR_BASE/dts/bindings/pwm/espressif,esp32-ledc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ledc_60019000_PATH "/soc/ledc@60019000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ledc_60019000_FULL_NAME "ledc@60019000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ledc_60019000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ledc_60019000_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ledc_60019000_ORD 38

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ledc_60019000_REQUIRES_ORDS \
	5, /* /soc */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ledc_60019000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ledc_60019000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_ledc DT_N_S_soc_S_ledc_60019000
#define DT_N_NODELABEL_ledc0             DT_N_S_soc_S_ledc_60019000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ledc_60019000_REG_NUM 1
#define DT_N_S_soc_S_ledc_60019000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_REG_IDX_0_VAL_ADDRESS 1610715136 /* 0x60019000 */
#define DT_N_S_soc_S_ledc_60019000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_ledc_60019000_RANGES_NUM 0
#define DT_N_S_soc_S_ledc_60019000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ledc_60019000_IRQ_NUM 0
#define DT_N_S_soc_S_ledc_60019000_COMPAT_MATCHES_espressif_esp32_ledc 1
#define DT_N_S_soc_S_ledc_60019000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_ledc_60019000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_COMPAT_MODEL_IDX_0 "esp32-ledc"
#define DT_N_S_soc_S_ledc_60019000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ledc_60019000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ledc_60019000_P_status "disabled"
#define DT_N_S_soc_S_ledc_60019000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ledc_60019000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ledc_60019000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_ledc_60019000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_ledc_60019000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ledc_60019000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_60019000, status, 0) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 1) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 2) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 3) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 4) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 5) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 6) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 7)
#define DT_N_S_soc_S_ledc_60019000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_60019000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 7)
#define DT_N_S_soc_S_ledc_60019000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_60019000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_60019000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_60019000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_status_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_compatible {"espressif,esp32-ledc"}
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0 "espressif,esp32-ledc"
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_ledc
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_LEDC
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_60019000, compatible, 0)
#define DT_N_S_soc_S_ledc_60019000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_60019000, compatible, 0)
#define DT_N_S_soc_S_ledc_60019000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_60019000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_60019000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_compatible_LEN 1
#define DT_N_S_soc_S_ledc_60019000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_reg {1610715136 /* 0x60019000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_ledc_60019000_P_reg_IDX_0 1610715136
#define DT_N_S_soc_S_ledc_60019000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_ledc_60019000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_60019000, reg, 0) \
	fn(DT_N_S_soc_S_ledc_60019000, reg, 1)
#define DT_N_S_soc_S_ledc_60019000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_60019000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, reg, 1)
#define DT_N_S_soc_S_ledc_60019000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_60019000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ledc_60019000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_60019000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ledc_60019000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_ledc_60019000_P_clocks_IDX_0_VAL_offset 0
#define DT_N_S_soc_S_ledc_60019000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_60019000, clocks, 0)
#define DT_N_S_soc_S_ledc_60019000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_60019000, clocks, 0)
#define DT_N_S_soc_S_ledc_60019000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_60019000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_60019000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_clocks_LEN 1
#define DT_N_S_soc_S_ledc_60019000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_wakeup_source 0
#define DT_N_S_soc_S_ledc_60019000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/memory@3fc7c000
 *
 * Node identifier: DT_N_S_soc_S_memory_3fc7c000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_3fc7c000_PATH "/soc/memory@3fc7c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_3fc7c000_FULL_NAME "memory@3fc7c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_3fc7c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_3fc7c000_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_3fc7c000_ORD 39

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_3fc7c000_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_3fc7c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_3fc7c000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_memory_3fc7c000
#define DT_N_NODELABEL_sram0  DT_N_S_soc_S_memory_3fc7c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_3fc7c000_REG_NUM 1
#define DT_N_S_soc_S_memory_3fc7c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc7c000_REG_IDX_0_VAL_ADDRESS 1070055424 /* 0x3fc7c000 */
#define DT_N_S_soc_S_memory_3fc7c000_REG_IDX_0_VAL_SIZE 327680 /* 0x50000 */
#define DT_N_S_soc_S_memory_3fc7c000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_3fc7c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_3fc7c000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_3fc7c000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_3fc7c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_3fc7c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_3fc7c000_P_reg {1070055424 /* 0x3fc7c000 */, 327680 /* 0x50000 */}
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_IDX_0 1070055424
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_IDX_1 327680
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3fc7c000, reg, 0) \
	fn(DT_N_S_soc_S_memory_3fc7c000, reg, 1)
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3fc7c000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_3fc7c000, reg, 1)
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3fc7c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_memory_3fc7c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3fc7c000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_3fc7c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc7c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3fc7c000, compatible, 0)
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3fc7c000, compatible, 0)
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3fc7c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3fc7c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_3fc7c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_3fc7c000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_3fc7c000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@60024000
 *
 * Node identifier: DT_N_S_soc_S_spi_60024000
 *
 * Binding (compatible = espressif,esp32-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/espressif,esp32-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_60024000_PATH "/soc/spi@60024000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_60024000_FULL_NAME "spi@60024000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_60024000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_60024000_CHILD_IDX 15

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_60024000_ORD 40

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_60024000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	21, /* /pin-controller/spim2_default */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_60024000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_60024000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_spi DT_N_S_soc_S_spi_60024000
#define DT_N_NODELABEL_spi2             DT_N_S_soc_S_spi_60024000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_60024000_REG_NUM 1
#define DT_N_S_soc_S_spi_60024000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_REG_IDX_0_VAL_ADDRESS 1610760192 /* 0x60024000 */
#define DT_N_S_soc_S_spi_60024000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_60024000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_60024000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_60024000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_VAL_irq 19
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_COMPAT_MATCHES_espressif_esp32_spi 1
#define DT_N_S_soc_S_spi_60024000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_spi_60024000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_COMPAT_MODEL_IDX_0 "esp32-spi"
#define DT_N_S_soc_S_spi_60024000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_60024000_PINCTRL_NUM 1
#define DT_N_S_soc_S_spi_60024000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_spi_60024000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_60024000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_spi_60024000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_spim2_default

/* Generic property macros: */
#define DT_N_S_soc_S_spi_60024000_P_reg {1610760192 /* 0x60024000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_60024000_P_reg_IDX_0 1610760192
#define DT_N_S_soc_S_spi_60024000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_60024000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, reg, 0) \
	fn(DT_N_S_soc_S_spi_60024000, reg, 1)
#define DT_N_S_soc_S_spi_60024000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_60024000, reg, 1)
#define DT_N_S_soc_S_spi_60024000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_60024000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_60024000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_spim2_default
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_spim2_default
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_half_duplex 0
#define DT_N_S_soc_S_spi_60024000_P_half_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_dummy_comp 0
#define DT_N_S_soc_S_spi_60024000_P_dummy_comp_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_sio 0
#define DT_N_S_soc_S_spi_60024000_P_sio_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_dma_enabled 0
#define DT_N_S_soc_S_spi_60024000_P_dma_enabled_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_dma_clk 24
#define DT_N_S_soc_S_spi_60024000_P_dma_clk_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_dma_host 1
#define DT_N_S_soc_S_spi_60024000_P_dma_host_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_clk_as_cs 0
#define DT_N_S_soc_S_spi_60024000_P_clk_as_cs_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_positive_cs 0
#define DT_N_S_soc_S_spi_60024000_P_positive_cs_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_use_iomux 0
#define DT_N_S_soc_S_spi_60024000_P_use_iomux_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_status "okay"
#define DT_N_S_soc_S_spi_60024000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_60024000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_60024000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_60024000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_60024000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_60024000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, status, 0) \
	fn(DT_N_S_soc_S_spi_60024000, status, 1) \
	fn(DT_N_S_soc_S_spi_60024000, status, 2) \
	fn(DT_N_S_soc_S_spi_60024000, status, 3)
#define DT_N_S_soc_S_spi_60024000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_60024000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_60024000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_60024000, status, 3)
#define DT_N_S_soc_S_spi_60024000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_60024000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_60024000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_60024000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_60024000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_60024000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_60024000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_compatible {"espressif,esp32-spi"}
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0 "espressif,esp32-spi"
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_spi
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_SPI
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, compatible, 0)
#define DT_N_S_soc_S_spi_60024000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, compatible, 0)
#define DT_N_S_soc_S_spi_60024000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupts {19 /* 0x13 */}
#define DT_N_S_soc_S_spi_60024000_P_interrupts_IDX_0 19
#define DT_N_S_soc_S_spi_60024000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, interrupts, 0)
#define DT_N_S_soc_S_spi_60024000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, interrupts, 0)
#define DT_N_S_soc_S_spi_60024000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_spi_60024000_P_clocks_IDX_0_VAL_offset 11
#define DT_N_S_soc_S_spi_60024000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, clocks, 0)
#define DT_N_S_soc_S_spi_60024000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, clocks, 0)
#define DT_N_S_soc_S_spi_60024000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_60024000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/systimer@60023000
 *
 * Node identifier: DT_N_S_soc_S_systimer_60023000
 *
 * Binding (compatible = espressif,esp32-systimer):
 *   $ZEPHYR_BASE/dts/bindings/timer/espressif,esp32-systimer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_systimer_60023000_PATH "/soc/systimer@60023000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_systimer_60023000_FULL_NAME "systimer@60023000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_systimer_60023000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_systimer_60023000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_systimer_60023000_ORD 41

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_systimer_60023000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_systimer_60023000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_systimer_60023000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_systimer DT_N_S_soc_S_systimer_60023000
#define DT_N_NODELABEL_systimer0             DT_N_S_soc_S_systimer_60023000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_systimer_60023000_REG_NUM 1
#define DT_N_S_soc_S_systimer_60023000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_REG_IDX_0_VAL_ADDRESS 1610756096 /* 0x60023000 */
#define DT_N_S_soc_S_systimer_60023000_REG_IDX_0_VAL_SIZE 128 /* 0x80 */
#define DT_N_S_soc_S_systimer_60023000_RANGES_NUM 0
#define DT_N_S_soc_S_systimer_60023000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_systimer_60023000_IRQ_NUM 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_VAL_irq 37
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_COMPAT_MATCHES_espressif_esp32_systimer 1
#define DT_N_S_soc_S_systimer_60023000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_systimer_60023000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_COMPAT_MODEL_IDX_0 "esp32-systimer"
#define DT_N_S_soc_S_systimer_60023000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_systimer_60023000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_systimer_60023000_P_reg {1610756096 /* 0x60023000 */, 128 /* 0x80 */}
#define DT_N_S_soc_S_systimer_60023000_P_reg_IDX_0 1610756096
#define DT_N_S_soc_S_systimer_60023000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_reg_IDX_1 128
#define DT_N_S_soc_S_systimer_60023000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_systimer_60023000, reg, 0) \
	fn(DT_N_S_soc_S_systimer_60023000, reg, 1)
#define DT_N_S_soc_S_systimer_60023000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_systimer_60023000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_systimer_60023000, reg, 1)
#define DT_N_S_soc_S_systimer_60023000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_systimer_60023000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_systimer_60023000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_systimer_60023000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_reg_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupts {37 /* 0x25 */}
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_IDX_0 37
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_systimer_60023000, interrupts, 0)
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_systimer_60023000, interrupts, 0)
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_systimer_60023000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_status "okay"
#define DT_N_S_soc_S_systimer_60023000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_systimer_60023000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_systimer_60023000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_systimer_60023000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_systimer_60023000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_systimer_60023000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_systimer_60023000, status, 0) \
	fn(DT_N_S_soc_S_systimer_60023000, status, 1) \
	fn(DT_N_S_soc_S_systimer_60023000, status, 2) \
	fn(DT_N_S_soc_S_systimer_60023000, status, 3)
#define DT_N_S_soc_S_systimer_60023000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_systimer_60023000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_systimer_60023000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_systimer_60023000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_systimer_60023000, status, 3)
#define DT_N_S_soc_S_systimer_60023000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_systimer_60023000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_systimer_60023000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_systimer_60023000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_systimer_60023000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_systimer_60023000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_systimer_60023000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_systimer_60023000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_status_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_compatible {"espressif,esp32-systimer"}
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0 "espressif,esp32-systimer"
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_systimer
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_SYSTIMER
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_systimer_60023000, compatible, 0)
#define DT_N_S_soc_S_systimer_60023000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_systimer_60023000, compatible, 0)
#define DT_N_S_soc_S_systimer_60023000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_systimer_60023000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_compatible_LEN 1
#define DT_N_S_soc_S_systimer_60023000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_wakeup_source 0
#define DT_N_S_soc_S_systimer_60023000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/trng@3ff700b0
 *
 * Node identifier: DT_N_S_soc_S_trng_3ff700b0
 *
 * Binding (compatible = espressif,esp32-trng):
 *   $ZEPHYR_BASE/dts/bindings/rng/espressif,esp32-trng.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_trng_3ff700b0_PATH "/soc/trng@3ff700b0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_trng_3ff700b0_FULL_NAME "trng@3ff700b0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_trng_3ff700b0_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_trng_3ff700b0_CHILD_IDX 13

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_trng_3ff700b0_ORD 42

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_trng_3ff700b0_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_trng_3ff700b0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_trng_3ff700b0_EXISTS 1
#define DT_N_INST_0_espressif_esp32_trng DT_N_S_soc_S_trng_3ff700b0
#define DT_N_NODELABEL_trng0             DT_N_S_soc_S_trng_3ff700b0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_trng_3ff700b0_REG_NUM 1
#define DT_N_S_soc_S_trng_3ff700b0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_REG_IDX_0_VAL_ADDRESS 1073152176 /* 0x3ff700b0 */
#define DT_N_S_soc_S_trng_3ff700b0_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_trng_3ff700b0_RANGES_NUM 0
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_trng_3ff700b0_IRQ_NUM 0
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_MATCHES_espressif_esp32_trng 1
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_MODEL_IDX_0 "esp32-trng"
#define DT_N_S_soc_S_trng_3ff700b0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_trng_3ff700b0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_trng_3ff700b0_P_reg {1073152176 /* 0x3ff700b0 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_IDX_0 1073152176
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_IDX_1 4
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff700b0, reg, 0) \
	fn(DT_N_S_soc_S_trng_3ff700b0, reg, 1)
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_trng_3ff700b0, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_trng_3ff700b0, reg, 1)
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff700b0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff700b0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_trng_3ff700b0, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_trng_3ff700b0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_status "okay"
#define DT_N_S_soc_S_trng_3ff700b0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_trng_3ff700b0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_trng_3ff700b0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_trng_3ff700b0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_trng_3ff700b0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_trng_3ff700b0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff700b0, status, 0) \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 1) \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 2) \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 3)
#define DT_N_S_soc_S_trng_3ff700b0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_trng_3ff700b0, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 3)
#define DT_N_S_soc_S_trng_3ff700b0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff700b0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_trng_3ff700b0, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_trng_3ff700b0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_status_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible {"espressif,esp32-trng"}
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0 "espressif,esp32-trng"
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_trng
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TRNG
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff700b0, compatible, 0)
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_trng_3ff700b0, compatible, 0)
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff700b0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_trng_3ff700b0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_LEN 1
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_wakeup_source 0
#define DT_N_S_soc_S_trng_3ff700b0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@60000000
 *
 * Node identifier: DT_N_S_soc_S_uart_60000000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_60000000_PATH "/soc/uart@60000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_60000000_FULL_NAME "uart@60000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_60000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_60000000_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_60000000_ORD 43

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_60000000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /pin-controller/uart0_default */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_60000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_60000000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_uart DT_N_S_soc_S_uart_60000000
#define DT_N_NODELABEL_uart0             DT_N_S_soc_S_uart_60000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_60000000_REG_NUM 1
#define DT_N_S_soc_S_uart_60000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_REG_IDX_0_VAL_ADDRESS 1610612736 /* 0x60000000 */
#define DT_N_S_soc_S_uart_60000000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_60000000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_60000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_60000000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_VAL_irq 21
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_60000000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_60000000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_COMPAT_MODEL_IDX_0 "esp32-uart"
#define DT_N_S_soc_S_uart_60000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_60000000_PINCTRL_NUM 1
#define DT_N_S_soc_S_uart_60000000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_uart_60000000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_60000000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_uart_60000000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_uart0_default

/* Generic property macros: */
#define DT_N_S_soc_S_uart_60000000_P_reg {1610612736 /* 0x60000000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_60000000_P_reg_IDX_0 1610612736
#define DT_N_S_soc_S_uart_60000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_60000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, reg, 0) \
	fn(DT_N_S_soc_S_uart_60000000, reg, 1)
#define DT_N_S_soc_S_uart_60000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60000000, reg, 1)
#define DT_N_S_soc_S_uart_60000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_uart0_default
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_uart0_default
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_current_speed 115200
#define DT_N_S_soc_S_uart_60000000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_60000000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_status "okay"
#define DT_N_S_soc_S_uart_60000000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_60000000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_60000000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_60000000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_60000000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_60000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, status, 0) \
	fn(DT_N_S_soc_S_uart_60000000, status, 1) \
	fn(DT_N_S_soc_S_uart_60000000, status, 2) \
	fn(DT_N_S_soc_S_uart_60000000, status, 3)
#define DT_N_S_soc_S_uart_60000000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60000000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60000000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60000000, status, 3)
#define DT_N_S_soc_S_uart_60000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60000000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60000000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60000000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60000000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60000000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60000000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_uart
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_UART
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, compatible, 0)
#define DT_N_S_soc_S_uart_60000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, compatible, 0)
#define DT_N_S_soc_S_uart_60000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupts {21 /* 0x15 */}
#define DT_N_S_soc_S_uart_60000000_P_interrupts_IDX_0 21
#define DT_N_S_soc_S_uart_60000000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, interrupts, 0)
#define DT_N_S_soc_S_uart_60000000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, interrupts, 0)
#define DT_N_S_soc_S_uart_60000000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_uart_60000000_P_clocks_IDX_0_VAL_offset 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, clocks, 0)
#define DT_N_S_soc_S_uart_60000000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, clocks, 0)
#define DT_N_S_soc_S_uart_60000000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_60000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@60010000
 *
 * Node identifier: DT_N_S_soc_S_uart_60010000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_60010000_PATH "/soc/uart@60010000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_60010000_FULL_NAME "uart@60010000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_60010000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_60010000_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_60010000_ORD 44

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_60010000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_60010000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_60010000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_uart DT_N_S_soc_S_uart_60010000
#define DT_N_NODELABEL_uart1             DT_N_S_soc_S_uart_60010000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_60010000_REG_NUM 1
#define DT_N_S_soc_S_uart_60010000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_REG_IDX_0_VAL_ADDRESS 1610678272 /* 0x60010000 */
#define DT_N_S_soc_S_uart_60010000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_60010000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_60010000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_60010000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_VAL_irq 22
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_60010000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_60010000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_COMPAT_MODEL_IDX_0 "esp32-uart"
#define DT_N_S_soc_S_uart_60010000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_60010000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_60010000_P_reg {1610678272 /* 0x60010000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_60010000_P_reg_IDX_0 1610678272
#define DT_N_S_soc_S_uart_60010000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_60010000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, reg, 0) \
	fn(DT_N_S_soc_S_uart_60010000, reg, 1)
#define DT_N_S_soc_S_uart_60010000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, reg, 1)
#define DT_N_S_soc_S_uart_60010000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60010000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_current_speed 115200
#define DT_N_S_soc_S_uart_60010000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_60010000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_status "disabled"
#define DT_N_S_soc_S_uart_60010000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_60010000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_60010000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_60010000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_60010000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_60010000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, status, 0) \
	fn(DT_N_S_soc_S_uart_60010000, status, 1) \
	fn(DT_N_S_soc_S_uart_60010000, status, 2) \
	fn(DT_N_S_soc_S_uart_60010000, status, 3) \
	fn(DT_N_S_soc_S_uart_60010000, status, 4) \
	fn(DT_N_S_soc_S_uart_60010000, status, 5) \
	fn(DT_N_S_soc_S_uart_60010000, status, 6) \
	fn(DT_N_S_soc_S_uart_60010000, status, 7)
#define DT_N_S_soc_S_uart_60010000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 7)
#define DT_N_S_soc_S_uart_60010000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60010000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60010000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60010000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60010000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60010000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60010000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60010000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60010000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_uart
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_UART
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, compatible, 0)
#define DT_N_S_soc_S_uart_60010000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, compatible, 0)
#define DT_N_S_soc_S_uart_60010000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_60010000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupts {22 /* 0x16 */}
#define DT_N_S_soc_S_uart_60010000_P_interrupts_IDX_0 22
#define DT_N_S_soc_S_uart_60010000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, interrupts, 0)
#define DT_N_S_soc_S_uart_60010000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, interrupts, 0)
#define DT_N_S_soc_S_uart_60010000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_uart_60010000_P_clocks_IDX_0_VAL_offset 2
#define DT_N_S_soc_S_uart_60010000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, clocks, 0)
#define DT_N_S_soc_S_uart_60010000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, clocks, 0)
#define DT_N_S_soc_S_uart_60010000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_60010000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_60010000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@60043000
 *
 * Node identifier: DT_N_S_soc_S_uart_60043000
 *
 * Binding (compatible = espressif,esp32-usb-serial):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-usb-serial.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_60043000_PATH "/soc/uart@60043000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_60043000_FULL_NAME "uart@60043000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_60043000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_60043000_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_60043000_ORD 45

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_60043000_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_60043000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_60043000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_usb_serial DT_N_S_soc_S_uart_60043000
#define DT_N_NODELABEL_usb_serial              DT_N_S_soc_S_uart_60043000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_60043000_REG_NUM 1
#define DT_N_S_soc_S_uart_60043000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_REG_IDX_0_VAL_ADDRESS 1610887168 /* 0x60043000 */
#define DT_N_S_soc_S_uart_60043000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_60043000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_60043000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_60043000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_VAL_irq 26
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_COMPAT_MATCHES_espressif_esp32_usb_serial 1
#define DT_N_S_soc_S_uart_60043000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_60043000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_COMPAT_MODEL_IDX_0 "esp32-usb-serial"
#define DT_N_S_soc_S_uart_60043000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_60043000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_60043000_P_reg {1610887168 /* 0x60043000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_60043000_P_reg_IDX_0 1610887168
#define DT_N_S_soc_S_uart_60043000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_60043000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, reg, 0) \
	fn(DT_N_S_soc_S_uart_60043000, reg, 1)
#define DT_N_S_soc_S_uart_60043000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60043000, reg, 1)
#define DT_N_S_soc_S_uart_60043000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60043000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60043000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_60043000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_status "okay"
#define DT_N_S_soc_S_uart_60043000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_60043000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_60043000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_60043000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_60043000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_60043000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, status, 0) \
	fn(DT_N_S_soc_S_uart_60043000, status, 1) \
	fn(DT_N_S_soc_S_uart_60043000, status, 2) \
	fn(DT_N_S_soc_S_uart_60043000, status, 3)
#define DT_N_S_soc_S_uart_60043000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60043000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60043000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60043000, status, 3)
#define DT_N_S_soc_S_uart_60043000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60043000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60043000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_60043000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60043000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60043000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_60043000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_compatible {"espressif,esp32-usb-serial"}
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0 "espressif,esp32-usb-serial"
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_usb_serial
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_USB_SERIAL
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, compatible, 0)
#define DT_N_S_soc_S_uart_60043000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, compatible, 0)
#define DT_N_S_soc_S_uart_60043000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_60043000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupts {26 /* 0x1a */}
#define DT_N_S_soc_S_uart_60043000_P_interrupts_IDX_0 26
#define DT_N_S_soc_S_uart_60043000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, interrupts, 0)
#define DT_N_S_soc_S_uart_60043000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, interrupts, 0)
#define DT_N_S_soc_S_uart_60043000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_uart_60043000_P_clocks_IDX_0_VAL_offset 3
#define DT_N_S_soc_S_uart_60043000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, clocks, 0)
#define DT_N_S_soc_S_uart_60043000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, clocks, 0)
#define DT_N_S_soc_S_uart_60043000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_60043000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_60043000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@6001f048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_6001f048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_6001f048_PATH "/soc/watchdog@6001f048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_6001f048_FULL_NAME "watchdog@6001f048"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_6001f048_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_watchdog_6001f048_CHILD_IDX 16

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_6001f048_ORD 46

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_6001f048_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_6001f048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_6001f048_EXISTS 1
#define DT_N_ALIAS_watchdog0                 DT_N_S_soc_S_watchdog_6001f048
#define DT_N_INST_0_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_6001f048
#define DT_N_NODELABEL_wdt0                  DT_N_S_soc_S_watchdog_6001f048

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_6001f048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_6001f048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_REG_IDX_0_VAL_ADDRESS 1610739784 /* 0x6001f048 */
#define DT_N_S_soc_S_watchdog_6001f048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_6001f048_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_NUM 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_VAL_irq 33
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_MODEL_IDX_0 "esp32-watchdog"
#define DT_N_S_soc_S_watchdog_6001f048_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_6001f048_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_6001f048_P_reg {1610739784 /* 0x6001f048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_IDX_0 1610739784
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, reg, 0) \
	fn(DT_N_S_soc_S_watchdog_6001f048, reg, 1)
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_6001f048, reg, 1)
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_6001f048, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_6001f048, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_status "okay"
#define DT_N_S_soc_S_watchdog_6001f048_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_watchdog_6001f048_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_6001f048_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_watchdog_6001f048_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_watchdog_6001f048_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_6001f048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, status, 0) \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 1) \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 2) \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 3)
#define DT_N_S_soc_S_watchdog_6001f048_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 3)
#define DT_N_S_soc_S_watchdog_6001f048_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_6001f048, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_watchdog
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WATCHDOG
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, compatible, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, compatible, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts {33 /* 0x21 */}
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_IDX_0 33
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, interrupts, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, interrupts, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_IDX_0_VAL_offset 6
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, clocks, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, clocks, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_6001f048_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@60020048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_60020048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_60020048_PATH "/soc/watchdog@60020048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_60020048_FULL_NAME "watchdog@60020048"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_60020048_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_watchdog_60020048_CHILD_IDX 17

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_60020048_ORD 47

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_60020048_REQUIRES_ORDS \
	5, /* /soc */ \
	6, /* /soc/interrupt-controller@600c2000 */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_60020048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_60020048_EXISTS 1
#define DT_N_INST_1_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_60020048
#define DT_N_NODELABEL_wdt1                  DT_N_S_soc_S_watchdog_60020048

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_60020048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_60020048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_REG_IDX_0_VAL_ADDRESS 1610743880 /* 0x60020048 */
#define DT_N_S_soc_S_watchdog_60020048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_60020048_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_60020048_IRQ_NUM 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_VAL_irq 35
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_MODEL_IDX_0 "esp32-watchdog"
#define DT_N_S_soc_S_watchdog_60020048_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_60020048_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_60020048_P_reg {1610743880 /* 0x60020048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_60020048_P_reg_IDX_0 1610743880
#define DT_N_S_soc_S_watchdog_60020048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_60020048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, reg, 0) \
	fn(DT_N_S_soc_S_watchdog_60020048, reg, 1)
#define DT_N_S_soc_S_watchdog_60020048_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, reg, 1)
#define DT_N_S_soc_S_watchdog_60020048_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_60020048, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_status "disabled"
#define DT_N_S_soc_S_watchdog_60020048_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_watchdog_60020048_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_watchdog_60020048_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_watchdog_60020048_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_watchdog_60020048_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_watchdog_60020048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, status, 0) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 1) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 2) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 3) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 4) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 5) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 6) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 7)
#define DT_N_S_soc_S_watchdog_60020048_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 7)
#define DT_N_S_soc_S_watchdog_60020048_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_watchdog_60020048, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_watchdog
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WATCHDOG
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, compatible, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, compatible, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts {35 /* 0x23 */}
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_IDX_0 35
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, interrupts, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, interrupts, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_IDX_0_VAL_offset 7
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, clocks, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, clocks, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_60020048_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000
 *
 * Binding (compatible = espressif,esp32-flash-controller):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/espressif,esp32-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_PATH "/soc/flash-controller@60002000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_FULL_NAME "flash-controller@60002000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_ORD 48

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_SUPPORTS_ORDS \
	49, /* /soc/flash-controller@60002000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_flash_controller DT_N_S_soc_S_flash_controller_60002000
#define DT_N_NODELABEL_flash                         DT_N_S_soc_S_flash_controller_60002000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_REG_IDX_0_VAL_ADDRESS 1610620928 /* 0x60002000 */
#define DT_N_S_soc_S_flash_controller_60002000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_60002000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_MATCHES_espressif_esp32_flash_controller 1
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_MODEL_IDX_0 "esp32-flash-controller"
#define DT_N_S_soc_S_flash_controller_60002000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_P_reg {1610620928 /* 0x60002000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_IDX_0 1610620928
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible {"espressif,esp32-flash-controller"}
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0 "espressif,esp32-flash-controller"
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_flash_controller
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_FLASH_CONTROLLER
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_60002000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_PATH "/soc/flash-controller@60002000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@60002000) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_60002000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_ORD 49

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REQUIRES_ORDS \
	48, /* /soc/flash-controller@60002000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_SUPPORTS_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_60002000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_60002000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REG_IDX_0_VAL_SIZE 4194304 /* 0x400000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_erase_block_size 4096
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_write_block_size 4
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_write_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status "okay"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 1) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 2) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 3)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 3)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_status_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg {0 /* 0x0 */, 4194304 /* 0x400000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_IDX_1 4194304
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_PATH "/soc/flash-controller@60002000/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/soc/flash-controller@60002000/flash@0) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_ORD 50

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_REQUIRES_ORDS \
	49, /* /soc/flash-controller@60002000/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_SUPPORTS_ORDS \
	51, /* /soc/flash-controller@60002000/flash@0/partitions/partition@0 */ \
	52, /* /soc/flash-controller@60002000/flash@0/partitions/partition@10000 */ \
	53, /* /soc/flash-controller@60002000/flash@0/partitions/partition@110000 */ \
	54, /* /soc/flash-controller@60002000/flash@0/partitions/partition@210000 */ \
	55, /* /soc/flash-controller@60002000/flash@0/partitions/partition@250000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FULL_NAME "partition@0"

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_ORD 51

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_EXISTS 1
#define DT_N_NODELABEL_boot_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE 61440 /* 0xf000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label "mcuboot"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_TOKEN mcuboot
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UPPER_TOKEN MCUBOOT
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 6)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 6)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_read_only 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg {0 /* 0x0 */, 61440 /* 0xf000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1 61440
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@10000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@10000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FULL_NAME "partition@10000"

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_ORD 52

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_VAL_ADDRESS 65536 /* 0x10000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_label "image-0"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_TOKEN image_0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 6)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 6)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg {65536 /* 0x10000 */, 1048576 /* 0x100000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_0 65536
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_1 1048576
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@110000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@110000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FULL_NAME "partition@110000"

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_ORD 53

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_VAL_ADDRESS 1114112 /* 0x110000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_label "image-1"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_label_STRING_TOKEN image_1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 6)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 6)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg {1114112 /* 0x110000 */, 1048576 /* 0x100000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_0 1114112
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_1 1048576
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@210000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@210000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FULL_NAME "partition@210000"

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_ORD 54

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_EXISTS 1
#define DT_N_NODELABEL_scratch_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_VAL_ADDRESS 2162688 /* 0x210000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_REG_IDX_0_VAL_SIZE 262144 /* 0x40000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_PARTITION_ID 3

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_label "image-scratch"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_label_STRING_TOKEN image_scratch
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_label_STRING_UPPER_TOKEN IMAGE_SCRATCH
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 9) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 10) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 11) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 12)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 12)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg {2162688 /* 0x210000 */, 262144 /* 0x40000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_0 2162688
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_1 262144
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@250000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@250000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FULL_NAME "partition@250000"

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_ORD 55

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_VAL_ADDRESS 2424832 /* 0x250000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_REG_IDX_0_VAL_SIZE 24576 /* 0x6000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_PARTITION_ID 4

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_label "storage"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_label_STRING_TOKEN storage
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 6)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 6)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg {2424832 /* 0x250000 */, 24576 /* 0x6000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_0 2424832
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_1 24576
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, reg, 1)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/rtc@60008000/rtc_timer
 *
 * Node identifier: DT_N_S_soc_S_rtc_60008000_S_rtc_timer
 *
 * Binding (compatible = espressif,esp32-rtc-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-rtc-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_PATH "/soc/rtc@60008000/rtc_timer"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FULL_NAME "rtc_timer"

/* Node parent (/soc/rtc@60008000) identifier: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_PARENT DT_N_S_soc_S_rtc_60008000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_ORD 56

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_REQUIRES_ORDS \
	6, /* /soc/interrupt-controller@600c2000 */ \
	31, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_EXISTS 1
#define DT_N_INST_0_espressif_esp32_rtc_timer DT_N_S_soc_S_rtc_60008000_S_rtc_timer
#define DT_N_NODELABEL_rtc_timer              DT_N_S_soc_S_rtc_60008000_S_rtc_timer

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_REG_NUM 0
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_IRQ_NUM 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_IRQ_IDX_0_VAL_irq 27
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_COMPAT_MATCHES_espressif_esp32_rtc_timer 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_COMPAT_MODEL_IDX_0 "esp32-rtc-timer"
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_slow_clk_freq 90000
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_slow_clk_freq_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status "okay"
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 0) \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 1) \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 2) \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 3)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 3)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible {"espressif,esp32-rtc-timer"}
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_IDX_0 "espressif,esp32-rtc-timer"
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_rtc_timer
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_RTC_TIMER
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, compatible, 0)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, compatible, 0)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupts {27 /* 0x1b */}
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupts_IDX_0 27
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, interrupts, 0)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, interrupts, 0)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, interrupts, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_wakeup_source 0
#define DT_N_S_soc_S_rtc_60008000_S_rtc_timer_P_wakeup_source_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_canbus                  DT_N_S_soc_S_can_6002b000
#define DT_CHOSEN_zephyr_canbus_EXISTS           1
#define DT_CHOSEN_zephyr_entropy                 DT_N_S_soc_S_trng_3ff700b0
#define DT_CHOSEN_zephyr_entropy_EXISTS          1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_soc_S_flash_controller_60002000
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_sram                    DT_N_S_soc_S_memory_3fc7c000
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_uart_60000000
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_uart_60000000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_soc_S_flash_controller_60002000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_pin_controller) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1) fn(DT_N_S_pin_controller_S_twai_default) fn(DT_N_S_pin_controller_S_twai_default_S_group1) fn(DT_N_S_wifi) fn(DT_N_S_soc) fn(DT_N_S_soc_S_memory_3fc7c000) fn(DT_N_S_soc_S_interrupt_controller_600c2000) fn(DT_N_S_soc_S_systimer_60023000) fn(DT_N_S_soc_S_rtc_60008000) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000) fn(DT_N_S_soc_S_gpio_60004000) fn(DT_N_S_soc_S_i2c_60013000) fn(DT_N_S_soc_S_uart_60000000) fn(DT_N_S_soc_S_uart_60010000) fn(DT_N_S_soc_S_ledc_60019000) fn(DT_N_S_soc_S_uart_60043000) fn(DT_N_S_soc_S_counter_6001f000) fn(DT_N_S_soc_S_counter_60020000) fn(DT_N_S_soc_S_trng_3ff700b0) fn(DT_N_S_soc_S_can_6002b000) fn(DT_N_S_soc_S_spi_60024000) fn(DT_N_S_soc_S_watchdog_6001f048) fn(DT_N_S_soc_S_watchdog_60020048) fn(DT_N_S_soc_S_coretemp_60040058) fn(DT_N_S_soc_S_adc_60040000) fn(DT_N_S_soc_S_adc_60040004) fn(DT_N_S_soc_S_dma_6003f000) fn(DT_N_S_aliases) fn(DT_N_S_power_states) fn(DT_N_S_power_states_S_light_sleep) fn(DT_N_S_power_states_S_deep_sleep) fn(DT_N_S_gpio_keys) fn(DT_N_S_gpio_keys_S_button_1) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_buttons) fn(DT_N_S_buttons_S_button_0)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_pin_controller) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1) fn(DT_N_S_pin_controller_S_twai_default) fn(DT_N_S_pin_controller_S_twai_default_S_group1) fn(DT_N_S_soc) fn(DT_N_S_soc_S_memory_3fc7c000) fn(DT_N_S_soc_S_interrupt_controller_600c2000) fn(DT_N_S_soc_S_systimer_60023000) fn(DT_N_S_soc_S_rtc_60008000) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000) fn(DT_N_S_soc_S_gpio_60004000) fn(DT_N_S_soc_S_i2c_60013000) fn(DT_N_S_soc_S_uart_60000000) fn(DT_N_S_soc_S_uart_60043000) fn(DT_N_S_soc_S_trng_3ff700b0) fn(DT_N_S_soc_S_spi_60024000) fn(DT_N_S_soc_S_watchdog_6001f048) fn(DT_N_S_aliases) fn(DT_N_S_power_states) fn(DT_N_S_power_states_S_light_sleep) fn(DT_N_S_power_states_S_deep_sleep) fn(DT_N_S_gpio_keys) fn(DT_N_S_gpio_keys_S_button_1) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_buttons) fn(DT_N_S_buttons_S_button_0)
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_10000
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_110000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_210000
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_250000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_espressif_esp32c3 1
#define DT_COMPAT_HAS_OKAY_espressif_riscv 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_pinctrl 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_intc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_systimer 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_rtc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_rtc_timer 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_gpio 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_i2c 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_uart 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_usb_serial 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_trng 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_spi 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_watchdog 1
#define DT_COMPAT_HAS_OKAY_zephyr_power_state 1
#define DT_COMPAT_HAS_OKAY_gpio_keys 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_espressif_esp32c3_NUM_OKAY 1
#define DT_N_INST_espressif_riscv_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_pinctrl_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_intc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_systimer_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_rtc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_rtc_timer_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_gpio_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_i2c_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_uart_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_usb_serial_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_trng_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_spi_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_watchdog_NUM_OKAY 1
#define DT_N_INST_zephyr_power_state_NUM_OKAY 2
#define DT_N_INST_gpio_keys_NUM_OKAY 2
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_FOREACH_OKAY_espressif_esp32c3(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32c3(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32c3(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32c3(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_riscv(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_espressif_riscv(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_riscv(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_riscv(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_pinctrl(fn) fn(DT_N_S_pin_controller)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_pinctrl(fn, ...) fn(DT_N_S_pin_controller, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_pinctrl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_pinctrl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_memory_3fc7c000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_memory_3fc7c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_intc(fn) fn(DT_N_S_soc_S_interrupt_controller_600c2000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_intc(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_intc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_intc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_systimer(fn) fn(DT_N_S_soc_S_systimer_60023000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_systimer(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_systimer(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_systimer(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_rtc(fn) fn(DT_N_S_soc_S_rtc_60008000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_rtc(fn, ...) fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_rtc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_rtc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_rtc_timer(fn) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_rtc_timer(fn, ...) fn(DT_N_S_soc_S_rtc_60008000_S_rtc_timer, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_rtc_timer(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_rtc_timer(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_flash_controller(fn) fn(DT_N_S_soc_S_flash_controller_60002000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_flash_controller(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_flash_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_gpio(fn) fn(DT_N_S_soc_S_gpio_60004000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_gpio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_gpio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_i2c(fn) fn(DT_N_S_soc_S_i2c_60013000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_i2c(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_i2c(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_i2c(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_uart(fn) fn(DT_N_S_soc_S_uart_60000000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_uart(fn, ...) fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_uart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_usb_serial(fn) fn(DT_N_S_soc_S_uart_60043000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_usb_serial(fn, ...) fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_usb_serial(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_usb_serial(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_trng(fn) fn(DT_N_S_soc_S_trng_3ff700b0)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_trng(fn, ...) fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_trng(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_trng(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_spi(fn) fn(DT_N_S_soc_S_spi_60024000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_spi(fn, ...) fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_spi(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_spi(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_watchdog(fn) fn(DT_N_S_soc_S_watchdog_6001f048)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_watchdog(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_watchdog(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_watchdog(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_power_state(fn) fn(DT_N_S_power_states_S_light_sleep) fn(DT_N_S_power_states_S_deep_sleep)
#define DT_FOREACH_OKAY_VARGS_zephyr_power_state(fn, ...) fn(DT_N_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_power_state(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_power_state(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_keys(fn) fn(DT_N_S_gpio_keys) fn(DT_N_S_buttons)
#define DT_FOREACH_OKAY_VARGS_gpio_keys(fn, ...) fn(DT_N_S_gpio_keys, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_keys(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_keys(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
