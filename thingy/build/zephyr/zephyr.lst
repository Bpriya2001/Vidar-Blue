
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			if (dump_data) {
				LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
			}
		}
	}
}
   0:	40 69 00 20 65 7c 00 00 db 38 02 00 39 7c 00 00     @i. e|...8..9|..
  10:	39 7c 00 00 39 7c 00 00 39 7c 00 00 00 00 00 00     9|..9|..9|......
	...
  2c:	11 73 00 00 39 7c 00 00 00 00 00 00 b9 72 00 00     .s..9|.......r..
  3c:	39 7c 00 00                                         9|..

00000040 <_irq_vector_table>:
  40:	c5 73 00 00 8d 7f 01 00 c5 73 00 00 c5 73 00 00     .s.......s...s..
  50:	c5 73 00 00 c5 73 00 00 c5 73 00 00 c5 73 00 00     .s...s...s...s..
  60:	c5 73 00 00 c5 73 00 00 c5 73 00 00 c5 73 00 00     .s...s...s...s..
  70:	c5 73 00 00 c5 73 00 00 c5 73 00 00 c5 73 00 00     .s...s...s...s..
  80:	c5 73 00 00 c5 73 00 00 c5 73 00 00 c5 73 00 00     .s...s...s...s..
  90:	c5 73 00 00 c5 73 00 00 c5 73 00 00 c5 73 00 00     .s...s...s...s..
  a0:	c5 73 00 00 c5 73 00 00 c5 73 00 00 c5 73 00 00     .s...s...s...s..
  b0:	c5 73 00 00 c5 73 00 00 c5 73 00 00 c5 73 00 00     .s...s...s...s..
  c0:	c5 73 00 00 c5 73 00 00 c5 73 00 00 c5 73 00 00     .s...s...s...s..
  d0:	c5 73 00 00 c5 73 00 00 c5 73 00 00                 .s...s...s..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_COMPANY_ID+0x43>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_BT_RX_STACK_SIZE+0x5c>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <CONFIG_BT_RX_STACK_SIZE+0x28>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_COMPANY_ID+0x9f>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_BT_LONG_WQ_STACK_SIZE+0xa8>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x78>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_COMPANY_ID+0x29>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_COMPANY_ID+0x6d>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_COMPANY_ID+0x89>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_COMPANY_ID+0x9b>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <__z_interrupt_stack_SIZEOF+0x8>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <__z_interrupt_stack_SIZEOF+0x1c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     87a:	e712      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>

0000087c <__aeabi_ldivmod>:
     87c:	b97b      	cbnz	r3, 89e <__aeabi_ldivmod+0x22>
     87e:	b972      	cbnz	r2, 89e <__aeabi_ldivmod+0x22>
     880:	2900      	cmp	r1, #0
     882:	bfbe      	ittt	lt
     884:	2000      	movlt	r0, #0
     886:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     88a:	e006      	blt.n	89a <__aeabi_ldivmod+0x1e>
     88c:	bf08      	it	eq
     88e:	2800      	cmpeq	r0, #0
     890:	bf1c      	itt	ne
     892:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     896:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     89a:	f000 b857 	b.w	94c <__aeabi_idiv0>
     89e:	f1ad 0c08 	sub.w	ip, sp, #8
     8a2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8a6:	2900      	cmp	r1, #0
     8a8:	db09      	blt.n	8be <__aeabi_ldivmod+0x42>
     8aa:	2b00      	cmp	r3, #0
     8ac:	db1a      	blt.n	8e4 <__aeabi_ldivmod+0x68>
     8ae:	f000 f84f 	bl	950 <__udivmoddi4>
     8b2:	f8dd e004 	ldr.w	lr, [sp, #4]
     8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8ba:	b004      	add	sp, #16
     8bc:	4770      	bx	lr
     8be:	4240      	negs	r0, r0
     8c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8c4:	2b00      	cmp	r3, #0
     8c6:	db1b      	blt.n	900 <__aeabi_ldivmod+0x84>
     8c8:	f000 f842 	bl	950 <__udivmoddi4>
     8cc:	f8dd e004 	ldr.w	lr, [sp, #4]
     8d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8d4:	b004      	add	sp, #16
     8d6:	4240      	negs	r0, r0
     8d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8dc:	4252      	negs	r2, r2
     8de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     8e2:	4770      	bx	lr
     8e4:	4252      	negs	r2, r2
     8e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     8ea:	f000 f831 	bl	950 <__udivmoddi4>
     8ee:	f8dd e004 	ldr.w	lr, [sp, #4]
     8f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8f6:	b004      	add	sp, #16
     8f8:	4240      	negs	r0, r0
     8fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8fe:	4770      	bx	lr
     900:	4252      	negs	r2, r2
     902:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     906:	f000 f823 	bl	950 <__udivmoddi4>
     90a:	f8dd e004 	ldr.w	lr, [sp, #4]
     90e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     912:	b004      	add	sp, #16
     914:	4252      	negs	r2, r2
     916:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     91a:	4770      	bx	lr

0000091c <__aeabi_uldivmod>:
     91c:	b953      	cbnz	r3, 934 <__aeabi_uldivmod+0x18>
     91e:	b94a      	cbnz	r2, 934 <__aeabi_uldivmod+0x18>
     920:	2900      	cmp	r1, #0
     922:	bf08      	it	eq
     924:	2800      	cmpeq	r0, #0
     926:	bf1c      	itt	ne
     928:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     92c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     930:	f000 b80c 	b.w	94c <__aeabi_idiv0>
     934:	f1ad 0c08 	sub.w	ip, sp, #8
     938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     93c:	f000 f808 	bl	950 <__udivmoddi4>
     940:	f8dd e004 	ldr.w	lr, [sp, #4]
     944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     948:	b004      	add	sp, #16
     94a:	4770      	bx	lr

0000094c <__aeabi_idiv0>:
     94c:	4770      	bx	lr
     94e:	bf00      	nop

00000950 <__udivmoddi4>:
     950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     954:	4686      	mov	lr, r0
     956:	468c      	mov	ip, r1
     958:	4608      	mov	r0, r1
     95a:	9e08      	ldr	r6, [sp, #32]
     95c:	4615      	mov	r5, r2
     95e:	4674      	mov	r4, lr
     960:	4619      	mov	r1, r3
     962:	2b00      	cmp	r3, #0
     964:	f040 80c2 	bne.w	aec <__data_size+0x91>
     968:	4285      	cmp	r5, r0
     96a:	fab2 f282 	clz	r2, r2
     96e:	d945      	bls.n	9fc <__udivmoddi4+0xac>
     970:	b14a      	cbz	r2, 986 <__udivmoddi4+0x36>
     972:	f1c2 0320 	rsb	r3, r2, #32
     976:	fa00 fc02 	lsl.w	ip, r0, r2
     97a:	fa2e f303 	lsr.w	r3, lr, r3
     97e:	4095      	lsls	r5, r2
     980:	ea43 0c0c 	orr.w	ip, r3, ip
     984:	4094      	lsls	r4, r2
     986:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     98a:	b2a8      	uxth	r0, r5
     98c:	fbbc f8fe 	udiv	r8, ip, lr
     990:	0c23      	lsrs	r3, r4, #16
     992:	fb0e cc18 	mls	ip, lr, r8, ip
     996:	fb08 f900 	mul.w	r9, r8, r0
     99a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     99e:	4599      	cmp	r9, r3
     9a0:	d928      	bls.n	9f4 <__udivmoddi4+0xa4>
     9a2:	18eb      	adds	r3, r5, r3
     9a4:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     9a8:	d204      	bcs.n	9b4 <__udivmoddi4+0x64>
     9aa:	4599      	cmp	r9, r3
     9ac:	d902      	bls.n	9b4 <__udivmoddi4+0x64>
     9ae:	f1a8 0702 	sub.w	r7, r8, #2
     9b2:	442b      	add	r3, r5
     9b4:	eba3 0309 	sub.w	r3, r3, r9
     9b8:	b2a4      	uxth	r4, r4
     9ba:	fbb3 fcfe 	udiv	ip, r3, lr
     9be:	fb0e 331c 	mls	r3, lr, ip, r3
     9c2:	fb0c f000 	mul.w	r0, ip, r0
     9c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9ca:	42a0      	cmp	r0, r4
     9cc:	d914      	bls.n	9f8 <__udivmoddi4+0xa8>
     9ce:	192c      	adds	r4, r5, r4
     9d0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     9d4:	d204      	bcs.n	9e0 <__udivmoddi4+0x90>
     9d6:	42a0      	cmp	r0, r4
     9d8:	d902      	bls.n	9e0 <__udivmoddi4+0x90>
     9da:	f1ac 0302 	sub.w	r3, ip, #2
     9de:	442c      	add	r4, r5
     9e0:	1a24      	subs	r4, r4, r0
     9e2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     9e6:	b11e      	cbz	r6, 9f0 <__udivmoddi4+0xa0>
     9e8:	40d4      	lsrs	r4, r2
     9ea:	2300      	movs	r3, #0
     9ec:	6034      	str	r4, [r6, #0]
     9ee:	6073      	str	r3, [r6, #4]
     9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9f4:	4647      	mov	r7, r8
     9f6:	e7dd      	b.n	9b4 <__udivmoddi4+0x64>
     9f8:	4663      	mov	r3, ip
     9fa:	e7f1      	b.n	9e0 <__udivmoddi4+0x90>
     9fc:	bb92      	cbnz	r2, a64 <__data_size+0x9>
     9fe:	1b43      	subs	r3, r0, r5
     a00:	2101      	movs	r1, #1
     a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a06:	b2af      	uxth	r7, r5
     a08:	fbb3 fcfe 	udiv	ip, r3, lr
     a0c:	0c20      	lsrs	r0, r4, #16
     a0e:	fb0e 331c 	mls	r3, lr, ip, r3
     a12:	fb0c f807 	mul.w	r8, ip, r7
     a16:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     a1a:	4598      	cmp	r8, r3
     a1c:	d962      	bls.n	ae4 <__data_size+0x89>
     a1e:	18eb      	adds	r3, r5, r3
     a20:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     a24:	d204      	bcs.n	a30 <__udivmoddi4+0xe0>
     a26:	4598      	cmp	r8, r3
     a28:	d902      	bls.n	a30 <__udivmoddi4+0xe0>
     a2a:	f1ac 0002 	sub.w	r0, ip, #2
     a2e:	442b      	add	r3, r5
     a30:	eba3 0308 	sub.w	r3, r3, r8
     a34:	b2a4      	uxth	r4, r4
     a36:	fbb3 fcfe 	udiv	ip, r3, lr
     a3a:	fb0e 331c 	mls	r3, lr, ip, r3
     a3e:	fb0c f707 	mul.w	r7, ip, r7
     a42:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a46:	42a7      	cmp	r7, r4
     a48:	d94e      	bls.n	ae8 <__data_size+0x8d>
     a4a:	192c      	adds	r4, r5, r4
     a4c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     a50:	d204      	bcs.n	a5c <__data_size+0x1>
     a52:	42a7      	cmp	r7, r4
     a54:	d902      	bls.n	a5c <__data_size+0x1>
     a56:	f1ac 0302 	sub.w	r3, ip, #2
     a5a:	442c      	add	r4, r5
     a5c:	1be4      	subs	r4, r4, r7
     a5e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     a62:	e7c0      	b.n	9e6 <__udivmoddi4+0x96>
     a64:	f1c2 0320 	rsb	r3, r2, #32
     a68:	fa20 f103 	lsr.w	r1, r0, r3
     a6c:	4095      	lsls	r5, r2
     a6e:	4090      	lsls	r0, r2
     a70:	fa2e f303 	lsr.w	r3, lr, r3
     a74:	4303      	orrs	r3, r0
     a76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a7a:	b2af      	uxth	r7, r5
     a7c:	fbb1 fcfe 	udiv	ip, r1, lr
     a80:	fb0e 101c 	mls	r0, lr, ip, r1
     a84:	0c19      	lsrs	r1, r3, #16
     a86:	fb0c f807 	mul.w	r8, ip, r7
     a8a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     a8e:	4588      	cmp	r8, r1
     a90:	fa04 f402 	lsl.w	r4, r4, r2
     a94:	d922      	bls.n	adc <__data_size+0x81>
     a96:	1869      	adds	r1, r5, r1
     a98:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     a9c:	d204      	bcs.n	aa8 <__data_size+0x4d>
     a9e:	4588      	cmp	r8, r1
     aa0:	d902      	bls.n	aa8 <__data_size+0x4d>
     aa2:	f1ac 0002 	sub.w	r0, ip, #2
     aa6:	4429      	add	r1, r5
     aa8:	eba1 0108 	sub.w	r1, r1, r8
     aac:	b29b      	uxth	r3, r3
     aae:	fbb1 fcfe 	udiv	ip, r1, lr
     ab2:	fb0e 111c 	mls	r1, lr, ip, r1
     ab6:	fb0c f707 	mul.w	r7, ip, r7
     aba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     abe:	429f      	cmp	r7, r3
     ac0:	d90e      	bls.n	ae0 <__data_size+0x85>
     ac2:	18eb      	adds	r3, r5, r3
     ac4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     ac8:	d204      	bcs.n	ad4 <__data_size+0x79>
     aca:	429f      	cmp	r7, r3
     acc:	d902      	bls.n	ad4 <__data_size+0x79>
     ace:	f1ac 0102 	sub.w	r1, ip, #2
     ad2:	442b      	add	r3, r5
     ad4:	1bdb      	subs	r3, r3, r7
     ad6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     ada:	e792      	b.n	a02 <__udivmoddi4+0xb2>
     adc:	4660      	mov	r0, ip
     ade:	e7e3      	b.n	aa8 <__data_size+0x4d>
     ae0:	4661      	mov	r1, ip
     ae2:	e7f7      	b.n	ad4 <__data_size+0x79>
     ae4:	4660      	mov	r0, ip
     ae6:	e7a3      	b.n	a30 <__udivmoddi4+0xe0>
     ae8:	4663      	mov	r3, ip
     aea:	e7b7      	b.n	a5c <__data_size+0x1>
     aec:	4283      	cmp	r3, r0
     aee:	d906      	bls.n	afe <__data_size+0xa3>
     af0:	b916      	cbnz	r6, af8 <__data_size+0x9d>
     af2:	2100      	movs	r1, #0
     af4:	4608      	mov	r0, r1
     af6:	e77b      	b.n	9f0 <__udivmoddi4+0xa0>
     af8:	e9c6 e000 	strd	lr, r0, [r6]
     afc:	e7f9      	b.n	af2 <__data_size+0x97>
     afe:	fab3 f783 	clz	r7, r3
     b02:	b98f      	cbnz	r7, b28 <__data_size+0xcd>
     b04:	4283      	cmp	r3, r0
     b06:	d301      	bcc.n	b0c <__data_size+0xb1>
     b08:	4572      	cmp	r2, lr
     b0a:	d808      	bhi.n	b1e <__data_size+0xc3>
     b0c:	ebbe 0402 	subs.w	r4, lr, r2
     b10:	eb60 0303 	sbc.w	r3, r0, r3
     b14:	2001      	movs	r0, #1
     b16:	469c      	mov	ip, r3
     b18:	b91e      	cbnz	r6, b22 <__data_size+0xc7>
     b1a:	2100      	movs	r1, #0
     b1c:	e768      	b.n	9f0 <__udivmoddi4+0xa0>
     b1e:	4638      	mov	r0, r7
     b20:	e7fa      	b.n	b18 <__data_size+0xbd>
     b22:	e9c6 4c00 	strd	r4, ip, [r6]
     b26:	e7f8      	b.n	b1a <__data_size+0xbf>
     b28:	f1c7 0c20 	rsb	ip, r7, #32
     b2c:	40bb      	lsls	r3, r7
     b2e:	fa22 f40c 	lsr.w	r4, r2, ip
     b32:	431c      	orrs	r4, r3
     b34:	fa2e f10c 	lsr.w	r1, lr, ip
     b38:	fa20 f30c 	lsr.w	r3, r0, ip
     b3c:	40b8      	lsls	r0, r7
     b3e:	4301      	orrs	r1, r0
     b40:	ea4f 4914 	mov.w	r9, r4, lsr #16
     b44:	fa0e f507 	lsl.w	r5, lr, r7
     b48:	fbb3 f8f9 	udiv	r8, r3, r9
     b4c:	fa1f fe84 	uxth.w	lr, r4
     b50:	fb09 3018 	mls	r0, r9, r8, r3
     b54:	0c0b      	lsrs	r3, r1, #16
     b56:	fb08 fa0e 	mul.w	sl, r8, lr
     b5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     b5e:	459a      	cmp	sl, r3
     b60:	fa02 f207 	lsl.w	r2, r2, r7
     b64:	d940      	bls.n	be8 <__data_size+0x18d>
     b66:	18e3      	adds	r3, r4, r3
     b68:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     b6c:	d204      	bcs.n	b78 <__data_size+0x11d>
     b6e:	459a      	cmp	sl, r3
     b70:	d902      	bls.n	b78 <__data_size+0x11d>
     b72:	f1a8 0002 	sub.w	r0, r8, #2
     b76:	4423      	add	r3, r4
     b78:	eba3 030a 	sub.w	r3, r3, sl
     b7c:	b289      	uxth	r1, r1
     b7e:	fbb3 f8f9 	udiv	r8, r3, r9
     b82:	fb09 3318 	mls	r3, r9, r8, r3
     b86:	fb08 fe0e 	mul.w	lr, r8, lr
     b8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     b8e:	458e      	cmp	lr, r1
     b90:	d92c      	bls.n	bec <__data_size+0x191>
     b92:	1861      	adds	r1, r4, r1
     b94:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     b98:	d204      	bcs.n	ba4 <__data_size+0x149>
     b9a:	458e      	cmp	lr, r1
     b9c:	d902      	bls.n	ba4 <__data_size+0x149>
     b9e:	f1a8 0302 	sub.w	r3, r8, #2
     ba2:	4421      	add	r1, r4
     ba4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     ba8:	fba0 9802 	umull	r9, r8, r0, r2
     bac:	eba1 010e 	sub.w	r1, r1, lr
     bb0:	4541      	cmp	r1, r8
     bb2:	46ce      	mov	lr, r9
     bb4:	4643      	mov	r3, r8
     bb6:	d302      	bcc.n	bbe <__data_size+0x163>
     bb8:	d106      	bne.n	bc8 <__data_size+0x16d>
     bba:	454d      	cmp	r5, r9
     bbc:	d204      	bcs.n	bc8 <__data_size+0x16d>
     bbe:	ebb9 0e02 	subs.w	lr, r9, r2
     bc2:	eb68 0304 	sbc.w	r3, r8, r4
     bc6:	3801      	subs	r0, #1
     bc8:	2e00      	cmp	r6, #0
     bca:	d0a6      	beq.n	b1a <__data_size+0xbf>
     bcc:	ebb5 020e 	subs.w	r2, r5, lr
     bd0:	eb61 0103 	sbc.w	r1, r1, r3
     bd4:	fa01 fc0c 	lsl.w	ip, r1, ip
     bd8:	fa22 f307 	lsr.w	r3, r2, r7
     bdc:	ea4c 0303 	orr.w	r3, ip, r3
     be0:	40f9      	lsrs	r1, r7
     be2:	e9c6 3100 	strd	r3, r1, [r6]
     be6:	e798      	b.n	b1a <__data_size+0xbf>
     be8:	4640      	mov	r0, r8
     bea:	e7c5      	b.n	b78 <__data_size+0x11d>
     bec:	4643      	mov	r3, r8
     bee:	e7d9      	b.n	ba4 <__data_size+0x149>

00000bf0 <hts221_handler>:
	temp_hum[1] = sensor_value_to_double(&hum);
}

static void hts221_handler(const struct device *dev,
			   const struct sensor_trigger *trig)
{
     bf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     bf2:	4604      	mov	r4, r0
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     bf4:	6883      	ldr	r3, [r0, #8]
     bf6:	2139      	movs	r1, #57	; 0x39
     bf8:	68db      	ldr	r3, [r3, #12]
     bfa:	4798      	blx	r3
	if (sensor_sample_fetch(dev) < 0) {
     bfc:	2800      	cmp	r0, #0
     bfe:	da05      	bge.n	c0c <hts221_handler+0x1c>
		printf("Sensor sample update error\n");
     c00:	4841      	ldr	r0, [pc, #260]	; (d08 <hts221_handler+0x118>)
	process_sample(dev);
}
     c02:	b004      	add	sp, #16
     c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Sensor sample update error\n");
     c08:	f007 b988 	b.w	7f1c <printf>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     c0c:	68a3      	ldr	r3, [r4, #8]
     c0e:	466a      	mov	r2, sp
     c10:	691b      	ldr	r3, [r3, #16]
     c12:	210d      	movs	r1, #13
     c14:	4620      	mov	r0, r4
     c16:	4798      	blx	r3
	if (sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0) {
     c18:	2800      	cmp	r0, #0
     c1a:	da04      	bge.n	c26 <hts221_handler+0x36>
		printf("Cannot read HTS221 temperature channel\n");
     c1c:	483b      	ldr	r0, [pc, #236]	; (d0c <hts221_handler+0x11c>)
		printf("Cannot read HTS221 humidity channel\n");
     c1e:	f007 f97d 	bl	7f1c <printf>
}
     c22:	b004      	add	sp, #16
     c24:	bd70      	pop	{r4, r5, r6, pc}
     c26:	68a3      	ldr	r3, [r4, #8]
     c28:	aa02      	add	r2, sp, #8
     c2a:	691b      	ldr	r3, [r3, #16]
     c2c:	2110      	movs	r1, #16
     c2e:	4620      	mov	r0, r4
     c30:	4798      	blx	r3
	if (sensor_channel_get(dev, SENSOR_CHAN_HUMIDITY, &hum) < 0) {
     c32:	2800      	cmp	r0, #0
     c34:	da01      	bge.n	c3a <hts221_handler+0x4a>
		printf("Cannot read HTS221 humidity channel\n");
     c36:	4836      	ldr	r0, [pc, #216]	; (d10 <hts221_handler+0x120>)
     c38:	e7f1      	b.n	c1e <hts221_handler+0x2e>
	++obs;
     c3a:	4b36      	ldr	r3, [pc, #216]	; (d14 <hts221_handler+0x124>)
	printf("Observation:%u\n", obs);
     c3c:	4836      	ldr	r0, [pc, #216]	; (d18 <hts221_handler+0x128>)
	++obs;
     c3e:	6819      	ldr	r1, [r3, #0]
	temp_hum[0] = sensor_value_to_double(&temp);
     c40:	4e36      	ldr	r6, [pc, #216]	; (d1c <hts221_handler+0x12c>)
	++obs;
     c42:	3101      	adds	r1, #1
     c44:	6019      	str	r1, [r3, #0]
	printf("Observation:%u\n", obs);
     c46:	f007 f969 	bl	7f1c <printf>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     c4a:	9801      	ldr	r0, [sp, #4]
     c4c:	f7ff fb9a 	bl	384 <__aeabi_i2d>
     c50:	a32b      	add	r3, pc, #172	; (adr r3, d00 <hts221_handler+0x110>)
     c52:	e9d3 2300 	ldrd	r2, r3, [r3]
     c56:	f7ff fd29 	bl	6ac <__aeabi_ddiv>
     c5a:	4604      	mov	r4, r0
     c5c:	9800      	ldr	r0, [sp, #0]
     c5e:	460d      	mov	r5, r1
     c60:	f7ff fb90 	bl	384 <__aeabi_i2d>
     c64:	4602      	mov	r2, r0
     c66:	460b      	mov	r3, r1
     c68:	4620      	mov	r0, r4
     c6a:	4629      	mov	r1, r5
     c6c:	f7ff fa3e 	bl	ec <__adddf3>
     c70:	4602      	mov	r2, r0
     c72:	460b      	mov	r3, r1
	printf("Temperature:%.1f C\n", sensor_value_to_double(&temp));
     c74:	482a      	ldr	r0, [pc, #168]	; (d20 <hts221_handler+0x130>)
     c76:	f007 f951 	bl	7f1c <printf>
     c7a:	9801      	ldr	r0, [sp, #4]
     c7c:	f7ff fb82 	bl	384 <__aeabi_i2d>
     c80:	a31f      	add	r3, pc, #124	; (adr r3, d00 <hts221_handler+0x110>)
     c82:	e9d3 2300 	ldrd	r2, r3, [r3]
     c86:	f7ff fd11 	bl	6ac <__aeabi_ddiv>
     c8a:	4604      	mov	r4, r0
     c8c:	9800      	ldr	r0, [sp, #0]
     c8e:	460d      	mov	r5, r1
     c90:	f7ff fb78 	bl	384 <__aeabi_i2d>
     c94:	4602      	mov	r2, r0
     c96:	460b      	mov	r3, r1
     c98:	4620      	mov	r0, r4
     c9a:	4629      	mov	r1, r5
     c9c:	f7ff fa26 	bl	ec <__adddf3>
	temp_hum[0] = sensor_value_to_double(&temp);
     ca0:	e9c6 0100 	strd	r0, r1, [r6]
     ca4:	9803      	ldr	r0, [sp, #12]
     ca6:	f7ff fb6d 	bl	384 <__aeabi_i2d>
     caa:	a315      	add	r3, pc, #84	; (adr r3, d00 <hts221_handler+0x110>)
     cac:	e9d3 2300 	ldrd	r2, r3, [r3]
     cb0:	f7ff fcfc 	bl	6ac <__aeabi_ddiv>
     cb4:	4604      	mov	r4, r0
     cb6:	9802      	ldr	r0, [sp, #8]
     cb8:	460d      	mov	r5, r1
     cba:	f7ff fb63 	bl	384 <__aeabi_i2d>
     cbe:	4602      	mov	r2, r0
     cc0:	460b      	mov	r3, r1
     cc2:	4620      	mov	r0, r4
     cc4:	4629      	mov	r1, r5
     cc6:	f7ff fa11 	bl	ec <__adddf3>
     cca:	4602      	mov	r2, r0
     ccc:	460b      	mov	r3, r1
	printk("Relative Humidity:%.1f%%\n",
     cce:	4815      	ldr	r0, [pc, #84]	; (d24 <hts221_handler+0x134>)
     cd0:	f020 f912 	bl	20ef8 <printk>
     cd4:	9803      	ldr	r0, [sp, #12]
     cd6:	f7ff fb55 	bl	384 <__aeabi_i2d>
     cda:	a309      	add	r3, pc, #36	; (adr r3, d00 <hts221_handler+0x110>)
     cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
     ce0:	f7ff fce4 	bl	6ac <__aeabi_ddiv>
     ce4:	4604      	mov	r4, r0
     ce6:	9802      	ldr	r0, [sp, #8]
     ce8:	460d      	mov	r5, r1
     cea:	f7ff fb4b 	bl	384 <__aeabi_i2d>
     cee:	4602      	mov	r2, r0
     cf0:	460b      	mov	r3, r1
     cf2:	4620      	mov	r0, r4
     cf4:	4629      	mov	r1, r5
     cf6:	f7ff f9f9 	bl	ec <__adddf3>
	temp_hum[1] = sensor_value_to_double(&hum);
     cfa:	e9c6 0102 	strd	r0, r1, [r6, #8]
     cfe:	e790      	b.n	c22 <hts221_handler+0x32>
     d00:	00000000 	.word	0x00000000
     d04:	412e8480 	.word	0x412e8480
     d08:	00029d93 	.word	0x00029d93
     d0c:	00029daf 	.word	0x00029daf
     d10:	00029dd7 	.word	0x00029dd7
     d14:	20002168 	.word	0x20002168
     d18:	00029dfc 	.word	0x00029dfc
     d1c:	20000000 	.word	0x20000000
     d20:	00029e0c 	.word	0x00029e0c
     d24:	00029e20 	.word	0x00029e20

00000d28 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     d2c:	e9d0 350c 	ldrd	r3, r5, [r0, #48]	; 0x30
	start_to_address_actual_us =
     d30:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     d34:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     d36:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     d38:	45a0      	cmp	r8, r4
{
     d3a:	460f      	mov	r7, r1
     d3c:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     d3e:	d819      	bhi.n	d74 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     d40:	4d1d      	ldr	r5, [pc, #116]	; (db8 <ull_drift_ticks_get+0x90>)
     d42:	fba3 0105 	umull	r0, r1, r3, r5
     d46:	a31a      	add	r3, pc, #104	; (adr r3, db0 <ull_drift_ticks_get+0x88>)
     d48:	e9d3 2300 	ldrd	r2, r3, [r3]
     d4c:	f7ff fde6 	bl	91c <__aeabi_uldivmod>
     d50:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     d52:	eba4 0008 	sub.w	r0, r4, r8
     d56:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     d5a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     d5e:	a314      	add	r3, pc, #80	; (adr r3, db0 <ull_drift_ticks_get+0x88>)
     d60:	e9d3 2300 	ldrd	r2, r3, [r3]
     d64:	f7ff fdda 	bl	91c <__aeabi_uldivmod>
     d68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     d6c:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
     d6e:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     d74:	f8df 9040 	ldr.w	r9, [pc, #64]	; db8 <ull_drift_ticks_get+0x90>
     d78:	a30d      	add	r3, pc, #52	; (adr r3, db0 <ull_drift_ticks_get+0x88>)
     d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
     d7e:	fba8 0109 	umull	r0, r1, r8, r9
     d82:	f7ff fdcb 	bl	91c <__aeabi_uldivmod>
     d86:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     d88:	f105 0030 	add.w	r0, r5, #48	; 0x30
     d8c:	a308      	add	r3, pc, #32	; (adr r3, db0 <ull_drift_ticks_get+0x88>)
     d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
     d92:	fba0 0109 	umull	r0, r1, r0, r9
     d96:	f7ff fdc1 	bl	91c <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     d9a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     d9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     da2:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
     da4:	6030      	str	r0, [r6, #0]
}
     da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     daa:	bf00      	nop
     dac:	f3af 8000 	nop.w
     db0:	1afd498d 	.word	0x1afd498d
     db4:	00000007 	.word	0x00000007
     db8:	3b9aca00 	.word	0x3b9aca00
     dbc:	00000000 	.word	0x00000000

00000dc0 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
     dc0:	2800      	cmp	r0, #0
     dc2:	f000 8133 	beq.w	102c <ll_adv_enable+0x26c>
{
     dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     dca:	4cc5      	ldr	r4, [pc, #788]	; (10e0 <ll_adv_enable+0x320>)
     dcc:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
     dd0:	07da      	lsls	r2, r3, #31
{
     dd2:	b08d      	sub	sp, #52	; 0x34
	if (!adv || adv->is_enabled) {
     dd4:	f100 8164 	bmi.w	10a0 <ll_adv_enable+0x2e0>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     dd8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     ddc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     de0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     de4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     de8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     dea:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     dee:	b30e      	cbz	r6, e34 <ll_adv_enable+0x74>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
     df0:	4635      	mov	r5, r6
     df2:	f815 0b02 	ldrb.w	r0, [r5], #2
     df6:	f3c0 1080 	ubfx	r0, r0, #6, #1
     dfa:	f00e fb53 	bl	f4a4 <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     dfe:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     e00:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     e02:	4628      	mov	r0, r5
     e04:	f022 ff02 	bl	23c0c <memcpy>
		if (pdu_adv_to_update->tx_addr &&
     e08:	7833      	ldrb	r3, [r6, #0]
     e0a:	065b      	lsls	r3, r3, #25
     e0c:	d506      	bpl.n	e1c <ll_adv_enable+0x5c>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     e0e:	2106      	movs	r1, #6
     e10:	4628      	mov	r0, r5
     e12:	f00d f939 	bl	e088 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     e16:	2800      	cmp	r0, #0
     e18:	f000 8144 	beq.w	10a4 <ll_adv_enable+0x2e4>
			own_id_addr = ll_addr_get(pdu->tx_addr);
     e1c:	4645      	mov	r5, r8
     e1e:	f815 0b02 	ldrb.w	r0, [r5], #2
     e22:	f3c0 1080 	ubfx	r0, r0, #6, #1
     e26:	f00e fb3d 	bl	f4a4 <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     e2a:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     e2c:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     e2e:	4628      	mov	r0, r5
     e30:	f022 feec 	bl	23c0c <memcpy>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     e34:	7833      	ldrb	r3, [r6, #0]
     e36:	f013 0f0e 	tst.w	r3, #14
     e3a:	f040 808f 	bne.w	f5c <ll_adv_enable+0x19c>
		if (lll->conn) {
     e3e:	6a23      	ldr	r3, [r4, #32]
     e40:	b11b      	cbz	r3, e4a <ll_adv_enable+0x8a>
	return BT_HCI_ERR_CMD_DISALLOWED;
     e42:	200c      	movs	r0, #12
}
     e44:	b00d      	add	sp, #52	; 0x34
     e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     e4a:	f010 fb9d 	bl	11588 <ll_rx_link_alloc>
		if (!link) {
     e4e:	4681      	mov	r9, r0
     e50:	2800      	cmp	r0, #0
     e52:	f000 8135 	beq.w	10c0 <ll_adv_enable+0x300>
		node_rx = ll_rx_alloc();
     e56:	f010 fba3 	bl	115a0 <ll_rx_alloc>
		if (!node_rx) {
     e5a:	4682      	mov	sl, r0
     e5c:	2800      	cmp	r0, #0
     e5e:	f000 812c 	beq.w	10ba <ll_adv_enable+0x2fa>
		conn = ll_conn_acquire();
     e62:	f011 ff7d 	bl	12d60 <ll_conn_acquire>
		if (!conn) {
     e66:	4605      	mov	r5, r0
     e68:	2800      	cmp	r0, #0
     e6a:	f000 812b 	beq.w	10c4 <ll_adv_enable+0x304>
		if (!conn_lll->link_tx_free) {
     e6e:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
		conn_lll->handle = 0xFFFF;
     e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
     e76:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
     e78:	f105 0b1c 	add.w	fp, r5, #28
		if (!conn_lll->link_tx_free) {
     e7c:	2800      	cmp	r0, #0
     e7e:	f000 8117 	beq.w	10b0 <ll_adv_enable+0x2f0>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     e82:	f105 027c 	add.w	r2, r5, #124	; 0x7c
     e86:	f105 0178 	add.w	r1, r5, #120	; 0x78
     e8a:	f00d f909 	bl	e0a0 <memq_init>
			conn_lll->phy_tx = PHY_1M;
     e8e:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
     e92:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
     e96:	f023 0307 	bic.w	r3, r3, #7
     e9a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
     e9e:	f043 0301 	orr.w	r3, r3, #1
     ea2:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
		conn_lll->data_chan_sel = 0;
     ea6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
     eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
     eb2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conn_lll->sn = 0;
     eb6:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
     eba:	f023 0307 	bic.w	r3, r3, #7
     ebe:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
		conn_lll->periph.initiated = 0;
     ec2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
     ec6:	f023 0307 	bic.w	r3, r3, #7
		conn_lll->link_tx_free = NULL;
     eca:	2700      	movs	r7, #0
		conn_lll->periph.initiated = 0;
     ecc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		conn->apto_expire = 0U;
     ed0:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
     ed4:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
		ull_llcp_init(conn);
     ed8:	4628      	mov	r0, r5
		conn_lll->periph.window_widening_event_us = 0;
     eda:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     ede:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		conn_lll->packet_tx_head_len = 0;
     ee2:	f8a5 708c 	strh.w	r7, [r5, #140]	; 0x8c
		conn_lll->event_counter = 0;
     ee6:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_prepare = 0;
     ee8:	f8c5 702e 	str.w	r7, [r5, #46]	; 0x2e
		conn_lll->data_chan_use = 0;
     eec:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
     ef0:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
     ef2:	f8a5 7186 	strh.w	r7, [r5, #390]	; 0x186
		conn->appto_expire = 0U;
     ef6:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		ull_llcp_init(conn);
     efa:	f014 f81d 	bl	14f38 <ull_llcp_init>
		conn->llcp_terminate.reason_final = 0;
     efe:	f885 7148 	strb.w	r7, [r5, #328]	; 0x148
		conn->llcp_terminate.node_rx.hdr.link = link;
     f02:	f8c5 914c 	str.w	r9, [r5, #332]	; 0x14c
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     f06:	f012 f9b5 	bl	13274 <ull_conn_default_phy_tx_get>
     f0a:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
     f0e:	f360 0302 	bfi	r3, r0, #0, #3
     f12:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     f16:	f012 f9b3 	bl	13280 <ull_conn_default_phy_rx_get>
     f1a:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
     f1e:	f360 03c5 	bfi	r3, r0, #3, #3
     f22:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
		conn->pause_rx_data = 0U;
     f26:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
     f2a:	f367 0341 	bfi	r3, r7, #1, #1
     f2e:	f885 3178 	strb.w	r3, [r5, #376]	; 0x178
		ull_dle_init(conn, phy_in_use);
     f32:	2101      	movs	r1, #1
     f34:	4628      	mov	r0, r5
     f36:	f012 fd9f 	bl	13a78 <ull_dle_init>
		ull_tx_q_init(&conn->tx_q);
     f3a:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
     f3e:	f013 fde5 	bl	14b0c <ull_tx_q_init>
		adv->node_rx_cc_free = node_rx;
     f42:	e9c4 9a18 	strd	r9, sl, [r4, #96]	; 0x60
		lll->conn = conn_lll;
     f46:	f8c4 b020 	str.w	fp, [r4, #32]
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     f4a:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
     f4e:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     f50:	61ed      	str	r5, [r5, #28]
		err = lll_clock_wait();
     f52:	f017 fd73 	bl	18a3c <lll_clock_wait>
		if (err) {
     f56:	2800      	cmp	r0, #0
     f58:	f040 80a6 	bne.w	10a8 <ll_adv_enable+0x2e8>
	uint8_t ch_map = lll->chan_map;
     f5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     f60:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     f62:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     f66:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
     f6a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     f6e:	f00d fa21 	bl	e3b4 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     f72:	4602      	mov	r2, r0
     f74:	2800      	cmp	r0, #0
     f76:	d05b      	beq.n	1030 <ll_adv_enable+0x270>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
     f78:	f898 1001 	ldrb.w	r1, [r8, #1]
     f7c:	4630      	mov	r0, r6
     f7e:	f011 fa23 	bl	123c8 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     f82:	4958      	ldr	r1, [pc, #352]	; (10e4 <ll_adv_enable+0x324>)
	uint16_t interval = adv->interval;
     f84:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
     f88:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
     f8a:	2331      	movs	r3, #49	; 0x31
     f8c:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     f8e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     f92:	a351      	add	r3, pc, #324	; (adr r3, 10d8 <ll_adv_enable+0x318>)
     f94:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
     f98:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
     f9a:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
     f9c:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     f9e:	fba0 0101 	umull	r0, r1, r0, r1
     fa2:	f7ff fcbb 	bl	91c <__aeabi_uldivmod>
     fa6:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
     fa8:	f00e fa52 	bl	f450 <ticker_ticks_now_get>
	ticks_anchor += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);
     fac:	f100 0809 	add.w	r8, r0, #9
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     fb0:	b93f      	cbnz	r7, fc2 <ll_adv_enable+0x202>
     fb2:	7835      	ldrb	r5, [r6, #0]
     fb4:	f005 050f 	and.w	r5, r5, #15
     fb8:	f1a5 0501 	sub.w	r5, r5, #1
     fbc:	fab5 f585 	clz	r5, r5
     fc0:	096d      	lsrs	r5, r5, #5
     fc2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
     fc6:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     fc8:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     fcc:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     fd0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
     fd4:	d033      	beq.n	103e <ll_adv_enable+0x27e>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     fd6:	2000      	movs	r0, #0
     fd8:	4a43      	ldr	r2, [pc, #268]	; (10e8 <ll_adv_enable+0x328>)
     fda:	4f44      	ldr	r7, [pc, #272]	; (10ec <ll_adv_enable+0x32c>)
     fdc:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
     fde:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     fe0:	ae0b      	add	r6, sp, #44	; 0x2c
     fe2:	9301      	str	r3, [sp, #4]
     fe4:	9205      	str	r2, [sp, #20]
     fe6:	2103      	movs	r1, #3
     fe8:	e9cd 0002 	strd	r0, r0, [sp, #8]
     fec:	9608      	str	r6, [sp, #32]
     fee:	9406      	str	r4, [sp, #24]
     ff0:	4643      	mov	r3, r8
     ff2:	9000      	str	r0, [sp, #0]
     ff4:	9707      	str	r7, [sp, #28]
     ff6:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
     ff8:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ffa:	f00e f919 	bl	f230 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     ffe:	4631      	mov	r1, r6
    1000:	f010 fb62 	bl	116c8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1004:	b9a0      	cbnz	r0, 1030 <ll_adv_enable+0x270>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1006:	493a      	ldr	r1, [pc, #232]	; (10f0 <ll_adv_enable+0x330>)
    1008:	9105      	str	r1, [sp, #20]
    100a:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
    100e:	9300      	str	r3, [sp, #0]
    1010:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1014:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1018:	9707      	str	r7, [sp, #28]
    101a:	9608      	str	r6, [sp, #32]
    101c:	9406      	str	r4, [sp, #24]
    101e:	4643      	mov	r3, r8
    1020:	2201      	movs	r2, #1
    1022:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1024:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1026:	f00e f903 	bl	f230 <ticker_start>
    102a:	e02e      	b.n	108a <ll_adv_enable+0x2ca>
		return disable(handle);
    102c:	f011 b91e 	b.w	1226c <disable.constprop.0>
	if (adv->lll.conn) {
    1030:	6a23      	ldr	r3, [r4, #32]
    1032:	2b00      	cmp	r3, #0
    1034:	f43f af05 	beq.w	e42 <ll_adv_enable+0x82>
		conn_release(adv);
    1038:	f011 f8d6 	bl	121e8 <conn_release.constprop.0>
    103c:	e701      	b.n	e42 <ll_adv_enable+0x82>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    103e:	4a2d      	ldr	r2, [pc, #180]	; (10f4 <ll_adv_enable+0x334>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1040:	482d      	ldr	r0, [pc, #180]	; (10f8 <ll_adv_enable+0x338>)
		ret = ticker_start_ext(
    1042:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1044:	f203 1347 	addw	r3, r3, #327	; 0x147
		ret = ticker_start_ext(
    1048:	9406      	str	r4, [sp, #24]
    104a:	9502      	str	r5, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    104c:	2191      	movs	r1, #145	; 0x91
		ll_adv_ticker_ext[handle].ticks_slot_window =
    104e:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1050:	fba7 0300 	umull	r0, r3, r7, r0
    1054:	fb01 3107 	mla	r1, r1, r7, r3
		ret = ticker_start_ext(
    1058:	4b24      	ldr	r3, [pc, #144]	; (10ec <ll_adv_enable+0x32c>)
    105a:	9307      	str	r3, [sp, #28]
    105c:	4b22      	ldr	r3, [pc, #136]	; (10e8 <ll_adv_enable+0x328>)
    105e:	9305      	str	r3, [sp, #20]
    1060:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1064:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1066:	2702      	movs	r7, #2
		ret = ticker_start_ext(
    1068:	9303      	str	r3, [sp, #12]
    106a:	ae0b      	add	r6, sp, #44	; 0x2c
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    106c:	a31a      	add	r3, pc, #104	; (adr r3, 10d8 <ll_adv_enable+0x318>)
    106e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    1072:	970b      	str	r7, [sp, #44]	; 0x2c
		ret = ticker_start_ext(
    1074:	9608      	str	r6, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1076:	f7ff fc51 	bl	91c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    107a:	4643      	mov	r3, r8
    107c:	e9cd 5000 	strd	r5, r0, [sp]
    1080:	463a      	mov	r2, r7
    1082:	4628      	mov	r0, r5
    1084:	2103      	movs	r1, #3
    1086:	f00e f87d 	bl	f184 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    108a:	4631      	mov	r1, r6
    108c:	f010 fb1c 	bl	116c8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1090:	2800      	cmp	r0, #0
    1092:	d1cd      	bne.n	1030 <ll_adv_enable+0x270>
	adv->is_enabled = 1;
    1094:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1098:	f043 0301 	orr.w	r3, r3, #1
    109c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
    10a0:	2000      	movs	r0, #0
    10a2:	e6cf      	b.n	e44 <ll_adv_enable+0x84>
			return BT_HCI_ERR_INVALID_PARAM;
    10a4:	2012      	movs	r0, #18
    10a6:	e6cd      	b.n	e44 <ll_adv_enable+0x84>
			conn_release(adv);
    10a8:	f011 f89e 	bl	121e8 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    10ac:	2003      	movs	r0, #3
    10ae:	e6c9      	b.n	e44 <ll_adv_enable+0x84>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    10b0:	f105 0080 	add.w	r0, r5, #128	; 0x80
    10b4:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
    10b8:	e6e3      	b.n	e82 <ll_adv_enable+0xc2>
			ll_rx_link_release(link);
    10ba:	4648      	mov	r0, r9
    10bc:	f010 fa6a 	bl	11594 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    10c0:	2007      	movs	r0, #7
    10c2:	e6bf      	b.n	e44 <ll_adv_enable+0x84>
			ll_rx_release(node_rx);
    10c4:	4650      	mov	r0, sl
    10c6:	f010 fa71 	bl	115ac <ll_rx_release>
			ll_rx_link_release(link);
    10ca:	4648      	mov	r0, r9
    10cc:	f010 fa62 	bl	11594 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    10d0:	e7f6      	b.n	10c0 <ll_adv_enable+0x300>
    10d2:	bf00      	nop
    10d4:	f3af 8000 	nop.w
    10d8:	1afd498d 	.word	0x1afd498d
    10dc:	00000007 	.word	0x00000007
    10e0:	20002f88 	.word	0x20002f88
    10e4:	3b9aca00 	.word	0x3b9aca00
    10e8:	00012445 	.word	0x00012445
    10ec:	00010cb5 	.word	0x00010cb5
    10f0:	00011f91 	.word	0x00011f91
    10f4:	20002f7c 	.word	0x20002f7c
    10f8:	84e72a00 	.word	0x84e72a00
    10fc:	00000000 	.word	0x00000000

00001100 <ull_adv_time_update>:
{
    1100:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    1102:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    1106:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    1108:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    110c:	460d      	mov	r5, r1
    110e:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1110:	2101      	movs	r1, #1
    1112:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    1116:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    1118:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    111c:	f00d f94a 	bl	e3b4 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1120:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1122:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1124:	4628      	mov	r0, r5
    1126:	f011 f94f 	bl	123c8 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    112a:	491d      	ldr	r1, [pc, #116]	; (11a0 <ull_adv_time_update+0xa0>)
    112c:	a31a      	add	r3, pc, #104	; (adr r3, 1198 <ull_adv_time_update+0x98>)
    112e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1132:	fba0 0101 	umull	r0, r1, r0, r1
    1136:	f7ff fbf1 	bl	91c <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    113a:	6923      	ldr	r3, [r4, #16]
    113c:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    113e:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    1140:	d222      	bcs.n	1188 <ull_adv_time_update+0x88>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    1142:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    1144:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1146:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1148:	4a16      	ldr	r2, [pc, #88]	; (11a4 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    114a:	9302      	str	r3, [sp, #8]
	ret_cb = TICKER_STATUS_BUSY;
    114c:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    114e:	4b16      	ldr	r3, [pc, #88]	; (11a8 <ull_adv_time_update+0xa8>)
	ret_cb = TICKER_STATUS_BUSY;
    1150:	9109      	str	r1, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1152:	1aa2      	subs	r2, r4, r2
    1154:	40ca      	lsrs	r2, r1
    1156:	fba3 3202 	umull	r3, r2, r3, r2
    115a:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    115c:	2300      	movs	r3, #0
    115e:	440a      	add	r2, r1
    1160:	ae09      	add	r6, sp, #36	; 0x24
    1162:	4912      	ldr	r1, [pc, #72]	; (11ac <ull_adv_time_update+0xac>)
    1164:	9105      	str	r1, [sp, #20]
    1166:	e9cd 3303 	strd	r3, r3, [sp, #12]
    116a:	2103      	movs	r1, #3
    116c:	b2d2      	uxtb	r2, r2
    116e:	9606      	str	r6, [sp, #24]
    1170:	9300      	str	r3, [sp, #0]
    1172:	4618      	mov	r0, r3
    1174:	f00e f8ce 	bl	f314 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1178:	4631      	mov	r1, r6
    117a:	f010 faa5 	bl	116c8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    117e:	b938      	cbnz	r0, 1190 <ull_adv_time_update+0x90>
	adv->ull.ticks_slot = time_ticks;
    1180:	6125      	str	r5, [r4, #16]
		return BT_HCI_ERR_SUCCESS;
    1182:	2000      	movs	r0, #0
}
    1184:	b00a      	add	sp, #40	; 0x28
    1186:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    1188:	d9fb      	bls.n	1182 <ull_adv_time_update+0x82>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    118a:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    118c:	2300      	movs	r3, #0
    118e:	e7da      	b.n	1146 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
    1190:	200c      	movs	r0, #12
}
    1192:	b00a      	add	sp, #40	; 0x28
    1194:	bd70      	pop	{r4, r5, r6, pc}
    1196:	bf00      	nop
    1198:	1afd498d 	.word	0x1afd498d
    119c:	00000007 	.word	0x00000007
    11a0:	3b9aca00 	.word	0x3b9aca00
    11a4:	20002f88 	.word	0x20002f88
    11a8:	4bda12f7 	.word	0x4bda12f7
    11ac:	00010cb5 	.word	0x00010cb5

000011b0 <ull_conn_update_ticker.constprop.0>:
				conn->llcp.prep.lazy;
	}

	return event_counter;
}
static void ull_conn_update_ticker(struct ll_conn *conn,
    11b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b4:	4605      	mov	r5, r0
    11b6:	b08b      	sub	sp, #44	; 0x2c
    11b8:	468b      	mov	fp, r1
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start
	 * to avoid RTC being stopped if no tickers active.
	 */
	uint32_t mayfly_was_enabled =
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
    11ba:	2001      	movs	r0, #1
    11bc:	2102      	movs	r1, #2
static void ull_conn_update_ticker(struct ll_conn *conn,
    11be:	469a      	mov	sl, r3
    11c0:	4614      	mov	r4, r2
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
    11c2:	f019 fb65 	bl	1a890 <mayfly_is_enabled>

	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0U);
    11c6:	2200      	movs	r2, #0
    11c8:	2102      	movs	r1, #2
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
    11ca:	4681      	mov	r9, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0U);
    11cc:	2001      	movs	r0, #1
    11ce:	f00c ffb7 	bl	e140 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    11d2:	4939      	ldr	r1, [pc, #228]	; (12b8 <ull_conn_update_ticker.constprop.0+0x108>)
    11d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
    11d8:	4628      	mov	r0, r5
    11da:	f00c ff41 	bl	e060 <mem_index_get>
#endif /* CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO */

	/* start periph/central with new timings */
	uint8_t ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    11de:	1cc6      	adds	r6, r0, #3
    11e0:	b2f6      	uxtb	r6, r6
	uint32_t ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    11e2:	4b36      	ldr	r3, [pc, #216]	; (12bc <ull_conn_update_ticker.constprop.0+0x10c>)
    11e4:	9500      	str	r5, [sp, #0]
    11e6:	4632      	mov	r2, r6
    11e8:	2101      	movs	r1, #1
    11ea:	2000      	movs	r0, #0
    11ec:	f00e f8aa 	bl	f344 <ticker_stop>
				    ticker_id_conn, ticker_stop_conn_op_cb, (void *)conn);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    11f0:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    11f4:	d00c      	beq.n	1210 <ull_conn_update_ticker.constprop.0+0x60>
    11f6:	4a32      	ldr	r2, [pc, #200]	; (12c0 <ull_conn_update_ticker.constprop.0+0x110>)
    11f8:	4932      	ldr	r1, [pc, #200]	; (12c4 <ull_conn_update_ticker.constprop.0+0x114>)
    11fa:	4833      	ldr	r0, [pc, #204]	; (12c8 <ull_conn_update_ticker.constprop.0+0x118>)
    11fc:	f641 73cb 	movw	r3, #8139	; 0x1fcb
    1200:	f020 faa4 	bl	2174c <assert_print>
    1204:	4040      	eors	r0, r0
    1206:	f380 8811 	msr	BASEPRI, r0
    120a:	f04f 0003 	mov.w	r0, #3
    120e:	df02      	svc	2
		  (ticker_status == TICKER_STATUS_BUSY));
	ticker_status = ticker_start(
		TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH, ticker_id_conn, ticks_at_expire,
		ticks_win_offset, HAL_TICKER_US_TO_TICKS(periodic_us),
    1210:	4b2e      	ldr	r3, [pc, #184]	; (12cc <ull_conn_update_ticker.constprop.0+0x11c>)
    1212:	fba4 4803 	umull	r4, r8, r4, r3
    1216:	4620      	mov	r0, r4
    1218:	a325      	add	r3, pc, #148	; (adr r3, 12b0 <ull_conn_update_ticker.constprop.0+0x100>)
    121a:	e9d3 2300 	ldrd	r2, r3, [r3]
    121e:	4641      	mov	r1, r8
    1220:	f7ff fb7c 	bl	91c <__aeabi_uldivmod>
	ticker_status = ticker_start(
    1224:	9508      	str	r5, [sp, #32]
    1226:	9506      	str	r5, [sp, #24]
    1228:	692b      	ldr	r3, [r5, #16]
    122a:	9304      	str	r3, [sp, #16]
		HAL_TICKER_REMAINDER(periodic_us),
    122c:	4b28      	ldr	r3, [pc, #160]	; (12d0 <ull_conn_update_ticker.constprop.0+0x120>)
    122e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    1232:	fba7 3103 	umull	r3, r1, r7, r3
    1236:	1ae0      	subs	r0, r4, r3
	ticker_status = ticker_start(
    1238:	4b26      	ldr	r3, [pc, #152]	; (12d4 <ull_conn_update_ticker.constprop.0+0x124>)
    123a:	9307      	str	r3, [sp, #28]
		HAL_TICKER_REMAINDER(periodic_us),
    123c:	f04f 0207 	mov.w	r2, #7
	ticker_status = ticker_start(
    1240:	4b25      	ldr	r3, [pc, #148]	; (12d8 <ull_conn_update_ticker.constprop.0+0x128>)
    1242:	9305      	str	r3, [sp, #20]
		HAL_TICKER_REMAINDER(periodic_us),
    1244:	fb02 1107 	mla	r1, r2, r7, r1
	ticker_status = ticker_start(
    1248:	f64f 73fe 	movw	r3, #65534	; 0xfffe
		HAL_TICKER_REMAINDER(periodic_us),
    124c:	eb68 0101 	sbc.w	r1, r8, r1
	ticker_status = ticker_start(
    1250:	9303      	str	r3, [sp, #12]
		HAL_TICKER_REMAINDER(periodic_us),
    1252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1256:	2300      	movs	r3, #0
    1258:	f7ff fb60 	bl	91c <__aeabi_uldivmod>
	ticker_status = ticker_start(
    125c:	f8cd b000 	str.w	fp, [sp]
    1260:	e9cd 7001 	strd	r7, r0, [sp, #4]
    1264:	4653      	mov	r3, sl
    1266:	4632      	mov	r2, r6
    1268:	2101      	movs	r1, #1
    126a:	2000      	movs	r0, #0
    126c:	f00d ffe0 	bl	f230 <ticker_start>
		ull_periph_ticker_cb,
#else
		ull_central_ticker_cb,
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CENTRAL */
		conn, ticker_start_conn_op_cb, (void *)conn);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1270:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    1274:	d00c      	beq.n	1290 <ull_conn_update_ticker.constprop.0+0xe0>
    1276:	4a12      	ldr	r2, [pc, #72]	; (12c0 <ull_conn_update_ticker.constprop.0+0x110>)
    1278:	4912      	ldr	r1, [pc, #72]	; (12c4 <ull_conn_update_ticker.constprop.0+0x114>)
    127a:	4813      	ldr	r0, [pc, #76]	; (12c8 <ull_conn_update_ticker.constprop.0+0x118>)
    127c:	f44f 53ff 	mov.w	r3, #8160	; 0x1fe0
    1280:	f020 fa64 	bl	2174c <assert_print>
    1284:	4040      	eors	r0, r0
    1286:	f380 8811 	msr	BASEPRI, r0
    128a:	f04f 0003 	mov.w	r0, #3
    128e:	df02      	svc	2
		  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, if disabled in this function */
	if (mayfly_was_enabled) {
    1290:	f1b9 0f00 	cmp.w	r9, #0
    1294:	d102      	bne.n	129c <ull_conn_update_ticker.constprop.0+0xec>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
	}
#endif /* CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO */
}
    1296:	b00b      	add	sp, #44	; 0x2c
    1298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
    129c:	2201      	movs	r2, #1
    129e:	2102      	movs	r1, #2
    12a0:	4610      	mov	r0, r2
}
    12a2:	b00b      	add	sp, #44	; 0x2c
    12a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
    12a8:	f00c bf4a 	b.w	e140 <mayfly_enable>
    12ac:	f3af 8000 	nop.w
    12b0:	1afd498d 	.word	0x1afd498d
    12b4:	00000007 	.word	0x00000007
    12b8:	20001d50 	.word	0x20001d50
    12bc:	00012d09 	.word	0x00012d09
    12c0:	00028d4c 	.word	0x00028d4c
    12c4:	00028e10 	.word	0x00028e10
    12c8:	0002866c 	.word	0x0002866c
    12cc:	3b9aca00 	.word	0x3b9aca00
    12d0:	1afd498d 	.word	0x1afd498d
    12d4:	00012cb1 	.word	0x00012cb1
    12d8:	00017ca1 	.word	0x00017ca1
    12dc:	00000000 	.word	0x00000000

000012e0 <ull_conn_done>:
{
    12e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
    12e4:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    12e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    12e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12ec:	429a      	cmp	r2, r3
{
    12ee:	b08d      	sub	sp, #52	; 0x34
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    12f0:	f000 8088 	beq.w	1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    12f4:	4605      	mov	r5, r0
	ull_cp_tx_ntf(conn);
    12f6:	4620      	mov	r0, r4
    12f8:	f014 f85e 	bl	153b8 <ull_cp_tx_ntf>
	switch (done->extra.mic_state) {
    12fc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    1300:	2b01      	cmp	r3, #1
    1302:	f000 8112 	beq.w	152a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1a2>
    1306:	2b02      	cmp	r3, #2
    1308:	f000 80fe 	beq.w	1508 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x180>
    130c:	2b00      	cmp	r3, #0
    130e:	f000 80dd 	beq.w	14cc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x144>
	reason_final = conn->llcp_terminate.reason_final;
    1312:	f894 7148 	ldrb.w	r7, [r4, #328]	; 0x148
	if (reason_final && (
    1316:	2f00      	cmp	r7, #0
    1318:	f040 80f9 	bne.w	150e <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x186>
	if (lll->latency_prepare) {
    131c:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
	latency_event = lll->latency_event;
    131e:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (lll->latency_prepare) {
    1322:	2e00      	cmp	r6, #0
    1324:	d171      	bne.n	140a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x82>
	if (done->extra.trx_cnt) {
    1326:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + 1U;
    1328:	f108 0601 	add.w	r6, r8, #1
	ticks_drift_plus = 0U;
    132c:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
    132e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		elapsed_event = latency_event + 1U;
    1332:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
    1334:	2a00      	cmp	r2, #0
    1336:	d070      	beq.n	141a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x92>
		} else if (lll->role) {
    1338:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    133c:	2b00      	cmp	r3, #0
    133e:	f2c0 814b 	blt.w	15d8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x250>
		conn->connect_expire = 0U;
    1342:	2300      	movs	r3, #0
    1344:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
	if (done->extra.crc_valid) {
    1348:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    134c:	07d9      	lsls	r1, r3, #31
    134e:	f140 80f2 	bpl.w	1536 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1ae>
		conn->supervision_expire = 0U;
    1352:	2300      	movs	r3, #0
    1354:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
	if (-ETIMEDOUT == ull_cp_prt_elapse(conn, elapsed_event, &error_code)) {
    1358:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    135c:	4631      	mov	r1, r6
    135e:	4620      	mov	r0, r4
    1360:	f013 fe24 	bl	14fac <ull_cp_prt_elapse>
    1364:	3074      	adds	r0, #116	; 0x74
    1366:	f000 8149 	beq.w	15fc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x274>
	if (conn->apto_expire != 0U) {
    136a:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    136e:	b12b      	cbz	r3, 137c <ull_conn_done+0x9c>
		if (conn->apto_expire > elapsed_event) {
    1370:	42b3      	cmp	r3, r6
    1372:	f240 8110 	bls.w	1596 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20e>
			conn->apto_expire -= elapsed_event;
    1376:	1b9b      	subs	r3, r3, r6
    1378:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
	if (conn->appto_expire != 0U) {
    137c:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
    1380:	b12b      	cbz	r3, 138e <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6>
		if (conn->appto_expire > elapsed_event) {
    1382:	42b3      	cmp	r3, r6
    1384:	f240 80fe 	bls.w	1584 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1fc>
			conn->appto_expire -= elapsed_event;
    1388:	1b9b      	subs	r3, r3, r6
    138a:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
	if ((force) || (latency_event != lll->latency_event)) {
    138e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
    1390:	b917      	cbnz	r7, 1398 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x10>
    1392:	45a8      	cmp	r8, r5
    1394:	f000 80ed 	beq.w	1572 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1ea>
		lazy = lll->latency_event + 1U;
    1398:	3501      	adds	r5, #1
    139a:	b2ad      	uxth	r5, r5
	if (lll->evt_len_upd) {
    139c:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    13a0:	f013 0601 	ands.w	r6, r3, #1
    13a4:	d15a      	bne.n	145c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xd4>
	if (ticks_drift_plus || ticks_drift_minus ||
    13a6:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
    13aa:	460a      	mov	r2, r1
    13ac:	2b00      	cmp	r3, #0
    13ae:	f040 80f0 	bne.w	1592 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20a>
    13b2:	2900      	cmp	r1, #0
    13b4:	f000 80df 	beq.w	1576 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1ee>
	ticks_slot_plus = 0U;
    13b8:	461e      	mov	r6, r3
	ticks_slot_minus = 0U;
    13ba:	4618      	mov	r0, r3
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    13bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
    13be:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    13c0:	9406      	str	r4, [sp, #24]
    13c2:	e9cd 5703 	strd	r5, r7, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    13c6:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    13c8:	4dad      	ldr	r5, [pc, #692]	; (1680 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2f8>)
    13ca:	9002      	str	r0, [sp, #8]
    13cc:	e9cd 1600 	strd	r1, r6, [sp]
    13d0:	b2d2      	uxtb	r2, r2
    13d2:	2101      	movs	r1, #1
    13d4:	2000      	movs	r0, #0
    13d6:	9505      	str	r5, [sp, #20]
    13d8:	f00d ff9c 	bl	f314 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    13dc:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    13e0:	d010      	beq.n	1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    13e2:	f010 f9b1 	bl	11748 <ull_disable_mark_get>
    13e6:	4284      	cmp	r4, r0
    13e8:	d00c      	beq.n	1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    13ea:	4aa6      	ldr	r2, [pc, #664]	; (1684 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2fc>)
    13ec:	49a6      	ldr	r1, [pc, #664]	; (1688 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x300>)
    13ee:	48a7      	ldr	r0, [pc, #668]	; (168c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x304>)
    13f0:	f240 73bc 	movw	r3, #1980	; 0x7bc
    13f4:	f020 f9aa 	bl	2174c <assert_print>
    13f8:	4040      	eors	r0, r0
    13fa:	f380 8811 	msr	BASEPRI, r0
    13fe:	f04f 0003 	mov.w	r0, #3
    1402:	df02      	svc	2
}
    1404:	b00d      	add	sp, #52	; 0x34
    1406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.trx_cnt) {
    140a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + lll->latency_prepare;
    140c:	4446      	add	r6, r8
	ticks_drift_plus = 0U;
    140e:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
    1410:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		elapsed_event = latency_event + lll->latency_prepare;
    1414:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
    1416:	2a00      	cmp	r2, #0
    1418:	d18e      	bne.n	1338 <ull_conn_done+0x58>
	if (done->extra.crc_valid) {
    141a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    141e:	07da      	lsls	r2, r3, #31
    1420:	d497      	bmi.n	1352 <ull_conn_done+0x72>
	else if (conn->connect_expire) {
    1422:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
    1426:	2b00      	cmp	r3, #0
    1428:	f000 8085 	beq.w	1536 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1ae>
		if (conn->connect_expire > elapsed_event) {
    142c:	42b3      	cmp	r3, r6
    142e:	f240 8106 	bls.w	163e <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2b6>
			conn->connect_expire -= elapsed_event;
    1432:	1b9b      	subs	r3, r3, r6
    1434:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
	if (conn->supervision_expire) {
    1438:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
    143c:	2b00      	cmp	r3, #0
    143e:	d08b      	beq.n	1358 <ull_conn_done+0x78>
		if (conn->supervision_expire > elapsed_event) {
    1440:	429e      	cmp	r6, r3
    1442:	f080 80eb 	bcs.w	161c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x294>
			conn->supervision_expire -= elapsed_event;
    1446:	1b9b      	subs	r3, r3, r6
    1448:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
    144a:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
    144c:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
    144e:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
			lll->latency_event = 0U;
    1452:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
    1454:	f200 80af 	bhi.w	15b6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x22e>
				force = 1U;
    1458:	2701      	movs	r7, #1
    145a:	e77d      	b.n	1358 <ull_conn_done+0x78>
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
    145c:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		lll->evt_len_upd = 0;
    1460:	f36f 0300 	bfc	r3, #0, #1
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
    1464:	2a00      	cmp	r2, #0
		lll->evt_len_upd = 0;
    1466:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
    146a:	db7a      	blt.n	1562 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1da>
			lll_radio_tx_ready_delay_get(lll->phy_tx, lll->phy_flags);
    146c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    1470:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    1474:	f000 0007 	and.w	r0, r0, #7
    1478:	f017 f942 	bl	18700 <lll_radio_tx_ready_delay_get>
		rx_time = lll->dle.eff.max_rx_time;
    147c:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
		tx_time = lll->dle.eff.max_tx_time;
    1480:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
		ticks_slot = HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1484:	4419      	add	r1, r3
    1486:	f201 11ad 	addw	r1, r1, #429	; 0x1ad
    148a:	4408      	add	r0, r1
    148c:	4980      	ldr	r1, [pc, #512]	; (1690 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x308>)
    148e:	a37a      	add	r3, pc, #488	; (adr r3, 1678 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2f0>)
    1490:	e9d3 2300 	ldrd	r2, r3, [r3]
    1494:	fba0 0101 	umull	r0, r1, r0, r1
    1498:	f7ff fa40 	bl	91c <__aeabi_uldivmod>
	if (ticks_drift_plus || ticks_drift_minus ||
    149c:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
		ticks_slot = HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14a0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		if (ticks_slot > conn->ull.ticks_slot) {
    14a4:	6920      	ldr	r0, [r4, #16]
		conn->ull.ticks_slot = ticks_slot;
    14a6:	6122      	str	r2, [r4, #16]
		if (ticks_slot > conn->ull.ticks_slot) {
    14a8:	4290      	cmp	r0, r2
			ticks_slot_plus = ticks_slot - conn->ull.ticks_slot;
    14aa:	bf35      	itete	cc
    14ac:	1a16      	subcc	r6, r2, r0
			ticks_slot_minus = conn->ull.ticks_slot - ticks_slot;
    14ae:	1a80      	subcs	r0, r0, r2
	ticks_slot_minus = 0U;
    14b0:	2000      	movcc	r0, #0
	ticks_slot_plus = 0U;
    14b2:	2600      	movcs	r6, #0
	if (ticks_drift_plus || ticks_drift_minus ||
    14b4:	460a      	mov	r2, r1
    14b6:	2b00      	cmp	r3, #0
    14b8:	d180      	bne.n	13bc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x34>
    14ba:	ea51 0c06 	orrs.w	ip, r1, r6
    14be:	f47f af7d 	bne.w	13bc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x34>
	    ticks_slot_plus || ticks_slot_minus ||
    14c2:	2800      	cmp	r0, #0
    14c4:	d057      	beq.n	1576 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1ee>
    14c6:	4619      	mov	r1, r3
    14c8:	461e      	mov	r6, r3
    14ca:	e777      	b.n	13bc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x34>
		if (lll->enc_rx && lll->enc_tx) {
    14cc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    14d0:	f003 0318 	and.w	r3, r3, #24
    14d4:	2b18      	cmp	r3, #24
    14d6:	f47f af1c 	bne.w	1312 <ull_conn_done+0x32>
					    (lll->latency + 6)) ?
    14da:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
    14dc:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
					    (lll->latency + 6)) ?
    14e0:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
    14e2:	429a      	cmp	r2, r3
    14e4:	bfc4      	itt	gt
    14e6:	1f93      	subgt	r3, r2, #6
    14e8:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
    14ea:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
			appto_reload_new = (conn->apto_reload >
    14ee:	bfcc      	ite	gt
    14f0:	b29b      	uxthgt	r3, r3
    14f2:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
    14f4:	4299      	cmp	r1, r3
    14f6:	f000 809c 	beq.w	1632 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2aa>
				conn->appto_reload = appto_reload_new;
    14fa:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
				conn->appto_expire = conn->appto_reload;
    14fe:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
				conn->apto_expire = conn->apto_reload;
    1502:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
    1506:	e704      	b.n	1312 <ull_conn_done+0x32>
		conn->llcp_terminate.reason_final =
    1508:	273d      	movs	r7, #61	; 0x3d
    150a:	f884 7148 	strb.w	r7, [r4, #328]	; 0x148
	rx->hdr.handle = conn->lll.handle;
    150e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1510:	f8a4 2152 	strh.w	r2, [r4, #338]	; 0x152
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    1514:	2318      	movs	r3, #24
	conn_cleanup_finalize(conn);
    1516:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    1518:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
	*((uint8_t *)rx->pdu) = reason;
    151c:	f884 7168 	strb.w	r7, [r4, #360]	; 0x168
}
    1520:	b00d      	add	sp, #52	; 0x34
    1522:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn_cleanup_finalize(conn);
    1526:	f011 bf83 	b.w	13430 <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
    152a:	2300      	movs	r3, #0
    152c:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
    1530:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
		break;
    1534:	e6ed      	b.n	1312 <ull_conn_done+0x32>
		if (!conn->supervision_expire) {
    1536:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
    153a:	2b00      	cmp	r3, #0
    153c:	d180      	bne.n	1440 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb8>
			const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
    153e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			conn->supervision_expire = RADIO_CONN_EVENTS(
    1540:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
			const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
    1544:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1548:	fb01 f202 	mul.w	r2, r1, r2
			conn->supervision_expire = RADIO_CONN_EVENTS(
    154c:	f242 7110 	movw	r1, #10000	; 0x2710
    1550:	fb01 2303 	mla	r3, r1, r3, r2
    1554:	3b01      	subs	r3, #1
    1556:	fbb3 f3f2 	udiv	r3, r3, r2
    155a:	b29b      	uxth	r3, r3
    155c:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
    1560:	e76c      	b.n	143c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb4>
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
    1562:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    1566:	2101      	movs	r1, #1
    1568:	f000 0007 	and.w	r0, r0, #7
    156c:	f017 f8ca 	bl	18704 <lll_radio_rx_ready_delay_get>
    1570:	e784      	b.n	147c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xf4>
	lazy = 0U;
    1572:	463d      	mov	r5, r7
    1574:	e712      	b.n	139c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x14>
	    ticks_slot_plus || ticks_slot_minus ||
    1576:	2d00      	cmp	r5, #0
    1578:	d054      	beq.n	1624 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x29c>
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    157a:	2600      	movs	r6, #0
    157c:	4611      	mov	r1, r2
    157e:	4630      	mov	r0, r6
    1580:	4633      	mov	r3, r6
    1582:	e71b      	b.n	13bc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x34>
			conn->appto_expire = 0U;
    1584:	2300      	movs	r3, #0
    1586:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
			ull_cp_le_ping(conn);
    158a:	4620      	mov	r0, r4
    158c:	f013 fd88 	bl	150a0 <ull_cp_le_ping>
    1590:	e6fd      	b.n	138e <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6>
	ticks_slot_minus = 0U;
    1592:	4630      	mov	r0, r6
    1594:	e712      	b.n	13bc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x34>
			rx = ll_pdu_rx_alloc();
    1596:	f010 f84f 	bl	11638 <ll_pdu_rx_alloc>
			if (rx) {
    159a:	4601      	mov	r1, r0
    159c:	2800      	cmp	r0, #0
    159e:	d044      	beq.n	162a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2a2>
				conn->apto_expire = 0U;
    15a0:	2300      	movs	r3, #0
    15a2:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				rx->handle = lll->handle;
    15a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    15a8:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
    15aa:	231b      	movs	r3, #27
    15ac:	7103      	strb	r3, [r0, #4]
				ll_rx_put_sched(rx->link, rx);
    15ae:	6800      	ldr	r0, [r0, #0]
    15b0:	f010 f80c 	bl	115cc <ll_rx_put_sched>
    15b4:	e6e2      	b.n	137c <ull_conn_done+0x9c>
			else if (lll->role) {
    15b6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    15ba:	4293      	cmp	r3, r2
    15bc:	f6bf aecc 	bge.w	1358 <ull_conn_done+0x78>
				if (latency_event) {
    15c0:	f1b8 0f00 	cmp.w	r8, #0
    15c4:	f47f af48 	bne.w	1458 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xd0>
					force = conn->periph.force & 0x01;
    15c8:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
					conn->periph.force >>= 1U;
    15cc:	085a      	lsrs	r2, r3, #1
					if (force) {
    15ce:	07db      	lsls	r3, r3, #31
    15d0:	d44b      	bmi.n	166a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2e2>
					conn->periph.force >>= 1U;
    15d2:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
    15d6:	e6bf      	b.n	1358 <ull_conn_done+0x78>
			ull_drift_ticks_get(done, &ticks_drift_plus,
    15d8:	4628      	mov	r0, r5
    15da:	aa0a      	add	r2, sp, #40	; 0x28
    15dc:	a90b      	add	r1, sp, #44	; 0x2c
			if (!ull_tx_q_peek(&conn->tx_q)) {
    15de:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
			ull_drift_ticks_get(done, &ticks_drift_plus,
    15e2:	f7ff fba1 	bl	d28 <ull_drift_ticks_get>
			if (!ull_tx_q_peek(&conn->tx_q)) {
    15e6:	4648      	mov	r0, r9
    15e8:	f013 fad2 	bl	14b90 <ull_tx_q_peek>
    15ec:	b358      	cbz	r0, 1646 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2be>
			if (ull_tx_q_peek(&conn->tx_q) ||
    15ee:	4648      	mov	r0, r9
    15f0:	f013 face 	bl	14b90 <ull_tx_q_peek>
    15f4:	b358      	cbz	r0, 164e <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2c6>
				lll->latency_event = 0U;
    15f6:	2300      	movs	r3, #0
    15f8:	8623      	strh	r3, [r4, #48]	; 0x30
    15fa:	e6a2      	b.n	1342 <ull_conn_done+0x62>
		conn_cleanup(conn, error_code);
    15fc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
	rx->hdr.handle = conn->lll.handle;
    1600:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    1602:	2218      	movs	r2, #24
	rx->hdr.handle = conn->lll.handle;
    1604:	f8a4 1152 	strh.w	r1, [r4, #338]	; 0x152
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    1608:	f884 2150 	strb.w	r2, [r4, #336]	; 0x150
	*((uint8_t *)rx->pdu) = reason;
    160c:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
	conn_cleanup_finalize(conn);
    1610:	4620      	mov	r0, r4
    1612:	f011 ff0d 	bl	13430 <conn_cleanup_finalize>
}
    1616:	b00d      	add	sp, #52	; 0x34
    1618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	rx->hdr.handle = conn->lll.handle;
    161c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    161e:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
    1620:	2308      	movs	r3, #8
    1622:	e7ef      	b.n	1604 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x27c>
	    lazy || force) {
    1624:	2f00      	cmp	r7, #0
    1626:	d1a8      	bne.n	157a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1f2>
    1628:	e6ec      	b.n	1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
				conn->apto_expire = 1U;
    162a:	2301      	movs	r3, #1
    162c:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
    1630:	e6a4      	b.n	137c <ull_conn_done+0x9c>
			if (conn->apto_expire == 0U) {
    1632:	f8b4 1180 	ldrh.w	r1, [r4, #384]	; 0x180
    1636:	2900      	cmp	r1, #0
    1638:	f47f ae6b 	bne.w	1312 <ull_conn_done+0x32>
    163c:	e75f      	b.n	14fe <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x176>
	rx->hdr.handle = conn->lll.handle;
    163e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    1640:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
    1642:	233e      	movs	r3, #62	; 0x3e
    1644:	e7de      	b.n	1604 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x27c>
				ull_conn_tx_demux(UINT8_MAX);
    1646:	20ff      	movs	r0, #255	; 0xff
    1648:	f011 feb2 	bl	133b0 <ull_conn_tx_demux>
    164c:	e7cf      	b.n	15ee <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x266>
			    memq_peek(lll->memq_tx.head,
    164e:	4602      	mov	r2, r0
    1650:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1654:	f00c fd3c 	bl	e0d0 <memq_peek>
			if (ull_tx_q_peek(&conn->tx_q) ||
    1658:	2800      	cmp	r0, #0
    165a:	d1cc      	bne.n	15f6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x26e>
			} else if (lll->periph.latency_enabled) {
    165c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    1660:	0758      	lsls	r0, r3, #29
				lll->latency_event = lll->latency;
    1662:	bf44      	itt	mi
    1664:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
    1666:	8623      	strhmi	r3, [r4, #48]	; 0x30
    1668:	e66b      	b.n	1342 <ull_conn_done+0x62>
						conn->periph.force |= BIT(31);
    166a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    166e:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
    1672:	e6f1      	b.n	1458 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xd0>
    1674:	f3af 8000 	nop.w
    1678:	1afd498d 	.word	0x1afd498d
    167c:	00000007 	.word	0x00000007
    1680:	00012c71 	.word	0x00012c71
    1684:	00028d4c 	.word	0x00028d4c
    1688:	00028e74 	.word	0x00028e74
    168c:	0002866c 	.word	0x0002866c
    1690:	3b9aca00 	.word	0x3b9aca00
    1694:	00000000 	.word	0x00000000

00001698 <ull_conn_update_parameters>:

void ull_conn_update_parameters(struct ll_conn *conn, uint8_t is_cu_proc, uint8_t win_size,
				uint16_t win_offset_us, uint16_t interval, uint16_t latency,
				uint16_t timeout, uint16_t instant)
{
    1698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    169c:	b087      	sub	sp, #28
    169e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    16a2:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
	return hdr->ref;
    16a6:	7803      	ldrb	r3, [r0, #0]
    16a8:	9202      	str	r2, [sp, #8]
    16aa:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    16ae:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
    16b2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
		event_counter = lll->event_counter - 1;
    16b6:	8e46      	ldrh	r6, [r0, #50]	; 0x32
		event_counter = lll->event_counter + lll->latency_prepare +
    16b8:	f8b0 902e 	ldrh.w	r9, [r0, #46]	; 0x2e
				conn->llcp.prep.lazy;
    16bc:	f8b0 b110 	ldrh.w	fp, [r0, #272]	; 0x110
{
    16c0:	9101      	str	r1, [sp, #4]
    16c2:	4604      	mov	r4, r0
    16c4:	9203      	str	r2, [sp, #12]
	if (ull_ref_get(&conn->ull)) {
    16c6:	2b00      	cmp	r3, #0
    16c8:	f000 808e 	beq.w	17e8 <ull_conn_update_parameters+0x150>
		event_counter = lll->event_counter - 1;
    16cc:	3e01      	subs	r6, #1
    16ce:	b2b6      	uxth	r6, r6

	ticks_at_expire = conn->llcp.prep.ticks_at_expire;

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
	/* restore to normal prepare */
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    16d0:	68a3      	ldr	r3, [r4, #8]
	ticks_at_expire = conn->llcp.prep.ticks_at_expire;
    16d2:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
	instant_latency = (event_counter - instant) & 0xFFFF;
    16d6:	1b72      	subs	r2, r6, r5
    16d8:	b292      	uxth	r2, r2
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    16da:	2b00      	cmp	r3, #0
	instant_latency = (event_counter - instant) & 0xFFFF;
    16dc:	9200      	str	r2, [sp, #0]
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    16de:	da09      	bge.n	16f4 <ull_conn_update_parameters+0x5c>
		uint32_t ticks_prepare_to_start =
    16e0:	68e1      	ldr	r1, [r4, #12]
    16e2:	6862      	ldr	r2, [r4, #4]
			MAX(conn->ull.ticks_active_to_start, conn->ull.ticks_preempt_to_start);

		conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    16e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    16e8:	4291      	cmp	r1, r2
    16ea:	bf2c      	ite	cs
    16ec:	187f      	addcs	r7, r7, r1
    16ee:	18bf      	addcc	r7, r7, r2
    16f0:	60a3      	str	r3, [r4, #8]

		ticks_at_expire -= (conn->ull.ticks_prepare_to_start - ticks_prepare_to_start);
    16f2:	1aff      	subs	r7, r7, r3
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

	/* compensate for instant_latency due to laziness */
	conn_interval_old = instant_latency * lll->interval;
    16f4:	9a00      	ldr	r2, [sp, #0]
    16f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    16f8:	fb13 f302 	smulbb	r3, r3, r2
    16fc:	b29b      	uxth	r3, r3
	latency_upd = conn_interval_old / interval;
    16fe:	fbb3 f2f8 	udiv	r2, r3, r8
	conn_interval_new = latency_upd * interval;
    1702:	fb18 f002 	smulbb	r0, r8, r2
    1706:	b280      	uxth	r0, r0
	if (conn_interval_new > conn_interval_old) {
    1708:	4283      	cmp	r3, r0
	latency_upd = conn_interval_old / interval;
    170a:	fa1f fa82 	uxth.w	sl, r2
	if (conn_interval_new > conn_interval_old) {
    170e:	d25a      	bcs.n	17c6 <ull_conn_update_parameters+0x12e>
		ticks_at_expire += HAL_TICKER_US_TO_TICKS((conn_interval_new - conn_interval_old) *
    1710:	1ac0      	subs	r0, r0, r3
    1712:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1716:	495e      	ldr	r1, [pc, #376]	; (1890 <ull_conn_update_parameters+0x1f8>)
    1718:	fb02 f000 	mul.w	r0, r2, r0
    171c:	fba0 0101 	umull	r0, r1, r0, r1
    1720:	a359      	add	r3, pc, #356	; (adr r3, 1888 <ull_conn_update_parameters+0x1f0>)
    1722:	e9d3 2300 	ldrd	r2, r3, [r3]
    1726:	f7ff f8f9 	bl	91c <__aeabi_uldivmod>
    172a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    172e:	4407      	add	r7, r0
	} else {
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS((conn_interval_old - conn_interval_new) *
							  CONN_INT_UNIT_US);
	}

	lll->latency_prepare += conn->llcp.prep.lazy;
    1730:	44d9      	add	r9, fp

	/* calculate the window widening and interval */
	conn_interval_us = interval * CONN_INT_UNIT_US;
	periodic_us = conn_interval_us;

	switch (lll->role) {
    1732:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	lll->latency_prepare -= (instant_latency - latency_upd);
    1736:	444d      	add	r5, r9
    1738:	1bad      	subs	r5, r5, r6
    173a:	4455      	add	r5, sl
	conn_interval_us = interval * CONN_INT_UNIT_US;
    173c:	f240 46e2 	movw	r6, #1250	; 0x4e2
	switch (lll->role) {
    1740:	09db      	lsrs	r3, r3, #7
	lll->latency_prepare -= (instant_latency - latency_upd);
    1742:	85e5      	strh	r5, [r4, #46]	; 0x2e
	conn_interval_us = interval * CONN_INT_UNIT_US;
    1744:	fb06 f508 	mul.w	r5, r6, r8
	switch (lll->role) {
    1748:	d152      	bne.n	17f0 <ull_conn_update_parameters+0x158>
		 */
		ticks_win_offset += 1U;
		break;
#endif /*CONFIG_BT_CENTRAL */
	default:
		LL_ASSERT(0);
    174a:	4a52      	ldr	r2, [pc, #328]	; (1894 <ull_conn_update_parameters+0x1fc>)
    174c:	4952      	ldr	r1, [pc, #328]	; (1898 <ull_conn_update_parameters+0x200>)
    174e:	4853      	ldr	r0, [pc, #332]	; (189c <ull_conn_update_parameters+0x204>)
    1750:	f242 0356 	movw	r3, #8278	; 0x2056
    1754:	f01f fffa 	bl	2174c <assert_print>
    1758:	4040      	eors	r0, r0
    175a:	f380 8811 	msr	BASEPRI, r0
    175e:	f04f 0003 	mov.w	r0, #3
    1762:	df02      	svc	2
	uint32_t ticks_win_offset = 0U;
    1764:	2600      	movs	r6, #0
	periodic_us = conn_interval_us;
    1766:	46a9      	mov	r9, r5
		break;
	}

	lll->interval = interval;
	lll->latency = latency;
    1768:	9b02      	ldr	r3, [sp, #8]
    176a:	85a3      	strh	r3, [r4, #44]	; 0x2c

	conn->supervision_timeout = timeout;
    176c:	9b03      	ldr	r3, [sp, #12]
    176e:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
	ull_cp_prt_reload_set(conn, conn_interval_us);
    1772:	4629      	mov	r1, r5
    1774:	4620      	mov	r0, r4
	lll->interval = interval;
    1776:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
	ull_cp_prt_reload_set(conn, conn_interval_us);
    177a:	f013 fc51 	bl	15020 <ull_cp_prt_reload_set>

#if defined(CONFIG_BT_CTLR_LE_PING)
	/* APTO in no. of connection events */
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
    177e:	4b48      	ldr	r3, [pc, #288]	; (18a0 <ull_conn_update_parameters+0x208>)
	/* Dispatch LE Ping PDU 6 connection events (that peer would
	 * listen to) before 30s timeout
	 * TODO: "peer listens to" is greater than 30s due to latency
	 */
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    1780:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
    1782:	442b      	add	r3, r5
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    1784:	1d88      	adds	r0, r1, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
    1786:	fbb3 f3f5 	udiv	r3, r3, r5
    178a:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    178c:	4290      	cmp	r0, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
    178e:	f8a4 217e 	strh.w	r2, [r4, #382]	; 0x17e
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    1792:	d202      	bcs.n	179a <ull_conn_update_parameters+0x102>
					   (conn->apto_reload - (lll->latency + 6U)) :
    1794:	1a52      	subs	r2, r2, r1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    1796:	3a06      	subs	r2, #6
    1798:	b292      	uxth	r2, r2
					   conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	if (is_cu_proc) {
    179a:	9b01      	ldr	r3, [sp, #4]
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    179c:	f8a4 217a 	strh.w	r2, [r4, #378]	; 0x17a
	if (is_cu_proc) {
    17a0:	b113      	cbz	r3, 17a8 <ull_conn_update_parameters+0x110>
		conn->supervision_expire = 0U;
    17a2:	2300      	movs	r3, #0
    17a4:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
	}

	/* Update ACL ticker */
	ull_conn_update_ticker(conn, ticks_win_offset, ticks_slot_overhead, periodic_us,
    17a8:	463b      	mov	r3, r7
    17aa:	464a      	mov	r2, r9
    17ac:	4631      	mov	r1, r6
    17ae:	4620      	mov	r0, r4
    17b0:	f7ff fcfe 	bl	11b0 <ull_conn_update_ticker.constprop.0>
			       ticks_at_expire);
	/* Signal that the prepare needs to be canceled */
	conn->cancel_prepare = 1U;
    17b4:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    17b8:	f043 0301 	orr.w	r3, r3, #1
    17bc:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
}
    17c0:	b007      	add	sp, #28
    17c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS((conn_interval_old - conn_interval_new) *
    17c6:	fb08 3112 	mls	r1, r8, r2, r3
    17ca:	4831      	ldr	r0, [pc, #196]	; (1890 <ull_conn_update_parameters+0x1f8>)
    17cc:	f240 43e2 	movw	r3, #1250	; 0x4e2
    17d0:	b289      	uxth	r1, r1
    17d2:	fb03 f101 	mul.w	r1, r3, r1
    17d6:	fba1 0100 	umull	r0, r1, r1, r0
    17da:	a32b      	add	r3, pc, #172	; (adr r3, 1888 <ull_conn_update_parameters+0x1f0>)
    17dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    17e0:	f7ff f89c 	bl	91c <__aeabi_uldivmod>
    17e4:	1a3f      	subs	r7, r7, r0
    17e6:	e7a3      	b.n	1730 <ull_conn_update_parameters+0x98>
		event_counter = lll->event_counter + lll->latency_prepare +
    17e8:	444e      	add	r6, r9
    17ea:	445e      	add	r6, fp
    17ec:	b2b6      	uxth	r6, r6
	return event_counter;
    17ee:	e76f      	b.n	16d0 <ull_conn_update_parameters+0x38>
			lll->periph.window_widening_periodic_us * instant_latency;
    17f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
		lll->periph.window_widening_prepare_us -=
    17f2:	9900      	ldr	r1, [sp, #0]
    17f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
    17f6:	f8df b098 	ldr.w	fp, [pc, #152]	; 1890 <ull_conn_update_parameters+0x1f8>
		lll->periph.window_widening_prepare_us -=
    17fa:	fb02 3311 	mls	r3, r2, r1, r3
    17fe:	64a3      	str	r3, [r4, #72]	; 0x48
			ceiling_fraction(((lll_clock_ppm_local_get() +
    1800:	f017 f96c 	bl	18adc <lll_clock_ppm_local_get>
    1804:	4681      	mov	r9, r0
    1806:	f894 016c 	ldrb.w	r0, [r4, #364]	; 0x16c
    180a:	f3c0 0042 	ubfx	r0, r0, #1, #3
    180e:	f017 f967 	bl	18ae0 <lll_clock_ppm_get>
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
    1812:	9b04      	ldr	r3, [sp, #16]
			ceiling_fraction(((lll_clock_ppm_local_get() +
    1814:	4481      	add	r9, r0
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
    1816:	fb06 f303 	mul.w	r3, r6, r3
			ceiling_fraction(((lll_clock_ppm_local_get() +
    181a:	fb05 f909 	mul.w	r9, r5, r9
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
    181e:	6523      	str	r3, [r4, #80]	; 0x50
			ceiling_fraction(((lll_clock_ppm_local_get() +
    1820:	f509 2974 	add.w	r9, r9, #999424	; 0xf4000
    1824:	4b1f      	ldr	r3, [pc, #124]	; (18a4 <ull_conn_update_parameters+0x20c>)
    1826:	f209 293f 	addw	r9, r9, #575	; 0x23f
    182a:	fba3 3909 	umull	r3, r9, r3, r9
    182e:	ea4f 4399 	mov.w	r3, r9, lsr #18
			lll->periph.window_widening_periodic_us * latency_upd;
    1832:	fb03 f00a 	mul.w	r0, r3, sl
		lll->periph.window_widening_periodic_us =
    1836:	6423      	str	r3, [r4, #64]	; 0x40
		periodic_us -= lll->periph.window_widening_periodic_us;
    1838:	eba5 0903 	sub.w	r9, r5, r3
		lll->periph.window_widening_prepare_us +=
    183c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		lll->periph.window_widening_max_us = (conn_interval_us >> 1U) - EVENT_IFS_US;
    183e:	086a      	lsrs	r2, r5, #1
		lll->periph.window_widening_prepare_us +=
    1840:	4403      	add	r3, r0
		lll->periph.window_widening_max_us = (conn_interval_us >> 1U) - EVENT_IFS_US;
    1842:	3a96      	subs	r2, #150	; 0x96
    1844:	4293      	cmp	r3, r2
    1846:	bf28      	it	cs
    1848:	4613      	movcs	r3, r2
    184a:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
		conn->periph.ticks_to_offset = 0U;
    184e:	2300      	movs	r3, #0
    1850:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
    1854:	fba0 010b 	umull	r0, r1, r0, fp
    1858:	a30b      	add	r3, pc, #44	; (adr r3, 1888 <ull_conn_update_parameters+0x1f0>)
    185a:	e9d3 2300 	ldrd	r2, r3, [r3]
    185e:	f7ff f85d 	bl	91c <__aeabi_uldivmod>
		ticks_win_offset = HAL_TICKER_US_TO_TICKS((win_offset_us / CONN_INT_UNIT_US) *
    1862:	4b11      	ldr	r3, [pc, #68]	; (18a8 <ull_conn_update_parameters+0x210>)
    1864:	9a05      	ldr	r2, [sp, #20]
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
    1866:	1a3f      	subs	r7, r7, r0
		ticks_win_offset = HAL_TICKER_US_TO_TICKS((win_offset_us / CONN_INT_UNIT_US) *
    1868:	fba3 3002 	umull	r3, r0, r3, r2
    186c:	0a80      	lsrs	r0, r0, #10
    186e:	fb06 f000 	mul.w	r0, r6, r0
    1872:	a305      	add	r3, pc, #20	; (adr r3, 1888 <ull_conn_update_parameters+0x1f0>)
    1874:	e9d3 2300 	ldrd	r2, r3, [r3]
    1878:	fba0 010b 	umull	r0, r1, r0, fp
    187c:	f7ff f84e 	bl	91c <__aeabi_uldivmod>
    1880:	4606      	mov	r6, r0
		break;
    1882:	e771      	b.n	1768 <ull_conn_update_parameters+0xd0>
    1884:	f3af 8000 	nop.w
    1888:	1afd498d 	.word	0x1afd498d
    188c:	00000007 	.word	0x00000007
    1890:	3b9aca00 	.word	0x3b9aca00
    1894:	00028d4c 	.word	0x00028d4c
    1898:	000286fc 	.word	0x000286fc
    189c:	0002866c 	.word	0x0002866c
    18a0:	01c9c37f 	.word	0x01c9c37f
    18a4:	431bde83 	.word	0x431bde83
    18a8:	d1b71759 	.word	0xd1b71759
    18ac:	00000000 	.word	0x00000000

000018b0 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    18b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    18b4:	680b      	ldr	r3, [r1, #0]
    18b6:	f8d3 9000 	ldr.w	r9, [r3]
	conn = lll->hdr.parent;

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    18ba:	7f03      	ldrb	r3, [r0, #28]
{
    18bc:	b093      	sub	sp, #76	; 0x4c
	conn = lll->hdr.parent;
    18be:	4690      	mov	r8, r2
	peer_addr_type = pdu_adv->tx_addr;
    18c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    18c4:	4615      	mov	r5, r2
    18c6:	4604      	mov	r4, r0
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    18c8:	2206      	movs	r2, #6
{
    18ca:	460e      	mov	r6, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    18cc:	f100 011e 	add.w	r1, r0, #30
    18d0:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    18d2:	930b      	str	r3, [sp, #44]	; 0x2c
	conn = lll->hdr.parent;
    18d4:	f858 7b08 	ldr.w	r7, [r8], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    18d8:	f022 f998 	bl	23c0c <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    18dc:	a910      	add	r1, sp, #64	; 0x40
    18de:	2206      	movs	r2, #6
    18e0:	a80e      	add	r0, sp, #56	; 0x38
    18e2:	f022 f993 	bl	23c0c <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    18e6:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    18e8:	4640      	mov	r0, r8
	link = rx->link;
    18ea:	f851 bb2e 	ldr.w	fp, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    18ee:	2203      	movs	r2, #3
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    18f0:	f105 0a04 	add.w	sl, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    18f4:	f022 f98a 	bl	23c0c <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    18f8:	f105 0818 	add.w	r8, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    18fc:	2204      	movs	r2, #4
    18fe:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    1902:	4650      	mov	r0, sl
    1904:	f022 f982 	bl	23c0c <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1908:	2205      	movs	r2, #5
    190a:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    190e:	4640      	mov	r0, r8
    1910:	f022 f97c 	bl	23c0c <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1914:	4640      	mov	r0, r8
    1916:	2105      	movs	r1, #5
    1918:	f00c fd4c 	bl	e3b4 <util_ones_count_get>
    191c:	7f6b      	ldrb	r3, [r5, #29]
    191e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    1922:	f360 0305 	bfi	r3, r0, #0, #6
    1926:	776b      	strb	r3, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1928:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    192c:	f3c3 0204 	ubfx	r2, r3, #0, #5
    1930:	77aa      	strb	r2, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1932:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    1934:	81ea      	strh	r2, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    1936:	2801      	cmp	r0, #1
    1938:	d908      	bls.n	194c <ull_periph_setup+0x9c>
    193a:	f003 031f 	and.w	r3, r3, #31
    193e:	331b      	adds	r3, #27
    1940:	f003 031f 	and.w	r3, r3, #31
    1944:	2b0b      	cmp	r3, #11
    1946:	d801      	bhi.n	194c <ull_periph_setup+0x9c>
    1948:	b292      	uxth	r2, r2
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    194a:	b9ba      	cbnz	r2, 197c <ull_periph_setup+0xcc>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    194c:	2200      	movs	r2, #0
    194e:	f8c9 2014 	str.w	r2, [r9, #20]

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
    1952:	f895 3020 	ldrb.w	r3, [r5, #32]
    1956:	f362 0300 	bfi	r3, r2, #0, #1
    195a:	f885 3020 	strb.w	r3, [r5, #32]
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    195e:	68e5      	ldr	r5, [r4, #12]
	rx->type = NODE_RX_TYPE_RELEASE;
    1960:	2601      	movs	r6, #1

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    1962:	4658      	mov	r0, fp
    1964:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
    1966:	7126      	strb	r6, [r4, #4]
		ll_rx_put(link, rx);
    1968:	f00f fe26 	bl	115b8 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put_sched(link, rx);
    196c:	6828      	ldr	r0, [r5, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    196e:	712e      	strb	r6, [r5, #4]
	ll_rx_put_sched(link, rx);
    1970:	4629      	mov	r1, r5
    1972:	f00f fe2b 	bl	115cc <ll_rx_put_sched>
}
    1976:	b013      	add	sp, #76	; 0x4c
    1978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    197c:	6833      	ldr	r3, [r6, #0]
    197e:	2100      	movs	r1, #0
    1980:	6059      	str	r1, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1982:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1984:	89ea      	ldrh	r2, [r5, #14]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1986:	822b      	strh	r3, [r5, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1988:	f240 43e2 	movw	r3, #1250	; 0x4e2
    198c:	fb03 f802 	mul.w	r8, r3, r2
	ull_cp_state_set(conn, ULL_CP_CONNECTED);
    1990:	4638      	mov	r0, r7
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1992:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1994:	930d      	str	r3, [sp, #52]	; 0x34
	ull_cp_state_set(conn, ULL_CP_CONNECTED);
    1996:	f013 fb57 	bl	15048 <ull_cp_state_set>
	conn->periph.sca = pdu_adv->connect_ind.sca;
    199a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    199e:	f897 116c 	ldrb.w	r1, [r7, #364]	; 0x16c
    19a2:	0952      	lsrs	r2, r2, #5
    19a4:	f362 0143 	bfi	r1, r2, #1, #3
    19a8:	f887 116c 	strb.w	r1, [r7, #364]	; 0x16c
		ceiling_fraction(((lll_clock_ppm_local_get() +
    19ac:	f017 f896 	bl	18adc <lll_clock_ppm_local_get>
    19b0:	900c      	str	r0, [sp, #48]	; 0x30
    19b2:	f897 016c 	ldrb.w	r0, [r7, #364]	; 0x16c
    19b6:	f3c0 0042 	ubfx	r0, r0, #1, #3
    19ba:	f017 f891 	bl	18ae0 <lll_clock_ppm_get>
    19be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19c0:	4410      	add	r0, r2
    19c2:	fb08 f000 	mul.w	r0, r8, r0
    19c6:	4aa8      	ldr	r2, [pc, #672]	; (1c68 <ull_periph_setup+0x3b8>)
    19c8:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    19cc:	f200 203f 	addw	r0, r0, #575	; 0x23f
    19d0:	fba2 2000 	umull	r2, r0, r2, r0
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    19d4:	ea4f 0258 	mov.w	r2, r8, lsr #1
		ceiling_fraction(((lll_clock_ppm_local_get() +
    19d8:	0c80      	lsrs	r0, r0, #18
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    19da:	3a96      	subs	r2, #150	; 0x96
	lll->periph.window_widening_periodic_us =
    19dc:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    19de:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    19e0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    19e4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    19e8:	fb02 f303 	mul.w	r3, r2, r3
    19ec:	63ab      	str	r3, [r5, #56]	; 0x38
	conn->supervision_timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    19ee:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    19f0:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
	ull_cp_prt_reload_set(conn, conn_interval_us);
    19f4:	4641      	mov	r1, r8
    19f6:	4638      	mov	r0, r7
    19f8:	f013 fb12 	bl	15020 <ull_cp_prt_reload_set>
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19fc:	4b9b      	ldr	r3, [pc, #620]	; (1c6c <ull_periph_setup+0x3bc>)
	conn->connect_accept_to = DEFAULT_CONNECTION_ACCEPT_TIMEOUT_US;
    19fe:	4a9c      	ldr	r2, [pc, #624]	; (1c70 <ull_periph_setup+0x3c0>)
    1a00:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1a04:	4443      	add	r3, r8
    1a06:	fbb3 f3f8 	udiv	r3, r3, r8
    1a0a:	b29a      	uxth	r2, r3
    1a0c:	f8a7 217e 	strh.w	r2, [r7, #382]	; 0x17e
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a10:	8a29      	ldrh	r1, [r5, #16]
    1a12:	1d88      	adds	r0, r1, #6
    1a14:	4282      	cmp	r2, r0
    1a16:	dd04      	ble.n	1a22 <ull_periph_setup+0x172>
    1a18:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    1a1c:	31fa      	adds	r1, #250	; 0xfa
    1a1e:	440a      	add	r2, r1
    1a20:	b292      	uxth	r2, r2
    1a22:	f8a7 217a 	strh.w	r2, [r7, #378]	; 0x17a
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1a26:	4651      	mov	r1, sl
    1a28:	2204      	movs	r2, #4
    1a2a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    1a2e:	f022 f8ed 	bl	23c0c <memcpy>
		chan_sel = pdu_adv->chan_sel;
    1a32:	4623      	mov	r3, r4
    1a34:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    1a38:	f3c2 1240 	ubfx	r2, r2, #5, #1
    1a3c:	920c      	str	r2, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1a3e:	07da      	lsls	r2, r3, #31
    1a40:	f100 80ed 	bmi.w	1c1e <ull_periph_setup+0x36e>
	cc->peer_addr_type = peer_addr_type;
    1a44:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    1a48:	77a3      	strb	r3, [r4, #30]
	cc->status = 0U;
    1a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    1a4e:	a90e      	add	r1, sp, #56	; 0x38
	cc->status = 0U;
    1a50:	83a3      	strh	r3, [r4, #28]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    1a52:	2206      	movs	r2, #6
    1a54:	f104 001f 	add.w	r0, r4, #31
    1a58:	f022 f8d8 	bl	23c0c <memcpy>
	cc->interval = lll->interval;
    1a5c:	89eb      	ldrh	r3, [r5, #14]
    1a5e:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    1a60:	8a2b      	ldrh	r3, [r5, #16]
    1a62:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->timeout = conn->supervision_timeout;
    1a64:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
    1a68:	8563      	strh	r3, [r4, #42]	; 0x2a
	cc->sca = conn->periph.sca;
    1a6a:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
    1a6e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1a72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
    1a76:	4638      	mov	r0, r7
    1a78:	f011 f97e 	bl	12d78 <ll_conn_handle_get>
    1a7c:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    1a7e:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    1a80:	4621      	mov	r1, r4
    1a82:	4658      	mov	r0, fp
		rx_csa = (void *)ftr->extra;
    1a84:	6874      	ldr	r4, [r6, #4]
		ll_rx_put(link, rx);
    1a86:	f00f fd97 	bl	115b8 <ll_rx_put>
		rx->handle = lll->handle;
    1a8a:	89ab      	ldrh	r3, [r5, #12]
    1a8c:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1a8e:	231c      	movs	r3, #28
    1a90:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    1a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    1a94:	f8d4 b000 	ldr.w	fp, [r4]
		if (chan_sel) {
    1a98:	2b00      	cmp	r3, #0
    1a9a:	f040 80b6 	bne.w	1c0a <ull_periph_setup+0x35a>
    1a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			cs->csa = 0x00;
    1aa0:	7723      	strb	r3, [r4, #28]
	ll_rx_put_sched(link, rx);
    1aa2:	4621      	mov	r1, r4
    1aa4:	4658      	mov	r0, fp
    1aa6:	f00f fd91 	bl	115cc <ll_rx_put_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1aaa:	f895 005b 	ldrb.w	r0, [r5, #91]	; 0x5b
	max_tx_time = lll->dle.eff.max_tx_time;
    1aae:	f8b5 a050 	ldrh.w	sl, [r5, #80]	; 0x50
	max_rx_time = lll->dle.eff.max_rx_time;
    1ab2:	f8b5 4052 	ldrh.w	r4, [r5, #82]	; 0x52
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1ab6:	2101      	movs	r1, #1
    1ab8:	f000 0007 	and.w	r0, r0, #7
    1abc:	f016 fe22 	bl	18704 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1ac0:	4454      	add	r4, sl
    1ac2:	f204 14a9 	addw	r4, r4, #425	; 0x1a9
    1ac6:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 1c74 <ull_periph_setup+0x3c4>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1aca:	4683      	mov	fp, r0
	conn->ull.ticks_prepare_to_start =
    1acc:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1ace:	1820      	adds	r0, r4, r0
	conn->ull.ticks_active_to_start = 0U;
    1ad0:	2400      	movs	r4, #0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1ad2:	fba0 010a 	umull	r0, r1, r0, sl
	conn->ull.ticks_prepare_to_start =
    1ad6:	60bb      	str	r3, [r7, #8]
	conn->ull.ticks_active_to_start = 0U;
    1ad8:	607c      	str	r4, [r7, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1ada:	a361      	add	r3, pc, #388	; (adr r3, 1c60 <ull_periph_setup+0x3b0>)
    1adc:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_preempt_to_start =
    1ae0:	60fc      	str	r4, [r7, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1ae2:	f7fe ff1b 	bl	91c <__aeabi_uldivmod>
    1ae6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    1aea:	6138      	str	r0, [r7, #16]
	conn_offset_us = ftr->radio_end_us;
    1aec:	68f3      	ldr	r3, [r6, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1aee:	990d      	ldr	r1, [sp, #52]	; 0x34
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1af0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1af2:	f240 42e2 	movw	r2, #1250	; 0x4e2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1af6:	2001      	movs	r0, #1
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1af8:	eba8 0505 	sub.w	r5, r8, r5
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1afc:	fb02 3801 	mla	r8, r2, r1, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1b00:	4622      	mov	r2, r4
    1b02:	2102      	movs	r1, #2
    1b04:	f00c fb1c 	bl	e140 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1b08:	4648      	mov	r0, r9
    1b0a:	f010 fe4b 	bl	127a4 <ull_adv_handle_get>
	conn_offset_us -= EVENT_JITTER_US;
    1b0e:	f208 48b2 	addw	r8, r8, #1202	; 0x4b2
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1b12:	4602      	mov	r2, r0
	conn_offset_us -= ready_delay_us;
    1b14:	eba8 080b 	sub.w	r8, r8, fp
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    1b18:	fba8 010a 	umull	r0, r1, r8, sl
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1b1c:	4692      	mov	sl, r2
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    1b1e:	a350      	add	r3, pc, #320	; (adr r3, 1c60 <ull_periph_setup+0x3b0>)
    1b20:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b24:	f7fe fefa 	bl	91c <__aeabi_uldivmod>
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    1b28:	f8cd 9004 	str.w	r9, [sp, #4]
	ticks_at_stop = ftr->ticks_anchor +
    1b2c:	68b3      	ldr	r3, [r6, #8]
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    1b2e:	4952      	ldr	r1, [pc, #328]	; (1c78 <ull_periph_setup+0x3c8>)
    1b30:	9100      	str	r1, [sp, #0]
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    1b32:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1b36:	f10a 0202 	add.w	r2, sl, #2
	ticks_at_stop = ftr->ticks_anchor +
    1b3a:	3b3a      	subs	r3, #58	; 0x3a
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    1b3c:	b2d2      	uxtb	r2, r2
    1b3e:	4620      	mov	r0, r4
    1b40:	4443      	add	r3, r8
    1b42:	2101      	movs	r1, #1
    1b44:	f00d fc40 	bl	f3c8 <ticker_stop_abs>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1b48:	2801      	cmp	r0, #1
    1b4a:	d076      	beq.n	1c3a <ull_periph_setup+0x38a>
	if (adv->lll.is_hdcd) {
    1b4c:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
    1b50:	07db      	lsls	r3, r3, #31
    1b52:	d452      	bmi.n	1bfa <ull_periph_setup+0x34a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1b54:	4638      	mov	r0, r7
    1b56:	f011 f90f 	bl	12d78 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1b5a:	4b46      	ldr	r3, [pc, #280]	; (1c74 <ull_periph_setup+0x3c4>)
    1b5c:	fba5 a903 	umull	sl, r9, r5, r3
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1b60:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1b62:	a33f      	add	r3, pc, #252	; (adr r3, 1c60 <ull_periph_setup+0x3b0>)
    1b64:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b68:	4650      	mov	r0, sl
    1b6a:	4649      	mov	r1, r9
    1b6c:	f7fe fed6 	bl	91c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1b70:	4b42      	ldr	r3, [pc, #264]	; (1c7c <ull_periph_setup+0x3cc>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b72:	68b6      	ldr	r6, [r6, #8]
    1b74:	4a42      	ldr	r2, [pc, #264]	; (1c80 <ull_periph_setup+0x3d0>)
    1b76:	9207      	str	r2, [sp, #28]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1b78:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1b7c:	fba5 3103 	umull	r3, r1, r5, r3
    1b80:	ebba 0003 	subs.w	r0, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b84:	4b3f      	ldr	r3, [pc, #252]	; (1c84 <ull_periph_setup+0x3d4>)
    1b86:	9305      	str	r3, [sp, #20]
    1b88:	f44f 73ef 	mov.w	r3, #478	; 0x1de
    1b8c:	9706      	str	r7, [sp, #24]
    1b8e:	9308      	str	r3, [sp, #32]
    1b90:	693b      	ldr	r3, [r7, #16]
    1b92:	f04f 0b00 	mov.w	fp, #0
    1b96:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1b9a:	f04f 0307 	mov.w	r3, #7
    1b9e:	fb03 1105 	mla	r1, r3, r5, r1
    1ba2:	eb69 0101 	sbc.w	r1, r9, r1
    1ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1baa:	2300      	movs	r3, #0
    1bac:	f7fe feb6 	bl	91c <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1bb0:	3403      	adds	r4, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1bb2:	3e3a      	subs	r6, #58	; 0x3a
    1bb4:	b2e4      	uxtb	r4, r4
    1bb6:	e9cd 5001 	strd	r5, r0, [sp, #4]
    1bba:	f8cd 8000 	str.w	r8, [sp]
    1bbe:	4633      	mov	r3, r6
    1bc0:	4622      	mov	r2, r4
    1bc2:	2101      	movs	r1, #1
    1bc4:	4658      	mov	r0, fp
    1bc6:	f00d fb33 	bl	f230 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1bca:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    1bce:	d00c      	beq.n	1bea <ull_periph_setup+0x33a>
    1bd0:	4a2d      	ldr	r2, [pc, #180]	; (1c88 <ull_periph_setup+0x3d8>)
    1bd2:	492e      	ldr	r1, [pc, #184]	; (1c8c <ull_periph_setup+0x3dc>)
    1bd4:	482e      	ldr	r0, [pc, #184]	; (1c90 <ull_periph_setup+0x3e0>)
    1bd6:	f240 13df 	movw	r3, #479	; 0x1df
    1bda:	f01f fdb7 	bl	2174c <assert_print>
    1bde:	4040      	eors	r0, r0
    1be0:	f380 8811 	msr	BASEPRI, r0
    1be4:	f04f 0003 	mov.w	r0, #3
    1be8:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1bea:	2201      	movs	r2, #1
    1bec:	2102      	movs	r1, #2
    1bee:	4610      	mov	r0, r2
    1bf0:	f00c faa6 	bl	e140 <mayfly_enable>
}
    1bf4:	b013      	add	sp, #76	; 0x4c
    1bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1bfa:	2300      	movs	r3, #0
    1bfc:	2201      	movs	r2, #1
    1bfe:	9300      	str	r3, [sp, #0]
    1c00:	4618      	mov	r0, r3
    1c02:	4611      	mov	r1, r2
    1c04:	f00d fb9e 	bl	f344 <ticker_stop>
    1c08:	e7a4      	b.n	1b54 <ull_periph_setup+0x2a4>
			lll->data_chan_sel = 1;
    1c0a:	7f6b      	ldrb	r3, [r5, #29]
    1c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c10:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    1c12:	4650      	mov	r0, sl
    1c14:	f016 f946 	bl	17ea4 <lll_chan_id>
    1c18:	2301      	movs	r3, #1
    1c1a:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    1c1c:	e740      	b.n	1aa0 <ull_periph_setup+0x1f0>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1c1e:	4a1a      	ldr	r2, [pc, #104]	; (1c88 <ull_periph_setup+0x3d8>)
    1c20:	491c      	ldr	r1, [pc, #112]	; (1c94 <ull_periph_setup+0x3e4>)
    1c22:	481b      	ldr	r0, [pc, #108]	; (1c90 <ull_periph_setup+0x3e0>)
    1c24:	f44f 7382 	mov.w	r3, #260	; 0x104
    1c28:	f01f fd90 	bl	2174c <assert_print>
    1c2c:	4040      	eors	r0, r0
    1c2e:	f380 8811 	msr	BASEPRI, r0
    1c32:	f04f 0003 	mov.w	r0, #3
    1c36:	df02      	svc	2
    1c38:	e704      	b.n	1a44 <ull_periph_setup+0x194>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1c3a:	f00f fd85 	bl	11748 <ull_disable_mark_get>
    1c3e:	4581      	cmp	r9, r0
    1c40:	d084      	beq.n	1b4c <ull_periph_setup+0x29c>
    1c42:	4a11      	ldr	r2, [pc, #68]	; (1c88 <ull_periph_setup+0x3d8>)
    1c44:	4914      	ldr	r1, [pc, #80]	; (1c98 <ull_periph_setup+0x3e8>)
    1c46:	4812      	ldr	r0, [pc, #72]	; (1c90 <ull_periph_setup+0x3e0>)
    1c48:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    1c4c:	f01f fd7e 	bl	2174c <assert_print>
    1c50:	4040      	eors	r0, r0
    1c52:	f380 8811 	msr	BASEPRI, r0
    1c56:	f04f 0003 	mov.w	r0, #3
    1c5a:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    1c5c:	e776      	b.n	1b4c <ull_periph_setup+0x29c>
    1c5e:	bf00      	nop
    1c60:	1afd498d 	.word	0x1afd498d
    1c64:	00000007 	.word	0x00000007
    1c68:	431bde83 	.word	0x431bde83
    1c6c:	01c9c37f 	.word	0x01c9c37f
    1c70:	004c4b40 	.word	0x004c4b40
    1c74:	3b9aca00 	.word	0x3b9aca00
    1c78:	00017c65 	.word	0x00017c65
    1c7c:	1afd498d 	.word	0x1afd498d
    1c80:	00017c35 	.word	0x00017c35
    1c84:	00017ca1 	.word	0x00017ca1
    1c88:	00029254 	.word	0x00029254
    1c8c:	00028e10 	.word	0x00028e10
    1c90:	0002866c 	.word	0x0002866c
    1c94:	000288b0 	.word	0x000288b0
    1c98:	000292b0 	.word	0x000292b0
    1c9c:	00000000 	.word	0x00000000

00001ca0 <lll_preempt_calc>:
	}
}

uint32_t lll_preempt_calc(struct ull_hdr *ull, uint8_t ticker_id,
		       uint32_t ticks_at_event)
{
    1ca0:	b510      	push	{r4, lr}
    1ca2:	4614      	mov	r4, r2
	uint32_t ticks_now;
	uint32_t diff;

	ticks_now = ticker_ticks_now_get();
    1ca4:	f00d fbd4 	bl	f450 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
    1ca8:	4621      	mov	r1, r4
    1caa:	f00d fbd3 	bl	f454 <ticker_ticks_diff_get>
    1cae:	4603      	mov	r3, r0
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
    1cb0:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
    1cb4:	d103      	bne.n	1cbe <lll_preempt_calc+0x1e>
		return 0;
	}

	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
    1cb6:	1cdc      	adds	r4, r3, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
    1cb8:	2c09      	cmp	r4, #9
    1cba:	d802      	bhi.n	1cc2 <lll_preempt_calc+0x22>

		return 1U;
	}

	return 0U;
}
    1cbc:	bd10      	pop	{r4, pc}
		return 0;
    1cbe:	2000      	movs	r0, #0
}
    1cc0:	bd10      	pop	{r4, pc}
		LL_ASSERT_MSG(false, "%s: Actual EVENT_OVERHEAD_START_US = %u",
    1cc2:	4a11      	ldr	r2, [pc, #68]	; (1d08 <lll_preempt_calc+0x68>)
    1cc4:	4911      	ldr	r1, [pc, #68]	; (1d0c <lll_preempt_calc+0x6c>)
    1cc6:	4812      	ldr	r0, [pc, #72]	; (1d10 <lll_preempt_calc+0x70>)
    1cc8:	f240 13d9 	movw	r3, #473	; 0x1d9
    1ccc:	f01f fd3e 	bl	2174c <assert_print>
    1cd0:	4810      	ldr	r0, [pc, #64]	; (1d14 <lll_preempt_calc+0x74>)
    1cd2:	2107      	movs	r1, #7
    1cd4:	fba4 0300 	umull	r0, r3, r4, r0
    1cd8:	fb01 3104 	mla	r1, r1, r4, r3
    1cdc:	a308      	add	r3, pc, #32	; (adr r3, 1d00 <lll_preempt_calc+0x60>)
    1cde:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ce2:	f7fe fe1b 	bl	91c <__aeabi_uldivmod>
    1ce6:	490c      	ldr	r1, [pc, #48]	; (1d18 <lll_preempt_calc+0x78>)
    1ce8:	4602      	mov	r2, r0
    1cea:	480c      	ldr	r0, [pc, #48]	; (1d1c <lll_preempt_calc+0x7c>)
    1cec:	f01f fd2e 	bl	2174c <assert_print>
    1cf0:	4040      	eors	r0, r0
    1cf2:	f380 8811 	msr	BASEPRI, r0
    1cf6:	f04f 0003 	mov.w	r0, #3
    1cfa:	df02      	svc	2
		return 1U;
    1cfc:	2001      	movs	r0, #1
}
    1cfe:	bd10      	pop	{r4, pc}
    1d00:	3b9aca00 	.word	0x3b9aca00
    1d04:	00000000 	.word	0x00000000
    1d08:	000292e0 	.word	0x000292e0
    1d0c:	000286fc 	.word	0x000286fc
    1d10:	0002866c 	.word	0x0002866c
    1d14:	1afd498d 	.word	0x1afd498d
    1d18:	00029464 	.word	0x00029464
    1d1c:	00029404 	.word	0x00029404

00001d20 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
    1d20:	2903      	cmp	r1, #3
{
    1d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1d24:	4605      	mov	r5, r0
    1d26:	4614      	mov	r4, r2
	switch (chan) {
    1d28:	d871      	bhi.n	1e0e <lis2dh_attr_set+0xee>
	switch (attr) {
    1d2a:	2a00      	cmp	r2, #0
    1d2c:	d040      	beq.n	1db0 <lis2dh_attr_set+0x90>
    1d2e:	2a07      	cmp	r2, #7
    1d30:	d15c      	bne.n	1dec <lis2dh_attr_set+0xcc>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
    1d32:	685a      	ldr	r2, [r3, #4]
    1d34:	681c      	ldr	r4, [r3, #0]
    1d36:	483a      	ldr	r0, [pc, #232]	; (1e20 <lis2dh_attr_set+0x100>)
    1d38:	17d1      	asrs	r1, r2, #31
    1d3a:	4613      	mov	r3, r2
    1d3c:	fbc4 3100 	smlal	r3, r1, r4, r0
	if (micro_ms2 > 0) {
    1d40:	2b01      	cmp	r3, #1
    1d42:	f171 0200 	sbcs.w	r2, r1, #0
    1d46:	db25      	blt.n	1d94 <lis2dh_attr_set+0x74>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
    1d48:	f500 106e 	add.w	r0, r0, #3899392	; 0x3b8000
    1d4c:	f600 705d 	addw	r0, r0, #3933	; 0xf5d
    1d50:	1818      	adds	r0, r3, r0
    1d52:	a331      	add	r3, pc, #196	; (adr r3, 1e18 <lis2dh_attr_set+0xf8>)
    1d54:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d58:	f141 0100 	adc.w	r1, r1, #0
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
    1d5c:	f7fe fd8e 	bl	87c <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    1d60:	b280      	uxth	r0, r0
    1d62:	2802      	cmp	r0, #2
    1d64:	d01e      	beq.n	1da4 <lis2dh_attr_set+0x84>
    1d66:	2804      	cmp	r0, #4
    1d68:	d01e      	beq.n	1da8 <lis2dh_attr_set+0x88>
    1d6a:	2808      	cmp	r0, #8
    1d6c:	d01e      	beq.n	1dac <lis2dh_attr_set+0x8c>
    1d6e:	2810      	cmp	r0, #16
    1d70:	d133      	bne.n	1dda <lis2dh_attr_set+0xba>
    1d72:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    1d74:	492b      	ldr	r1, [pc, #172]	; (1e24 <lis2dh_attr_set+0x104>)
	struct lis2dh_data *lis2dh = dev->data;
    1d76:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    1d78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    1d7c:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    1d7e:	6852      	ldr	r2, [r2, #4]
    1d80:	6914      	ldr	r4, [r2, #16]
    1d82:	011b      	lsls	r3, r3, #4
    1d84:	2230      	movs	r2, #48	; 0x30
    1d86:	2123      	movs	r1, #35	; 0x23
    1d88:	4628      	mov	r0, r5
    1d8a:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
    1d8c:	b002      	add	sp, #8
    1d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    1d92:	4760      	bx	ip
    1d94:	4824      	ldr	r0, [pc, #144]	; (1e28 <lis2dh_attr_set+0x108>)
    1d96:	1818      	adds	r0, r3, r0
    1d98:	f161 0100 	sbc.w	r1, r1, #0
    1d9c:	a31e      	add	r3, pc, #120	; (adr r3, 1e18 <lis2dh_attr_set+0xf8>)
    1d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1da2:	e7db      	b.n	1d5c <lis2dh_attr_set+0x3c>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
    1da4:	2300      	movs	r3, #0
    1da6:	e7e5      	b.n	1d74 <lis2dh_attr_set+0x54>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    1da8:	2301      	movs	r3, #1
    1daa:	e7e3      	b.n	1d74 <lis2dh_attr_set+0x54>
    1dac:	2302      	movs	r3, #2
    1dae:	e7e1      	b.n	1d74 <lis2dh_attr_set+0x54>
		return lis2dh_acc_odr_set(dev, val->val1);
    1db0:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    1db2:	4b1e      	ldr	r3, [pc, #120]	; (1e2c <lis2dh_attr_set+0x10c>)
		if (freq == lis2dh_odr_map[i]) {
    1db4:	f833 1b02 	ldrh.w	r1, [r3], #2
    1db8:	428a      	cmp	r2, r1
    1dba:	d10b      	bne.n	1dd4 <lis2dh_attr_set+0xb4>
	struct lis2dh_data *data = dev->data;
    1dbc:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
    1dbe:	6873      	ldr	r3, [r6, #4]
    1dc0:	f10d 0207 	add.w	r2, sp, #7
    1dc4:	689b      	ldr	r3, [r3, #8]
    1dc6:	2120      	movs	r1, #32
    1dc8:	4628      	mov	r0, r5
    1dca:	4798      	blx	r3
	if (status < 0) {
    1dcc:	2800      	cmp	r0, #0
    1dce:	da07      	bge.n	1de0 <lis2dh_attr_set+0xc0>
}
    1dd0:	b002      	add	sp, #8
    1dd2:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    1dd4:	3401      	adds	r4, #1
    1dd6:	2c0b      	cmp	r4, #11
    1dd8:	d1ec      	bne.n	1db4 <lis2dh_attr_set+0x94>
	return -EINVAL;
    1dda:	f06f 0015 	mvn.w	r0, #21
    1dde:	e7f7      	b.n	1dd0 <lis2dh_attr_set+0xb0>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    1de0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1de4:	0713      	lsls	r3, r2, #28
    1de6:	d404      	bmi.n	1df2 <lis2dh_attr_set+0xd2>
    1de8:	2c08      	cmp	r4, #8
    1dea:	d105      	bne.n	1df8 <lis2dh_attr_set+0xd8>
	switch (attr) {
    1dec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1df0:	e7ee      	b.n	1dd0 <lis2dh_attr_set+0xb0>
	if (((value & LIS2DH_LP_EN_BIT_MASK) == LIS2DH_LP_EN_BIT_MASK) &&
    1df2:	2c0a      	cmp	r4, #10
		odr--;
    1df4:	bf08      	it	eq
    1df6:	2409      	moveq	r4, #9
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    1df8:	6873      	ldr	r3, [r6, #4]
				      (value & ~LIS2DH_ODR_MASK) |
    1dfa:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    1dfe:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    1e02:	68db      	ldr	r3, [r3, #12]
    1e04:	b2d2      	uxtb	r2, r2
    1e06:	2120      	movs	r1, #32
    1e08:	4628      	mov	r0, r5
    1e0a:	4798      	blx	r3
    1e0c:	e7e0      	b.n	1dd0 <lis2dh_attr_set+0xb0>
}
    1e0e:	b002      	add	sp, #8
    1e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e14:	f01a bdb4 	b.w	1c980 <lis2dh_attr_set.part.0>
    1e18:	0095a33a 	.word	0x0095a33a
    1e1c:	00000000 	.word	0x00000000
    1e20:	000f4240 	.word	0x000f4240
    1e24:	200007ec 	.word	0x200007ec
    1e28:	ffb52e63 	.word	0xffb52e63
    1e2c:	00029d34 	.word	0x00029d34

00001e30 <cmd_sensor_attr_get_handler>:
}

static void cmd_sensor_attr_get_handler(const struct shell *shell_ptr, const struct device *dev,
					const char *channel_name, const char *attr_name,
					bool print_missing_attribute)
{
    1e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int channel =
		parse_named_int(channel_name, sensor_channel_name, ARRAY_SIZE(sensor_channel_name));
    1e34:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1f18 <cmd_sensor_attr_get_handler+0xe8>
	int attr = parse_named_int(attr_name, sensor_attribute_name,
    1e38:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 1f1c <cmd_sensor_attr_get_handler+0xec>
{
    1e3c:	b089      	sub	sp, #36	; 0x24
    1e3e:	4691      	mov	r9, r2
    1e40:	4698      	mov	r8, r3
		parse_named_int(channel_name, sensor_channel_name, ARRAY_SIZE(sensor_channel_name));
    1e42:	2239      	movs	r2, #57	; 0x39
{
    1e44:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1e48:	9305      	str	r3, [sp, #20]
    1e4a:	4604      	mov	r4, r0
    1e4c:	460f      	mov	r7, r1
		parse_named_int(channel_name, sensor_channel_name, ARRAY_SIZE(sensor_channel_name));
    1e4e:	4648      	mov	r0, r9
    1e50:	4651      	mov	r1, sl
    1e52:	f024 f9cc 	bl	261ee <parse_named_int>
	int attr = parse_named_int(attr_name, sensor_attribute_name,
    1e56:	220f      	movs	r2, #15
		parse_named_int(channel_name, sensor_channel_name, ARRAY_SIZE(sensor_channel_name));
    1e58:	4605      	mov	r5, r0
	int attr = parse_named_int(attr_name, sensor_attribute_name,
    1e5a:	4659      	mov	r1, fp
    1e5c:	4640      	mov	r0, r8
    1e5e:	f024 f9c6 	bl	261ee <parse_named_int>
				   ARRAY_SIZE(sensor_attribute_name));
	struct sensor_value value = {0};
    1e62:	2300      	movs	r3, #0
	int rc;

	if (channel < 0) {
    1e64:	429d      	cmp	r5, r3
	struct sensor_value value = {0};
    1e66:	e9cd 3306 	strd	r3, r3, [sp, #24]
	int attr = parse_named_int(attr_name, sensor_attribute_name,
    1e6a:	4606      	mov	r6, r0
	if (channel < 0) {
    1e6c:	da08      	bge.n	1e80 <cmd_sensor_attr_get_handler+0x50>
		shell_error(shell_ptr, "Channel '%s' unknown", channel_name);
    1e6e:	4a2c      	ldr	r2, [pc, #176]	; (1f20 <cmd_sensor_attr_get_handler+0xf0>)
    1e70:	464b      	mov	r3, r9
		return;
	}
	if (attr < 0) {
		shell_error(shell_ptr, "Attribute '%s' unknown", attr_name);
    1e72:	2101      	movs	r1, #1
    1e74:	4620      	mov	r0, r4
    1e76:	f020 fa8d 	bl	22394 <shell_fprintf>
	}

	shell_info(shell_ptr, "%s(channel=%s, attr=%s) value=%.6f", dev->name,
		   sensor_channel_name[channel], sensor_attribute_name[attr],
		   sensor_value_to_double(&value));
}
    1e7a:	b009      	add	sp, #36	; 0x24
    1e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr < 0) {
    1e80:	2800      	cmp	r0, #0
    1e82:	da02      	bge.n	1e8a <cmd_sensor_attr_get_handler+0x5a>
		shell_error(shell_ptr, "Attribute '%s' unknown", attr_name);
    1e84:	4a27      	ldr	r2, [pc, #156]	; (1f24 <cmd_sensor_attr_get_handler+0xf4>)
    1e86:	4643      	mov	r3, r8
    1e88:	e7f3      	b.n	1e72 <cmd_sensor_attr_get_handler+0x42>
	rc = sensor_attr_get(dev, channel, attr, &value);
    1e8a:	b2a9      	uxth	r1, r5
    1e8c:	b282      	uxth	r2, r0
	if (api->attr_get == NULL) {
    1e8e:	68bb      	ldr	r3, [r7, #8]
    1e90:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1e94:	f1b8 0f00 	cmp.w	r8, #0
    1e98:	d015      	beq.n	1ec6 <cmd_sensor_attr_get_handler+0x96>
	return api->attr_get(dev, chan, attr, val);
    1e9a:	ab06      	add	r3, sp, #24
    1e9c:	4638      	mov	r0, r7
    1e9e:	47c0      	blx	r8
	if (rc != 0) {
    1ea0:	b1a0      	cbz	r0, 1ecc <cmd_sensor_attr_get_handler+0x9c>
		if (rc == -EINVAL && !print_missing_attribute) {
    1ea2:	f110 0f16 	cmn.w	r0, #22
    1ea6:	d102      	bne.n	1eae <cmd_sensor_attr_get_handler+0x7e>
    1ea8:	9b05      	ldr	r3, [sp, #20]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d0e5      	beq.n	1e7a <cmd_sensor_attr_get_handler+0x4a>
		shell_error(shell_ptr, "Failed to get channel(%s) attribute(%s): %d",
    1eae:	9001      	str	r0, [sp, #4]
    1eb0:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    1eb4:	9300      	str	r3, [sp, #0]
    1eb6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
    1eba:	4a1b      	ldr	r2, [pc, #108]	; (1f28 <cmd_sensor_attr_get_handler+0xf8>)
    1ebc:	2101      	movs	r1, #1
    1ebe:	4620      	mov	r0, r4
    1ec0:	f020 fa68 	bl	22394 <shell_fprintf>
		return;
    1ec4:	e7d9      	b.n	1e7a <cmd_sensor_attr_get_handler+0x4a>
		return -ENOSYS;
    1ec6:	f06f 0057 	mvn.w	r0, #87	; 0x57
    1eca:	e7f0      	b.n	1eae <cmd_sensor_attr_get_handler+0x7e>
	return (double)val->val1 + (double)val->val2 / 1000000;
    1ecc:	9807      	ldr	r0, [sp, #28]
    1ece:	f7fe fa59 	bl	384 <__aeabi_i2d>
    1ed2:	a30f      	add	r3, pc, #60	; (adr r3, 1f10 <cmd_sensor_attr_get_handler+0xe0>)
    1ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ed8:	f7fe fbe8 	bl	6ac <__aeabi_ddiv>
    1edc:	4680      	mov	r8, r0
    1ede:	9806      	ldr	r0, [sp, #24]
    1ee0:	4689      	mov	r9, r1
    1ee2:	f7fe fa4f 	bl	384 <__aeabi_i2d>
    1ee6:	4602      	mov	r2, r0
    1ee8:	460b      	mov	r3, r1
    1eea:	4640      	mov	r0, r8
    1eec:	4649      	mov	r1, r9
    1eee:	f7fe f8fd 	bl	ec <__adddf3>
	shell_info(shell_ptr, "%s(channel=%s, attr=%s) value=%.6f", dev->name,
    1ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1ef6:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    1efa:	9301      	str	r3, [sp, #4]
    1efc:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
    1f00:	9300      	str	r3, [sp, #0]
    1f02:	683b      	ldr	r3, [r7, #0]
    1f04:	4a09      	ldr	r2, [pc, #36]	; (1f2c <cmd_sensor_attr_get_handler+0xfc>)
    1f06:	2102      	movs	r1, #2
    1f08:	4620      	mov	r0, r4
    1f0a:	f020 fa43 	bl	22394 <shell_fprintf>
    1f0e:	e7b4      	b.n	1e7a <cmd_sensor_attr_get_handler+0x4a>
    1f10:	00000000 	.word	0x00000000
    1f14:	412e8480 	.word	0x412e8480
    1f18:	20000838 	.word	0x20000838
    1f1c:	200007fc 	.word	0x200007fc
    1f20:	0002dd3a 	.word	0x0002dd3a
    1f24:	0002dd50 	.word	0x0002dd50
    1f28:	0002dd68 	.word	0x0002dd68
    1f2c:	0002dd95 	.word	0x0002dd95

00001f30 <handle_channel_by_name>:
{
    1f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		parse_named_int(channel_name, sensor_channel_name, ARRAY_SIZE(sensor_channel_name));
    1f34:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2050 <handle_channel_by_name+0x120>
{
    1f38:	4617      	mov	r7, r2
    1f3a:	b08e      	sub	sp, #56	; 0x38
    1f3c:	4605      	mov	r5, r0
    1f3e:	460e      	mov	r6, r1
		parse_named_int(channel_name, sensor_channel_name, ARRAY_SIZE(sensor_channel_name));
    1f40:	2239      	movs	r2, #57	; 0x39
    1f42:	4641      	mov	r1, r8
    1f44:	4638      	mov	r0, r7
    1f46:	f024 f952 	bl	261ee <parse_named_int>
	if (i < 0) {
    1f4a:	1e04      	subs	r4, r0, #0
    1f4c:	da09      	bge.n	1f62 <handle_channel_by_name+0x32>
		shell_error(shell_ptr, "Channel not supported (%s)", channel_name);
    1f4e:	4628      	mov	r0, r5
    1f50:	4a40      	ldr	r2, [pc, #256]	; (2054 <handle_channel_by_name+0x124>)
    1f52:	463b      	mov	r3, r7
    1f54:	2101      	movs	r1, #1
    1f56:	f020 fa1d 	bl	22394 <shell_fprintf>
		return i;
    1f5a:	4620      	mov	r0, r4
}
    1f5c:	b00e      	add	sp, #56	; 0x38
    1f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return api->channel_get(dev, chan, val);
    1f62:	68b3      	ldr	r3, [r6, #8]
    1f64:	aa08      	add	r2, sp, #32
    1f66:	691b      	ldr	r3, [r3, #16]
    1f68:	b2a1      	uxth	r1, r4
    1f6a:	4630      	mov	r0, r6
    1f6c:	4798      	blx	r3
	if (err < 0) {
    1f6e:	2800      	cmp	r0, #0
    1f70:	dbf4      	blt.n	1f5c <handle_channel_by_name+0x2c>
	return (double)val->val1 + (double)val->val2 / 1000000;
    1f72:	9809      	ldr	r0, [sp, #36]	; 0x24
    1f74:	f7fe fa06 	bl	384 <__aeabi_i2d>
    1f78:	a333      	add	r3, pc, #204	; (adr r3, 2048 <handle_channel_by_name+0x118>)
    1f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f7e:	f7fe fb95 	bl	6ac <__aeabi_ddiv>
    1f82:	4606      	mov	r6, r0
    1f84:	9808      	ldr	r0, [sp, #32]
    1f86:	460f      	mov	r7, r1
    1f88:	f7fe f9fc 	bl	384 <__aeabi_i2d>
    1f8c:	4602      	mov	r2, r0
    1f8e:	460b      	mov	r3, r1
    1f90:	4630      	mov	r0, r6
    1f92:	4639      	mov	r1, r7
    1f94:	f7fe f8aa 	bl	ec <__adddf3>
	if (i >= ARRAY_SIZE(sensor_channel_name)) {
    1f98:	2c38      	cmp	r4, #56	; 0x38
    1f9a:	4606      	mov	r6, r0
    1f9c:	460f      	mov	r7, r1
    1f9e:	dd09      	ble.n	1fb4 <handle_channel_by_name+0x84>
		shell_print(shell_ptr, "channel idx=%d value = %10.6f", i,
    1fa0:	e9cd 6700 	strd	r6, r7, [sp]
    1fa4:	4a2c      	ldr	r2, [pc, #176]	; (2058 <handle_channel_by_name+0x128>)
    1fa6:	4623      	mov	r3, r4
    1fa8:	2108      	movs	r1, #8
    1faa:	4628      	mov	r0, r5
    1fac:	f020 f9f2 	bl	22394 <shell_fprintf>
	return 0;
    1fb0:	2000      	movs	r0, #0
    1fb2:	e7d3      	b.n	1f5c <handle_channel_by_name+0x2c>
	} else if (i != SENSOR_CHAN_ACCEL_XYZ && i != SENSOR_CHAN_GYRO_XYZ &&
    1fb4:	1ee2      	subs	r2, r4, #3
    1fb6:	2a08      	cmp	r2, #8
		shell_print(shell_ptr, "channel idx=%d %s = %10.6f", i, sensor_channel_name[i],
    1fb8:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
    1fbc:	d804      	bhi.n	1fc8 <handle_channel_by_name+0x98>
    1fbe:	f240 1311 	movw	r3, #273	; 0x111
    1fc2:	40d3      	lsrs	r3, r2
    1fc4:	07db      	lsls	r3, r3, #31
    1fc6:	d40a      	bmi.n	1fde <handle_channel_by_name+0xae>
    1fc8:	e9cd 6702 	strd	r6, r7, [sp, #8]
    1fcc:	4a23      	ldr	r2, [pc, #140]	; (205c <handle_channel_by_name+0x12c>)
    1fce:	f8cd a000 	str.w	sl, [sp]
    1fd2:	4623      	mov	r3, r4
    1fd4:	2108      	movs	r1, #8
    1fd6:	4628      	mov	r0, r5
    1fd8:	f020 f9dc 	bl	22394 <shell_fprintf>
    1fdc:	e7e8      	b.n	1fb0 <handle_channel_by_name+0x80>
    1fde:	980d      	ldr	r0, [sp, #52]	; 0x34
    1fe0:	f7fe f9d0 	bl	384 <__aeabi_i2d>
    1fe4:	a318      	add	r3, pc, #96	; (adr r3, 2048 <handle_channel_by_name+0x118>)
    1fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1fea:	f7fe fb5f 	bl	6ac <__aeabi_ddiv>
    1fee:	4680      	mov	r8, r0
    1ff0:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ff2:	4689      	mov	r9, r1
    1ff4:	f7fe f9c6 	bl	384 <__aeabi_i2d>
    1ff8:	4602      	mov	r2, r0
    1ffa:	460b      	mov	r3, r1
    1ffc:	4640      	mov	r0, r8
    1ffe:	4649      	mov	r1, r9
    2000:	f7fe f874 	bl	ec <__adddf3>
		shell_print(shell_ptr,
    2004:	e9cd 0106 	strd	r0, r1, [sp, #24]
    2008:	980b      	ldr	r0, [sp, #44]	; 0x2c
    200a:	f7fe f9bb 	bl	384 <__aeabi_i2d>
    200e:	a30e      	add	r3, pc, #56	; (adr r3, 2048 <handle_channel_by_name+0x118>)
    2010:	e9d3 2300 	ldrd	r2, r3, [r3]
    2014:	f7fe fb4a 	bl	6ac <__aeabi_ddiv>
    2018:	4680      	mov	r8, r0
    201a:	980a      	ldr	r0, [sp, #40]	; 0x28
    201c:	4689      	mov	r9, r1
    201e:	f7fe f9b1 	bl	384 <__aeabi_i2d>
    2022:	4602      	mov	r2, r0
    2024:	460b      	mov	r3, r1
    2026:	4640      	mov	r0, r8
    2028:	4649      	mov	r1, r9
    202a:	f7fe f85f 	bl	ec <__adddf3>
    202e:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2032:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2036:	4a0a      	ldr	r2, [pc, #40]	; (2060 <handle_channel_by_name+0x130>)
    2038:	f8cd a000 	str.w	sl, [sp]
    203c:	4623      	mov	r3, r4
    203e:	2108      	movs	r1, #8
    2040:	4628      	mov	r0, r5
    2042:	f020 f9a7 	bl	22394 <shell_fprintf>
    2046:	e7b3      	b.n	1fb0 <handle_channel_by_name+0x80>
    2048:	00000000 	.word	0x00000000
    204c:	412e8480 	.word	0x412e8480
    2050:	20000838 	.word	0x20000838
    2054:	0002ddce 	.word	0x0002ddce
    2058:	0002ddea 	.word	0x0002ddea
    205c:	0002de09 	.word	0x0002de09
    2060:	0002de25 	.word	0x0002de25

00002064 <disconnected>:
static void disconnected(struct bt_conn *disconn, uint8_t reason) {
    2064:	b538      	push	{r3, r4, r5, lr}
	if (conn) {
    2066:	4d08      	ldr	r5, [pc, #32]	; (2088 <disconnected+0x24>)
    2068:	6828      	ldr	r0, [r5, #0]
static void disconnected(struct bt_conn *disconn, uint8_t reason) {
    206a:	460c      	mov	r4, r1
	if (conn) {
    206c:	b118      	cbz	r0, 2076 <disconnected+0x12>
		bt_conn_unref(conn);
    206e:	f022 f8e1 	bl	24234 <bt_conn_unref>
		conn = NULL;
    2072:	2300      	movs	r3, #0
    2074:	602b      	str	r3, [r5, #0]
    bluetooth = false;
    2076:	4b05      	ldr	r3, [pc, #20]	; (208c <disconnected+0x28>)
	printf("Disconnected (reason %u)", reason);
    2078:	4805      	ldr	r0, [pc, #20]	; (2090 <disconnected+0x2c>)
    bluetooth = false;
    207a:	2200      	movs	r2, #0
    207c:	701a      	strb	r2, [r3, #0]
	printf("Disconnected (reason %u)", reason);
    207e:	4621      	mov	r1, r4
}
    2080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("Disconnected (reason %u)", reason);
    2084:	f005 bf4a 	b.w	7f1c <printf>
    2088:	2000216c 	.word	0x2000216c
    208c:	20003af6 	.word	0x20003af6
    2090:	00029d4a 	.word	0x00029d4a

00002094 <connected>:
static void connected(struct bt_conn *connected, uint8_t err) {
    2094:	b538      	push	{r3, r4, r5, lr}
    2096:	4604      	mov	r4, r0
	if (err) {
    2098:	b139      	cbz	r1, 20aa <connected+0x16>
		printf("Connection failed (err %u)", err);
    209a:	480b      	ldr	r0, [pc, #44]	; (20c8 <connected+0x34>)
    209c:	f005 ff3e 	bl	7f1c <printf>
}
    20a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("connected\n");
    20a4:	4809      	ldr	r0, [pc, #36]	; (20cc <connected+0x38>)
    20a6:	f005 bf39 	b.w	7f1c <printf>
		if (!conn) {
    20aa:	4d09      	ldr	r5, [pc, #36]	; (20d0 <connected+0x3c>)
		printf("Connected");
    20ac:	4809      	ldr	r0, [pc, #36]	; (20d4 <connected+0x40>)
    20ae:	f005 ff35 	bl	7f1c <printf>
		if (!conn) {
    20b2:	682b      	ldr	r3, [r5, #0]
    20b4:	b91b      	cbnz	r3, 20be <connected+0x2a>
			conn = bt_conn_ref(connected);
    20b6:	4620      	mov	r0, r4
    20b8:	f022 f8a0 	bl	241fc <bt_conn_ref>
    20bc:	6028      	str	r0, [r5, #0]
        bluetooth = true;
    20be:	4b06      	ldr	r3, [pc, #24]	; (20d8 <connected+0x44>)
    20c0:	2201      	movs	r2, #1
    20c2:	701a      	strb	r2, [r3, #0]
    20c4:	e7ec      	b.n	20a0 <connected+0xc>
    20c6:	bf00      	nop
    20c8:	00029d63 	.word	0x00029d63
    20cc:	00029d88 	.word	0x00029d88
    20d0:	2000216c 	.word	0x2000216c
    20d4:	00029d7e 	.word	0x00029d7e
    20d8:	20003af6 	.word	0x20003af6

000020dc <main>:
		}
	}
}


void main(void) {
    20dc:	b570      	push	{r4, r5, r6, lr}
    int err = bt_enable(NULL);
    20de:	2000      	movs	r0, #0
void main(void) {
    20e0:	b088      	sub	sp, #32
    int err = bt_enable(NULL);
    20e2:	f007 fde5 	bl	9cb0 <bt_enable>
	if (err) {
    20e6:	4606      	mov	r6, r0
    20e8:	b188      	cbz	r0, 210e <main+0x32>
		printf("Bluetooth init failed (err %d)", err);
    20ea:	4601      	mov	r1, r0
    20ec:	481d      	ldr	r0, [pc, #116]	; (2164 <main+0x88>)
		printf("Advertising failed to start (err %d)", err);
    20ee:	f005 ff15 	bl	7f1c <printf>

	bt_ready();
    bt_conn_cb_register(&conn_callbacks);
    20f2:	481d      	ldr	r0, [pc, #116]	; (2168 <main+0x8c>)
    20f4:	f009 f95a 	bl	b3ac <bt_conn_cb_register>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    20f8:	4c1c      	ldr	r4, [pc, #112]	; (216c <main+0x90>)
    20fa:	4620      	mov	r0, r4
    20fc:	f024 fbf4 	bl	268e8 <z_device_is_ready>
	if (!device_is_ready(dev)) {
    2100:	b9e8      	cbnz	r0, 213e <main+0x62>
		printf("sensor: device not ready.\n");
    2102:	481b      	ldr	r0, [pc, #108]	; (2170 <main+0x94>)
	}

	/**while (1) {
		k_msleep(100);
	}*/
    2104:	b008      	add	sp, #32
    2106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("sensor: device not ready.\n");
    210a:	f005 bf07 	b.w	7f1c <printf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), NULL, 0);
    210e:	4d19      	ldr	r5, [pc, #100]	; (2174 <main+0x98>)
	printf("Bluetooth initialized");
    2110:	4819      	ldr	r0, [pc, #100]	; (2178 <main+0x9c>)
    2112:	f005 ff03 	bl	7f1c <printf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), NULL, 0);
    2116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2118:	ac03      	add	r4, sp, #12
    211a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    211c:	682b      	ldr	r3, [r5, #0]
    211e:	6023      	str	r3, [r4, #0]
    2120:	4916      	ldr	r1, [pc, #88]	; (217c <main+0xa0>)
    2122:	9600      	str	r6, [sp, #0]
    2124:	4633      	mov	r3, r6
    2126:	2202      	movs	r2, #2
    2128:	a803      	add	r0, sp, #12
    212a:	f008 fb19 	bl	a760 <bt_le_adv_start>
	if (err) {
    212e:	4601      	mov	r1, r0
    2130:	b108      	cbz	r0, 2136 <main+0x5a>
		printf("Advertising failed to start (err %d)", err);
    2132:	4813      	ldr	r0, [pc, #76]	; (2180 <main+0xa4>)
    2134:	e7db      	b.n	20ee <main+0x12>
	printf("Configuration mode: waiting connections...");
    2136:	4813      	ldr	r0, [pc, #76]	; (2184 <main+0xa8>)
    2138:	f005 fef0 	bl	7f1c <printf>
    213c:	e7d9      	b.n	20f2 <main+0x16>
		struct sensor_trigger trig = {
    213e:	4b0d      	ldr	r3, [pc, #52]	; (2174 <main+0x98>)
    2140:	6958      	ldr	r0, [r3, #20]
	if (api->trigger_set == NULL) {
    2142:	68a3      	ldr	r3, [r4, #8]
    2144:	9003      	str	r0, [sp, #12]
    2146:	689b      	ldr	r3, [r3, #8]
    2148:	b923      	cbnz	r3, 2154 <main+0x78>
			printf("Cannot configure trigger\n");
    214a:	480f      	ldr	r0, [pc, #60]	; (2188 <main+0xac>)
    214c:	f005 fee6 	bl	7f1c <printf>
    2150:	b008      	add	sp, #32
    2152:	bd70      	pop	{r4, r5, r6, pc}
	return api->trigger_set(dev, trig, handler);
    2154:	4a0d      	ldr	r2, [pc, #52]	; (218c <main+0xb0>)
    2156:	a903      	add	r1, sp, #12
    2158:	4620      	mov	r0, r4
    215a:	4798      	blx	r3
		if (sensor_trigger_set(dev, &trig, hts221_handler) < 0) {
    215c:	2800      	cmp	r0, #0
    215e:	daf7      	bge.n	2150 <main+0x74>
    2160:	e7f3      	b.n	214a <main+0x6e>
    2162:	bf00      	nop
    2164:	00029e3a 	.word	0x00029e3a
    2168:	20000170 	.word	0x20000170
    216c:	000276c0 	.word	0x000276c0
    2170:	00029ebf 	.word	0x00029ebf
    2174:	00027b20 	.word	0x00027b20
    2178:	00029e59 	.word	0x00029e59
    217c:	00027c34 	.word	0x00027c34
    2180:	00029e6f 	.word	0x00029e6f
    2184:	00029e94 	.word	0x00029e94
    2188:	00029eda 	.word	0x00029eda
    218c:	00000bf1 	.word	0x00000bf1

00002190 <getopt>:
/*
 * getopt --
 *	Parse argc/argv argument vector.
 */
int getopt(int nargc, char *const nargv[], const char *ostr)
{
    2190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2194:	af00      	add	r7, sp, #0
    2196:	4680      	mov	r8, r0
    2198:	460e      	mov	r6, r1
    219a:	4615      	mov	r5, r2
	struct getopt_state *state;
	char *oli; /* option letter list index */

	/* get getopt state of the current thread */
	state = getopt_state_get();
    219c:	f000 f8c8 	bl	2330 <getopt_state_get>

	if (state->optreset || *state->place == 0) { /* update scanning pointer */
    21a0:	68c3      	ldr	r3, [r0, #12]
	state = getopt_state_get();
    21a2:	4604      	mov	r4, r0
	if (state->optreset || *state->place == 0) { /* update scanning pointer */
    21a4:	b91b      	cbnz	r3, 21ae <getopt+0x1e>
    21a6:	6943      	ldr	r3, [r0, #20]
    21a8:	781a      	ldrb	r2, [r3, #0]
    21aa:	2a00      	cmp	r2, #0
    21ac:	d15b      	bne.n	2266 <getopt+0xd6>
		state->optreset = 0;
    21ae:	2300      	movs	r3, #0
    21b0:	60e3      	str	r3, [r4, #12]
		state->place = nargv[state->optind];
    21b2:	6863      	ldr	r3, [r4, #4]
		if (state->optind >= nargc || *state->place++ != '-') {
    21b4:	4543      	cmp	r3, r8
		state->place = nargv[state->optind];
    21b6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
		if (state->optind >= nargc || *state->place++ != '-') {
    21ba:	db09      	blt.n	21d0 <getopt+0x40>
		}
		state->optopt = *state->place++;
		if (state->optopt == '-' && *state->place == 0) {
			/* "--" => end of options */
			++state->optind;
			state->place = EMSG;
    21bc:	4b4a      	ldr	r3, [pc, #296]	; (22e8 <getopt+0x158>)
    21be:	6163      	str	r3, [r4, #20]
			z_getopt_global_state_update(state);
    21c0:	4620      	mov	r0, r4
    21c2:	f000 f89b 	bl	22fc <z_getopt_global_state_update>
			return -1;
    21c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		state->place = EMSG;
		++state->optind;
	}
	z_getopt_global_state_update(state);
	return state->optopt;	/* return option letter */
}
    21ca:	46bd      	mov	sp, r7
    21cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (state->optind >= nargc || *state->place++ != '-') {
    21d0:	1c51      	adds	r1, r2, #1
    21d2:	6161      	str	r1, [r4, #20]
    21d4:	f892 9000 	ldrb.w	r9, [r2]
    21d8:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    21dc:	d1ee      	bne.n	21bc <getopt+0x2c>
		state->optopt = *state->place++;
    21de:	1c91      	adds	r1, r2, #2
    21e0:	6161      	str	r1, [r4, #20]
    21e2:	7851      	ldrb	r1, [r2, #1]
    21e4:	60a1      	str	r1, [r4, #8]
		if (state->optopt == '-' && *state->place == 0) {
    21e6:	292d      	cmp	r1, #45	; 0x2d
    21e8:	d104      	bne.n	21f4 <getopt+0x64>
    21ea:	7892      	ldrb	r2, [r2, #2]
    21ec:	b96a      	cbnz	r2, 220a <getopt+0x7a>
			++state->optind;
    21ee:	3301      	adds	r3, #1
    21f0:	6063      	str	r3, [r4, #4]
    21f2:	e7e3      	b.n	21bc <getopt+0x2c>
		if (state->optopt == 0) {
    21f4:	b949      	cbnz	r1, 220a <getopt+0x7a>
			state->place = EMSG;
    21f6:	4b3c      	ldr	r3, [pc, #240]	; (22e8 <getopt+0x158>)
    21f8:	6163      	str	r3, [r4, #20]
			if (strchr(ostr, '-') == NULL) {
    21fa:	4649      	mov	r1, r9
    21fc:	4628      	mov	r0, r5
    21fe:	f021 fca0 	bl	23b42 <strchr>
    2202:	2800      	cmp	r0, #0
    2204:	d0dc      	beq.n	21c0 <getopt+0x30>
			state->optopt = '-';
    2206:	f8c4 9008 	str.w	r9, [r4, #8]
	oli = strchr(ostr, state->optopt);
    220a:	68a1      	ldr	r1, [r4, #8]
    220c:	4628      	mov	r0, r5
    220e:	f021 fc98 	bl	23b42 <strchr>
	if (state->optopt == ':' || oli == NULL) {
    2212:	68a3      	ldr	r3, [r4, #8]
    2214:	6962      	ldr	r2, [r4, #20]
    2216:	2b3a      	cmp	r3, #58	; 0x3a
    2218:	d001      	beq.n	221e <getopt+0x8e>
		if (*state->place == 0) {
    221a:	4611      	mov	r1, r2
	if (state->optopt == ':' || oli == NULL) {
    221c:	bb40      	cbnz	r0, 2270 <getopt+0xe0>
		if (*state->place == 0) {
    221e:	7812      	ldrb	r2, [r2, #0]
    2220:	b912      	cbnz	r2, 2228 <getopt+0x98>
			++state->optind;
    2222:	6862      	ldr	r2, [r4, #4]
    2224:	3201      	adds	r2, #1
    2226:	6062      	str	r2, [r4, #4]
		if (state->opterr && *ostr != ':') {
    2228:	6822      	ldr	r2, [r4, #0]
    222a:	b1ba      	cbz	r2, 225c <getopt+0xcc>
    222c:	782a      	ldrb	r2, [r5, #0]
    222e:	2a3a      	cmp	r2, #58	; 0x3a
    2230:	d014      	beq.n	225c <getopt+0xcc>
			LOG_ERR("illegal option -- %c", state->optopt);
    2232:	482e      	ldr	r0, [pc, #184]	; (22ec <getopt+0x15c>)
    2234:	6802      	ldr	r2, [r0, #0]
    2236:	0751      	lsls	r1, r2, #29
    2238:	d010      	beq.n	225c <getopt+0xcc>
    223a:	466d      	mov	r5, sp
    223c:	b088      	sub	sp, #32
    223e:	466a      	mov	r2, sp
    2240:	492b      	ldr	r1, [pc, #172]	; (22f0 <getopt+0x160>)
    2242:	6151      	str	r1, [r2, #20]
    2244:	492b      	ldr	r1, [pc, #172]	; (22f4 <getopt+0x164>)
    2246:	e9c2 1306 	strd	r1, r3, [r2, #24]
    224a:	2304      	movs	r3, #4
    224c:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    2250:	2300      	movs	r3, #0
    2252:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    2256:	f001 ff7b 	bl	4150 <z_impl_z_log_msg_static_create>
    225a:	46ad      	mov	sp, r5
			z_getopt_global_state_update(state);
    225c:	4620      	mov	r0, r4
    225e:	f000 f84d 	bl	22fc <z_getopt_global_state_update>
		return BADCH;
    2262:	203f      	movs	r0, #63	; 0x3f
    2264:	e7b1      	b.n	21ca <getopt+0x3a>
		state->optopt = *state->place++;
    2266:	1c5a      	adds	r2, r3, #1
    2268:	6142      	str	r2, [r0, #20]
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	6083      	str	r3, [r0, #8]
    226e:	e7cc      	b.n	220a <getopt+0x7a>
	if (oli[1] != ':') {
    2270:	7840      	ldrb	r0, [r0, #1]
    2272:	283a      	cmp	r0, #58	; 0x3a
    2274:	d00b      	beq.n	228e <getopt+0xfe>
		state->optarg = NULL;
    2276:	2300      	movs	r3, #0
    2278:	6123      	str	r3, [r4, #16]
		if (*state->place == 0) {
    227a:	7813      	ldrb	r3, [r2, #0]
    227c:	b913      	cbnz	r3, 2284 <getopt+0xf4>
		++state->optind;
    227e:	6863      	ldr	r3, [r4, #4]
    2280:	3301      	adds	r3, #1
    2282:	6063      	str	r3, [r4, #4]
	z_getopt_global_state_update(state);
    2284:	4620      	mov	r0, r4
    2286:	f000 f839 	bl	22fc <z_getopt_global_state_update>
	return state->optopt;	/* return option letter */
    228a:	68a0      	ldr	r0, [r4, #8]
    228c:	e79d      	b.n	21ca <getopt+0x3a>
		if (*state->place) {
    228e:	f891 c000 	ldrb.w	ip, [r1]
			++state->optind;
    2292:	6862      	ldr	r2, [r4, #4]
    2294:	4814      	ldr	r0, [pc, #80]	; (22e8 <getopt+0x158>)
		if (*state->place) {
    2296:	f1bc 0f00 	cmp.w	ip, #0
    229a:	d105      	bne.n	22a8 <getopt+0x118>
		} else if (nargc > ++state->optind) {
    229c:	3201      	adds	r2, #1
    229e:	4590      	cmp	r8, r2
    22a0:	6062      	str	r2, [r4, #4]
    22a2:	dd04      	ble.n	22ae <getopt+0x11e>
			state->optarg = nargv[state->optind];
    22a4:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
		state->place = EMSG;
    22a8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    22ac:	e7e7      	b.n	227e <getopt+0xee>
			state->place = EMSG;
    22ae:	6160      	str	r0, [r4, #20]
			if (*ostr == ':') {
    22b0:	782d      	ldrb	r5, [r5, #0]
    22b2:	2d3a      	cmp	r5, #58	; 0x3a
    22b4:	d104      	bne.n	22c0 <getopt+0x130>
				z_getopt_global_state_update(state);
    22b6:	4620      	mov	r0, r4
    22b8:	f000 f820 	bl	22fc <z_getopt_global_state_update>
				return BADARG;
    22bc:	4628      	mov	r0, r5
    22be:	e784      	b.n	21ca <getopt+0x3a>
			if (state->opterr) {
    22c0:	6822      	ldr	r2, [r4, #0]
    22c2:	2a00      	cmp	r2, #0
    22c4:	d0ca      	beq.n	225c <getopt+0xcc>
				LOG_ERR("option requires an argument -- %c",
    22c6:	4809      	ldr	r0, [pc, #36]	; (22ec <getopt+0x15c>)
    22c8:	6802      	ldr	r2, [r0, #0]
    22ca:	0752      	lsls	r2, r2, #29
    22cc:	d0c6      	beq.n	225c <getopt+0xcc>
    22ce:	466d      	mov	r5, sp
    22d0:	b088      	sub	sp, #32
    22d2:	466a      	mov	r2, sp
    22d4:	4908      	ldr	r1, [pc, #32]	; (22f8 <getopt+0x168>)
    22d6:	6151      	str	r1, [r2, #20]
    22d8:	4906      	ldr	r1, [pc, #24]	; (22f4 <getopt+0x164>)
    22da:	e9c2 1306 	strd	r1, r3, [r2, #24]
    22de:	2304      	movs	r3, #4
    22e0:	f842 3f10 	str.w	r3, [r2, #16]!
    22e4:	4663      	mov	r3, ip
    22e6:	e7b4      	b.n	2252 <getopt+0xc2>
    22e8:	0002a598 	.word	0x0002a598
    22ec:	20000b14 	.word	0x20000b14
    22f0:	00029ef4 	.word	0x00029ef4
    22f4:	00029f33 	.word	0x00029f33
    22f8:	00029f0d 	.word	0x00029f0d

000022fc <z_getopt_global_state_update>:
/* This function is not thread safe. All threads using getopt are calling
 * this function.
 */
void z_getopt_global_state_update(struct getopt_state *state)
{
	opterr = state->opterr;
    22fc:	4b07      	ldr	r3, [pc, #28]	; (231c <z_getopt_global_state_update+0x20>)
    22fe:	6802      	ldr	r2, [r0, #0]
    2300:	601a      	str	r2, [r3, #0]
	optind = state->optind;
    2302:	4b07      	ldr	r3, [pc, #28]	; (2320 <z_getopt_global_state_update+0x24>)
    2304:	6842      	ldr	r2, [r0, #4]
    2306:	601a      	str	r2, [r3, #0]
	optopt = state->optopt;
    2308:	4b06      	ldr	r3, [pc, #24]	; (2324 <z_getopt_global_state_update+0x28>)
    230a:	6882      	ldr	r2, [r0, #8]
    230c:	601a      	str	r2, [r3, #0]
	optreset = state->optreset;
    230e:	4b06      	ldr	r3, [pc, #24]	; (2328 <z_getopt_global_state_update+0x2c>)
    2310:	68c2      	ldr	r2, [r0, #12]
    2312:	601a      	str	r2, [r3, #0]
	optarg = state->optarg;
    2314:	4b05      	ldr	r3, [pc, #20]	; (232c <z_getopt_global_state_update+0x30>)
    2316:	6902      	ldr	r2, [r0, #16]
    2318:	601a      	str	r2, [r3, #0]
}
    231a:	4770      	bx	lr
    231c:	200001a8 	.word	0x200001a8
    2320:	200001a4 	.word	0x200001a4
    2324:	20002178 	.word	0x20002178
    2328:	20002174 	.word	0x20002174
    232c:	20002170 	.word	0x20002170

00002330 <getopt_state_get>:
		}
	}
#endif
	/* If not a shell thread return a common pointer */
	return &m_getopt_common_state;
}
    2330:	4800      	ldr	r0, [pc, #0]	; (2334 <getopt_state_get+0x4>)
    2332:	4770      	bx	lr
    2334:	2000018c 	.word	0x2000018c

00002338 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    2338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    233c:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    233e:	0784      	lsls	r4, r0, #30
{
    2340:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    2342:	f002 0304 	and.w	r3, r2, #4
    2346:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    2348:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    234c:	f103 0301 	add.w	r3, r3, #1
    2350:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    2354:	9203      	str	r2, [sp, #12]
    2356:	4605      	mov	r5, r0
    2358:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    235a:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    235c:	f040 81be 	bne.w	26dc <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    2360:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    2362:	b130      	cbz	r0, 2372 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    2364:	2907      	cmp	r1, #7
    2366:	d809      	bhi.n	237c <cbvprintf_package+0x44>
		return -ENOSPC;
    2368:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    236c:	b011      	add	sp, #68	; 0x44
    236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    2372:	f001 0607 	and.w	r6, r1, #7
    2376:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    2378:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    237c:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    237e:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    2382:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    2384:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    2388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    238c:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    238e:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    2392:	464f      	mov	r7, r9
	bool parsing = false;
    2394:	46cb      	mov	fp, r9
	size = sizeof(char *);
    2396:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    2398:	b10d      	cbz	r5, 239e <cbvprintf_package+0x66>
				*(const char **)buf = s;
    239a:	9a00      	ldr	r2, [sp, #0]
    239c:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    239e:	9805      	ldr	r0, [sp, #20]
    23a0:	2800      	cmp	r0, #0
    23a2:	f300 80eb 	bgt.w	257c <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    23a6:	489a      	ldr	r0, [pc, #616]	; (2610 <cbvprintf_package+0x2d8>)
    23a8:	9a00      	ldr	r2, [sp, #0]
    23aa:	4282      	cmp	r2, r0
    23ac:	d303      	bcc.n	23b6 <cbvprintf_package+0x7e>
    23ae:	4899      	ldr	r0, [pc, #612]	; (2614 <cbvprintf_package+0x2dc>)
    23b0:	4282      	cmp	r2, r0
    23b2:	f0c0 80e3 	bcc.w	257c <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    23b6:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    23b8:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    23bc:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    23be:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    23c2:	f100 8106 	bmi.w	25d2 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    23c6:	2f0f      	cmp	r7, #15
    23c8:	f200 80b4 	bhi.w	2534 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    23cc:	2d00      	cmp	r5, #0
    23ce:	f000 8108 	beq.w	25e2 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    23d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
    23d6:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    23da:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    23dc:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    23e0:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    23e4:	9804      	ldr	r0, [sp, #16]
    23e6:	3001      	adds	r0, #1
    23e8:	9004      	str	r0, [sp, #16]
    23ea:	e0ea      	b.n	25c2 <cbvprintf_package+0x28a>
			switch (*fmt) {
    23ec:	287a      	cmp	r0, #122	; 0x7a
    23ee:	d860      	bhi.n	24b2 <cbvprintf_package+0x17a>
    23f0:	284b      	cmp	r0, #75	; 0x4b
    23f2:	d80e      	bhi.n	2412 <cbvprintf_package+0xda>
    23f4:	2847      	cmp	r0, #71	; 0x47
    23f6:	d85c      	bhi.n	24b2 <cbvprintf_package+0x17a>
    23f8:	2829      	cmp	r0, #41	; 0x29
    23fa:	d82f      	bhi.n	245c <cbvprintf_package+0x124>
    23fc:	2825      	cmp	r0, #37	; 0x25
    23fe:	d055      	beq.n	24ac <cbvprintf_package+0x174>
    2400:	d857      	bhi.n	24b2 <cbvprintf_package+0x17a>
    2402:	2820      	cmp	r0, #32
    2404:	d07d      	beq.n	2502 <cbvprintf_package+0x1ca>
    2406:	3823      	subs	r0, #35	; 0x23
    2408:	f1d0 0b00 	rsbs	fp, r0, #0
    240c:	eb4b 0b00 	adc.w	fp, fp, r0
    2410:	e077      	b.n	2502 <cbvprintf_package+0x1ca>
    2412:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    2416:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    241a:	d84a      	bhi.n	24b2 <cbvprintf_package+0x17a>
    241c:	e8df f00c 	tbb	[pc, ip]
    2420:	49494971 	.word	0x49494971
    2424:	49494949 	.word	0x49494949
    2428:	49494949 	.word	0x49494949
    242c:	4949494c 	.word	0x4949494c
    2430:	49494949 	.word	0x49494949
    2434:	4c495a49 	.word	0x4c495a49
    2438:	5a5a5a4c 	.word	0x5a5a5a4c
    243c:	496e4c71 	.word	0x496e4c71
    2440:	4c184971 	.word	0x4c184971
    2444:	83494918 	.word	0x83494918
    2448:	49494c80 	.word	0x49494c80
    244c:	494c      	.short	0x494c
    244e:	80          	.byte	0x80
    244f:	00          	.byte	0x00
    2450:	2000      	movs	r0, #0
    2452:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    2456:	f04f 0a04 	mov.w	sl, #4
    245a:	e039      	b.n	24d0 <cbvprintf_package+0x198>
			switch (*fmt) {
    245c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    2460:	fa5f fc8c 	uxtb.w	ip, ip
    2464:	2201      	movs	r2, #1
    2466:	fa02 fc0c 	lsl.w	ip, r2, ip
    246a:	ea1c 0f0e 	tst.w	ip, lr
    246e:	d148      	bne.n	2502 <cbvprintf_package+0x1ca>
    2470:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    2474:	d12e      	bne.n	24d4 <cbvprintf_package+0x19c>
    2476:	ea1c 0b02 	ands.w	fp, ip, r2
    247a:	d042      	beq.n	2502 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    247c:	3c01      	subs	r4, #1
    247e:	4454      	add	r4, sl
    2480:	f1ca 0c00 	rsb	ip, sl, #0
    2484:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    2488:	2d00      	cmp	r5, #0
    248a:	d061      	beq.n	2550 <cbvprintf_package+0x218>
    248c:	eba3 0c05 	sub.w	ip, r3, r5
    2490:	44a4      	add	ip, r4
    2492:	45b4      	cmp	ip, r6
    2494:	f63f af68 	bhi.w	2368 <cbvprintf_package+0x30>
		if (is_str_arg) {
    2498:	2800      	cmp	r0, #0
    249a:	d168      	bne.n	256e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    249c:	2b04      	cmp	r3, #4
    249e:	d147      	bne.n	2530 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    24a0:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    24a4:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    24a6:	3404      	adds	r4, #4
    24a8:	2304      	movs	r3, #4
    24aa:	e02a      	b.n	2502 <cbvprintf_package+0x1ca>
				arg_idx--;
    24ac:	9a01      	ldr	r2, [sp, #4]
    24ae:	3a01      	subs	r2, #1
    24b0:	9201      	str	r2, [sp, #4]
				parsing = false;
    24b2:	f04f 0b00 	mov.w	fp, #0
				continue;
    24b6:	e024      	b.n	2502 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    24b8:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    24bc:	286c      	cmp	r0, #108	; 0x6c
    24be:	d134      	bne.n	252a <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    24c0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    24c4:	2000      	movs	r0, #0
    24c6:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    24c8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    24ca:	d1c4      	bne.n	2456 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    24cc:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    24d0:	4653      	mov	r3, sl
    24d2:	e7d3      	b.n	247c <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    24d4:	f108 0807 	add.w	r8, r8, #7
    24d8:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    24dc:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    24de:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    24e2:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    24e6:	b135      	cbz	r5, 24f6 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    24e8:	9806      	ldr	r0, [sp, #24]
    24ea:	4420      	add	r0, r4
    24ec:	42b0      	cmp	r0, r6
    24ee:	f63f af3b 	bhi.w	2368 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    24f2:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    24f6:	3408      	adds	r4, #8
				parsing = false;
    24f8:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    24fc:	f04f 0a08 	mov.w	sl, #8
    2500:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    2502:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    2506:	2800      	cmp	r0, #0
    2508:	d078      	beq.n	25fc <cbvprintf_package+0x2c4>
			if (!parsing) {
    250a:	f1bb 0f00 	cmp.w	fp, #0
    250e:	f47f af6d 	bne.w	23ec <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    2512:	2825      	cmp	r0, #37	; 0x25
    2514:	d1f5      	bne.n	2502 <cbvprintf_package+0x1ca>
					arg_idx++;
    2516:	9b01      	ldr	r3, [sp, #4]
    2518:	3301      	adds	r3, #1
    251a:	9301      	str	r3, [sp, #4]
					parsing = true;
    251c:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    2520:	f04f 0a04 	mov.w	sl, #4
    2524:	e7ec      	b.n	2500 <cbvprintf_package+0x1c8>
			switch (*fmt) {
    2526:	4658      	mov	r0, fp
    2528:	e793      	b.n	2452 <cbvprintf_package+0x11a>
    252a:	2000      	movs	r0, #0
				parsing = false;
    252c:	4683      	mov	fp, r0
    252e:	e7a5      	b.n	247c <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    2530:	2b08      	cmp	r3, #8
    2532:	d002      	beq.n	253a <cbvprintf_package+0x202>
					return -EINVAL;
    2534:	f06f 0015 	mvn.w	r0, #21
    2538:	e718      	b.n	236c <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    253a:	f108 0807 	add.w	r8, r8, #7
    253e:	f028 0807 	bic.w	r8, r8, #7
    2542:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    2546:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    254a:	3408      	adds	r4, #8
    254c:	2308      	movs	r3, #8
    254e:	e7d8      	b.n	2502 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    2550:	b968      	cbnz	r0, 256e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    2552:	2b04      	cmp	r3, #4
    2554:	d102      	bne.n	255c <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    2556:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    255a:	e7a4      	b.n	24a6 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    255c:	2b08      	cmp	r3, #8
    255e:	d1e9      	bne.n	2534 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    2560:	f108 0807 	add.w	r8, r8, #7
    2564:	f028 0807 	bic.w	r8, r8, #7
    2568:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    256c:	e7ed      	b.n	254a <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    256e:	9a05      	ldr	r2, [sp, #20]
    2570:	3a01      	subs	r2, #1
    2572:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    2574:	f858 2b04 	ldr.w	r2, [r8], #4
    2578:	9200      	str	r2, [sp, #0]
    257a:	e70d      	b.n	2398 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    257c:	9a03      	ldr	r2, [sp, #12]
    257e:	0790      	lsls	r0, r2, #30
    2580:	d520      	bpl.n	25c4 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    2582:	eba4 0e05 	sub.w	lr, r4, r5
    2586:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    258a:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    258e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    2592:	d2cf      	bcs.n	2534 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    2594:	2f0f      	cmp	r7, #15
    2596:	d8cd      	bhi.n	2534 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    2598:	b1f5      	cbz	r5, 25d8 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    259a:	f107 0240 	add.w	r2, r7, #64	; 0x40
    259e:	eb0d 0e02 	add.w	lr, sp, r2
    25a2:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    25a4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    25a6:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    25aa:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    25ae:	f1bc 0f00 	cmp.w	ip, #0
    25b2:	f43f af17 	beq.w	23e4 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    25b6:	f060 007f 	orn	r0, r0, #127	; 0x7f
    25ba:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    25be:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    25c2:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    25c4:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    25c8:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    25ca:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    25cc:	f64f 7eda 	movw	lr, #65498	; 0xffda
    25d0:	e797      	b.n	2502 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    25d2:	f04f 0c00 	mov.w	ip, #0
    25d6:	e7da      	b.n	258e <cbvprintf_package+0x256>
				} else if (is_ro) {
    25d8:	f1bc 0f00 	cmp.w	ip, #0
    25dc:	d001      	beq.n	25e2 <cbvprintf_package+0x2aa>
					len += 1;
    25de:	3601      	adds	r6, #1
    25e0:	e7ef      	b.n	25c2 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    25e2:	9802      	ldr	r0, [sp, #8]
					len += 2;
    25e4:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    25e6:	2800      	cmp	r0, #0
    25e8:	d1eb      	bne.n	25c2 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    25ea:	9800      	ldr	r0, [sp, #0]
    25ec:	e9cd 3106 	strd	r3, r1, [sp, #24]
    25f0:	f021 fab5 	bl	23b5e <strlen>
    25f4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    25f8:	4406      	add	r6, r0
    25fa:	e7e2      	b.n	25c2 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    25fc:	1b63      	subs	r3, r4, r5
    25fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2602:	d297      	bcs.n	2534 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    2604:	b945      	cbnz	r5, 2618 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    2606:	f1a6 0408 	sub.w	r4, r6, #8
    260a:	18e0      	adds	r0, r4, r3
    260c:	e6ae      	b.n	236c <cbvprintf_package+0x34>
    260e:	bf00      	nop
    2610:	000274d8 	.word	0x000274d8
    2614:	0002eb40 	.word	0x0002eb40
	if (rws_pos_en) {
    2618:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    261a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    261c:	089b      	lsrs	r3, r3, #2
    261e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    2620:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    2624:	b1c2      	cbz	r2, 2658 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    2626:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    2628:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    262c:	f1b9 0f00 	cmp.w	r9, #0
    2630:	d005      	beq.n	263e <cbvprintf_package+0x306>
    2632:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    2634:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    2636:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    263a:	4297      	cmp	r7, r2
    263c:	d10e      	bne.n	265c <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
    263e:	f1c5 0301 	rsb	r3, r5, #1
    2642:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    2646:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    264a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    264c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    2650:	4557      	cmp	r7, sl
    2652:	d112      	bne.n	267a <cbvprintf_package+0x342>
	return BUF_OFFSET;
    2654:	1b60      	subs	r0, r4, r5
    2656:	e689      	b.n	236c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    2658:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    265a:	e7e5      	b.n	2628 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    265c:	f810 3b01 	ldrb.w	r3, [r0], #1
    2660:	0619      	lsls	r1, r3, #24
    2662:	d508      	bpl.n	2676 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
    2664:	eb04 0e0c 	add.w	lr, r4, ip
    2668:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    266a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    266e:	f63f ae7b 	bhi.w	2368 <cbvprintf_package+0x30>
			*buf++ = pos;
    2672:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    2676:	3201      	adds	r2, #1
    2678:	e7df      	b.n	263a <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    267a:	f1b9 0f00 	cmp.w	r9, #0
    267e:	d003      	beq.n	2688 <cbvprintf_package+0x350>
    2680:	f998 2000 	ldrsb.w	r2, [r8]
    2684:	2a00      	cmp	r2, #0
    2686:	db17      	blt.n	26b8 <cbvprintf_package+0x380>
		if (rws_pos_en) {
    2688:	9b02      	ldr	r3, [sp, #8]
    268a:	b1d3      	cbz	r3, 26c2 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
    268c:	f81a 200b 	ldrb.w	r2, [sl, fp]
    2690:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    2694:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    2696:	9b01      	ldr	r3, [sp, #4]
    2698:	1898      	adds	r0, r3, r2
    269a:	4420      	add	r0, r4
    269c:	42b0      	cmp	r0, r6
    269e:	f63f ae63 	bhi.w	2368 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    26a2:	f898 0000 	ldrb.w	r0, [r8]
    26a6:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    26aa:	9900      	ldr	r1, [sp, #0]
    26ac:	9203      	str	r2, [sp, #12]
    26ae:	4620      	mov	r0, r4
    26b0:	f021 faac 	bl	23c0c <memcpy>
		buf += size;
    26b4:	9a03      	ldr	r2, [sp, #12]
    26b6:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    26b8:	f10a 0a01 	add.w	sl, sl, #1
    26bc:	f108 0801 	add.w	r8, r8, #1
    26c0:	e7c6      	b.n	2650 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    26c2:	f898 2000 	ldrb.w	r2, [r8]
    26c6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    26ca:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    26cc:	9b02      	ldr	r3, [sp, #8]
    26ce:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    26d2:	9800      	ldr	r0, [sp, #0]
    26d4:	f021 fa43 	bl	23b5e <strlen>
    26d8:	1c42      	adds	r2, r0, #1
    26da:	e7dc      	b.n	2696 <cbvprintf_package+0x35e>
		return -EFAULT;
    26dc:	f06f 000d 	mvn.w	r0, #13
    26e0:	e644      	b.n	236c <cbvprintf_package+0x34>
    26e2:	bf00      	nop

000026e4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    26e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26e8:	b095      	sub	sp, #84	; 0x54
    26ea:	af00      	add	r7, sp, #0
    26ec:	4604      	mov	r4, r0
    26ee:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    26f2:	61bb      	str	r3, [r7, #24]
    26f4:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    26f8:	627a      	str	r2, [r7, #36]	; 0x24
    26fa:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    26fc:	6239      	str	r1, [r7, #32]
    26fe:	b951      	cbnz	r1, 2716 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    2700:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    2702:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    2704:	7880      	ldrb	r0, [r0, #2]
    2706:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    270a:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    270c:	460d      	mov	r5, r1
    270e:	42ae      	cmp	r6, r5
    2710:	d81a      	bhi.n	2748 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    2712:	1b03      	subs	r3, r0, r4
    2714:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    2716:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    271a:	78e3      	ldrb	r3, [r4, #3]
    271c:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    271e:	464e      	mov	r6, r9
	ro_cpy = ros_nbr &&
    2720:	f1b9 0f00 	cmp.w	r9, #0
    2724:	d002      	beq.n	272c <cbprintf_package_convert+0x48>
    2726:	f01b 0f01 	tst.w	fp, #1
    272a:	d116      	bne.n	275a <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
    272c:	697b      	ldr	r3, [r7, #20]
    272e:	bb53      	cbnz	r3, 2786 <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    2730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2732:	b11b      	cbz	r3, 273c <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    2734:	69ba      	ldr	r2, [r7, #24]
    2736:	6a39      	ldr	r1, [r7, #32]
    2738:	4620      	mov	r0, r4
    273a:	4798      	blx	r3
		}

		return in_len;
    273c:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    273e:	4628      	mov	r0, r5
    2740:	3754      	adds	r7, #84	; 0x54
    2742:	46bd      	mov	sp, r7
    2744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    2748:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    274c:	4640      	mov	r0, r8
    274e:	f021 fa06 	bl	23b5e <strlen>
    2752:	3001      	adds	r0, #1
    2754:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    2756:	3501      	adds	r5, #1
    2758:	e7d9      	b.n	270e <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
    275a:	f894 a000 	ldrb.w	sl, [r4]
    275e:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    2760:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    2762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    2764:	ea4f 028a 	mov.w	r2, sl, lsl #2
    2768:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    276a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    276e:	2b00      	cmp	r3, #0
    2770:	f040 8107 	bne.w	2982 <cbprintf_package_convert+0x29e>
		out_len = (int)in_len;
    2774:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    2776:	46d0      	mov	r8, sl
    2778:	eb09 030a 	add.w	r3, r9, sl
	size_t strl_cnt = 0;
    277c:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
    277e:	4543      	cmp	r3, r8
    2780:	d154      	bne.n	282c <cbprintf_package_convert+0x148>
    2782:	44ca      	add	sl, r9
    2784:	e013      	b.n	27ae <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
    2786:	f01b 0f02 	tst.w	fp, #2
    278a:	d0d1      	beq.n	2730 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    278c:	f894 a000 	ldrb.w	sl, [r4]
    2790:	ea4f 038a 	mov.w	r3, sl, lsl #2
    2794:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    2796:	6863      	ldr	r3, [r4, #4]
    2798:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    279c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    27a0:	2b00      	cmp	r3, #0
    27a2:	d17e      	bne.n	28a2 <cbprintf_package_convert+0x1be>
		out_len = (int)in_len;
    27a4:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    27a6:	f1b9 0f00 	cmp.w	r9, #0
    27aa:	d154      	bne.n	2856 <cbprintf_package_convert+0x172>
	size_t strl_cnt = 0;
    27ac:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
    27ae:	f01b 0f05 	tst.w	fp, #5
    27b2:	bf0c      	ite	eq
    27b4:	2302      	moveq	r3, #2
    27b6:	2301      	movne	r3, #1
    27b8:	627b      	str	r3, [r7, #36]	; 0x24
    27ba:	697b      	ldr	r3, [r7, #20]
    27bc:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    27c0:	f00b 0302 	and.w	r3, fp, #2
    27c4:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
    27c6:	45ca      	cmp	sl, r9
    27c8:	d0b9      	beq.n	273e <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    27ca:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    27ce:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    27d2:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
    27d6:	4bac      	ldr	r3, [pc, #688]	; (2a88 <cbprintf_package_convert+0x3a4>)
    27d8:	4598      	cmp	r8, r3
    27da:	d302      	bcc.n	27e2 <cbprintf_package_convert+0xfe>
    27dc:	4bab      	ldr	r3, [pc, #684]	; (2a8c <cbprintf_package_convert+0x3a8>)
    27de:	4598      	cmp	r8, r3
    27e0:	d33f      	bcc.n	2862 <cbprintf_package_convert+0x17e>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    27e2:	693b      	ldr	r3, [r7, #16]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d049      	beq.n	287c <cbprintf_package_convert+0x198>
    27e8:	69f8      	ldr	r0, [r7, #28]
    27ea:	f01e fb49 	bl	20e80 <is_ptr>
    27ee:	2800      	cmp	r0, #0
    27f0:	d044      	beq.n	287c <cbprintf_package_convert+0x198>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    27f2:	48a7      	ldr	r0, [pc, #668]	; (2a90 <cbprintf_package_convert+0x3ac>)
    27f4:	6803      	ldr	r3, [r0, #0]
    27f6:	f013 0f06 	tst.w	r3, #6
    27fa:	d015      	beq.n	2828 <cbprintf_package_convert+0x144>
    27fc:	46e8      	mov	r8, sp
    27fe:	b08a      	sub	sp, #40	; 0x28
    2800:	466a      	mov	r2, sp
    2802:	4ba4      	ldr	r3, [pc, #656]	; (2a94 <cbprintf_package_convert+0x3b0>)
    2804:	6153      	str	r3, [r2, #20]
    2806:	4ba4      	ldr	r3, [pc, #656]	; (2a98 <cbprintf_package_convert+0x3b4>)
    2808:	6193      	str	r3, [r2, #24]
    280a:	69fb      	ldr	r3, [r7, #28]
    280c:	e9c2 3107 	strd	r3, r1, [r2, #28]
    2810:	f240 3301 	movw	r3, #769	; 0x301
    2814:	8493      	strh	r3, [r2, #36]	; 0x24
    2816:	4ba1      	ldr	r3, [pc, #644]	; (2a9c <cbprintf_package_convert+0x3b8>)
    2818:	f842 3f10 	str.w	r3, [r2, #16]!
    281c:	2300      	movs	r3, #0
    281e:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    2822:	f001 fc95 	bl	4150 <z_impl_z_log_msg_static_create>
    2826:	46c5      	mov	sp, r8
				out_len -= 2;
    2828:	3d02      	subs	r5, #2
				continue;
    282a:	e7cc      	b.n	27c6 <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
    282c:	f818 2b01 	ldrb.w	r2, [r8], #1
    2830:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    2832:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    2836:	f021 f992 	bl	23b5e <strlen>
				if (strl && strl_cnt < strl_len) {
    283a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    283e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    2840:	b13a      	cbz	r2, 2852 <cbprintf_package_convert+0x16e>
    2842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    2846:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    2848:	bf3e      	ittt	cc
    284a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    284c:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    2850:	3601      	addcc	r6, #1
				out_len += len;
    2852:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    2854:	e793      	b.n	277e <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    2856:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    285a:	bf1c      	itt	ne
    285c:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    285e:	44ca      	addne	sl, r9
    2860:	e7a5      	b.n	27ae <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    2862:	693b      	ldr	r3, [r7, #16]
    2864:	b123      	cbz	r3, 2870 <cbprintf_package_convert+0x18c>
    2866:	69f8      	ldr	r0, [r7, #28]
    2868:	f01e fb0a 	bl	20e80 <is_ptr>
    286c:	2800      	cmp	r0, #0
    286e:	d1c0      	bne.n	27f2 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    2870:	f01b 0f01 	tst.w	fp, #1
    2874:	d105      	bne.n	2882 <cbprintf_package_convert+0x19e>
					out_len -= drop_ro_str_pos ? 2 : 1;
    2876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2878:	1aed      	subs	r5, r5, r3
    287a:	e7a4      	b.n	27c6 <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    287c:	6a3b      	ldr	r3, [r7, #32]
    287e:	2b00      	cmp	r3, #0
    2880:	d0a1      	beq.n	27c6 <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
    2882:	4640      	mov	r0, r8
    2884:	f021 f96b 	bl	23b5e <strlen>
				if (strl && strl_cnt < strl_len) {
    2888:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    288a:	b143      	cbz	r3, 289e <cbprintf_package_convert+0x1ba>
    288c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2890:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    2892:	bf3f      	itttt	cc
    2894:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    2896:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    2898:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    289c:	3601      	addcc	r6, #1
				out_len += (len - 1);
    289e:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    28a0:	e791      	b.n	27c6 <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    28a2:	f1b9 0f00 	cmp.w	r9, #0
    28a6:	d071      	beq.n	298c <cbprintf_package_convert+0x2a8>
    28a8:	f01b 0604 	ands.w	r6, fp, #4
    28ac:	d071      	beq.n	2992 <cbprintf_package_convert+0x2ae>
		keep_cnt = ros_nbr;
    28ae:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    28b0:	2600      	movs	r6, #0
		dst = keep_str_pos;
    28b2:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    28b6:	464a      	mov	r2, r9
    28b8:	4651      	mov	r1, sl
    28ba:	f021 f9a7 	bl	23c0c <memcpy>
	str_pos += ros_nbr;
    28be:	697b      	ldr	r3, [r7, #20]
    28c0:	005b      	lsls	r3, r3, #1
    28c2:	60bb      	str	r3, [r7, #8]
    28c4:	697b      	ldr	r3, [r7, #20]
    28c6:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    28c8:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    28cc:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    28ce:	f00b 0302 	and.w	r3, fp, #2
    28d2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    28d4:	697b      	ldr	r3, [r7, #20]
    28d6:	459a      	cmp	sl, r3
    28d8:	d15d      	bne.n	2996 <cbprintf_package_convert+0x2b2>
	out_desc.len = in_desc->len;
    28da:	7823      	ldrb	r3, [r4, #0]
    28dc:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    28de:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    28e0:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    28e4:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    28e8:	bf0c      	ite	eq
    28ea:	ea4f 0158 	moveq.w	r1, r8, lsr #1
    28ee:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    28f0:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    28f4:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    28f6:	f040 809d 	bne.w	2a34 <cbprintf_package_convert+0x350>
    28fa:	f01b 0f04 	tst.w	fp, #4
    28fe:	bf14      	ite	ne
    2900:	4640      	movne	r0, r8
    2902:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    2904:	f894 b002 	ldrb.w	fp, [r4, #2]
    2908:	f894 a003 	ldrb.w	sl, [r4, #3]
    290c:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    290e:	7062      	strb	r2, [r4, #1]
    2910:	70a0      	strb	r0, [r4, #2]
    2912:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    2914:	69ba      	ldr	r2, [r7, #24]
    2916:	68f9      	ldr	r1, [r7, #12]
    2918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    291a:	4620      	mov	r0, r4
    291c:	4798      	blx	r3
	if (rv < 0) {
    291e:	1e05      	subs	r5, r0, #0
    2920:	f6ff af0d 	blt.w	273e <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    2924:	69fb      	ldr	r3, [r7, #28]
    2926:	7023      	strb	r3, [r4, #0]
    2928:	693b      	ldr	r3, [r7, #16]
    292a:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    292c:	4641      	mov	r1, r8
    292e:	69ba      	ldr	r2, [r7, #24]
    2930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    2932:	f884 b002 	strb.w	fp, [r4, #2]
    2936:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    293a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    293e:	4798      	blx	r3
	if (rv < 0) {
    2940:	f1b0 0800 	subs.w	r8, r0, #0
    2944:	f2c0 80af 	blt.w	2aa6 <cbprintf_package_convert+0x3c2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    2948:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    294a:	69ba      	ldr	r2, [r7, #24]
    294c:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    294e:	eba3 0109 	sub.w	r1, r3, r9
    2952:	68fb      	ldr	r3, [r7, #12]
    2954:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    2956:	68bb      	ldr	r3, [r7, #8]
    2958:	1ac9      	subs	r1, r1, r3
    295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    295c:	4798      	blx	r3
	if (rv < 0) {
    295e:	2800      	cmp	r0, #0
    2960:	f2c0 80a3 	blt.w	2aaa <cbprintf_package_convert+0x3c6>
	out_len += rv;
    2964:	44a8      	add	r8, r5
	out_len += rv;
    2966:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
    296a:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    296e:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    2972:	45b3      	cmp	fp, r6
    2974:	db60      	blt.n	2a38 <cbprintf_package_convert+0x354>
	(void)cb(NULL, 0, ctx);
    2976:	2100      	movs	r1, #0
    2978:	69ba      	ldr	r2, [r7, #24]
    297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    297c:	4608      	mov	r0, r1
    297e:	4798      	blx	r3
	return out_len;
    2980:	e6dd      	b.n	273e <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    2982:	f107 0030 	add.w	r0, r7, #48	; 0x30
    2986:	f04f 0800 	mov.w	r8, #0
    298a:	e794      	b.n	28b6 <cbprintf_package_convert+0x1d2>
		scpy_cnt = 0;
    298c:	464e      	mov	r6, r9
		keep_cnt = 0;
    298e:	46c8      	mov	r8, r9
    2990:	e795      	b.n	28be <cbprintf_package_convert+0x1da>
    2992:	46b0      	mov	r8, r6
    2994:	e793      	b.n	28be <cbprintf_package_convert+0x1da>
		uint8_t arg_idx = *str_pos++;
    2996:	f81a 1b02 	ldrb.w	r1, [sl], #2
    299a:	4a3b      	ldr	r2, [pc, #236]	; (2a88 <cbprintf_package_convert+0x3a4>)
		uint8_t arg_pos = *str_pos++;
    299c:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    29a0:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    29a4:	4293      	cmp	r3, r2
    29a6:	d302      	bcc.n	29ae <cbprintf_package_convert+0x2ca>
    29a8:	4a38      	ldr	r2, [pc, #224]	; (2a8c <cbprintf_package_convert+0x3a8>)
    29aa:	4293      	cmp	r3, r2
    29ac:	d31c      	bcc.n	29e8 <cbprintf_package_convert+0x304>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    29ae:	693b      	ldr	r3, [r7, #16]
    29b0:	b123      	cbz	r3, 29bc <cbprintf_package_convert+0x2d8>
    29b2:	69f8      	ldr	r0, [r7, #28]
    29b4:	f01e fa64 	bl	20e80 <is_ptr>
    29b8:	2800      	cmp	r0, #0
    29ba:	d18b      	bne.n	28d4 <cbprintf_package_convert+0x1f0>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	b9f3      	cbnz	r3, 29fe <cbprintf_package_convert+0x31a>
				keep_str_pos[keep_cnt++] = arg_idx;
    29c0:	f108 0228 	add.w	r2, r8, #40	; 0x28
    29c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
    29c8:	4402      	add	r2, r0
    29ca:	f108 0301 	add.w	r3, r8, #1
    29ce:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    29d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
    29d6:	fa52 f383 	uxtab	r3, r2, r3
    29da:	f108 0802 	add.w	r8, r8, #2
    29de:	fa5f f888 	uxtb.w	r8, r8
    29e2:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    29e6:	e775      	b.n	28d4 <cbprintf_package_convert+0x1f0>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    29e8:	693b      	ldr	r3, [r7, #16]
    29ea:	b12b      	cbz	r3, 29f8 <cbprintf_package_convert+0x314>
    29ec:	69f8      	ldr	r0, [r7, #28]
    29ee:	f01e fa47 	bl	20e80 <is_ptr>
    29f2:	2800      	cmp	r0, #0
    29f4:	f47f af6e 	bne.w	28d4 <cbprintf_package_convert+0x1f0>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    29f8:	f01b 0f01 	tst.w	fp, #1
    29fc:	d009      	beq.n	2a12 <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    29fe:	f106 0228 	add.w	r2, r6, #40	; 0x28
    2a02:	f107 0128 	add.w	r1, r7, #40	; 0x28
    2a06:	1c73      	adds	r3, r6, #1
    2a08:	1856      	adds	r6, r2, r1
    2a0a:	f806 5c20 	strb.w	r5, [r6, #-32]
    2a0e:	b2de      	uxtb	r6, r3
    2a10:	e760      	b.n	28d4 <cbprintf_package_convert+0x1f0>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    2a12:	f01b 0f04 	tst.w	fp, #4
    2a16:	f43f af5d 	beq.w	28d4 <cbprintf_package_convert+0x1f0>
				keep_str_pos[keep_cnt++] = arg_pos;
    2a1a:	f108 0228 	add.w	r2, r8, #40	; 0x28
    2a1e:	f107 0128 	add.w	r1, r7, #40	; 0x28
    2a22:	f108 0301 	add.w	r3, r8, #1
    2a26:	eb02 0801 	add.w	r8, r2, r1
    2a2a:	f808 5c10 	strb.w	r5, [r8, #-16]
    2a2e:	fa5f f883 	uxtb.w	r8, r3
    2a32:	e74f      	b.n	28d4 <cbprintf_package_convert+0x1f0>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    2a34:	2000      	movs	r0, #0
    2a36:	e765      	b.n	2904 <cbprintf_package_convert+0x220>
		uint8_t loc = cpy_str_pos[i];
    2a38:	f81b 300a 	ldrb.w	r3, [fp, sl]
    2a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    2a40:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    2a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2a46:	b35b      	cbz	r3, 2aa0 <cbprintf_package_convert+0x3bc>
    2a48:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    2a4c:	69ba      	ldr	r2, [r7, #24]
    2a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a50:	2101      	movs	r1, #1
    2a52:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    2a56:	4798      	blx	r3
		if (rv < 0) {
    2a58:	2800      	cmp	r0, #0
    2a5a:	db26      	blt.n	2aaa <cbprintf_package_convert+0x3c6>
		out_len += rv;
    2a5c:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    2a5e:	f1b8 0f00 	cmp.w	r8, #0
    2a62:	d106      	bne.n	2a72 <cbprintf_package_convert+0x38e>
    2a64:	4648      	mov	r0, r9
    2a66:	f021 f87a 	bl	23b5e <strlen>
    2a6a:	f100 0801 	add.w	r8, r0, #1
    2a6e:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    2a72:	69ba      	ldr	r2, [r7, #24]
    2a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a76:	4641      	mov	r1, r8
    2a78:	4648      	mov	r0, r9
    2a7a:	4798      	blx	r3
		if (rv < 0) {
    2a7c:	2800      	cmp	r0, #0
    2a7e:	db14      	blt.n	2aaa <cbprintf_package_convert+0x3c6>
		out_len += rv;
    2a80:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    2a82:	f10b 0b01 	add.w	fp, fp, #1
    2a86:	e774      	b.n	2972 <cbprintf_package_convert+0x28e>
    2a88:	000274d8 	.word	0x000274d8
    2a8c:	0002eb40 	.word	0x0002eb40
    2a90:	20000b0c 	.word	0x20000b0c
    2a94:	00029f41 	.word	0x00029f41
    2a98:	00029fe8 	.word	0x00029fe8
    2a9c:	01000005 	.word	0x01000005
		uint16_t str_len = strl ? strl[i] : 0;
    2aa0:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    2aa4:	e7d2      	b.n	2a4c <cbprintf_package_convert+0x368>
    2aa6:	4645      	mov	r5, r8
    2aa8:	e649      	b.n	273e <cbprintf_package_convert+0x5a>
    2aaa:	4605      	mov	r5, r0
    2aac:	e647      	b.n	273e <cbprintf_package_convert+0x5a>
    2aae:	bf00      	nop

00002ab0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    2ab0:	4b01      	ldr	r3, [pc, #4]	; (2ab8 <__printk_hook_install+0x8>)
    2ab2:	6018      	str	r0, [r3, #0]
}
    2ab4:	4770      	bx	lr
    2ab6:	bf00      	nop
    2ab8:	200001ac 	.word	0x200001ac

00002abc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2abc:	b530      	push	{r4, r5, lr}
    2abe:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    2ac0:	2500      	movs	r5, #0
    2ac2:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    2ac6:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    2ac8:	9500      	str	r5, [sp, #0]
    2aca:	a903      	add	r1, sp, #12
    2acc:	4805      	ldr	r0, [pc, #20]	; (2ae4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    2ace:	9505      	str	r5, [sp, #20]
    2ad0:	f000 f918 	bl	2d04 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    2ad4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    2ad8:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    2ada:	bfb8      	it	lt
    2adc:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    2ade:	b007      	add	sp, #28
    2ae0:	bd30      	pop	{r4, r5, pc}
    2ae2:	bf00      	nop
    2ae4:	00020ecf 	.word	0x00020ecf

00002ae8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2aec:	8b05      	ldrh	r5, [r0, #24]
{
    2aee:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2af0:	0728      	lsls	r0, r5, #28
{
    2af2:	4690      	mov	r8, r2
	if (processing) {
    2af4:	d411      	bmi.n	2b1a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    2af6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2af8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    2afc:	f040 80cd 	bne.w	2c9a <process_event+0x1b2>
			evt = process_recheck(mgr);
    2b00:	4620      	mov	r0, r4
    2b02:	f01e fbe2 	bl	212ca <process_recheck>
		}

		if (evt == EVT_NOP) {
    2b06:	b178      	cbz	r0, 2b28 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    2b08:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2b0a:	8b21      	ldrh	r1, [r4, #24]
    2b0c:	2804      	cmp	r0, #4
    2b0e:	d811      	bhi.n	2b34 <process_event+0x4c>
    2b10:	e8df f000 	tbb	[pc, r0]
    2b14:	856d10c3 	.word	0x856d10c3
    2b18:	95          	.byte	0x95
    2b19:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    2b1a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2b1c:	bf0c      	ite	eq
    2b1e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2b22:	f045 0520 	orrne.w	r5, r5, #32
    2b26:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2b28:	f388 8811 	msr	BASEPRI, r8
    2b2c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2b34:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2b38:	45aa      	cmp	sl, r5
    2b3a:	f000 80a6 	beq.w	2c8a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    2b3e:	2700      	movs	r7, #0
    2b40:	46b9      	mov	r9, r7
    2b42:	463e      	mov	r6, r7
    2b44:	68a3      	ldr	r3, [r4, #8]
    2b46:	2b00      	cmp	r3, #0
    2b48:	f000 80bd 	beq.w	2cc6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2b4c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2b50:	8321      	strh	r1, [r4, #24]
    2b52:	f388 8811 	msr	BASEPRI, r8
    2b56:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2b5a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2b5c:	2900      	cmp	r1, #0
    2b5e:	f000 80bb 	beq.w	2cd8 <process_event+0x1f0>
	return node->next;
    2b62:	680d      	ldr	r5, [r1, #0]
    2b64:	2900      	cmp	r1, #0
    2b66:	f000 80b7 	beq.w	2cd8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    2b6a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    2b6e:	4633      	mov	r3, r6
    2b70:	4652      	mov	r2, sl
    2b72:	4620      	mov	r0, r4
    2b74:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2b76:	2d00      	cmp	r5, #0
    2b78:	d076      	beq.n	2c68 <process_event+0x180>
    2b7a:	682b      	ldr	r3, [r5, #0]
    2b7c:	4629      	mov	r1, r5
    2b7e:	461d      	mov	r5, r3
    2b80:	e7f0      	b.n	2b64 <process_event+0x7c>
    2b82:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2b86:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2b88:	2a01      	cmp	r2, #1
    2b8a:	d81b      	bhi.n	2bc4 <process_event+0xdc>
	list->head = NULL;
    2b8c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2b8e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2b92:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2b94:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2b96:	b289      	uxth	r1, r1
	list->tail = NULL;
    2b98:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2b9c:	d109      	bne.n	2bb2 <process_event+0xca>
    2b9e:	463b      	mov	r3, r7
    2ba0:	e003      	b.n	2baa <process_event+0xc2>
				mgr->refs += 1U;
    2ba2:	8b62      	ldrh	r2, [r4, #26]
    2ba4:	3201      	adds	r2, #1
    2ba6:	8362      	strh	r2, [r4, #26]
	return node->next;
    2ba8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2baa:	2b00      	cmp	r3, #0
    2bac:	d1f9      	bne.n	2ba2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2bae:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2bb2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2bb4:	4620      	mov	r0, r4
    2bb6:	f01e fb88 	bl	212ca <process_recheck>
    2bba:	2800      	cmp	r0, #0
    2bbc:	d07b      	beq.n	2cb6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2bbe:	f041 0120 	orr.w	r1, r1, #32
    2bc2:	e077      	b.n	2cb4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2bc4:	2b04      	cmp	r3, #4
    2bc6:	d10a      	bne.n	2bde <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2bc8:	f021 0107 	bic.w	r1, r1, #7
    2bcc:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2bce:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2bd0:	4620      	mov	r0, r4
    2bd2:	f01e fb7a 	bl	212ca <process_recheck>
    2bd6:	b110      	cbz	r0, 2bde <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2bd8:	f041 0120 	orr.w	r1, r1, #32
    2bdc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2bde:	8b21      	ldrh	r1, [r4, #24]
    2be0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2be4:	45aa      	cmp	sl, r5
    2be6:	d050      	beq.n	2c8a <process_event+0x1a2>
    2be8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    2bea:	46b9      	mov	r9, r7
    2bec:	e7aa      	b.n	2b44 <process_event+0x5c>
			transit = mgr->transitions->start;
    2bee:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2bf0:	f021 0107 	bic.w	r1, r1, #7
    2bf4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    2bf8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    2bfa:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2bfe:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2c00:	d12d      	bne.n	2c5e <process_event+0x176>
		    || (transit != NULL)) {
    2c02:	f1b9 0f00 	cmp.w	r9, #0
    2c06:	d040      	beq.n	2c8a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2c08:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2c0c:	8321      	strh	r1, [r4, #24]
    2c0e:	f388 8811 	msr	BASEPRI, r8
    2c12:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    2c16:	493a      	ldr	r1, [pc, #232]	; (2d00 <process_event+0x218>)
    2c18:	4620      	mov	r0, r4
    2c1a:	47c8      	blx	r9
    2c1c:	e029      	b.n	2c72 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2c1e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    2c22:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2c24:	f041 0104 	orr.w	r1, r1, #4
    2c28:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    2c2a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    2c2c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2c30:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2c32:	d0e6      	beq.n	2c02 <process_event+0x11a>
    2c34:	2700      	movs	r7, #0
		res = 0;
    2c36:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2c38:	f04f 0a04 	mov.w	sl, #4
    2c3c:	e782      	b.n	2b44 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2c3e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    2c42:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2c44:	f041 0105 	orr.w	r1, r1, #5
    2c48:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    2c4a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    2c4c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2c50:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2c52:	d0d6      	beq.n	2c02 <process_event+0x11a>
    2c54:	2700      	movs	r7, #0
		res = 0;
    2c56:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2c58:	f04f 0a05 	mov.w	sl, #5
    2c5c:	e772      	b.n	2b44 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    2c5e:	2700      	movs	r7, #0
		res = 0;
    2c60:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2c62:	f04f 0a06 	mov.w	sl, #6
    2c66:	e76d      	b.n	2b44 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2c68:	462b      	mov	r3, r5
    2c6a:	e787      	b.n	2b7c <process_event+0x94>
			if (transit != NULL) {
    2c6c:	f1b9 0f00 	cmp.w	r9, #0
    2c70:	d1d1      	bne.n	2c16 <process_event+0x12e>
	__asm__ volatile(
    2c72:	f04f 0320 	mov.w	r3, #32
    2c76:	f3ef 8811 	mrs	r8, BASEPRI
    2c7a:	f383 8812 	msr	BASEPRI_MAX, r3
    2c7e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2c82:	8b23      	ldrh	r3, [r4, #24]
    2c84:	f023 0308 	bic.w	r3, r3, #8
    2c88:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2c8a:	8b25      	ldrh	r5, [r4, #24]
    2c8c:	06ea      	lsls	r2, r5, #27
    2c8e:	d52e      	bpl.n	2cee <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2c90:	f025 0310 	bic.w	r3, r5, #16
    2c94:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    2c96:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    2c9a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2c9c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    2c9e:	2e00      	cmp	r6, #0
    2ca0:	f6bf af6f 	bge.w	2b82 <process_event+0x9a>
	list->head = NULL;
    2ca4:	2300      	movs	r3, #0
		*clients = mgr->clients;
    2ca6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    2ca8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2cac:	f021 0107 	bic.w	r1, r1, #7
    2cb0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2cb4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2cb6:	8b21      	ldrh	r1, [r4, #24]
    2cb8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2cbc:	45aa      	cmp	sl, r5
    2cbe:	f04f 0900 	mov.w	r9, #0
    2cc2:	f47f af3f 	bne.w	2b44 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    2cc6:	2f00      	cmp	r7, #0
    2cc8:	d09b      	beq.n	2c02 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2cca:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2cce:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    2cd0:	f388 8811 	msr	BASEPRI, r8
    2cd4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    2cd8:	2f00      	cmp	r7, #0
    2cda:	d0c7      	beq.n	2c6c <process_event+0x184>
	return node->next;
    2cdc:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    2cde:	4639      	mov	r1, r7
    2ce0:	4633      	mov	r3, r6
    2ce2:	4652      	mov	r2, sl
    2ce4:	4620      	mov	r0, r4
    2ce6:	f01e fb1c 	bl	21322 <notify_one>
	list->head = node;
    2cea:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    2cec:	e7f4      	b.n	2cd8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2cee:	06ab      	lsls	r3, r5, #26
    2cf0:	f57f af1a 	bpl.w	2b28 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2cf4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2cf8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    2cfa:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    2cfe:	e6ff      	b.n	2b00 <process_event+0x18>
    2d00:	0002134f 	.word	0x0002134f

00002d04 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    2d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d08:	b09f      	sub	sp, #124	; 0x7c
    2d0a:	4682      	mov	sl, r0
    2d0c:	9103      	str	r1, [sp, #12]
    2d0e:	4616      	mov	r6, r2
    2d10:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2d12:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2d14:	7830      	ldrb	r0, [r6, #0]
    2d16:	b910      	cbnz	r0, 2d1e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2d18:	4628      	mov	r0, r5
    2d1a:	f000 bd8b 	b.w	3834 <z_cbvprintf_impl+0xb30>
			OUTC(*fp++);
    2d1e:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    2d20:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2d22:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    2d24:	d006      	beq.n	2d34 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    2d26:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    2d28:	47d0      	blx	sl
    2d2a:	2800      	cmp	r0, #0
    2d2c:	f2c0 8582 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    2d30:	3501      	adds	r5, #1
		if (bps == NULL) {
    2d32:	e22b      	b.n	318c <z_cbvprintf_impl+0x488>
		} state = {
    2d34:	2218      	movs	r2, #24
    2d36:	2100      	movs	r1, #0
    2d38:	a810      	add	r0, sp, #64	; 0x40
    2d3a:	f020 ff72 	bl	23c22 <memset>
	if (*sp == '%') {
    2d3e:	7873      	ldrb	r3, [r6, #1]
    2d40:	2b25      	cmp	r3, #37	; 0x25
    2d42:	d07d      	beq.n	2e40 <z_cbvprintf_impl+0x13c>
    2d44:	2300      	movs	r3, #0
    2d46:	1c70      	adds	r0, r6, #1
    2d48:	4698      	mov	r8, r3
    2d4a:	469e      	mov	lr, r3
    2d4c:	469c      	mov	ip, r3
    2d4e:	461f      	mov	r7, r3
    2d50:	4601      	mov	r1, r0
		switch (*sp) {
    2d52:	f810 2b01 	ldrb.w	r2, [r0], #1
    2d56:	2a2b      	cmp	r2, #43	; 0x2b
    2d58:	f000 80a1 	beq.w	2e9e <z_cbvprintf_impl+0x19a>
    2d5c:	f200 8098 	bhi.w	2e90 <z_cbvprintf_impl+0x18c>
    2d60:	2a20      	cmp	r2, #32
    2d62:	f000 809f 	beq.w	2ea4 <z_cbvprintf_impl+0x1a0>
    2d66:	2a23      	cmp	r2, #35	; 0x23
    2d68:	f000 809f 	beq.w	2eaa <z_cbvprintf_impl+0x1a6>
    2d6c:	b12b      	cbz	r3, 2d7a <z_cbvprintf_impl+0x76>
    2d6e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d76:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2d7a:	f1b8 0f00 	cmp.w	r8, #0
    2d7e:	d005      	beq.n	2d8c <z_cbvprintf_impl+0x88>
    2d80:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2d84:	f043 0320 	orr.w	r3, r3, #32
    2d88:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2d8c:	f1be 0f00 	cmp.w	lr, #0
    2d90:	d005      	beq.n	2d9e <z_cbvprintf_impl+0x9a>
    2d92:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2d96:	f043 0310 	orr.w	r3, r3, #16
    2d9a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2d9e:	f1bc 0f00 	cmp.w	ip, #0
    2da2:	d005      	beq.n	2db0 <z_cbvprintf_impl+0xac>
    2da4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2da8:	f043 0308 	orr.w	r3, r3, #8
    2dac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2db0:	b12f      	cbz	r7, 2dbe <z_cbvprintf_impl+0xba>
    2db2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2db6:	f043 0304 	orr.w	r3, r3, #4
    2dba:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    2dbe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2dc2:	f003 0044 	and.w	r0, r3, #68	; 0x44
    2dc6:	2844      	cmp	r0, #68	; 0x44
    2dc8:	d103      	bne.n	2dd2 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    2dca:	f36f 1386 	bfc	r3, #6, #1
    2dce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    2dd2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    2dd6:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    2dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2ddc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    2de0:	d17f      	bne.n	2ee2 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
    2de2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2de6:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    2dea:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    2dec:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
    2df0:	781a      	ldrb	r2, [r3, #0]
    2df2:	2a2e      	cmp	r2, #46	; 0x2e
    2df4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2df8:	bf0c      	ite	eq
    2dfa:	2101      	moveq	r1, #1
    2dfc:	2100      	movne	r1, #0
    2dfe:	f361 0241 	bfi	r2, r1, #1, #1
    2e02:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    2e06:	d178      	bne.n	2efa <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
    2e08:	785a      	ldrb	r2, [r3, #1]
    2e0a:	2a2a      	cmp	r2, #42	; 0x2a
    2e0c:	d06e      	beq.n	2eec <z_cbvprintf_impl+0x1e8>
	++sp;
    2e0e:	3301      	adds	r3, #1
	size_t val = 0;
    2e10:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2e12:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2e16:	4619      	mov	r1, r3
    2e18:	f811 0b01 	ldrb.w	r0, [r1], #1
    2e1c:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2e20:	2f09      	cmp	r7, #9
    2e22:	f240 80af 	bls.w	2f84 <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
    2e26:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
    2e2a:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    2e2c:	f3c1 0040 	ubfx	r0, r1, #1, #1
    2e30:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    2e34:	460a      	mov	r2, r1
    2e36:	f360 0241 	bfi	r2, r0, #1, #1
    2e3a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2e3e:	e05c      	b.n	2efa <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
    2e40:	1cb2      	adds	r2, r6, #2
    2e42:	9206      	str	r2, [sp, #24]
    2e44:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    2e48:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2e4c:	07df      	lsls	r7, r3, #31
    2e4e:	f140 8154 	bpl.w	30fa <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
    2e52:	f854 2b04 	ldr.w	r2, [r4], #4
    2e56:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    2e58:	2a00      	cmp	r2, #0
    2e5a:	da08      	bge.n	2e6e <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
    2e5c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2e60:	f042 0204 	orr.w	r2, r2, #4
    2e64:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    2e68:	9a04      	ldr	r2, [sp, #16]
    2e6a:	4252      	negs	r2, r2
		int width = -1;
    2e6c:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    2e6e:	0758      	lsls	r0, r3, #29
    2e70:	f140 814b 	bpl.w	310a <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
    2e74:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    2e78:	2f00      	cmp	r7, #0
    2e7a:	f280 814a 	bge.w	3112 <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
    2e7e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2e82:	f36f 0341 	bfc	r3, #1, #1
    2e86:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    2e8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    2e8e:	e140      	b.n	3112 <z_cbvprintf_impl+0x40e>
		switch (*sp) {
    2e90:	2a2d      	cmp	r2, #45	; 0x2d
    2e92:	d00d      	beq.n	2eb0 <z_cbvprintf_impl+0x1ac>
    2e94:	2a30      	cmp	r2, #48	; 0x30
    2e96:	f47f af69 	bne.w	2d6c <z_cbvprintf_impl+0x68>
    2e9a:	2301      	movs	r3, #1
	} while (loop);
    2e9c:	e758      	b.n	2d50 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    2e9e:	f04f 0c01 	mov.w	ip, #1
    2ea2:	e755      	b.n	2d50 <z_cbvprintf_impl+0x4c>
    2ea4:	f04f 0e01 	mov.w	lr, #1
    2ea8:	e752      	b.n	2d50 <z_cbvprintf_impl+0x4c>
    2eaa:	f04f 0801 	mov.w	r8, #1
    2eae:	e74f      	b.n	2d50 <z_cbvprintf_impl+0x4c>
    2eb0:	2701      	movs	r7, #1
    2eb2:	e74d      	b.n	2d50 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
    2eb4:	fb0e 7202 	mla	r2, lr, r2, r7
    2eb8:	3a30      	subs	r2, #48	; 0x30
    2eba:	4603      	mov	r3, r0
    2ebc:	4618      	mov	r0, r3
    2ebe:	f810 7b01 	ldrb.w	r7, [r0], #1
    2ec2:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2ec6:	f1bc 0f09 	cmp.w	ip, #9
    2eca:	d9f3      	bls.n	2eb4 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
    2ecc:	4299      	cmp	r1, r3
    2ece:	d08f      	beq.n	2df0 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    2ed0:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
    2ed4:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    2ed6:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    2ed8:	f362 0141 	bfi	r1, r2, #1, #1
    2edc:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    2ee0:	e786      	b.n	2df0 <z_cbvprintf_impl+0xec>
    2ee2:	460b      	mov	r3, r1
	size_t val = 0;
    2ee4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2ee6:	f04f 0e0a 	mov.w	lr, #10
    2eea:	e7e7      	b.n	2ebc <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
    2eec:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2ef0:	f042 0204 	orr.w	r2, r2, #4
    2ef4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    2ef8:	3302      	adds	r3, #2
	switch (*sp) {
    2efa:	781a      	ldrb	r2, [r3, #0]
    2efc:	2a6c      	cmp	r2, #108	; 0x6c
    2efe:	d061      	beq.n	2fc4 <z_cbvprintf_impl+0x2c0>
    2f00:	d845      	bhi.n	2f8e <z_cbvprintf_impl+0x28a>
    2f02:	2a68      	cmp	r2, #104	; 0x68
    2f04:	d04b      	beq.n	2f9e <z_cbvprintf_impl+0x29a>
    2f06:	2a6a      	cmp	r2, #106	; 0x6a
    2f08:	d065      	beq.n	2fd6 <z_cbvprintf_impl+0x2d2>
    2f0a:	2a4c      	cmp	r2, #76	; 0x4c
    2f0c:	d06b      	beq.n	2fe6 <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
    2f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
    2f12:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    2f14:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    2f16:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    2f1a:	f200 80ad 	bhi.w	3078 <z_cbvprintf_impl+0x374>
    2f1e:	2a6d      	cmp	r2, #109	; 0x6d
    2f20:	d86e      	bhi.n	3000 <z_cbvprintf_impl+0x2fc>
    2f22:	2a69      	cmp	r2, #105	; 0x69
    2f24:	f200 80a8 	bhi.w	3078 <z_cbvprintf_impl+0x374>
    2f28:	2a57      	cmp	r2, #87	; 0x57
    2f2a:	f200 8088 	bhi.w	303e <z_cbvprintf_impl+0x33a>
    2f2e:	2a41      	cmp	r2, #65	; 0x41
    2f30:	d004      	beq.n	2f3c <z_cbvprintf_impl+0x238>
    2f32:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    2f36:	2b02      	cmp	r3, #2
    2f38:	f200 809e 	bhi.w	3078 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
    2f3c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    2f40:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    2f44:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    2f46:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    2f4a:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    2f4e:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    2f52:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    2f56:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    2f5a:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    2f5e:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    2f62:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    2f64:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    2f68:	b2cb      	uxtb	r3, r1
    2f6a:	f100 80c4 	bmi.w	30f6 <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
    2f6e:	f003 0278 	and.w	r2, r3, #120	; 0x78
    2f72:	2a18      	cmp	r2, #24
    2f74:	f040 80ae 	bne.w	30d4 <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
    2f78:	f36f 03c6 	bfc	r3, #3, #4
    2f7c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    2f80:	2300      	movs	r3, #0
    2f82:	e09d      	b.n	30c0 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
    2f84:	fb0c 0202 	mla	r2, ip, r2, r0
    2f88:	3a30      	subs	r2, #48	; 0x30
    2f8a:	460b      	mov	r3, r1
    2f8c:	e743      	b.n	2e16 <z_cbvprintf_impl+0x112>
	switch (*sp) {
    2f8e:	2a74      	cmp	r2, #116	; 0x74
    2f90:	d025      	beq.n	2fde <z_cbvprintf_impl+0x2da>
    2f92:	2a7a      	cmp	r2, #122	; 0x7a
    2f94:	d1bb      	bne.n	2f0e <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
    2f96:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2f9a:	2106      	movs	r1, #6
    2f9c:	e00c      	b.n	2fb8 <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
    2f9e:	785a      	ldrb	r2, [r3, #1]
    2fa0:	2a68      	cmp	r2, #104	; 0x68
    2fa2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2fa6:	d106      	bne.n	2fb6 <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
    2fa8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2faa:	f361 02c6 	bfi	r2, r1, #3, #4
    2fae:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    2fb2:	3302      	adds	r3, #2
    2fb4:	e7ab      	b.n	2f0e <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
    2fb6:	2102      	movs	r1, #2
    2fb8:	f361 02c6 	bfi	r2, r1, #3, #4
    2fbc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    2fc0:	3301      	adds	r3, #1
    2fc2:	e7a4      	b.n	2f0e <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
    2fc4:	785a      	ldrb	r2, [r3, #1]
    2fc6:	2a6c      	cmp	r2, #108	; 0x6c
    2fc8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2fcc:	d101      	bne.n	2fd2 <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
    2fce:	2104      	movs	r1, #4
    2fd0:	e7eb      	b.n	2faa <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
    2fd2:	2103      	movs	r1, #3
    2fd4:	e7f0      	b.n	2fb8 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
    2fd6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2fda:	2105      	movs	r1, #5
    2fdc:	e7ec      	b.n	2fb8 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
    2fde:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2fe2:	2107      	movs	r1, #7
    2fe4:	e7e8      	b.n	2fb8 <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
    2fe6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    2fea:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2fee:	f022 0202 	bic.w	r2, r2, #2
    2ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2ff6:	f042 0202 	orr.w	r2, r2, #2
    2ffa:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    2ffe:	e7df      	b.n	2fc0 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
    3000:	3a6e      	subs	r2, #110	; 0x6e
    3002:	b2d3      	uxtb	r3, r2
    3004:	2201      	movs	r2, #1
    3006:	409a      	lsls	r2, r3
    3008:	f240 4382 	movw	r3, #1154	; 0x482
    300c:	421a      	tst	r2, r3
    300e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    3012:	d138      	bne.n	3086 <z_cbvprintf_impl+0x382>
    3014:	f012 0f24 	tst.w	r2, #36	; 0x24
    3018:	d160      	bne.n	30dc <z_cbvprintf_impl+0x3d8>
    301a:	07d1      	lsls	r1, r2, #31
    301c:	d52c      	bpl.n	3078 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
    301e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3022:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3026:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    302a:	2103      	movs	r1, #3
    302c:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3030:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    3034:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3038:	eb43 030c 	adc.w	r3, r3, ip
    303c:	e040      	b.n	30c0 <z_cbvprintf_impl+0x3bc>
	switch (conv->specifier) {
    303e:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    3042:	b2c9      	uxtb	r1, r1
    3044:	2001      	movs	r0, #1
    3046:	fa00 f101 	lsl.w	r1, r0, r1
    304a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    304e:	f47f af75 	bne.w	2f3c <z_cbvprintf_impl+0x238>
    3052:	f640 0301 	movw	r3, #2049	; 0x801
    3056:	4219      	tst	r1, r3
    3058:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    305c:	d119      	bne.n	3092 <z_cbvprintf_impl+0x38e>
    305e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    3062:	d009      	beq.n	3078 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
    3064:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    3068:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    306c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3070:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    3072:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3076:	d183      	bne.n	2f80 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
    3078:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    307c:	f043 0301 	orr.w	r3, r3, #1
    3080:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    3084:	e77c      	b.n	2f80 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
    3086:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    308a:	2102      	movs	r1, #2
    308c:	f361 0202 	bfi	r2, r1, #0, #3
    3090:	e7ec      	b.n	306c <z_cbvprintf_impl+0x368>
    3092:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    3096:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    3098:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    309c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    30a0:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    30a2:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    30a6:	bf02      	ittt	eq
    30a8:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    30ac:	f041 0101 	orreq.w	r1, r1, #1
    30b0:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    30b4:	2a63      	cmp	r2, #99	; 0x63
    30b6:	f47f af63 	bne.w	2f80 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    30ba:	3b00      	subs	r3, #0
    30bc:	bf18      	it	ne
    30be:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    30c0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    30c4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    30c8:	430b      	orrs	r3, r1
    30ca:	f363 0241 	bfi	r2, r3, #1, #1
    30ce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    30d2:	e6b9      	b.n	2e48 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
    30d4:	f013 0f38 	tst.w	r3, #56	; 0x38
    30d8:	d1ce      	bne.n	3078 <z_cbvprintf_impl+0x374>
    30da:	e751      	b.n	2f80 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
    30dc:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    30e0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    30e2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    30e6:	f361 0202 	bfi	r2, r1, #0, #3
    30ea:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    30ee:	bf14      	ite	ne
    30f0:	2301      	movne	r3, #1
    30f2:	2300      	moveq	r3, #0
    30f4:	e7e4      	b.n	30c0 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
    30f6:	2301      	movs	r3, #1
    30f8:	e7e2      	b.n	30c0 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
    30fa:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    30fe:	2a00      	cmp	r2, #0
			width = conv->width_value;
    3100:	bfb4      	ite	lt
    3102:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    3104:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    3108:	e6b0      	b.n	2e6c <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
    310a:	0799      	lsls	r1, r3, #30
    310c:	f57f aebd 	bpl.w	2e8a <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
    3110:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    3112:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    3116:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3118:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    311c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    3120:	f003 0207 	and.w	r2, r3, #7
    3124:	2a04      	cmp	r2, #4
    3126:	d107      	bne.n	3138 <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
    3128:	078a      	lsls	r2, r1, #30
    312a:	d405      	bmi.n	3138 <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
    312c:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    3130:	2a00      	cmp	r2, #0
    3132:	bfac      	ite	ge
    3134:	2706      	movge	r7, #6
    3136:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    3138:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    313c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    313e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3142:	d133      	bne.n	31ac <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
    3144:	1ecb      	subs	r3, r1, #3
    3146:	2b04      	cmp	r3, #4
    3148:	d804      	bhi.n	3154 <z_cbvprintf_impl+0x450>
    314a:	e8df f003 	tbb	[pc, r3]
    314e:	4621      	.short	0x4621
    3150:	2146      	.short	0x2146
    3152:	21          	.byte	0x21
    3153:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    3154:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    3156:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    3158:	ea4f 72e3 	mov.w	r2, r3, asr #31
    315c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    3160:	d11c      	bne.n	319c <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
    3162:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    3166:	17da      	asrs	r2, r3, #31
    3168:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    316c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    316e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    3172:	9307      	str	r3, [sp, #28]
    3174:	079b      	lsls	r3, r3, #30
    3176:	d050      	beq.n	321a <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
    3178:	9b06      	ldr	r3, [sp, #24]
    317a:	9903      	ldr	r1, [sp, #12]
    317c:	4632      	mov	r2, r6
    317e:	4650      	mov	r0, sl
    3180:	f01e fa25 	bl	215ce <outs>
    3184:	2800      	cmp	r0, #0
    3186:	f2c0 8355 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    318a:	4405      	add	r5, r0
			continue;
    318c:	9e06      	ldr	r6, [sp, #24]
    318e:	e5c1      	b.n	2d14 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3190:	f854 3b04 	ldr.w	r3, [r4], #4
    3194:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    3196:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    319a:	e7e8      	b.n	316e <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
    319c:	2902      	cmp	r1, #2
    319e:	d1e5      	bne.n	316c <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
    31a0:	b21a      	sxth	r2, r3
    31a2:	f343 33c0 	sbfx	r3, r3, #15, #1
    31a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    31aa:	e7df      	b.n	316c <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
    31ac:	2b02      	cmp	r3, #2
    31ae:	d124      	bne.n	31fa <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
    31b0:	1ecb      	subs	r3, r1, #3
    31b2:	2b04      	cmp	r3, #4
    31b4:	d804      	bhi.n	31c0 <z_cbvprintf_impl+0x4bc>
    31b6:	e8df f003 	tbb	[pc, r3]
    31ba:	1018      	.short	0x1018
    31bc:	1810      	.short	0x1810
    31be:	18          	.byte	0x18
    31bf:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    31c0:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    31c2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    31c6:	f04f 0200 	mov.w	r2, #0
    31ca:	d014      	beq.n	31f6 <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
    31cc:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    31ce:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    31d2:	d1cc      	bne.n	316e <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
    31d4:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    31d6:	9310      	str	r3, [sp, #64]	; 0x40
    31d8:	e7c9      	b.n	316e <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
    31da:	3407      	adds	r4, #7
    31dc:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    31e0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    31e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    31e8:	e7c1      	b.n	316e <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
    31ea:	f854 3b04 	ldr.w	r3, [r4], #4
    31ee:	9310      	str	r3, [sp, #64]	; 0x40
    31f0:	2300      	movs	r3, #0
    31f2:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    31f4:	e7bb      	b.n	316e <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
    31f6:	b2db      	uxtb	r3, r3
    31f8:	e7cd      	b.n	3196 <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
    31fa:	2b04      	cmp	r3, #4
    31fc:	d108      	bne.n	3210 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
    31fe:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    3200:	f024 0407 	bic.w	r4, r4, #7
    3204:	e9d4 2300 	ldrd	r2, r3, [r4]
    3208:	3408      	adds	r4, #8
    320a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    320e:	e7ae      	b.n	316e <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3210:	2b03      	cmp	r3, #3
    3212:	d1ac      	bne.n	316e <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
    3214:	f854 3b04 	ldr.w	r3, [r4], #4
    3218:	e7dd      	b.n	31d6 <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
    321a:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    321e:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    3222:	d8b3      	bhi.n	318c <z_cbvprintf_impl+0x488>
    3224:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    3228:	d849      	bhi.n	32be <z_cbvprintf_impl+0x5ba>
    322a:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    322e:	f000 8091 	beq.w	3354 <z_cbvprintf_impl+0x650>
    3232:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    3236:	d9a9      	bls.n	318c <z_cbvprintf_impl+0x488>
    3238:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    323c:	d003      	beq.n	3246 <z_cbvprintf_impl+0x542>
    323e:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    3242:	2a02      	cmp	r2, #2
    3244:	d8a2      	bhi.n	318c <z_cbvprintf_impl+0x488>
	} u = {
    3246:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    324a:	2a00      	cmp	r2, #0
    324c:	f2c0 8136 	blt.w	34bc <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
    3250:	9b07      	ldr	r3, [sp, #28]
    3252:	0718      	lsls	r0, r3, #28
    3254:	f100 8135 	bmi.w	34c2 <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
    3258:	f3c3 1900 	ubfx	r9, r3, #4, #1
    325c:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    3260:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    3264:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    3268:	2800      	cmp	r0, #0
    326a:	f040 812d 	bne.w	34c8 <z_cbvprintf_impl+0x7c4>
    326e:	ea51 0602 	orrs.w	r6, r1, r2
    3272:	bf14      	ite	ne
    3274:	2601      	movne	r6, #1
    3276:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    3278:	02d2      	lsls	r2, r2, #11
    327a:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    327e:	02c9      	lsls	r1, r1, #11
		c = 'f';
    3280:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    3284:	ea40 0e01 	orr.w	lr, r0, r1
    3288:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    328c:	bf08      	it	eq
    328e:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    3292:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    3296:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    329a:	f000 8199 	beq.w	35d0 <z_cbvprintf_impl+0x8cc>
		if (is_subnormal) {
    329e:	2e00      	cmp	r6, #0
    32a0:	f040 8144 	bne.w	352c <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
    32a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    32a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    32aa:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    32ae:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    32b0:	2000      	movs	r0, #0
    32b2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    32b6:	4606      	mov	r6, r0
		fract *= 5U;
    32b8:	f04f 0c05 	mov.w	ip, #5
    32bc:	e150      	b.n	3560 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
    32be:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    32c2:	2a20      	cmp	r2, #32
    32c4:	f63f af62 	bhi.w	318c <z_cbvprintf_impl+0x488>
    32c8:	a001      	add	r0, pc, #4	; (adr r0, 32d0 <z_cbvprintf_impl+0x5cc>)
    32ca:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    32ce:	bf00      	nop
    32d0:	0000345b 	.word	0x0000345b
    32d4:	0000318d 	.word	0x0000318d
    32d8:	0000318d 	.word	0x0000318d
    32dc:	0000318d 	.word	0x0000318d
    32e0:	0000318d 	.word	0x0000318d
    32e4:	0000318d 	.word	0x0000318d
    32e8:	0000318d 	.word	0x0000318d
    32ec:	0000318d 	.word	0x0000318d
    32f0:	0000318d 	.word	0x0000318d
    32f4:	00003247 	.word	0x00003247
    32f8:	0000318d 	.word	0x0000318d
    32fc:	000033df 	.word	0x000033df
    3300:	000033f3 	.word	0x000033f3
    3304:	00003247 	.word	0x00003247
    3308:	00003247 	.word	0x00003247
    330c:	00003247 	.word	0x00003247
    3310:	0000318d 	.word	0x0000318d
    3314:	000033f3 	.word	0x000033f3
    3318:	0000318d 	.word	0x0000318d
    331c:	0000318d 	.word	0x0000318d
    3320:	0000318d 	.word	0x0000318d
    3324:	0000318d 	.word	0x0000318d
    3328:	00003495 	.word	0x00003495
    332c:	0000345b 	.word	0x0000345b
    3330:	00003461 	.word	0x00003461
    3334:	0000318d 	.word	0x0000318d
    3338:	0000318d 	.word	0x0000318d
    333c:	0000335b 	.word	0x0000335b
    3340:	0000318d 	.word	0x0000318d
    3344:	0000345b 	.word	0x0000345b
    3348:	0000318d 	.word	0x0000318d
    334c:	0000318d 	.word	0x0000318d
    3350:	0000345b 	.word	0x0000345b
			OUTC('%');
    3354:	9903      	ldr	r1, [sp, #12]
    3356:	4658      	mov	r0, fp
    3358:	e4e6      	b.n	2d28 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    335a:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    335c:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    335e:	db3a      	blt.n	33d6 <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
    3360:	4639      	mov	r1, r7
    3362:	4630      	mov	r0, r6
    3364:	f020 fc02 	bl	23b6c <strnlen>
			bpe = bps + len;
    3368:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    336a:	2e00      	cmp	r6, #0
    336c:	f43f af0e 	beq.w	318c <z_cbvprintf_impl+0x488>
		char sign = 0;
    3370:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    3374:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    3378:	f013 0210 	ands.w	r2, r3, #16
    337c:	9205      	str	r2, [sp, #20]
    337e:	f000 824e 	beq.w	381e <z_cbvprintf_impl+0xb1a>
			nj_len += 2U;
    3382:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    3384:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    3388:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    338c:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    338e:	bf18      	it	ne
    3390:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    3392:	f8cd 801c 	str.w	r8, [sp, #28]
    3396:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    3398:	bf18      	it	ne
    339a:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    339c:	9b04      	ldr	r3, [sp, #16]
    339e:	2b00      	cmp	r3, #0
    33a0:	f340 8258 	ble.w	3854 <z_cbvprintf_impl+0xb50>
			if (!conv->flag_dash) {
    33a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    33a8:	1a1b      	subs	r3, r3, r0
    33aa:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    33ac:	0753      	lsls	r3, r2, #29
    33ae:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    33b2:	f100 824f 	bmi.w	3854 <z_cbvprintf_impl+0xb50>
				if (conv->flag_zero) {
    33b6:	0650      	lsls	r0, r2, #25
    33b8:	f140 823f 	bpl.w	383a <z_cbvprintf_impl+0xb36>
					if (sign != 0) {
    33bc:	f1b9 0f00 	cmp.w	r9, #0
    33c0:	d007      	beq.n	33d2 <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
    33c2:	9903      	ldr	r1, [sp, #12]
    33c4:	4648      	mov	r0, r9
    33c6:	47d0      	blx	sl
    33c8:	2800      	cmp	r0, #0
    33ca:	f2c0 8233 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    33ce:	3501      	adds	r5, #1
						sign = 0;
    33d0:	46d9      	mov	r9, fp
					pad = '0';
    33d2:	2230      	movs	r2, #48	; 0x30
    33d4:	e232      	b.n	383c <z_cbvprintf_impl+0xb38>
				len = strlen(bps);
    33d6:	4630      	mov	r0, r6
    33d8:	f020 fbc1 	bl	23b5e <strlen>
    33dc:	e7c4      	b.n	3368 <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    33de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    33e0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    33e4:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    33e8:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    33ec:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    33ee:	2001      	movs	r0, #1
    33f0:	e7c0      	b.n	3374 <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
    33f2:	9b07      	ldr	r3, [sp, #28]
    33f4:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    33f6:	bf58      	it	pl
    33f8:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    33fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    3400:	bf54      	ite	pl
    3402:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    3406:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    340a:	2b00      	cmp	r3, #0
    340c:	da06      	bge.n	341c <z_cbvprintf_impl+0x718>
				value->uint = (uint_value_type)-sint;
    340e:	4252      	negs	r2, r2
    3410:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3414:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    3418:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    341c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    3420:	9300      	str	r3, [sp, #0]
    3422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    3426:	ab17      	add	r3, sp, #92	; 0x5c
    3428:	aa12      	add	r2, sp, #72	; 0x48
    342a:	f01e f88a 	bl	21542 <encode_uint>
    342e:	4606      	mov	r6, r0
			if (precision >= 0) {
    3430:	2f00      	cmp	r7, #0
    3432:	db0c      	blt.n	344e <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
    3434:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    3438:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    343c:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    343e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3442:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    3444:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    3448:	d901      	bls.n	344e <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
    344a:	1afb      	subs	r3, r7, r3
    344c:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    344e:	2e00      	cmp	r6, #0
    3450:	f43f ae9c 	beq.w	318c <z_cbvprintf_impl+0x488>
    3454:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    3458:	e056      	b.n	3508 <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
    345a:	f04f 0900 	mov.w	r9, #0
    345e:	e7dd      	b.n	341c <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
    3460:	9810      	ldr	r0, [sp, #64]	; 0x40
    3462:	2800      	cmp	r0, #0
    3464:	f000 81d6 	beq.w	3814 <z_cbvprintf_impl+0xb10>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3468:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    346c:	9300      	str	r3, [sp, #0]
    346e:	aa12      	add	r2, sp, #72	; 0x48
    3470:	ab17      	add	r3, sp, #92	; 0x5c
    3472:	2100      	movs	r1, #0
    3474:	f01e f865 	bl	21542 <encode_uint>
				conv->altform_0c = true;
    3478:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    347c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3480:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3484:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3488:	4606      	mov	r6, r0
				conv->altform_0c = true;
    348a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    348e:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    3492:	e7cd      	b.n	3430 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
    3494:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    3496:	2907      	cmp	r1, #7
    3498:	f63f ae78 	bhi.w	318c <z_cbvprintf_impl+0x488>
    349c:	e8df f001 	tbb	[pc, r1]
    34a0:	0c06040c 	.word	0x0c06040c
    34a4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    34a8:	701d      	strb	r5, [r3, #0]
		break;
    34aa:	e66f      	b.n	318c <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
    34ac:	801d      	strh	r5, [r3, #0]
		break;
    34ae:	e66d      	b.n	318c <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
    34b0:	17ea      	asrs	r2, r5, #31
    34b2:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    34b6:	e669      	b.n	318c <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    34b8:	601d      	str	r5, [r3, #0]
		break;
    34ba:	e667      	b.n	318c <z_cbvprintf_impl+0x488>
		*sign = '-';
    34bc:	f04f 092d 	mov.w	r9, #45	; 0x2d
    34c0:	e6ce      	b.n	3260 <z_cbvprintf_impl+0x55c>
		*sign = '+';
    34c2:	f04f 092b 	mov.w	r9, #43	; 0x2b
    34c6:	e6cb      	b.n	3260 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    34c8:	f240 76ff 	movw	r6, #2047	; 0x7ff
    34cc:	42b0      	cmp	r0, r6
    34ce:	d12a      	bne.n	3526 <z_cbvprintf_impl+0x822>
		if (fract == 0) {
    34d0:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    34d2:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
    34d6:	d11e      	bne.n	3516 <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c)) {
    34d8:	2b1a      	cmp	r3, #26
    34da:	bf35      	itete	cc
    34dc:	2349      	movcc	r3, #73	; 0x49
    34de:	2369      	movcs	r3, #105	; 0x69
    34e0:	214e      	movcc	r1, #78	; 0x4e
    34e2:	216e      	movcs	r1, #110	; 0x6e
    34e4:	bf34      	ite	cc
    34e6:	2246      	movcc	r2, #70	; 0x46
    34e8:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
    34ea:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    34ee:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    34f2:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    34f6:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    34fa:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    34fe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    3502:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    3506:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    3508:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    350a:	f1b9 0f00 	cmp.w	r9, #0
    350e:	f43f af31 	beq.w	3374 <z_cbvprintf_impl+0x670>
			nj_len += 1U;
    3512:	3001      	adds	r0, #1
    3514:	e72e      	b.n	3374 <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c)) {
    3516:	2b19      	cmp	r3, #25
    3518:	bf8b      	itete	hi
    351a:	236e      	movhi	r3, #110	; 0x6e
    351c:	234e      	movls	r3, #78	; 0x4e
    351e:	2161      	movhi	r1, #97	; 0x61
    3520:	2141      	movls	r1, #65	; 0x41
    3522:	461a      	mov	r2, r3
    3524:	e7e1      	b.n	34ea <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    3526:	2600      	movs	r6, #0
    3528:	e6a6      	b.n	3278 <z_cbvprintf_impl+0x574>
				expo--;
    352a:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    352c:	1849      	adds	r1, r1, r1
    352e:	4152      	adcs	r2, r2
    3530:	2a00      	cmp	r2, #0
    3532:	dafa      	bge.n	352a <z_cbvprintf_impl+0x826>
    3534:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    3538:	e6b4      	b.n	32a4 <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
    353a:	0849      	lsrs	r1, r1, #1
    353c:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    3540:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    3542:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    3546:	4640      	mov	r0, r8
			expo++;
    3548:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    354c:	d2f5      	bcs.n	353a <z_cbvprintf_impl+0x836>
		fract *= 5U;
    354e:	fb0c fe02 	mul.w	lr, ip, r2
    3552:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    3556:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    355a:	4472      	add	r2, lr
		decexp--;
    355c:	3e01      	subs	r6, #1
    355e:	2001      	movs	r0, #1
	while (expo < -2) {
    3560:	f118 0f02 	cmn.w	r8, #2
    3564:	dbe9      	blt.n	353a <z_cbvprintf_impl+0x836>
    3566:	b108      	cbz	r0, 356c <z_cbvprintf_impl+0x868>
    3568:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    356c:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    3570:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    3574:	dc2f      	bgt.n	35d6 <z_cbvprintf_impl+0x8d2>
	fract >>= (4 - expo);
    3576:	f1c8 0004 	rsb	r0, r8, #4
    357a:	f108 081c 	add.w	r8, r8, #28
    357e:	f1a0 0c20 	sub.w	ip, r0, #32
    3582:	40c2      	lsrs	r2, r0
    3584:	fa21 f300 	lsr.w	r3, r1, r0
    3588:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    358c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    3590:	ea42 0208 	orr.w	r2, r2, r8
    3594:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    3598:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    359a:	ea42 020c 	orr.w	r2, r2, ip
    359e:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    35a0:	d13a      	bne.n	3618 <z_cbvprintf_impl+0x914>
		if (decexp < (-4 + 1) || decexp > precision) {
    35a2:	1cf3      	adds	r3, r6, #3
    35a4:	db01      	blt.n	35aa <z_cbvprintf_impl+0x8a6>
    35a6:	42b7      	cmp	r7, r6
    35a8:	da2b      	bge.n	3602 <z_cbvprintf_impl+0x8fe>
			c += 'e' - 'g';  /* e or E */
    35aa:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    35ae:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    35b0:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    35b4:	dd7f      	ble.n	36b6 <z_cbvprintf_impl+0x9b2>
		if (!conv->flag_hash && (precision > 0)) {
    35b6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    35ba:	0680      	lsls	r0, r0, #26
				precision--;
    35bc:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    35c0:	d479      	bmi.n	36b6 <z_cbvprintf_impl+0x9b2>
    35c2:	1e3b      	subs	r3, r7, #0
    35c4:	bf18      	it	ne
    35c6:	2301      	movne	r3, #1
	bool prune_zero = false;
    35c8:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    35ca:	f107 0801 	add.w	r8, r7, #1
    35ce:	e02d      	b.n	362c <z_cbvprintf_impl+0x928>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    35d0:	f04f 0800 	mov.w	r8, #0
    35d4:	e66c      	b.n	32b0 <z_cbvprintf_impl+0x5ac>
		fract += 2;
    35d6:	3202      	adds	r2, #2
    35d8:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    35dc:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    35de:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    35e2:	f01d ff7f 	bl	214e4 <_ldiv5>
		expo--;
    35e6:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    35ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    35ee:	3601      	adds	r6, #1
			fract <<= 1;
    35f0:	1892      	adds	r2, r2, r2
    35f2:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    35f4:	2900      	cmp	r1, #0
			expo--;
    35f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    35fa:	daf9      	bge.n	35f0 <z_cbvprintf_impl+0x8ec>
    35fc:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    3600:	e7b4      	b.n	356c <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
    3602:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    3606:	0699      	lsls	r1, r3, #26
			precision -= decexp;
    3608:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    360c:	d451      	bmi.n	36b2 <z_cbvprintf_impl+0x9ae>
    360e:	1e3b      	subs	r3, r7, #0
    3610:	bf18      	it	ne
    3612:	2301      	movne	r3, #1
	bool prune_zero = false;
    3614:	9305      	str	r3, [sp, #20]
    3616:	e004      	b.n	3622 <z_cbvprintf_impl+0x91e>
    3618:	2300      	movs	r3, #0
	if (c == 'f') {
    361a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    361e:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    3620:	d1d3      	bne.n	35ca <z_cbvprintf_impl+0x8c6>
		if (decimals < 0) {
    3622:	eb17 0806 	adds.w	r8, r7, r6
    3626:	f04f 0b66 	mov.w	fp, #102	; 0x66
    362a:	d446      	bmi.n	36ba <z_cbvprintf_impl+0x9b6>
	if (decimals > 16) {
    362c:	f1b8 0f10 	cmp.w	r8, #16
    3630:	bfa8      	it	ge
    3632:	f04f 0810 	movge.w	r8, #16
    3636:	2010      	movs	r0, #16
    3638:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
    363a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    363e:	2000      	movs	r0, #0
    3640:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    3644:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    3648:	f1b8 0f00 	cmp.w	r8, #0
    364c:	d138      	bne.n	36c0 <z_cbvprintf_impl+0x9bc>
	fract += round;
    364e:	9908      	ldr	r1, [sp, #32]
    3650:	1812      	adds	r2, r2, r0
    3652:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    3656:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    365a:	d23f      	bcs.n	36dc <z_cbvprintf_impl+0x9d8>
	fract += round;
    365c:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    3660:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    3662:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    3666:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    366a:	f040 80b2 	bne.w	37d2 <z_cbvprintf_impl+0xace>
		if (decexp > 0) {
    366e:	2e00      	cmp	r6, #0
    3670:	dc3f      	bgt.n	36f2 <z_cbvprintf_impl+0x9ee>
			*buf++ = '0';
    3672:	2130      	movs	r1, #48	; 0x30
    3674:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    3678:	2a00      	cmp	r2, #0
    367a:	d163      	bne.n	3744 <z_cbvprintf_impl+0xa40>
    367c:	2f00      	cmp	r7, #0
    367e:	f340 81a8 	ble.w	39d2 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    3682:	222e      	movs	r2, #46	; 0x2e
    3684:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    3688:	b186      	cbz	r6, 36ac <z_cbvprintf_impl+0x9a8>
			conv->pad0_value = -decexp;
    368a:	4272      	negs	r2, r6
    368c:	42ba      	cmp	r2, r7
    368e:	bfa8      	it	ge
    3690:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    3692:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    3696:	9213      	str	r2, [sp, #76]	; 0x4c
    3698:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    369a:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    369e:	bfd4      	ite	le
    36a0:	2200      	movle	r2, #0
    36a2:	2201      	movgt	r2, #1
    36a4:	f362 1145 	bfi	r1, r2, #5, #1
    36a8:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    36ac:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    36b0:	e037      	b.n	3722 <z_cbvprintf_impl+0xa1e>
	bool prune_zero = false;
    36b2:	2300      	movs	r3, #0
    36b4:	e7ae      	b.n	3614 <z_cbvprintf_impl+0x910>
    36b6:	2300      	movs	r3, #0
    36b8:	e786      	b.n	35c8 <z_cbvprintf_impl+0x8c4>
			decimals = 0;
    36ba:	f04f 0800 	mov.w	r8, #0
    36be:	e7ba      	b.n	3636 <z_cbvprintf_impl+0x932>
	*v >>= 1;
    36c0:	0840      	lsrs	r0, r0, #1
    36c2:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    36c6:	085b      	lsrs	r3, r3, #1
    36c8:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    36cc:	a80e      	add	r0, sp, #56	; 0x38
    36ce:	9209      	str	r2, [sp, #36]	; 0x24
    36d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    36d4:	f01d ff06 	bl	214e4 <_ldiv5>
    36d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    36da:	e7b3      	b.n	3644 <z_cbvprintf_impl+0x940>
	*v >>= 1;
    36dc:	0852      	lsrs	r2, r2, #1
    36de:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    36e2:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    36e4:	0849      	lsrs	r1, r1, #1
    36e6:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    36ea:	3601      	adds	r6, #1
	_ldiv5(v);
    36ec:	f01d fefa 	bl	214e4 <_ldiv5>
		decexp++;
    36f0:	e7b6      	b.n	3660 <z_cbvprintf_impl+0x95c>
	char *buf = bps;
    36f2:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    36f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    36f8:	2900      	cmp	r1, #0
    36fa:	dd09      	ble.n	3710 <z_cbvprintf_impl+0xa0c>
				*buf++ = _get_digit(&fract, &digit_count);
    36fc:	a90b      	add	r1, sp, #44	; 0x2c
    36fe:	a80c      	add	r0, sp, #48	; 0x30
    3700:	9207      	str	r2, [sp, #28]
    3702:	f01d ff07 	bl	21514 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    3706:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    3708:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    370c:	9a07      	ldr	r2, [sp, #28]
    370e:	d1f2      	bne.n	36f6 <z_cbvprintf_impl+0x9f2>
			conv->pad0_value = decexp;
    3710:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    3712:	b99a      	cbnz	r2, 373c <z_cbvprintf_impl+0xa38>
    3714:	2f00      	cmp	r7, #0
    3716:	f340 815a 	ble.w	39ce <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    371a:	212e      	movs	r1, #46	; 0x2e
    371c:	f808 1b01 	strb.w	r1, [r8], #1
    3720:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    3722:	2f00      	cmp	r7, #0
    3724:	dd17      	ble.n	3756 <z_cbvprintf_impl+0xa52>
    3726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3728:	2a00      	cmp	r2, #0
    372a:	dd14      	ble.n	3756 <z_cbvprintf_impl+0xa52>
		*buf++ = _get_digit(&fract, &digit_count);
    372c:	a90b      	add	r1, sp, #44	; 0x2c
    372e:	a80c      	add	r0, sp, #48	; 0x30
    3730:	f01d fef0 	bl	21514 <_get_digit>
		precision--;
    3734:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    3736:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    373a:	e7f2      	b.n	3722 <z_cbvprintf_impl+0xa1e>
			*buf++ = '.';
    373c:	222e      	movs	r2, #46	; 0x2e
    373e:	f808 2b01 	strb.w	r2, [r8], #1
    3742:	e7ed      	b.n	3720 <z_cbvprintf_impl+0xa1c>
    3744:	222e      	movs	r2, #46	; 0x2e
    3746:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    374a:	2e00      	cmp	r6, #0
    374c:	d0ae      	beq.n	36ac <z_cbvprintf_impl+0x9a8>
    374e:	2f00      	cmp	r7, #0
    3750:	dc9b      	bgt.n	368a <z_cbvprintf_impl+0x986>
			*buf++ = '.';
    3752:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    3756:	9b05      	ldr	r3, [sp, #20]
    3758:	2b00      	cmp	r3, #0
    375a:	d14e      	bne.n	37fa <z_cbvprintf_impl+0xaf6>
	conv->pad0_pre_exp = precision;
    375c:	9714      	str	r7, [sp, #80]	; 0x50
    375e:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    3760:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    3764:	2a45      	cmp	r2, #69	; 0x45
    3766:	d123      	bne.n	37b0 <z_cbvprintf_impl+0xaac>
		if (decexp < 0) {
    3768:	2e00      	cmp	r6, #0
			decexp = -decexp;
    376a:	bfba      	itte	lt
    376c:	4276      	neglt	r6, r6
			*buf++ = '-';
    376e:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    3770:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    3772:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    3774:	bfc8      	it	gt
    3776:	2164      	movgt	r1, #100	; 0x64
    3778:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    377a:	bfd1      	iteee	le
    377c:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    377e:	fbb6 f3f1 	udivgt	r3, r6, r1
    3782:	1cfa      	addgt	r2, r7, #3
    3784:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    3788:	bfc8      	it	gt
    378a:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    378e:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    3792:	bfc8      	it	gt
    3794:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    3796:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    379a:	fbb6 f3f1 	udiv	r3, r6, r1
    379e:	4617      	mov	r7, r2
    37a0:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    37a4:	fb01 6313 	mls	r3, r1, r3, r6
    37a8:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    37aa:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    37ae:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    37b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    37b2:	2b00      	cmp	r3, #0
    37b4:	dc2c      	bgt.n	3810 <z_cbvprintf_impl+0xb0c>
    37b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    37b8:	2b00      	cmp	r3, #0
    37ba:	bfd4      	ite	le
    37bc:	2300      	movle	r3, #0
    37be:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    37c0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    37c4:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    37c8:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    37ca:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    37ce:	703b      	strb	r3, [r7, #0]
	return bps;
    37d0:	e699      	b.n	3506 <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
    37d2:	a90b      	add	r1, sp, #44	; 0x2c
    37d4:	a80c      	add	r0, sp, #48	; 0x30
    37d6:	9207      	str	r2, [sp, #28]
    37d8:	f01d fe9c 	bl	21514 <_get_digit>
		if (*buf++ != '0') {
    37dc:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    37de:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    37e2:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    37e4:	bf18      	it	ne
    37e6:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    37ea:	b912      	cbnz	r2, 37f2 <z_cbvprintf_impl+0xaee>
    37ec:	2f00      	cmp	r7, #0
    37ee:	f340 80f0 	ble.w	39d2 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    37f2:	222e      	movs	r2, #46	; 0x2e
    37f4:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    37f8:	e758      	b.n	36ac <z_cbvprintf_impl+0x9a8>
		while (*--buf == '0') {
    37fa:	4647      	mov	r7, r8
    37fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3800:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    3804:	2a30      	cmp	r2, #48	; 0x30
    3806:	d0f8      	beq.n	37fa <z_cbvprintf_impl+0xaf6>
    3808:	2a2e      	cmp	r2, #46	; 0x2e
    380a:	bf08      	it	eq
    380c:	4647      	moveq	r7, r8
    380e:	e7a7      	b.n	3760 <z_cbvprintf_impl+0xa5c>
		|| (conv->pad0_pre_exp > 0);
    3810:	2301      	movs	r3, #1
    3812:	e7d5      	b.n	37c0 <z_cbvprintf_impl+0xabc>
			bpe = bps + 5;
    3814:	4f70      	ldr	r7, [pc, #448]	; (39d8 <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
    3816:	4681      	mov	r9, r0
			bps = "(nil)";
    3818:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    381a:	2005      	movs	r0, #5
    381c:	e5aa      	b.n	3374 <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
    381e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    3820:	bf48      	it	mi
    3822:	3001      	addmi	r0, #1
    3824:	e5ae      	b.n	3384 <z_cbvprintf_impl+0x680>
					OUTC(pad);
    3826:	4610      	mov	r0, r2
    3828:	9209      	str	r2, [sp, #36]	; 0x24
    382a:	9903      	ldr	r1, [sp, #12]
    382c:	47d0      	blx	sl
    382e:	2800      	cmp	r0, #0
    3830:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3832:	da05      	bge.n	3840 <z_cbvprintf_impl+0xb3c>
#undef OUTS
#undef OUTC
}
    3834:	b01f      	add	sp, #124	; 0x7c
    3836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    383a:	2220      	movs	r2, #32
					pad = '0';
    383c:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    3840:	4659      	mov	r1, fp
    3842:	2900      	cmp	r1, #0
    3844:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3848:	dced      	bgt.n	3826 <z_cbvprintf_impl+0xb22>
    384a:	9b04      	ldr	r3, [sp, #16]
    384c:	f8cd b010 	str.w	fp, [sp, #16]
    3850:	442b      	add	r3, r5
    3852:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    3854:	f1b9 0f00 	cmp.w	r9, #0
    3858:	d005      	beq.n	3866 <z_cbvprintf_impl+0xb62>
			OUTC(sign);
    385a:	9903      	ldr	r1, [sp, #12]
    385c:	4648      	mov	r0, r9
    385e:	47d0      	blx	sl
    3860:	2800      	cmp	r0, #0
    3862:	dbe7      	blt.n	3834 <z_cbvprintf_impl+0xb30>
    3864:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    3866:	9b08      	ldr	r3, [sp, #32]
    3868:	2b00      	cmp	r3, #0
    386a:	d075      	beq.n	3958 <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
    386c:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    3870:	2b00      	cmp	r3, #0
    3872:	db28      	blt.n	38c6 <z_cbvprintf_impl+0xbc2>
    3874:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
    3876:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    387a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    387e:	2b09      	cmp	r3, #9
    3880:	46d9      	mov	r9, fp
    3882:	f10b 0b01 	add.w	fp, fp, #1
    3886:	d93f      	bls.n	3908 <z_cbvprintf_impl+0xc04>
				if (!conv->pad_postdp) {
    3888:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    388c:	1bae      	subs	r6, r5, r6
    388e:	0699      	lsls	r1, r3, #26
    3890:	444e      	add	r6, r9
    3892:	d407      	bmi.n	38a4 <z_cbvprintf_impl+0xba0>
					while (pad_len-- > 0) {
    3894:	4642      	mov	r2, r8
    3896:	2a00      	cmp	r2, #0
    3898:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    389c:	dc39      	bgt.n	3912 <z_cbvprintf_impl+0xc0e>
    389e:	9b07      	ldr	r3, [sp, #28]
    38a0:	4433      	add	r3, r6
    38a2:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    38a4:	f899 0000 	ldrb.w	r0, [r9]
    38a8:	282e      	cmp	r0, #46	; 0x2e
    38aa:	d10a      	bne.n	38c2 <z_cbvprintf_impl+0xbbe>
					OUTC(*cp++);
    38ac:	9903      	ldr	r1, [sp, #12]
    38ae:	47d0      	blx	sl
						OUTC('0');
    38b0:	2800      	cmp	r0, #0
    38b2:	dbbf      	blt.n	3834 <z_cbvprintf_impl+0xb30>
					while (pad_len-- > 0) {
    38b4:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    38b8:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    38bc:	dc2f      	bgt.n	391e <z_cbvprintf_impl+0xc1a>
					OUTC(*cp++);
    38be:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    38c2:	464d      	mov	r5, r9
    38c4:	e035      	b.n	3932 <z_cbvprintf_impl+0xc2e>
    38c6:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    38c8:	f899 0000 	ldrb.w	r0, [r9]
    38cc:	2870      	cmp	r0, #112	; 0x70
    38ce:	46c8      	mov	r8, r9
    38d0:	f109 0901 	add.w	r9, r9, #1
    38d4:	d113      	bne.n	38fe <z_cbvprintf_impl+0xbfa>
    38d6:	1bae      	subs	r6, r5, r6
    38d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    38da:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    38dc:	4435      	add	r5, r6
    38de:	1bab      	subs	r3, r5, r6
    38e0:	2b00      	cmp	r3, #0
    38e2:	dc31      	bgt.n	3948 <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
    38e4:	9903      	ldr	r1, [sp, #12]
    38e6:	463b      	mov	r3, r7
    38e8:	4642      	mov	r2, r8
    38ea:	4650      	mov	r0, sl
    38ec:	f01d fe6f 	bl	215ce <outs>
    38f0:	2800      	cmp	r0, #0
    38f2:	db9f      	blt.n	3834 <z_cbvprintf_impl+0xb30>
    38f4:	4430      	add	r0, r6
    38f6:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    38f8:	4605      	mov	r5, r0
    38fa:	4406      	add	r6, r0
    38fc:	e062      	b.n	39c4 <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
    38fe:	9903      	ldr	r1, [sp, #12]
    3900:	47d0      	blx	sl
    3902:	2800      	cmp	r0, #0
    3904:	dae0      	bge.n	38c8 <z_cbvprintf_impl+0xbc4>
    3906:	e795      	b.n	3834 <z_cbvprintf_impl+0xb30>
					OUTC(*cp++);
    3908:	9903      	ldr	r1, [sp, #12]
    390a:	47d0      	blx	sl
    390c:	2800      	cmp	r0, #0
    390e:	dab2      	bge.n	3876 <z_cbvprintf_impl+0xb72>
    3910:	e790      	b.n	3834 <z_cbvprintf_impl+0xb30>
						OUTC('0');
    3912:	9903      	ldr	r1, [sp, #12]
    3914:	2030      	movs	r0, #48	; 0x30
    3916:	47d0      	blx	sl
    3918:	2800      	cmp	r0, #0
    391a:	dabb      	bge.n	3894 <z_cbvprintf_impl+0xb90>
    391c:	e78a      	b.n	3834 <z_cbvprintf_impl+0xb30>
						OUTC('0');
    391e:	9903      	ldr	r1, [sp, #12]
    3920:	2030      	movs	r0, #48	; 0x30
    3922:	47d0      	blx	sl
    3924:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3928:	e7c2      	b.n	38b0 <z_cbvprintf_impl+0xbac>
					OUTC(*cp++);
    392a:	9903      	ldr	r1, [sp, #12]
    392c:	47d0      	blx	sl
    392e:	2800      	cmp	r0, #0
    3930:	db80      	blt.n	3834 <z_cbvprintf_impl+0xb30>
				while (isdigit((unsigned char)*cp)) {
    3932:	7828      	ldrb	r0, [r5, #0]
    3934:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3938:	2b09      	cmp	r3, #9
    393a:	46a8      	mov	r8, r5
    393c:	f105 0501 	add.w	r5, r5, #1
    3940:	d9f3      	bls.n	392a <z_cbvprintf_impl+0xc26>
    3942:	eba6 0609 	sub.w	r6, r6, r9
    3946:	e7c7      	b.n	38d8 <z_cbvprintf_impl+0xbd4>
				OUTC('0');
    3948:	9903      	ldr	r1, [sp, #12]
    394a:	2030      	movs	r0, #48	; 0x30
    394c:	47d0      	blx	sl
    394e:	2800      	cmp	r0, #0
    3950:	f6ff af70 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    3954:	3601      	adds	r6, #1
    3956:	e7c2      	b.n	38de <z_cbvprintf_impl+0xbda>
			if (conv->altform_0c | conv->altform_0) {
    3958:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    395c:	06da      	lsls	r2, r3, #27
    395e:	d401      	bmi.n	3964 <z_cbvprintf_impl+0xc60>
    3960:	071b      	lsls	r3, r3, #28
    3962:	d506      	bpl.n	3972 <z_cbvprintf_impl+0xc6e>
				OUTC('0');
    3964:	9903      	ldr	r1, [sp, #12]
    3966:	2030      	movs	r0, #48	; 0x30
    3968:	47d0      	blx	sl
    396a:	2800      	cmp	r0, #0
    396c:	f6ff af62 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    3970:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3972:	9b05      	ldr	r3, [sp, #20]
    3974:	b13b      	cbz	r3, 3986 <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
    3976:	9903      	ldr	r1, [sp, #12]
    3978:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    397c:	47d0      	blx	sl
    397e:	2800      	cmp	r0, #0
    3980:	f6ff af58 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    3984:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3986:	44a8      	add	r8, r5
    3988:	e006      	b.n	3998 <z_cbvprintf_impl+0xc94>
				OUTC('0');
    398a:	9903      	ldr	r1, [sp, #12]
    398c:	2030      	movs	r0, #48	; 0x30
    398e:	47d0      	blx	sl
    3990:	2800      	cmp	r0, #0
    3992:	f6ff af4f 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    3996:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3998:	eba8 0305 	sub.w	r3, r8, r5
    399c:	2b00      	cmp	r3, #0
    399e:	dcf4      	bgt.n	398a <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
    39a0:	9903      	ldr	r1, [sp, #12]
    39a2:	463b      	mov	r3, r7
    39a4:	4632      	mov	r2, r6
    39a6:	4650      	mov	r0, sl
    39a8:	f01d fe11 	bl	215ce <outs>
    39ac:	2800      	cmp	r0, #0
    39ae:	f6ff af41 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    39b2:	4428      	add	r0, r5
    39b4:	e79f      	b.n	38f6 <z_cbvprintf_impl+0xbf2>
			OUTC(' ');
    39b6:	9903      	ldr	r1, [sp, #12]
    39b8:	2020      	movs	r0, #32
    39ba:	47d0      	blx	sl
    39bc:	2800      	cmp	r0, #0
    39be:	f6ff af39 	blt.w	3834 <z_cbvprintf_impl+0xb30>
    39c2:	3501      	adds	r5, #1
		while (width > 0) {
    39c4:	1b73      	subs	r3, r6, r5
    39c6:	2b00      	cmp	r3, #0
    39c8:	dcf5      	bgt.n	39b6 <z_cbvprintf_impl+0xcb2>
    39ca:	f7ff bbdf 	b.w	318c <z_cbvprintf_impl+0x488>
			decexp = 0;
    39ce:	4616      	mov	r6, r2
    39d0:	e6c1      	b.n	3756 <z_cbvprintf_impl+0xa52>
		if (*buf++ != '0') {
    39d2:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    39d6:	e6be      	b.n	3756 <z_cbvprintf_impl+0xa52>
    39d8:	0002a017 	.word	0x0002a017

000039dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    39dc:	f01a bb42 	b.w	1e064 <SystemInit>

000039e0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    39e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    39e4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 3a40 <activate_foreach_backend+0x60>
{
    39e8:	4604      	mov	r4, r0
	while (mask_cpy) {
    39ea:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    39ec:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    39f0:	b914      	cbnz	r4, 39f8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    39f2:	4638      	mov	r0, r7
    39f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    39f8:	fa94 f5a4 	rbit	r5, r4
    39fc:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    3a00:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    3a04:	012e      	lsls	r6, r5, #4
    3a06:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    3a0a:	ea6f 0a03 	mvn.w	sl, r3
    3a0e:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    3a12:	7b2b      	ldrb	r3, [r5, #12]
    3a14:	2b00      	cmp	r3, #0
    3a16:	d0eb      	beq.n	39f0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    3a18:	f858 3006 	ldr.w	r3, [r8, r6]
    3a1c:	691b      	ldr	r3, [r3, #16]
    3a1e:	b94b      	cbnz	r3, 3a34 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    3a20:	4446      	add	r6, r8
			log_backend_enable(backend,
    3a22:	2204      	movs	r2, #4
    3a24:	6873      	ldr	r3, [r6, #4]
    3a26:	4628      	mov	r0, r5
    3a28:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    3a2a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    3a2e:	f000 fb21 	bl	4074 <log_backend_enable>
    3a32:	e7dd      	b.n	39f0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    3a34:	4628      	mov	r0, r5
    3a36:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    3a38:	2800      	cmp	r0, #0
    3a3a:	d1d9      	bne.n	39f0 <activate_foreach_backend+0x10>
    3a3c:	e7f0      	b.n	3a20 <activate_foreach_backend+0x40>
    3a3e:	bf00      	nop
    3a40:	00027a60 	.word	0x00027a60

00003a44 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    3a44:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3a46:	4910      	ldr	r1, [pc, #64]	; (3a88 <enable_logger+0x44>)
    3a48:	4810      	ldr	r0, [pc, #64]	; (3a8c <enable_logger+0x48>)
{
    3a4a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    3a4c:	2200      	movs	r2, #0
    3a4e:	f023 fbb4 	bl	271ba <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3a52:	4d0f      	ldr	r5, [pc, #60]	; (3a90 <enable_logger+0x4c>)
    3a54:	490f      	ldr	r1, [pc, #60]	; (3a94 <enable_logger+0x50>)
    3a56:	2200      	movs	r2, #0
    3a58:	2300      	movs	r3, #0
    3a5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3a5e:	2400      	movs	r4, #0
    3a60:	230e      	movs	r3, #14
    3a62:	e9cd 3403 	strd	r3, r4, [sp, #12]
    3a66:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3a6a:	4b0b      	ldr	r3, [pc, #44]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a6c:	9400      	str	r4, [sp, #0]
    3a6e:	f44f 7240 	mov.w	r2, #768	; 0x300
    3a72:	4628      	mov	r0, r5
    3a74:	f01b ffc6 	bl	1fa04 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    3a78:	4908      	ldr	r1, [pc, #32]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a7a:	4628      	mov	r0, r5
    3a7c:	f01b fefc 	bl	1f878 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    3a80:	4620      	mov	r0, r4
    3a82:	b009      	add	sp, #36	; 0x24
    3a84:	bd30      	pop	{r4, r5, pc}
    3a86:	bf00      	nop
    3a88:	00003aa1 	.word	0x00003aa1
    3a8c:	200015d8 	.word	0x200015d8
    3a90:	20000d18 	.word	0x20000d18
    3a94:	20004040 	.word	0x20004040
    3a98:	00003dcd 	.word	0x00003dcd
    3a9c:	0002a41c 	.word	0x0002a41c

00003aa0 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3aa0:	4801      	ldr	r0, [pc, #4]	; (3aa8 <log_process_thread_timer_expiry_fn+0x8>)
    3aa2:	f01c b943 	b.w	1fd2c <z_impl_k_sem_give>
    3aa6:	bf00      	nop
    3aa8:	20000bc4 	.word	0x20000bc4

00003aac <z_log_init>:
{
    3aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ab0:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    3ab2:	481f      	ldr	r0, [pc, #124]	; (3b30 <z_log_init+0x84>)
{
    3ab4:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    3ab6:	f01e fa07 	bl	21ec8 <atomic_inc>
    3aba:	4606      	mov	r6, r0
    3abc:	2800      	cmp	r0, #0
    3abe:	d030      	beq.n	3b22 <z_log_init+0x76>
	uint32_t mask = 0;
    3ac0:	2500      	movs	r5, #0
}
    3ac2:	4628      	mov	r0, r5
    3ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    3ac8:	7b23      	ldrb	r3, [r4, #12]
    3aca:	b173      	cbz	r3, 3aea <z_log_init+0x3e>
	if (backend->api->init) {
    3acc:	6823      	ldr	r3, [r4, #0]
    3ace:	68db      	ldr	r3, [r3, #12]
    3ad0:	b10b      	cbz	r3, 3ad6 <z_log_init+0x2a>
		backend->api->init(backend);
    3ad2:	4620      	mov	r0, r4
    3ad4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    3ad6:	6823      	ldr	r3, [r4, #0]
    3ad8:	691b      	ldr	r3, [r3, #16]
    3ada:	b9d3      	cbnz	r3, 3b12 <z_log_init+0x66>
				log_backend_enable(backend,
    3adc:	6863      	ldr	r3, [r4, #4]
    3ade:	2204      	movs	r2, #4
    3ae0:	6819      	ldr	r1, [r3, #0]
    3ae2:	4620      	mov	r0, r4
    3ae4:	f000 fac6 	bl	4074 <log_backend_enable>
			i++;
    3ae8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3aea:	3410      	adds	r4, #16
    3aec:	454c      	cmp	r4, r9
    3aee:	d3eb      	bcc.n	3ac8 <z_log_init+0x1c>
	if (blocking) {
    3af0:	f1b8 0f00 	cmp.w	r8, #0
    3af4:	d0e5      	beq.n	3ac2 <z_log_init+0x16>
		while (mask) {
    3af6:	2d00      	cmp	r5, #0
    3af8:	d0e2      	beq.n	3ac0 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    3afa:	4628      	mov	r0, r5
    3afc:	f7ff ff70 	bl	39e0 <activate_foreach_backend>
    3b00:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    3b02:	2f00      	cmp	r7, #0
    3b04:	d0f7      	beq.n	3af6 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    3b06:	2100      	movs	r1, #0
    3b08:	f44f 70a4 	mov.w	r0, #328	; 0x148
    3b0c:	f01c fe18 	bl	20740 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    3b10:	e7f1      	b.n	3af6 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    3b12:	4620      	mov	r0, r4
    3b14:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    3b16:	2800      	cmp	r0, #0
    3b18:	d0e0      	beq.n	3adc <z_log_init+0x30>
				mask |= BIT(i);
    3b1a:	fa0a f306 	lsl.w	r3, sl, r6
    3b1e:	431d      	orrs	r5, r3
    3b20:	e7e2      	b.n	3ae8 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3b22:	4c04      	ldr	r4, [pc, #16]	; (3b34 <z_log_init+0x88>)
    3b24:	f8df 9010 	ldr.w	r9, [pc, #16]	; 3b38 <z_log_init+0x8c>
	uint32_t mask = 0;
    3b28:	4605      	mov	r5, r0
				mask |= BIT(i);
    3b2a:	f04f 0a01 	mov.w	sl, #1
    3b2e:	e7dd      	b.n	3aec <z_log_init+0x40>
    3b30:	2000218c 	.word	0x2000218c
    3b34:	00027a60 	.word	0x00027a60
    3b38:	00027a80 	.word	0x00027a80

00003b3c <log_format_func_t_get>:
}
    3b3c:	4b01      	ldr	r3, [pc, #4]	; (3b44 <log_format_func_t_get+0x8>)
    3b3e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3b42:	4770      	bx	lr
    3b44:	00027c58 	.word	0x00027c58

00003b48 <log_set_timestamp_func>:
{
    3b48:	b508      	push	{r3, lr}
    3b4a:	4603      	mov	r3, r0
    3b4c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    3b4e:	b12b      	cbz	r3, 3b5c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    3b50:	4a04      	ldr	r2, [pc, #16]	; (3b64 <log_set_timestamp_func+0x1c>)
    3b52:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    3b54:	f000 fd6e 	bl	4634 <log_output_timestamp_freq_set>
	return 0;
    3b58:	2000      	movs	r0, #0
}
    3b5a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    3b5c:	f06f 0015 	mvn.w	r0, #21
    3b60:	e7fb      	b.n	3b5a <log_set_timestamp_func+0x12>
    3b62:	bf00      	nop
    3b64:	200001b0 	.word	0x200001b0

00003b68 <z_log_notify_backend_enabled>:
{
    3b68:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    3b6a:	4c04      	ldr	r4, [pc, #16]	; (3b7c <z_log_notify_backend_enabled+0x14>)
    3b6c:	7823      	ldrb	r3, [r4, #0]
    3b6e:	b913      	cbnz	r3, 3b76 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    3b70:	4803      	ldr	r0, [pc, #12]	; (3b80 <z_log_notify_backend_enabled+0x18>)
    3b72:	f01c f8db 	bl	1fd2c <z_impl_k_sem_give>
	backend_attached = true;
    3b76:	2301      	movs	r3, #1
    3b78:	7023      	strb	r3, [r4, #0]
}
    3b7a:	bd10      	pop	{r4, pc}
    3b7c:	20003af7 	.word	0x20003af7
    3b80:	20000bc4 	.word	0x20000bc4

00003b84 <z_log_dropped>:
{
    3b84:	b510      	push	{r4, lr}
    3b86:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    3b88:	4808      	ldr	r0, [pc, #32]	; (3bac <z_log_dropped+0x28>)
    3b8a:	f01e f99d 	bl	21ec8 <atomic_inc>
	if (buffered) {
    3b8e:	b15c      	cbz	r4, 3ba8 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3b90:	f3bf 8f5b 	dmb	ish
    3b94:	4b06      	ldr	r3, [pc, #24]	; (3bb0 <z_log_dropped+0x2c>)
    3b96:	e853 1f00 	ldrex	r1, [r3]
    3b9a:	3901      	subs	r1, #1
    3b9c:	e843 1200 	strex	r2, r1, [r3]
    3ba0:	2a00      	cmp	r2, #0
    3ba2:	d1f8      	bne.n	3b96 <z_log_dropped+0x12>
    3ba4:	f3bf 8f5b 	dmb	ish
}
    3ba8:	bd10      	pop	{r4, pc}
    3baa:	bf00      	nop
    3bac:	20002184 	.word	0x20002184
    3bb0:	20002188 	.word	0x20002188

00003bb4 <z_log_dropped_read_and_clear>:
}
    3bb4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3bb6:	4b06      	ldr	r3, [pc, #24]	; (3bd0 <z_log_dropped_read_and_clear+0x1c>)
    3bb8:	f3bf 8f5b 	dmb	ish
    3bbc:	4601      	mov	r1, r0
    3bbe:	e853 0f00 	ldrex	r0, [r3]
    3bc2:	e843 1200 	strex	r2, r1, [r3]
    3bc6:	2a00      	cmp	r2, #0
    3bc8:	d1f9      	bne.n	3bbe <z_log_dropped_read_and_clear+0xa>
    3bca:	f3bf 8f5b 	dmb	ish
    3bce:	4770      	bx	lr
    3bd0:	20002184 	.word	0x20002184

00003bd4 <dropped_notify>:
{
    3bd4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    3bd6:	f7ff ffed 	bl	3bb4 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3bda:	4c08      	ldr	r4, [pc, #32]	; (3bfc <dropped_notify+0x28>)
    3bdc:	4e08      	ldr	r6, [pc, #32]	; (3c00 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    3bde:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3be0:	42b4      	cmp	r4, r6
    3be2:	d300      	bcc.n	3be6 <dropped_notify+0x12>
}
    3be4:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3be6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3be8:	795b      	ldrb	r3, [r3, #5]
    3bea:	b12b      	cbz	r3, 3bf8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    3bec:	6823      	ldr	r3, [r4, #0]
    3bee:	685b      	ldr	r3, [r3, #4]
    3bf0:	b113      	cbz	r3, 3bf8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    3bf2:	4629      	mov	r1, r5
    3bf4:	4620      	mov	r0, r4
    3bf6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3bf8:	3410      	adds	r4, #16
    3bfa:	e7f1      	b.n	3be0 <dropped_notify+0xc>
    3bfc:	00027a60 	.word	0x00027a60
    3c00:	00027a80 	.word	0x00027a80

00003c04 <z_log_msg_init>:
{
    3c04:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    3c06:	4c04      	ldr	r4, [pc, #16]	; (3c18 <z_log_msg_init+0x14>)
    3c08:	4904      	ldr	r1, [pc, #16]	; (3c1c <z_log_msg_init+0x18>)
    3c0a:	4620      	mov	r0, r4
    3c0c:	f01d fea5 	bl	2195a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    3c10:	4b03      	ldr	r3, [pc, #12]	; (3c20 <z_log_msg_init+0x1c>)
    3c12:	601c      	str	r4, [r3, #0]
}
    3c14:	bd10      	pop	{r4, pc}
    3c16:	bf00      	nop
    3c18:	20000a7c 	.word	0x20000a7c
    3c1c:	00027c44 	.word	0x00027c44
    3c20:	2000217c 	.word	0x2000217c

00003c24 <log_core_init>:
	panic_mode = false;
    3c24:	4a09      	ldr	r2, [pc, #36]	; (3c4c <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    3c26:	480a      	ldr	r0, [pc, #40]	; (3c50 <log_core_init+0x2c>)
{
    3c28:	b508      	push	{r3, lr}
	panic_mode = false;
    3c2a:	2300      	movs	r3, #0
    3c2c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3c2e:	4a09      	ldr	r2, [pc, #36]	; (3c54 <log_core_init+0x30>)
    3c30:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    3c32:	4a09      	ldr	r2, [pc, #36]	; (3c58 <log_core_init+0x34>)
		log_set_timestamp_func(default_get_timestamp,
    3c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    3c38:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    3c3a:	f7ff ff85 	bl	3b48 <log_set_timestamp_func>
		z_log_msg_init();
    3c3e:	f7ff ffe1 	bl	3c04 <z_log_msg_init>
}
    3c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    3c46:	f000 b985 	b.w	3f54 <z_log_runtime_filters_init>
    3c4a:	bf00      	nop
    3c4c:	20003af8 	.word	0x20003af8
    3c50:	00021ec5 	.word	0x00021ec5
    3c54:	20002184 	.word	0x20002184
    3c58:	20002188 	.word	0x20002188

00003c5c <z_log_msg_alloc>:
{
    3c5c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    3c5e:	2200      	movs	r2, #0
    3c60:	4801      	ldr	r0, [pc, #4]	; (3c68 <z_log_msg_alloc+0xc>)
    3c62:	2300      	movs	r3, #0
    3c64:	f01d be9a 	b.w	2199c <mpsc_pbuf_alloc>
    3c68:	20000a7c 	.word	0x20000a7c

00003c6c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    3c6c:	4801      	ldr	r0, [pc, #4]	; (3c74 <z_log_msg_local_claim+0x8>)
    3c6e:	f01d bf33 	b.w	21ad8 <mpsc_pbuf_claim>
    3c72:	bf00      	nop
    3c74:	20000a7c 	.word	0x20000a7c

00003c78 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    3c78:	4b02      	ldr	r3, [pc, #8]	; (3c84 <z_log_msg_free+0xc>)
{
    3c7a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    3c7c:	6818      	ldr	r0, [r3, #0]
    3c7e:	f01d bf7d 	b.w	21b7c <mpsc_pbuf_free>
    3c82:	bf00      	nop
    3c84:	2000217c 	.word	0x2000217c

00003c88 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    3c88:	4801      	ldr	r0, [pc, #4]	; (3c90 <z_log_msg_pending+0x8>)
    3c8a:	f01d bfb3 	b.w	21bf4 <mpsc_pbuf_is_pending>
    3c8e:	bf00      	nop
    3c90:	20000a7c 	.word	0x20000a7c

00003c94 <z_impl_log_process>:
{
    3c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
    3c96:	4b35      	ldr	r3, [pc, #212]	; (3d6c <z_impl_log_process+0xd8>)
    3c98:	7818      	ldrb	r0, [r3, #0]
    3c9a:	2800      	cmp	r0, #0
    3c9c:	d064      	beq.n	3d68 <z_impl_log_process+0xd4>
	return z_log_msg_local_claim();
    3c9e:	f7ff ffe5 	bl	3c6c <z_log_msg_local_claim>
	if (msg) {
    3ca2:	4604      	mov	r4, r0
    3ca4:	b190      	cbz	r0, 3ccc <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3ca6:	f3bf 8f5b 	dmb	ish
    3caa:	4b31      	ldr	r3, [pc, #196]	; (3d70 <z_impl_log_process+0xdc>)
    3cac:	e853 1f00 	ldrex	r1, [r3]
    3cb0:	3901      	subs	r1, #1
    3cb2:	e843 1200 	strex	r2, r1, [r3]
    3cb6:	2a00      	cmp	r2, #0
    3cb8:	d1f8      	bne.n	3cac <z_impl_log_process+0x18>
    3cba:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3cbe:	4d2d      	ldr	r5, [pc, #180]	; (3d74 <z_impl_log_process+0xe0>)
    3cc0:	4e2d      	ldr	r6, [pc, #180]	; (3d78 <z_impl_log_process+0xe4>)
    3cc2:	42b5      	cmp	r5, r6
    3cc4:	d32d      	bcc.n	3d22 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    3cc6:	4620      	mov	r0, r4
    3cc8:	f7ff ffd6 	bl	3c78 <z_log_msg_free>
	return dropped_cnt > 0;
    3ccc:	4b2b      	ldr	r3, [pc, #172]	; (3d7c <z_impl_log_process+0xe8>)
    3cce:	4c2c      	ldr	r4, [pc, #176]	; (3d80 <z_impl_log_process+0xec>)
		if ((dropped_pend || unordered_pend) &&
    3cd0:	681b      	ldr	r3, [r3, #0]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	dd19      	ble.n	3d0a <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    3cd6:	f023 fa48 	bl	2716a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3cda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3cde:	fba0 0302 	umull	r0, r3, r0, r2
    3ce2:	fb02 3101 	mla	r1, r2, r1, r3
    3ce6:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    3ce8:	e9d4 2000 	ldrd	r2, r0, [r4]
    3cec:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    3cf0:	1a9b      	subs	r3, r3, r2
    3cf2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    3cf6:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    3cfa:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    3cfe:	4293      	cmp	r3, r2
    3d00:	f171 0100 	sbcs.w	r1, r1, #0
    3d04:	d301      	bcc.n	3d0a <z_impl_log_process+0x76>
				dropped_notify();
    3d06:	f7ff ff65 	bl	3bd4 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    3d0a:	e9d4 3200 	ldrd	r3, r2, [r4]
    3d0e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    3d12:	f142 0200 	adc.w	r2, r2, #0
    3d16:	e9c4 3200 	strd	r3, r2, [r4]
}
    3d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
    3d1e:	f7ff bfb3 	b.w	3c88 <z_log_msg_pending>
	return backend->cb->active;
    3d22:	686b      	ldr	r3, [r5, #4]
		if (log_backend_is_active(backend) &&
    3d24:	795b      	ldrb	r3, [r3, #5]
    3d26:	b13b      	cbz	r3, 3d38 <z_impl_log_process+0xa4>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
    3d28:	7821      	ldrb	r1, [r4, #0]
	if (!z_log_item_is_msg(msg)) {
    3d2a:	074b      	lsls	r3, r1, #29
    3d2c:	d506      	bpl.n	3d3c <z_impl_log_process+0xa8>
	backend->api->process(backend, msg);
    3d2e:	682b      	ldr	r3, [r5, #0]
    3d30:	4621      	mov	r1, r4
    3d32:	681b      	ldr	r3, [r3, #0]
    3d34:	4628      	mov	r0, r5
    3d36:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3d38:	3510      	adds	r5, #16
    3d3a:	e7c2      	b.n	3cc2 <z_impl_log_process+0x2e>
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    3d3c:	8823      	ldrh	r3, [r4, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    3d3e:	6862      	ldr	r2, [r4, #4]
	if (level == LOG_LEVEL_NONE) {
    3d40:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
	return msg->hdr.desc.level;
    3d44:	f3c3 1782 	ubfx	r7, r3, #6, #3
	return msg->hdr.desc.domain;
    3d48:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    3d4c:	d0ef      	beq.n	3d2e <z_impl_log_process+0x9a>
	if (source) {
    3d4e:	2a00      	cmp	r2, #0
    3d50:	d0ed      	beq.n	3d2e <z_impl_log_process+0x9a>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    3d52:	4b0c      	ldr	r3, [pc, #48]	; (3d84 <z_impl_log_process+0xf0>)
    3d54:	1ad2      	subs	r2, r2, r3
		backend_level = log_filter_get(backend, domain_id, source_id, true);
    3d56:	f342 028f 	sbfx	r2, r2, #2, #16
    3d5a:	2301      	movs	r3, #1
    3d5c:	4628      	mov	r0, r5
    3d5e:	f000 f9d5 	bl	410c <log_filter_get>
		if (log_backend_is_active(backend) &&
    3d62:	42b8      	cmp	r0, r7
    3d64:	d3e8      	bcc.n	3d38 <z_impl_log_process+0xa4>
    3d66:	e7e2      	b.n	3d2e <z_impl_log_process+0x9a>
}
    3d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d6a:	bf00      	nop
    3d6c:	20003af7 	.word	0x20003af7
    3d70:	20002188 	.word	0x20002188
    3d74:	00027a60 	.word	0x00027a60
    3d78:	00027a80 	.word	0x00027a80
    3d7c:	20002184 	.word	0x20002184
    3d80:	200015d0 	.word	0x200015d0
    3d84:	20000ac0 	.word	0x20000ac0

00003d88 <z_impl_log_panic>:
{
    3d88:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    3d8a:	4d0d      	ldr	r5, [pc, #52]	; (3dc0 <z_impl_log_panic+0x38>)
    3d8c:	7829      	ldrb	r1, [r5, #0]
    3d8e:	b961      	cbnz	r1, 3daa <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    3d90:	2001      	movs	r0, #1
    3d92:	f7ff fe8b 	bl	3aac <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3d96:	4c0b      	ldr	r4, [pc, #44]	; (3dc4 <z_impl_log_panic+0x3c>)
    3d98:	4e0b      	ldr	r6, [pc, #44]	; (3dc8 <z_impl_log_panic+0x40>)
    3d9a:	42b4      	cmp	r4, r6
    3d9c:	d306      	bcc.n	3dac <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    3d9e:	f7ff ff79 	bl	3c94 <z_impl_log_process>
		while (log_process() == true) {
    3da2:	2800      	cmp	r0, #0
    3da4:	d1fb      	bne.n	3d9e <z_impl_log_panic+0x16>
	panic_mode = true;
    3da6:	2301      	movs	r3, #1
    3da8:	702b      	strb	r3, [r5, #0]
}
    3daa:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    3dac:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3dae:	795b      	ldrb	r3, [r3, #5]
    3db0:	b11b      	cbz	r3, 3dba <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    3db2:	6823      	ldr	r3, [r4, #0]
    3db4:	4620      	mov	r0, r4
    3db6:	689b      	ldr	r3, [r3, #8]
    3db8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3dba:	3410      	adds	r4, #16
    3dbc:	e7ed      	b.n	3d9a <z_impl_log_panic+0x12>
    3dbe:	bf00      	nop
    3dc0:	20003af8 	.word	0x20003af8
    3dc4:	00027a60 	.word	0x00027a60
    3dc8:	00027a80 	.word	0x00027a80

00003dcc <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    3dcc:	2100      	movs	r1, #0
{
    3dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    3dd2:	4608      	mov	r0, r1
    3dd4:	f7ff fe6a 	bl	3aac <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    3dd8:	4604      	mov	r4, r0
    3dda:	b348      	cbz	r0, 3e30 <log_process_thread_func+0x64>
    3ddc:	f240 6867 	movw	r8, #1639	; 0x667
    3de0:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    3de4:	f01c fcc6 	bl	20774 <z_impl_z_current_get>
	proc_tid = process_tid;
    3de8:	4b1a      	ldr	r3, [pc, #104]	; (3e54 <log_process_thread_func+0x88>)
    3dea:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3dec:	b130      	cbz	r0, 3dfc <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    3dee:	4b1a      	ldr	r3, [pc, #104]	; (3e58 <log_process_thread_func+0x8c>)
	    process_tid &&
    3df0:	681b      	ldr	r3, [r3, #0]
    3df2:	2b09      	cmp	r3, #9
    3df4:	dd02      	ble.n	3dfc <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    3df6:	4819      	ldr	r0, [pc, #100]	; (3e5c <log_process_thread_func+0x90>)
    3df8:	f01b ff98 	bl	1fd2c <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3dfc:	4f18      	ldr	r7, [pc, #96]	; (3e60 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    3dfe:	f8df a05c 	ldr.w	sl, [pc, #92]	; 3e5c <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    3e02:	2500      	movs	r5, #0
		if (activate_mask) {
    3e04:	b144      	cbz	r4, 3e18 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    3e06:	4620      	mov	r0, r4
    3e08:	f7ff fdea 	bl	39e0 <activate_foreach_backend>
			if (!activate_mask) {
    3e0c:	4604      	mov	r4, r0
    3e0e:	b918      	cbnz	r0, 3e18 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    3e10:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3e14:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    3e18:	f7ff ff3c 	bl	3c94 <z_impl_log_process>
		if (log_process() == false) {
    3e1c:	4606      	mov	r6, r0
    3e1e:	b928      	cbnz	r0, 3e2c <log_process_thread_func+0x60>
			if (processed_any) {
    3e20:	b9b5      	cbnz	r5, 3e50 <log_process_thread_func+0x84>
    3e22:	4642      	mov	r2, r8
    3e24:	464b      	mov	r3, r9
    3e26:	4650      	mov	r0, sl
    3e28:	f01b ffa6 	bl	1fd78 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    3e2c:	4635      	mov	r5, r6
    3e2e:	e7e9      	b.n	3e04 <log_process_thread_func+0x38>
    3e30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3e34:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    3e38:	e7d4      	b.n	3de4 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    3e3a:	682b      	ldr	r3, [r5, #0]
    3e3c:	699b      	ldr	r3, [r3, #24]
    3e3e:	b11b      	cbz	r3, 3e48 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    3e40:	2200      	movs	r2, #0
    3e42:	4611      	mov	r1, r2
    3e44:	4628      	mov	r0, r5
    3e46:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3e48:	3510      	adds	r5, #16
    3e4a:	42bd      	cmp	r5, r7
    3e4c:	d3f5      	bcc.n	3e3a <log_process_thread_func+0x6e>
    3e4e:	e7e8      	b.n	3e22 <log_process_thread_func+0x56>
    3e50:	4d04      	ldr	r5, [pc, #16]	; (3e64 <log_process_thread_func+0x98>)
    3e52:	e7fa      	b.n	3e4a <log_process_thread_func+0x7e>
    3e54:	20002180 	.word	0x20002180
    3e58:	20002188 	.word	0x20002188
    3e5c:	20000bc4 	.word	0x20000bc4
    3e60:	00027a80 	.word	0x00027a80
    3e64:	00027a60 	.word	0x00027a60

00003e68 <z_log_msg_post_finalize>:
{
    3e68:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    3e6a:	4818      	ldr	r0, [pc, #96]	; (3ecc <z_log_msg_post_finalize+0x64>)
    3e6c:	f01e f82c 	bl	21ec8 <atomic_inc>
	if (panic_mode) {
    3e70:	4b17      	ldr	r3, [pc, #92]	; (3ed0 <z_log_msg_post_finalize+0x68>)
    3e72:	781b      	ldrb	r3, [r3, #0]
    3e74:	b17b      	cbz	r3, 3e96 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    3e76:	f04f 0320 	mov.w	r3, #32
    3e7a:	f3ef 8411 	mrs	r4, BASEPRI
    3e7e:	f383 8812 	msr	BASEPRI_MAX, r3
    3e82:	f3bf 8f6f 	isb	sy
    3e86:	f7ff ff05 	bl	3c94 <z_impl_log_process>
	__asm__ volatile(
    3e8a:	f384 8811 	msr	BASEPRI, r4
    3e8e:	f3bf 8f6f 	isb	sy
}
    3e92:	b002      	add	sp, #8
    3e94:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    3e96:	4b0f      	ldr	r3, [pc, #60]	; (3ed4 <z_log_msg_post_finalize+0x6c>)
    3e98:	681b      	ldr	r3, [r3, #0]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d0f9      	beq.n	3e92 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    3e9e:	b950      	cbnz	r0, 3eb6 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    3ea0:	2200      	movs	r2, #0
    3ea2:	2300      	movs	r3, #0
    3ea4:	e9cd 2300 	strd	r2, r3, [sp]
    3ea8:	480b      	ldr	r0, [pc, #44]	; (3ed8 <z_log_msg_post_finalize+0x70>)
    3eaa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3eae:	2300      	movs	r3, #0
    3eb0:	f01c feb2 	bl	20c18 <z_impl_k_timer_start>
    3eb4:	e7ed      	b.n	3e92 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3eb6:	280a      	cmp	r0, #10
    3eb8:	d1eb      	bne.n	3e92 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    3eba:	4807      	ldr	r0, [pc, #28]	; (3ed8 <z_log_msg_post_finalize+0x70>)
    3ebc:	f023 f989 	bl	271d2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3ec0:	4806      	ldr	r0, [pc, #24]	; (3edc <z_log_msg_post_finalize+0x74>)
}
    3ec2:	b002      	add	sp, #8
    3ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ec8:	f01b bf30 	b.w	1fd2c <z_impl_k_sem_give>
    3ecc:	20002188 	.word	0x20002188
    3ed0:	20003af8 	.word	0x20003af8
    3ed4:	20002180 	.word	0x20002180
    3ed8:	200015d8 	.word	0x200015d8
    3edc:	20000bc4 	.word	0x20000bc4

00003ee0 <z_log_msg_commit>:
{
    3ee0:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    3ee2:	4b06      	ldr	r3, [pc, #24]	; (3efc <z_log_msg_commit+0x1c>)
    3ee4:	681b      	ldr	r3, [r3, #0]
{
    3ee6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3ee8:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    3eea:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    3eec:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    3eee:	4804      	ldr	r0, [pc, #16]	; (3f00 <z_log_msg_commit+0x20>)
    3ef0:	f01d fdd2 	bl	21a98 <mpsc_pbuf_commit>
}
    3ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    3ef8:	f7ff bfb6 	b.w	3e68 <z_log_msg_post_finalize>
    3efc:	200001b0 	.word	0x200001b0
    3f00:	20000a7c 	.word	0x20000a7c

00003f04 <log_mem_get_usage>:
{
    3f04:	b508      	push	{r3, lr}
    3f06:	460a      	mov	r2, r1
	mpsc_pbuf_get_utilization(&log_buffer, buf_size, usage);
    3f08:	4601      	mov	r1, r0
    3f0a:	4802      	ldr	r0, [pc, #8]	; (3f14 <log_mem_get_usage+0x10>)
    3f0c:	f01d fe7f 	bl	21c0e <mpsc_pbuf_get_utilization>
}
    3f10:	2000      	movs	r0, #0
    3f12:	bd08      	pop	{r3, pc}
    3f14:	20000a7c 	.word	0x20000a7c

00003f18 <log_mem_get_max_usage>:
{
    3f18:	4601      	mov	r1, r0
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
    3f1a:	4801      	ldr	r0, [pc, #4]	; (3f20 <log_mem_get_max_usage+0x8>)
    3f1c:	f01d be82 	b.w	21c24 <mpsc_pbuf_get_max_utilization>
    3f20:	20000a7c 	.word	0x20000a7c

00003f24 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
    3f24:	4b02      	ldr	r3, [pc, #8]	; (3f30 <log_src_cnt_get+0xc>)
    3f26:	4803      	ldr	r0, [pc, #12]	; (3f34 <log_src_cnt_get+0x10>)
    3f28:	1ac0      	subs	r0, r0, r3
    3f2a:	08c0      	lsrs	r0, r0, #3
    3f2c:	4770      	bx	lr
    3f2e:	bf00      	nop
    3f30:	00027928 	.word	0x00027928
    3f34:	00027a60 	.word	0x00027a60

00003f38 <log_source_name_get>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3f38:	4a04      	ldr	r2, [pc, #16]	; (3f4c <log_source_name_get+0x14>)
    3f3a:	4b05      	ldr	r3, [pc, #20]	; (3f50 <log_source_name_get+0x18>)
    3f3c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    3f3e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    3f42:	bf34      	ite	cc
    3f44:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    3f48:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    3f4a:	4770      	bx	lr
    3f4c:	00027928 	.word	0x00027928
    3f50:	00027a60 	.word	0x00027a60

00003f54 <z_log_runtime_filters_init>:
    3f54:	480b      	ldr	r0, [pc, #44]	; (3f84 <z_log_runtime_filters_init+0x30>)
    3f56:	4b0c      	ldr	r3, [pc, #48]	; (3f88 <z_log_runtime_filters_init+0x34>)

	return z_log_link_get_dynamic_filter(domain_id, source_id);
}

void z_log_runtime_filters_init(void)
{
    3f58:	b530      	push	{r4, r5, lr}
    3f5a:	1a1b      	subs	r3, r3, r0
    3f5c:	4c0b      	ldr	r4, [pc, #44]	; (3f8c <z_log_runtime_filters_init+0x38>)
    3f5e:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    3f60:	2100      	movs	r1, #0
			return __log_const_start[source_id].level;
    3f62:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    3f64:	4299      	cmp	r1, r3
    3f66:	d100      	bne.n	3f6a <z_log_runtime_filters_init+0x16>
		level = MAX(level, CONFIG_LOG_OVERRIDE_LEVEL);
		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    3f68:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    3f6a:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    3f6e:	6825      	ldr	r5, [r4, #0]
    3f70:	f002 0207 	and.w	r2, r2, #7
    3f74:	f025 0507 	bic.w	r5, r5, #7
    3f78:	432a      	orrs	r2, r5
    3f7a:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    3f7e:	3101      	adds	r1, #1
    3f80:	e7f0      	b.n	3f64 <z_log_runtime_filters_init+0x10>
    3f82:	bf00      	nop
    3f84:	00027928 	.word	0x00027928
    3f88:	00027a60 	.word	0x00027a60
    3f8c:	20000ac0 	.word	0x20000ac0

00003f90 <log_source_id_get>:

int log_source_id_get(const char *name)
{
    3f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f92:	4f0b      	ldr	r7, [pc, #44]	; (3fc0 <log_source_id_get+0x30>)
    3f94:	4d0b      	ldr	r5, [pc, #44]	; (3fc4 <log_source_id_get+0x34>)
    3f96:	1bed      	subs	r5, r5, r7
    3f98:	4606      	mov	r6, r0
    3f9a:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID); i++) {
    3f9c:	2400      	movs	r4, #0
    3f9e:	42ac      	cmp	r4, r5
    3fa0:	d102      	bne.n	3fa8 <log_source_id_get+0x18>

		if ((sname != NULL) && (strcmp(sname, name) == 0)) {
			return i;
		}
	}
	return -1;
    3fa2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3fa6:	e009      	b.n	3fbc <log_source_id_get+0x2c>
			return __log_const_start[source_id].name;
    3fa8:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
		if ((sname != NULL) && (strcmp(sname, name) == 0)) {
    3fac:	b908      	cbnz	r0, 3fb2 <log_source_id_get+0x22>
	for (int i = 0; i < log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID); i++) {
    3fae:	3401      	adds	r4, #1
    3fb0:	e7f5      	b.n	3f9e <log_source_id_get+0xe>
		if ((sname != NULL) && (strcmp(sname, name) == 0)) {
    3fb2:	4631      	mov	r1, r6
    3fb4:	f01f fde3 	bl	23b7e <strcmp>
    3fb8:	2800      	cmp	r0, #0
    3fba:	d1f8      	bne.n	3fae <log_source_id_get+0x1e>
}
    3fbc:	4620      	mov	r0, r4
    3fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fc0:	00027928 	.word	0x00027928
    3fc4:	00027a60 	.word	0x00027a60

00003fc8 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    3fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3fcc:	4688      	mov	r8, r1
    3fce:	4615      	mov	r5, r2
    3fd0:	461e      	mov	r6, r3
	}

	__ASSERT_NO_MSG(source_id < log_src_cnt_get(domain_id));


	if (backend == NULL) {
    3fd2:	b998      	cbnz	r0, 3ffc <z_impl_log_filter_set+0x34>
		uint32_t max = 0U;

		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
    3fd4:	4f22      	ldr	r7, [pc, #136]	; (4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>)
    3fd6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>
		uint32_t max = 0U;
    3fda:	4604      	mov	r4, r0
    3fdc:	e009      	b.n	3ff2 <z_impl_log_filter_set+0x2a>
		union { uintptr_t x; uint32_t val; } parm3 = { .val = level };
		return (uint32_t) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    3fde:	4638      	mov	r0, r7
    3fe0:	4633      	mov	r3, r6
    3fe2:	462a      	mov	r2, r5
    3fe4:	4641      	mov	r1, r8
    3fe6:	f7ff ffef 	bl	3fc8 <z_impl_log_filter_set>
			uint32_t current = log_filter_set(iter_backend,
						 domain_id, source_id, level);

			max = MAX(current, max);
    3fea:	4284      	cmp	r4, r0
    3fec:	bf38      	it	cc
    3fee:	4604      	movcc	r4, r0
		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
    3ff0:	3710      	adds	r7, #16
    3ff2:	454f      	cmp	r7, r9
    3ff4:	d3f3      	bcc.n	3fde <z_impl_log_filter_set+0x16>
	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
			       CONFIG_LOG_OVERRIDE_LEVEL));
	set_runtime_filter(log_backend_id_get(backend), domain_id, source_id, level);

	return level;
}
    3ff6:	4620      	mov	r0, r4
    3ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ffc:	4b1a      	ldr	r3, [pc, #104]	; (4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>)
    3ffe:	4a1b      	ldr	r2, [pc, #108]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    4000:	1ad2      	subs	r2, r2, r3
		if (source_id < log_src_cnt_get(domain_id)) {
    4002:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
    4006:	d228      	bcs.n	405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
			return __log_const_start[source_id].level;
    4008:	eb03 03c5 	add.w	r3, r3, r5, lsl #3

		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(domain_id, source_id);
    400c:	791c      	ldrb	r4, [r3, #4]
    400e:	42b4      	cmp	r4, r6
    4010:	bf28      	it	cs
    4012:	4634      	movcs	r4, r6
	return backend->cb->id;
    4014:	6843      	ldr	r3, [r0, #4]
	prev_max = LOG_FILTER_SLOT_GET(filters, LOG_FILTER_AGGR_SLOT_IDX);
    4016:	4e16      	ldr	r6, [pc, #88]	; (4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>)
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
    4018:	791a      	ldrb	r2, [r3, #4]
    401a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    401e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4022:	2107      	movs	r1, #7
    4024:	4091      	lsls	r1, r2
    4026:	ea23 0301 	bic.w	r3, r3, r1
    402a:	f004 0107 	and.w	r1, r4, #7
    402e:	fa01 f202 	lsl.w	r2, r1, r2
    4032:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    4034:	2100      	movs	r1, #0
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
    4036:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    4038:	fa23 f002 	lsr.w	r0, r3, r2
    403c:	f000 0007 	and.w	r0, r0, #7
    4040:	4281      	cmp	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    4042:	f102 0203 	add.w	r2, r2, #3
    4046:	bf38      	it	cc
    4048:	4601      	movcc	r1, r0
    404a:	2a1e      	cmp	r2, #30
    404c:	d1f4      	bne.n	4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>
	LOG_FILTER_SLOT_SET(filters, LOG_FILTER_AGGR_SLOT_IDX, new_max);
    404e:	f023 0307 	bic.w	r3, r3, #7
    4052:	430b      	orrs	r3, r1
    4054:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
}
    4058:	e7cd      	b.n	3ff6 <z_impl_log_filter_set+0x2e>
	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
    405a:	2400      	movs	r4, #0
    405c:	e7da      	b.n	4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>
    405e:	bf00      	nop
    4060:	00027a60 	.word	0x00027a60
    4064:	00027a80 	.word	0x00027a80
    4068:	00027928 	.word	0x00027928
    406c:	00027a60 	.word	0x00027a60
    4070:	20000ac0 	.word	0x20000ac0

00004074 <log_backend_enable>:
{
    4074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4078:	4604      	mov	r4, r0
	backend->cb->id = id;
    407a:	6843      	ldr	r3, [r0, #4]
	id += backend - log_backend_get(0);
    407c:	4811      	ldr	r0, [pc, #68]	; (40c4 <log_backend_enable+0x50>)
    407e:	1a20      	subs	r0, r4, r0
    4080:	1100      	asrs	r0, r0, #4
    4082:	3001      	adds	r0, #1
	log_backend_id_set(backend, id);
    4084:	7118      	strb	r0, [r3, #4]
	backend->cb->level = level;
    4086:	6863      	ldr	r3, [r4, #4]
{
    4088:	4617      	mov	r7, r2
	backend->cb->level = level;
    408a:	719a      	strb	r2, [r3, #6]
    408c:	4b0e      	ldr	r3, [pc, #56]	; (40c8 <log_backend_enable+0x54>)
    408e:	4a0f      	ldr	r2, [pc, #60]	; (40cc <log_backend_enable+0x58>)
    4090:	eba3 0802 	sub.w	r8, r3, r2
{
    4094:	460e      	mov	r6, r1
    4096:	ea4f 08d8 	mov.w	r8, r8, lsr #3
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
    409a:	2500      	movs	r5, #0
    409c:	4545      	cmp	r5, r8
    409e:	d308      	bcc.n	40b2 <log_backend_enable+0x3e>
	backend->cb->ctx = ctx;
    40a0:	6863      	ldr	r3, [r4, #4]
    40a2:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    40a4:	6863      	ldr	r3, [r4, #4]
    40a6:	2201      	movs	r2, #1
    40a8:	715a      	strb	r2, [r3, #5]
}
    40aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_log_notify_backend_enabled();
    40ae:	f7ff bd5b 	b.w	3b68 <z_log_notify_backend_enabled>
    40b2:	2100      	movs	r1, #0
    40b4:	b22a      	sxth	r2, r5
    40b6:	463b      	mov	r3, r7
    40b8:	4620      	mov	r0, r4
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
    40ba:	3501      	adds	r5, #1
    40bc:	f7ff ff84 	bl	3fc8 <z_impl_log_filter_set>
    40c0:	b2ad      	uxth	r5, r5
    40c2:	e7eb      	b.n	409c <log_backend_enable+0x28>
    40c4:	00027a60 	.word	0x00027a60
    40c8:	00027a60 	.word	0x00027a60
    40cc:	00027928 	.word	0x00027928

000040d0 <log_backend_disable>:
{
    40d0:	b570      	push	{r4, r5, r6, lr}
	return backend->cb->active;
    40d2:	6843      	ldr	r3, [r0, #4]
	if (log_backend_is_active(backend)) {
    40d4:	795b      	ldrb	r3, [r3, #5]
{
    40d6:	4605      	mov	r5, r0
	if (log_backend_is_active(backend)) {
    40d8:	b91b      	cbnz	r3, 40e2 <log_backend_disable+0x12>
	backend->cb->active = false;
    40da:	686b      	ldr	r3, [r5, #4]
    40dc:	2200      	movs	r2, #0
    40de:	715a      	strb	r2, [r3, #5]
}
    40e0:	bd70      	pop	{r4, r5, r6, pc}
    40e2:	4e08      	ldr	r6, [pc, #32]	; (4104 <log_backend_disable+0x34>)
    40e4:	4b08      	ldr	r3, [pc, #32]	; (4108 <log_backend_disable+0x38>)
    40e6:	1af6      	subs	r6, r6, r3
    40e8:	08f6      	lsrs	r6, r6, #3
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
    40ea:	2400      	movs	r4, #0
    40ec:	42b4      	cmp	r4, r6
    40ee:	d2f4      	bcs.n	40da <log_backend_disable+0xa>
    40f0:	2300      	movs	r3, #0
    40f2:	b222      	sxth	r2, r4
    40f4:	4619      	mov	r1, r3
    40f6:	4628      	mov	r0, r5
    40f8:	3401      	adds	r4, #1
    40fa:	f7ff ff65 	bl	3fc8 <z_impl_log_filter_set>
    40fe:	b2a4      	uxth	r4, r4
    4100:	e7f4      	b.n	40ec <log_backend_disable+0x1c>
    4102:	bf00      	nop
    4104:	00027a60 	.word	0x00027a60
    4108:	00027928 	.word	0x00027928

0000410c <log_filter_get>:
{
    410c:	4601      	mov	r1, r0
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    410e:	4618      	mov	r0, r3
    4110:	b163      	cbz	r3, 412c <log_filter_get+0x20>
		if (source_id < 0) {
    4112:	2a00      	cmp	r2, #0
    4114:	db14      	blt.n	4140 <log_filter_get+0x34>
	return backend->cb->id;
    4116:	684b      	ldr	r3, [r1, #4]
		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
    4118:	490a      	ldr	r1, [pc, #40]	; (4144 <log_filter_get+0x38>)
    411a:	791b      	ldrb	r3, [r3, #4]
    411c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    4120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4124:	40d8      	lsrs	r0, r3
    4126:	f000 0007 	and.w	r0, r0, #7
    412a:	4770      	bx	lr
    412c:	4b06      	ldr	r3, [pc, #24]	; (4148 <log_filter_get+0x3c>)
    412e:	4907      	ldr	r1, [pc, #28]	; (414c <log_filter_get+0x40>)
    4130:	1ac9      	subs	r1, r1, r3
		if (source_id < log_src_cnt_get(domain_id)) {
    4132:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    4136:	d204      	bcs.n	4142 <log_filter_get+0x36>
			return __log_const_start[source_id].level;
    4138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    413c:	7918      	ldrb	r0, [r3, #4]
    413e:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    4140:	2004      	movs	r0, #4
}
    4142:	4770      	bx	lr
    4144:	20000ac0 	.word	0x20000ac0
    4148:	00027928 	.word	0x00027928
    414c:	00027a60 	.word	0x00027a60

00004150 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    4150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4154:	b08f      	sub	sp, #60	; 0x3c
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    4156:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    415a:	f3c1 2649 	ubfx	r6, r1, #9, #10
    415e:	9005      	str	r0, [sp, #20]
    4160:	460d      	mov	r5, r1
    4162:	4690      	mov	r8, r2
    4164:	4699      	mov	r9, r3
    4166:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    4168:	2e00      	cmp	r6, #0
    416a:	d03c      	beq.n	41e6 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    416c:	f04f 0b04 	mov.w	fp, #4
    4170:	af09      	add	r7, sp, #36	; 0x24
    4172:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    4176:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    4178:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
    417a:	ab0b      	add	r3, sp, #44	; 0x2c
    417c:	f8cd b008 	str.w	fp, [sp, #8]
    4180:	9701      	str	r7, [sp, #4]
    4182:	f8cd a000 	str.w	sl, [sp]
    4186:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
    4188:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    418c:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    418e:	9607      	str	r6, [sp, #28]
    4190:	f7fe faa8 	bl	26e4 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    4194:	f3c0 0309 	ubfx	r3, r0, #0, #10
    4198:	1918      	adds	r0, r3, r4
    419a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    419e:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    41a0:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    41a2:	f363 2552 	bfi	r5, r3, #9, #10
    41a6:	9306      	str	r3, [sp, #24]
    41a8:	f7ff fd58 	bl	3c5c <z_log_msg_alloc>
		if (msg) {
    41ac:	4604      	mov	r4, r0
    41ae:	b178      	cbz	r0, 41d0 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
    41b0:	9b06      	ldr	r3, [sp, #24]
    41b2:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    41b4:	3010      	adds	r0, #16
    41b6:	2200      	movs	r2, #0
    41b8:	900b      	str	r0, [sp, #44]	; 0x2c
    41ba:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    41bc:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    41c0:	4a0c      	ldr	r2, [pc, #48]	; (41f4 <z_impl_z_log_msg_static_create+0xa4>)
    41c2:	9907      	ldr	r1, [sp, #28]
    41c4:	f8cd a000 	str.w	sl, [sp]
    41c8:	ab0b      	add	r3, sp, #44	; 0x2c
    41ca:	4640      	mov	r0, r8
    41cc:	f7fe fa8a 	bl	26e4 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    41d0:	f366 2552 	bfi	r5, r6, #9, #10
    41d4:	9905      	ldr	r1, [sp, #20]
    41d6:	464b      	mov	r3, r9
    41d8:	462a      	mov	r2, r5
    41da:	4620      	mov	r0, r4
}
    41dc:	b00f      	add	sp, #60	; 0x3c
    41de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    41e2:	f01d bea7 	b.w	21f34 <z_log_msg_finalize>
    41e6:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    41ea:	0880      	lsrs	r0, r0, #2
    41ec:	f7ff fd36 	bl	3c5c <z_log_msg_alloc>
    41f0:	4604      	mov	r4, r0
    41f2:	e7ed      	b.n	41d0 <z_impl_z_log_msg_static_create+0x80>
    41f4:	00021f09 	.word	0x00021f09

000041f8 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    41f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41fc:	b087      	sub	sp, #28
    41fe:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    4202:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    4206:	4604      	mov	r4, r0
    4208:	460f      	mov	r7, r1
    420a:	4693      	mov	fp, r2
    420c:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    420e:	b3b6      	cbz	r6, 427e <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    4210:	2110      	movs	r1, #16
    4212:	f8cd 9000 	str.w	r9, [sp]
    4216:	4633      	mov	r3, r6
    4218:	4652      	mov	r2, sl
    421a:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    421c:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    4220:	f7fe f88a 	bl	2338 <cbvprintf_package>
    4224:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    4226:	4b17      	ldr	r3, [pc, #92]	; (4284 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    4228:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    422a:	f004 0407 	and.w	r4, r4, #7
    422e:	f00b 0b07 	and.w	fp, fp, #7
    4232:	00e4      	lsls	r4, r4, #3
    4234:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    4238:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
    423c:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    4240:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    4242:	4408      	add	r0, r1
	struct log_msg_desc desc =
    4244:	4b10      	ldr	r3, [pc, #64]	; (4288 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    4246:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    424a:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    424e:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    4250:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    4252:	f7ff fd03 	bl	3c5c <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    4256:	4605      	mov	r5, r0
    4258:	b140      	cbz	r0, 426c <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    425a:	b13e      	cbz	r6, 426c <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    425c:	9903      	ldr	r1, [sp, #12]
    425e:	f8cd 9000 	str.w	r9, [sp]
    4262:	4633      	mov	r3, r6
    4264:	4652      	mov	r2, sl
    4266:	3010      	adds	r0, #16
    4268:	f7fe f866 	bl	2338 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    426c:	4643      	mov	r3, r8
    426e:	4622      	mov	r2, r4
    4270:	4639      	mov	r1, r7
    4272:	4628      	mov	r0, r5
	}
}
    4274:	b007      	add	sp, #28
    4276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    427a:	f01d be5b 	b.w	21f34 <z_log_msg_finalize>
		plen = 0;
    427e:	4631      	mov	r1, r6
    4280:	e7d1      	b.n	4226 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    4282:	bf00      	nop
    4284:	0007fe00 	.word	0x0007fe00
    4288:	7ff80000 	.word	0x7ff80000

0000428c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    428c:	b40e      	push	{r1, r2, r3}
    428e:	b503      	push	{r0, r1, lr}
    4290:	ab03      	add	r3, sp, #12
    4292:	4601      	mov	r1, r0
    4294:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4298:	4804      	ldr	r0, [pc, #16]	; (42ac <print_formatted+0x20>)
	va_start(args, fmt);
    429a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    429c:	f01d fe71 	bl	21f82 <cbvprintf>
	va_end(args);

	return length;
}
    42a0:	b002      	add	sp, #8
    42a2:	f85d eb04 	ldr.w	lr, [sp], #4
    42a6:	b003      	add	sp, #12
    42a8:	4770      	bx	lr
    42aa:	bf00      	nop
    42ac:	00021fab 	.word	0x00021fab

000042b0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    42b0:	06ca      	lsls	r2, r1, #27
    42b2:	d405      	bmi.n	42c0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    42b4:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    42b6:	bf4c      	ite	mi
    42b8:	4902      	ldrmi	r1, [pc, #8]	; (42c4 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    42ba:	4903      	ldrpl	r1, [pc, #12]	; (42c8 <newline_print+0x18>)
    42bc:	f7ff bfe6 	b.w	428c <print_formatted>
	}
}
    42c0:	4770      	bx	lr
    42c2:	bf00      	nop
    42c4:	0002a597 	.word	0x0002a597
    42c8:	0002a0dc 	.word	0x0002a0dc

000042cc <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    42cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42d0:	b089      	sub	sp, #36	; 0x24
    42d2:	469b      	mov	fp, r3
    42d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    42d8:	9304      	str	r3, [sp, #16]
    42da:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    42de:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    42e0:	9b04      	ldr	r3, [sp, #16]
{
    42e2:	9206      	str	r2, [sp, #24]
    42e4:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    42e8:	4604      	mov	r4, r0
    42ea:	460d      	mov	r5, r1
	if (!raw_string) {
    42ec:	2b00      	cmp	r3, #0
    42ee:	f000 8087 	beq.w	4400 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    42f2:	f006 0308 	and.w	r3, r6, #8
    42f6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    42f8:	f01d fe04 	bl	21f04 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    42fc:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    4300:	4602      	mov	r2, r0
    4302:	2800      	cmp	r0, #0
    4304:	d04b      	beq.n	439e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    4306:	4986      	ldr	r1, [pc, #536]	; (4520 <log_output_process+0x254>)
    4308:	4620      	mov	r0, r4
    430a:	f7ff ffbf 	bl	428c <print_formatted>
    430e:	4680      	mov	r8, r0
	if (stamp) {
    4310:	f1ba 0f00 	cmp.w	sl, #0
    4314:	d008      	beq.n	4328 <log_output_process+0x5c>
	if (!format) {
    4316:	f016 0f44 	tst.w	r6, #68	; 0x44
    431a:	d142      	bne.n	43a2 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    431c:	4981      	ldr	r1, [pc, #516]	; (4524 <log_output_process+0x258>)
    431e:	462a      	mov	r2, r5
    4320:	4620      	mov	r0, r4
    4322:	f7ff ffb3 	bl	428c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    4326:	4480      	add	r8, r0
	if (color) {
    4328:	f006 0301 	and.w	r3, r6, #1
    432c:	b15b      	cbz	r3, 4346 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    432e:	4b7e      	ldr	r3, [pc, #504]	; (4528 <log_output_process+0x25c>)
    4330:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    4332:	497e      	ldr	r1, [pc, #504]	; (452c <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    4334:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    4338:	4b7d      	ldr	r3, [pc, #500]	; (4530 <log_output_process+0x264>)
    433a:	4620      	mov	r0, r4
    433c:	2a00      	cmp	r2, #0
    433e:	bf08      	it	eq
    4340:	461a      	moveq	r2, r3
    4342:	f7ff ffa3 	bl	428c <print_formatted>
	if (level_on) {
    4346:	f006 0308 	and.w	r3, r6, #8
    434a:	2b00      	cmp	r3, #0
    434c:	d055      	beq.n	43fa <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    434e:	4b79      	ldr	r3, [pc, #484]	; (4534 <log_output_process+0x268>)
    4350:	9a04      	ldr	r2, [sp, #16]
    4352:	4979      	ldr	r1, [pc, #484]	; (4538 <log_output_process+0x26c>)
    4354:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4358:	4620      	mov	r0, r4
    435a:	f7ff ff97 	bl	428c <print_formatted>
    435e:	4605      	mov	r5, r0
	if (domain) {
    4360:	9b06      	ldr	r3, [sp, #24]
    4362:	b12b      	cbz	r3, 4370 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    4364:	4975      	ldr	r1, [pc, #468]	; (453c <log_output_process+0x270>)
    4366:	461a      	mov	r2, r3
    4368:	4620      	mov	r0, r4
    436a:	f7ff ff8f 	bl	428c <print_formatted>
    436e:	4405      	add	r5, r0
	if (source) {
    4370:	f1bb 0f00 	cmp.w	fp, #0
    4374:	d005      	beq.n	4382 <log_output_process+0xb6>
		total += print_formatted(output,
    4376:	4972      	ldr	r1, [pc, #456]	; (4540 <log_output_process+0x274>)
    4378:	465a      	mov	r2, fp
    437a:	4620      	mov	r0, r4
    437c:	f7ff ff86 	bl	428c <print_formatted>
    4380:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    4382:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    4384:	f1b9 0f00 	cmp.w	r9, #0
    4388:	d149      	bne.n	441e <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    438a:	2f00      	cmp	r7, #0
    438c:	d14f      	bne.n	442e <log_output_process+0x162>
	if (color) {
    438e:	07f3      	lsls	r3, r6, #31
    4390:	f100 80c0 	bmi.w	4514 <log_output_process+0x248>
	newline_print(output, flags);
    4394:	4631      	mov	r1, r6
    4396:	4620      	mov	r0, r4
    4398:	f7ff ff8a 	bl	42b0 <newline_print>
}
    439c:	e0b4      	b.n	4508 <log_output_process+0x23c>
	uint32_t length = 0U;
    439e:	4680      	mov	r8, r0
    43a0:	e7b6      	b.n	4310 <log_output_process+0x44>
	} else if (freq != 0U) {
    43a2:	4b68      	ldr	r3, [pc, #416]	; (4544 <log_output_process+0x278>)
    43a4:	6818      	ldr	r0, [r3, #0]
    43a6:	2800      	cmp	r0, #0
    43a8:	d0bd      	beq.n	4326 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    43aa:	4b67      	ldr	r3, [pc, #412]	; (4548 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    43ac:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    43b6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    43ba:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    43be:	fb00 5513 	mls	r5, r0, r3, r5
    43c2:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    43c6:	fb0e f505 	mul.w	r5, lr, r5
    43ca:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    43ce:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    43d0:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    43d4:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    43d8:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    43dc:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    43e0:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    43e4:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    43e6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    43ea:	4958      	ldr	r1, [pc, #352]	; (454c <log_output_process+0x280>)
    43ec:	e9cd c501 	strd	ip, r5, [sp, #4]
    43f0:	4652      	mov	r2, sl
    43f2:	4620      	mov	r0, r4
    43f4:	f7ff ff4a 	bl	428c <print_formatted>
    43f8:	e795      	b.n	4326 <log_output_process+0x5a>
	int total = 0;
    43fa:	f006 0508 	and.w	r5, r6, #8
    43fe:	e7af      	b.n	4360 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    4400:	f1bb 0f01 	cmp.w	fp, #1
    4404:	d106      	bne.n	4414 <log_output_process+0x148>
	if (package) {
    4406:	f1b9 0f00 	cmp.w	r9, #0
    440a:	d164      	bne.n	44d6 <log_output_process+0x20a>
	if (data_len) {
    440c:	2f00      	cmp	r7, #0
    440e:	d07b      	beq.n	4508 <log_output_process+0x23c>
		prefix_offset = 0;
    4410:	2500      	movs	r5, #0
    4412:	e00c      	b.n	442e <log_output_process+0x162>
	if (package) {
    4414:	f1b9 0f00 	cmp.w	r9, #0
    4418:	d0f8      	beq.n	440c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    441a:	484d      	ldr	r0, [pc, #308]	; (4550 <log_output_process+0x284>)
    441c:	e05c      	b.n	44d8 <log_output_process+0x20c>
		cb = out_func;
    441e:	484d      	ldr	r0, [pc, #308]	; (4554 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    4420:	494d      	ldr	r1, [pc, #308]	; (4558 <log_output_process+0x28c>)
    4422:	464b      	mov	r3, r9
    4424:	4622      	mov	r2, r4
    4426:	f01c fcfa 	bl	20e1e <cbpprintf_external>
	if (data_len) {
    442a:	2f00      	cmp	r7, #0
    442c:	d068      	beq.n	4500 <log_output_process+0x234>
		print_formatted(output, " ");
    442e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 455c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    4432:	f8df a12c 	ldr.w	sl, [pc, #300]	; 4560 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    4436:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    4438:	4631      	mov	r1, r6
    443a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    443c:	46b8      	mov	r8, r7
    443e:	bf28      	it	cs
    4440:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    4444:	f7ff ff34 	bl	42b0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    4448:	f04f 0b00 	mov.w	fp, #0
    444c:	455d      	cmp	r5, fp
    444e:	dc45      	bgt.n	44dc <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    4450:	9b05      	ldr	r3, [sp, #20]
    4452:	4651      	mov	r1, sl
    4454:	781a      	ldrb	r2, [r3, #0]
    4456:	4620      	mov	r0, r4
    4458:	f7ff ff18 	bl	428c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    445c:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    4460:	f01b 0f07 	tst.w	fp, #7
    4464:	d103      	bne.n	446e <log_output_process+0x1a2>
			print_formatted(output, " ");
    4466:	4649      	mov	r1, r9
    4468:	4620      	mov	r0, r4
    446a:	f7ff ff0f 	bl	428c <print_formatted>
		if (i < length) {
    446e:	45d8      	cmp	r8, fp
    4470:	d93b      	bls.n	44ea <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    4472:	9b05      	ldr	r3, [sp, #20]
    4474:	4651      	mov	r1, sl
    4476:	f813 200b 	ldrb.w	r2, [r3, fp]
    447a:	4620      	mov	r0, r4
    447c:	f7ff ff06 	bl	428c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4480:	f10b 0b01 	add.w	fp, fp, #1
    4484:	f1bb 0f10 	cmp.w	fp, #16
    4488:	d1ea      	bne.n	4460 <log_output_process+0x194>
	print_formatted(output, "|");
    448a:	4936      	ldr	r1, [pc, #216]	; (4564 <log_output_process+0x298>)
    448c:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    448e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    4492:	f7ff fefb 	bl	428c <print_formatted>
		if (i < length) {
    4496:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    4498:	9b05      	ldr	r3, [sp, #20]
    449a:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    449c:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    44a0:	295f      	cmp	r1, #95	; 0x5f
    44a2:	bf28      	it	cs
    44a4:	222e      	movcs	r2, #46	; 0x2e
    44a6:	4930      	ldr	r1, [pc, #192]	; (4568 <log_output_process+0x29c>)
    44a8:	4620      	mov	r0, r4
    44aa:	f7ff feef 	bl	428c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    44ae:	f10b 0b01 	add.w	fp, fp, #1
    44b2:	f1bb 0f10 	cmp.w	fp, #16
    44b6:	d01d      	beq.n	44f4 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    44b8:	f01b 0f07 	tst.w	fp, #7
    44bc:	d103      	bne.n	44c6 <log_output_process+0x1fa>
			print_formatted(output, " ");
    44be:	4649      	mov	r1, r9
    44c0:	4620      	mov	r0, r4
    44c2:	f7ff fee3 	bl	428c <print_formatted>
		if (i < length) {
    44c6:	45d8      	cmp	r8, fp
    44c8:	465a      	mov	r2, fp
    44ca:	d8e5      	bhi.n	4498 <log_output_process+0x1cc>
			print_formatted(output, " ");
    44cc:	4649      	mov	r1, r9
    44ce:	4620      	mov	r0, r4
    44d0:	f7ff fedc 	bl	428c <print_formatted>
    44d4:	e7eb      	b.n	44ae <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    44d6:	481f      	ldr	r0, [pc, #124]	; (4554 <log_output_process+0x288>)
		prefix_offset = 0;
    44d8:	9d04      	ldr	r5, [sp, #16]
    44da:	e7a1      	b.n	4420 <log_output_process+0x154>
		print_formatted(output, " ");
    44dc:	4649      	mov	r1, r9
    44de:	4620      	mov	r0, r4
    44e0:	f7ff fed4 	bl	428c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    44e4:	f10b 0b01 	add.w	fp, fp, #1
    44e8:	e7b0      	b.n	444c <log_output_process+0x180>
			print_formatted(output, "   ");
    44ea:	4920      	ldr	r1, [pc, #128]	; (456c <log_output_process+0x2a0>)
    44ec:	4620      	mov	r0, r4
    44ee:	f7ff fecd 	bl	428c <print_formatted>
    44f2:	e7c5      	b.n	4480 <log_output_process+0x1b4>
		data += length;
    44f4:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    44f6:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    44fa:	4443      	add	r3, r8
    44fc:	9305      	str	r3, [sp, #20]
	} while (len);
    44fe:	d19a      	bne.n	4436 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    4500:	9b04      	ldr	r3, [sp, #16]
    4502:	2b00      	cmp	r3, #0
    4504:	f47f af43 	bne.w	438e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    4508:	4620      	mov	r0, r4
}
    450a:	b009      	add	sp, #36	; 0x24
    450c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    4510:	f01d bd3e 	b.w	21f90 <log_output_flush>
		print_formatted(output, "%s", log_color);
    4514:	4a06      	ldr	r2, [pc, #24]	; (4530 <log_output_process+0x264>)
    4516:	4905      	ldr	r1, [pc, #20]	; (452c <log_output_process+0x260>)
    4518:	4620      	mov	r0, r4
    451a:	f7ff feb7 	bl	428c <print_formatted>
}
    451e:	e739      	b.n	4394 <log_output_process+0xc8>
    4520:	0002a02a 	.word	0x0002a02a
    4524:	0002a02e 	.word	0x0002a02e
    4528:	00027c68 	.word	0x00027c68
    452c:	0002a7ba 	.word	0x0002a7ba
    4530:	0002a025 	.word	0x0002a025
    4534:	00027c7c 	.word	0x00027c7c
    4538:	0002a053 	.word	0x0002a053
    453c:	0002a059 	.word	0x0002a059
    4540:	0002a05d 	.word	0x0002a05d
    4544:	20002194 	.word	0x20002194
    4548:	20002190 	.word	0x20002190
    454c:	0002a037 	.word	0x0002a037
    4550:	00021fe1 	.word	0x00021fe1
    4554:	00021fab 	.word	0x00021fab
    4558:	00021f83 	.word	0x00021f83
    455c:	0002a06a 	.word	0x0002a06a
    4560:	0002a062 	.word	0x0002a062
    4564:	0002a06c 	.word	0x0002a06c
    4568:	00029f0a 	.word	0x00029f0a
    456c:	0002a068 	.word	0x0002a068

00004570 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    4570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return msg->hdr.desc.level;
    4574:	880f      	ldrh	r7, [r1, #0]
	return msg->hdr.source;
    4576:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    4578:	688e      	ldr	r6, [r1, #8]
    457a:	b086      	sub	sp, #24
    457c:	4605      	mov	r5, r0
    457e:	460c      	mov	r4, r1
    4580:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    4582:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    4586:	b15b      	cbz	r3, 45a0 <log_output_msg_process+0x30>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    4588:	4a13      	ldr	r2, [pc, #76]	; (45d8 <log_output_msg_process+0x68>)
    458a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    458c:	f343 018f 	sbfx	r1, r3, #2, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    4590:	2900      	cmp	r1, #0
    4592:	db1f      	blt.n	45d4 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    4594:	7820      	ldrb	r0, [r4, #0]
    4596:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    459a:	f7ff fccd 	bl	3f38 <log_source_name_get>
    459e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    45a0:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    45a2:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    45a4:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    45a8:	9700      	str	r7, [sp, #0]
    45aa:	f3c2 2249 	ubfx	r2, r2, #9, #10
    45ae:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    45b0:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    45b4:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    45b8:	bf08      	it	eq
    45ba:	2100      	moveq	r1, #0
    45bc:	e9cd 0803 	strd	r0, r8, [sp, #12]
    45c0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    45c4:	2200      	movs	r2, #0
    45c6:	4631      	mov	r1, r6
    45c8:	4628      	mov	r0, r5
    45ca:	f7ff fe7f 	bl	42cc <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    45ce:	b006      	add	sp, #24
    45d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    45d4:	2300      	movs	r3, #0
    45d6:	e7e3      	b.n	45a0 <log_output_msg_process+0x30>
    45d8:	20000ac0 	.word	0x20000ac0

000045dc <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    45dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    45de:	f242 730f 	movw	r3, #9999	; 0x270f
    45e2:	428b      	cmp	r3, r1
    45e4:	bf28      	it	cs
    45e6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    45e8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    45ea:	4a0f      	ldr	r2, [pc, #60]	; (4628 <log_output_dropped_process+0x4c>)
{
    45ec:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    45ee:	2105      	movs	r1, #5
    45f0:	4668      	mov	r0, sp
    45f2:	f01c fc8e 	bl	20f12 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    45f6:	6863      	ldr	r3, [r4, #4]
    45f8:	490c      	ldr	r1, [pc, #48]	; (462c <log_output_dropped_process+0x50>)
    45fa:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    45fc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    45fe:	220b      	movs	r2, #11
    4600:	4628      	mov	r0, r5
    4602:	f01d fcb1 	bl	21f68 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    4606:	6863      	ldr	r3, [r4, #4]
    4608:	4632      	mov	r2, r6
    460a:	4669      	mov	r1, sp
    460c:	4628      	mov	r0, r5
    460e:	685b      	ldr	r3, [r3, #4]
    4610:	f01d fcaa 	bl	21f68 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    4614:	6863      	ldr	r3, [r4, #4]
    4616:	4906      	ldr	r1, [pc, #24]	; (4630 <log_output_dropped_process+0x54>)
    4618:	685b      	ldr	r3, [r3, #4]
    461a:	221b      	movs	r2, #27
    461c:	4628      	mov	r0, r5
    461e:	f01d fca3 	bl	21f68 <buffer_write>
		     output->control_block->ctx);
}
    4622:	b002      	add	sp, #8
    4624:	bd70      	pop	{r4, r5, r6, pc}
    4626:	bf00      	nop
    4628:	0002d1d0 	.word	0x0002d1d0
    462c:	0002a08a 	.word	0x0002a08a
    4630:	0002a06e 	.word	0x0002a06e

00004634 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    4634:	4a07      	ldr	r2, [pc, #28]	; (4654 <log_output_timestamp_freq_set+0x20>)
    4636:	2100      	movs	r1, #0
    4638:	2301      	movs	r3, #1
    463a:	4290      	cmp	r0, r2
    463c:	d806      	bhi.n	464c <log_output_timestamp_freq_set+0x18>
    463e:	4a06      	ldr	r2, [pc, #24]	; (4658 <log_output_timestamp_freq_set+0x24>)
    4640:	b901      	cbnz	r1, 4644 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    4642:	2301      	movs	r3, #1
    4644:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    4646:	4b05      	ldr	r3, [pc, #20]	; (465c <log_output_timestamp_freq_set+0x28>)
    4648:	6018      	str	r0, [r3, #0]
}
    464a:	4770      	bx	lr
		frequency /= 2U;
    464c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    464e:	005b      	lsls	r3, r3, #1
    4650:	2101      	movs	r1, #1
    4652:	e7f2      	b.n	463a <log_output_timestamp_freq_set+0x6>
    4654:	000f4240 	.word	0x000f4240
    4658:	20002190 	.word	0x20002190
    465c:	20002194 	.word	0x20002194

00004660 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    4660:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    4662:	2804      	cmp	r0, #4
	entry->handler = NULL;
    4664:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    4666:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    4668:	bf98      	it	ls
    466a:	4b04      	ldrls	r3, [pc, #16]	; (467c <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    466c:	4a04      	ldr	r2, [pc, #16]	; (4680 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    466e:	bf98      	it	ls
    4670:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    4674:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    4676:	600b      	str	r3, [r1, #0]
}
    4678:	4770      	bx	lr
    467a:	bf00      	nop
    467c:	00027dd8 	.word	0x00027dd8
    4680:	00027b00 	.word	0x00027b00

00004684 <backend_name_get>:

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    4684:	4a06      	ldr	r2, [pc, #24]	; (46a0 <backend_name_get+0x1c>)
    4686:	608a      	str	r2, [r1, #8]
	entry->handler = NULL;
    4688:	2300      	movs	r3, #0
	entry->syntax  = NULL;

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    468a:	4a06      	ldr	r2, [pc, #24]	; (46a4 <backend_name_get+0x20>)
    468c:	4806      	ldr	r0, [pc, #24]	; (46a8 <backend_name_get+0x24>)
	entry->handler = NULL;
    468e:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    4690:	604b      	str	r3, [r1, #4]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4692:	4282      	cmp	r2, r0
	entry->syntax  = NULL;
    4694:	600b      	str	r3, [r1, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4696:	d300      	bcc.n	469a <backend_name_get+0x16>
		entry->syntax = backend->name;
	}
}
    4698:	4770      	bx	lr
		entry->syntax = backend->name;
    469a:	6893      	ldr	r3, [r2, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    469c:	3210      	adds	r2, #16
    469e:	e7f8      	b.n	4692 <backend_name_get+0xe>
    46a0:	00027d5c 	.word	0x00027d5c
    46a4:	00027a60 	.word	0x00027a60
    46a8:	00027a80 	.word	0x00027a80

000046ac <module_name_get>:
	entry->handler = NULL;
    46ac:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    46ae:	4a06      	ldr	r2, [pc, #24]	; (46c8 <module_name_get+0x1c>)
{
    46b0:	b510      	push	{r4, lr}
    46b2:	460c      	mov	r4, r1
	entry->handler = NULL;
    46b4:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    46b6:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    46b8:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, idx);
    46ba:	4601      	mov	r1, r0
    46bc:	4618      	mov	r0, r3
    46be:	f7ff fc3b 	bl	3f38 <log_source_name_get>
    46c2:	6020      	str	r0, [r4, #0]
}
    46c4:	bd10      	pop	{r4, pc}
    46c6:	bf00      	nop
    46c8:	00027b00 	.word	0x00027b00

000046cc <cmd_log_backends_list>:
{
    46cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    46d0:	4c0e      	ldr	r4, [pc, #56]	; (470c <cmd_log_backends_list+0x40>)
    46d2:	4e0f      	ldr	r6, [pc, #60]	; (4710 <cmd_log_backends_list+0x44>)
		shell_fprintf(shell, SHELL_NORMAL,
    46d4:	4f0f      	ldr	r7, [pc, #60]	; (4714 <cmd_log_backends_list+0x48>)
    46d6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4718 <cmd_log_backends_list+0x4c>
{
    46da:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    46dc:	42b4      	cmp	r4, r6
    46de:	d303      	bcc.n	46e8 <cmd_log_backends_list+0x1c>
}
    46e0:	2000      	movs	r0, #0
    46e2:	b002      	add	sp, #8
    46e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			      backend->cb->active ? "enabled" : "disabled",
    46e8:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    46ea:	7959      	ldrb	r1, [r3, #5]
    46ec:	791b      	ldrb	r3, [r3, #4]
    46ee:	2900      	cmp	r1, #0
    46f0:	bf0c      	ite	eq
    46f2:	463a      	moveq	r2, r7
    46f4:	4642      	movne	r2, r8
    46f6:	e9cd 2300 	strd	r2, r3, [sp]
    46fa:	2108      	movs	r1, #8
    46fc:	68a3      	ldr	r3, [r4, #8]
    46fe:	4a07      	ldr	r2, [pc, #28]	; (471c <cmd_log_backends_list+0x50>)
    4700:	4628      	mov	r0, r5
    4702:	f01d fe47 	bl	22394 <shell_fprintf>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4706:	3410      	adds	r4, #16
    4708:	e7e8      	b.n	46dc <cmd_log_backends_list+0x10>
    470a:	bf00      	nop
    470c:	00027a60 	.word	0x00027a60
    4710:	00027a80 	.word	0x00027a80
    4714:	0002dc66 	.word	0x0002dc66
    4718:	0002a0b6 	.word	0x0002a0b6
    471c:	0002a0be 	.word	0x0002a0be

00004720 <log_status>:
{
    4720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4724:	460d      	mov	r5, r1
    4726:	4604      	mov	r4, r0
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    4728:	2000      	movs	r0, #0
    472a:	f7ff fbfb 	bl	3f24 <log_src_cnt_get>
	return backend->cb->active;
    472e:	686b      	ldr	r3, [r5, #4]
	if (!log_backend_is_active(backend)) {
    4730:	795b      	ldrb	r3, [r3, #5]
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    4732:	4607      	mov	r7, r0
	if (!log_backend_is_active(backend)) {
    4734:	b923      	cbnz	r3, 4740 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
    4736:	4a1e      	ldr	r2, [pc, #120]	; (47b0 <log_status+0x90>)
    4738:	2103      	movs	r1, #3
    473a:	4620      	mov	r0, r4
    473c:	f01d fe2a 	bl	22394 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    4740:	4b1c      	ldr	r3, [pc, #112]	; (47b4 <log_status+0x94>)
    4742:	4a1d      	ldr	r2, [pc, #116]	; (47b8 <log_status+0x98>)
			      severity_lvls[compiled_lvl]);
    4744:	f8df a074 	ldr.w	sl, [pc, #116]	; 47bc <log_status+0x9c>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    4748:	2108      	movs	r1, #8
    474a:	4620      	mov	r0, r4
    474c:	f01d fe22 	bl	22394 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    4750:	4a1b      	ldr	r2, [pc, #108]	; (47c0 <log_status+0xa0>)
    4752:	2108      	movs	r1, #8
    4754:	4620      	mov	r0, r4
    4756:	f01d fe1d 	bl	22394 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    475a:	f04f 0800 	mov.w	r8, #0
    475e:	fa0f f688 	sxth.w	r6, r8
    4762:	42be      	cmp	r6, r7
    4764:	f108 0801 	add.w	r8, r8, #1
    4768:	d303      	bcc.n	4772 <log_status+0x52>
}
    476a:	2000      	movs	r0, #0
    476c:	b003      	add	sp, #12
    476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    4772:	4632      	mov	r2, r6
    4774:	2301      	movs	r3, #1
    4776:	2100      	movs	r1, #0
    4778:	4628      	mov	r0, r5
    477a:	f7ff fcc7 	bl	410c <log_filter_get>
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    477e:	2300      	movs	r3, #0
    4780:	4632      	mov	r2, r6
    4782:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    4784:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    4786:	4628      	mov	r0, r5
    4788:	f7ff fcc0 	bl	410c <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    478c:	4631      	mov	r1, r6
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    478e:	4683      	mov	fp, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    4790:	2000      	movs	r0, #0
    4792:	f7ff fbd1 	bl	3f38 <log_source_name_get>
    4796:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    479a:	9201      	str	r2, [sp, #4]
    479c:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    47a0:	9200      	str	r2, [sp, #0]
    47a2:	4603      	mov	r3, r0
    47a4:	4a07      	ldr	r2, [pc, #28]	; (47c4 <log_status+0xa4>)
    47a6:	2108      	movs	r1, #8
    47a8:	4620      	mov	r0, r4
    47aa:	f01d fdf3 	bl	22394 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    47ae:	e7d6      	b.n	475e <log_status+0x3e>
    47b0:	0002a0df 	.word	0x0002a0df
    47b4:	0002a0f1 	.word	0x0002a0f1
    47b8:	0002a0fd 	.word	0x0002a0fd
    47bc:	00027dec 	.word	0x00027dec
    47c0:	0002a11b 	.word	0x0002a11b
    47c4:	0002a158 	.word	0x0002a158

000047c8 <shell_backend_cmd_execute>:
{
    47c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    47cc:	f852 8c04 	ldr.w	r8, [r2, #-4]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    47d0:	4d13      	ldr	r5, [pc, #76]	; (4820 <shell_backend_cmd_execute+0x58>)
{
    47d2:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    47d4:	4640      	mov	r0, r8
{
    47d6:	469b      	mov	fp, r3
    47d8:	468a      	mov	sl, r1
    47da:	4617      	mov	r7, r2
	size_t slen = strlen(name);
    47dc:	f01f f9bf 	bl	23b5e <strlen>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    47e0:	4b10      	ldr	r3, [pc, #64]	; (4824 <shell_backend_cmd_execute+0x5c>)
	size_t slen = strlen(name);
    47e2:	4681      	mov	r9, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    47e4:	429d      	cmp	r5, r3
    47e6:	d308      	bcc.n	47fa <shell_backend_cmd_execute+0x32>
		shell_error(shell, "Invalid backend: %s", name);
    47e8:	4a0f      	ldr	r2, [pc, #60]	; (4828 <shell_backend_cmd_execute+0x60>)
    47ea:	4643      	mov	r3, r8
    47ec:	2101      	movs	r1, #1
    47ee:	4630      	mov	r0, r6
    47f0:	f01d fdd0 	bl	22394 <shell_fprintf>
		return -ENOEXEC;
    47f4:	f06f 0407 	mvn.w	r4, #7
    47f8:	e00c      	b.n	4814 <shell_backend_cmd_execute+0x4c>
		if (strncmp(name, backend->name, slen) == 0) {
    47fa:	68a9      	ldr	r1, [r5, #8]
    47fc:	464a      	mov	r2, r9
    47fe:	4640      	mov	r0, r8
    4800:	f01f f9c9 	bl	23b96 <strncmp>
    4804:	4b07      	ldr	r3, [pc, #28]	; (4824 <shell_backend_cmd_execute+0x5c>)
    4806:	4604      	mov	r4, r0
    4808:	b938      	cbnz	r0, 481a <shell_backend_cmd_execute+0x52>
		func(shell, backend, argc, argv);
    480a:	463b      	mov	r3, r7
    480c:	4652      	mov	r2, sl
    480e:	4629      	mov	r1, r5
    4810:	4630      	mov	r0, r6
    4812:	47d8      	blx	fp
}
    4814:	4620      	mov	r0, r4
    4816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    481a:	3510      	adds	r5, #16
    481c:	e7e2      	b.n	47e4 <shell_backend_cmd_execute+0x1c>
    481e:	bf00      	nop
    4820:	00027a60 	.word	0x00027a60
    4824:	00027a80 	.word	0x00027a80
    4828:	0002a16c 	.word	0x0002a16c

0000482c <cmd_log_backend_status>:
{
    482c:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    482e:	4b02      	ldr	r3, [pc, #8]	; (4838 <cmd_log_backend_status+0xc>)
    4830:	f7ff ffca 	bl	47c8 <shell_backend_cmd_execute>
}
    4834:	2000      	movs	r0, #0
    4836:	bd08      	pop	{r3, pc}
    4838:	00004721 	.word	0x00004721

0000483c <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    483c:	4b01      	ldr	r3, [pc, #4]	; (4844 <cmd_log_backend_halt+0x8>)
    483e:	f7ff bfc3 	b.w	47c8 <shell_backend_cmd_execute>
    4842:	bf00      	nop
    4844:	00021ffd 	.word	0x00021ffd

00004848 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    4848:	4b01      	ldr	r3, [pc, #4]	; (4850 <cmd_log_backend_go+0x8>)
    484a:	f7ff bfbd 	b.w	47c8 <shell_backend_cmd_execute>
    484e:	bf00      	nop
    4850:	00022005 	.word	0x00022005

00004854 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    4854:	4b01      	ldr	r3, [pc, #4]	; (485c <cmd_log_backend_enable+0x8>)
    4856:	f7ff bfb7 	b.w	47c8 <shell_backend_cmd_execute>
    485a:	bf00      	nop
    485c:	000049ed 	.word	0x000049ed

00004860 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    4860:	4b01      	ldr	r3, [pc, #4]	; (4868 <cmd_log_backend_disable+0x8>)
    4862:	f7ff bfb1 	b.w	47c8 <shell_backend_cmd_execute>
    4866:	bf00      	nop
    4868:	00022051 	.word	0x00022051

0000486c <cmd_log_mem>:
{
    486c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    486e:	4604      	mov	r4, r0
	err = log_mem_get_usage(&size, &used);
    4870:	a902      	add	r1, sp, #8
    4872:	a801      	add	r0, sp, #4
    4874:	f7ff fb46 	bl	3f04 <log_mem_get_usage>
	if (err < 0) {
    4878:	2800      	cmp	r0, #0
    487a:	da08      	bge.n	488e <cmd_log_mem+0x22>
		shell_error(sh, "Failed to get usage (mode does not support it?)");
    487c:	4620      	mov	r0, r4
    487e:	4a16      	ldr	r2, [pc, #88]	; (48d8 <cmd_log_mem+0x6c>)
    4880:	2101      	movs	r1, #1
    4882:	f01d fd87 	bl	22394 <shell_fprintf>
		return -ENOEXEC;
    4886:	f06f 0007 	mvn.w	r0, #7
}
    488a:	b004      	add	sp, #16
    488c:	bd10      	pop	{r4, pc}
	shell_print(sh, "Log message buffer utilization report:");
    488e:	4a13      	ldr	r2, [pc, #76]	; (48dc <cmd_log_mem+0x70>)
    4890:	2108      	movs	r1, #8
    4892:	4620      	mov	r0, r4
    4894:	f01d fd7e 	bl	22394 <shell_fprintf>
	shell_print(sh, "\tCapacity: %u bytes", size);
    4898:	9b01      	ldr	r3, [sp, #4]
    489a:	4a11      	ldr	r2, [pc, #68]	; (48e0 <cmd_log_mem+0x74>)
    489c:	2108      	movs	r1, #8
    489e:	4620      	mov	r0, r4
    48a0:	f01d fd78 	bl	22394 <shell_fprintf>
	shell_print(sh, "\tCurrently in use: %u bytes", used);
    48a4:	9b02      	ldr	r3, [sp, #8]
    48a6:	4a0f      	ldr	r2, [pc, #60]	; (48e4 <cmd_log_mem+0x78>)
    48a8:	2108      	movs	r1, #8
    48aa:	4620      	mov	r0, r4
    48ac:	f01d fd72 	bl	22394 <shell_fprintf>
	err = log_mem_get_max_usage(&max);
    48b0:	a803      	add	r0, sp, #12
    48b2:	f7ff fb31 	bl	3f18 <log_mem_get_max_usage>
	if (err < 0) {
    48b6:	2800      	cmp	r0, #0
    48b8:	da06      	bge.n	48c8 <cmd_log_mem+0x5c>
		shell_print(sh, "Enable CONFIG_LOG_MEM_UTILIZATION to get maximum usage");
    48ba:	4a0b      	ldr	r2, [pc, #44]	; (48e8 <cmd_log_mem+0x7c>)
    48bc:	2108      	movs	r1, #8
    48be:	4620      	mov	r0, r4
    48c0:	f01d fd68 	bl	22394 <shell_fprintf>
		return 0;
    48c4:	2000      	movs	r0, #0
    48c6:	e7e0      	b.n	488a <cmd_log_mem+0x1e>
	shell_print(sh, "\tMaximum usage: %u bytes", max);
    48c8:	9b03      	ldr	r3, [sp, #12]
    48ca:	4a08      	ldr	r2, [pc, #32]	; (48ec <cmd_log_mem+0x80>)
    48cc:	2108      	movs	r1, #8
    48ce:	4620      	mov	r0, r4
    48d0:	f01d fd60 	bl	22394 <shell_fprintf>
	return 0;
    48d4:	e7f6      	b.n	48c4 <cmd_log_mem+0x58>
    48d6:	bf00      	nop
    48d8:	0002a181 	.word	0x0002a181
    48dc:	0002a1b2 	.word	0x0002a1b2
    48e0:	0002a1da 	.word	0x0002a1da
    48e4:	0002a1ef 	.word	0x0002a1ef
    48e8:	0002a20c 	.word	0x0002a20c
    48ec:	0002a244 	.word	0x0002a244

000048f0 <shell_state_precheck>:
{
    48f0:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    48f2:	69c3      	ldr	r3, [r0, #28]
    48f4:	689b      	ldr	r3, [r3, #8]
    48f6:	791c      	ldrb	r4, [r3, #4]
    48f8:	b92c      	cbnz	r4, 4906 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    48fa:	4a04      	ldr	r2, [pc, #16]	; (490c <shell_state_precheck+0x1c>)
    48fc:	2101      	movs	r1, #1
    48fe:	f01d fd49 	bl	22394 <shell_fprintf>
    4902:	4620      	mov	r0, r4
}
    4904:	bd10      	pop	{r4, pc}
	return true;
    4906:	2001      	movs	r0, #1
    4908:	e7fc      	b.n	4904 <shell_state_precheck+0x14>
    490a:	bf00      	nop
    490c:	0002a25e 	.word	0x0002a25e

00004910 <filters_set>:
{
    4910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4914:	4607      	mov	r7, r0
    4916:	b085      	sub	sp, #20
    4918:	4689      	mov	r9, r1
    491a:	4698      	mov	r8, r3
	int cnt = all ? log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID) : argc;
    491c:	4615      	mov	r5, r2
    491e:	bbb2      	cbnz	r2, 498e <filters_set+0x7e>
    4920:	4610      	mov	r0, r2
    4922:	f7ff faff 	bl	3f24 <log_src_cnt_get>
    4926:	4606      	mov	r6, r0
	if (!backend->cb->active) {
    4928:	f8d9 3004 	ldr.w	r3, [r9, #4]
    492c:	795b      	ldrb	r3, [r3, #5]
    492e:	b923      	cbnz	r3, 493a <filters_set+0x2a>
		shell_warn(shell, "Backend not active.");
    4930:	4a2a      	ldr	r2, [pc, #168]	; (49dc <filters_set+0xcc>)
    4932:	2103      	movs	r1, #3
    4934:	4638      	mov	r0, r7
    4936:	f01d fd2d 	bl	22394 <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    493a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 49e0 <filters_set+0xd0>
    493e:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    4940:	42b4      	cmp	r4, r6
    4942:	da21      	bge.n	4988 <filters_set+0x78>
		id = all ? i : module_id_get(argv[i]);
    4944:	b33d      	cbz	r5, 4996 <filters_set+0x86>
    4946:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    494a:	9302      	str	r3, [sp, #8]
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    494c:	2000      	movs	r0, #0
    494e:	f7ff fae9 	bl	3f24 <log_src_cnt_get>
	for (i = 0U; i < modules_cnt; i++) {
    4952:	2300      	movs	r3, #0
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    4954:	4682      	mov	sl, r0
	for (i = 0U; i < modules_cnt; i++) {
    4956:	459a      	cmp	sl, r3
    4958:	d00c      	beq.n	4974 <filters_set+0x64>
		tmp_name = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i);
    495a:	4619      	mov	r1, r3
    495c:	2000      	movs	r0, #0
    495e:	9303      	str	r3, [sp, #12]
    4960:	f7ff faea 	bl	3f38 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    4964:	9902      	ldr	r1, [sp, #8]
    4966:	2240      	movs	r2, #64	; 0x40
    4968:	f01f f915 	bl	23b96 <strncmp>
    496c:	9b03      	ldr	r3, [sp, #12]
    496e:	b980      	cbnz	r0, 4992 <filters_set+0x82>
		if (id >= 0) {
    4970:	2b00      	cmp	r3, #0
    4972:	da2c      	bge.n	49ce <filters_set+0xbe>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    4974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    4978:	4a1a      	ldr	r2, [pc, #104]	; (49e4 <filters_set+0xd4>)
    497a:	2101      	movs	r1, #1
    497c:	4638      	mov	r0, r7
	for (i = 0; i < cnt; i++) {
    497e:	3401      	adds	r4, #1
			shell_error(shell, "%s: unknown source name.", argv[i]);
    4980:	f01d fd08 	bl	22394 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    4984:	42a6      	cmp	r6, r4
    4986:	dcde      	bgt.n	4946 <filters_set+0x36>
}
    4988:	b005      	add	sp, #20
    498a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int cnt = all ? log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID) : argc;
    498e:	4616      	mov	r6, r2
    4990:	e7ca      	b.n	4928 <filters_set+0x18>
	for (i = 0U; i < modules_cnt; i++) {
    4992:	3301      	adds	r3, #1
    4994:	e7df      	b.n	4956 <filters_set+0x46>
    4996:	46a2      	mov	sl, r4
    4998:	2100      	movs	r1, #0
    499a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    499c:	b222      	sxth	r2, r4
    499e:	4648      	mov	r0, r9
    49a0:	f7ff fb12 	bl	3fc8 <z_impl_log_filter_set>
			if (set_lvl != level) {
    49a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    49a6:	4283      	cmp	r3, r0
    49a8:	4604      	mov	r4, r0
    49aa:	d00d      	beq.n	49c8 <filters_set+0xb8>
					log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i) :
    49ac:	b995      	cbnz	r5, 49d4 <filters_set+0xc4>
    49ae:	4651      	mov	r1, sl
    49b0:	4628      	mov	r0, r5
    49b2:	f7ff fac1 	bl	3f38 <log_source_name_get>
    49b6:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    49b8:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
    49bc:	9200      	str	r2, [sp, #0]
    49be:	2103      	movs	r1, #3
    49c0:	4a09      	ldr	r2, [pc, #36]	; (49e8 <filters_set+0xd8>)
    49c2:	4638      	mov	r0, r7
    49c4:	f01d fce6 	bl	22394 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    49c8:	f10a 0401 	add.w	r4, sl, #1
    49cc:	e7b8      	b.n	4940 <filters_set+0x30>
    49ce:	46a2      	mov	sl, r4
			return i;
    49d0:	461c      	mov	r4, r3
    49d2:	e7e1      	b.n	4998 <filters_set+0x88>
					log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i) :
    49d4:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    49d8:	e7ee      	b.n	49b8 <filters_set+0xa8>
    49da:	bf00      	nop
    49dc:	0002a282 	.word	0x0002a282
    49e0:	00027dec 	.word	0x00027dec
    49e4:	0002a2ad 	.word	0x0002a2ad
    49e8:	0002a297 	.word	0x0002a297

000049ec <log_enable>:
{
    49ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49f0:	f8df b050 	ldr.w	fp, [pc, #80]	; 4a44 <log_enable+0x58>
	severity_level = severity_level_get(argv[1]);
    49f4:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
    49f8:	4606      	mov	r6, r0
    49fa:	4688      	mov	r8, r1
    49fc:	4691      	mov	r9, r2
    49fe:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    4a00:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    4a02:	f85b 1b04 	ldr.w	r1, [fp], #4
    4a06:	2204      	movs	r2, #4
    4a08:	4650      	mov	r0, sl
    4a0a:	f01f f8c4 	bl	23b96 <strncmp>
    4a0e:	4604      	mov	r4, r0
    4a10:	b158      	cbz	r0, 4a2a <log_enable+0x3e>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    4a12:	3701      	adds	r7, #1
    4a14:	2f05      	cmp	r7, #5
    4a16:	d1f4      	bne.n	4a02 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    4a18:	686b      	ldr	r3, [r5, #4]
    4a1a:	4a0b      	ldr	r2, [pc, #44]	; (4a48 <log_enable+0x5c>)
    4a1c:	2101      	movs	r1, #1
    4a1e:	4630      	mov	r0, r6
    4a20:	f01d fcb8 	bl	22394 <shell_fprintf>
    4a24:	f06f 0407 	mvn.w	r4, #7
    4a28:	e008      	b.n	4a3c <log_enable+0x50>
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    4a2a:	9700      	str	r7, [sp, #0]
    4a2c:	f105 0308 	add.w	r3, r5, #8
    4a30:	f1a9 0202 	sub.w	r2, r9, #2
    4a34:	4641      	mov	r1, r8
    4a36:	4630      	mov	r0, r6
    4a38:	f7ff ff6a 	bl	4910 <filters_set>
}
    4a3c:	4620      	mov	r0, r4
    4a3e:	b003      	add	sp, #12
    4a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a44:	00027dec 	.word	0x00027dec
    4a48:	0002a2c7 	.word	0x0002a2c7

00004a4c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    4a4c:	4b01      	ldr	r3, [pc, #4]	; (4a54 <log_backend_rtt_init+0x8>)
    4a4e:	2201      	movs	r2, #1
    4a50:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    4a52:	4770      	bx	lr
    4a54:	20003af9 	.word	0x20003af9

00004a58 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    4a58:	4b01      	ldr	r3, [pc, #4]	; (4a60 <format_set+0x8>)
	return 0;
}
    4a5a:	2000      	movs	r0, #0
	log_format_current = log_type;
    4a5c:	6019      	str	r1, [r3, #0]
}
    4a5e:	4770      	bx	lr
    4a60:	200021ac 	.word	0x200021ac

00004a64 <panic>:
	panic_mode = true;
    4a64:	4b02      	ldr	r3, [pc, #8]	; (4a70 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    4a66:	4803      	ldr	r0, [pc, #12]	; (4a74 <panic+0x10>)
    4a68:	2201      	movs	r2, #1
    4a6a:	701a      	strb	r2, [r3, #0]
    4a6c:	f01d ba90 	b.w	21f90 <log_output_flush>
    4a70:	20003afa 	.word	0x20003afa
    4a74:	00027e1c 	.word	0x00027e1c

00004a78 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    4a78:	4801      	ldr	r0, [pc, #4]	; (4a80 <dropped+0x8>)
    4a7a:	f7ff bdaf 	b.w	45dc <log_output_dropped_process>
    4a7e:	bf00      	nop
    4a80:	00027e1c 	.word	0x00027e1c

00004a84 <process>:
{
    4a84:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4a86:	4b06      	ldr	r3, [pc, #24]	; (4aa0 <process+0x1c>)
    4a88:	6818      	ldr	r0, [r3, #0]
{
    4a8a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4a8c:	f7ff f856 	bl	3b3c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    4a90:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4a92:	4603      	mov	r3, r0
}
    4a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    4a98:	4802      	ldr	r0, [pc, #8]	; (4aa4 <process+0x20>)
    4a9a:	220f      	movs	r2, #15
    4a9c:	4718      	bx	r3
    4a9e:	bf00      	nop
    4aa0:	200021ac 	.word	0x200021ac
    4aa4:	00027e1c 	.word	0x00027e1c

00004aa8 <on_failed_write>:
	if (retry_cnt == 0) {
    4aa8:	b910      	cbnz	r0, 4ab0 <on_failed_write+0x8>
		host_present = false;
    4aaa:	4b07      	ldr	r3, [pc, #28]	; (4ac8 <on_failed_write+0x20>)
    4aac:	7018      	strb	r0, [r3, #0]
}
    4aae:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    4ab0:	4b06      	ldr	r3, [pc, #24]	; (4acc <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    4ab2:	781b      	ldrb	r3, [r3, #0]
    4ab4:	b11b      	cbz	r3, 4abe <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    4ab6:	f241 3088 	movw	r0, #5000	; 0x1388
    4aba:	f022 bb58 	b.w	2716e <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    4abe:	20a4      	movs	r0, #164	; 0xa4
    4ac0:	2100      	movs	r1, #0
    4ac2:	f01b be3d 	b.w	20740 <z_impl_k_sleep>
    4ac6:	bf00      	nop
    4ac8:	20003af9 	.word	0x20003af9
    4acc:	20003afa 	.word	0x20003afa

00004ad0 <data_out_block_mode>:
{
    4ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    4ad4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4b4c <data_out_block_mode+0x7c>
    4ad8:	4f1d      	ldr	r7, [pc, #116]	; (4b50 <data_out_block_mode+0x80>)
{
    4ada:	4680      	mov	r8, r0
    4adc:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    4ade:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    4ae0:	f899 5000 	ldrb.w	r5, [r9]
    4ae4:	b995      	cbnz	r5, 4b0c <data_out_block_mode+0x3c>
			RTT_LOCK();
    4ae6:	f01a fc13 	bl	1f310 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4aea:	4628      	mov	r0, r5
    4aec:	4632      	mov	r2, r6
    4aee:	4641      	mov	r1, r8
    4af0:	f01a fbbc 	bl	1f26c <SEGGER_RTT_WriteSkipNoLock>
    4af4:	4605      	mov	r5, r0
			RTT_UNLOCK();
    4af6:	f01a fc15 	bl	1f324 <zephyr_rtt_mutex_unlock>
		if (ret) {
    4afa:	b1e5      	cbz	r5, 4b36 <data_out_block_mode+0x66>
	host_present = true;
    4afc:	2301      	movs	r3, #1
    4afe:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    4b00:	f899 3000 	ldrb.w	r3, [r9]
    4b04:	b973      	cbnz	r3, 4b24 <data_out_block_mode+0x54>
}
    4b06:	4630      	mov	r0, r6
    4b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4b0c:	4632      	mov	r2, r6
    4b0e:	4641      	mov	r1, r8
    4b10:	2000      	movs	r0, #0
    4b12:	f01a fbab 	bl	1f26c <SEGGER_RTT_WriteSkipNoLock>
    4b16:	4605      	mov	r5, r0
    4b18:	e7ef      	b.n	4afa <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    4b1a:	4620      	mov	r0, r4
    4b1c:	f7ff ffc4 	bl	4aa8 <on_failed_write>
    4b20:	1e65      	subs	r5, r4, #1
    4b22:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    4b24:	2000      	movs	r0, #0
    4b26:	f01a fbe9 	bl	1f2fc <SEGGER_RTT_HasDataUp>
    4b2a:	2800      	cmp	r0, #0
    4b2c:	d0eb      	beq.n	4b06 <data_out_block_mode+0x36>
    4b2e:	783b      	ldrb	r3, [r7, #0]
    4b30:	2b00      	cmp	r3, #0
    4b32:	d1f2      	bne.n	4b1a <data_out_block_mode+0x4a>
    4b34:	e7e7      	b.n	4b06 <data_out_block_mode+0x36>
		} else if (host_present) {
    4b36:	783b      	ldrb	r3, [r7, #0]
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d0e4      	beq.n	4b06 <data_out_block_mode+0x36>
			retry_cnt--;
    4b3c:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    4b3e:	4620      	mov	r0, r4
    4b40:	f7ff ffb2 	bl	4aa8 <on_failed_write>
	} while ((ret == 0) && host_present);
    4b44:	783b      	ldrb	r3, [r7, #0]
    4b46:	2b00      	cmp	r3, #0
    4b48:	d1ca      	bne.n	4ae0 <data_out_block_mode+0x10>
    4b4a:	e7dc      	b.n	4b06 <data_out_block_mode+0x36>
    4b4c:	20003afa 	.word	0x20003afa
    4b50:	20003af9 	.word	0x20003af9

00004b54 <cmd_kernel_version>:
#define THREAD_MAX_NAM_LEN 10
#endif

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    4b54:	b513      	push	{r0, r1, r4, lr}
    4b56:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    4b58:	f01a ffdc 	bl	1fb14 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    4b5c:	f3c0 2307 	ubfx	r3, r0, #8, #8
    4b60:	9301      	str	r3, [sp, #4]
    4b62:	f3c0 4307 	ubfx	r3, r0, #16, #8
    4b66:	9300      	str	r3, [sp, #0]
    4b68:	4a04      	ldr	r2, [pc, #16]	; (4b7c <cmd_kernel_version+0x28>)
    4b6a:	0e03      	lsrs	r3, r0, #24
    4b6c:	2108      	movs	r1, #8
    4b6e:	4620      	mov	r0, r4
    4b70:	f01d fc10 	bl	22394 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    4b74:	2000      	movs	r0, #0
    4b76:	b002      	add	sp, #8
    4b78:	bd10      	pop	{r4, pc}
    4b7a:	bf00      	nop
    4b7c:	0002a492 	.word	0x0002a492

00004b80 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    4b80:	b538      	push	{r3, r4, r5, lr}
    4b82:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    4b84:	f022 faf1 	bl	2716a <z_impl_k_uptime_ticks>
    4b88:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    4b8c:	fba0 2305 	umull	r2, r3, r0, r5
    4b90:	fb05 3301 	mla	r3, r5, r1, r3
    4b94:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    4b96:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    4b9a:	4620      	mov	r0, r4
    4b9c:	4a02      	ldr	r2, [pc, #8]	; (4ba8 <cmd_kernel_uptime+0x28>)
    4b9e:	2108      	movs	r1, #8
    4ba0:	f01d fbf8 	bl	22394 <shell_fprintf>
	return 0;
}
    4ba4:	2000      	movs	r0, #0
    4ba6:	bd38      	pop	{r3, r4, r5, pc}
    4ba8:	0002a4ab 	.word	0x0002a4ab

00004bac <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    4bac:	b510      	push	{r4, lr}
    4bae:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    4bb0:	f019 fa32 	bl	1e018 <sys_clock_elapsed>
    4bb4:	4a08      	ldr	r2, [pc, #32]	; (4bd8 <cmd_kernel_threads+0x2c>)
    4bb6:	4603      	mov	r3, r0
    4bb8:	2108      	movs	r1, #8
    4bba:	4620      	mov	r0, r4
    4bbc:	f01d fbea 	bl	22394 <shell_fprintf>
	shell_print(shell, "Threads:");
    4bc0:	4a06      	ldr	r2, [pc, #24]	; (4bdc <cmd_kernel_threads+0x30>)
    4bc2:	4620      	mov	r0, r4
    4bc4:	2108      	movs	r1, #8
    4bc6:	f01d fbe5 	bl	22394 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    4bca:	4805      	ldr	r0, [pc, #20]	; (4be0 <cmd_kernel_threads+0x34>)
    4bcc:	4621      	mov	r1, r4
    4bce:	f01a fe1b 	bl	1f808 <k_thread_foreach>
	return 0;
}
    4bd2:	2000      	movs	r0, #0
    4bd4:	bd10      	pop	{r4, pc}
    4bd6:	bf00      	nop
    4bd8:	0002a4ba 	.word	0x0002a4ba
    4bdc:	0002a4d9 	.word	0x0002a4d9
    4be0:	00004be5 	.word	0x00004be5

00004be4 <shell_tdata_dump>:
{
    4be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4be6:	b08f      	sub	sp, #60	; 0x3c
	size_t size = thread->stack_info.size;
    4be8:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    4bec:	4604      	mov	r4, r0
    4bee:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    4bf0:	f021 ff62 	bl	26ab8 <k_thread_name_get>
    4bf4:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    4bf6:	f01b fdbd 	bl	20774 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    4bfa:	4b24      	ldr	r3, [pc, #144]	; (4c8c <shell_tdata_dump+0xa8>)
    4bfc:	4a24      	ldr	r2, [pc, #144]	; (4c90 <shell_tdata_dump+0xac>)
    4bfe:	2e00      	cmp	r6, #0
    4c00:	bf08      	it	eq
    4c02:	461e      	moveq	r6, r3
    4c04:	4b23      	ldr	r3, [pc, #140]	; (4c94 <shell_tdata_dump+0xb0>)
    4c06:	e9cd 4600 	strd	r4, r6, [sp]
    4c0a:	4284      	cmp	r4, r0
    4c0c:	bf18      	it	ne
    4c0e:	4613      	movne	r3, r2
    4c10:	2108      	movs	r1, #8
    4c12:	4628      	mov	r0, r5
    4c14:	4a20      	ldr	r2, [pc, #128]	; (4c98 <shell_tdata_dump+0xb4>)
    4c16:	f01d fbbd 	bl	22394 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    4c1a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    4c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    4c22:	f994 300e 	ldrsb.w	r3, [r4, #14]
    4c26:	9300      	str	r3, [sp, #0]
    4c28:	7b23      	ldrb	r3, [r4, #12]
    4c2a:	4a1c      	ldr	r2, [pc, #112]	; (4c9c <shell_tdata_dump+0xb8>)
    4c2c:	4628      	mov	r0, r5
    4c2e:	2108      	movs	r1, #8
    4c30:	f01d fbb0 	bl	22394 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p",
    4c34:	a906      	add	r1, sp, #24
    4c36:	2220      	movs	r2, #32
    4c38:	4620      	mov	r0, r4
    4c3a:	f01a fe2d 	bl	1f898 <k_thread_state_str>
    4c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    4c40:	9200      	str	r2, [sp, #0]
    4c42:	4603      	mov	r3, r0
    4c44:	4a16      	ldr	r2, [pc, #88]	; (4ca0 <shell_tdata_dump+0xbc>)
    4c46:	2108      	movs	r1, #8
    4c48:	4628      	mov	r0, r5
    4c4a:	f01d fba3 	bl	22394 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    4c4e:	a905      	add	r1, sp, #20
    4c50:	4620      	mov	r0, r4
    4c52:	f021 ff41 	bl	26ad8 <z_impl_k_thread_stack_space_get>
	if (ret) {
    4c56:	4603      	mov	r3, r0
    4c58:	b130      	cbz	r0, 4c68 <shell_tdata_dump+0x84>
		shell_print(shell,
    4c5a:	4a12      	ldr	r2, [pc, #72]	; (4ca4 <shell_tdata_dump+0xc0>)
    4c5c:	2108      	movs	r1, #8
    4c5e:	4628      	mov	r0, r5
    4c60:	f01d fb98 	bl	22394 <shell_fprintf>
}
    4c64:	b00f      	add	sp, #60	; 0x3c
    4c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    4c68:	9a05      	ldr	r2, [sp, #20]
    4c6a:	2364      	movs	r3, #100	; 0x64
    4c6c:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    4c6e:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    4c72:	434b      	muls	r3, r1
		shell_print(shell,
    4c74:	4a0c      	ldr	r2, [pc, #48]	; (4ca8 <shell_tdata_dump+0xc4>)
		pcnt = ((size - unused) * 100U) / size;
    4c76:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    4c7a:	2108      	movs	r1, #8
    4c7c:	e9cd 7302 	strd	r7, r3, [sp, #8]
    4c80:	4628      	mov	r0, r5
    4c82:	463b      	mov	r3, r7
    4c84:	f01d fb86 	bl	22394 <shell_fprintf>
}
    4c88:	e7ec      	b.n	4c64 <shell_tdata_dump+0x80>
    4c8a:	bf00      	nop
    4c8c:	0002a4e3 	.word	0x0002a4e3
    4c90:	0002a06a 	.word	0x0002a06a
    4c94:	0002b8b8 	.word	0x0002b8b8
    4c98:	0002a4e6 	.word	0x0002a4e6
    4c9c:	0002a4f2 	.word	0x0002a4f2
    4ca0:	0002a51e 	.word	0x0002a51e
    4ca4:	0002a535 	.word	0x0002a535
    4ca8:	0002a562 	.word	0x0002a562

00004cac <cmd_kernel_stacks>:
K_KERNEL_STACK_ARRAY_DECLARE(z_interrupt_stacks, CONFIG_MP_MAX_NUM_CPUS,
			     CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    4cac:	b530      	push	{r4, r5, lr}
    4cae:	b093      	sub	sp, #76	; 0x4c
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
    4cb0:	2100      	movs	r1, #0
    4cb2:	221c      	movs	r2, #28
{
    4cb4:	4604      	mov	r4, r0
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
    4cb6:	a80b      	add	r0, sp, #44	; 0x2c
    4cb8:	910a      	str	r1, [sp, #40]	; 0x28
    4cba:	f01e ffb2 	bl	23c22 <memset>

	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
    4cbe:	481b      	ldr	r0, [pc, #108]	; (4d2c <cmd_kernel_stacks+0x80>)
    4cc0:	f01e ff4d 	bl	23b5e <strlen>
    4cc4:	f1c0 0020 	rsb	r0, r0, #32
    4cc8:	2801      	cmp	r0, #1
    4cca:	d92c      	bls.n	4d26 <cmd_kernel_stacks+0x7a>
    4ccc:	4817      	ldr	r0, [pc, #92]	; (4d2c <cmd_kernel_stacks+0x80>)
    4cce:	f01e ff46 	bl	23b5e <strlen>
    4cd2:	f1c0 0220 	rsb	r2, r0, #32
    4cd6:	ad0a      	add	r5, sp, #40	; 0x28
    4cd8:	2120      	movs	r1, #32
    4cda:	4628      	mov	r0, r5
    4cdc:	f01e ffa1 	bl	23c22 <memset>

	k_thread_foreach(shell_stack_dump, (void *)shell);
    4ce0:	4621      	mov	r1, r4
    4ce2:	4813      	ldr	r0, [pc, #76]	; (4d30 <cmd_kernel_stacks+0x84>)
    4ce4:	f01a fd90 	bl	1f808 <k_thread_foreach>

	for (int i = 0; i < num_cpus; i++) {
		size_t unused;
		const uint8_t *buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size_t size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);
		int err = z_stack_space_get(buf, size, &unused);
    4ce8:	aa09      	add	r2, sp, #36	; 0x24
    4cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
    4cee:	4811      	ldr	r0, [pc, #68]	; (4d34 <cmd_kernel_stacks+0x88>)
    4cf0:	f021 fee6 	bl	26ac0 <z_stack_space_get>

		(void)err;
		__ASSERT_NO_MSG(err == 0);

		shell_print(shell,
    4cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4cf6:	9501      	str	r5, [sp, #4]
    4cf8:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
    4cfc:	2364      	movs	r3, #100	; 0x64
    4cfe:	434b      	muls	r3, r1
    4d00:	0adb      	lsrs	r3, r3, #11
    4d02:	9306      	str	r3, [sp, #24]
    4d04:	2500      	movs	r5, #0
    4d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4d0a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    4d0e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4d12:	4620      	mov	r0, r4
    4d14:	4b08      	ldr	r3, [pc, #32]	; (4d38 <cmd_kernel_stacks+0x8c>)
    4d16:	4a09      	ldr	r2, [pc, #36]	; (4d3c <cmd_kernel_stacks+0x90>)
    4d18:	9500      	str	r5, [sp, #0]
    4d1a:	2108      	movs	r1, #8
    4d1c:	f01d fb3a 	bl	22394 <shell_fprintf>
			    &z_interrupt_stacks[i], i, pad, size, unused, size - unused, size,
			    ((size - unused) * 100U) / size);
	}

	return 0;
}
    4d20:	4628      	mov	r0, r5
    4d22:	b013      	add	sp, #76	; 0x4c
    4d24:	bd30      	pop	{r4, r5, pc}
	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
    4d26:	2201      	movs	r2, #1
    4d28:	e7d5      	b.n	4cd6 <cmd_kernel_stacks+0x2a>
    4d2a:	bf00      	nop
    4d2c:	0002a599 	.word	0x0002a599
    4d30:	00004e31 	.word	0x00004e31
    4d34:	20005bc0 	.word	0x20005bc0
    4d38:	20005b80 	.word	0x20005b80
    4d3c:	0002a5a0 	.word	0x0002a5a0

00004d40 <cmd_kernel_cycles>:
{
    4d40:	b510      	push	{r4, lr}
    4d42:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    4d44:	f021 fcf7 	bl	26736 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    4d48:	4a03      	ldr	r2, [pc, #12]	; (4d58 <cmd_kernel_cycles+0x18>)
    4d4a:	4603      	mov	r3, r0
    4d4c:	2108      	movs	r1, #8
    4d4e:	4620      	mov	r0, r4
    4d50:	f01d fb20 	bl	22394 <shell_fprintf>
}
    4d54:	2000      	movs	r0, #0
    4d56:	bd10      	pop	{r4, pc}
    4d58:	0002a5e9 	.word	0x0002a5e9

00004d5c <cmd_kernel_log_level_set>:
}

#if defined(CONFIG_LOG_RUNTIME_FILTERING)
static int cmd_kernel_log_level_set(const struct shell *sh,
				    size_t argc, char **argv)
{
    4d5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4d60:	4617      	mov	r7, r2
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	int err = 0;
    4d62:	2300      	movs	r3, #0
{
    4d64:	4604      	mov	r4, r0

	uint8_t severity = shell_strtoul(argv[2], 10, &err);
    4d66:	aa01      	add	r2, sp, #4
    4d68:	68b8      	ldr	r0, [r7, #8]
	int err = 0;
    4d6a:	9301      	str	r3, [sp, #4]
	uint8_t severity = shell_strtoul(argv[2], 10, &err);
    4d6c:	210a      	movs	r1, #10
    4d6e:	f01d fd98 	bl	228a2 <shell_strtoul>

	if (err) {
    4d72:	9d01      	ldr	r5, [sp, #4]
	uint8_t severity = shell_strtoul(argv[2], 10, &err);
    4d74:	b2c6      	uxtb	r6, r0
	if (err) {
    4d76:	b155      	cbz	r5, 4d8e <cmd_kernel_log_level_set+0x32>
		shell_error(sh, "Unable to parse log severity (err %d)", err);
    4d78:	462b      	mov	r3, r5
    4d7a:	4a15      	ldr	r2, [pc, #84]	; (4dd0 <cmd_kernel_log_level_set+0x74>)
    4d7c:	2101      	movs	r1, #1
    4d7e:	4620      	mov	r0, r4
    4d80:	f01d fb08 	bl	22394 <shell_fprintf>

		return err;
    4d84:	9d01      	ldr	r5, [sp, #4]
	}

	log_filter_set(NULL, 0, (int16_t)source_id, severity);

	return 0;
}
    4d86:	4628      	mov	r0, r5
    4d88:	b002      	add	sp, #8
    4d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (severity > LOG_LEVEL_DBG) {
    4d8e:	2e04      	cmp	r6, #4
    4d90:	d90a      	bls.n	4da8 <cmd_kernel_log_level_set+0x4c>
		shell_error(sh, "Invalid log level: %d", severity);
    4d92:	4a10      	ldr	r2, [pc, #64]	; (4dd4 <cmd_kernel_log_level_set+0x78>)
    4d94:	4633      	mov	r3, r6
    4d96:	2101      	movs	r1, #1
    4d98:	4620      	mov	r0, r4
    4d9a:	f01d fafb 	bl	22394 <shell_fprintf>
		shell_help(sh);
    4d9e:	4620      	mov	r0, r4
    4da0:	f01d fb1d 	bl	223de <shell_help>
		return SHELL_CMD_HELP_PRINTED;
    4da4:	2501      	movs	r5, #1
    4da6:	e7ee      	b.n	4d86 <cmd_kernel_log_level_set+0x2a>
	int source_id = log_source_id_get(argv[1]);
    4da8:	6878      	ldr	r0, [r7, #4]
    4daa:	f7ff f8f1 	bl	3f90 <log_source_id_get>
	if (source_id < 0) {
    4dae:	f1b0 0800 	subs.w	r8, r0, #0
    4db2:	da05      	bge.n	4dc0 <cmd_kernel_log_level_set+0x64>
		shell_error(sh, "Unable to find log source: %s", argv[1]);
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	4a08      	ldr	r2, [pc, #32]	; (4dd8 <cmd_kernel_log_level_set+0x7c>)
    4db8:	2101      	movs	r1, #1
    4dba:	4620      	mov	r0, r4
    4dbc:	f01d faea 	bl	22394 <shell_fprintf>
    4dc0:	2100      	movs	r1, #0
    4dc2:	4633      	mov	r3, r6
    4dc4:	fa0f f288 	sxth.w	r2, r8
    4dc8:	4608      	mov	r0, r1
    4dca:	f7ff f8fd 	bl	3fc8 <z_impl_log_filter_set>
    4dce:	e7da      	b.n	4d86 <cmd_kernel_log_level_set+0x2a>
    4dd0:	0002a5ff 	.word	0x0002a5ff
    4dd4:	0002a626 	.word	0x0002a626
    4dd8:	0002a63d 	.word	0x0002a63d

00004ddc <cmd_kernel_sleep>:
{
    4ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4dde:	4613      	mov	r3, r2
	int err = 0;
    4de0:	2200      	movs	r2, #0
    4de2:	9201      	str	r2, [sp, #4]
{
    4de4:	4604      	mov	r4, r0
	ms = shell_strtoul(argv[1], 10, &err);
    4de6:	aa01      	add	r2, sp, #4
    4de8:	6858      	ldr	r0, [r3, #4]
    4dea:	210a      	movs	r1, #10
    4dec:	f01d fd59 	bl	228a2 <shell_strtoul>
	if (!err) {
    4df0:	9d01      	ldr	r5, [sp, #4]
    4df2:	b995      	cbnz	r5, 4e1a <cmd_kernel_sleep+0x3e>
    4df4:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    4df8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4dfc:	4629      	mov	r1, r5
    4dfe:	f240 30e7 	movw	r0, #999	; 0x3e7
    4e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e06:	2300      	movs	r3, #0
    4e08:	fbc4 0106 	smlal	r0, r1, r4, r6
    4e0c:	f7fb fd86 	bl	91c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4e10:	f01b fc96 	bl	20740 <z_impl_k_sleep>
}
    4e14:	4628      	mov	r0, r5
    4e16:	b002      	add	sp, #8
    4e18:	bd70      	pop	{r4, r5, r6, pc}
		shell_error(sh, "Unable to parse input (err %d)", err);
    4e1a:	462b      	mov	r3, r5
    4e1c:	4a03      	ldr	r2, [pc, #12]	; (4e2c <cmd_kernel_sleep+0x50>)
    4e1e:	2101      	movs	r1, #1
    4e20:	4620      	mov	r0, r4
    4e22:	f01d fab7 	bl	22394 <shell_fprintf>
		return err;
    4e26:	9d01      	ldr	r5, [sp, #4]
    4e28:	e7f4      	b.n	4e14 <cmd_kernel_sleep+0x38>
    4e2a:	bf00      	nop
    4e2c:	0002a65c 	.word	0x0002a65c

00004e30 <shell_stack_dump>:
{
    4e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e32:	4604      	mov	r4, r0
	size_t size = thread->stack_info.size;
    4e34:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    4e38:	b089      	sub	sp, #36	; 0x24
    4e3a:	460d      	mov	r5, r1
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    4e3c:	a907      	add	r1, sp, #28
    4e3e:	f021 fe4b 	bl	26ad8 <z_impl_k_thread_stack_space_get>
	if (ret) {
    4e42:	4603      	mov	r3, r0
    4e44:	b130      	cbz	r0, 4e54 <shell_stack_dump+0x24>
		shell_print(shell,
    4e46:	4a10      	ldr	r2, [pc, #64]	; (4e88 <shell_stack_dump+0x58>)
    4e48:	2108      	movs	r1, #8
    4e4a:	4628      	mov	r0, r5
    4e4c:	f01d faa2 	bl	22394 <shell_fprintf>
}
    4e50:	b009      	add	sp, #36	; 0x24
    4e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    4e54:	4620      	mov	r0, r4
    4e56:	f021 fe2f 	bl	26ab8 <k_thread_name_get>
	shell_print(
    4e5a:	4f0c      	ldr	r7, [pc, #48]	; (4e8c <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    4e5c:	9a07      	ldr	r2, [sp, #28]
	shell_print(
    4e5e:	2800      	cmp	r0, #0
    4e60:	bf18      	it	ne
    4e62:	4607      	movne	r7, r0
	pcnt = ((size - unused) * 100U) / size;
    4e64:	1ab1      	subs	r1, r6, r2
    4e66:	2364      	movs	r3, #100	; 0x64
	shell_print(
    4e68:	e9cd 2102 	strd	r2, r1, [sp, #8]
	pcnt = ((size - unused) * 100U) / size;
    4e6c:	434b      	muls	r3, r1
	shell_print(
    4e6e:	e9cd 7600 	strd	r7, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    4e72:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print(
    4e76:	4a06      	ldr	r2, [pc, #24]	; (4e90 <shell_stack_dump+0x60>)
    4e78:	e9cd 6304 	strd	r6, r3, [sp, #16]
    4e7c:	2108      	movs	r1, #8
    4e7e:	4623      	mov	r3, r4
    4e80:	4628      	mov	r0, r5
    4e82:	f01d fa87 	bl	22394 <shell_fprintf>
    4e86:	e7e3      	b.n	4e50 <shell_stack_dump+0x20>
    4e88:	0002a535 	.word	0x0002a535
    4e8c:	0002a4e3 	.word	0x0002a4e3
    4e90:	0002a67c 	.word	0x0002a67c

00004e94 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    4e94:	b510      	push	{r4, lr}
    4e96:	4603      	mov	r3, r0
	const char *name = dev->name;
    4e98:	6800      	ldr	r0, [r0, #0]
{
    4e9a:	460c      	mov	r4, r1
    4e9c:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    4e9e:	b108      	cbz	r0, 4ea4 <get_device_name+0x10>
    4ea0:	7802      	ldrb	r2, [r0, #0]
    4ea2:	b922      	cbnz	r2, 4eae <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    4ea4:	4a02      	ldr	r2, [pc, #8]	; (4eb0 <get_device_name+0x1c>)
    4ea6:	4620      	mov	r0, r4
    4ea8:	f003 f81e 	bl	7ee8 <snprintf>
		name = buf;
    4eac:	4620      	mov	r0, r4
	}

	return name;
}
    4eae:	bd10      	pop	{r4, pc}
    4eb0:	0002a78a 	.word	0x0002a78a

00004eb4 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    4eb4:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    4eb6:	680c      	ldr	r4, [r1, #0]
    4eb8:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    4ebc:	f7ff ffea 	bl	4e94 <get_device_name>
    4ec0:	4a03      	ldr	r2, [pc, #12]	; (4ed0 <cmd_device_list_visitor+0x1c>)
    4ec2:	4603      	mov	r3, r0
    4ec4:	2108      	movs	r1, #8
    4ec6:	4620      	mov	r0, r4
    4ec8:	f01d fa64 	bl	22394 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    4ecc:	2000      	movs	r0, #0
    4ece:	bd10      	pop	{r4, pc}
    4ed0:	0002a78f 	.word	0x0002a78f

00004ed4 <cmd_device_list>:

static int cmd_device_list(const struct shell *sh,
			   size_t argc, char **argv)
{
    4ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ed8:	b08a      	sub	sp, #40	; 0x28
    4eda:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    4edc:	a801      	add	r0, sp, #4
    4ede:	f01a fa55 	bl	1f38c <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    4ee2:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
    4ee4:	4a1b      	ldr	r2, [pc, #108]	; (4f54 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    4ee6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4f58 <cmd_device_list+0x84>
		const char *state = "READY";
    4eea:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4f5c <cmd_device_list+0x88>
    4eee:	f8df a070 	ldr.w	sl, [pc, #112]	; 4f60 <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    4ef2:	2318      	movs	r3, #24
    4ef4:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
    4ef8:	2108      	movs	r1, #8
    4efa:	4628      	mov	r0, r5
    4efc:	f01d fa4a 	bl	22394 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    4f00:	9c01      	ldr	r4, [sp, #4]
    4f02:	42b4      	cmp	r4, r6
    4f04:	d303      	bcc.n	4f0e <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    4f06:	2000      	movs	r0, #0
    4f08:	b00a      	add	sp, #40	; 0x28
    4f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    4f0e:	af05      	add	r7, sp, #20
    4f10:	4639      	mov	r1, r7
    4f12:	2214      	movs	r2, #20
    4f14:	4620      	mov	r0, r4
    4f16:	f7ff ffbd 	bl	4e94 <get_device_name>
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    4f1a:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    4f1c:	4603      	mov	r3, r0
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    4f1e:	2108      	movs	r1, #8
    4f20:	4628      	mov	r0, r5
    4f22:	f01d fa37 	bl	22394 <shell_fprintf>
    4f26:	4620      	mov	r0, r4
    4f28:	f021 fcde 	bl	268e8 <z_device_is_ready>
		shell_fprintf(sh, SHELL_NORMAL, " (%s)\n", state);
    4f2c:	4a0d      	ldr	r2, [pc, #52]	; (4f64 <cmd_device_list+0x90>)
    4f2e:	2800      	cmp	r0, #0
    4f30:	bf0c      	ite	eq
    4f32:	464b      	moveq	r3, r9
    4f34:	4653      	movne	r3, sl
    4f36:	2108      	movs	r1, #8
    4f38:	4628      	mov	r0, r5
    4f3a:	f01d fa2b 	bl	22394 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    4f3e:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    4f40:	4620      	mov	r0, r4
    4f42:	4909      	ldr	r1, [pc, #36]	; (4f68 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    4f44:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    4f46:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    4f48:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    4f4c:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    4f4e:	f021 fcd6 	bl	268fe <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    4f52:	e7d6      	b.n	4f02 <cmd_device_list+0x2e>
    4f54:	0002a7ae 	.word	0x0002a7ae
    4f58:	0002a7b8 	.word	0x0002a7b8
    4f5c:	0002a7a5 	.word	0x0002a7a5
    4f60:	0002a79f 	.word	0x0002a79f
    4f64:	0002dde3 	.word	0x0002dde3
    4f68:	00004eb5 	.word	0x00004eb5

00004f6c <device_get_config_level>:
{
    4f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4f70:	4b11      	ldr	r3, [pc, #68]	; (4fb8 <device_get_config_level+0x4c>)
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
    4f72:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4fbc <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4f76:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    4f7a:	3101      	adds	r1, #1
{
    4f7c:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4f7e:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    4f82:	4606      	mov	r6, r0
	bool devices = false;
    4f84:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4f86:	45a0      	cmp	r8, r4
    4f88:	d803      	bhi.n	4f92 <device_get_config_level+0x26>
}
    4f8a:	4638      	mov	r0, r7
    4f8c:	b007      	add	sp, #28
    4f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4f92:	4620      	mov	r0, r4
    4f94:	f021 fca8 	bl	268e8 <z_device_is_ready>
		if (device_is_ready(dev)) {
    4f98:	4605      	mov	r5, r0
    4f9a:	b158      	cbz	r0, 4fb4 <device_get_config_level+0x48>
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
    4f9c:	2214      	movs	r2, #20
    4f9e:	a901      	add	r1, sp, #4
    4fa0:	4620      	mov	r0, r4
    4fa2:	f7ff ff77 	bl	4e94 <get_device_name>
    4fa6:	464a      	mov	r2, r9
    4fa8:	4603      	mov	r3, r0
    4faa:	2108      	movs	r1, #8
    4fac:	4630      	mov	r0, r6
    4fae:	f01d f9f1 	bl	22394 <shell_fprintf>
			devices = true;
    4fb2:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4fb4:	3418      	adds	r4, #24
    4fb6:	e7e6      	b.n	4f86 <device_get_config_level+0x1a>
    4fb8:	00027f38 	.word	0x00027f38
    4fbc:	0002a7bd 	.word	0x0002a7bd

00004fc0 <cmd_device_levels>:
{
    4fc0:	b510      	push	{r4, lr}
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
    4fc2:	2108      	movs	r1, #8
{
    4fc4:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
    4fc6:	4a25      	ldr	r2, [pc, #148]	; (505c <cmd_device_levels+0x9c>)
    4fc8:	f01d f9e4 	bl	22394 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_EARLY);
    4fcc:	2100      	movs	r1, #0
    4fce:	4620      	mov	r0, r4
    4fd0:	f7ff ffcc 	bl	4f6c <device_get_config_level>
	if (ret == false) {
    4fd4:	b920      	cbnz	r0, 4fe0 <cmd_device_levels+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    4fd6:	4a22      	ldr	r2, [pc, #136]	; (5060 <cmd_device_levels+0xa0>)
    4fd8:	2108      	movs	r1, #8
    4fda:	4620      	mov	r0, r4
    4fdc:	f01d f9da 	bl	22394 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 1:\n");
    4fe0:	2108      	movs	r1, #8
    4fe2:	4620      	mov	r0, r4
    4fe4:	4a1f      	ldr	r2, [pc, #124]	; (5064 <cmd_device_levels+0xa4>)
    4fe6:	f01d f9d5 	bl	22394 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_1);
    4fea:	2101      	movs	r1, #1
    4fec:	4620      	mov	r0, r4
    4fee:	f7ff ffbd 	bl	4f6c <device_get_config_level>
	if (ret == false) {
    4ff2:	b920      	cbnz	r0, 4ffe <cmd_device_levels+0x3e>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    4ff4:	4a1a      	ldr	r2, [pc, #104]	; (5060 <cmd_device_levels+0xa0>)
    4ff6:	2108      	movs	r1, #8
    4ff8:	4620      	mov	r0, r4
    4ffa:	f01d f9cb 	bl	22394 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 2:\n");
    4ffe:	2108      	movs	r1, #8
    5000:	4620      	mov	r0, r4
    5002:	4a19      	ldr	r2, [pc, #100]	; (5068 <cmd_device_levels+0xa8>)
    5004:	f01d f9c6 	bl	22394 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_2);
    5008:	2102      	movs	r1, #2
    500a:	4620      	mov	r0, r4
    500c:	f7ff ffae 	bl	4f6c <device_get_config_level>
	if (ret == false) {
    5010:	b920      	cbnz	r0, 501c <cmd_device_levels+0x5c>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    5012:	4a13      	ldr	r2, [pc, #76]	; (5060 <cmd_device_levels+0xa0>)
    5014:	2108      	movs	r1, #8
    5016:	4620      	mov	r0, r4
    5018:	f01d f9bc 	bl	22394 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "POST_KERNEL:\n");
    501c:	2108      	movs	r1, #8
    501e:	4620      	mov	r0, r4
    5020:	4a12      	ldr	r2, [pc, #72]	; (506c <cmd_device_levels+0xac>)
    5022:	f01d f9b7 	bl	22394 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_POST_KERNEL);
    5026:	2103      	movs	r1, #3
    5028:	4620      	mov	r0, r4
    502a:	f7ff ff9f 	bl	4f6c <device_get_config_level>
	if (ret == false) {
    502e:	b920      	cbnz	r0, 503a <cmd_device_levels+0x7a>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    5030:	4a0b      	ldr	r2, [pc, #44]	; (5060 <cmd_device_levels+0xa0>)
    5032:	2108      	movs	r1, #8
    5034:	4620      	mov	r0, r4
    5036:	f01d f9ad 	bl	22394 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "APPLICATION:\n");
    503a:	2108      	movs	r1, #8
    503c:	4620      	mov	r0, r4
    503e:	4a0c      	ldr	r2, [pc, #48]	; (5070 <cmd_device_levels+0xb0>)
    5040:	f01d f9a8 	bl	22394 <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_APPLICATION);
    5044:	2104      	movs	r1, #4
    5046:	4620      	mov	r0, r4
    5048:	f7ff ff90 	bl	4f6c <device_get_config_level>
	if (ret == false) {
    504c:	b920      	cbnz	r0, 5058 <cmd_device_levels+0x98>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    504e:	4a04      	ldr	r2, [pc, #16]	; (5060 <cmd_device_levels+0xa0>)
    5050:	2108      	movs	r1, #8
    5052:	4620      	mov	r0, r4
    5054:	f01d f99e 	bl	22394 <shell_fprintf>
}
    5058:	2000      	movs	r0, #0
    505a:	bd10      	pop	{r4, pc}
    505c:	0002a7c3 	.word	0x0002a7c3
    5060:	0002a7cb 	.word	0x0002a7cb
    5064:	0002a7d3 	.word	0x0002a7d3
    5068:	0002a7e2 	.word	0x0002a7e2
    506c:	0002a7f1 	.word	0x0002a7f1
    5070:	0002a7ff 	.word	0x0002a7ff

00005074 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    5074:	1e8b      	subs	r3, r1, #2
    5076:	2b02      	cmp	r3, #2
{
    5078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    507c:	4607      	mov	r7, r0
    507e:	4688      	mov	r8, r1
    5080:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    5082:	d837      	bhi.n	50f4 <cmd_devmem+0x80>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    5084:	6860      	ldr	r0, [r4, #4]
    5086:	2210      	movs	r2, #16
    5088:	2100      	movs	r1, #0
    508a:	f01e fca5 	bl	239d8 <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    508e:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    5092:	4606      	mov	r6, r0
	if (argc < 3) {
    5094:	d107      	bne.n	50a6 <cmd_devmem+0x32>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    5096:	4a26      	ldr	r2, [pc, #152]	; (5130 <cmd_devmem+0xbc>)
    5098:	2320      	movs	r3, #32
    509a:	2108      	movs	r1, #8
    509c:	4638      	mov	r0, r7
    509e:	f01d f979 	bl	22394 <shell_fprintf>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    50a2:	6833      	ldr	r3, [r6, #0]
	if (err == 0) {
    50a4:	e016      	b.n	50d4 <cmd_devmem+0x60>
		width = strtoul(argv[2], NULL, 10);
    50a6:	220a      	movs	r2, #10
    50a8:	2100      	movs	r1, #0
    50aa:	68a0      	ldr	r0, [r4, #8]
    50ac:	f01e fc94 	bl	239d8 <strtoul>
    50b0:	b2c5      	uxtb	r5, r0
	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    50b2:	4a1f      	ldr	r2, [pc, #124]	; (5130 <cmd_devmem+0xbc>)
    50b4:	462b      	mov	r3, r5
    50b6:	2108      	movs	r1, #8
    50b8:	4638      	mov	r0, r7
    50ba:	f01d f96b 	bl	22394 <shell_fprintf>

	if (argc <= 3) {
    50be:	f1b8 0f04 	cmp.w	r8, #4
    50c2:	d01a      	beq.n	50fa <cmd_devmem+0x86>
	switch (width) {
    50c4:	2d10      	cmp	r5, #16
    50c6:	d00d      	beq.n	50e4 <cmd_devmem+0x70>
    50c8:	2d20      	cmp	r5, #32
    50ca:	d0ea      	beq.n	50a2 <cmd_devmem+0x2e>
    50cc:	2d08      	cmp	r5, #8
    50ce:	d10c      	bne.n	50ea <cmd_devmem+0x76>
	return *(volatile uint8_t *)addr;
    50d0:	7833      	ldrb	r3, [r6, #0]
    50d2:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    50d4:	4a17      	ldr	r2, [pc, #92]	; (5134 <cmd_devmem+0xc0>)
    50d6:	2108      	movs	r1, #8
    50d8:	4638      	mov	r0, r7
    50da:	f01d f95b 	bl	22394 <shell_fprintf>
		return -EINVAL;
    50de:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    50e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return *(volatile uint16_t *)addr;
    50e4:	8833      	ldrh	r3, [r6, #0]
    50e6:	b29b      	uxth	r3, r3
	if (err == 0) {
    50e8:	e7f4      	b.n	50d4 <cmd_devmem+0x60>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    50ea:	4a13      	ldr	r2, [pc, #76]	; (5138 <cmd_devmem+0xc4>)
    50ec:	2108      	movs	r1, #8
    50ee:	4638      	mov	r0, r7
    50f0:	f01d f950 	bl	22394 <shell_fprintf>
		return -EINVAL;
    50f4:	f06f 0015 	mvn.w	r0, #21
    50f8:	e7f2      	b.n	50e0 <cmd_devmem+0x6c>
	value = strtoul(argv[3], NULL, 16);
    50fa:	68e0      	ldr	r0, [r4, #12]
    50fc:	2210      	movs	r2, #16
    50fe:	2100      	movs	r1, #0
    5100:	f01e fc6a 	bl	239d8 <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    5104:	4a0d      	ldr	r2, [pc, #52]	; (513c <cmd_devmem+0xc8>)
    5106:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    5108:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    510a:	2108      	movs	r1, #8
    510c:	4638      	mov	r0, r7
    510e:	f01d f941 	bl	22394 <shell_fprintf>
	switch (width) {
    5112:	2d10      	cmp	r5, #16
    5114:	d006      	beq.n	5124 <cmd_devmem+0xb0>
    5116:	2d20      	cmp	r5, #32
    5118:	d007      	beq.n	512a <cmd_devmem+0xb6>
    511a:	2d08      	cmp	r5, #8
    511c:	d1e5      	bne.n	50ea <cmd_devmem+0x76>
		sys_write8(value, addr);
    511e:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    5120:	7034      	strb	r4, [r6, #0]
}
    5122:	e7dc      	b.n	50de <cmd_devmem+0x6a>
		sys_write16(value, addr);
    5124:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    5126:	8034      	strh	r4, [r6, #0]
}
    5128:	e7d9      	b.n	50de <cmd_devmem+0x6a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    512a:	6034      	str	r4, [r6, #0]
}
    512c:	e7d7      	b.n	50de <cmd_devmem+0x6a>
    512e:	bf00      	nop
    5130:	0002a85e 	.word	0x0002a85e
    5134:	0002a889 	.word	0x0002a889
    5138:	0002a873 	.word	0x0002a873
    513c:	0002a89a 	.word	0x0002a89a

00005140 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    5140:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    5142:	4e10      	ldr	r6, [pc, #64]	; (5184 <set_bypass.isra.0+0x44>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    5144:	4604      	mov	r4, r0
	if (bypass && in_use) {
    5146:	7833      	ldrb	r3, [r6, #0]
    5148:	460d      	mov	r5, r1
    514a:	b181      	cbz	r1, 516e <set_bypass.isra.0+0x2e>
    514c:	b12b      	cbz	r3, 515a <set_bypass.isra.0+0x1a>
}
    514e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    5152:	4a0d      	ldr	r2, [pc, #52]	; (5188 <set_bypass.isra.0+0x48>)
    5154:	2101      	movs	r1, #1
    5156:	f01d b91d 	b.w	22394 <shell_fprintf>
	in_use = !in_use;
    515a:	2301      	movs	r3, #1
    515c:	7033      	strb	r3, [r6, #0]
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    515e:	4a0b      	ldr	r2, [pc, #44]	; (518c <set_bypass.isra.0+0x4c>)
    5160:	2108      	movs	r1, #8
    5162:	4620      	mov	r0, r4
    5164:	f01d f916 	bl	22394 <shell_fprintf>
		in_use = true;
    5168:	2301      	movs	r3, #1
    516a:	7033      	strb	r3, [r6, #0]
    516c:	e004      	b.n	5178 <set_bypass.isra.0+0x38>
	in_use = !in_use;
    516e:	f083 0301 	eor.w	r3, r3, #1
    5172:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    5174:	2b00      	cmp	r3, #0
    5176:	d1f2      	bne.n	515e <set_bypass.isra.0+0x1e>
	shell_set_bypass(sh, bypass);
    5178:	4629      	mov	r1, r5
    517a:	4620      	mov	r0, r4
}
    517c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    5180:	f01d b942 	b.w	22408 <shell_set_bypass>
    5184:	20003b0b 	.word	0x20003b0b
    5188:	0002a8ae 	.word	0x0002a8ae
    518c:	0002a8e9 	.word	0x0002a8e9

00005190 <bypass_cb>:
{
    5190:	b570      	push	{r4, r5, r6, lr}
    5192:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    5194:	483c      	ldr	r0, [pc, #240]	; (5288 <bypass_cb+0xf8>)
    5196:	7803      	ldrb	r3, [r0, #0]
    5198:	2b18      	cmp	r3, #24
    519a:	d102      	bne.n	51a2 <bypass_cb+0x12>
    519c:	780b      	ldrb	r3, [r1, #0]
    519e:	2b11      	cmp	r3, #17
    51a0:	d031      	beq.n	5206 <bypass_cb+0x76>
    51a2:	3a01      	subs	r2, #1
    51a4:	460b      	mov	r3, r1
    51a6:	188d      	adds	r5, r1, r2
		for (int i = 0; i < (len - 1); i++) {
    51a8:	42ab      	cmp	r3, r5
    51aa:	d125      	bne.n	51f8 <bypass_cb+0x68>
	tail = recv[len - 1];
    51ac:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    51ae:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    51b0:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    51b2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    51b6:	2b09      	cmp	r3, #9
    51b8:	4c34      	ldr	r4, [pc, #208]	; (528c <bypass_cb+0xfc>)
    51ba:	d904      	bls.n	51c6 <bypass_cb+0x36>
    51bc:	f022 0320 	bic.w	r3, r2, #32
    51c0:	3b41      	subs	r3, #65	; 0x41
    51c2:	2b05      	cmp	r3, #5
    51c4:	d804      	bhi.n	51d0 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    51c6:	6823      	ldr	r3, [r4, #0]
    51c8:	4931      	ldr	r1, [pc, #196]	; (5290 <bypass_cb+0x100>)
    51ca:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    51cc:	3301      	adds	r3, #1
    51ce:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    51d0:	6823      	ldr	r3, [r4, #0]
    51d2:	2b02      	cmp	r3, #2
    51d4:	d134      	bne.n	5240 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    51d6:	2210      	movs	r2, #16
    51d8:	482d      	ldr	r0, [pc, #180]	; (5290 <bypass_cb+0x100>)
    51da:	2100      	movs	r1, #0
    51dc:	f01e fbfc 	bl	239d8 <strtoul>
		*bytes = byte;
    51e0:	4a2c      	ldr	r2, [pc, #176]	; (5294 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    51e2:	6813      	ldr	r3, [r2, #0]
    51e4:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    51e8:	6013      	str	r3, [r2, #0]
		sum++;
    51ea:	4a2b      	ldr	r2, [pc, #172]	; (5298 <bypass_cb+0x108>)
    51ec:	6813      	ldr	r3, [r2, #0]
    51ee:	3301      	adds	r3, #1
    51f0:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    51f2:	2300      	movs	r3, #0
    51f4:	6023      	str	r3, [r4, #0]
    51f6:	e023      	b.n	5240 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    51f8:	f813 6b01 	ldrb.w	r6, [r3], #1
    51fc:	2e18      	cmp	r6, #24
    51fe:	d1d3      	bne.n	51a8 <bypass_cb+0x18>
    5200:	781e      	ldrb	r6, [r3, #0]
    5202:	2e11      	cmp	r6, #17
    5204:	d1d0      	bne.n	51a8 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    5206:	4d24      	ldr	r5, [pc, #144]	; (5298 <bypass_cb+0x108>)
    5208:	4a24      	ldr	r2, [pc, #144]	; (529c <bypass_cb+0x10c>)
    520a:	682b      	ldr	r3, [r5, #0]
    520c:	2108      	movs	r1, #8
    520e:	4620      	mov	r0, r4
    5210:	f01d f8c0 	bl	22394 <shell_fprintf>
		set_bypass(sh, NULL);
    5214:	4620      	mov	r0, r4
    5216:	2100      	movs	r1, #0
    5218:	f7ff ff92 	bl	5140 <set_bypass.isra.0>
		if (!littleendian) {
    521c:	4b20      	ldr	r3, [pc, #128]	; (52a0 <bypass_cb+0x110>)
    521e:	7818      	ldrb	r0, [r3, #0]
    5220:	b970      	cbnz	r0, 5240 <bypass_cb+0xb0>
    5222:	4a20      	ldr	r2, [pc, #128]	; (52a4 <bypass_cb+0x114>)
    5224:	682b      	ldr	r3, [r5, #0]
    5226:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    5228:	2b04      	cmp	r3, #4
    522a:	dc0a      	bgt.n	5242 <bypass_cb+0xb2>
    522c:	b108      	cbz	r0, 5232 <bypass_cb+0xa2>
    522e:	6011      	str	r1, [r2, #0]
    5230:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    5232:	f013 0103 	ands.w	r1, r3, #3
    5236:	d10b      	bne.n	5250 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    5238:	6812      	ldr	r2, [r2, #0]
    523a:	6813      	ldr	r3, [r2, #0]
    523c:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    523e:	6013      	str	r3, [r2, #0]
}
    5240:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    5242:	6808      	ldr	r0, [r1, #0]
    5244:	ba00      	rev	r0, r0
    5246:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    524a:	3b04      	subs	r3, #4
				data++;
    524c:	2001      	movs	r0, #1
    524e:	e7eb      	b.n	5228 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    5250:	425b      	negs	r3, r3
    5252:	f003 0303 	and.w	r3, r3, #3
    5256:	bf58      	it	pl
    5258:	4259      	negpl	r1, r3
    525a:	2902      	cmp	r1, #2
    525c:	d104      	bne.n	5268 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    525e:	6812      	ldr	r2, [r2, #0]
    5260:	8813      	ldrh	r3, [r2, #0]
    5262:	ba5b      	rev16	r3, r3
    5264:	b29b      	uxth	r3, r3
    5266:	e7ea      	b.n	523e <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    5268:	2903      	cmp	r1, #3
    526a:	d1e9      	bne.n	5240 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    526c:	6810      	ldr	r0, [r2, #0]
    526e:	6802      	ldr	r2, [r0, #0]
    5270:	0411      	lsls	r1, r2, #16
    5272:	f3c2 4307 	ubfx	r3, r2, #16, #8
    5276:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    527a:	430b      	orrs	r3, r1
    527c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    5280:	4313      	orrs	r3, r2
    5282:	6003      	str	r3, [r0, #0]
    5284:	e7dc      	b.n	5240 <bypass_cb+0xb0>
    5286:	bf00      	nop
    5288:	20003b0c 	.word	0x20003b0c
    528c:	200021b0 	.word	0x200021b0
    5290:	20003b0e 	.word	0x20003b0e
    5294:	200021bc 	.word	0x200021bc
    5298:	200021b4 	.word	0x200021b4
    529c:	0002a913 	.word	0x0002a913
    52a0:	20003b0d 	.word	0x20003b0d
    52a4:	200021b8 	.word	0x200021b8

000052a8 <cmd_load>:
{
    52a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52ac:	460d      	mov	r5, r1
	chunk_element = 0;
    52ae:	492b      	ldr	r1, [pc, #172]	; (535c <cmd_load+0xb4>)
	littleendian = false;
    52b0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 5360 <cmd_load+0xb8>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    52b4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5364 <cmd_load+0xbc>
			shell_print(sh, "Unknown option \"%s\"", arg);
    52b8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 5368 <cmd_load+0xc0>
	littleendian = false;
    52bc:	2300      	movs	r3, #0
	chunk_element = 0;
    52be:	600b      	str	r3, [r1, #0]
	sum = 0;
    52c0:	492a      	ldr	r1, [pc, #168]	; (536c <cmd_load+0xc4>)
	littleendian = false;
    52c2:	f888 3000 	strb.w	r3, [r8]
{
    52c6:	4606      	mov	r6, r0
	sum = 0;
    52c8:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    52ca:	4614      	mov	r4, r2
    52cc:	2d01      	cmp	r5, #1
    52ce:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    52d0:	f854 af04 	ldr.w	sl, [r4, #4]!
	while (argc >= 2) {
    52d4:	d91e      	bls.n	5314 <cmd_load+0x6c>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    52d6:	2202      	movs	r2, #2
    52d8:	4649      	mov	r1, r9
    52da:	4650      	mov	r0, sl
    52dc:	f01e fc5b 	bl	23b96 <strncmp>
    52e0:	b980      	cbnz	r0, 5304 <cmd_load+0x5c>
    52e2:	6822      	ldr	r2, [r4, #0]
    52e4:	7892      	ldrb	r2, [r2, #2]
    52e6:	3a00      	subs	r2, #0
    52e8:	bf18      	it	ne
    52ea:	2201      	movne	r2, #1
    52ec:	4492      	add	sl, r2
		if (!strncmp(arg, "-e", 2)) {
    52ee:	4920      	ldr	r1, [pc, #128]	; (5370 <cmd_load+0xc8>)
    52f0:	2202      	movs	r2, #2
    52f2:	4650      	mov	r0, sl
    52f4:	f01e fc4f 	bl	23b96 <strncmp>
    52f8:	b930      	cbnz	r0, 5308 <cmd_load+0x60>
			littleendian = true;
    52fa:	2301      	movs	r3, #1
    52fc:	f888 3000 	strb.w	r3, [r8]
		argc--;
    5300:	3d01      	subs	r5, #1
    5302:	e7e3      	b.n	52cc <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    5304:	2200      	movs	r2, #0
    5306:	e7f1      	b.n	52ec <cmd_load+0x44>
		} else if (!strcmp(arg, "--")) {
    5308:	4649      	mov	r1, r9
    530a:	4650      	mov	r0, sl
    530c:	f01e fc37 	bl	23b7e <strcmp>
    5310:	b9a8      	cbnz	r0, 533e <cmd_load+0x96>
			argv++;
    5312:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    5314:	2200      	movs	r2, #0
    5316:	4611      	mov	r1, r2
    5318:	6878      	ldr	r0, [r7, #4]
    531a:	f01e fae8 	bl	238ee <strtol>
    531e:	4b15      	ldr	r3, [pc, #84]	; (5374 <cmd_load+0xcc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    5320:	2200      	movs	r2, #0
    5322:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    5324:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    5326:	6878      	ldr	r0, [r7, #4]
    5328:	f01e fae1 	bl	238ee <strtol>
    532c:	4b12      	ldr	r3, [pc, #72]	; (5378 <cmd_load+0xd0>)
	set_bypass(sh, bypass_cb);
    532e:	4913      	ldr	r1, [pc, #76]	; (537c <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    5330:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    5332:	4630      	mov	r0, r6
    5334:	f7ff ff04 	bl	5140 <set_bypass.isra.0>
}
    5338:	2000      	movs	r0, #0
    533a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    533e:	f89a 2000 	ldrb.w	r2, [sl]
    5342:	2a2d      	cmp	r2, #45	; 0x2d
    5344:	d1e6      	bne.n	5314 <cmd_load+0x6c>
    5346:	f89a 2001 	ldrb.w	r2, [sl, #1]
    534a:	2a00      	cmp	r2, #0
    534c:	d0e2      	beq.n	5314 <cmd_load+0x6c>
			shell_print(sh, "Unknown option \"%s\"", arg);
    534e:	4653      	mov	r3, sl
    5350:	465a      	mov	r2, fp
    5352:	2108      	movs	r1, #8
    5354:	4630      	mov	r0, r6
    5356:	f01d f81d 	bl	22394 <shell_fprintf>
    535a:	e7d1      	b.n	5300 <cmd_load+0x58>
    535c:	200021b0 	.word	0x200021b0
    5360:	20003b0d 	.word	0x20003b0d
    5364:	0002a92d 	.word	0x0002a92d
    5368:	0002a933 	.word	0x0002a933
    536c:	200021b4 	.word	0x200021b4
    5370:	0002a930 	.word	0x0002a930
    5374:	200021bc 	.word	0x200021bc
    5378:	200021b8 	.word	0x200021b8
    537c:	00005191 	.word	0x00005191

00005380 <cmd_dump>:
{
    5380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	optind = 1;
    5384:	4b57      	ldr	r3, [pc, #348]	; (54e4 <cmd_dump+0x164>)
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
    5386:	f8df a160 	ldr.w	sl, [pc, #352]	; 54e8 <cmd_dump+0x168>
{
    538a:	4691      	mov	r9, r2
	mem_addr_t addr = -1;
    538c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	optind = 1;
    5390:	2201      	movs	r2, #1
{
    5392:	b085      	sub	sp, #20
    5394:	4607      	mov	r7, r0
    5396:	4688      	mov	r8, r1
	optind = 1;
    5398:	601a      	str	r2, [r3, #0]
	size_t width = 32;
    539a:	2620      	movs	r6, #32
	size_t size = -1;
    539c:	462c      	mov	r4, r5
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
    539e:	4649      	mov	r1, r9
    53a0:	4652      	mov	r2, sl
    53a2:	4640      	mov	r0, r8
    53a4:	f7fc fef4 	bl	2190 <getopt>
    53a8:	1c41      	adds	r1, r0, #1
    53aa:	d107      	bne.n	53bc <cmd_dump+0x3c>
	if (addr == -1) {
    53ac:	1c6a      	adds	r2, r5, #1
    53ae:	d14f      	bne.n	5450 <cmd_dump+0xd0>
		shell_error(sh, "'-a <address>' is mandatory");
    53b0:	4a4e      	ldr	r2, [pc, #312]	; (54ec <cmd_dump+0x16c>)
		shell_error(sh, "'-s <size>' is mandatory");
    53b2:	2101      	movs	r1, #1
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    53b4:	4638      	mov	r0, r7
    53b6:	f01c ffed 	bl	22394 <shell_fprintf>
    53ba:	e01c      	b.n	53f6 <cmd_dump+0x76>
		switch (rv) {
    53bc:	2873      	cmp	r0, #115	; 0x73
    53be:	d01f      	beq.n	5400 <cmd_dump+0x80>
    53c0:	2877      	cmp	r0, #119	; 0x77
    53c2:	d031      	beq.n	5428 <cmd_dump+0xa8>
    53c4:	2861      	cmp	r0, #97	; 0x61
    53c6:	d116      	bne.n	53f6 <cmd_dump+0x76>
			addr = (mem_addr_t)strtoul(optarg, NULL, 16);
    53c8:	f8df b124 	ldr.w	fp, [pc, #292]	; 54f0 <cmd_dump+0x170>
    53cc:	2210      	movs	r2, #16
    53ce:	f8db 0000 	ldr.w	r0, [fp]
    53d2:	2100      	movs	r1, #0
    53d4:	f01e fb00 	bl	239d8 <strtoul>
			if (addr == 0 && errno == EINVAL) {
    53d8:	4605      	mov	r5, r0
    53da:	2800      	cmp	r0, #0
    53dc:	d1df      	bne.n	539e <cmd_dump+0x1e>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    53de:	f01a f80d 	bl	1f3fc <z_impl_z_errno>
    53e2:	6803      	ldr	r3, [r0, #0]
    53e4:	2b16      	cmp	r3, #22
    53e6:	d1da      	bne.n	539e <cmd_dump+0x1e>
				shell_error(sh, "invalid addr '%s'", optarg);
    53e8:	f8db 3000 	ldr.w	r3, [fp]
    53ec:	4a41      	ldr	r2, [pc, #260]	; (54f4 <cmd_dump+0x174>)
				shell_error(sh, "invalid size '%s'", optarg);
    53ee:	2101      	movs	r1, #1
    53f0:	4638      	mov	r0, r7
    53f2:	f01c ffcf 	bl	22394 <shell_fprintf>
				return -EINVAL;
    53f6:	f06f 0015 	mvn.w	r0, #21
}
    53fa:	b005      	add	sp, #20
    53fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = (size_t)strtoul(optarg, NULL, 0);
    5400:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 54f0 <cmd_dump+0x170>
    5404:	2200      	movs	r2, #0
    5406:	f8db 0000 	ldr.w	r0, [fp]
    540a:	4611      	mov	r1, r2
    540c:	f01e fae4 	bl	239d8 <strtoul>
			if (size == 0 && errno == EINVAL) {
    5410:	4604      	mov	r4, r0
    5412:	2800      	cmp	r0, #0
    5414:	d1c3      	bne.n	539e <cmd_dump+0x1e>
    5416:	f019 fff1 	bl	1f3fc <z_impl_z_errno>
    541a:	6803      	ldr	r3, [r0, #0]
    541c:	2b16      	cmp	r3, #22
    541e:	d1be      	bne.n	539e <cmd_dump+0x1e>
				shell_error(sh, "invalid size '%s'", optarg);
    5420:	f8db 3000 	ldr.w	r3, [fp]
    5424:	4a34      	ldr	r2, [pc, #208]	; (54f8 <cmd_dump+0x178>)
    5426:	e7e2      	b.n	53ee <cmd_dump+0x6e>
			width = (size_t)strtoul(optarg, NULL, 0);
    5428:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 54f0 <cmd_dump+0x170>
    542c:	2200      	movs	r2, #0
    542e:	f8db 0000 	ldr.w	r0, [fp]
    5432:	4611      	mov	r1, r2
    5434:	f01e fad0 	bl	239d8 <strtoul>
			if (width == 0 && errno == EINVAL) {
    5438:	4606      	mov	r6, r0
    543a:	2800      	cmp	r0, #0
    543c:	d1af      	bne.n	539e <cmd_dump+0x1e>
    543e:	f019 ffdd 	bl	1f3fc <z_impl_z_errno>
    5442:	6803      	ldr	r3, [r0, #0]
    5444:	2b16      	cmp	r3, #22
    5446:	d1aa      	bne.n	539e <cmd_dump+0x1e>
				shell_error(sh, "invalid width '%s'", optarg);
    5448:	f8db 3000 	ldr.w	r3, [fp]
    544c:	4a2b      	ldr	r2, [pc, #172]	; (54fc <cmd_dump+0x17c>)
    544e:	e7ce      	b.n	53ee <cmd_dump+0x6e>
	if (size == -1) {
    5450:	1c63      	adds	r3, r4, #1
    5452:	d101      	bne.n	5458 <cmd_dump+0xd8>
		shell_error(sh, "'-s <size>' is mandatory");
    5454:	4a2a      	ldr	r2, [pc, #168]	; (5500 <cmd_dump+0x180>)
    5456:	e7ac      	b.n	53b2 <cmd_dump+0x32>
	return memory_dump(sh, addr, size, width);
    5458:	fa5f f886 	uxtb.w	r8, r6
	const size_t vsize = width / BITS_PER_BYTE;
    545c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
	for (; size > 0;
    5460:	2c00      	cmp	r4, #0
    5462:	d03c      	beq.n	54de <cmd_dump+0x15e>
    5464:	466b      	mov	r3, sp
    5466:	4629      	mov	r1, r5
    5468:	461a      	mov	r2, r3
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
    546a:	eba6 0c05 	sub.w	ip, r6, r5
    546e:	e00c      	b.n	548a <cmd_dump+0x10a>
			switch (width) {
    5470:	f1b8 0f10 	cmp.w	r8, #16
    5474:	d01d      	beq.n	54b2 <cmd_dump+0x132>
    5476:	f1b8 0f20 	cmp.w	r8, #32
    547a:	d020      	beq.n	54be <cmd_dump+0x13e>
    547c:	f1b8 0f08 	cmp.w	r8, #8
    5480:	d12a      	bne.n	54d8 <cmd_dump+0x158>
	return *(volatile uint8_t *)addr;
    5482:	7808      	ldrb	r0, [r1, #0]
				data[data_offset] = value;
    5484:	7018      	strb	r0, [r3, #0]
				break;
    5486:	4431      	add	r1, r6
    5488:	4433      	add	r3, r6
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
    548a:	42a6      	cmp	r6, r4
    548c:	d803      	bhi.n	5496 <cmd_dump+0x116>
    548e:	eb0c 0001 	add.w	r0, ip, r1
    5492:	2810      	cmp	r0, #16
    5494:	d9ec      	bls.n	5470 <cmd_dump+0xf0>
		shell_hexdump_line(sh, addr, data, MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE));
    5496:	2c10      	cmp	r4, #16
    5498:	46a1      	mov	r9, r4
    549a:	bf28      	it	cs
    549c:	f04f 0910 	movcs.w	r9, #16
    54a0:	4629      	mov	r1, r5
    54a2:	464b      	mov	r3, r9
    54a4:	4638      	mov	r0, r7
    54a6:	f000 ff77 	bl	6398 <shell_hexdump_line>
	     addr += SHELL_HEXDUMP_BYTES_IN_LINE, size -= MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE)) {
    54aa:	3510      	adds	r5, #16
    54ac:	eba4 0409 	sub.w	r4, r4, r9
    54b0:	e7d6      	b.n	5460 <cmd_dump+0xe0>
	return *(volatile uint16_t *)addr;
    54b2:	8808      	ldrh	r0, [r1, #0]
    54b4:	b280      	uxth	r0, r0
				data[data_offset] = (uint8_t)value;
    54b6:	7018      	strb	r0, [r3, #0]
				value >>= 8;
    54b8:	0a00      	lsrs	r0, r0, #8
				data[data_offset + 1] = (uint8_t)value;
    54ba:	7058      	strb	r0, [r3, #1]
				break;
    54bc:	e7e3      	b.n	5486 <cmd_dump+0x106>
	return *(volatile uint32_t *)addr;
    54be:	6808      	ldr	r0, [r1, #0]
				data[data_offset] = (uint8_t)value;
    54c0:	7018      	strb	r0, [r3, #0]
				value >>= 8;
    54c2:	ea4f 2e10 	mov.w	lr, r0, lsr #8
				data[data_offset + 1] = (uint8_t)value;
    54c6:	f883 e001 	strb.w	lr, [r3, #1]
				value >>= 8;
    54ca:	ea4f 4e10 	mov.w	lr, r0, lsr #16
				value >>= 8;
    54ce:	0e00      	lsrs	r0, r0, #24
				data[data_offset + 2] = (uint8_t)value;
    54d0:	f883 e002 	strb.w	lr, [r3, #2]
				data[data_offset + 3] = (uint8_t)value;
    54d4:	70d8      	strb	r0, [r3, #3]
				break;
    54d6:	e7d6      	b.n	5486 <cmd_dump+0x106>
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    54d8:	4a0a      	ldr	r2, [pc, #40]	; (5504 <cmd_dump+0x184>)
    54da:	2108      	movs	r1, #8
    54dc:	e76a      	b.n	53b4 <cmd_dump+0x34>
	return 0;
    54de:	4620      	mov	r0, r4
	return memory_dump(sh, addr, size, width);
    54e0:	e78b      	b.n	53fa <cmd_dump+0x7a>
    54e2:	bf00      	nop
    54e4:	200001a4 	.word	0x200001a4
    54e8:	0002a982 	.word	0x0002a982
    54ec:	0002a989 	.word	0x0002a989
    54f0:	20002170 	.word	0x20002170
    54f4:	0002a948 	.word	0x0002a948
    54f8:	0002a95b 	.word	0x0002a95b
    54fc:	0002a96e 	.word	0x0002a96e
    5500:	0002a9a6 	.word	0x0002a9a6
    5504:	0002a873 	.word	0x0002a873

00005508 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_TRANSPORT_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    5508:	b507      	push	{r0, r1, r2, lr}
    550a:	480a      	ldr	r0, [pc, #40]	; (5534 <enable_shell_uart+0x2c>)
    550c:	f021 f9ec 	bl	268e8 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    5510:	b160      	cbz	r0, 552c <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_TRANSPORT_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    5512:	4a09      	ldr	r2, [pc, #36]	; (5538 <enable_shell_uart+0x30>)
    5514:	4907      	ldr	r1, [pc, #28]	; (5534 <enable_shell_uart+0x2c>)
    5516:	6812      	ldr	r2, [r2, #0]
    5518:	4808      	ldr	r0, [pc, #32]	; (553c <enable_shell_uart+0x34>)
    551a:	2304      	movs	r3, #4
    551c:	9300      	str	r3, [sp, #0]
    551e:	2301      	movs	r3, #1
    5520:	f000 fe0c 	bl	613c <shell_init>

	return 0;
    5524:	2000      	movs	r0, #0
}
    5526:	b003      	add	sp, #12
    5528:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    552c:	f06f 0012 	mvn.w	r0, #18
    5530:	e7f9      	b.n	5526 <enable_shell_uart+0x1e>
    5532:	bf00      	nop
    5534:	00027618 	.word	0x00027618
    5538:	00027fa4 	.word	0x00027fa4
    553c:	00027a80 	.word	0x00027a80

00005540 <init>:
{
    5540:	b510      	push	{r4, lr}
    5542:	4614      	mov	r4, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    5544:	6842      	ldr	r2, [r0, #4]
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    5546:	6810      	ldr	r0, [r2, #0]
    5548:	6001      	str	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
    554a:	6811      	ldr	r1, [r2, #0]
    554c:	604c      	str	r4, [r1, #4]
	sh_uart->ctrl_blk->context = context;
    554e:	6811      	ldr	r1, [r2, #0]
    5550:	608b      	str	r3, [r1, #8]
	const struct device *dev = sh_uart->ctrl_blk->dev;
    5552:	6813      	ldr	r3, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    5554:	6891      	ldr	r1, [r2, #8]
	const struct device *dev = sh_uart->ctrl_blk->dev;
    5556:	681c      	ldr	r4, [r3, #0]
 *
 * Any value other than 0 makes sense only in validation testing context.
 */
static inline void ring_buf_internal_reset(struct ring_buf *buf, int32_t value)
{
	buf->put_head = buf->put_tail = buf->put_base = value;
    5558:	2300      	movs	r3, #0
    555a:	e9c1 3302 	strd	r3, r3, [r1, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
    555e:	e9c1 3305 	strd	r3, r3, [r1, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
    5562:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    5564:	610b      	str	r3, [r1, #16]
	ring_buf_reset(sh_uart->rx_ringbuf);
    5566:	68d1      	ldr	r1, [r2, #12]
	buf->put_head = buf->put_tail = buf->put_base = value;
    5568:	e9c1 3302 	strd	r3, r3, [r1, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
    556c:	e9c1 3305 	strd	r3, r3, [r1, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
    5570:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    5572:	610b      	str	r3, [r1, #16]
	sh_uart->ctrl_blk->tx_busy = 0;
    5574:	6811      	ldr	r1, [r2, #0]
    5576:	60cb      	str	r3, [r1, #12]
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    5578:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    557a:	b123      	cbz	r3, 5586 <init+0x46>
    557c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    557e:	b113      	cbz	r3, 5586 <init+0x46>
		api->irq_callback_set(dev, cb, user_data);
    5580:	4904      	ldr	r1, [pc, #16]	; (5594 <init+0x54>)
    5582:	4620      	mov	r0, r4
    5584:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    5586:	68a3      	ldr	r3, [r4, #8]
    5588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    558a:	b10b      	cbz	r3, 5590 <init+0x50>
		api->irq_rx_enable(dev);
    558c:	4620      	mov	r0, r4
    558e:	4798      	blx	r3
}
    5590:	2000      	movs	r0, #0
    5592:	bd10      	pop	{r4, pc}
    5594:	00005599 	.word	0x00005599

00005598 <uart_callback>:
{
    5598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    559c:	b083      	sub	sp, #12
    559e:	4604      	mov	r4, r0
    55a0:	af00      	add	r7, sp, #0
    55a2:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
    55a4:	6883      	ldr	r3, [r0, #8]
    55a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    55a8:	b103      	cbz	r3, 55ac <uart_callback+0x14>
	return api->irq_update(dev);
    55aa:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    55ac:	68a3      	ldr	r3, [r4, #8]
    55ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    55b0:	bb03      	cbnz	r3, 55f4 <uart_callback+0x5c>
    55b2:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    55b6:	68e8      	ldr	r0, [r5, #12]
    55b8:	1d39      	adds	r1, r7, #4
    55ba:	69c2      	ldr	r2, [r0, #28]
    55bc:	f01c f81e 	bl	215fc <ring_buf_put_claim>
		if (len > 0) {
    55c0:	4681      	mov	r9, r0
    55c2:	2800      	cmp	r0, #0
    55c4:	d037      	beq.n	5636 <uart_callback+0x9e>
	if (api->fifo_read == NULL) {
    55c6:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    55c8:	6879      	ldr	r1, [r7, #4]
    55ca:	699b      	ldr	r3, [r3, #24]
    55cc:	b343      	cbz	r3, 5620 <uart_callback+0x88>
	return api->fifo_read(dev, rx_data, size);
    55ce:	4602      	mov	r2, r0
    55d0:	4620      	mov	r0, r4
    55d2:	4798      	blx	r3
			if (rd_len > 0) {
    55d4:	4606      	mov	r6, r0
    55d6:	b330      	cbz	r0, 5626 <uart_callback+0x8e>
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    55d8:	68e8      	ldr	r0, [r5, #12]
    55da:	4631      	mov	r1, r6
    55dc:	f01c f82d 	bl	2163a <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    55e0:	45b1      	cmp	r9, r6
				new_data = true;
    55e2:	f04f 0801 	mov.w	r8, #1
	} while (rd_len && (rd_len == len));
    55e6:	d0e6      	beq.n	55b6 <uart_callback+0x1e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    55e8:	682b      	ldr	r3, [r5, #0]
    55ea:	2000      	movs	r0, #0
    55ec:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    55f0:	4790      	blx	r2
}
    55f2:	e003      	b.n	55fc <uart_callback+0x64>
	return api->irq_rx_ready(dev);
    55f4:	4620      	mov	r0, r4
    55f6:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    55f8:	2800      	cmp	r0, #0
    55fa:	d1da      	bne.n	55b2 <uart_callback+0x1a>
	if (api->irq_tx_ready == NULL) {
    55fc:	68a3      	ldr	r3, [r4, #8]
    55fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5600:	2b00      	cmp	r3, #0
    5602:	d136      	bne.n	5672 <uart_callback+0xda>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    5604:	68a8      	ldr	r0, [r5, #8]
    5606:	1d39      	adds	r1, r7, #4
    5608:	69c2      	ldr	r2, [r0, #28]
    560a:	f01c f84a 	bl	216a2 <ring_buf_get_claim>
	if (len) {
    560e:	4606      	mov	r6, r0
    5610:	2800      	cmp	r0, #0
    5612:	d136      	bne.n	5682 <uart_callback+0xea>
		uart_irq_tx_disable(dev);
    5614:	4620      	mov	r0, r4
    5616:	f01c fd5f 	bl	220d8 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    561a:	682b      	ldr	r3, [r5, #0]
    561c:	60de      	str	r6, [r3, #12]
    561e:	e03b      	b.n	5698 <uart_callback+0x100>
			rd_len = uart_fifo_read(dev, data, len);
    5620:	f06f 0657 	mvn.w	r6, #87	; 0x57
    5624:	e7d8      	b.n	55d8 <uart_callback+0x40>
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    5626:	4601      	mov	r1, r0
    5628:	68e8      	ldr	r0, [r5, #12]
    562a:	f01c f806 	bl	2163a <ring_buf_put_finish>
	if (new_data) {
    562e:	f1b8 0f00 	cmp.w	r8, #0
    5632:	d0e3      	beq.n	55fc <uart_callback+0x64>
    5634:	e7d8      	b.n	55e8 <uart_callback+0x50>
			LOG_WRN("RX ring buffer full.");
    5636:	481d      	ldr	r0, [pc, #116]	; (56ac <uart_callback+0x114>)
    5638:	6803      	ldr	r3, [r0, #0]
    563a:	f013 0f06 	tst.w	r3, #6
    563e:	d00f      	beq.n	5660 <uart_callback+0xc8>
    5640:	466e      	mov	r6, sp
    5642:	b088      	sub	sp, #32
    5644:	466a      	mov	r2, sp
    5646:	4b1a      	ldr	r3, [pc, #104]	; (56b0 <uart_callback+0x118>)
    5648:	6153      	str	r3, [r2, #20]
    564a:	4b1a      	ldr	r3, [pc, #104]	; (56b4 <uart_callback+0x11c>)
    564c:	6193      	str	r3, [r2, #24]
    564e:	2303      	movs	r3, #3
    5650:	f842 3f10 	str.w	r3, [r2, #16]!
    5654:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5658:	464b      	mov	r3, r9
    565a:	f7fe fd79 	bl	4150 <z_impl_z_log_msg_static_create>
    565e:	46b5      	mov	sp, r6
	if (api->fifo_read == NULL) {
    5660:	68a3      	ldr	r3, [r4, #8]
    5662:	699b      	ldr	r3, [r3, #24]
    5664:	2b00      	cmp	r3, #0
    5666:	d0e2      	beq.n	562e <uart_callback+0x96>
	return api->fifo_read(dev, rx_data, size);
    5668:	2201      	movs	r2, #1
    566a:	1cf9      	adds	r1, r7, #3
    566c:	4620      	mov	r0, r4
    566e:	4798      	blx	r3
    5670:	e7dd      	b.n	562e <uart_callback+0x96>
	return api->irq_tx_ready(dev);
    5672:	4620      	mov	r0, r4
    5674:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    5676:	2800      	cmp	r0, #0
    5678:	d1c4      	bne.n	5604 <uart_callback+0x6c>
}
    567a:	370c      	adds	r7, #12
    567c:	46bd      	mov	sp, r7
    567e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (api->fifo_fill == NULL) {
    5682:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    5684:	6879      	ldr	r1, [r7, #4]
    5686:	695b      	ldr	r3, [r3, #20]
    5688:	b163      	cbz	r3, 56a4 <uart_callback+0x10c>
	return api->fifo_fill(dev, tx_data, size);
    568a:	4602      	mov	r2, r0
    568c:	4620      	mov	r0, r4
    568e:	4798      	blx	r3
    5690:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    5692:	68a8      	ldr	r0, [r5, #8]
    5694:	f01c f825 	bl	216e2 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    5698:	682b      	ldr	r3, [r5, #0]
    569a:	2001      	movs	r0, #1
    569c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    56a0:	4790      	blx	r2
}
    56a2:	e7ea      	b.n	567a <uart_callback+0xe2>
		return -ENOSYS;
    56a4:	f06f 0157 	mvn.w	r1, #87	; 0x57
    56a8:	e7f3      	b.n	5692 <uart_callback+0xfa>
    56aa:	bf00      	nop
    56ac:	20000b48 	.word	0x20000b48
    56b0:	0002ab0c 	.word	0x0002ab0c
    56b4:	0002ab25 	.word	0x0002ab25

000056b8 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    56b8:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    56ba:	6881      	ldr	r1, [r0, #8]
{
    56bc:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    56be:	3108      	adds	r1, #8
    56c0:	f001 f900 	bl	68c4 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    56c4:	68a1      	ldr	r1, [r4, #8]
    56c6:	4a03      	ldr	r2, [pc, #12]	; (56d4 <shell_internal_help_print+0x1c>)
    56c8:	4620      	mov	r0, r4
    56ca:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    56cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    56d0:	f001 b898 	b.w	6804 <z_shell_help_subcmd_print>
    56d4:	0002ab65 	.word	0x0002ab65

000056d8 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    56d8:	4901      	ldr	r1, [pc, #4]	; (56e0 <z_cursor_next_line_move.isra.0+0x8>)
    56da:	f01c bd9e 	b.w	2221a <z_shell_raw_fprintf>
    56de:	bf00      	nop
    56e0:	0002a597 	.word	0x0002a597

000056e4 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    56e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    56e6:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    56e8:	6880      	ldr	r0, [r0, #8]
    56ea:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    56ee:	075a      	lsls	r2, r3, #29
{
    56f0:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    56f2:	d505      	bpl.n	5700 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    56f4:	2100      	movs	r1, #0
    56f6:	f01c fdd1 	bl	2229c <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    56fa:	68e0      	ldr	r0, [r4, #12]
    56fc:	f01d fd62 	bl	231c4 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    5700:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    5702:	68db      	ldr	r3, [r3, #12]
    5704:	b973      	cbnz	r3, 5724 <history_handle+0x40>
		if (up) {
    5706:	2d00      	cmp	r5, #0
    5708:	d039      	beq.n	577e <history_handle+0x9a>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    570a:	68a0      	ldr	r0, [r4, #8]
    570c:	3042      	adds	r0, #66	; 0x42
    570e:	f01c fd7e 	bl	2220e <z_shell_strlen>

			if (cmd_len) {
    5712:	68a3      	ldr	r3, [r4, #8]
    5714:	2800      	cmp	r0, #0
    5716:	d034      	beq.n	5782 <history_handle+0x9e>
				strcpy(shell->ctx->temp_buff,
    5718:	f103 0142 	add.w	r1, r3, #66	; 0x42
    571c:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    5720:	f01e f9f1 	bl	23b06 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    5724:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    5726:	68e0      	ldr	r0, [r4, #12]
    5728:	f10d 0306 	add.w	r3, sp, #6
    572c:	3242      	adds	r2, #66	; 0x42
    572e:	4629      	mov	r1, r5
    5730:	f01d fd4b 	bl	231ca <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    5734:	b958      	cbnz	r0, 574e <history_handle+0x6a>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    5736:	68a0      	ldr	r0, [r4, #8]
    5738:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    573c:	3042      	adds	r0, #66	; 0x42
    573e:	f01e f9e2 	bl	23b06 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    5742:	68a0      	ldr	r0, [r4, #8]
    5744:	3042      	adds	r0, #66	; 0x42
    5746:	f01c fd62 	bl	2220e <z_shell_strlen>
    574a:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    574e:	4620      	mov	r0, r4
    5750:	f01d f9a3 	bl	22a9a <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    5754:	68a3      	ldr	r3, [r4, #8]
    5756:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    575a:	069b      	lsls	r3, r3, #26
    575c:	d503      	bpl.n	5766 <history_handle+0x82>
    575e:	490a      	ldr	r1, [pc, #40]	; (5788 <history_handle+0xa4>)
    5760:	6960      	ldr	r0, [r4, #20]
    5762:	f01c fd5a 	bl	2221a <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    5766:	4620      	mov	r0, r4
    5768:	f000 ff18 	bl	659c <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    576c:	68a2      	ldr	r2, [r4, #8]
    576e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5772:	87d3      	strh	r3, [r2, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    5774:	68a2      	ldr	r2, [r4, #8]
	z_shell_op_cond_next_line(shell);
    5776:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_len = len;
    5778:	8793      	strh	r3, [r2, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    577a:	f01d f8f9 	bl	22970 <z_shell_op_cond_next_line>
}
    577e:	b003      	add	sp, #12
    5780:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    5782:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    5786:	e7cd      	b.n	5724 <history_handle+0x40>
    5788:	00027ba8 	.word	0x00027ba8

0000578c <state_set.constprop.0>:
static inline void state_set(const struct shell *shell, enum shell_state state)
    578c:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    578e:	6883      	ldr	r3, [r0, #8]
    5790:	2202      	movs	r2, #2
    5792:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    5794:	6883      	ldr	r3, [r0, #8]
    5796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    5798:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    579a:	b9bb      	cbnz	r3, 57cc <state_set.constprop.0+0x40>
		cmd_buffer_clear(shell);
    579c:	f01c fcfa 	bl	22194 <cmd_buffer_clear>
	return sh->ctx->ctx.flags.print_noinit == 1;
    57a0:	6883      	ldr	r3, [r0, #8]
    57a2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    57a6:	04db      	lsls	r3, r3, #19
    57a8:	d50b      	bpl.n	57c2 <state_set.constprop.0+0x36>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    57aa:	2103      	movs	r1, #3
    57ac:	4b08      	ldr	r3, [pc, #32]	; (57d0 <state_set.constprop.0+0x44>)
    57ae:	4a09      	ldr	r2, [pc, #36]	; (57d4 <state_set.constprop.0+0x48>)
    57b0:	f01d fa26 	bl	22c00 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    57b4:	68a0      	ldr	r0, [r4, #8]
    57b6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    57ba:	f500 7019 	add.w	r0, r0, #612	; 0x264
    57be:	f01c fd01 	bl	221c4 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    57c2:	4620      	mov	r0, r4
}
    57c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    57c8:	f000 bffe 	b.w	67c8 <z_shell_print_prompt_and_cmd>
}
    57cc:	bd10      	pop	{r4, pc}
    57ce:	bf00      	nop
    57d0:	0002ab73 	.word	0x0002ab73
    57d4:	0002a7ba 	.word	0x0002a7ba

000057d8 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    57d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57dc:	b0a7      	sub	sp, #156	; 0x9c
    57de:	4604      	mov	r4, r0
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1] = {0}; /* +1 reserved for NULL */
    57e0:	2254      	movs	r2, #84	; 0x54
    57e2:	2100      	movs	r1, #0
    57e4:	a811      	add	r0, sp, #68	; 0x44
    57e6:	f01e fa1c 	bl	23c22 <memset>
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    57ea:	2300      	movs	r3, #0
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    57ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    57f0:	68a3      	ldr	r3, [r4, #8]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    57f2:	4620      	mov	r0, r4
	char *cmd_buf = shell->ctx->cmd_buff;
    57f4:	3342      	adds	r3, #66	; 0x42
    57f6:	9302      	str	r3, [sp, #8]
	z_shell_op_cursor_end_move(shell);
    57f8:	f01d f955 	bl	22aa6 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    57fc:	4620      	mov	r0, r4
    57fe:	f01d f89e 	bl	2293e <z_shell_cursor_in_empty_line>
    5802:	b910      	cbnz	r0, 580a <execute+0x32>
		z_cursor_next_line_move(shell);
    5804:	6960      	ldr	r0, [r4, #20]
    5806:	f7ff ff67 	bl	56d8 <z_cursor_next_line_move.isra.0>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    580a:	68a0      	ldr	r0, [r4, #8]
    580c:	2214      	movs	r2, #20
    580e:	2100      	movs	r1, #0
    5810:	3008      	adds	r0, #8
    5812:	f01e fa06 	bl	23c22 <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    5816:	4620      	mov	r0, r4
    5818:	f01c ffdb 	bl	227d2 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    581c:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    581e:	68e0      	ldr	r0, [r4, #12]
    5820:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    5822:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    5824:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    5826:	f01d fd07 	bl	23238 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    582a:	4620      	mov	r0, r4
    582c:	f01d fd86 	bl	2333c <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    5830:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    5834:	46b2      	mov	sl, r6
		z_shell_wildcard_prepare(shell);
    5836:	9603      	str	r6, [sp, #12]
    5838:	f10d 0844 	add.w	r8, sp, #68	; 0x44
    583c:	46b3      	mov	fp, r6
    583e:	4635      	mov	r5, r6
    5840:	46b1      	mov	r9, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
		&& args_left > 0) {
    5842:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    5846:	2a01      	cmp	r2, #1
    5848:	d06d      	beq.n	5926 <execute+0x14e>
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    584a:	2b13      	cmp	r3, #19
    584c:	d86e      	bhi.n	592c <execute+0x154>
		&& args_left > 0) {
    584e:	bb5f      	cbnz	r7, 58a8 <execute+0xd0>
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
				SHELL_MSG_TOO_MANY_ARGS);
		return -ENOEXEC;
	}

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    5850:	f1bb 0f00 	cmp.w	fp, #0
    5854:	d00a      	beq.n	586c <execute+0x94>
		z_shell_wildcard_finalize(shell);
    5856:	4620      	mov	r0, r4
    5858:	f01d fd91 	bl	2337e <z_shell_wildcard_finalize>
		 * with all expanded commands. Hence shell_make_argv needs to
		 * be called again.
		 */
		(void)z_shell_make_argv(&cmd_lvl,
					&argv[selected_cmd_get(shell) ? 1 : 0],
					shell->ctx->cmd_buff,
    585c:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    585e:	2314      	movs	r3, #20
    5860:	3242      	adds	r2, #66	; 0x42
    5862:	a911      	add	r1, sp, #68	; 0x44
    5864:	eb0d 0003 	add.w	r0, sp, r3
    5868:	f01c fe3e 	bl	224e8 <z_shell_make_argv>
			cmd_lvl++;
		}
	}

	/* If a command was found */
	if (parent != NULL) {
    586c:	f1b9 0f00 	cmp.w	r9, #0
    5870:	d00c      	beq.n	588c <execute+0xb4>
		/* If the found command uses a raw optional argument and
		 * we have a remaining unprocessed non-null string,
		 * then increment command level so handler receives raw string
		 */
		if (parent->args.optional == SHELL_OPT_ARG_RAW && argv[cmd_lvl] != NULL) {
    5872:	f899 3011 	ldrb.w	r3, [r9, #17]
    5876:	2bfe      	cmp	r3, #254	; 0xfe
    5878:	d108      	bne.n	588c <execute+0xb4>
    587a:	9b05      	ldr	r3, [sp, #20]
    587c:	aa26      	add	r2, sp, #152	; 0x98
    587e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5882:	f852 2c54 	ldr.w	r2, [r2, #-84]
    5886:	b10a      	cbz	r2, 588c <execute+0xb4>
			cmd_lvl++;
    5888:	3301      	adds	r3, #1
    588a:	9305      	str	r3, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    588c:	68a0      	ldr	r0, [r4, #8]
		}
	}

	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    588e:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    5890:	6943      	ldr	r3, [r0, #20]
    5892:	2b00      	cmp	r3, #0
    5894:	f040 80b6 	bne.w	5a04 <execute+0x22c>
			if (help_entry->help == NULL) {
    5898:	b1ce      	cbz	r6, 58ce <execute+0xf6>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    589a:	68c3      	ldr	r3, [r0, #12]
    589c:	429e      	cmp	r6, r3
    589e:	d02d      	beq.n	58fc <execute+0x124>
				shell->ctx->active_cmd = *help_entry;
    58a0:	960d      	str	r6, [sp, #52]	; 0x34
    58a2:	f100 0508 	add.w	r5, r0, #8
    58a6:	e024      	b.n	58f2 <execute+0x11a>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    58a8:	9a02      	ldr	r2, [sp, #8]
    58aa:	2302      	movs	r3, #2
    58ac:	4641      	mov	r1, r8
    58ae:	a806      	add	r0, sp, #24
    58b0:	f01c fe1a 	bl	224e8 <z_shell_make_argv>
		if (argc == 0) {
    58b4:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    58b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    58ba:	9202      	str	r2, [sp, #8]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    58bc:	4603      	mov	r3, r0
		if (argc == 0) {
    58be:	b131      	cbz	r1, 58ce <execute+0xf6>
		} else if ((argc == 1) && (quote != 0)) {
    58c0:	2901      	cmp	r1, #1
    58c2:	d10a      	bne.n	58da <execute+0x102>
    58c4:	b148      	cbz	r0, 58da <execute+0x102>
			z_shell_fprintf(shell, SHELL_ERROR,
    58c6:	4a6f      	ldr	r2, [pc, #444]	; (5a84 <execute+0x2ac>)
    58c8:	4620      	mov	r0, r4
    58ca:	f01d f999 	bl	22c00 <z_shell_fprintf>
			return -ENOEXEC;
    58ce:	f06f 0507 	mvn.w	r5, #7
			&argv[cmd_with_handler_lvl], &help_entry);
}
    58d2:	4628      	mov	r0, r5
    58d4:	b027      	add	sp, #156	; 0x9c
    58d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    58da:	9b05      	ldr	r3, [sp, #20]
    58dc:	2b00      	cmp	r3, #0
    58de:	d034      	beq.n	594a <execute+0x172>
		    z_shell_help_request(argvp[0])) {
    58e0:	f8d8 0000 	ldr.w	r0, [r8]
    58e4:	f001 f812 	bl	690c <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    58e8:	b198      	cbz	r0, 5912 <execute+0x13a>
			if (help_entry.help) {
    58ea:	b166      	cbz	r6, 5906 <execute+0x12e>
				shell->ctx->active_cmd = help_entry;
    58ec:	68a5      	ldr	r5, [r4, #8]
    58ee:	960d      	str	r6, [sp, #52]	; 0x34
    58f0:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    58f2:	ae0c      	add	r6, sp, #48	; 0x30
    58f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    58f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    58f8:	6833      	ldr	r3, [r6, #0]
    58fa:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    58fc:	4620      	mov	r0, r4
    58fe:	f7ff fedb 	bl	56b8 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    5902:	2501      	movs	r5, #1
    5904:	e7e5      	b.n	58d2 <execute+0xfa>
			z_shell_fprintf(shell, SHELL_ERROR,
    5906:	4a60      	ldr	r2, [pc, #384]	; (5a88 <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
    5908:	2101      	movs	r1, #1
    590a:	4620      	mov	r0, r4
    590c:	f01d f978 	bl	22c00 <z_shell_fprintf>
		return false;
    5910:	e7dd      	b.n	58ce <execute+0xf6>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    5912:	9b05      	ldr	r3, [sp, #20]
    5914:	b1cb      	cbz	r3, 594a <execute+0x172>
			status = z_shell_wildcard_process(shell, entry,
    5916:	f8d8 2000 	ldr.w	r2, [r8]
    591a:	4629      	mov	r1, r5
    591c:	4620      	mov	r0, r4
    591e:	f001 f98f 	bl	6c40 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    5922:	2802      	cmp	r0, #2
    5924:	d109      	bne.n	593a <execute+0x162>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    5926:	9b05      	ldr	r3, [sp, #20]
    5928:	2b13      	cmp	r3, #19
    592a:	d991      	bls.n	5850 <execute+0x78>
    592c:	9b06      	ldr	r3, [sp, #24]
    592e:	2b02      	cmp	r3, #2
    5930:	d18e      	bne.n	5850 <execute+0x78>
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    5932:	4b56      	ldr	r3, [pc, #344]	; (5a8c <execute+0x2b4>)
    5934:	4a56      	ldr	r2, [pc, #344]	; (5a90 <execute+0x2b8>)
    5936:	2101      	movs	r1, #1
    5938:	e7c6      	b.n	58c8 <execute+0xf0>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    593a:	2803      	cmp	r0, #3
    593c:	d005      	beq.n	594a <execute+0x172>
				++cmd_lvl;
    593e:	9b05      	ldr	r3, [sp, #20]
    5940:	3301      	adds	r3, #1
    5942:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    5944:	f04f 0b01 	mov.w	fp, #1
				continue;
    5948:	e77b      	b.n	5842 <execute+0x6a>
		if (has_last_handler == false) {
    594a:	9b03      	ldr	r3, [sp, #12]
    594c:	b933      	cbnz	r3, 595c <execute+0x184>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    594e:	f8d8 1000 	ldr.w	r1, [r8]
    5952:	aa07      	add	r2, sp, #28
    5954:	4648      	mov	r0, r9
    5956:	f01c febd 	bl	226d4 <z_shell_find_cmd>
    595a:	4605      	mov	r5, r0
		argvp++;
    595c:	f108 0804 	add.w	r8, r8, #4
		args_left--;
    5960:	3f01      	subs	r7, #1
		if (entry) {
    5962:	b39d      	cbz	r5, 59cc <execute+0x1f4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    5964:	68eb      	ldr	r3, [r5, #12]
    5966:	f1bb 0f00 	cmp.w	fp, #0
    596a:	d008      	beq.n	597e <execute+0x1a6>
    596c:	b1f3      	cbz	r3, 59ac <execute+0x1d4>
		z_shell_op_cursor_end_move(shell);
    596e:	4620      	mov	r0, r4
    5970:	f01d f899 	bl	22aa6 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    5974:	4620      	mov	r0, r4
    5976:	f01c fffb 	bl	22970 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    597a:	4a46      	ldr	r2, [pc, #280]	; (5a94 <execute+0x2bc>)
    597c:	e7c4      	b.n	5908 <execute+0x130>
	if (entry->handler) {
    597e:	b1ab      	cbz	r3, 59ac <execute+0x1d4>
			active_cmd_prepare(entry, &shell->ctx->active_cmd,
    5980:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    5982:	f8dd a014 	ldr.w	sl, [sp, #20]
		*active_cmd = *entry;
    5986:	46ae      	mov	lr, r5
    5988:	f103 0c08 	add.w	ip, r3, #8
    598c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5990:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5994:	f8de 3000 	ldr.w	r3, [lr]
    5998:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    599c:	68ab      	ldr	r3, [r5, #8]
    599e:	b92b      	cbnz	r3, 59ac <execute+0x1d4>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    59a0:	7c6b      	ldrb	r3, [r5, #17]
    59a2:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    59a4:	bf04      	itt	eq
    59a6:	7c2f      	ldrbeq	r7, [r5, #16]
    59a8:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
	if (entry->help) {
    59ac:	f8d5 c004 	ldr.w	ip, [r5, #4]
    59b0:	f1bc 0f00 	cmp.w	ip, #0
    59b4:	d008      	beq.n	59c8 <execute+0x1f0>
		*help_entry = *entry;
    59b6:	46ae      	mov	lr, r5
    59b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    59bc:	ae0c      	add	r6, sp, #48	; 0x30
    59be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    59c0:	f8de 3000 	ldr.w	r3, [lr]
    59c4:	6033      	str	r3, [r6, #0]
    59c6:	4666      	mov	r6, ip
    59c8:	46a9      	mov	r9, r5
    59ca:	e003      	b.n	59d4 <execute+0x1fc>
			if (cmd_lvl == 0 &&
    59cc:	9b05      	ldr	r3, [sp, #20]
    59ce:	b153      	cbz	r3, 59e6 <execute+0x20e>
			has_last_handler = true;
    59d0:	2301      	movs	r3, #1
    59d2:	9303      	str	r3, [sp, #12]
		if (args_left || (argc == 2)) {
    59d4:	9b06      	ldr	r3, [sp, #24]
    59d6:	b917      	cbnz	r7, 59de <execute+0x206>
    59d8:	2b02      	cmp	r3, #2
    59da:	f47f af32 	bne.w	5842 <execute+0x6a>
			cmd_lvl++;
    59de:	9b05      	ldr	r3, [sp, #20]
    59e0:	3301      	adds	r3, #1
    59e2:	9305      	str	r3, [sp, #20]
    59e4:	e72d      	b.n	5842 <execute+0x6a>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    59e6:	68a3      	ldr	r3, [r4, #8]
    59e8:	69db      	ldr	r3, [r3, #28]
			if (cmd_lvl == 0 &&
    59ea:	b113      	cbz	r3, 59f2 <execute+0x21a>
				(!z_shell_in_select_mode(shell) ||
    59ec:	68db      	ldr	r3, [r3, #12]
    59ee:	2b00      	cmp	r3, #0
    59f0:	d1ee      	bne.n	59d0 <execute+0x1f8>
				z_shell_fprintf(shell, SHELL_ERROR,
    59f2:	4b29      	ldr	r3, [pc, #164]	; (5a98 <execute+0x2c0>)
    59f4:	9300      	str	r3, [sp, #0]
    59f6:	4a29      	ldr	r2, [pc, #164]	; (5a9c <execute+0x2c4>)
    59f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    59fa:	2101      	movs	r1, #1
    59fc:	4620      	mov	r0, r4
    59fe:	f01d f8ff 	bl	22c00 <z_shell_fprintf>
    5a02:	e7e5      	b.n	59d0 <execute+0x1f8>
	if (shell->ctx->active_cmd.args.mandatory) {
    5a04:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    5a06:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
    5a0a:	b1b3      	cbz	r3, 5a3a <execute+0x262>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    5a0c:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    5a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5a12:	29ff      	cmp	r1, #255	; 0xff
    5a14:	bf18      	it	ne
    5a16:	460a      	movne	r2, r1
		const bool in_range = IN_RANGE(argc, mand, mand + opt);
    5a18:	429d      	cmp	r5, r3
    5a1a:	d302      	bcc.n	5a22 <execute+0x24a>
    5a1c:	4413      	add	r3, r2
    5a1e:	429d      	cmp	r5, r3
    5a20:	d90b      	bls.n	5a3a <execute+0x262>
		z_shell_fprintf(shell, SHELL_ERROR,
    5a22:	6883      	ldr	r3, [r0, #8]
    5a24:	4a1e      	ldr	r2, [pc, #120]	; (5aa0 <execute+0x2c8>)
    5a26:	2101      	movs	r1, #1
    5a28:	4620      	mov	r0, r4
    5a2a:	f01d f8e9 	bl	22c00 <z_shell_fprintf>
			shell_internal_help_print(shell);
    5a2e:	4620      	mov	r0, r4
    5a30:	f7ff fe42 	bl	56b8 <shell_internal_help_print>
		return -EINVAL;
    5a34:	f06f 0515 	mvn.w	r5, #21
    5a38:	e74b      	b.n	58d2 <execute+0xfa>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    5a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    5a3e:	f500 7019 	add.w	r0, r0, #612	; 0x264
    5a42:	f01c fbb0 	bl	221a6 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    5a46:	68a0      	ldr	r0, [r4, #8]
    5a48:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5a4c:	f01c fc3f 	bl	222ce <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    5a50:	68a3      	ldr	r3, [r4, #8]
    5a52:	aa11      	add	r2, sp, #68	; 0x44
    5a54:	4629      	mov	r1, r5
    5a56:	eb02 028a 	add.w	r2, r2, sl, lsl #2
    5a5a:	695b      	ldr	r3, [r3, #20]
    5a5c:	4620      	mov	r0, r4
    5a5e:	4798      	blx	r3
    5a60:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    5a62:	68a0      	ldr	r0, [r4, #8]
    5a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a6c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5a70:	f01c fbe0 	bl	22234 <k_mutex_lock.constprop.0.isra.0>
    5a74:	68a0      	ldr	r0, [r4, #8]
    5a76:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    5a7a:	f500 7019 	add.w	r0, r0, #612	; 0x264
    5a7e:	f01c fba1 	bl	221c4 <atomic_and>
	return ret;
    5a82:	e726      	b.n	58d2 <execute+0xfa>
    5a84:	0002abb7 	.word	0x0002abb7
    5a88:	0002abcb 	.word	0x0002abcb
    5a8c:	0002ac2c 	.word	0x0002ac2c
    5a90:	0002a7bf 	.word	0x0002a7bf
    5a94:	0002abe9 	.word	0x0002abe9
    5a98:	0002ac18 	.word	0x0002ac18
    5a9c:	0002aec6 	.word	0x0002aec6
    5aa0:	0002ac50 	.word	0x0002ac50

00005aa4 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    5aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5aa8:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    5aaa:	6880      	ldr	r0, [r0, #8]
    5aac:	b0b1      	sub	sp, #196	; 0xc4
    5aae:	2101      	movs	r1, #1
    5ab0:	f500 7019 	add.w	r0, r0, #612	; 0x264
    5ab4:	f01c fb77 	bl	221a6 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    5ab8:	68a3      	ldr	r3, [r4, #8]
    5aba:	791b      	ldrb	r3, [r3, #4]
    5abc:	2b02      	cmp	r3, #2
    5abe:	d117      	bne.n	5af0 <shell_process+0x4c>
	size_t count = 0;
    5ac0:	2300      	movs	r3, #0
    5ac2:	9309      	str	r3, [sp, #36]	; 0x24
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    5ac4:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    5ac6:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    5ac8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    5aca:	6803      	ldr	r3, [r0, #0]
    5acc:	691d      	ldr	r5, [r3, #16]
    5ace:	ab09      	add	r3, sp, #36	; 0x24
		if (bypass) {
    5ad0:	b1c6      	cbz	r6, 5b04 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    5ad2:	2210      	movs	r2, #16
    5ad4:	a91b      	add	r1, sp, #108	; 0x6c
    5ad6:	47a8      	blx	r5
			if (count) {
    5ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ada:	b14a      	cbz	r2, 5af0 <shell_process+0x4c>
				bypass(shell, buf, count);
    5adc:	a91b      	add	r1, sp, #108	; 0x6c
    5ade:	4620      	mov	r0, r4
    5ae0:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    5ae2:	68a3      	ldr	r3, [r4, #8]
    5ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	d1ec      	bne.n	5ac4 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    5aea:	4620      	mov	r0, r4
    5aec:	f7ff fe4e 	bl	578c <state_set.constprop.0>
    5af0:	68a0      	ldr	r0, [r4, #8]
    5af2:	f06f 0101 	mvn.w	r1, #1
    5af6:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    5afa:	b031      	add	sp, #196	; 0xc4
    5afc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b00:	f01c bb60 	b.w	221c4 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    5b04:	2201      	movs	r2, #1
    5b06:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    5b0a:	47a8      	blx	r5
		if (count == 0) {
    5b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d0ee      	beq.n	5af0 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    5b12:	f99d 2023 	ldrsb.w	r2, [sp, #35]	; 0x23
		if (ascii_filter(data) != 0) {
    5b16:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
		switch (shell->ctx->receive_state) {
    5b1a:	68a3      	ldr	r3, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    5b1c:	2a00      	cmp	r2, #0
    5b1e:	dbd1      	blt.n	5ac4 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    5b20:	795a      	ldrb	r2, [r3, #5]
    5b22:	2a03      	cmp	r2, #3
    5b24:	f200 8290 	bhi.w	6048 <shell_process+0x5a4>
    5b28:	e8df f012 	tbh	[pc, r2, lsl #1]
    5b2c:	027d0004 	.word	0x027d0004
    5b30:	028e0294 	.word	0x028e0294
	if ((data != '\r') && (data != '\n')) {
    5b34:	290d      	cmp	r1, #13
    5b36:	d07b      	beq.n	5c30 <shell_process+0x18c>
    5b38:	290a      	cmp	r1, #10
    5b3a:	d059      	beq.n	5bf0 <shell_process+0x14c>
	sh->ctx->ctx.flags.last_nl = val;
    5b3c:	f8b3 2264 	ldrh.w	r2, [r3, #612]	; 0x264
    5b40:	f36f 02ca 	bfc	r2, #3, #8
    5b44:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
			switch (data) {
    5b48:	2909      	cmp	r1, #9
    5b4a:	68a0      	ldr	r0, [r4, #8]
    5b4c:	f000 8083 	beq.w	5c56 <shell_process+0x1b2>
    5b50:	d83e      	bhi.n	5bd0 <shell_process+0x12c>
    5b52:	2900      	cmp	r1, #0
    5b54:	d0b6      	beq.n	5ac4 <shell_process+0x20>
    5b56:	2908      	cmp	r1, #8
    5b58:	f000 81f4 	beq.w	5f44 <shell_process+0x4a0>
    5b5c:	4603      	mov	r3, r0
	return sh->ctx->cfg.flags.echo == 1;
    5b5e:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    5b62:	0792      	lsls	r2, r2, #30
    5b64:	d5ae      	bpl.n	5ac4 <shell_process+0x20>
	switch (data) {
    5b66:	3901      	subs	r1, #1
    5b68:	2916      	cmp	r1, #22
    5b6a:	d8ab      	bhi.n	5ac4 <shell_process+0x20>
    5b6c:	a201      	add	r2, pc, #4	; (adr r2, 5b74 <shell_process+0xd0>)
    5b6e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    5b72:	bf00      	nop
    5b74:	000060f5 	.word	0x000060f5
    5b78:	00005f7f 	.word	0x00005f7f
    5b7c:	00005f87 	.word	0x00005f87
    5b80:	00005f77 	.word	0x00005f77
    5b84:	000060e9 	.word	0x000060e9
    5b88:	00005fa5 	.word	0x00005fa5
    5b8c:	00005ac5 	.word	0x00005ac5
    5b90:	00005ac5 	.word	0x00005ac5
    5b94:	00005ac5 	.word	0x00005ac5
    5b98:	00005ac5 	.word	0x00005ac5
    5b9c:	00005fad 	.word	0x00005fad
    5ba0:	00005fb5 	.word	0x00005fb5
    5ba4:	00005ac5 	.word	0x00005ac5
    5ba8:	00005fdf 	.word	0x00005fdf
    5bac:	00005ac5 	.word	0x00005ac5
    5bb0:	00005fe9 	.word	0x00005fe9
    5bb4:	00005ac5 	.word	0x00005ac5
    5bb8:	00005ac5 	.word	0x00005ac5
    5bbc:	00005ac5 	.word	0x00005ac5
    5bc0:	00005ac5 	.word	0x00005ac5
    5bc4:	00005fed 	.word	0x00005fed
    5bc8:	00005ac5 	.word	0x00005ac5
    5bcc:	00006017 	.word	0x00006017
    5bd0:	291b      	cmp	r1, #27
    5bd2:	d03d      	beq.n	5c50 <shell_process+0x1ac>
    5bd4:	297f      	cmp	r1, #127	; 0x7f
    5bd6:	f000 81c1 	beq.w	5f5c <shell_process+0x4b8>
    5bda:	f1a1 0220 	sub.w	r2, r1, #32
				if (isprint((int) data)) {
    5bde:	2a5e      	cmp	r2, #94	; 0x5e
    5be0:	4603      	mov	r3, r0
    5be2:	d8bc      	bhi.n	5b5e <shell_process+0xba>
					z_flag_history_exit_set(shell, true);
    5be4:	2101      	movs	r1, #1
    5be6:	f01c fb59 	bl	2229c <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    5bea:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
    5bee:	e0e4      	b.n	5dba <shell_process+0x316>
	return sh->ctx->ctx.flags.last_nl;
    5bf0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
    5bf4:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    5bf8:	b12a      	cbz	r2, 5c06 <shell_process+0x162>
    5bfa:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
    5bfe:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    5c02:	2a0a      	cmp	r2, #10
    5c04:	d1ab      	bne.n	5b5e <shell_process+0xba>
	sh->ctx->ctx.flags.last_nl = val;
    5c06:	f8b3 2264 	ldrh.w	r2, [r3, #612]	; 0x264
    5c0a:	f361 02ca 	bfi	r2, r1, #3, #8
    5c0e:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    5c12:	68a0      	ldr	r0, [r4, #8]
    5c14:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    5c16:	b9b9      	cbnz	r1, 5c48 <shell_process+0x1a4>
	z_flag_history_exit_set(shell, false);
    5c18:	f01c fb40 	bl	2229c <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    5c1c:	68e0      	ldr	r0, [r4, #12]
    5c1e:	f01d fad1 	bl	231c4 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    5c22:	6960      	ldr	r0, [r4, #20]
    5c24:	f7ff fd58 	bl	56d8 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    5c28:	4620      	mov	r0, r4
    5c2a:	f7ff fdaf 	bl	578c <state_set.constprop.0>
		break;
    5c2e:	e749      	b.n	5ac4 <shell_process+0x20>
	return sh->ctx->ctx.flags.last_nl;
    5c30:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
    5c34:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    5c38:	2a00      	cmp	r2, #0
    5c3a:	d0e4      	beq.n	5c06 <shell_process+0x162>
    5c3c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
    5c40:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    5c44:	2a0d      	cmp	r2, #13
    5c46:	e7dd      	b.n	5c04 <shell_process+0x160>
					(void)execute(shell);
    5c48:	4620      	mov	r0, r4
    5c4a:	f7ff fdc5 	bl	57d8 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    5c4e:	e7eb      	b.n	5c28 <shell_process+0x184>
	shell->ctx->receive_state = state;
    5c50:	2301      	movs	r3, #1
    5c52:	7143      	strb	r3, [r0, #5]
}
    5c54:	e736      	b.n	5ac4 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    5c56:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    5c5a:	079b      	lsls	r3, r3, #30
    5c5c:	f57f af32 	bpl.w	5ac4 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    5c60:	2101      	movs	r1, #1
    5c62:	f01c fb1b 	bl	2229c <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    5c66:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    5c68:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    5c6a:	2bff      	cmp	r3, #255	; 0xff
    5c6c:	f43f af2a 	beq.w	5ac4 <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    5c70:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    5c72:	f100 0142 	add.w	r1, r0, #66	; 0x42
    5c76:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    5c7a:	f01d ffc7 	bl	23c0c <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    5c7e:	68a3      	ldr	r3, [r4, #8]
    5c80:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    5c82:	4413      	add	r3, r2
    5c84:	2500      	movs	r5, #0
    5c86:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    5c8a:	68a2      	ldr	r2, [r4, #8]
    5c8c:	a91b      	add	r1, sp, #108	; 0x6c
    5c8e:	2314      	movs	r3, #20
    5c90:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    5c94:	a80b      	add	r0, sp, #44	; 0x2c
    5c96:	f01c fc27 	bl	224e8 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    5c9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5c9c:	2914      	cmp	r1, #20
    5c9e:	f63f af11 	bhi.w	5ac4 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    5ca2:	ab30      	add	r3, sp, #192	; 0xc0
    5ca4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5ca8:	f843 5c54 	str.w	r5, [r3, #-84]
	int space = isspace((int)shell->ctx->cmd_buff[
    5cac:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    5cae:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    5cb0:	4413      	add	r3, r2
    5cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    5cb6:	2b20      	cmp	r3, #32
    5cb8:	d002      	beq.n	5cc0 <shell_process+0x21c>
    5cba:	3b09      	subs	r3, #9
    5cbc:	2b04      	cmp	r3, #4
    5cbe:	d846      	bhi.n	5d4e <shell_process+0x2aa>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    5cc0:	2900      	cmp	r1, #0
    5cc2:	d147      	bne.n	5d54 <shell_process+0x2b0>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    5cc4:	2500      	movs	r5, #0
    5cc6:	950a      	str	r5, [sp, #40]	; 0x28
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    5cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cca:	aa30      	add	r2, sp, #192	; 0xc0
    5ccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    5cd0:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    5cd2:	f853 ac54 	ldr.w	sl, [r3, #-84]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    5cd6:	4650      	mov	r0, sl
    5cd8:	f01c fa99 	bl	2220e <z_shell_strlen>
	*longest = 0U;
    5cdc:	46b3      	mov	fp, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    5cde:	9002      	str	r0, [sp, #8]
	size_t first = 0;
    5ce0:	46b0      	mov	r8, r6
	size_t idx = 0;
    5ce2:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    5ce4:	aa16      	add	r2, sp, #88	; 0x58
    5ce6:	4639      	mov	r1, r7
    5ce8:	4628      	mov	r0, r5
    5cea:	f000 fbdf 	bl	64ac <z_shell_cmd_get>
    5cee:	4681      	mov	r9, r0
    5cf0:	2800      	cmp	r0, #0
    5cf2:	d13b      	bne.n	5d6c <shell_process+0x2c8>
	if (cnt == 1) {
    5cf4:	2e01      	cmp	r6, #1
    5cf6:	d164      	bne.n	5dc2 <shell_process+0x31e>
		autocomplete(shell, cmd, argv[arg_idx], first);
    5cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cfa:	aa30      	add	r2, sp, #192	; 0xc0
    5cfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    5d00:	f853 0c54 	ldr.w	r0, [r3, #-84]
    5d04:	f01c fa83 	bl	2220e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    5d08:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    5d0a:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    5d0c:	3208      	adds	r2, #8
    5d0e:	4641      	mov	r1, r8
    5d10:	4628      	mov	r0, r5
    5d12:	f000 fbcb 	bl	64ac <z_shell_cmd_get>
    5d16:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    5d18:	6800      	ldr	r0, [r0, #0]
    5d1a:	f01c fa78 	bl	2220e <z_shell_strlen>
	if (cmd_len != arg_len) {
    5d1e:	4286      	cmp	r6, r0
    5d20:	d006      	beq.n	5d30 <shell_process+0x28c>
		z_shell_op_completion_insert(shell,
    5d22:	6829      	ldr	r1, [r5, #0]
    5d24:	1b82      	subs	r2, r0, r6
    5d26:	b292      	uxth	r2, r2
    5d28:	4431      	add	r1, r6
    5d2a:	4620      	mov	r0, r4
    5d2c:	f01c ffa8 	bl	22c80 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    5d30:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    5d32:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    5d34:	4403      	add	r3, r0
    5d36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    5d3a:	2b20      	cmp	r3, #32
    5d3c:	d002      	beq.n	5d44 <shell_process+0x2a0>
    5d3e:	3b09      	subs	r3, #9
    5d40:	2b04      	cmp	r3, #4
    5d42:	d829      	bhi.n	5d98 <shell_process+0x2f4>
		z_shell_op_cursor_move(shell, 1);
    5d44:	2101      	movs	r1, #1
    5d46:	4620      	mov	r0, r4
    5d48:	f01c fe45 	bl	229d6 <z_shell_op_cursor_move>
    5d4c:	e6ba      	b.n	5ac4 <shell_process+0x20>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    5d4e:	2901      	cmp	r1, #1
    5d50:	d9b8      	bls.n	5cc4 <shell_process+0x220>
	search_argc = space ? *argc : *argc - 1;
    5d52:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    5d54:	2000      	movs	r0, #0
    5d56:	ab0c      	add	r3, sp, #48	; 0x30
    5d58:	9300      	str	r3, [sp, #0]
    5d5a:	9001      	str	r0, [sp, #4]
    5d5c:	ab0a      	add	r3, sp, #40	; 0x28
    5d5e:	aa1b      	add	r2, sp, #108	; 0x6c
    5d60:	f01c fcd8 	bl	22714 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    5d64:	4605      	mov	r5, r0
    5d66:	2800      	cmp	r0, #0
    5d68:	d1ae      	bne.n	5cc8 <shell_process+0x224>
    5d6a:	e6ab      	b.n	5ac4 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    5d6c:	9a02      	ldr	r2, [sp, #8]
    5d6e:	f8d9 0000 	ldr.w	r0, [r9]
    5d72:	4651      	mov	r1, sl
    5d74:	f01d ff0f 	bl	23b96 <strncmp>
		if (is_candidate) {
    5d78:	b960      	cbnz	r0, 5d94 <shell_process+0x2f0>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    5d7a:	f8d9 0000 	ldr.w	r0, [r9]
    5d7e:	f01d feee 	bl	23b5e <strlen>
    5d82:	4558      	cmp	r0, fp
    5d84:	bf38      	it	cc
    5d86:	4658      	movcc	r0, fp
    5d88:	fa1f fb80 	uxth.w	fp, r0
				*first_idx = idx;
    5d8c:	2e00      	cmp	r6, #0
    5d8e:	bf08      	it	eq
    5d90:	46b8      	moveq	r8, r7
			(*cnt)++;
    5d92:	3601      	adds	r6, #1
		idx++;
    5d94:	3701      	adds	r7, #1
    5d96:	e7a5      	b.n	5ce4 <shell_process+0x240>
	return sh->ctx->cfg.flags.insert_mode == 1;
    5d98:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    5d9c:	07df      	lsls	r7, r3, #31
    5d9e:	d50b      	bpl.n	5db8 <shell_process+0x314>
			z_flag_insert_mode_set(shell, false);
    5da0:	2100      	movs	r1, #0
    5da2:	f01c fa85 	bl	222b0 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    5da6:	2120      	movs	r1, #32
    5da8:	4620      	mov	r0, r4
    5daa:	f000 fcd7 	bl	675c <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    5dae:	68a0      	ldr	r0, [r4, #8]
    5db0:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    5db2:	f01c fa7d 	bl	222b0 <z_flag_insert_mode_set.isra.0>
				break;
    5db6:	e685      	b.n	5ac4 <shell_process+0x20>
			z_shell_op_char_insert(shell, ' ');
    5db8:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    5dba:	4620      	mov	r0, r4
    5dbc:	f000 fcce 	bl	675c <z_shell_op_char_insert>
    5dc0:	e680      	b.n	5ac4 <shell_process+0x20>
	} else if (cnt > 1) {
    5dc2:	f67f ae7f 	bls.w	5ac4 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    5dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5dc8:	ab30      	add	r3, sp, #192	; 0xc0
    5dca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		shell->ctx->vt100_ctx.printed_cmd = 0;
    5dce:	46c2      	mov	sl, r8
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    5dd0:	f852 3c54 	ldr.w	r3, [r2, #-84]
    5dd4:	9302      	str	r3, [sp, #8]
	size_t str_len = z_shell_strlen(str);
    5dd6:	4618      	mov	r0, r3
    5dd8:	f01c fa19 	bl	2220e <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    5ddc:	68a2      	ldr	r2, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    5dde:	9004      	str	r0, [sp, #16]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    5de0:	f8a2 9030 	strh.w	r9, [r2, #48]	; 0x30
    5de4:	9603      	str	r6, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    5de6:	68a2      	ldr	r2, [r4, #8]
    5de8:	4651      	mov	r1, sl
    5dea:	3208      	adds	r2, #8
    5dec:	4628      	mov	r0, r5
    5dee:	f000 fb5d 	bl	64ac <z_shell_cmd_get>
		if (str && match->syntax &&
    5df2:	9b02      	ldr	r3, [sp, #8]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    5df4:	4607      	mov	r7, r0
		idx++;
    5df6:	f10a 0a01 	add.w	sl, sl, #1
		if (str && match->syntax &&
    5dfa:	2b00      	cmp	r3, #0
    5dfc:	d151      	bne.n	5ea2 <shell_process+0x3fe>
		tab_item_print(shell, match->syntax, longest);
    5dfe:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
    5e00:	2b00      	cmp	r3, #0
    5e02:	d158      	bne.n	5eb6 <shell_process+0x412>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    5e04:	68a2      	ldr	r2, [r4, #8]
    5e06:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
    5e08:	9b03      	ldr	r3, [sp, #12]
    5e0a:	3b01      	subs	r3, #1
    5e0c:	9303      	str	r3, [sp, #12]
    5e0e:	d1ea      	bne.n	5de6 <shell_process+0x342>
	z_cursor_next_line_move(shell);
    5e10:	6960      	ldr	r0, [r4, #20]
    5e12:	f7ff fc61 	bl	56d8 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    5e16:	4620      	mov	r0, r4
    5e18:	f000 fcd6 	bl	67c8 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    5e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5e1e:	aa30      	add	r2, sp, #192	; 0xc0
    5e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    5e24:	f108 0a01 	add.w	sl, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    5e28:	f853 0c54 	ldr.w	r0, [r3, #-84]
    5e2c:	f01c f9ef 	bl	2220e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    5e30:	4641      	mov	r1, r8
    5e32:	aa11      	add	r2, sp, #68	; 0x44
	uint16_t arg_len = z_shell_strlen(arg);
    5e34:	4681      	mov	r9, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    5e36:	4628      	mov	r0, r5
    5e38:	f000 fb38 	bl	64ac <z_shell_cmd_get>
    5e3c:	4607      	mov	r7, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    5e3e:	68a0      	ldr	r0, [r4, #8]
    5e40:	6839      	ldr	r1, [r7, #0]
    5e42:	22ff      	movs	r2, #255	; 0xff
    5e44:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    5e48:	f01d fe67 	bl	23b1a <strncpy>
	*str = match->syntax;
    5e4c:	683b      	ldr	r3, [r7, #0]
    5e4e:	9302      	str	r3, [sp, #8]
	uint16_t common = UINT16_MAX;
    5e50:	f64f 77ff 	movw	r7, #65535	; 0xffff
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5e54:	46b8      	mov	r8, r7
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    5e56:	aa16      	add	r2, sp, #88	; 0x58
    5e58:	4651      	mov	r1, sl
    5e5a:	4628      	mov	r0, r5
    5e5c:	f10a 0b01 	add.w	fp, sl, #1
    5e60:	f000 fb24 	bl	64ac <z_shell_cmd_get>
		if (match2 == NULL) {
    5e64:	2800      	cmp	r0, #0
    5e66:	d061      	beq.n	5f2c <shell_process+0x488>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    5e68:	68a1      	ldr	r1, [r4, #8]
    5e6a:	6803      	ldr	r3, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5e6c:	f201 1141 	addw	r1, r1, #321	; 0x141
	size_t common = 0;
    5e70:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5e72:	f811 ef01 	ldrb.w	lr, [r1, #1]!
    5e76:	5c98      	ldrb	r0, [r3, r2]
    5e78:	4570      	cmp	r0, lr
    5e7a:	d103      	bne.n	5e84 <shell_process+0x3e0>
    5e7c:	b110      	cbz	r0, 5e84 <shell_process+0x3e0>
		common++;
    5e7e:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5e80:	4542      	cmp	r2, r8
    5e82:	d1f6      	bne.n	5e72 <shell_process+0x3ce>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    5e84:	f1b9 0f00 	cmp.w	r9, #0
    5e88:	d001      	beq.n	5e8e <shell_process+0x3ea>
    5e8a:	454a      	cmp	r2, r9
    5e8c:	db07      	blt.n	5e9e <shell_process+0x3fa>
			common = (curr_common < common) ? curr_common : common;
    5e8e:	42ba      	cmp	r2, r7
			--cnt;
    5e90:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    5e94:	bfa8      	it	ge
    5e96:	463a      	movge	r2, r7
	while (cnt > 1) {
    5e98:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    5e9a:	b297      	uxth	r7, r2
	while (cnt > 1) {
    5e9c:	d046      	beq.n	5f2c <shell_process+0x488>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    5e9e:	46da      	mov	sl, fp
    5ea0:	e7d9      	b.n	5e56 <shell_process+0x3b2>
		if (str && match->syntax &&
    5ea2:	6800      	ldr	r0, [r0, #0]
    5ea4:	2800      	cmp	r0, #0
    5ea6:	d0aa      	beq.n	5dfe <shell_process+0x35a>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    5ea8:	9a04      	ldr	r2, [sp, #16]
    5eaa:	9902      	ldr	r1, [sp, #8]
    5eac:	f01d fe73 	bl	23b96 <strncmp>
		if (str && match->syntax &&
    5eb0:	2800      	cmp	r0, #0
    5eb2:	d0a4      	beq.n	5dfe <shell_process+0x35a>
    5eb4:	e797      	b.n	5de6 <shell_process+0x342>
	longest_option += z_shell_strlen(tab);
    5eb6:	489b      	ldr	r0, [pc, #620]	; (6124 <shell_process+0x680>)
    5eb8:	9306      	str	r3, [sp, #24]
    5eba:	f01c f9a8 	bl	2220e <z_shell_strlen>
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    5ebe:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    5ec0:	eb00 020b 	add.w	r2, r0, fp
    5ec4:	b292      	uxth	r2, r2
			- z_shell_strlen(tab)) / longest_option;
    5ec6:	4897      	ldr	r0, [pc, #604]	; (6124 <shell_process+0x680>)
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    5ec8:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    5eca:	9207      	str	r2, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
    5ecc:	f01c f99f 	bl	2220e <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
    5ed0:	9b06      	ldr	r3, [sp, #24]
			- z_shell_strlen(tab)) / longest_option;
    5ed2:	9005      	str	r0, [sp, #20]
	diff = longest_option - z_shell_strlen(option);
    5ed4:	4618      	mov	r0, r3
    5ed6:	f01c f99a 	bl	2220e <z_shell_strlen>
    5eda:	9a07      	ldr	r2, [sp, #28]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    5edc:	68a1      	ldr	r1, [r4, #8]
			- z_shell_strlen(tab)) / longest_option;
    5ede:	9b05      	ldr	r3, [sp, #20]
	diff = longest_option - z_shell_strlen(option);
    5ee0:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    5ee4:	8e08      	ldrh	r0, [r1, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    5ee6:	1aff      	subs	r7, r7, r3
    5ee8:	fb97 f7f2 	sdiv	r7, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    5eec:	b2bf      	uxth	r7, r7
    5eee:	f100 0e01 	add.w	lr, r0, #1
    5ef2:	fbb0 f2f7 	udiv	r2, r0, r7
    5ef6:	fb07 0012 	mls	r0, r7, r2, r0
    5efa:	b280      	uxth	r0, r0
    5efc:	9b06      	ldr	r3, [sp, #24]
    5efe:	f8a1 e030 	strh.w	lr, [r1, #48]	; 0x30
	diff = longest_option - z_shell_strlen(option);
    5f02:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    5f06:	b958      	cbnz	r0, 5f20 <shell_process+0x47c>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    5f08:	9300      	str	r3, [sp, #0]
    5f0a:	4a87      	ldr	r2, [pc, #540]	; (6128 <shell_process+0x684>)
    5f0c:	4b85      	ldr	r3, [pc, #532]	; (6124 <shell_process+0x680>)
    5f0e:	2106      	movs	r1, #6
    5f10:	4620      	mov	r0, r4
    5f12:	f01c fe75 	bl	22c00 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    5f16:	4649      	mov	r1, r9
    5f18:	4620      	mov	r0, r4
    5f1a:	f000 fb29 	bl	6570 <z_shell_op_cursor_horiz_move>
    5f1e:	e773      	b.n	5e08 <shell_process+0x364>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    5f20:	4a82      	ldr	r2, [pc, #520]	; (612c <shell_process+0x688>)
    5f22:	2106      	movs	r1, #6
    5f24:	4620      	mov	r0, r4
    5f26:	f01c fe6b 	bl	22c00 <z_shell_fprintf>
    5f2a:	e7f4      	b.n	5f16 <shell_process+0x472>
	if (common) {
    5f2c:	2f00      	cmp	r7, #0
    5f2e:	f43f adc9 	beq.w	5ac4 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    5f32:	9902      	ldr	r1, [sp, #8]
    5f34:	eba7 0209 	sub.w	r2, r7, r9
    5f38:	b292      	uxth	r2, r2
    5f3a:	4449      	add	r1, r9
    5f3c:	4620      	mov	r0, r4
    5f3e:	f01c fe9f 	bl	22c80 <z_shell_op_completion_insert>
    5f42:	e5bf      	b.n	5ac4 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    5f44:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    5f48:	079e      	lsls	r6, r3, #30
    5f4a:	f57f adbb 	bpl.w	5ac4 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    5f4e:	2101      	movs	r1, #1
    5f50:	f01c f9a4 	bl	2229c <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    5f54:	4620      	mov	r0, r4
    5f56:	f01c feb0 	bl	22cba <z_shell_op_char_backspace>
    5f5a:	e5b3      	b.n	5ac4 <shell_process+0x20>
    5f5c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    5f60:	079d      	lsls	r5, r3, #30
    5f62:	f57f adaf 	bpl.w	5ac4 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    5f66:	2101      	movs	r1, #1
    5f68:	f01c f998 	bl	2229c <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    5f6c:	68a3      	ldr	r3, [r4, #8]
    5f6e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    5f72:	0719      	lsls	r1, r3, #28
    5f74:	d4ee      	bmi.n	5f54 <shell_process+0x4b0>
		z_shell_op_char_delete(shell);
    5f76:	4620      	mov	r0, r4
    5f78:	f01c fe84 	bl	22c84 <z_shell_op_char_delete>
		break;
    5f7c:	e5a2      	b.n	5ac4 <shell_process+0x20>
		z_shell_op_left_arrow(shell);
    5f7e:	4620      	mov	r0, r4
    5f80:	f01c fd98 	bl	22ab4 <z_shell_op_left_arrow>
		break;
    5f84:	e59e      	b.n	5ac4 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    5f86:	4620      	mov	r0, r4
    5f88:	f01c fd8d 	bl	22aa6 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    5f8c:	4620      	mov	r0, r4
    5f8e:	f01c fcd6 	bl	2293e <z_shell_cursor_in_empty_line>
    5f92:	b910      	cbnz	r0, 5f9a <shell_process+0x4f6>
			z_cursor_next_line_move(shell);
    5f94:	6960      	ldr	r0, [r4, #20]
    5f96:	f7ff fb9f 	bl	56d8 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    5f9a:	68a0      	ldr	r0, [r4, #8]
    5f9c:	2101      	movs	r1, #1
    5f9e:	f01c f97d 	bl	2229c <z_flag_history_exit_set.isra.0>
    5fa2:	e641      	b.n	5c28 <shell_process+0x184>
		z_shell_op_right_arrow(shell);
    5fa4:	4620      	mov	r0, r4
    5fa6:	f01c fd8d 	bl	22ac4 <z_shell_op_right_arrow>
		break;
    5faa:	e58b      	b.n	5ac4 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    5fac:	4620      	mov	r0, r4
    5fae:	f01c fd92 	bl	22ad6 <z_shell_op_delete_from_cursor>
		break;
    5fb2:	e587      	b.n	5ac4 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    5fb4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    5fb8:	069b      	lsls	r3, r3, #26
    5fba:	d503      	bpl.n	5fc4 <shell_process+0x520>
    5fbc:	495c      	ldr	r1, [pc, #368]	; (6130 <shell_process+0x68c>)
    5fbe:	6960      	ldr	r0, [r4, #20]
    5fc0:	f01c f92b 	bl	2221a <z_shell_raw_fprintf>
    5fc4:	68a3      	ldr	r3, [r4, #8]
    5fc6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    5fca:	069f      	lsls	r7, r3, #26
    5fcc:	d503      	bpl.n	5fd6 <shell_process+0x532>
    5fce:	4959      	ldr	r1, [pc, #356]	; (6134 <shell_process+0x690>)
    5fd0:	6960      	ldr	r0, [r4, #20]
    5fd2:	f01c f922 	bl	2221a <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    5fd6:	4620      	mov	r0, r4
    5fd8:	f000 fbf6 	bl	67c8 <z_shell_print_prompt_and_cmd>
		break;
    5fdc:	e572      	b.n	5ac4 <shell_process+0x20>
		history_handle(shell, false);
    5fde:	2100      	movs	r1, #0
		history_handle(shell, true);
    5fe0:	4620      	mov	r0, r4
    5fe2:	f7ff fb7f 	bl	56e4 <history_handle>
		break;
    5fe6:	e56d      	b.n	5ac4 <shell_process+0x20>
		history_handle(shell, true);
    5fe8:	2101      	movs	r1, #1
    5fea:	e7f9      	b.n	5fe0 <shell_process+0x53c>
		z_shell_op_cursor_home_move(shell);
    5fec:	4620      	mov	r0, r4
    5fee:	f01c fd54 	bl	22a9a <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    5ff2:	4620      	mov	r0, r4
    5ff4:	f01c f8ce 	bl	22194 <cmd_buffer_clear>
		z_flag_history_exit_set(shell, true);
    5ff8:	2101      	movs	r1, #1
    5ffa:	68a0      	ldr	r0, [r4, #8]
    5ffc:	f01c f94e 	bl	2229c <z_flag_history_exit_set.isra.0>
    6000:	68a3      	ldr	r3, [r4, #8]
    6002:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    6006:	069e      	lsls	r6, r3, #26
    6008:	f57f ad5c 	bpl.w	5ac4 <shell_process+0x20>
    600c:	494a      	ldr	r1, [pc, #296]	; (6138 <shell_process+0x694>)
    600e:	6960      	ldr	r0, [r4, #20]
    6010:	f01c f903 	bl	2221a <z_shell_raw_fprintf>
    6014:	e556      	b.n	5ac4 <shell_process+0x20>
		z_shell_op_word_remove(shell);
    6016:	4620      	mov	r0, r4
    6018:	f000 fb06 	bl	6628 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    601c:	68a0      	ldr	r0, [r4, #8]
    601e:	2101      	movs	r1, #1
    6020:	f01c f93c 	bl	2229c <z_flag_history_exit_set.isra.0>
		break;
    6024:	e54e      	b.n	5ac4 <shell_process+0x20>
			if (data == '[') {
    6026:	295b      	cmp	r1, #91	; 0x5b
    6028:	d102      	bne.n	6030 <shell_process+0x58c>
	shell->ctx->receive_state = state;
    602a:	2202      	movs	r2, #2
    602c:	715a      	strb	r2, [r3, #5]
}
    602e:	e549      	b.n	5ac4 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    6030:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    6034:	079d      	lsls	r5, r3, #30
    6036:	d506      	bpl.n	6046 <shell_process+0x5a2>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    6038:	2962      	cmp	r1, #98	; 0x62
    603a:	d107      	bne.n	604c <shell_process+0x5a8>
		z_shell_op_cursor_word_move(shell, -1);
    603c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    6040:	4620      	mov	r0, r4
    6042:	f01c fcec 	bl	22a1e <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    6046:	68a3      	ldr	r3, [r4, #8]
    6048:	2200      	movs	r2, #0
    604a:	e7ef      	b.n	602c <shell_process+0x588>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    604c:	2966      	cmp	r1, #102	; 0x66
    604e:	d1fa      	bne.n	6046 <shell_process+0x5a2>
		z_shell_op_cursor_word_move(shell, 1);
    6050:	2101      	movs	r1, #1
    6052:	e7f5      	b.n	6040 <shell_process+0x59c>
	shell->ctx->receive_state = state;
    6054:	2200      	movs	r2, #0
    6056:	715a      	strb	r2, [r3, #5]
    6058:	68a2      	ldr	r2, [r4, #8]
    605a:	f8d2 3260 	ldr.w	r3, [r2, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    605e:	0798      	lsls	r0, r3, #30
    6060:	f57f ad30 	bpl.w	5ac4 <shell_process+0x20>
			switch (data) {
    6064:	f1a1 0331 	sub.w	r3, r1, #49	; 0x31
    6068:	2b1b      	cmp	r3, #27
    606a:	f63f ad2b 	bhi.w	5ac4 <shell_process+0x20>
    606e:	a101      	add	r1, pc, #4	; (adr r1, 6074 <shell_process+0x5d0>)
    6070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    6074:	000060f1 	.word	0x000060f1
    6078:	000060fd 	.word	0x000060fd
    607c:	00006111 	.word	0x00006111
    6080:	000060e5 	.word	0x000060e5
    6084:	00005ac5 	.word	0x00005ac5
    6088:	00005ac5 	.word	0x00005ac5
    608c:	00005ac5 	.word	0x00005ac5
    6090:	00005ac5 	.word	0x00005ac5
    6094:	00005ac5 	.word	0x00005ac5
    6098:	00005ac5 	.word	0x00005ac5
    609c:	00005ac5 	.word	0x00005ac5
    60a0:	00005ac5 	.word	0x00005ac5
    60a4:	00005ac5 	.word	0x00005ac5
    60a8:	00005ac5 	.word	0x00005ac5
    60ac:	00005ac5 	.word	0x00005ac5
    60b0:	00005ac5 	.word	0x00005ac5
    60b4:	00005fe9 	.word	0x00005fe9
    60b8:	00005fdf 	.word	0x00005fdf
    60bc:	00005fa5 	.word	0x00005fa5
    60c0:	00005f7f 	.word	0x00005f7f
    60c4:	00005ac5 	.word	0x00005ac5
    60c8:	000060e9 	.word	0x000060e9
    60cc:	00005ac5 	.word	0x00005ac5
    60d0:	000060f5 	.word	0x000060f5
    60d4:	00005ac5 	.word	0x00005ac5
    60d8:	00005ac5 	.word	0x00005ac5
    60dc:	00005ac5 	.word	0x00005ac5
    60e0:	00006101 	.word	0x00006101
	shell->ctx->receive_state = state;
    60e4:	2303      	movs	r3, #3
    60e6:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
    60e8:	4620      	mov	r0, r4
    60ea:	f01c fcdc 	bl	22aa6 <z_shell_op_cursor_end_move>
		break;
    60ee:	e4e9      	b.n	5ac4 <shell_process+0x20>
	shell->ctx->receive_state = state;
    60f0:	2303      	movs	r3, #3
    60f2:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
    60f4:	4620      	mov	r0, r4
    60f6:	f01c fcd0 	bl	22a9a <z_shell_op_cursor_home_move>
		break;
    60fa:	e4e3      	b.n	5ac4 <shell_process+0x20>
	shell->ctx->receive_state = state;
    60fc:	2303      	movs	r3, #3
    60fe:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    6100:	68a0      	ldr	r0, [r4, #8]
    6102:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    6106:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    610a:	f081 0101 	eor.w	r1, r1, #1
    610e:	e650      	b.n	5db2 <shell_process+0x30e>
	shell->ctx->receive_state = state;
    6110:	2303      	movs	r3, #3
    6112:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.echo == 1;
    6114:	68a3      	ldr	r3, [r4, #8]
    6116:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    611a:	079b      	lsls	r3, r3, #30
    611c:	f57f acd2 	bpl.w	5ac4 <shell_process+0x20>
    6120:	e729      	b.n	5f76 <shell_process+0x4d2>
    6122:	bf00      	nop
    6124:	0002a069 	.word	0x0002a069
    6128:	0002ac6b 	.word	0x0002ac6b
    612c:	0002a7ba 	.word	0x0002a7ba
    6130:	00027bad 	.word	0x00027bad
    6134:	00027bb2 	.word	0x00027bb2
    6138:	00027ba8 	.word	0x00027ba8

0000613c <shell_init>:
{
    613c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6140:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    6142:	6880      	ldr	r0, [r0, #8]
{
    6144:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    6146:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    614a:	b089      	sub	sp, #36	; 0x24
    614c:	4615      	mov	r5, r2
    614e:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    6150:	2900      	cmp	r1, #0
    6152:	d166      	bne.n	6222 <shell_init+0xe6>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    6154:	f44f 7244 	mov.w	r2, #784	; 0x310
    6158:	f01d fd63 	bl	23c22 <memset>
	sh->ctx->prompt = sh->default_prompt;
    615c:	68a3      	ldr	r3, [r4, #8]
    615e:	6822      	ldr	r2, [r4, #0]
    6160:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    6162:	68e0      	ldr	r0, [r4, #12]
    6164:	f01d f8d0 	bl	23308 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    6168:	68a0      	ldr	r0, [r4, #8]
    616a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    616e:	f020 fcc7 	bl	26b00 <z_impl_k_mutex_init>
    6172:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    6176:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    617a:	68a0      	ldr	r0, [r4, #8]
    617c:	4430      	add	r0, r6
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    617e:	f021 f993 	bl	274a8 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    6182:	68a0      	ldr	r0, [r4, #8]
    6184:	2200      	movs	r2, #0
    6186:	1983      	adds	r3, r0, r6
    6188:	2101      	movs	r1, #1
    618a:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    618c:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    618e:	f021 f96e 	bl	2746e <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    6192:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    6196:	f109 0914 	add.w	r9, r9, #20
    619a:	d1ee      	bne.n	617a <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    619c:	69a3      	ldr	r3, [r4, #24]
    619e:	2600      	movs	r6, #0
    61a0:	601e      	str	r6, [r3, #0]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    61a2:	68a0      	ldr	r0, [r4, #8]
    61a4:	2102      	movs	r1, #2
    61a6:	f500 7019 	add.w	r0, r0, #612	; 0x264
    61aa:	f01b fffc 	bl	221a6 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    61ae:	68a3      	ldr	r3, [r4, #8]
    61b0:	2250      	movs	r2, #80	; 0x50
    61b2:	855a      	strh	r2, [r3, #42]	; 0x2a
	sh->ctx->vt100_ctx.cons.terminal_hei =
    61b4:	68a3      	ldr	r3, [r4, #8]
    61b6:	2218      	movs	r2, #24
    61b8:	851a      	strh	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    61ba:	68a3      	ldr	r3, [r4, #8]
    61bc:	6818      	ldr	r0, [r3, #0]
    61be:	f01c f826 	bl	2220e <z_shell_strlen>
    61c2:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    61c4:	4a18      	ldr	r2, [pc, #96]	; (6228 <shell_init+0xec>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    61c6:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	sh->ctx->cfg.flags = cfg_flags;
    61ca:	68a3      	ldr	r3, [r4, #8]
    61cc:	f366 0582 	bfi	r5, r6, #2, #1
    61d0:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    61d4:	6860      	ldr	r0, [r4, #4]
    61d6:	6803      	ldr	r3, [r0, #0]
    61d8:	4641      	mov	r1, r8
    61da:	681d      	ldr	r5, [r3, #0]
    61dc:	4623      	mov	r3, r4
    61de:	47a8      	blx	r5
	if (ret == 0) {
    61e0:	4605      	mov	r5, r0
    61e2:	b9d0      	cbnz	r0, 621a <shell_init+0xde>
	shell->ctx->state = state;
    61e4:	68a3      	ldr	r3, [r4, #8]
    61e6:	2201      	movs	r2, #1
    61e8:	711a      	strb	r2, [r3, #4]
				  shell->stack, CONFIG_SHELL_STACK_SIZE,
    61ea:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    61ee:	2200      	movs	r2, #0
    61f0:	2300      	movs	r3, #0
    61f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    61f6:	230e      	movs	r3, #14
    61f8:	9303      	str	r3, [sp, #12]
    61fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    61fc:	9504      	str	r5, [sp, #16]
	k_tid_t tid = k_thread_create(shell->thread,
    61fe:	e9cd 7301 	strd	r7, r3, [sp, #4]
    6202:	9400      	str	r4, [sp, #0]
    6204:	4b09      	ldr	r3, [pc, #36]	; (622c <shell_init+0xf0>)
    6206:	f44f 6200 	mov.w	r2, #2048	; 0x800
    620a:	f019 fbfb 	bl	1fa04 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    620e:	68a3      	ldr	r3, [r4, #8]
    6210:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	k_thread_name_set(tid, shell->thread_name);
    6214:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return z_impl_k_thread_name_set(thread, str);
    6216:	f019 fb2f 	bl	1f878 <z_impl_k_thread_name_set>
}
    621a:	4628      	mov	r0, r5
    621c:	b009      	add	sp, #36	; 0x24
    621e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    6222:	f06f 0577 	mvn.w	r5, #119	; 0x77
    6226:	e7f8      	b.n	621a <shell_init+0xde>
    6228:	00022239 	.word	0x00022239
    622c:	00006285 	.word	0x00006285

00006230 <shell_start>:
{
    6230:	b510      	push	{r4, lr}
    6232:	4604      	mov	r4, r0
	return shell->ctx->state;
    6234:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    6236:	7903      	ldrb	r3, [r0, #4]
    6238:	2b01      	cmp	r3, #1
    623a:	d11d      	bne.n	6278 <shell_start+0x48>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    623c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6244:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    6248:	f01b fff4 	bl	22234 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    624c:	4620      	mov	r0, r4
    624e:	2108      	movs	r1, #8
    6250:	f000 f9ac 	bl	65ac <z_shell_vt100_color_set>
	if (z_shell_strlen(shell->default_prompt) > 0) {
    6254:	6820      	ldr	r0, [r4, #0]
    6256:	f01b ffda 	bl	2220e <z_shell_strlen>
    625a:	b118      	cbz	r0, 6264 <shell_start+0x34>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    625c:	4908      	ldr	r1, [pc, #32]	; (6280 <shell_start+0x50>)
    625e:	6960      	ldr	r0, [r4, #20]
    6260:	f01b ffdb 	bl	2221a <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    6264:	4620      	mov	r0, r4
    6266:	f7ff fa91 	bl	578c <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    626a:	68a0      	ldr	r0, [r4, #8]
    626c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    6270:	f01c f82d 	bl	222ce <k_mutex_unlock.isra.0>
	return 0;
    6274:	2000      	movs	r0, #0
}
    6276:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    6278:	f06f 0085 	mvn.w	r0, #133	; 0x85
    627c:	e7fb      	b.n	6276 <shell_start+0x46>
    627e:	bf00      	nop
    6280:	0002a596 	.word	0x0002a596

00006284 <shell_thread>:
{
    6284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6288:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    628a:	6840      	ldr	r0, [r0, #4]
    628c:	6803      	ldr	r3, [r0, #0]
{
    628e:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    6290:	689b      	ldr	r3, [r3, #8]
    6292:	2100      	movs	r1, #0
{
    6294:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    6296:	4798      	blx	r3
	if (err != 0) {
    6298:	2800      	cmp	r0, #0
    629a:	d14c      	bne.n	6336 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    629c:	b126      	cbz	r6, 62a8 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
    629e:	69e0      	ldr	r0, [r4, #28]
    62a0:	462a      	mov	r2, r5
    62a2:	4621      	mov	r1, r4
    62a4:	f01c fdfb 	bl	22e9e <z_shell_log_backend_enable>
		err = shell_start(shell);
    62a8:	4620      	mov	r0, r4
    62aa:	f7ff ffc1 	bl	6230 <shell_start>
		if (err != 0) {
    62ae:	2800      	cmp	r0, #0
    62b0:	d141      	bne.n	6336 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    62b2:	4e22      	ldr	r6, [pc, #136]	; (633c <shell_thread+0xb8>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    62b4:	4f22      	ldr	r7, [pc, #136]	; (6340 <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    62b6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 6344 <shell_thread+0xc0>
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    62ba:	68a0      	ldr	r0, [r4, #8]
    62bc:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    62c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62c8:	2103      	movs	r1, #3
    62ca:	f01a fcf1 	bl	20cb0 <z_impl_k_poll>
		if (err != 0) {
    62ce:	4605      	mov	r5, r0
    62d0:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    62d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62da:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    62de:	b175      	cbz	r5, 62fe <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    62e0:	f01b ffa8 	bl	22234 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    62e4:	4620      	mov	r0, r4
    62e6:	462b      	mov	r3, r5
    62e8:	4a17      	ldr	r2, [pc, #92]	; (6348 <shell_thread+0xc4>)
    62ea:	2101      	movs	r1, #1
    62ec:	f01c fc88 	bl	22c00 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    62f0:	68a0      	ldr	r0, [r4, #8]
}
    62f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    62f6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    62fa:	f01b bfe8 	b.w	222ce <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    62fe:	f01b ff99 	bl	22234 <k_mutex_lock.constprop.0.isra.0>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    6302:	4632      	mov	r2, r6
    6304:	2102      	movs	r1, #2
    6306:	4620      	mov	r0, r4
    6308:	f01b ff6b 	bl	221e2 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    630c:	463a      	mov	r2, r7
    630e:	4629      	mov	r1, r5
    6310:	4620      	mov	r0, r4
    6312:	f01b ff66 	bl	221e2 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    6316:	4620      	mov	r0, r4
    6318:	4642      	mov	r2, r8
    631a:	2101      	movs	r1, #1
    631c:	f01b ff61 	bl	221e2 <shell_signal_handle>
		if (shell->iface->api->update) {
    6320:	6860      	ldr	r0, [r4, #4]
    6322:	6803      	ldr	r3, [r0, #0]
    6324:	695b      	ldr	r3, [r3, #20]
    6326:	b103      	cbz	r3, 632a <shell_thread+0xa6>
			shell->iface->api->update(shell->iface);
    6328:	4798      	blx	r3
		k_mutex_unlock(&shell->ctx->wr_mtx);
    632a:	68a0      	ldr	r0, [r4, #8]
    632c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    6330:	f01b ffcd 	bl	222ce <k_mutex_unlock.isra.0>
	while (true) {
    6334:	e7c1      	b.n	62ba <shell_thread+0x36>
}
    6336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    633a:	bf00      	nop
    633c:	0002224d 	.word	0x0002224d
    6340:	00005aa5 	.word	0x00005aa5
    6344:	000222d3 	.word	0x000222d3
    6348:	0002ac71 	.word	0x0002ac71

0000634c <cmd_help>:

	return state_get(sh) ==	SHELL_STATE_ACTIVE;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    634c:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    634e:	4a0d      	ldr	r2, [pc, #52]	; (6384 <cmd_help+0x38>)
{
    6350:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    6352:	2108      	movs	r1, #8
    6354:	f01c f81e 	bl	22394 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    6358:	4620      	mov	r0, r4
    635a:	4a0b      	ldr	r2, [pc, #44]	; (6388 <cmd_help+0x3c>)
    635c:	2108      	movs	r1, #8
    635e:	f01c f819 	bl	22394 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    6362:	4620      	mov	r0, r4
    6364:	4a09      	ldr	r2, [pc, #36]	; (638c <cmd_help+0x40>)
    6366:	2108      	movs	r1, #8
    6368:	f01c f814 	bl	22394 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    636c:	4620      	mov	r0, r4
    636e:	4a08      	ldr	r2, [pc, #32]	; (6390 <cmd_help+0x44>)
    6370:	2108      	movs	r1, #8
    6372:	f01c f80f 	bl	22394 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    6376:	4620      	mov	r0, r4
    6378:	4a06      	ldr	r2, [pc, #24]	; (6394 <cmd_help+0x48>)
    637a:	2100      	movs	r1, #0
    637c:	f000 fa42 	bl	6804 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    6380:	2000      	movs	r0, #0
    6382:	bd10      	pop	{r4, pc}
    6384:	0002ac88 	.word	0x0002ac88
    6388:	0002acc6 	.word	0x0002acc6
    638c:	0002ad25 	.word	0x0002ad25
    6390:	0002ad79 	.word	0x0002ad79
    6394:	0002ae13 	.word	0x0002ae13

00006398 <shell_hexdump_line>:
{
    6398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    639a:	461e      	mov	r6, r3
    639c:	4617      	mov	r7, r2
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    639e:	460b      	mov	r3, r1
    63a0:	4a2f      	ldr	r2, [pc, #188]	; (6460 <shell_hexdump_line+0xc8>)
    63a2:	2108      	movs	r1, #8
{
    63a4:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    63a6:	f01b fff5 	bl	22394 <shell_fprintf>
		if (i < len) {
    63aa:	b36e      	cbz	r6, 6408 <shell_hexdump_line+0x70>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    63ac:	783b      	ldrb	r3, [r7, #0]
    63ae:	4a2d      	ldr	r2, [pc, #180]	; (6464 <shell_hexdump_line+0xcc>)
    63b0:	2108      	movs	r1, #8
    63b2:	4620      	mov	r0, r4
    63b4:	f01b ffee 	bl	22394 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    63b8:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    63ba:	076a      	lsls	r2, r5, #29
    63bc:	d104      	bne.n	63c8 <shell_hexdump_line+0x30>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    63be:	4a2a      	ldr	r2, [pc, #168]	; (6468 <shell_hexdump_line+0xd0>)
    63c0:	2108      	movs	r1, #8
    63c2:	4620      	mov	r0, r4
    63c4:	f01b ffe6 	bl	22394 <shell_fprintf>
		if (i < len) {
    63c8:	42ae      	cmp	r6, r5
    63ca:	d923      	bls.n	6414 <shell_hexdump_line+0x7c>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    63cc:	5d7b      	ldrb	r3, [r7, r5]
    63ce:	4a25      	ldr	r2, [pc, #148]	; (6464 <shell_hexdump_line+0xcc>)
    63d0:	2108      	movs	r1, #8
    63d2:	4620      	mov	r0, r4
    63d4:	f01b ffde 	bl	22394 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    63d8:	3501      	adds	r5, #1
    63da:	2d10      	cmp	r5, #16
    63dc:	d1ed      	bne.n	63ba <shell_hexdump_line+0x22>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    63de:	4a23      	ldr	r2, [pc, #140]	; (646c <shell_hexdump_line+0xd4>)
    63e0:	2108      	movs	r1, #8
    63e2:	4620      	mov	r0, r4
    63e4:	f01b ffd6 	bl	22394 <shell_fprintf>
		if (i < len) {
    63e8:	b9d6      	cbnz	r6, 6420 <shell_hexdump_line+0x88>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    63ea:	4a1f      	ldr	r2, [pc, #124]	; (6468 <shell_hexdump_line+0xd0>)
    63ec:	2108      	movs	r1, #8
    63ee:	4620      	mov	r0, r4
    63f0:	f01b ffd0 	bl	22394 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    63f4:	2501      	movs	r5, #1
		if (i < len) {
    63f6:	42ae      	cmp	r6, r5
    63f8:	462b      	mov	r3, r5
    63fa:	d813      	bhi.n	6424 <shell_hexdump_line+0x8c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    63fc:	4a1a      	ldr	r2, [pc, #104]	; (6468 <shell_hexdump_line+0xd0>)
    63fe:	2108      	movs	r1, #8
    6400:	4620      	mov	r0, r4
    6402:	f01b ffc7 	bl	22394 <shell_fprintf>
    6406:	e018      	b.n	643a <shell_hexdump_line+0xa2>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    6408:	4a19      	ldr	r2, [pc, #100]	; (6470 <shell_hexdump_line+0xd8>)
    640a:	2108      	movs	r1, #8
    640c:	4620      	mov	r0, r4
    640e:	f01b ffc1 	bl	22394 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    6412:	2501      	movs	r5, #1
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    6414:	4a16      	ldr	r2, [pc, #88]	; (6470 <shell_hexdump_line+0xd8>)
    6416:	2108      	movs	r1, #8
    6418:	4620      	mov	r0, r4
    641a:	f01b ffbb 	bl	22394 <shell_fprintf>
    641e:	e7db      	b.n	63d8 <shell_hexdump_line+0x40>
		if (i < len) {
    6420:	2500      	movs	r5, #0
    6422:	462b      	mov	r3, r5
			char c = data[i];
    6424:	5cfb      	ldrb	r3, [r7, r3]
	return (int)((((unsigned)c) >= ' ') &&
    6426:	f1a3 0220 	sub.w	r2, r3, #32
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    642a:	2a5f      	cmp	r2, #95	; 0x5f
    642c:	bf28      	it	cs
    642e:	232e      	movcs	r3, #46	; 0x2e
    6430:	4a10      	ldr	r2, [pc, #64]	; (6474 <shell_hexdump_line+0xdc>)
    6432:	2108      	movs	r1, #8
    6434:	4620      	mov	r0, r4
    6436:	f01b ffad 	bl	22394 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    643a:	3501      	adds	r5, #1
    643c:	2d10      	cmp	r5, #16
    643e:	d007      	beq.n	6450 <shell_hexdump_line+0xb8>
		if (i > 0 && !(i % 8)) {
    6440:	076b      	lsls	r3, r5, #29
    6442:	d1d8      	bne.n	63f6 <shell_hexdump_line+0x5e>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    6444:	4a08      	ldr	r2, [pc, #32]	; (6468 <shell_hexdump_line+0xd0>)
    6446:	2108      	movs	r1, #8
    6448:	4620      	mov	r0, r4
    644a:	f01b ffa3 	bl	22394 <shell_fprintf>
    644e:	e7d2      	b.n	63f6 <shell_hexdump_line+0x5e>
	shell_print(shell, "|");
    6450:	4620      	mov	r0, r4
    6452:	4a09      	ldr	r2, [pc, #36]	; (6478 <shell_hexdump_line+0xe0>)
}
    6454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	shell_print(shell, "|");
    6458:	2108      	movs	r1, #8
    645a:	f01b bf9b 	b.w	22394 <shell_fprintf>
    645e:	bf00      	nop
    6460:	0002ae29 	.word	0x0002ae29
    6464:	0002a062 	.word	0x0002a062
    6468:	0002a06a 	.word	0x0002a06a
    646c:	0002a06c 	.word	0x0002a06c
    6470:	0002a068 	.word	0x0002a068
    6474:	00029f0a 	.word	0x00029f0a
    6478:	0002ae30 	.word	0x0002ae30

0000647c <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    647c:	b513      	push	{r0, r1, r4, lr}
    647e:	4613      	mov	r3, r2
    6480:	4604      	mov	r4, r0
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    6482:	2200      	movs	r2, #0
    6484:	9200      	str	r2, [sp, #0]
    6486:	460a      	mov	r2, r1
    6488:	4601      	mov	r1, r0
    648a:	4807      	ldr	r0, [pc, #28]	; (64a8 <z_shell_fprintf_fmt+0x2c>)
    648c:	f7fc fc3a 	bl	2d04 <z_cbvprintf_impl>
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);

	if (sh_fprintf->ctrl_blk->autoflush) {
    6490:	6923      	ldr	r3, [r4, #16]
    6492:	791b      	ldrb	r3, [r3, #4]
    6494:	b12b      	cbz	r3, 64a2 <z_shell_fprintf_fmt+0x26>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    6496:	4620      	mov	r0, r4
	}
}
    6498:	b002      	add	sp, #8
    649a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    649e:	f01b bfb9 	b.w	22414 <z_shell_fprintf_buffer_flush>
}
    64a2:	b002      	add	sp, #8
    64a4:	bd10      	pop	{r4, pc}
    64a6:	bf00      	nop
    64a8:	0002242d 	.word	0x0002242d

000064ac <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    64ac:	b538      	push	{r3, r4, r5, lr}
    64ae:	460b      	mov	r3, r1
    64b0:	4615      	mov	r5, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    64b2:	b948      	cbnz	r0, 64c8 <z_shell_cmd_get+0x1c>
	return ((uint8_t *)__shell_root_cmds_end -
    64b4:	4914      	ldr	r1, [pc, #80]	; (6508 <z_shell_cmd_get+0x5c>)
    64b6:	4a15      	ldr	r2, [pc, #84]	; (650c <z_shell_cmd_get+0x60>)
    64b8:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->entry : NULL;
    64ba:	ebb3 0f92 	cmp.w	r3, r2, lsr #2
    64be:	d205      	bcs.n	64cc <z_shell_cmd_get+0x20>
    64c0:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			}
		}
	}

	return res;
}
    64c4:	4628      	mov	r0, r5
    64c6:	bd38      	pop	{r3, r4, r5, pc}
	if (parent->subcmd) {
    64c8:	6884      	ldr	r4, [r0, #8]
    64ca:	b90c      	cbnz	r4, 64d0 <z_shell_cmd_get+0x24>
	const struct shell_static_entry *res = NULL;
    64cc:	2500      	movs	r5, #0
    64ce:	e7f9      	b.n	64c4 <z_shell_cmd_get+0x18>
	return (entry >= __shell_dynamic_subcmds_start) &&
    64d0:	4a0f      	ldr	r2, [pc, #60]	; (6510 <z_shell_cmd_get+0x64>)
    64d2:	4294      	cmp	r4, r2
    64d4:	d30a      	bcc.n	64ec <z_shell_cmd_get+0x40>
    64d6:	4a0f      	ldr	r2, [pc, #60]	; (6514 <z_shell_cmd_get+0x68>)
    64d8:	4294      	cmp	r4, r2
    64da:	d207      	bcs.n	64ec <z_shell_cmd_get+0x40>
			parent->subcmd->dynamic_get(idx, dloc);
    64dc:	4618      	mov	r0, r3
    64de:	6822      	ldr	r2, [r4, #0]
    64e0:	4629      	mov	r1, r5
    64e2:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    64e4:	682b      	ldr	r3, [r5, #0]
			if (entry_list[idx].syntax != NULL) {
    64e6:	2b00      	cmp	r3, #0
    64e8:	d1ec      	bne.n	64c4 <z_shell_cmd_get+0x18>
    64ea:	e7ef      	b.n	64cc <z_shell_cmd_get+0x20>
	return (entry >= __shell_subcmds_start) &&
    64ec:	4a0a      	ldr	r2, [pc, #40]	; (6518 <z_shell_cmd_get+0x6c>)
    64ee:	4294      	cmp	r4, r2
    64f0:	d302      	bcc.n	64f8 <z_shell_cmd_get+0x4c>
    64f2:	4a0a      	ldr	r2, [pc, #40]	; (651c <z_shell_cmd_get+0x70>)
    64f4:	4294      	cmp	r4, r2
    64f6:	d305      	bcc.n	6504 <z_shell_cmd_get+0x58>
				entry_list = parent->subcmd->entry;
    64f8:	6824      	ldr	r4, [r4, #0]
			if (entry_list[idx].syntax != NULL) {
    64fa:	2214      	movs	r2, #20
    64fc:	4353      	muls	r3, r2
    64fe:	18e5      	adds	r5, r4, r3
    6500:	58e3      	ldr	r3, [r4, r3]
    6502:	e7f0      	b.n	64e6 <z_shell_cmd_get+0x3a>
				idx++;
    6504:	3301      	adds	r3, #1
    6506:	e7f8      	b.n	64fa <z_shell_cmd_get+0x4e>
    6508:	00027ab0 	.word	0x00027ab0
    650c:	00027ae4 	.word	0x00027ae4
    6510:	00027af8 	.word	0x00027af8
    6514:	00027b18 	.word	0x00027b18
    6518:	00027ae4 	.word	0x00027ae4
    651c:	00027af8 	.word	0x00027af8

00006520 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6520:	6883      	ldr	r3, [r0, #8]
    6522:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    6526:	069b      	lsls	r3, r3, #26
    6528:	d503      	bpl.n	6532 <z_clear_eos+0x12>
    652a:	4902      	ldr	r1, [pc, #8]	; (6534 <z_clear_eos+0x14>)
    652c:	6940      	ldr	r0, [r0, #20]
    652e:	f01c b9e5 	b.w	228fc <z_shell_raw_fprintf>
}
    6532:	4770      	bx	lr
    6534:	00027bb8 	.word	0x00027bb8

00006538 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    6538:	4901      	ldr	r1, [pc, #4]	; (6540 <z_cursor_next_line_move.isra.0+0x8>)
    653a:	f01c b9df 	b.w	228fc <z_shell_raw_fprintf>
    653e:	bf00      	nop
    6540:	0002a597 	.word	0x0002a597

00006544 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    6544:	1e0a      	subs	r2, r1, #0
    6546:	dc0d      	bgt.n	6564 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    6548:	d00e      	beq.n	6568 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    654a:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    654c:	6881      	ldr	r1, [r0, #8]
    654e:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    6552:	0689      	lsls	r1, r1, #26
    6554:	d508      	bpl.n	6568 <z_shell_op_cursor_vert_move+0x24>
    6556:	2a00      	cmp	r2, #0
    6558:	4904      	ldr	r1, [pc, #16]	; (656c <z_shell_op_cursor_vert_move+0x28>)
    655a:	6940      	ldr	r0, [r0, #20]
    655c:	bfb8      	it	lt
    655e:	4252      	neglt	r2, r2
    6560:	f01c b9cc 	b.w	228fc <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    6564:	2341      	movs	r3, #65	; 0x41
    6566:	e7f1      	b.n	654c <z_shell_op_cursor_vert_move+0x8>
}
    6568:	4770      	bx	lr
    656a:	bf00      	nop
    656c:	0002ae4c 	.word	0x0002ae4c

00006570 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    6570:	1e0a      	subs	r2, r1, #0
    6572:	dc0d      	bgt.n	6590 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    6574:	d00e      	beq.n	6594 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    6576:	2344      	movs	r3, #68	; 0x44
    6578:	6881      	ldr	r1, [r0, #8]
    657a:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    657e:	0689      	lsls	r1, r1, #26
    6580:	d508      	bpl.n	6594 <z_shell_op_cursor_horiz_move+0x24>
    6582:	2a00      	cmp	r2, #0
    6584:	4904      	ldr	r1, [pc, #16]	; (6598 <z_shell_op_cursor_horiz_move+0x28>)
    6586:	6940      	ldr	r0, [r0, #20]
    6588:	bfb8      	it	lt
    658a:	4252      	neglt	r2, r2
    658c:	f01c b9b6 	b.w	228fc <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    6590:	2343      	movs	r3, #67	; 0x43
    6592:	e7f1      	b.n	6578 <z_shell_op_cursor_horiz_move+0x8>
}
    6594:	4770      	bx	lr
    6596:	bf00      	nop
    6598:	0002ae4c 	.word	0x0002ae4c

0000659c <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    659c:	6882      	ldr	r2, [r0, #8]
    659e:	4902      	ldr	r1, [pc, #8]	; (65a8 <z_shell_print_cmd+0xc>)
    65a0:	6940      	ldr	r0, [r0, #20]
    65a2:	3242      	adds	r2, #66	; 0x42
    65a4:	f01c b9aa 	b.w	228fc <z_shell_raw_fprintf>
    65a8:	0002a7ba 	.word	0x0002a7ba

000065ac <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    65ac:	2908      	cmp	r1, #8
{
    65ae:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    65b0:	d817      	bhi.n	65e2 <z_shell_vt100_color_set+0x36>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    65b2:	6883      	ldr	r3, [r0, #8]
    65b4:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    65b8:	4291      	cmp	r1, r2
    65ba:	d012      	beq.n	65e2 <z_shell_vt100_color_set+0x36>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
    65bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    65c0:	6883      	ldr	r3, [r0, #8]
    65c2:	2a08      	cmp	r2, #8
    65c4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    65c8:	d005      	beq.n	65d6 <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    65ca:	0699      	lsls	r1, r3, #26
    65cc:	d509      	bpl.n	65e2 <z_shell_vt100_color_set+0x36>
    65ce:	4905      	ldr	r1, [pc, #20]	; (65e4 <z_shell_vt100_color_set+0x38>)
    65d0:	6940      	ldr	r0, [r0, #20]
    65d2:	f01c b993 	b.w	228fc <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    65d6:	069b      	lsls	r3, r3, #26
    65d8:	d503      	bpl.n	65e2 <z_shell_vt100_color_set+0x36>
    65da:	4903      	ldr	r1, [pc, #12]	; (65e8 <z_shell_vt100_color_set+0x3c>)
    65dc:	6940      	ldr	r0, [r0, #20]
    65de:	f01c b98d 	b.w	228fc <z_shell_raw_fprintf>
	}
}
    65e2:	4770      	bx	lr
    65e4:	0002ae53 	.word	0x0002ae53
    65e8:	00027bbd 	.word	0x00027bbd

000065ec <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    65ec:	b538      	push	{r3, r4, r5, lr}
    65ee:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    65f0:	7809      	ldrb	r1, [r1, #0]
{
    65f2:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    65f4:	f7ff ffda 	bl	65ac <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    65f8:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    65fa:	2a07      	cmp	r2, #7
    65fc:	d811      	bhi.n	6622 <z_shell_vt100_colors_restore+0x36>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    65fe:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    6600:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    6604:	4291      	cmp	r1, r2
    6606:	d00c      	beq.n	6622 <z_shell_vt100_colors_restore+0x36>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    6608:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    660c:	68a3      	ldr	r3, [r4, #8]
    660e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    6612:	069b      	lsls	r3, r3, #26
    6614:	d505      	bpl.n	6622 <z_shell_vt100_colors_restore+0x36>
    6616:	6960      	ldr	r0, [r4, #20]
    6618:	4902      	ldr	r1, [pc, #8]	; (6624 <z_shell_vt100_colors_restore+0x38>)
}
    661a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    661e:	f01c b96d 	b.w	228fc <z_shell_raw_fprintf>
}
    6622:	bd38      	pop	{r3, r4, r5, pc}
    6624:	0002ae5c 	.word	0x0002ae5c

00006628 <z_shell_op_word_remove>:
{
    6628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    662a:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    662c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    662e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
{
    6630:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    6632:	2a00      	cmp	r2, #0
    6634:	d050      	beq.n	66d8 <z_shell_op_word_remove+0xb0>
    6636:	2900      	cmp	r1, #0
    6638:	d04e      	beq.n	66d8 <z_shell_op_word_remove+0xb0>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    663a:	3141      	adds	r1, #65	; 0x41
	char *str_start = &shell->ctx->cmd_buff[0];
    663c:	f103 0542 	add.w	r5, r3, #66	; 0x42
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    6640:	440b      	add	r3, r1
	char *str_start = &shell->ctx->cmd_buff[0];
    6642:	4618      	mov	r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    6644:	42a8      	cmp	r0, r5
    6646:	d306      	bcc.n	6656 <z_shell_op_word_remove+0x2e>
    6648:	4601      	mov	r1, r0
    664a:	f811 6901 	ldrb.w	r6, [r1], #-1
    664e:	2e20      	cmp	r6, #32
    6650:	d039      	beq.n	66c6 <z_shell_op_word_remove+0x9e>
	while ((str >= str_start) && (*str != ' ')) {
    6652:	42a8      	cmp	r0, r5
    6654:	d239      	bcs.n	66ca <z_shell_op_word_remove+0xa2>
    6656:	b286      	uxth	r6, r0
    6658:	b29d      	uxth	r5, r3
    665a:	1bab      	subs	r3, r5, r6
    665c:	b29b      	uxth	r3, r3
	memmove(str + 1, str + 1 + chars_to_delete,
    665e:	1c59      	adds	r1, r3, #1
    6660:	1c47      	adds	r7, r0, #1
    6662:	1ad2      	subs	r2, r2, r3
    6664:	4401      	add	r1, r0
    6666:	4638      	mov	r0, r7
    6668:	f01d fab9 	bl	23bde <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    666c:	68a2      	ldr	r2, [r4, #8]
    666e:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    6670:	1b71      	subs	r1, r6, r5
    6672:	fa13 f381 	uxtah	r3, r3, r1
    6676:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    6678:	68a3      	ldr	r3, [r4, #8]
    667a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    667c:	4413      	add	r3, r2
    667e:	2200      	movs	r2, #0
    6680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    6684:	b209      	sxth	r1, r1
    6686:	4620      	mov	r0, r4
    6688:	f01c f9a5 	bl	229d6 <z_shell_op_cursor_move>
    668c:	68a3      	ldr	r3, [r4, #8]
    668e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    6692:	069a      	lsls	r2, r3, #26
    6694:	d503      	bpl.n	669e <z_shell_op_word_remove+0x76>
    6696:	4911      	ldr	r1, [pc, #68]	; (66dc <z_shell_op_word_remove+0xb4>)
    6698:	6960      	ldr	r0, [r4, #20]
    669a:	f01c f92f 	bl	228fc <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    669e:	463b      	mov	r3, r7
    66a0:	4a0f      	ldr	r2, [pc, #60]	; (66e0 <z_shell_op_word_remove+0xb8>)
    66a2:	2108      	movs	r1, #8
    66a4:	4620      	mov	r0, r4
    66a6:	f01c faab 	bl	22c00 <z_shell_fprintf>
	z_clear_eos(shell);
    66aa:	4620      	mov	r0, r4
    66ac:	f7ff ff38 	bl	6520 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    66b0:	68a3      	ldr	r3, [r4, #8]
    66b2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    66b6:	069b      	lsls	r3, r3, #26
    66b8:	d50e      	bpl.n	66d8 <z_shell_op_word_remove+0xb0>
    66ba:	6960      	ldr	r0, [r4, #20]
    66bc:	4909      	ldr	r1, [pc, #36]	; (66e4 <z_shell_op_word_remove+0xbc>)
}
    66be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    66c2:	f01c b91b 	b.w	228fc <z_shell_raw_fprintf>
    66c6:	4608      	mov	r0, r1
    66c8:	e7bc      	b.n	6644 <z_shell_op_word_remove+0x1c>
    66ca:	4601      	mov	r1, r0
	while ((str >= str_start) && (*str != ' ')) {
    66cc:	f811 6901 	ldrb.w	r6, [r1], #-1
    66d0:	2e20      	cmp	r6, #32
    66d2:	d0c0      	beq.n	6656 <z_shell_op_word_remove+0x2e>
    66d4:	4608      	mov	r0, r1
    66d6:	e7bc      	b.n	6652 <z_shell_op_word_remove+0x2a>
}
    66d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66da:	bf00      	nop
    66dc:	00027bc2 	.word	0x00027bc2
    66e0:	0002a7ba 	.word	0x0002a7ba
    66e4:	00027bc6 	.word	0x00027bc6

000066e8 <reprint_from_cursor>:
{
    66e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66ec:	4604      	mov	r4, r0
    66ee:	460d      	mov	r5, r1
	if (data_removed) {
    66f0:	4617      	mov	r7, r2
    66f2:	b10a      	cbz	r2, 66f8 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    66f4:	f7ff ff14 	bl	6520 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    66f8:	68a3      	ldr	r3, [r4, #8]
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    66fa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    66fc:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
    6700:	3242      	adds	r2, #66	; 0x42
    6702:	4413      	add	r3, r2
	if (z_flag_obscure_get(shell)) {
    6704:	074a      	lsls	r2, r1, #29
    6706:	d51f      	bpl.n	6748 <reprint_from_cursor+0x60>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    6708:	4618      	mov	r0, r3
    670a:	f01d fa28 	bl	23b5e <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    670e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 6754 <reprint_from_cursor+0x6c>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    6712:	4606      	mov	r6, r0
		while (len--) {
    6714:	b996      	cbnz	r6, 673c <reprint_from_cursor+0x54>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    6716:	68a3      	ldr	r3, [r4, #8]
    6718:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    671a:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    671c:	4620      	mov	r0, r4
    671e:	f01c f8fa 	bl	22916 <full_line_cmd>
    6722:	b120      	cbz	r0, 672e <reprint_from_cursor+0x46>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    6724:	b107      	cbz	r7, 6728 <reprint_from_cursor+0x40>
    6726:	b115      	cbz	r5, 672e <reprint_from_cursor+0x46>
			z_cursor_next_line_move(shell);
    6728:	6960      	ldr	r0, [r4, #20]
    672a:	f7ff ff05 	bl	6538 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    672e:	4269      	negs	r1, r5
    6730:	4620      	mov	r0, r4
    6732:	b209      	sxth	r1, r1
}
    6734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    6738:	f01c b94d 	b.w	229d6 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    673c:	6960      	ldr	r0, [r4, #20]
    673e:	4641      	mov	r1, r8
    6740:	f01c f8dc 	bl	228fc <z_shell_raw_fprintf>
    6744:	3e01      	subs	r6, #1
    6746:	e7e5      	b.n	6714 <reprint_from_cursor+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    6748:	4a03      	ldr	r2, [pc, #12]	; (6758 <reprint_from_cursor+0x70>)
    674a:	2108      	movs	r1, #8
    674c:	4620      	mov	r0, r4
    674e:	f01c fa57 	bl	22c00 <z_shell_fprintf>
    6752:	e7e0      	b.n	6716 <reprint_from_cursor+0x2e>
    6754:	0002b8b8 	.word	0x0002b8b8
    6758:	0002a7ba 	.word	0x0002a7ba

0000675c <z_shell_op_char_insert>:
{
    675c:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    675e:	6883      	ldr	r3, [r0, #8]
    6760:	f88d 1007 	strb.w	r1, [sp, #7]
    6764:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    6768:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    676a:	07d0      	lsls	r0, r2, #31
    676c:	d522      	bpl.n	67b4 <z_shell_op_char_insert+0x58>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    676e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    6770:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    6772:	428a      	cmp	r2, r1
    6774:	d01e      	beq.n	67b4 <z_shell_op_char_insert+0x58>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    6776:	1c48      	adds	r0, r1, #1
    6778:	87d8      	strh	r0, [r3, #62]	; 0x3e
    677a:	440b      	add	r3, r1
		char_replace(shell, data);
    677c:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    6780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    6784:	68a3      	ldr	r3, [r4, #8]
    6786:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    678a:	0789      	lsls	r1, r1, #30
    678c:	d510      	bpl.n	67b0 <z_shell_op_char_insert+0x54>
	return sh->ctx->cfg.flags.obscure == 1;
    678e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    6792:	6960      	ldr	r0, [r4, #20]
    6794:	490b      	ldr	r1, [pc, #44]	; (67c4 <z_shell_op_char_insert+0x68>)
		data = '*';
    6796:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    679a:	bf18      	it	ne
    679c:	222a      	movne	r2, #42	; 0x2a
    679e:	f01c f8ad 	bl	228fc <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    67a2:	4620      	mov	r0, r4
    67a4:	f01c f8cb 	bl	2293e <z_shell_cursor_in_empty_line>
    67a8:	b110      	cbz	r0, 67b0 <z_shell_op_char_insert+0x54>
		z_cursor_next_line_move(shell);
    67aa:	6960      	ldr	r0, [r4, #20]
    67ac:	f7ff fec4 	bl	6538 <z_cursor_next_line_move.isra.0>
}
    67b0:	b002      	add	sp, #8
    67b2:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    67b4:	2201      	movs	r2, #1
    67b6:	f10d 0107 	add.w	r1, sp, #7
    67ba:	4620      	mov	r0, r4
    67bc:	f01c fa2d 	bl	22c1a <data_insert>
}
    67c0:	e7f6      	b.n	67b0 <z_shell_op_char_insert+0x54>
    67c2:	bf00      	nop
    67c4:	00029f0a 	.word	0x00029f0a

000067c8 <z_shell_print_prompt_and_cmd>:
{
    67c8:	b510      	push	{r4, lr}
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    67ca:	6883      	ldr	r3, [r0, #8]
    67cc:	4a09      	ldr	r2, [pc, #36]	; (67f4 <z_shell_print_prompt_and_cmd+0x2c>)
    67ce:	681b      	ldr	r3, [r3, #0]
{
    67d0:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    67d2:	2102      	movs	r1, #2
    67d4:	f01c fa14 	bl	22c00 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    67d8:	68a3      	ldr	r3, [r4, #8]
    67da:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    67de:	079b      	lsls	r3, r3, #30
    67e0:	d507      	bpl.n	67f2 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    67e2:	4620      	mov	r0, r4
    67e4:	f7ff feda 	bl	659c <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    67e8:	4620      	mov	r0, r4
}
    67ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    67ee:	f01c b8cf 	b.w	22990 <z_shell_op_cursor_position_synchronize>
}
    67f2:	bd10      	pop	{r4, pc}
    67f4:	0002a7ba 	.word	0x0002a7ba

000067f8 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    67f8:	4901      	ldr	r1, [pc, #4]	; (6800 <z_cursor_next_line_move.isra.0+0x8>)
    67fa:	f01c bbdd 	b.w	22fb8 <z_shell_raw_fprintf>
    67fe:	bf00      	nop
    6800:	0002a597 	.word	0x0002a597

00006804 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    6804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6808:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    680a:	2100      	movs	r1, #0
{
    680c:	b08b      	sub	sp, #44	; 0x2c
    680e:	4604      	mov	r4, r0
    6810:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    6812:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    6814:	aa05      	add	r2, sp, #20
    6816:	4630      	mov	r0, r6
    6818:	f101 0801 	add.w	r8, r1, #1
    681c:	f7ff fe46 	bl	64ac <z_shell_cmd_get>
    6820:	b9a0      	cbnz	r0, 684c <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    6822:	b185      	cbz	r5, 6846 <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    6824:	b127      	cbz	r7, 6830 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    6826:	463a      	mov	r2, r7
    6828:	2108      	movs	r1, #8
    682a:	4620      	mov	r0, r4
    682c:	f01c f9e8 	bl	22c00 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    6830:	4f21      	ldr	r7, [pc, #132]	; (68b8 <z_shell_help_subcmd_print+0xb4>)
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
    6832:	f8df b088 	ldr.w	fp, [pc, #136]	; 68bc <z_shell_help_subcmd_print+0xb8>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    6836:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    6838:	aa05      	add	r2, sp, #20
    683a:	4630      	mov	r0, r6
    683c:	f101 0a01 	add.w	sl, r1, #1
    6840:	f7ff fe34 	bl	64ac <z_shell_cmd_get>
    6844:	b960      	cbnz	r0, 6860 <z_shell_help_subcmd_print+0x5c>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    6846:	b00b      	add	sp, #44	; 0x2c
    6848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    684c:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    684e:	b110      	cbz	r0, 6856 <z_shell_help_subcmd_print+0x52>
    6850:	f01d f985 	bl	23b5e <strlen>
    6854:	b280      	uxth	r0, r0
    6856:	4285      	cmp	r5, r0
    6858:	bf38      	it	cc
    685a:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    685c:	4641      	mov	r1, r8
    685e:	e7d9      	b.n	6814 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    6860:	6803      	ldr	r3, [r0, #0]
    6862:	f8d0 9004 	ldr.w	r9, [r0, #4]
    6866:	9303      	str	r3, [sp, #12]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    6868:	4638      	mov	r0, r7
    686a:	f01d f978 	bl	23b5e <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    686e:	9b03      	ldr	r3, [sp, #12]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    6870:	4680      	mov	r8, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    6872:	b17b      	cbz	r3, 6894 <z_shell_help_subcmd_print+0x90>
    6874:	781a      	ldrb	r2, [r3, #0]
    6876:	b16a      	cbz	r2, 6894 <z_shell_help_subcmd_print+0x90>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s", tabulator,
    6878:	e9cd 5300 	strd	r5, r3, [sp]
    687c:	4a10      	ldr	r2, [pc, #64]	; (68c0 <z_shell_help_subcmd_print+0xbc>)
    687e:	463b      	mov	r3, r7
    6880:	2108      	movs	r1, #8
    6882:	4620      	mov	r0, r4
    6884:	f01c f9bc 	bl	22c00 <z_shell_fprintf>
	if (item_help == NULL) {
    6888:	f1b9 0f00 	cmp.w	r9, #0
    688c:	d104      	bne.n	6898 <z_shell_help_subcmd_print+0x94>
		z_cursor_next_line_move(shell);
    688e:	6960      	ldr	r0, [r4, #20]
    6890:	f7ff ffb2 	bl	67f8 <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    6894:	4651      	mov	r1, sl
    6896:	e7cf      	b.n	6838 <z_shell_help_subcmd_print+0x34>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
    6898:	465a      	mov	r2, fp
    689a:	4620      	mov	r0, r4
    689c:	463b      	mov	r3, r7
    689e:	2108      	movs	r1, #8
    68a0:	f01c f9ae 	bl	22c00 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    68a4:	1c6a      	adds	r2, r5, #1
    68a6:	eb02 0248 	add.w	r2, r2, r8, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    68aa:	b292      	uxth	r2, r2
    68ac:	4649      	mov	r1, r9
    68ae:	4620      	mov	r0, r4
    68b0:	f01c fb8f 	bl	22fd2 <formatted_text_print.constprop.0>
    68b4:	e7ee      	b.n	6894 <z_shell_help_subcmd_print+0x90>
    68b6:	bf00      	nop
    68b8:	0002ae7e 	.word	0x0002ae7e
    68bc:	0002ae6c 	.word	0x0002ae6c
    68c0:	0002ae65 	.word	0x0002ae65

000068c4 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    68c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68c6:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    68c8:	6808      	ldr	r0, [r1, #0]
{
    68ca:	460d      	mov	r5, r1
    68cc:	b1b8      	cbz	r0, 68fe <z_shell_help_cmd_print+0x3a>
    68ce:	f01d f946 	bl	23b5e <strlen>
    68d2:	b284      	uxth	r4, r0
    68d4:	4f0b      	ldr	r7, [pc, #44]	; (6904 <z_shell_help_cmd_print+0x40>)
    68d6:	4638      	mov	r0, r7
    68d8:	f01d f941 	bl	23b5e <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    68dc:	9700      	str	r7, [sp, #0]
    68de:	682b      	ldr	r3, [r5, #0]
    68e0:	4a09      	ldr	r2, [pc, #36]	; (6908 <z_shell_help_cmd_print+0x44>)
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    68e2:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    68e4:	2108      	movs	r1, #8
    68e6:	4630      	mov	r0, r6
    68e8:	f01c f98a 	bl	22c00 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    68ec:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    68ee:	6869      	ldr	r1, [r5, #4]
    68f0:	4622      	mov	r2, r4
    68f2:	4630      	mov	r0, r6
}
    68f4:	b003      	add	sp, #12
    68f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    68fa:	f01c bb6a 	b.w	22fd2 <formatted_text_print.constprop.0>
    68fe:	4604      	mov	r4, r0
    6900:	e7e8      	b.n	68d4 <z_shell_help_cmd_print+0x10>
    6902:	bf00      	nop
    6904:	0002ae7a 	.word	0x0002ae7a
    6908:	0002ac6c 	.word	0x0002ac6c

0000690c <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    690c:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    690e:	4907      	ldr	r1, [pc, #28]	; (692c <z_shell_help_request+0x20>)
{
    6910:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    6912:	f01d f934 	bl	23b7e <strcmp>
    6916:	b138      	cbz	r0, 6928 <z_shell_help_request+0x1c>
    6918:	4905      	ldr	r1, [pc, #20]	; (6930 <z_shell_help_request+0x24>)
    691a:	4620      	mov	r0, r4
    691c:	f01d f92f 	bl	23b7e <strcmp>
    6920:	fab0 f080 	clz	r0, r0
    6924:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    6926:	bd10      	pop	{r4, pc}
		return true;
    6928:	2001      	movs	r0, #1
    692a:	e7fc      	b.n	6926 <z_shell_help_request+0x1a>
    692c:	0002ae70 	.word	0x0002ae70
    6930:	0002ae73 	.word	0x0002ae73

00006934 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    6934:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6936:	6883      	ldr	r3, [r0, #8]
    6938:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    693c:	069b      	lsls	r3, r3, #26
{
    693e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    6940:	d503      	bpl.n	694a <cmd_resize_default+0x16>
    6942:	4906      	ldr	r1, [pc, #24]	; (695c <cmd_resize_default+0x28>)
    6944:	6940      	ldr	r0, [r0, #20]
    6946:	f01c fbb8 	bl	230ba <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
    694a:	68a3      	ldr	r3, [r4, #8]
    694c:	2250      	movs	r2, #80	; 0x50
    694e:	855a      	strh	r2, [r3, #42]	; 0x2a
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    6950:	68a3      	ldr	r3, [r4, #8]
    6952:	2218      	movs	r2, #24
    6954:	851a      	strh	r2, [r3, #40]	; 0x28

	return 0;
}
    6956:	2000      	movs	r0, #0
    6958:	bd10      	pop	{r4, pc}
    695a:	bf00      	nop
    695c:	00027bca 	.word	0x00027bca

00006960 <cmd_shell_stats_show>:
{
    6960:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    6962:	6983      	ldr	r3, [r0, #24]
    6964:	4a03      	ldr	r2, [pc, #12]	; (6974 <cmd_shell_stats_show+0x14>)
    6966:	681b      	ldr	r3, [r3, #0]
    6968:	2108      	movs	r1, #8
    696a:	f01b fd13 	bl	22394 <shell_fprintf>
}
    696e:	2000      	movs	r0, #0
    6970:	bd08      	pop	{r3, pc}
    6972:	bf00      	nop
    6974:	0002ae81 	.word	0x0002ae81

00006978 <cmd_backends>:
{
    6978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	shell_print(sh, "Active shell backends:");
    697c:	4a0e      	ldr	r2, [pc, #56]	; (69b8 <cmd_backends+0x40>)
	STRUCT_SECTION_FOREACH(shell, obj) {
    697e:	4c0f      	ldr	r4, [pc, #60]	; (69bc <cmd_backends+0x44>)
    6980:	4e0f      	ldr	r6, [pc, #60]	; (69c0 <cmd_backends+0x48>)
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
    6982:	f8df 8040 	ldr.w	r8, [pc, #64]	; 69c4 <cmd_backends+0x4c>
	shell_print(sh, "Active shell backends:");
    6986:	2108      	movs	r1, #8
{
    6988:	4605      	mov	r5, r0
	shell_print(sh, "Active shell backends:");
    698a:	f01b fd03 	bl	22394 <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
    698e:	2300      	movs	r3, #0
    6990:	42b4      	cmp	r4, r6
    6992:	f103 0701 	add.w	r7, r3, #1
    6996:	d303      	bcc.n	69a0 <cmd_backends+0x28>
}
    6998:	2000      	movs	r0, #0
    699a:	b002      	add	sp, #8
    699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
    69a0:	68a2      	ldr	r2, [r4, #8]
    69a2:	6812      	ldr	r2, [r2, #0]
    69a4:	9200      	str	r2, [sp, #0]
    69a6:	b29b      	uxth	r3, r3
    69a8:	4642      	mov	r2, r8
    69aa:	2108      	movs	r1, #8
    69ac:	4628      	mov	r0, r5
    69ae:	f01b fcf1 	bl	22394 <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
    69b2:	3430      	adds	r4, #48	; 0x30
    69b4:	463b      	mov	r3, r7
    69b6:	e7eb      	b.n	6990 <cmd_backends+0x18>
    69b8:	0002ae91 	.word	0x0002ae91
    69bc:	00027a80 	.word	0x00027a80
    69c0:	00027ab0 	.word	0x00027ab0
    69c4:	0002aea9 	.word	0x0002aea9

000069c8 <cmd_history>:
{
    69c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    69ca:	4e0f      	ldr	r6, [pc, #60]	; (6a08 <cmd_history+0x40>)
{
    69cc:	4604      	mov	r4, r0
    69ce:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    69d0:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    69d2:	68e0      	ldr	r0, [r4, #12]
    69d4:	f10d 030e 	add.w	r3, sp, #14
    69d8:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    69dc:	2101      	movs	r1, #1
    69de:	f01c fbf4 	bl	231ca <z_shell_history_get>
		if (len) {
    69e2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    69e6:	68a3      	ldr	r3, [r4, #8]
    69e8:	b150      	cbz	r0, 6a00 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    69ea:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    69ee:	9300      	str	r3, [sp, #0]
    69f0:	4632      	mov	r2, r6
    69f2:	462b      	mov	r3, r5
    69f4:	2108      	movs	r1, #8
    69f6:	4620      	mov	r0, r4
    69f8:	f01b fccc 	bl	22394 <shell_fprintf>
	while (1) {
    69fc:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    69fe:	e7e7      	b.n	69d0 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    6a00:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    6a04:	b004      	add	sp, #16
    6a06:	bd70      	pop	{r4, r5, r6, pc}
    6a08:	0002aeb5 	.word	0x0002aeb5

00006a0c <cmd_echo>:
	if (argc == 2) {
    6a0c:	2902      	cmp	r1, #2
{
    6a0e:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    6a10:	d10d      	bne.n	6a2e <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    6a12:	6853      	ldr	r3, [r2, #4]
    6a14:	9301      	str	r3, [sp, #4]
    6a16:	4b0e      	ldr	r3, [pc, #56]	; (6a50 <cmd_echo+0x44>)
    6a18:	9300      	str	r3, [sp, #0]
    6a1a:	6813      	ldr	r3, [r2, #0]
    6a1c:	4a0d      	ldr	r2, [pc, #52]	; (6a54 <cmd_echo+0x48>)
    6a1e:	2101      	movs	r1, #1
    6a20:	f01b fcb8 	bl	22394 <shell_fprintf>
    6a24:	f06f 0015 	mvn.w	r0, #21
}
    6a28:	b003      	add	sp, #12
    6a2a:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    6a2e:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    6a30:	4a09      	ldr	r2, [pc, #36]	; (6a58 <cmd_echo+0x4c>)
    6a32:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    6a36:	f013 0f02 	tst.w	r3, #2
    6a3a:	f04f 0108 	mov.w	r1, #8
    6a3e:	4b07      	ldr	r3, [pc, #28]	; (6a5c <cmd_echo+0x50>)
    6a40:	bf08      	it	eq
    6a42:	4613      	moveq	r3, r2
    6a44:	4a06      	ldr	r2, [pc, #24]	; (6a60 <cmd_echo+0x54>)
    6a46:	f01b fca5 	bl	22394 <shell_fprintf>
	return 0;
    6a4a:	2000      	movs	r0, #0
    6a4c:	e7ec      	b.n	6a28 <cmd_echo+0x1c>
    6a4e:	bf00      	nop
    6a50:	0002aecc 	.word	0x0002aecc
    6a54:	0002aec3 	.word	0x0002aec3
    6a58:	0002aebf 	.word	0x0002aebf
    6a5c:	0002a745 	.word	0x0002a745
    6a60:	0002aee1 	.word	0x0002aee1

00006a64 <cmd_clear>:
{
    6a64:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6a66:	6883      	ldr	r3, [r0, #8]
    6a68:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    6a6c:	069a      	lsls	r2, r3, #26
{
    6a6e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    6a70:	d503      	bpl.n	6a7a <cmd_clear+0x16>
    6a72:	4907      	ldr	r1, [pc, #28]	; (6a90 <cmd_clear+0x2c>)
    6a74:	6940      	ldr	r0, [r0, #20]
    6a76:	f01c fb20 	bl	230ba <z_shell_raw_fprintf>
    6a7a:	68a3      	ldr	r3, [r4, #8]
    6a7c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    6a80:	069b      	lsls	r3, r3, #26
    6a82:	d503      	bpl.n	6a8c <cmd_clear+0x28>
    6a84:	4903      	ldr	r1, [pc, #12]	; (6a94 <cmd_clear+0x30>)
    6a86:	6960      	ldr	r0, [r4, #20]
    6a88:	f01c fb17 	bl	230ba <z_shell_raw_fprintf>
}
    6a8c:	2000      	movs	r0, #0
    6a8e:	bd10      	pop	{r4, pc}
    6a90:	00027bd1 	.word	0x00027bd1
    6a94:	00027bd6 	.word	0x00027bd6

00006a98 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    6a98:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    6a9a:	2901      	cmp	r1, #1
{
    6a9c:	b085      	sub	sp, #20
    6a9e:	4604      	mov	r4, r0
	if (argc != 1) {
    6aa0:	d00c      	beq.n	6abc <cmd_resize+0x24>
		shell_error(shell, "%s:%s%s", argv[0],
    6aa2:	6853      	ldr	r3, [r2, #4]
    6aa4:	9301      	str	r3, [sp, #4]
    6aa6:	4b60      	ldr	r3, [pc, #384]	; (6c28 <cmd_resize+0x190>)
    6aa8:	9300      	str	r3, [sp, #0]
    6aaa:	6813      	ldr	r3, [r2, #0]
    6aac:	4a5f      	ldr	r2, [pc, #380]	; (6c2c <cmd_resize+0x194>)
    6aae:	2101      	movs	r1, #1
    6ab0:	f01b fc70 	bl	22394 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    6ab4:	f06f 0015 	mvn.w	r0, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    6ab8:	b005      	add	sp, #20
    6aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6abc:	6883      	ldr	r3, [r0, #8]
    6abe:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    6ac2:	0699      	lsls	r1, r3, #26
    6ac4:	d503      	bpl.n	6ace <cmd_resize+0x36>
    6ac6:	495a      	ldr	r1, [pc, #360]	; (6c30 <cmd_resize+0x198>)
    6ac8:	6940      	ldr	r0, [r0, #20]
    6aca:	f01c faf6 	bl	230ba <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    6ace:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    6ad2:	4620      	mov	r0, r4
    6ad4:	f7ff fd36 	bl	6544 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    6ad8:	21fa      	movs	r1, #250	; 0xfa
    6ada:	4620      	mov	r0, r4
    6adc:	f7ff fd48 	bl	6570 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    6ae0:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    6ae2:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    6ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ae8:	4629      	mov	r1, r5
    6aea:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    6aee:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    6af2:	f01d f896 	bl	23c22 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    6af6:	494f      	ldr	r1, [pc, #316]	; (6c34 <cmd_resize+0x19c>)
    6af8:	6960      	ldr	r0, [r4, #20]
    6afa:	f01c fade 	bl	230ba <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    6afe:	6960      	ldr	r0, [r4, #20]
    6b00:	f01b fc88 	bl	22414 <z_shell_fprintf_buffer_flush>
    6b04:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    6b08:	6860      	ldr	r0, [r4, #4]
    6b0a:	6803      	ldr	r3, [r0, #0]
    6b0c:	2201      	movs	r2, #1
    6b0e:	691f      	ldr	r7, [r3, #16]
    6b10:	f10d 010b 	add.w	r1, sp, #11
    6b14:	ab03      	add	r3, sp, #12
    6b16:	47b8      	blx	r7
			if (cnt == 0) {
    6b18:	9b03      	ldr	r3, [sp, #12]
    6b1a:	b9f3      	cbnz	r3, 6b5a <cmd_resize+0xc2>
	for (uint16_t i = 0; i < 1000; i++) {
    6b1c:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    6b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6b22:	b2b6      	uxth	r6, r6
    6b24:	f020 fb23 	bl	2716e <z_impl_k_busy_wait>
    6b28:	2e00      	cmp	r6, #0
    6b2a:	d1ed      	bne.n	6b08 <cmd_resize+0x70>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6b2c:	68a3      	ldr	r3, [r4, #8]
    6b2e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    6b32:	069b      	lsls	r3, r3, #26
    6b34:	d503      	bpl.n	6b3e <cmd_resize+0xa6>
    6b36:	4940      	ldr	r1, [pc, #256]	; (6c38 <cmd_resize+0x1a0>)
    6b38:	6960      	ldr	r0, [r4, #20]
    6b3a:	f01c fabe 	bl	230ba <z_shell_raw_fprintf>
		shell->ctx->vt100_ctx.cons.terminal_wid =
    6b3e:	68a3      	ldr	r3, [r4, #8]
    6b40:	2250      	movs	r2, #80	; 0x50
    6b42:	855a      	strh	r2, [r3, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei =
    6b44:	68a3      	ldr	r3, [r4, #8]
    6b46:	2218      	movs	r2, #24
    6b48:	851a      	strh	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    6b4a:	4620      	mov	r0, r4
    6b4c:	4a3b      	ldr	r2, [pc, #236]	; (6c3c <cmd_resize+0x1a4>)
    6b4e:	2103      	movs	r1, #3
    6b50:	f01b fc20 	bl	22394 <shell_fprintf>
    6b54:	f06f 0007 	mvn.w	r0, #7
    6b58:	e7ae      	b.n	6ab8 <cmd_resize+0x20>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    6b5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    6b5e:	68a3      	ldr	r3, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    6b60:	2a1b      	cmp	r2, #27
    6b62:	d053      	beq.n	6c0c <cmd_resize+0x174>
    6b64:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
    6b68:	291b      	cmp	r1, #27
    6b6a:	d1cd      	bne.n	6b08 <cmd_resize+0x70>
			if (c == 'R') { /* End of response from the terminal. */
    6b6c:	2a52      	cmp	r2, #82	; 0x52
    6b6e:	d14d      	bne.n	6c0c <cmd_resize+0x174>
				shell->ctx->temp_buff[buff_idx] = '\0';
    6b70:	195a      	adds	r2, r3, r5
    6b72:	2300      	movs	r3, #0
    6b74:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    6b78:	68a6      	ldr	r6, [r4, #8]
    6b7a:	f896 2143 	ldrb.w	r2, [r6, #323]	; 0x143
    6b7e:	2a5b      	cmp	r2, #91	; 0x5b
    6b80:	d12b      	bne.n	6bda <cmd_resize+0x142>
    6b82:	f206 1043 	addw	r0, r6, #323	; 0x143
				buff_idx = 2U;
    6b86:	2502      	movs	r5, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    6b88:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    6b8c:	462a      	mov	r2, r5
    6b8e:	293b      	cmp	r1, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    6b90:	f105 0501 	add.w	r5, r5, #1
    6b94:	b2ad      	uxth	r5, r5
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    6b96:	d123      	bne.n	6be0 <cmd_resize+0x148>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    6b98:	2aff      	cmp	r2, #255	; 0xff
    6b9a:	d0c7      	beq.n	6b2c <cmd_resize+0x94>
    6b9c:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    6ba0:	fa16 f182 	uxtah	r1, r6, r2
	*x = 0U;
    6ba4:	2200      	movs	r2, #0
				while (shell->ctx->temp_buff[buff_idx]
    6ba6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
							     != '\0') {
    6baa:	bb18      	cbnz	r0, 6bf4 <cmd_resize+0x15c>
				shell->ctx->temp_buff[0] = 0;
    6bac:	f886 0142 	strb.w	r0, [r6, #322]	; 0x142
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
    6bb0:	2afa      	cmp	r2, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    6bb2:	68a1      	ldr	r1, [r4, #8]
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
    6bb4:	bf28      	it	cs
    6bb6:	22fa      	movcs	r2, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    6bb8:	854a      	strh	r2, [r1, #42]	; 0x2a
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
    6bba:	2bfa      	cmp	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    6bbc:	68a2      	ldr	r2, [r4, #8]
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
    6bbe:	bf28      	it	cs
    6bc0:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    6bc2:	8513      	strh	r3, [r2, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6bc4:	68a3      	ldr	r3, [r4, #8]
    6bc6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    6bca:	069a      	lsls	r2, r3, #26
    6bcc:	d503      	bpl.n	6bd6 <cmd_resize+0x13e>
    6bce:	491a      	ldr	r1, [pc, #104]	; (6c38 <cmd_resize+0x1a0>)
    6bd0:	6960      	ldr	r0, [r4, #20]
    6bd2:	f01c fa72 	bl	230ba <z_shell_raw_fprintf>
	return 0;
    6bd6:	2000      	movs	r0, #0
    6bd8:	e76e      	b.n	6ab8 <cmd_resize+0x20>
					shell->ctx->temp_buff[0] = 0;
    6bda:	f886 3142 	strb.w	r3, [r6, #322]	; 0x142
					return -EIO;
    6bde:	e7a5      	b.n	6b2c <cmd_resize+0x94>
					*y = *y * 10U +
    6be0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6be4:	3930      	subs	r1, #48	; 0x30
    6be6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
					if (buff_idx >=
    6bea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
					*y = *y * 10U +
    6bee:	b28b      	uxth	r3, r1
					if (buff_idx >=
    6bf0:	d1ca      	bne.n	6b88 <cmd_resize+0xf0>
    6bf2:	e79b      	b.n	6b2c <cmd_resize+0x94>
					(shell->ctx->temp_buff[buff_idx++] -
    6bf4:	3501      	adds	r5, #1
					*x = *x * 10U +
    6bf6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    6bfa:	b2ad      	uxth	r5, r5
					*x = *x * 10U +
    6bfc:	3830      	subs	r0, #48	; 0x30
    6bfe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
					if (buff_idx >=
    6c02:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
					*x = *x * 10U +
    6c06:	b282      	uxth	r2, r0
					if (buff_idx >=
    6c08:	d1cd      	bne.n	6ba6 <cmd_resize+0x10e>
    6c0a:	e78f      	b.n	6b2c <cmd_resize+0x94>
			shell->ctx->temp_buff[buff_idx] = c;
    6c0c:	442b      	add	r3, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    6c0e:	3501      	adds	r5, #1
    6c10:	b2ad      	uxth	r5, r5
    6c12:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    6c14:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    6c18:	f67f af76 	bls.w	6b08 <cmd_resize+0x70>
				shell->ctx->temp_buff[0] = 0;
    6c1c:	68a3      	ldr	r3, [r4, #8]
    6c1e:	2200      	movs	r2, #0
    6c20:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
				return -ENOMEM;
    6c24:	e782      	b.n	6b2c <cmd_resize+0x94>
    6c26:	bf00      	nop
    6c28:	0002aecc 	.word	0x0002aecc
    6c2c:	0002aec3 	.word	0x0002aec3
    6c30:	00027bdc 	.word	0x00027bdc
    6c34:	0002af2c 	.word	0x0002af2c
    6c38:	00027be0 	.word	0x00027be0
    6c3c:	0002aef2 	.word	0x0002aef2

00006c40 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    6c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c44:	4607      	mov	r7, r0
    6c46:	b089      	sub	sp, #36	; 0x24
    6c48:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    6c4a:	4689      	mov	r9, r1
    6c4c:	b921      	cbnz	r1, 6c58 <z_shell_wildcard_process+0x18>
		return ret_val;
    6c4e:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    6c50:	4620      	mov	r0, r4
    6c52:	b009      	add	sp, #36	; 0x24
    6c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    6c58:	4610      	mov	r0, r2
    6c5a:	f01c fb5b 	bl	23314 <z_shell_has_wildcard>
    6c5e:	2800      	cmp	r0, #0
    6c60:	d0f5      	beq.n	6c4e <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    6c62:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    6c66:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    6c68:	2402      	movs	r4, #2
    6c6a:	e024      	b.n	6cb6 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    6c6c:	465c      	mov	r4, fp
    6c6e:	e03c      	b.n	6cea <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    6c70:	4629      	mov	r1, r5
    6c72:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    6c76:	f01c ff26 	bl	23ac6 <strstr>
	if (!completion_addr) {
    6c7a:	4606      	mov	r6, r0
    6c7c:	2800      	cmp	r0, #0
    6c7e:	d04c      	beq.n	6d1a <z_shell_wildcard_process+0xda>
    6c80:	f01c ff6d 	bl	23b5e <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    6c84:	b282      	uxth	r2, r0
    6c86:	1c60      	adds	r0, r4, #1
    6c88:	3201      	adds	r2, #1
    6c8a:	4631      	mov	r1, r6
    6c8c:	4430      	add	r0, r6
    6c8e:	f01c ffa6 	bl	23bde <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    6c92:	4622      	mov	r2, r4
    6c94:	4659      	mov	r1, fp
    6c96:	4630      	mov	r0, r6
    6c98:	f01c ffb8 	bl	23c0c <memcpy>
	completion_addr[cmd_len] = ' ';
    6c9c:	f04f 0320 	mov.w	r3, #32
    6ca0:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    6ca2:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    6ca6:	3301      	adds	r3, #1
    6ca8:	441c      	add	r4, r3
    6caa:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    6cae:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    6cb2:	2400      	movs	r4, #0
    6cb4:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    6cb6:	1c4b      	adds	r3, r1, #1
    6cb8:	aa03      	add	r2, sp, #12
    6cba:	4648      	mov	r0, r9
    6cbc:	9301      	str	r3, [sp, #4]
    6cbe:	f7ff fbf5 	bl	64ac <z_shell_cmd_get>
    6cc2:	4606      	mov	r6, r0
    6cc4:	b1e8      	cbz	r0, 6d02 <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    6cc6:	6831      	ldr	r1, [r6, #0]
    6cc8:	2200      	movs	r2, #0
    6cca:	4628      	mov	r0, r5
    6ccc:	f01b f8e3 	bl	21e96 <fnmatch>
    6cd0:	2800      	cmp	r0, #0
    6cd2:	d1ef      	bne.n	6cb4 <z_shell_wildcard_process+0x74>
					      entry->syntax, pattern);
    6cd4:	f8d6 b000 	ldr.w	fp, [r6]
			ret_val = command_add(shell->ctx->temp_buff,
    6cd8:	f8d7 a008 	ldr.w	sl, [r7, #8]
    6cdc:	f1bb 0f00 	cmp.w	fp, #0
    6ce0:	d0c4      	beq.n	6c6c <z_shell_wildcard_process+0x2c>
    6ce2:	4658      	mov	r0, fp
    6ce4:	f01c ff3b 	bl	23b5e <strlen>
    6ce8:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    6cea:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    6cee:	4423      	add	r3, r4
    6cf0:	2bff      	cmp	r3, #255	; 0xff
    6cf2:	ddbd      	ble.n	6c70 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    6cf4:	4a0a      	ldr	r2, [pc, #40]	; (6d20 <z_shell_wildcard_process+0xe0>)
    6cf6:	462b      	mov	r3, r5
    6cf8:	2103      	movs	r1, #3
    6cfa:	4638      	mov	r0, r7
    6cfc:	f01b ff80 	bl	22c00 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    6d00:	2401      	movs	r4, #1
	if (cnt > 0) {
    6d02:	f1b8 0f00 	cmp.w	r8, #0
    6d06:	d0a3      	beq.n	6c50 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    6d08:	68b8      	ldr	r0, [r7, #8]
    6d0a:	462a      	mov	r2, r5
    6d0c:	f100 0140 	add.w	r1, r0, #64	; 0x40
    6d10:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    6d14:	f01b fcb7 	bl	22686 <z_shell_pattern_remove>
	return ret_val;
    6d18:	e79a      	b.n	6c50 <z_shell_wildcard_process+0x10>
    6d1a:	2402      	movs	r4, #2
    6d1c:	e7f1      	b.n	6d02 <z_shell_wildcard_process+0xc2>
    6d1e:	bf00      	nop
    6d20:	0002b306 	.word	0x0002b306

00006d24 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d28:	4605      	mov	r5, r0
	__asm__ volatile(
    6d2a:	f04f 0320 	mov.w	r3, #32
    6d2e:	f3ef 8611 	mrs	r6, BASEPRI
    6d32:	f383 8812 	msr	BASEPRI_MAX, r3
    6d36:	f3bf 8f6f 	isb	sy
	return list->head;
    6d3a:	4b0e      	ldr	r3, [pc, #56]	; (6d74 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    6d3c:	4f0e      	ldr	r7, [pc, #56]	; (6d78 <pm_state_notify+0x54>)
    6d3e:	681c      	ldr	r4, [r3, #0]
    6d40:	f8df 8038 	ldr.w	r8, [pc, #56]	; 6d7c <pm_state_notify+0x58>
    6d44:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6d48:	b92c      	cbnz	r4, 6d56 <pm_state_notify+0x32>
	__asm__ volatile(
    6d4a:	f386 8811 	msr	BASEPRI, r6
    6d4e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    6d56:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    6d5a:	2d00      	cmp	r5, #0
    6d5c:	bf18      	it	ne
    6d5e:	4613      	movne	r3, r2
		if (callback) {
    6d60:	b12b      	cbz	r3, 6d6e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    6d62:	f898 2014 	ldrb.w	r2, [r8, #20]
    6d66:	fb09 f202 	mul.w	r2, r9, r2
    6d6a:	5cb8      	ldrb	r0, [r7, r2]
    6d6c:	4798      	blx	r3
	return node->next;
    6d6e:	6824      	ldr	r4, [r4, #0]
    6d70:	e7ea      	b.n	6d48 <pm_state_notify+0x24>
    6d72:	bf00      	nop
    6d74:	2000255c 	.word	0x2000255c
    6d78:	20002550 	.word	0x20002550
    6d7c:	20003a90 	.word	0x20003a90

00006d80 <pm_system_resume>:

void pm_system_resume(void)
{
    6d80:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    6d82:	4b19      	ldr	r3, [pc, #100]	; (6de8 <pm_system_resume+0x68>)
    6d84:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d86:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    6d8a:	f004 031f 	and.w	r3, r4, #31
    6d8e:	2201      	movs	r2, #1
    6d90:	409a      	lsls	r2, r3
    6d92:	4b16      	ldr	r3, [pc, #88]	; (6dec <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6d94:	0961      	lsrs	r1, r4, #5
    6d96:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6d9a:	43d0      	mvns	r0, r2
    6d9c:	e853 1f00 	ldrex	r1, [r3]
    6da0:	ea01 0500 	and.w	r5, r1, r0
    6da4:	e843 5600 	strex	r6, r5, [r3]
    6da8:	2e00      	cmp	r6, #0
    6daa:	d1f7      	bne.n	6d9c <pm_system_resume+0x1c>
    6dac:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    6db0:	420a      	tst	r2, r1
    6db2:	d013      	beq.n	6ddc <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    6db4:	4b0e      	ldr	r3, [pc, #56]	; (6df0 <pm_system_resume+0x70>)
    6db6:	4d0f      	ldr	r5, [pc, #60]	; (6df4 <pm_system_resume+0x74>)
    6db8:	b18b      	cbz	r3, 6dde <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    6dba:	230c      	movs	r3, #12
    6dbc:	4363      	muls	r3, r4
    6dbe:	18ea      	adds	r2, r5, r3
    6dc0:	5ce8      	ldrb	r0, [r5, r3]
    6dc2:	7851      	ldrb	r1, [r2, #1]
    6dc4:	f01c ff54 	bl	23c70 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    6dc8:	2000      	movs	r0, #0
    6dca:	f7ff ffab 	bl	6d24 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    6dce:	230c      	movs	r3, #12
    6dd0:	435c      	muls	r4, r3
    6dd2:	192a      	adds	r2, r5, r4
    6dd4:	2300      	movs	r3, #0
    6dd6:	512b      	str	r3, [r5, r4]
    6dd8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    6ddc:	bd70      	pop	{r4, r5, r6, pc}
    6dde:	f383 8811 	msr	BASEPRI, r3
    6de2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    6de6:	e7ef      	b.n	6dc8 <pm_system_resume+0x48>
    6de8:	20003a90 	.word	0x20003a90
    6dec:	20002564 	.word	0x20002564
    6df0:	00023c71 	.word	0x00023c71
    6df4:	20002550 	.word	0x20002550

00006df8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    6df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    6dfc:	4b35      	ldr	r3, [pc, #212]	; (6ed4 <pm_system_suspend+0xdc>)
{
    6dfe:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    6e00:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    6e02:	f04f 0320 	mov.w	r3, #32
    6e06:	f3ef 8811 	mrs	r8, BASEPRI
    6e0a:	f383 8812 	msr	BASEPRI_MAX, r3
    6e0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    6e12:	240c      	movs	r4, #12
    6e14:	4b30      	ldr	r3, [pc, #192]	; (6ed8 <pm_system_suspend+0xe0>)
    6e16:	4e31      	ldr	r6, [pc, #196]	; (6edc <pm_system_suspend+0xe4>)
    6e18:	436c      	muls	r4, r5
    6e1a:	191a      	adds	r2, r3, r4
    6e1c:	5d19      	ldrb	r1, [r3, r4]
    6e1e:	2900      	cmp	r1, #0
    6e20:	d04c      	beq.n	6ebc <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    6e22:	ca07      	ldmia	r2, {r0, r1, r2}
    6e24:	eb06 0c04 	add.w	ip, r6, r4
    6e28:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    6e2c:	2200      	movs	r2, #0
    6e2e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    6e30:	f388 8811 	msr	BASEPRI, r8
    6e34:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    6e38:	230c      	movs	r3, #12
    6e3a:	436b      	muls	r3, r5
    6e3c:	18f2      	adds	r2, r6, r3
    6e3e:	5cf0      	ldrb	r0, [r6, r3]
    6e40:	2800      	cmp	r0, #0
    6e42:	d039      	beq.n	6eb8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    6e44:	1c7b      	adds	r3, r7, #1
    6e46:	d010      	beq.n	6e6a <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    6e48:	f8d2 c008 	ldr.w	ip, [r2, #8]
    6e4c:	4c24      	ldr	r4, [pc, #144]	; (6ee0 <pm_system_suspend+0xe8>)
    6e4e:	4a25      	ldr	r2, [pc, #148]	; (6ee4 <pm_system_suspend+0xec>)
    6e50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6e54:	2100      	movs	r1, #0
    6e56:	fbec 4100 	umlal	r4, r1, ip, r0
    6e5a:	2300      	movs	r3, #0
    6e5c:	4620      	mov	r0, r4
    6e5e:	f7f9 fd5d 	bl	91c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    6e62:	2101      	movs	r1, #1
    6e64:	1a38      	subs	r0, r7, r0
    6e66:	f020 f960 	bl	2712a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    6e6a:	f019 fbab 	bl	205c4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    6e6e:	2001      	movs	r0, #1
    6e70:	f7ff ff58 	bl	6d24 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6e74:	f3bf 8f5b 	dmb	ish
    6e78:	4b1b      	ldr	r3, [pc, #108]	; (6ee8 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6e7a:	096a      	lsrs	r2, r5, #5
    6e7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    6e80:	f005 011f 	and.w	r1, r5, #31
    6e84:	2201      	movs	r2, #1
    6e86:	408a      	lsls	r2, r1
    6e88:	e853 0f00 	ldrex	r0, [r3]
    6e8c:	4310      	orrs	r0, r2
    6e8e:	e843 0100 	strex	r1, r0, [r3]
    6e92:	2900      	cmp	r1, #0
    6e94:	d1f8      	bne.n	6e88 <pm_system_suspend+0x90>
    6e96:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    6e9a:	4b14      	ldr	r3, [pc, #80]	; (6eec <pm_system_suspend+0xf4>)
    6e9c:	b13b      	cbz	r3, 6eae <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    6e9e:	230c      	movs	r3, #12
    6ea0:	fb03 f005 	mul.w	r0, r3, r5
    6ea4:	1833      	adds	r3, r6, r0
    6ea6:	5c30      	ldrb	r0, [r6, r0]
    6ea8:	7859      	ldrb	r1, [r3, #1]
    6eaa:	f01c fed5 	bl	23c58 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    6eae:	f7ff ff67 	bl	6d80 <pm_system_resume>
	k_sched_unlock();
    6eb2:	f019 fb9b 	bl	205ec <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    6eb6:	2001      	movs	r0, #1
}
    6eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    6ebc:	4601      	mov	r1, r0
    6ebe:	4628      	mov	r0, r5
    6ec0:	f000 f816 	bl	6ef0 <pm_policy_next_state>
		if (info != NULL) {
    6ec4:	2800      	cmp	r0, #0
    6ec6:	d0b3      	beq.n	6e30 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    6ec8:	c807      	ldmia	r0, {r0, r1, r2}
    6eca:	4434      	add	r4, r6
    6ecc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    6ed0:	e7ae      	b.n	6e30 <pm_system_suspend+0x38>
    6ed2:	bf00      	nop
    6ed4:	20003a90 	.word	0x20003a90
    6ed8:	20002544 	.word	0x20002544
    6edc:	20002550 	.word	0x20002550
    6ee0:	000f423f 	.word	0x000f423f
    6ee4:	000f4240 	.word	0x000f4240
    6ee8:	20002564 	.word	0x20002564
    6eec:	00023c59 	.word	0x00023c59

00006ef0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    6ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ef4:	b085      	sub	sp, #20
    6ef6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    6ef8:	a903      	add	r1, sp, #12
    6efa:	f000 f843 	bl	6f84 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    6efe:	4b1e      	ldr	r3, [pc, #120]	; (6f78 <pm_policy_next_state+0x88>)
    6f00:	9d03      	ldr	r5, [sp, #12]
    6f02:	f8d3 a000 	ldr.w	sl, [r3]
    6f06:	f8df 8074 	ldr.w	r8, [pc, #116]	; 6f7c <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    6f0a:	1e43      	subs	r3, r0, #1
    6f0c:	b21b      	sxth	r3, r3
    6f0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    6f12:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    6f14:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    6f18:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    6f1c:	f04f 0b00 	mov.w	fp, #0
    6f20:	b924      	cbnz	r4, 6f2c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    6f22:	46a1      	mov	r9, r4
}
    6f24:	4648      	mov	r0, r9
    6f26:	b005      	add	sp, #20
    6f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f2c:	6868      	ldr	r0, [r5, #4]
    6f2e:	4a14      	ldr	r2, [pc, #80]	; (6f80 <pm_policy_next_state+0x90>)
    6f30:	46c4      	mov	ip, r8
    6f32:	4659      	mov	r1, fp
    6f34:	fbe0 c107 	umlal	ip, r1, r0, r7
    6f38:	2300      	movs	r3, #0
    6f3a:	4660      	mov	r0, ip
    6f3c:	f7f9 fcee 	bl	91c <__aeabi_uldivmod>
    6f40:	9001      	str	r0, [sp, #4]
    6f42:	68a8      	ldr	r0, [r5, #8]
    6f44:	4a0e      	ldr	r2, [pc, #56]	; (6f80 <pm_policy_next_state+0x90>)
    6f46:	46c4      	mov	ip, r8
    6f48:	4659      	mov	r1, fp
    6f4a:	fbe0 c107 	umlal	ip, r1, r0, r7
    6f4e:	2300      	movs	r3, #0
    6f50:	4660      	mov	r0, ip
    6f52:	f7f9 fce3 	bl	91c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    6f56:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    6f5a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    6f5c:	d001      	beq.n	6f62 <pm_policy_next_state+0x72>
    6f5e:	4582      	cmp	sl, r0
    6f60:	d905      	bls.n	6f6e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    6f62:	1c73      	adds	r3, r6, #1
    6f64:	d0de      	beq.n	6f24 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    6f66:	9b01      	ldr	r3, [sp, #4]
    6f68:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    6f6a:	42b0      	cmp	r0, r6
    6f6c:	d9da      	bls.n	6f24 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    6f6e:	3c01      	subs	r4, #1
    6f70:	b2a4      	uxth	r4, r4
    6f72:	3d0c      	subs	r5, #12
    6f74:	e7d4      	b.n	6f20 <pm_policy_next_state+0x30>
    6f76:	bf00      	nop
    6f78:	20000234 	.word	0x20000234
    6f7c:	000f423f 	.word	0x000f423f
    6f80:	000f4240 	.word	0x000f4240

00006f84 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    6f84:	b908      	cbnz	r0, 6f8a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    6f86:	4b02      	ldr	r3, [pc, #8]	; (6f90 <pm_state_cpu_get_all+0xc>)
    6f88:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    6f8a:	2000      	movs	r0, #0
    6f8c:	4770      	bx	lr
    6f8e:	bf00      	nop
    6f90:	00028248 	.word	0x00028248

00006f94 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    6f94:	4904      	ldr	r1, [pc, #16]	; (6fa8 <sub_bytes+0x14>)
    6f96:	1e43      	subs	r3, r0, #1
    6f98:	300f      	adds	r0, #15
    6f9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6f9e:	5c8a      	ldrb	r2, [r1, r2]
    6fa0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6fa2:	4283      	cmp	r3, r0
    6fa4:	d1f9      	bne.n	6f9a <sub_bytes+0x6>
	}
}
    6fa6:	4770      	bx	lr
    6fa8:	0002b358 	.word	0x0002b358

00006fac <tc_aes128_set_encrypt_key>:
{
    6fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6fae:	4e26      	ldr	r6, [pc, #152]	; (7048 <tc_aes128_set_encrypt_key+0x9c>)
{
    6fb0:	4607      	mov	r7, r0
    6fb2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6fb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    6fb6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    6fb8:	ad01      	add	r5, sp, #4
    6fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6fbc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6fc0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6fc4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    6fc8:	4638      	mov	r0, r7
    6fca:	2f00      	cmp	r7, #0
    6fcc:	d038      	beq.n	7040 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    6fce:	2c00      	cmp	r4, #0
    6fd0:	d038      	beq.n	7044 <tc_aes128_set_encrypt_key+0x98>
    6fd2:	1f38      	subs	r0, r7, #4
    6fd4:	4621      	mov	r1, r4
    6fd6:	4602      	mov	r2, r0
    6fd8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6fda:	784b      	ldrb	r3, [r1, #1]
    6fdc:	780d      	ldrb	r5, [r1, #0]
    6fde:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6fe0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6fe4:	78cd      	ldrb	r5, [r1, #3]
    6fe6:	432b      	orrs	r3, r5
    6fe8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    6fea:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6fec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6ff0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6ff2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    6ff6:	d1f0      	bne.n	6fda <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6ff8:	4c14      	ldr	r4, [pc, #80]	; (704c <tc_aes128_set_encrypt_key+0xa0>)
    6ffa:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    6ffc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    6ffe:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    7000:	d116      	bne.n	7030 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    7002:	f3c3 4207 	ubfx	r2, r3, #16, #8
    7006:	5ca5      	ldrb	r5, [r4, r2]
    7008:	0e1a      	lsrs	r2, r3, #24
    700a:	5ca2      	ldrb	r2, [r4, r2]
    700c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    7010:	f3c3 2507 	ubfx	r5, r3, #8, #8
    7014:	b2db      	uxtb	r3, r3
    7016:	5d65      	ldrb	r5, [r4, r5]
    7018:	5ce3      	ldrb	r3, [r4, r3]
    701a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    701e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    7022:	f021 0303 	bic.w	r3, r1, #3
    7026:	3330      	adds	r3, #48	; 0x30
    7028:	446b      	add	r3, sp
    702a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    702e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    7030:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    7034:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    7036:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    7038:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    703a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    703c:	d1de      	bne.n	6ffc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    703e:	2001      	movs	r0, #1
}
    7040:	b00d      	add	sp, #52	; 0x34
    7042:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    7044:	4620      	mov	r0, r4
    7046:	e7fb      	b.n	7040 <tc_aes128_set_encrypt_key+0x94>
    7048:	00027b38 	.word	0x00027b38
    704c:	0002b358 	.word	0x0002b358

00007050 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    7050:	4901      	ldr	r1, [pc, #4]	; (7058 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    7052:	2210      	movs	r2, #16
	str	r2, [r1]
    7054:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    7056:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    7058:	e000ed10 	.word	0xe000ed10

0000705c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    705c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    705e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    7060:	f380 8811 	msr	BASEPRI, r0
	isb
    7064:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    7068:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    706c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    706e:	b662      	cpsie	i
	isb
    7070:	f3bf 8f6f 	isb	sy

	bx	lr
    7074:	4770      	bx	lr
    7076:	bf00      	nop

00007078 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    7078:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    707a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    707c:	f381 8811 	msr	BASEPRI, r1

	wfe
    7080:	bf20      	wfe

	msr	BASEPRI, r0
    7082:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    7086:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    7088:	4770      	bx	lr
    708a:	bf00      	nop

0000708c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7090:	4680      	mov	r8, r0
    7092:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    7094:	460c      	mov	r4, r1
    7096:	2900      	cmp	r1, #0
    7098:	d060      	beq.n	715c <z_arm_fatal_error+0xd0>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    709a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 716c <z_arm_fatal_error+0xe0>
    709e:	f8da 3000 	ldr.w	r3, [sl]
    70a2:	0758      	lsls	r0, r3, #29
    70a4:	d05a      	beq.n	715c <z_arm_fatal_error+0xd0>
    70a6:	466d      	mov	r5, sp
    70a8:	b08a      	sub	sp, #40	; 0x28
    70aa:	e9d1 0100 	ldrd	r0, r1, [r1]
    70ae:	68a3      	ldr	r3, [r4, #8]
    70b0:	466a      	mov	r2, sp
    70b2:	4e2f      	ldr	r6, [pc, #188]	; (7170 <z_arm_fatal_error+0xe4>)
    70b4:	6156      	str	r6, [r2, #20]
    70b6:	4e2f      	ldr	r6, [pc, #188]	; (7174 <z_arm_fatal_error+0xe8>)
    70b8:	f04f 0906 	mov.w	r9, #6
    70bc:	e9c2 6006 	strd	r6, r0, [r2, #24]
    70c0:	e9c2 1308 	strd	r1, r3, [r2, #32]
    70c4:	f842 9f10 	str.w	r9, [r2, #16]!
    70c8:	2300      	movs	r3, #0
    70ca:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    70ce:	4650      	mov	r0, sl
    70d0:	f7fd f83e 	bl	4150 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    70d4:	f8da 3000 	ldr.w	r3, [sl]
    70d8:	0759      	lsls	r1, r3, #29
    70da:	46ad      	mov	sp, r5
    70dc:	d03e      	beq.n	715c <z_arm_fatal_error+0xd0>
    70de:	b08a      	sub	sp, #40	; 0x28
    70e0:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    70e4:	6963      	ldr	r3, [r4, #20]
    70e6:	466a      	mov	r2, sp
    70e8:	f8df c08c 	ldr.w	ip, [pc, #140]	; 7178 <z_arm_fatal_error+0xec>
    70ec:	6253      	str	r3, [r2, #36]	; 0x24
    70ee:	e9c2 c605 	strd	ip, r6, [r2, #20]
    70f2:	e9c2 0107 	strd	r0, r1, [r2, #28]
    70f6:	f842 9f10 	str.w	r9, [r2, #16]!
    70fa:	2300      	movs	r3, #0
    70fc:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    7100:	4650      	mov	r0, sl
    7102:	f7fd f825 	bl	4150 <z_impl_z_log_msg_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    7106:	f8da 3000 	ldr.w	r3, [sl]
    710a:	075a      	lsls	r2, r3, #29
    710c:	46ad      	mov	sp, r5
    710e:	d025      	beq.n	715c <z_arm_fatal_error+0xd0>
    7110:	b088      	sub	sp, #32
    7112:	69e3      	ldr	r3, [r4, #28]
    7114:	466a      	mov	r2, sp
    7116:	4919      	ldr	r1, [pc, #100]	; (717c <z_arm_fatal_error+0xf0>)
    7118:	61d3      	str	r3, [r2, #28]
    711a:	f04f 0904 	mov.w	r9, #4
    711e:	e9c2 1605 	strd	r1, r6, [r2, #20]
    7122:	f842 9f10 	str.w	r9, [r2, #16]!
    7126:	2300      	movs	r3, #0
    7128:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    712c:	4650      	mov	r0, sl
    712e:	f7fd f80f 	bl	4150 <z_impl_z_log_msg_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7132:	f8da 3000 	ldr.w	r3, [sl]
    7136:	075b      	lsls	r3, r3, #29
    7138:	46ad      	mov	sp, r5
    713a:	d00f      	beq.n	715c <z_arm_fatal_error+0xd0>
    713c:	b088      	sub	sp, #32
    713e:	69a3      	ldr	r3, [r4, #24]
    7140:	466a      	mov	r2, sp
    7142:	490f      	ldr	r1, [pc, #60]	; (7180 <z_arm_fatal_error+0xf4>)
    7144:	61d3      	str	r3, [r2, #28]
    7146:	e9c2 1605 	strd	r1, r6, [r2, #20]
    714a:	f842 9f10 	str.w	r9, [r2, #16]!
    714e:	2300      	movs	r3, #0
    7150:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7154:	4650      	mov	r0, sl
    7156:	f7fc fffb 	bl	4150 <z_impl_z_log_msg_static_create>
    715a:	46ad      	mov	sp, r5
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    715c:	4621      	mov	r1, r4
    715e:	4640      	mov	r0, r8
    7160:	f018 f974 	bl	1f44c <z_fatal_error>
}
    7164:	46bd      	mov	sp, r7
    7166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    716a:	bf00      	nop
    716c:	20000b38 	.word	0x20000b38
    7170:	0002b458 	.word	0x0002b458
    7174:	0002b503 	.word	0x0002b503
    7178:	0002b48b 	.word	0x0002b48b
    717c:	0002b4be 	.word	0x0002b4be
    7180:	0002b4d1 	.word	0x0002b4d1

00007184 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    7184:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    7186:	2800      	cmp	r0, #0
    7188:	db07      	blt.n	719a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    718a:	4a04      	ldr	r2, [pc, #16]	; (719c <arch_irq_enable+0x18>)
    718c:	0941      	lsrs	r1, r0, #5
    718e:	2301      	movs	r3, #1
    7190:	f000 001f 	and.w	r0, r0, #31
    7194:	4083      	lsls	r3, r0
    7196:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    719a:	4770      	bx	lr
    719c:	e000e100 	.word	0xe000e100

000071a0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    71a0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    71a2:	2800      	cmp	r0, #0
    71a4:	db0c      	blt.n	71c0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71a6:	0943      	lsrs	r3, r0, #5
    71a8:	4906      	ldr	r1, [pc, #24]	; (71c4 <arch_irq_disable+0x24>)
    71aa:	f000 001f 	and.w	r0, r0, #31
    71ae:	3320      	adds	r3, #32
    71b0:	2201      	movs	r2, #1
    71b2:	4082      	lsls	r2, r0
    71b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    71b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    71bc:	f3bf 8f6f 	isb	sy
}
    71c0:	4770      	bx	lr
    71c2:	bf00      	nop
    71c4:	e000e100 	.word	0xe000e100

000071c8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    71c8:	4b05      	ldr	r3, [pc, #20]	; (71e0 <arch_irq_is_enabled+0x18>)
    71ca:	0942      	lsrs	r2, r0, #5
    71cc:	f000 001f 	and.w	r0, r0, #31
    71d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    71d4:	2301      	movs	r3, #1
    71d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    71da:	4010      	ands	r0, r2
    71dc:	4770      	bx	lr
    71de:	bf00      	nop
    71e0:	e000e100 	.word	0xe000e100

000071e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    71e4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    71e6:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    71e8:	bfa8      	it	ge
    71ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    71ee:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    71f2:	bfb8      	it	lt
    71f4:	4b06      	ldrlt	r3, [pc, #24]	; (7210 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    71f6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    71fa:	bfac      	ite	ge
    71fc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7200:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7204:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7206:	bfb4      	ite	lt
    7208:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    720a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    720e:	4770      	bx	lr
    7210:	e000ed14 	.word	0xe000ed14

00007214 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    7214:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    7216:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    7218:	4b04      	ldr	r3, [pc, #16]	; (722c <_arch_isr_direct_pm+0x18>)
    721a:	699a      	ldr	r2, [r3, #24]
    721c:	b11a      	cbz	r2, 7226 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    721e:	2200      	movs	r2, #0
    7220:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    7222:	f01f fc5e 	bl	26ae2 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    7226:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    7228:	bd08      	pop	{r3, pc}
    722a:	bf00      	nop
    722c:	20003a90 	.word	0x20003a90

00007230 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    7230:	bf30      	wfi
    b z_SysNmiOnReset
    7232:	f7ff bffd 	b.w	7230 <z_SysNmiOnReset>
    7236:	bf00      	nop

00007238 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7238:	4a0f      	ldr	r2, [pc, #60]	; (7278 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    723a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    723c:	4b0f      	ldr	r3, [pc, #60]	; (727c <z_arm_prep_c+0x44>)
    723e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    7242:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    7244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7248:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    724c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7250:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    7254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    7258:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    725c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    7260:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    7264:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    7268:	f018 f9c4 	bl	1f5f4 <z_bss_zero>
	z_data_copy();
    726c:	f019 fafe 	bl	2086c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    7270:	f000 fcec 	bl	7c4c <z_arm_interrupt_init>
	z_cstart();
    7274:	f018 fa06 	bl	1f684 <z_cstart>
    7278:	00000000 	.word	0x00000000
    727c:	e000ed00 	.word	0xe000ed00

00007280 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    7280:	4a0a      	ldr	r2, [pc, #40]	; (72ac <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    7282:	490b      	ldr	r1, [pc, #44]	; (72b0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    7284:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    7286:	6809      	ldr	r1, [r1, #0]
    7288:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    728c:	4909      	ldr	r1, [pc, #36]	; (72b4 <arch_swap+0x34>)
	_current->arch.basepri = key;
    728e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7292:	684b      	ldr	r3, [r1, #4]
    7294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7298:	604b      	str	r3, [r1, #4]
    729a:	2300      	movs	r3, #0
    729c:	f383 8811 	msr	BASEPRI, r3
    72a0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    72a4:	6893      	ldr	r3, [r2, #8]
}
    72a6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    72aa:	4770      	bx	lr
    72ac:	20003a90 	.word	0x20003a90
    72b0:	00029cc4 	.word	0x00029cc4
    72b4:	e000ed00 	.word	0xe000ed00

000072b8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    72b8:	4913      	ldr	r1, [pc, #76]	; (7308 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    72ba:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    72bc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    72c0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    72c2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    72c6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    72ca:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    72cc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    72d0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    72d4:	4f0d      	ldr	r7, [pc, #52]	; (730c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    72d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    72da:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    72dc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    72de:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    72e0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    72e4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    72e6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    72ea:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    72ee:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    72f0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    72f2:	f000 fcf7 	bl	7ce4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    72f6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    72fa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    72fe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    7302:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    7306:	4770      	bx	lr
    ldr r1, =_kernel
    7308:	20003a90 	.word	0x20003a90
    ldr v4, =_SCS_ICSR
    730c:	e000ed04 	.word	0xe000ed04

00007310 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    7310:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    7314:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    7316:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    731a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    731e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    7320:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    7324:	2902      	cmp	r1, #2
    beq _oops
    7326:	d0ff      	beq.n	7328 <_oops>

00007328 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    7328:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    732a:	f01c face 	bl	238ca <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    732e:	bd01      	pop	{r0, pc}

00007330 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    7330:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    7334:	9b00      	ldr	r3, [sp, #0]
    7336:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    733a:	490a      	ldr	r1, [pc, #40]	; (7364 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    733c:	9b01      	ldr	r3, [sp, #4]
    733e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    7342:	9b02      	ldr	r3, [sp, #8]
    7344:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    7348:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    734c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    7350:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    7354:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    7358:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    735a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    735c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    735e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    7362:	4770      	bx	lr
    7364:	00020f2d 	.word	0x00020f2d

00007368 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    7368:	4a0a      	ldr	r2, [pc, #40]	; (7394 <z_check_thread_stack_fail+0x2c>)
{
    736a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    736c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    736e:	b178      	cbz	r0, 7390 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    7370:	f113 0f16 	cmn.w	r3, #22
    7374:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    7378:	d005      	beq.n	7386 <z_check_thread_stack_fail+0x1e>
    737a:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    737e:	429a      	cmp	r2, r3
    7380:	d805      	bhi.n	738e <z_check_thread_stack_fail+0x26>
    7382:	4283      	cmp	r3, r0
    7384:	d203      	bcs.n	738e <z_check_thread_stack_fail+0x26>
		return 0;
    7386:	4281      	cmp	r1, r0
    7388:	bf28      	it	cs
    738a:	2000      	movcs	r0, #0
    738c:	4770      	bx	lr
    738e:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    7390:	4770      	bx	lr
    7392:	bf00      	nop
    7394:	20003a90 	.word	0x20003a90

00007398 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    7398:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    739a:	4b09      	ldr	r3, [pc, #36]	; (73c0 <arch_switch_to_main_thread+0x28>)
    739c:	6098      	str	r0, [r3, #8]
{
    739e:	460d      	mov	r5, r1
    73a0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    73a2:	f000 fc9f 	bl	7ce4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    73a6:	4620      	mov	r0, r4
    73a8:	f385 8809 	msr	PSP, r5
    73ac:	2100      	movs	r1, #0
    73ae:	b663      	cpsie	if
    73b0:	f381 8811 	msr	BASEPRI, r1
    73b4:	f3bf 8f6f 	isb	sy
    73b8:	2200      	movs	r2, #0
    73ba:	2300      	movs	r3, #0
    73bc:	f019 fdb6 	bl	20f2c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    73c0:	20003a90 	.word	0x20003a90

000073c4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    73c4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    73c6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    73c8:	4a0b      	ldr	r2, [pc, #44]	; (73f8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    73ca:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    73cc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    73ce:	bf1e      	ittt	ne
	movne	r1, #0
    73d0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    73d2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    73d4:	f01f fb85 	blne	26ae2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    73d8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    73da:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    73de:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    73e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    73e6:	4905      	ldr	r1, [pc, #20]	; (73fc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    73e8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    73ea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    73ec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    73ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    73f2:	4903      	ldr	r1, [pc, #12]	; (7400 <_isr_wrapper+0x3c>)
	bx r1
    73f4:	4708      	bx	r1
    73f6:	0000      	.short	0x0000
	ldr r2, =_kernel
    73f8:	20003a90 	.word	0x20003a90
	ldr r1, =_sw_isr_table
    73fc:	00027720 	.word	0x00027720
	ldr r1, =z_arm_int_exit
    7400:	00007405 	.word	0x00007405

00007404 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7404:	4b04      	ldr	r3, [pc, #16]	; (7418 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7406:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7408:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    740a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    740c:	d003      	beq.n	7416 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    740e:	4903      	ldr	r1, [pc, #12]	; (741c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7414:	600a      	str	r2, [r1, #0]

00007416 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7416:	4770      	bx	lr
	ldr r3, =_kernel
    7418:	20003a90 	.word	0x20003a90
	ldr r1, =_SCS_ICSR
    741c:	e000ed04 	.word	0xe000ed04

00007420 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    7424:	4c69      	ldr	r4, [pc, #420]	; (75cc <bus_fault.constprop.0+0x1ac>)
    7426:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7428:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    742a:	0758      	lsls	r0, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    742c:	af00      	add	r7, sp, #0
    742e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7430:	d00f      	beq.n	7452 <bus_fault.constprop.0+0x32>
    7432:	46e8      	mov	r8, sp
    7434:	b088      	sub	sp, #32
    7436:	466a      	mov	r2, sp
    7438:	4b65      	ldr	r3, [pc, #404]	; (75d0 <bus_fault.constprop.0+0x1b0>)
    743a:	6153      	str	r3, [r2, #20]
    743c:	4b65      	ldr	r3, [pc, #404]	; (75d4 <bus_fault.constprop.0+0x1b4>)
    743e:	6193      	str	r3, [r2, #24]
    7440:	2303      	movs	r3, #3
    7442:	f842 3f10 	str.w	r3, [r2, #16]!
    7446:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    744a:	4620      	mov	r0, r4
    744c:	f01c fa4c 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7450:	46c5      	mov	sp, r8

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7452:	4b61      	ldr	r3, [pc, #388]	; (75d8 <bus_fault.constprop.0+0x1b8>)
    7454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7456:	04d9      	lsls	r1, r3, #19
    7458:	f140 809d 	bpl.w	7596 <bus_fault.constprop.0+0x176>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    745c:	6823      	ldr	r3, [r4, #0]
    745e:	075a      	lsls	r2, r3, #29
    7460:	d00f      	beq.n	7482 <bus_fault.constprop.0+0x62>
    7462:	46e8      	mov	r8, sp
    7464:	b088      	sub	sp, #32
    7466:	466a      	mov	r2, sp
    7468:	4b5c      	ldr	r3, [pc, #368]	; (75dc <bus_fault.constprop.0+0x1bc>)
    746a:	6153      	str	r3, [r2, #20]
    746c:	4b59      	ldr	r3, [pc, #356]	; (75d4 <bus_fault.constprop.0+0x1b4>)
    746e:	6193      	str	r3, [r2, #24]
    7470:	2303      	movs	r3, #3
    7472:	f842 3f10 	str.w	r3, [r2, #16]!
    7476:	4855      	ldr	r0, [pc, #340]	; (75cc <bus_fault.constprop.0+0x1ac>)
    7478:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    747c:	f01c fa34 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7480:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_STACKING;
    7482:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    7484:	4b54      	ldr	r3, [pc, #336]	; (75d8 <bus_fault.constprop.0+0x1b8>)
    7486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7488:	051b      	lsls	r3, r3, #20
    748a:	d513      	bpl.n	74b4 <bus_fault.constprop.0+0x94>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    748c:	6823      	ldr	r3, [r4, #0]
    748e:	0758      	lsls	r0, r3, #29
    7490:	d00f      	beq.n	74b2 <bus_fault.constprop.0+0x92>
    7492:	46e8      	mov	r8, sp
    7494:	b088      	sub	sp, #32
    7496:	466a      	mov	r2, sp
    7498:	4b51      	ldr	r3, [pc, #324]	; (75e0 <bus_fault.constprop.0+0x1c0>)
    749a:	6153      	str	r3, [r2, #20]
    749c:	4b4d      	ldr	r3, [pc, #308]	; (75d4 <bus_fault.constprop.0+0x1b4>)
    749e:	6193      	str	r3, [r2, #24]
    74a0:	2303      	movs	r3, #3
    74a2:	f842 3f10 	str.w	r3, [r2, #16]!
    74a6:	4849      	ldr	r0, [pc, #292]	; (75cc <bus_fault.constprop.0+0x1ac>)
    74a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    74ac:	f01c fa1c 	bl	238e8 <z_log_msg_static_create.constprop.0>
    74b0:	46c5      	mov	sp, r8
		reason = K_ERR_ARM_BUS_UNSTACKING;
    74b2:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    74b4:	4b48      	ldr	r3, [pc, #288]	; (75d8 <bus_fault.constprop.0+0x1b8>)
    74b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74b8:	0599      	lsls	r1, r3, #22
    74ba:	d532      	bpl.n	7522 <bus_fault.constprop.0+0x102>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    74bc:	6823      	ldr	r3, [r4, #0]
    74be:	075a      	lsls	r2, r3, #29
    74c0:	d00f      	beq.n	74e2 <bus_fault.constprop.0+0xc2>
    74c2:	46e8      	mov	r8, sp
    74c4:	b088      	sub	sp, #32
    74c6:	466a      	mov	r2, sp
    74c8:	4b46      	ldr	r3, [pc, #280]	; (75e4 <bus_fault.constprop.0+0x1c4>)
    74ca:	6153      	str	r3, [r2, #20]
    74cc:	4b41      	ldr	r3, [pc, #260]	; (75d4 <bus_fault.constprop.0+0x1b4>)
    74ce:	6193      	str	r3, [r2, #24]
    74d0:	2303      	movs	r3, #3
    74d2:	f842 3f10 	str.w	r3, [r2, #16]!
    74d6:	483d      	ldr	r0, [pc, #244]	; (75cc <bus_fault.constprop.0+0x1ac>)
    74d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    74dc:	f01c fa04 	bl	238e8 <z_log_msg_static_create.constprop.0>
    74e0:	46c5      	mov	sp, r8
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    74e2:	4b3d      	ldr	r3, [pc, #244]	; (75d8 <bus_fault.constprop.0+0x1b8>)
    74e4:	6b99      	ldr	r1, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    74e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74e8:	041b      	lsls	r3, r3, #16
    74ea:	d519      	bpl.n	7520 <bus_fault.constprop.0+0x100>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    74ec:	6823      	ldr	r3, [r4, #0]
    74ee:	0758      	lsls	r0, r3, #29
    74f0:	d010      	beq.n	7514 <bus_fault.constprop.0+0xf4>
    74f2:	46e8      	mov	r8, sp
    74f4:	b088      	sub	sp, #32
    74f6:	466a      	mov	r2, sp
    74f8:	4b3b      	ldr	r3, [pc, #236]	; (75e8 <bus_fault.constprop.0+0x1c8>)
    74fa:	6153      	str	r3, [r2, #20]
    74fc:	4b35      	ldr	r3, [pc, #212]	; (75d4 <bus_fault.constprop.0+0x1b4>)
    74fe:	4833      	ldr	r0, [pc, #204]	; (75cc <bus_fault.constprop.0+0x1ac>)
    7500:	e9c2 3106 	strd	r3, r1, [r2, #24]
    7504:	2304      	movs	r3, #4
    7506:	f842 3f10 	str.w	r3, [r2, #16]!
    750a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    750e:	f01c f9eb 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7512:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    7514:	b126      	cbz	r6, 7520 <bus_fault.constprop.0+0x100>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7516:	4a30      	ldr	r2, [pc, #192]	; (75d8 <bus_fault.constprop.0+0x1b8>)
    7518:	6a93      	ldr	r3, [r2, #40]	; 0x28
    751a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    751e:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    7520:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    7522:	4b2d      	ldr	r3, [pc, #180]	; (75d8 <bus_fault.constprop.0+0x1b8>)
    7524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7526:	055a      	lsls	r2, r3, #21
    7528:	d513      	bpl.n	7552 <bus_fault.constprop.0+0x132>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    752a:	6823      	ldr	r3, [r4, #0]
    752c:	075b      	lsls	r3, r3, #29
    752e:	d00f      	beq.n	7550 <bus_fault.constprop.0+0x130>
    7530:	466e      	mov	r6, sp
    7532:	b088      	sub	sp, #32
    7534:	466a      	mov	r2, sp
    7536:	4b2d      	ldr	r3, [pc, #180]	; (75ec <bus_fault.constprop.0+0x1cc>)
    7538:	6153      	str	r3, [r2, #20]
    753a:	4b26      	ldr	r3, [pc, #152]	; (75d4 <bus_fault.constprop.0+0x1b4>)
    753c:	6193      	str	r3, [r2, #24]
    753e:	2303      	movs	r3, #3
    7540:	f842 3f10 	str.w	r3, [r2, #16]!
    7544:	4821      	ldr	r0, [pc, #132]	; (75cc <bus_fault.constprop.0+0x1ac>)
    7546:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    754a:	f01c f9cd 	bl	238e8 <z_log_msg_static_create.constprop.0>
    754e:	46b5      	mov	sp, r6
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    7550:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    7552:	4b21      	ldr	r3, [pc, #132]	; (75d8 <bus_fault.constprop.0+0x1b8>)
    7554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7556:	05d6      	lsls	r6, r2, #23
    7558:	d51f      	bpl.n	759a <bus_fault.constprop.0+0x17a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    755a:	6823      	ldr	r3, [r4, #0]
    755c:	0759      	lsls	r1, r3, #29
    755e:	d00f      	beq.n	7580 <bus_fault.constprop.0+0x160>
    7560:	466c      	mov	r4, sp
    7562:	b088      	sub	sp, #32
    7564:	466a      	mov	r2, sp
    7566:	4b22      	ldr	r3, [pc, #136]	; (75f0 <bus_fault.constprop.0+0x1d0>)
    7568:	6153      	str	r3, [r2, #20]
    756a:	4b1a      	ldr	r3, [pc, #104]	; (75d4 <bus_fault.constprop.0+0x1b4>)
    756c:	6193      	str	r3, [r2, #24]
    756e:	2303      	movs	r3, #3
    7570:	f842 3f10 	str.w	r3, [r2, #16]!
    7574:	4815      	ldr	r0, [pc, #84]	; (75cc <bus_fault.constprop.0+0x1ac>)
    7576:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    757a:	f01c f9b5 	bl	238e8 <z_log_msg_static_create.constprop.0>
    757e:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    7580:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7582:	4a15      	ldr	r2, [pc, #84]	; (75d8 <bus_fault.constprop.0+0x1b8>)
    7584:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7586:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    758a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    758c:	2300      	movs	r3, #0
    758e:	702b      	strb	r3, [r5, #0]

	return reason;
}
    7590:	46bd      	mov	sp, r7
    7592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    7596:	2016      	movs	r0, #22
    7598:	e774      	b.n	7484 <bus_fault.constprop.0+0x64>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    759c:	049a      	lsls	r2, r3, #18
    759e:	d5f0      	bpl.n	7582 <bus_fault.constprop.0+0x162>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    75a0:	6823      	ldr	r3, [r4, #0]
    75a2:	075b      	lsls	r3, r3, #29
    75a4:	d00f      	beq.n	75c6 <bus_fault.constprop.0+0x1a6>
    75a6:	466c      	mov	r4, sp
    75a8:	b088      	sub	sp, #32
    75aa:	466a      	mov	r2, sp
    75ac:	4b11      	ldr	r3, [pc, #68]	; (75f4 <bus_fault.constprop.0+0x1d4>)
    75ae:	6153      	str	r3, [r2, #20]
    75b0:	4b08      	ldr	r3, [pc, #32]	; (75d4 <bus_fault.constprop.0+0x1b4>)
    75b2:	6193      	str	r3, [r2, #24]
    75b4:	2303      	movs	r3, #3
    75b6:	f842 3f10 	str.w	r3, [r2, #16]!
    75ba:	4804      	ldr	r0, [pc, #16]	; (75cc <bus_fault.constprop.0+0x1ac>)
    75bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    75c0:	f01c f992 	bl	238e8 <z_log_msg_static_create.constprop.0>
    75c4:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    75c6:	201c      	movs	r0, #28
    75c8:	e7db      	b.n	7582 <bus_fault.constprop.0+0x162>
    75ca:	bf00      	nop
    75cc:	20000b38 	.word	0x20000b38
    75d0:	0002b50c 	.word	0x0002b50c
    75d4:	0002b8e7 	.word	0x0002b8e7
    75d8:	e000ed00 	.word	0xe000ed00
    75dc:	0002b526 	.word	0x0002b526
    75e0:	0002b53b 	.word	0x0002b53b
    75e4:	0002b552 	.word	0x0002b552
    75e8:	0002b56f 	.word	0x0002b56f
    75ec:	0002b588 	.word	0x0002b588
    75f0:	0002b5a7 	.word	0x0002b5a7
    75f4:	0002b5c3 	.word	0x0002b5c3

000075f8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    75f8:	b5b0      	push	{r4, r5, r7, lr}
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    75fa:	4c58      	ldr	r4, [pc, #352]	; (775c <usage_fault.constprop.0+0x164>)
    75fc:	6823      	ldr	r3, [r4, #0]
    75fe:	075d      	lsls	r5, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7600:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** USAGE FAULT *****");
    7602:	d00f      	beq.n	7624 <usage_fault.constprop.0+0x2c>
    7604:	466d      	mov	r5, sp
    7606:	b088      	sub	sp, #32
    7608:	466a      	mov	r2, sp
    760a:	4b55      	ldr	r3, [pc, #340]	; (7760 <usage_fault.constprop.0+0x168>)
    760c:	6153      	str	r3, [r2, #20]
    760e:	4b55      	ldr	r3, [pc, #340]	; (7764 <usage_fault.constprop.0+0x16c>)
    7610:	6193      	str	r3, [r2, #24]
    7612:	2303      	movs	r3, #3
    7614:	f842 3f10 	str.w	r3, [r2, #16]!
    7618:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    761c:	4620      	mov	r0, r4
    761e:	f01c f963 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7622:	46ad      	mov	sp, r5

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7624:	4b50      	ldr	r3, [pc, #320]	; (7768 <usage_fault.constprop.0+0x170>)
    7626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7628:	0198      	lsls	r0, r3, #6
    762a:	f140 8095 	bpl.w	7758 <usage_fault.constprop.0+0x160>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    762e:	6823      	ldr	r3, [r4, #0]
    7630:	0759      	lsls	r1, r3, #29
    7632:	d00f      	beq.n	7654 <usage_fault.constprop.0+0x5c>
    7634:	466d      	mov	r5, sp
    7636:	b088      	sub	sp, #32
    7638:	466a      	mov	r2, sp
    763a:	4b4c      	ldr	r3, [pc, #304]	; (776c <usage_fault.constprop.0+0x174>)
    763c:	6153      	str	r3, [r2, #20]
    763e:	4b49      	ldr	r3, [pc, #292]	; (7764 <usage_fault.constprop.0+0x16c>)
    7640:	6193      	str	r3, [r2, #24]
    7642:	2303      	movs	r3, #3
    7644:	f842 3f10 	str.w	r3, [r2, #16]!
    7648:	4844      	ldr	r0, [pc, #272]	; (775c <usage_fault.constprop.0+0x164>)
    764a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    764e:	f01c f94b 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7652:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_DIV_0;
    7654:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7656:	4b44      	ldr	r3, [pc, #272]	; (7768 <usage_fault.constprop.0+0x170>)
    7658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    765a:	01da      	lsls	r2, r3, #7
    765c:	d513      	bpl.n	7686 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    765e:	6823      	ldr	r3, [r4, #0]
    7660:	075b      	lsls	r3, r3, #29
    7662:	d00f      	beq.n	7684 <usage_fault.constprop.0+0x8c>
    7664:	466d      	mov	r5, sp
    7666:	b088      	sub	sp, #32
    7668:	466a      	mov	r2, sp
    766a:	4b41      	ldr	r3, [pc, #260]	; (7770 <usage_fault.constprop.0+0x178>)
    766c:	6153      	str	r3, [r2, #20]
    766e:	4b3d      	ldr	r3, [pc, #244]	; (7764 <usage_fault.constprop.0+0x16c>)
    7670:	6193      	str	r3, [r2, #24]
    7672:	2303      	movs	r3, #3
    7674:	f842 3f10 	str.w	r3, [r2, #16]!
    7678:	4838      	ldr	r0, [pc, #224]	; (775c <usage_fault.constprop.0+0x164>)
    767a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    767e:	f01c f933 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7682:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    7684:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7686:	4b38      	ldr	r3, [pc, #224]	; (7768 <usage_fault.constprop.0+0x170>)
    7688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    768a:	031d      	lsls	r5, r3, #12
    768c:	d513      	bpl.n	76b6 <usage_fault.constprop.0+0xbe>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    768e:	6823      	ldr	r3, [r4, #0]
    7690:	0759      	lsls	r1, r3, #29
    7692:	d00f      	beq.n	76b4 <usage_fault.constprop.0+0xbc>
    7694:	466d      	mov	r5, sp
    7696:	b088      	sub	sp, #32
    7698:	466a      	mov	r2, sp
    769a:	4b36      	ldr	r3, [pc, #216]	; (7774 <usage_fault.constprop.0+0x17c>)
    769c:	6153      	str	r3, [r2, #20]
    769e:	4b31      	ldr	r3, [pc, #196]	; (7764 <usage_fault.constprop.0+0x16c>)
    76a0:	6193      	str	r3, [r2, #24]
    76a2:	2303      	movs	r3, #3
    76a4:	f842 3f10 	str.w	r3, [r2, #16]!
    76a8:	482c      	ldr	r0, [pc, #176]	; (775c <usage_fault.constprop.0+0x164>)
    76aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    76ae:	f01c f91b 	bl	238e8 <z_log_msg_static_create.constprop.0>
    76b2:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    76b4:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    76b6:	4b2c      	ldr	r3, [pc, #176]	; (7768 <usage_fault.constprop.0+0x170>)
    76b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76ba:	035a      	lsls	r2, r3, #13
    76bc:	d513      	bpl.n	76e6 <usage_fault.constprop.0+0xee>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    76be:	6823      	ldr	r3, [r4, #0]
    76c0:	075b      	lsls	r3, r3, #29
    76c2:	d00f      	beq.n	76e4 <usage_fault.constprop.0+0xec>
    76c4:	466d      	mov	r5, sp
    76c6:	b088      	sub	sp, #32
    76c8:	466a      	mov	r2, sp
    76ca:	4b2b      	ldr	r3, [pc, #172]	; (7778 <usage_fault.constprop.0+0x180>)
    76cc:	6153      	str	r3, [r2, #20]
    76ce:	4b25      	ldr	r3, [pc, #148]	; (7764 <usage_fault.constprop.0+0x16c>)
    76d0:	6193      	str	r3, [r2, #24]
    76d2:	2303      	movs	r3, #3
    76d4:	f842 3f10 	str.w	r3, [r2, #16]!
    76d8:	4820      	ldr	r0, [pc, #128]	; (775c <usage_fault.constprop.0+0x164>)
    76da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    76de:	f01c f903 	bl	238e8 <z_log_msg_static_create.constprop.0>
    76e2:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    76e4:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    76e6:	4b20      	ldr	r3, [pc, #128]	; (7768 <usage_fault.constprop.0+0x170>)
    76e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76ea:	039d      	lsls	r5, r3, #14
    76ec:	d513      	bpl.n	7716 <usage_fault.constprop.0+0x11e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    76ee:	6823      	ldr	r3, [r4, #0]
    76f0:	0759      	lsls	r1, r3, #29
    76f2:	d00f      	beq.n	7714 <usage_fault.constprop.0+0x11c>
    76f4:	466d      	mov	r5, sp
    76f6:	b088      	sub	sp, #32
    76f8:	466a      	mov	r2, sp
    76fa:	4b20      	ldr	r3, [pc, #128]	; (777c <usage_fault.constprop.0+0x184>)
    76fc:	6153      	str	r3, [r2, #20]
    76fe:	4b19      	ldr	r3, [pc, #100]	; (7764 <usage_fault.constprop.0+0x16c>)
    7700:	6193      	str	r3, [r2, #24]
    7702:	2303      	movs	r3, #3
    7704:	f842 3f10 	str.w	r3, [r2, #16]!
    7708:	4814      	ldr	r0, [pc, #80]	; (775c <usage_fault.constprop.0+0x164>)
    770a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    770e:	f01c f8eb 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7712:	46ad      	mov	sp, r5
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    7714:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    7716:	4b14      	ldr	r3, [pc, #80]	; (7768 <usage_fault.constprop.0+0x170>)
    7718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    771a:	03da      	lsls	r2, r3, #15
    771c:	d513      	bpl.n	7746 <usage_fault.constprop.0+0x14e>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    771e:	6823      	ldr	r3, [r4, #0]
    7720:	075b      	lsls	r3, r3, #29
    7722:	d00f      	beq.n	7744 <usage_fault.constprop.0+0x14c>
    7724:	466c      	mov	r4, sp
    7726:	b088      	sub	sp, #32
    7728:	466a      	mov	r2, sp
    772a:	4b15      	ldr	r3, [pc, #84]	; (7780 <usage_fault.constprop.0+0x188>)
    772c:	6153      	str	r3, [r2, #20]
    772e:	4b0d      	ldr	r3, [pc, #52]	; (7764 <usage_fault.constprop.0+0x16c>)
    7730:	6193      	str	r3, [r2, #24]
    7732:	2303      	movs	r3, #3
    7734:	f842 3f10 	str.w	r3, [r2, #16]!
    7738:	4808      	ldr	r0, [pc, #32]	; (775c <usage_fault.constprop.0+0x164>)
    773a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    773e:	f01c f8d3 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7742:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    7744:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7746:	4a08      	ldr	r2, [pc, #32]	; (7768 <usage_fault.constprop.0+0x170>)
    7748:	6a93      	ldr	r3, [r2, #40]	; 0x28
    774a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    774e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    7752:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    7754:	46bd      	mov	sp, r7
    7756:	bdb0      	pop	{r4, r5, r7, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    7758:	201d      	movs	r0, #29
    775a:	e77c      	b.n	7656 <usage_fault.constprop.0+0x5e>
    775c:	20000b38 	.word	0x20000b38
    7760:	0002b5f6 	.word	0x0002b5f6
    7764:	0002b8db 	.word	0x0002b8db
    7768:	e000ed00 	.word	0xe000ed00
    776c:	0002b612 	.word	0x0002b612
    7770:	0002b629 	.word	0x0002b629
    7774:	0002b647 	.word	0x0002b647
    7778:	0002b669 	.word	0x0002b669
    777c:	0002b692 	.word	0x0002b692
    7780:	0002b6b0 	.word	0x0002b6b0

00007784 <mem_manage_fault>:
{
    7784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    7788:	4d70      	ldr	r5, [pc, #448]	; (794c <mem_manage_fault+0x1c8>)
    778a:	682b      	ldr	r3, [r5, #0]
{
    778c:	468a      	mov	sl, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    778e:	0759      	lsls	r1, r3, #29
{
    7790:	af00      	add	r7, sp, #0
    7792:	4681      	mov	r9, r0
    7794:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    7796:	d00f      	beq.n	77b8 <mem_manage_fault+0x34>
    7798:	466c      	mov	r4, sp
    779a:	b088      	sub	sp, #32
    779c:	466a      	mov	r2, sp
    779e:	4b6c      	ldr	r3, [pc, #432]	; (7950 <mem_manage_fault+0x1cc>)
    77a0:	6153      	str	r3, [r2, #20]
    77a2:	4b6c      	ldr	r3, [pc, #432]	; (7954 <mem_manage_fault+0x1d0>)
    77a4:	6193      	str	r3, [r2, #24]
    77a6:	2303      	movs	r3, #3
    77a8:	f842 3f10 	str.w	r3, [r2, #16]!
    77ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    77b0:	4628      	mov	r0, r5
    77b2:	f01c f899 	bl	238e8 <z_log_msg_static_create.constprop.0>
    77b6:	46a5      	mov	sp, r4
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    77b8:	4b67      	ldr	r3, [pc, #412]	; (7958 <mem_manage_fault+0x1d4>)
    77ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77bc:	06da      	lsls	r2, r3, #27
    77be:	d556      	bpl.n	786e <mem_manage_fault+0xea>
		PR_FAULT_INFO("  Stacking error (context area might be"
    77c0:	682b      	ldr	r3, [r5, #0]
    77c2:	075b      	lsls	r3, r3, #29
    77c4:	d142      	bne.n	784c <mem_manage_fault+0xc8>
		reason = K_ERR_ARM_MEM_STACKING;
    77c6:	2411      	movs	r4, #17
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    77c8:	4b63      	ldr	r3, [pc, #396]	; (7958 <mem_manage_fault+0x1d4>)
    77ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77cc:	071e      	lsls	r6, r3, #28
    77ce:	d503      	bpl.n	77d8 <mem_manage_fault+0x54>
		PR_FAULT_INFO("  Unstacking error");
    77d0:	682b      	ldr	r3, [r5, #0]
    77d2:	0758      	lsls	r0, r3, #29
    77d4:	d14d      	bne.n	7872 <mem_manage_fault+0xee>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    77d6:	2412      	movs	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    77d8:	4b5f      	ldr	r3, [pc, #380]	; (7958 <mem_manage_fault+0x1d4>)
    77da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77dc:	0799      	lsls	r1, r3, #30
    77de:	d559      	bpl.n	7894 <mem_manage_fault+0x110>
		PR_FAULT_INFO("  Data Access Violation");
    77e0:	682b      	ldr	r3, [r5, #0]
    77e2:	075a      	lsls	r2, r3, #29
    77e4:	d00f      	beq.n	7806 <mem_manage_fault+0x82>
    77e6:	466c      	mov	r4, sp
    77e8:	b088      	sub	sp, #32
    77ea:	466a      	mov	r2, sp
    77ec:	4b5b      	ldr	r3, [pc, #364]	; (795c <mem_manage_fault+0x1d8>)
    77ee:	6153      	str	r3, [r2, #20]
    77f0:	4b58      	ldr	r3, [pc, #352]	; (7954 <mem_manage_fault+0x1d0>)
    77f2:	6193      	str	r3, [r2, #24]
    77f4:	2303      	movs	r3, #3
    77f6:	f842 3f10 	str.w	r3, [r2, #16]!
    77fa:	4854      	ldr	r0, [pc, #336]	; (794c <mem_manage_fault+0x1c8>)
    77fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7800:	f01c f872 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7804:	46a5      	mov	sp, r4
		uint32_t temp = SCB->MMFAR;
    7806:	4b54      	ldr	r3, [pc, #336]	; (7958 <mem_manage_fault+0x1d4>)
    7808:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    780c:	061b      	lsls	r3, r3, #24
    780e:	d578      	bpl.n	7902 <mem_manage_fault+0x17e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7810:	682b      	ldr	r3, [r5, #0]
    7812:	075c      	lsls	r4, r3, #29
    7814:	d010      	beq.n	7838 <mem_manage_fault+0xb4>
    7816:	466c      	mov	r4, sp
    7818:	b088      	sub	sp, #32
    781a:	466a      	mov	r2, sp
    781c:	4b50      	ldr	r3, [pc, #320]	; (7960 <mem_manage_fault+0x1dc>)
    781e:	6153      	str	r3, [r2, #20]
    7820:	4b4c      	ldr	r3, [pc, #304]	; (7954 <mem_manage_fault+0x1d0>)
    7822:	484a      	ldr	r0, [pc, #296]	; (794c <mem_manage_fault+0x1c8>)
    7824:	e9c2 3606 	strd	r3, r6, [r2, #24]
    7828:	2304      	movs	r3, #4
    782a:	f842 3f10 	str.w	r3, [r2, #16]!
    782e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7832:	f01c f859 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7836:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    7838:	f1ba 0f00 	cmp.w	sl, #0
    783c:	d004      	beq.n	7848 <mem_manage_fault+0xc4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    783e:	4a46      	ldr	r2, [pc, #280]	; (7958 <mem_manage_fault+0x1d4>)
    7840:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7846:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    7848:	2413      	movs	r4, #19
    784a:	e025      	b.n	7898 <mem_manage_fault+0x114>
		PR_FAULT_INFO("  Stacking error (context area might be"
    784c:	466c      	mov	r4, sp
    784e:	b088      	sub	sp, #32
    7850:	466a      	mov	r2, sp
    7852:	4b44      	ldr	r3, [pc, #272]	; (7964 <mem_manage_fault+0x1e0>)
    7854:	6153      	str	r3, [r2, #20]
    7856:	4b3f      	ldr	r3, [pc, #252]	; (7954 <mem_manage_fault+0x1d0>)
    7858:	6193      	str	r3, [r2, #24]
    785a:	2303      	movs	r3, #3
    785c:	f842 3f10 	str.w	r3, [r2, #16]!
    7860:	483a      	ldr	r0, [pc, #232]	; (794c <mem_manage_fault+0x1c8>)
    7862:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7866:	f01c f83f 	bl	238e8 <z_log_msg_static_create.constprop.0>
    786a:	46a5      	mov	sp, r4
    786c:	e7ab      	b.n	77c6 <mem_manage_fault+0x42>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    786e:	2410      	movs	r4, #16
    7870:	e7aa      	b.n	77c8 <mem_manage_fault+0x44>
		PR_FAULT_INFO("  Unstacking error");
    7872:	466c      	mov	r4, sp
    7874:	b088      	sub	sp, #32
    7876:	466a      	mov	r2, sp
    7878:	4b3b      	ldr	r3, [pc, #236]	; (7968 <mem_manage_fault+0x1e4>)
    787a:	6153      	str	r3, [r2, #20]
    787c:	4b35      	ldr	r3, [pc, #212]	; (7954 <mem_manage_fault+0x1d0>)
    787e:	6193      	str	r3, [r2, #24]
    7880:	2303      	movs	r3, #3
    7882:	f842 3f10 	str.w	r3, [r2, #16]!
    7886:	4831      	ldr	r0, [pc, #196]	; (794c <mem_manage_fault+0x1c8>)
    7888:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    788c:	f01c f82c 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7890:	46a5      	mov	sp, r4
    7892:	e7a0      	b.n	77d6 <mem_manage_fault+0x52>
	uint32_t mmfar = -EINVAL;
    7894:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7898:	4b2f      	ldr	r3, [pc, #188]	; (7958 <mem_manage_fault+0x1d4>)
    789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    789c:	07d8      	lsls	r0, r3, #31
    789e:	d503      	bpl.n	78a8 <mem_manage_fault+0x124>
		PR_FAULT_INFO("  Instruction Access Violation");
    78a0:	682b      	ldr	r3, [r5, #0]
    78a2:	0759      	lsls	r1, r3, #29
    78a4:	d130      	bne.n	7908 <mem_manage_fault+0x184>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    78a6:	2414      	movs	r4, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    78a8:	4b2b      	ldr	r3, [pc, #172]	; (7958 <mem_manage_fault+0x1d4>)
    78aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78ac:	069a      	lsls	r2, r3, #26
    78ae:	d503      	bpl.n	78b8 <mem_manage_fault+0x134>
		PR_FAULT_INFO(
    78b0:	682b      	ldr	r3, [r5, #0]
    78b2:	075b      	lsls	r3, r3, #29
    78b4:	d139      	bne.n	792a <mem_manage_fault+0x1a6>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    78b6:	2415      	movs	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    78b8:	4b27      	ldr	r3, [pc, #156]	; (7958 <mem_manage_fault+0x1d4>)
    78ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    78bc:	06d5      	lsls	r5, r2, #27
    78be:	d402      	bmi.n	78c6 <mem_manage_fault+0x142>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    78c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    78c2:	0790      	lsls	r0, r2, #30
    78c4:	d50a      	bpl.n	78dc <mem_manage_fault+0x158>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    78c6:	685b      	ldr	r3, [r3, #4]
    78c8:	0519      	lsls	r1, r3, #20
    78ca:	d507      	bpl.n	78dc <mem_manage_fault+0x158>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    78cc:	4649      	mov	r1, r9
    78ce:	4630      	mov	r0, r6
    78d0:	f7ff fd4a 	bl	7368 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    78d4:	b110      	cbz	r0, 78dc <mem_manage_fault+0x158>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    78d6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    78da:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    78dc:	4b1e      	ldr	r3, [pc, #120]	; (7958 <mem_manage_fault+0x1d4>)
    78de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    78e0:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    78e2:	bf42      	ittt	mi
    78e4:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    78e6:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    78ea:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    78ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    78ee:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    78f2:	629a      	str	r2, [r3, #40]	; 0x28
}
    78f4:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    78f6:	2300      	movs	r3, #0
    78f8:	f888 3000 	strb.w	r3, [r8]
}
    78fc:	46bd      	mov	sp, r7
    78fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    7902:	f06f 0615 	mvn.w	r6, #21
    7906:	e79f      	b.n	7848 <mem_manage_fault+0xc4>
		PR_FAULT_INFO("  Instruction Access Violation");
    7908:	466c      	mov	r4, sp
    790a:	b088      	sub	sp, #32
    790c:	466a      	mov	r2, sp
    790e:	4b17      	ldr	r3, [pc, #92]	; (796c <mem_manage_fault+0x1e8>)
    7910:	6153      	str	r3, [r2, #20]
    7912:	4b10      	ldr	r3, [pc, #64]	; (7954 <mem_manage_fault+0x1d0>)
    7914:	6193      	str	r3, [r2, #24]
    7916:	2303      	movs	r3, #3
    7918:	f842 3f10 	str.w	r3, [r2, #16]!
    791c:	480b      	ldr	r0, [pc, #44]	; (794c <mem_manage_fault+0x1c8>)
    791e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7922:	f01b ffe1 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7926:	46a5      	mov	sp, r4
    7928:	e7bd      	b.n	78a6 <mem_manage_fault+0x122>
		PR_FAULT_INFO(
    792a:	466c      	mov	r4, sp
    792c:	b088      	sub	sp, #32
    792e:	466a      	mov	r2, sp
    7930:	4b0f      	ldr	r3, [pc, #60]	; (7970 <mem_manage_fault+0x1ec>)
    7932:	6153      	str	r3, [r2, #20]
    7934:	4b07      	ldr	r3, [pc, #28]	; (7954 <mem_manage_fault+0x1d0>)
    7936:	6193      	str	r3, [r2, #24]
    7938:	2303      	movs	r3, #3
    793a:	f842 3f10 	str.w	r3, [r2, #16]!
    793e:	4803      	ldr	r0, [pc, #12]	; (794c <mem_manage_fault+0x1c8>)
    7940:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7944:	f01b ffd0 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7948:	46a5      	mov	sp, r4
    794a:	e7b4      	b.n	78b6 <mem_manage_fault+0x132>
    794c:	20000b38 	.word	0x20000b38
    7950:	0002b6df 	.word	0x0002b6df
    7954:	0002b8f1 	.word	0x0002b8f1
    7958:	e000ed00 	.word	0xe000ed00
    795c:	0002b730 	.word	0x0002b730
    7960:	0002b74c 	.word	0x0002b74c
    7964:	0002b6f9 	.word	0x0002b6f9
    7968:	0002b53b 	.word	0x0002b53b
    796c:	0002b766 	.word	0x0002b766
    7970:	0002b5c3 	.word	0x0002b5c3

00007974 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7978:	4b9a      	ldr	r3, [pc, #616]	; (7be4 <z_arm_fault+0x270>)
{
    797a:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    797c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    7980:	af00      	add	r7, sp, #0
    7982:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7984:	f3c8 0408 	ubfx	r4, r8, #0, #9
    7988:	2600      	movs	r6, #0
    798a:	f386 8811 	msr	BASEPRI, r6
    798e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7992:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7996:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    799a:	d116      	bne.n	79ca <z_arm_fault+0x56>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    799c:	f002 030c 	and.w	r3, r2, #12
    79a0:	2b08      	cmp	r3, #8
    79a2:	d126      	bne.n	79f2 <z_arm_fault+0x7e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    79a4:	4890      	ldr	r0, [pc, #576]	; (7be8 <z_arm_fault+0x274>)
    79a6:	6803      	ldr	r3, [r0, #0]
    79a8:	0759      	lsls	r1, r3, #29
    79aa:	d00e      	beq.n	79ca <z_arm_fault+0x56>
    79ac:	466d      	mov	r5, sp
    79ae:	b088      	sub	sp, #32
    79b0:	466a      	mov	r2, sp
    79b2:	4b8e      	ldr	r3, [pc, #568]	; (7bec <z_arm_fault+0x278>)
    79b4:	6153      	str	r3, [r2, #20]
    79b6:	4b8e      	ldr	r3, [pc, #568]	; (7bf0 <z_arm_fault+0x27c>)
    79b8:	6193      	str	r3, [r2, #24]
    79ba:	2303      	movs	r3, #3
    79bc:	f842 3f10 	str.w	r3, [r2, #16]!
    79c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    79c4:	f01b ff90 	bl	238e8 <z_log_msg_static_create.constprop.0>
    79c8:	46ad      	mov	sp, r5
	*nested_exc = false;
    79ca:	2600      	movs	r6, #0
		return NULL;
    79cc:	4635      	mov	r5, r6
	*recoverable = false;
    79ce:	2300      	movs	r3, #0
    79d0:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    79d2:	1ee3      	subs	r3, r4, #3
    79d4:	2b09      	cmp	r3, #9
    79d6:	f200 80df 	bhi.w	7b98 <z_arm_fault+0x224>
    79da:	e8df f013 	tbh	[pc, r3, lsl #1]
    79de:	000f      	.short	0x000f
    79e0:	00c800c5 	.word	0x00c800c5
    79e4:	00dd00c1 	.word	0x00dd00c1
    79e8:	00dd00dd 	.word	0x00dd00dd
    79ec:	00dd00dd 	.word	0x00dd00dd
    79f0:	00cb      	.short	0x00cb
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    79f2:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    79f4:	bf4c      	ite	mi
    79f6:	460d      	movmi	r5, r1
			*nested_exc = true;
    79f8:	2601      	movpl	r6, #1
    79fa:	e7e8      	b.n	79ce <z_arm_fault+0x5a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    79fc:	4c7a      	ldr	r4, [pc, #488]	; (7be8 <z_arm_fault+0x274>)
    79fe:	6823      	ldr	r3, [r4, #0]
    7a00:	075b      	lsls	r3, r3, #29
    7a02:	d00f      	beq.n	7a24 <z_arm_fault+0xb0>
    7a04:	46e8      	mov	r8, sp
    7a06:	b088      	sub	sp, #32
    7a08:	466a      	mov	r2, sp
    7a0a:	4b7a      	ldr	r3, [pc, #488]	; (7bf4 <z_arm_fault+0x280>)
    7a0c:	6153      	str	r3, [r2, #20]
    7a0e:	4b7a      	ldr	r3, [pc, #488]	; (7bf8 <z_arm_fault+0x284>)
    7a10:	6193      	str	r3, [r2, #24]
    7a12:	2303      	movs	r3, #3
    7a14:	f842 3f10 	str.w	r3, [r2, #16]!
    7a18:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7a1c:	4620      	mov	r0, r4
    7a1e:	f01b ff63 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7a22:	46c5      	mov	sp, r8
	*recoverable = false;
    7a24:	2300      	movs	r3, #0
    7a26:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7a28:	4b6e      	ldr	r3, [pc, #440]	; (7be4 <z_arm_fault+0x270>)
    7a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7a2c:	0790      	lsls	r0, r2, #30
    7a2e:	d514      	bpl.n	7a5a <z_arm_fault+0xe6>
		PR_EXC("  Bus fault on vector table read");
    7a30:	6823      	ldr	r3, [r4, #0]
    7a32:	0759      	lsls	r1, r3, #29
    7a34:	d00f      	beq.n	7a56 <z_arm_fault+0xe2>
    7a36:	466c      	mov	r4, sp
    7a38:	b088      	sub	sp, #32
    7a3a:	466a      	mov	r2, sp
    7a3c:	4b6f      	ldr	r3, [pc, #444]	; (7bfc <z_arm_fault+0x288>)
		PR_EXC("  Debug event");
    7a3e:	6153      	str	r3, [r2, #20]
    7a40:	4b6d      	ldr	r3, [pc, #436]	; (7bf8 <z_arm_fault+0x284>)
    7a42:	6193      	str	r3, [r2, #24]
    7a44:	2303      	movs	r3, #3
    7a46:	f842 3f10 	str.w	r3, [r2, #16]!
    7a4a:	4867      	ldr	r0, [pc, #412]	; (7be8 <z_arm_fault+0x274>)
    7a4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	PR_FAULT_INFO(
    7a50:	f01b ff4a 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7a54:	46a5      	mov	sp, r4
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7a56:	2400      	movs	r4, #0
    7a58:	e058      	b.n	7b0c <z_arm_fault+0x198>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    7a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7a5c:	2a00      	cmp	r2, #0
    7a5e:	da07      	bge.n	7a70 <z_arm_fault+0xfc>
		PR_EXC("  Debug event");
    7a60:	6823      	ldr	r3, [r4, #0]
    7a62:	075a      	lsls	r2, r3, #29
    7a64:	d0f7      	beq.n	7a56 <z_arm_fault+0xe2>
    7a66:	466c      	mov	r4, sp
    7a68:	b088      	sub	sp, #32
    7a6a:	466a      	mov	r2, sp
    7a6c:	4b64      	ldr	r3, [pc, #400]	; (7c00 <z_arm_fault+0x28c>)
    7a6e:	e7e6      	b.n	7a3e <z_arm_fault+0xca>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    7a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a72:	005b      	lsls	r3, r3, #1
    7a74:	d5ef      	bpl.n	7a56 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
    7a76:	6823      	ldr	r3, [r4, #0]
    7a78:	0758      	lsls	r0, r3, #29
    7a7a:	d00f      	beq.n	7a9c <z_arm_fault+0x128>
    7a7c:	46e8      	mov	r8, sp
    7a7e:	b088      	sub	sp, #32
    7a80:	466a      	mov	r2, sp
    7a82:	4b60      	ldr	r3, [pc, #384]	; (7c04 <z_arm_fault+0x290>)
    7a84:	6153      	str	r3, [r2, #20]
    7a86:	4b5c      	ldr	r3, [pc, #368]	; (7bf8 <z_arm_fault+0x284>)
    7a88:	6193      	str	r3, [r2, #24]
    7a8a:	2303      	movs	r3, #3
    7a8c:	f842 3f10 	str.w	r3, [r2, #16]!
    7a90:	4855      	ldr	r0, [pc, #340]	; (7be8 <z_arm_fault+0x274>)
    7a92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7a96:	f01b ff27 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7a9a:	46c5      	mov	sp, r8
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    7a9c:	4b51      	ldr	r3, [pc, #324]	; (7be4 <z_arm_fault+0x270>)
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    7a9e:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    7aa0:	695a      	ldr	r2, [r3, #20]
    7aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    7aa6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    7aa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7aac:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    7ab0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    7ab2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    7ab6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    7aba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    7abc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ac0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    7ac4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    7ac8:	4291      	cmp	r1, r2
    7aca:	d009      	beq.n	7ae0 <z_arm_fault+0x16c>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    7acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7ace:	b2d2      	uxtb	r2, r2
    7ad0:	2a00      	cmp	r2, #0
    7ad2:	d037      	beq.n	7b44 <z_arm_fault+0x1d0>
			reason = mem_manage_fault(esf, 1, recoverable);
    7ad4:	1dfa      	adds	r2, r7, #7
    7ad6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7ad8:	4628      	mov	r0, r5
    7ada:	f7ff fe53 	bl	7784 <mem_manage_fault>
    7ade:	e041      	b.n	7b64 <z_arm_fault+0x1f0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    7ae0:	6823      	ldr	r3, [r4, #0]
    7ae2:	0759      	lsls	r1, r3, #29
    7ae4:	d011      	beq.n	7b0a <z_arm_fault+0x196>
    7ae6:	466c      	mov	r4, sp
    7ae8:	b088      	sub	sp, #32
    7aea:	682b      	ldr	r3, [r5, #0]
    7aec:	466a      	mov	r2, sp
    7aee:	4946      	ldr	r1, [pc, #280]	; (7c08 <z_arm_fault+0x294>)
    7af0:	6151      	str	r1, [r2, #20]
    7af2:	4941      	ldr	r1, [pc, #260]	; (7bf8 <z_arm_fault+0x284>)
    7af4:	483c      	ldr	r0, [pc, #240]	; (7be8 <z_arm_fault+0x274>)
    7af6:	e9c2 1306 	strd	r1, r3, [r2, #24]
    7afa:	2304      	movs	r3, #4
    7afc:	f842 3f10 	str.w	r3, [r2, #16]!
    7b00:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7b04:	f01b fef0 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7b08:	46a5      	mov	sp, r4
			reason = esf->basic.r0;
    7b0a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7b0c:	79fb      	ldrb	r3, [r7, #7]
    7b0e:	b9ab      	cbnz	r3, 7b3c <z_arm_fault+0x1c8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7b10:	2220      	movs	r2, #32
    7b12:	4629      	mov	r1, r5
    7b14:	f107 0008 	add.w	r0, r7, #8
    7b18:	f01c f878 	bl	23c0c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7b1e:	2e00      	cmp	r6, #0
    7b20:	d05b      	beq.n	7bda <z_arm_fault+0x266>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7b26:	b922      	cbnz	r2, 7b32 <z_arm_fault+0x1be>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7b28:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7b2c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7b30:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    7b32:	f107 0108 	add.w	r1, r7, #8
    7b36:	4620      	mov	r0, r4
    7b38:	f7ff faa8 	bl	708c <z_arm_fatal_error>
}
    7b3c:	3728      	adds	r7, #40	; 0x28
    7b3e:	46bd      	mov	sp, r7
    7b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    7b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7b46:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    7b4a:	d004      	beq.n	7b56 <z_arm_fault+0x1e2>
			reason = bus_fault(esf, 1, recoverable);
    7b4c:	1df9      	adds	r1, r7, #7
    7b4e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7b50:	f7ff fc66 	bl	7420 <bus_fault.constprop.0>
    7b54:	e006      	b.n	7b64 <z_arm_fault+0x1f0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    7b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    7b5c:	f4ff af7b 	bcc.w	7a56 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
    7b60:	f7ff fd4a 	bl	75f8 <usage_fault.constprop.0>
    7b64:	4604      	mov	r4, r0
    7b66:	e7d1      	b.n	7b0c <z_arm_fault+0x198>
		reason = mem_manage_fault(esf, 0, recoverable);
    7b68:	1dfa      	adds	r2, r7, #7
    7b6a:	2100      	movs	r1, #0
    7b6c:	e7b4      	b.n	7ad8 <z_arm_fault+0x164>
		reason = bus_fault(esf, 0, recoverable);
    7b6e:	1df9      	adds	r1, r7, #7
    7b70:	2000      	movs	r0, #0
    7b72:	e7ed      	b.n	7b50 <z_arm_fault+0x1dc>
	PR_FAULT_INFO(
    7b74:	481c      	ldr	r0, [pc, #112]	; (7be8 <z_arm_fault+0x274>)
    7b76:	6803      	ldr	r3, [r0, #0]
    7b78:	075a      	lsls	r2, r3, #29
    7b7a:	f43f af6c 	beq.w	7a56 <z_arm_fault+0xe2>
    7b7e:	466c      	mov	r4, sp
    7b80:	b088      	sub	sp, #32
    7b82:	466a      	mov	r2, sp
    7b84:	4b21      	ldr	r3, [pc, #132]	; (7c0c <z_arm_fault+0x298>)
    7b86:	6153      	str	r3, [r2, #20]
    7b88:	4b21      	ldr	r3, [pc, #132]	; (7c10 <z_arm_fault+0x29c>)
    7b8a:	6193      	str	r3, [r2, #24]
    7b8c:	2303      	movs	r3, #3
    7b8e:	f842 3f10 	str.w	r3, [r2, #16]!
    7b92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7b96:	e75b      	b.n	7a50 <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
    7b98:	4813      	ldr	r0, [pc, #76]	; (7be8 <z_arm_fault+0x274>)
    7b9a:	6803      	ldr	r3, [r0, #0]
    7b9c:	075b      	lsls	r3, r3, #29
    7b9e:	f43f af5a 	beq.w	7a56 <z_arm_fault+0xe2>
    7ba2:	4a1c      	ldr	r2, [pc, #112]	; (7c14 <z_arm_fault+0x2a0>)
    7ba4:	4b1c      	ldr	r3, [pc, #112]	; (7c18 <z_arm_fault+0x2a4>)
    7ba6:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    7baa:	46e8      	mov	r8, sp
    7bac:	b08a      	sub	sp, #40	; 0x28
    7bae:	bf18      	it	ne
    7bb0:	4613      	movne	r3, r2
    7bb2:	466a      	mov	r2, sp
    7bb4:	4919      	ldr	r1, [pc, #100]	; (7c1c <z_arm_fault+0x2a8>)
    7bb6:	6151      	str	r1, [r2, #20]
    7bb8:	4919      	ldr	r1, [pc, #100]	; (7c20 <z_arm_fault+0x2ac>)
    7bba:	e9c2 1306 	strd	r1, r3, [r2, #24]
    7bbe:	f240 3301 	movw	r3, #769	; 0x301
    7bc2:	8493      	strh	r3, [r2, #36]	; 0x24
    7bc4:	3c10      	subs	r4, #16
    7bc6:	4b17      	ldr	r3, [pc, #92]	; (7c24 <z_arm_fault+0x2b0>)
    7bc8:	6214      	str	r4, [r2, #32]
    7bca:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    7bce:	f842 3f10 	str.w	r3, [r2, #16]!
    7bd2:	f01b fe89 	bl	238e8 <z_log_msg_static_create.constprop.0>
    7bd6:	46c5      	mov	sp, r8
    7bd8:	e73d      	b.n	7a56 <z_arm_fault+0xe2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7bda:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7bde:	f023 0301 	bic.w	r3, r3, #1
    7be2:	e7a5      	b.n	7b30 <z_arm_fault+0x1bc>
    7be4:	e000ed00 	.word	0xe000ed00
    7be8:	20000b38 	.word	0x20000b38
    7bec:	0002b7b7 	.word	0x0002b7b7
    7bf0:	0002b90d 	.word	0x0002b90d
    7bf4:	0002b7e6 	.word	0x0002b7e6
    7bf8:	0002b902 	.word	0x0002b902
    7bfc:	0002b801 	.word	0x0002b801
    7c00:	0002b826 	.word	0x0002b826
    7c04:	0002b838 	.word	0x0002b838
    7c08:	0002b85b 	.word	0x0002b85b
    7c0c:	0002b87b 	.word	0x0002b87b
    7c10:	0002b8cd 	.word	0x0002b8cd
    7c14:	0002b79e 	.word	0x0002b79e
    7c18:	0002b789 	.word	0x0002b789
    7c1c:	0002b8a3 	.word	0x0002b8a3
    7c20:	0002b8ba 	.word	0x0002b8ba
    7c24:	01000005 	.word	0x01000005

00007c28 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7c28:	4a02      	ldr	r2, [pc, #8]	; (7c34 <z_arm_fault_init+0xc>)
    7c2a:	6953      	ldr	r3, [r2, #20]
    7c2c:	f043 0310 	orr.w	r3, r3, #16
    7c30:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    7c32:	4770      	bx	lr
    7c34:	e000ed00 	.word	0xe000ed00

00007c38 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7c38:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7c3c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7c40:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7c42:	4672      	mov	r2, lr
	bl z_arm_fault
    7c44:	f7ff fe96 	bl	7974 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7c48:	bd01      	pop	{r0, pc}
    7c4a:	bf00      	nop

00007c4c <z_arm_interrupt_init>:
    7c4c:	4804      	ldr	r0, [pc, #16]	; (7c60 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7c4e:	2300      	movs	r3, #0
    7c50:	2120      	movs	r1, #32
    7c52:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7c54:	3301      	adds	r3, #1
    7c56:	2b27      	cmp	r3, #39	; 0x27
    7c58:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7c5c:	d1f9      	bne.n	7c52 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7c5e:	4770      	bx	lr
    7c60:	e000e100 	.word	0xe000e100

00007c64 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    7c64:	f7fb feba 	bl	39dc <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7c68:	2020      	movs	r0, #32
    msr BASEPRI, r0
    7c6a:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    7c6e:	480b      	ldr	r0, [pc, #44]	; (7c9c <__start+0x38>)
    ldr r1, =0xaa
    7c70:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7c74:	f44f 6204 	mov.w	r2, #2112	; 0x840
    bl z_early_memset
    7c78:	f01e fe62 	bl	26940 <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    7c7c:	4807      	ldr	r0, [pc, #28]	; (7c9c <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7c7e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    7c82:	1840      	adds	r0, r0, r1
    msr PSP, r0
    7c84:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    7c88:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    7c8c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    7c8e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    7c90:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    7c94:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    7c98:	f7ff face 	bl	7238 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    7c9c:	20005b80 	.word	0x20005b80

00007ca0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    7ca0:	4b08      	ldr	r3, [pc, #32]	; (7cc4 <z_impl_k_thread_abort+0x24>)
    7ca2:	689b      	ldr	r3, [r3, #8]
    7ca4:	4283      	cmp	r3, r0
    7ca6:	d10b      	bne.n	7cc0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7ca8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7cac:	b143      	cbz	r3, 7cc0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7cae:	4b06      	ldr	r3, [pc, #24]	; (7cc8 <z_impl_k_thread_abort+0x28>)
    7cb0:	685a      	ldr	r2, [r3, #4]
    7cb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    7cb6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    7cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7cba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    7cbe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    7cc0:	f018 bd5e 	b.w	20780 <z_thread_abort>
    7cc4:	20003a90 	.word	0x20003a90
    7cc8:	e000ed00 	.word	0xe000ed00

00007ccc <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7ccc:	4b02      	ldr	r3, [pc, #8]	; (7cd8 <z_arm_configure_static_mpu_regions+0xc>)
    7cce:	4a03      	ldr	r2, [pc, #12]	; (7cdc <z_arm_configure_static_mpu_regions+0x10>)
    7cd0:	4803      	ldr	r0, [pc, #12]	; (7ce0 <z_arm_configure_static_mpu_regions+0x14>)
    7cd2:	2101      	movs	r1, #1
    7cd4:	f000 b8a4 	b.w	7e20 <arm_core_mpu_configure_static_mpu_regions>
    7cd8:	20010000 	.word	0x20010000
    7cdc:	20000000 	.word	0x20000000
    7ce0:	00028248 	.word	0x00028248

00007ce4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    7ce4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    7ce8:	4b05      	ldr	r3, [pc, #20]	; (7d00 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    7cea:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    7cec:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7cee:	4a05      	ldr	r2, [pc, #20]	; (7d04 <z_arm_configure_dynamic_mpu_regions+0x20>)
    7cf0:	2140      	movs	r1, #64	; 0x40
    7cf2:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    7cf6:	4618      	mov	r0, r3
    7cf8:	2101      	movs	r1, #1
    7cfa:	f000 b89b 	b.w	7e34 <arm_core_mpu_configure_dynamic_mpu_regions>
    7cfe:	bf00      	nop
    7d00:	20002568 	.word	0x20002568
    7d04:	150b0000 	.word	0x150b0000

00007d08 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    7d0c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 7ddc <mpu_configure_regions+0xd4>
    7d10:	469c      	mov	ip, r3
    7d12:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    7d14:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    7d16:	2300      	movs	r3, #0
    7d18:	428b      	cmp	r3, r1
    7d1a:	da1f      	bge.n	7d5c <mpu_configure_regions+0x54>
		if (regions[i].size == 0U) {
    7d1c:	6844      	ldr	r4, [r0, #4]
    7d1e:	2c00      	cmp	r4, #0
    7d20:	d058      	beq.n	7dd4 <mpu_configure_regions+0xcc>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7d22:	f1bc 0f00 	cmp.w	ip, #0
    7d26:	d022      	beq.n	7d6e <mpu_configure_regions+0x66>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    7d28:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7d2a:	4234      	tst	r4, r6
    7d2c:	d01a      	beq.n	7d64 <mpu_configure_regions+0x5c>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7d2e:	482c      	ldr	r0, [pc, #176]	; (7de0 <mpu_configure_regions+0xd8>)
    7d30:	6802      	ldr	r2, [r0, #0]
    7d32:	0752      	lsls	r2, r2, #29
    7d34:	d010      	beq.n	7d58 <mpu_configure_regions+0x50>
    7d36:	466c      	mov	r4, sp
    7d38:	b088      	sub	sp, #32
    7d3a:	466a      	mov	r2, sp
    7d3c:	4929      	ldr	r1, [pc, #164]	; (7de4 <mpu_configure_regions+0xdc>)
    7d3e:	6151      	str	r1, [r2, #20]
    7d40:	4929      	ldr	r1, [pc, #164]	; (7de8 <mpu_configure_regions+0xe0>)
    7d42:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7d46:	2304      	movs	r3, #4
    7d48:	f842 3f10 	str.w	r3, [r2, #16]!
    7d4c:	2300      	movs	r3, #0
    7d4e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7d52:	f7fc f9fd 	bl	4150 <z_impl_z_log_msg_static_create>
    7d56:	46a5      	mov	sp, r4
			return -EINVAL;
    7d58:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7d5c:	4628      	mov	r0, r5
    7d5e:	46bd      	mov	sp, r7
    7d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    7d64:	2c1f      	cmp	r4, #31
    7d66:	d9e2      	bls.n	7d2e <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    7d68:	6802      	ldr	r2, [r0, #0]
		&&
    7d6a:	4216      	tst	r6, r2
    7d6c:	d1df      	bne.n	7d2e <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7d6e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    7d70:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7d72:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7d74:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    7d78:	d91a      	bls.n	7db0 <mpu_configure_regions+0xa8>
	if (size > (1UL << 31)) {
    7d7a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7d7e:	d819      	bhi.n	7db4 <mpu_configure_regions+0xac>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7d80:	3c01      	subs	r4, #1
    7d82:	fab4 f484 	clz	r4, r4
    7d86:	f1c4 041f 	rsb	r4, r4, #31
    7d8a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7d8c:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7d90:	ea46 0604 	orr.w	r6, r6, r4
    7d94:	d910      	bls.n	7db8 <mpu_configure_regions+0xb0>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7d96:	4812      	ldr	r0, [pc, #72]	; (7de0 <mpu_configure_regions+0xd8>)
    7d98:	6803      	ldr	r3, [r0, #0]
    7d9a:	075b      	lsls	r3, r3, #29
    7d9c:	d0dc      	beq.n	7d58 <mpu_configure_regions+0x50>
    7d9e:	466c      	mov	r4, sp
    7da0:	b088      	sub	sp, #32
    7da2:	466a      	mov	r2, sp
    7da4:	4b11      	ldr	r3, [pc, #68]	; (7dec <mpu_configure_regions+0xe4>)
    7da6:	6153      	str	r3, [r2, #20]
    7da8:	4b11      	ldr	r3, [pc, #68]	; (7df0 <mpu_configure_regions+0xe8>)
    7daa:	e9c2 3506 	strd	r3, r5, [r2, #24]
    7dae:	e7ca      	b.n	7d46 <mpu_configure_regions+0x3e>
		return REGION_32B;
    7db0:	2408      	movs	r4, #8
    7db2:	e7eb      	b.n	7d8c <mpu_configure_regions+0x84>
		return REGION_4G;
    7db4:	243e      	movs	r4, #62	; 0x3e
    7db6:	e7e9      	b.n	7d8c <mpu_configure_regions+0x84>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7db8:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7dbc:	432a      	orrs	r2, r5
    7dbe:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7dc2:	f046 0601 	orr.w	r6, r6, #1
    7dc6:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7dca:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    7dce:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7dd0:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    7dd4:	3301      	adds	r3, #1
    7dd6:	300c      	adds	r0, #12
    7dd8:	e79e      	b.n	7d18 <mpu_configure_regions+0x10>
    7dda:	bf00      	nop
    7ddc:	e000ed00 	.word	0xe000ed00
    7de0:	20000b30 	.word	0x20000b30
    7de4:	0002b919 	.word	0x0002b919
    7de8:	0002b983 	.word	0x0002b983
    7dec:	0002b940 	.word	0x0002b940
    7df0:	0002b96a 	.word	0x0002b96a

00007df4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7df4:	4b04      	ldr	r3, [pc, #16]	; (7e08 <arm_core_mpu_enable+0x14>)
    7df6:	2205      	movs	r2, #5
    7df8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    7dfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e00:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7e04:	4770      	bx	lr
    7e06:	bf00      	nop
    7e08:	e000ed00 	.word	0xe000ed00

00007e0c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    7e0c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7e10:	4b02      	ldr	r3, [pc, #8]	; (7e1c <arm_core_mpu_disable+0x10>)
    7e12:	2200      	movs	r2, #0
    7e14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7e18:	4770      	bx	lr
    7e1a:	bf00      	nop
    7e1c:	e000ed00 	.word	0xe000ed00

00007e20 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    7e20:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7e22:	4c03      	ldr	r4, [pc, #12]	; (7e30 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7e24:	2301      	movs	r3, #1
    7e26:	7822      	ldrb	r2, [r4, #0]
    7e28:	f7ff ff6e 	bl	7d08 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7e2c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    7e2e:	bd10      	pop	{r4, pc}
    7e30:	20003b2e 	.word	0x20003b2e

00007e34 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    7e34:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    7e36:	4a09      	ldr	r2, [pc, #36]	; (7e5c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    7e38:	2300      	movs	r3, #0
    7e3a:	7812      	ldrb	r2, [r2, #0]
    7e3c:	f7ff ff64 	bl	7d08 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    7e40:	f110 0f16 	cmn.w	r0, #22
    7e44:	d003      	beq.n	7e4e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    7e46:	4b06      	ldr	r3, [pc, #24]	; (7e60 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    7e48:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    7e4a:	2807      	cmp	r0, #7
    7e4c:	dd00      	ble.n	7e50 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    7e4e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    7e50:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    7e54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    7e58:	3001      	adds	r0, #1
    7e5a:	e7f6      	b.n	7e4a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    7e5c:	20003b2e 	.word	0x20003b2e
    7e60:	e000ed00 	.word	0xe000ed00

00007e64 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7e64:	4914      	ldr	r1, [pc, #80]	; (7eb8 <z_arm_mpu_init+0x54>)
    7e66:	6808      	ldr	r0, [r1, #0]
    7e68:	2808      	cmp	r0, #8
{
    7e6a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7e6c:	d821      	bhi.n	7eb2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7e6e:	f7ff ffcd 	bl	7e0c <arm_core_mpu_disable>
    7e72:	4c12      	ldr	r4, [pc, #72]	; (7ebc <z_arm_mpu_init+0x58>)
    7e74:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7e76:	2200      	movs	r2, #0
    7e78:	4290      	cmp	r0, r2
    7e7a:	f101 010c 	add.w	r1, r1, #12
    7e7e:	d105      	bne.n	7e8c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7e80:	4b0f      	ldr	r3, [pc, #60]	; (7ec0 <z_arm_mpu_init+0x5c>)
    7e82:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7e84:	f7ff ffb6 	bl	7df4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    7e88:	2000      	movs	r0, #0
}
    7e8a:	bd10      	pop	{r4, pc}
    7e8c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7e90:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7e94:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    7e98:	4313      	orrs	r3, r2
    7e9a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7e9e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7ea6:	f043 0301 	orr.w	r3, r3, #1
    7eaa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7eae:	3201      	adds	r2, #1
    7eb0:	e7e2      	b.n	7e78 <z_arm_mpu_init+0x14>
		return -1;
    7eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7eb6:	e7e8      	b.n	7e8a <z_arm_mpu_init+0x26>
    7eb8:	00028254 	.word	0x00028254
    7ebc:	e000ed00 	.word	0xe000ed00
    7ec0:	20003b2e 	.word	0x20003b2e

00007ec4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    7ec4:	4b01      	ldr	r3, [pc, #4]	; (7ecc <__stdout_hook_install+0x8>)
    7ec6:	6018      	str	r0, [r3, #0]
}
    7ec8:	4770      	bx	lr
    7eca:	bf00      	nop
    7ecc:	20000238 	.word	0x20000238

00007ed0 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    7ed0:	3902      	subs	r1, #2
    7ed2:	2901      	cmp	r1, #1
    7ed4:	d802      	bhi.n	7edc <z_impl_zephyr_fputc+0xc>
    7ed6:	4b03      	ldr	r3, [pc, #12]	; (7ee4 <z_impl_zephyr_fputc+0x14>)
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	4718      	bx	r3
}
    7edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ee0:	4770      	bx	lr
    7ee2:	bf00      	nop
    7ee4:	20000238 	.word	0x20000238

00007ee8 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    7ee8:	b40c      	push	{r2, r3}
    7eea:	b510      	push	{r4, lr}
    7eec:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    7eee:	b909      	cbnz	r1, 7ef4 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    7ef0:	f10d 000b 	add.w	r0, sp, #11
    7ef4:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    7ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    7efa:	ab09      	add	r3, sp, #36	; 0x24
    7efc:	9a08      	ldr	r2, [sp, #32]
    7efe:	9400      	str	r4, [sp, #0]
    7f00:	a904      	add	r1, sp, #16
    7f02:	4805      	ldr	r0, [pc, #20]	; (7f18 <snprintf+0x30>)
    7f04:	9303      	str	r3, [sp, #12]
    7f06:	f7fa fefd 	bl	2d04 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    7f0a:	9b04      	ldr	r3, [sp, #16]
    7f0c:	701c      	strb	r4, [r3, #0]
	return r;
}
    7f0e:	b006      	add	sp, #24
    7f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f14:	b002      	add	sp, #8
    7f16:	4770      	bx	lr
    7f18:	00023c3f 	.word	0x00023c3f

00007f1c <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    7f1c:	b40f      	push	{r0, r1, r2, r3}
    7f1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7f20:	ab06      	add	r3, sp, #24
    7f22:	2100      	movs	r1, #0
    7f24:	f853 2b04 	ldr.w	r2, [r3], #4
    7f28:	4805      	ldr	r0, [pc, #20]	; (7f40 <printf+0x24>)
    7f2a:	9100      	str	r1, [sp, #0]
    7f2c:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
    7f2e:	9303      	str	r3, [sp, #12]
    7f30:	f7fa fee8 	bl	2d04 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
    7f34:	b005      	add	sp, #20
    7f36:	f85d eb04 	ldr.w	lr, [sp], #4
    7f3a:	b004      	add	sp, #16
    7f3c:	4770      	bx	lr
    7f3e:	bf00      	nop
    7f40:	00023c3b 	.word	0x00023c3b

00007f44 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    7f44:	f04f 0220 	mov.w	r2, #32
    7f48:	f3ef 8311 	mrs	r3, BASEPRI
    7f4c:	f382 8812 	msr	BASEPRI_MAX, r2
    7f50:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7f54:	4a04      	ldr	r2, [pc, #16]	; (7f68 <nordicsemi_nrf52_init+0x24>)
    7f56:	2101      	movs	r1, #1
    7f58:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    7f5c:	f383 8811 	msr	BASEPRI, r3
    7f60:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7f64:	2000      	movs	r0, #0
    7f66:	4770      	bx	lr
    7f68:	4001e000 	.word	0x4001e000

00007f6c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7f6c:	b120      	cbz	r0, 7f78 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7f6e:	4b03      	ldr	r3, [pc, #12]	; (7f7c <arch_busy_wait+0x10>)
    7f70:	0180      	lsls	r0, r0, #6
    7f72:	f043 0301 	orr.w	r3, r3, #1
    7f76:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7f78:	4770      	bx	lr
    7f7a:	bf00      	nop
    7f7c:	00027bf0 	.word	0x00027bf0

00007f80 <pwr_ctrl_init>:

static const struct gpio_dt_spec ccs_gpio =
	GPIO_DT_SPEC_GET(DT_NODELABEL(ccs_pwr), enable_gpios);

static int pwr_ctrl_init(const struct device *dev)
{
    7f80:	b510      	push	{r4, lr}
    7f82:	4c0e      	ldr	r4, [pc, #56]	; (7fbc <pwr_ctrl_init+0x3c>)
    7f84:	4620      	mov	r0, r4
    7f86:	f01e fcaf 	bl	268e8 <z_device_is_ready>
	int ret;

	if (!device_is_ready(ccs_gpio.port)) {
    7f8a:	b198      	cbz	r0, 7fb4 <pwr_ctrl_init+0x34>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    7f8c:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    7f8e:	68a1      	ldr	r1, [r4, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7f90:	6813      	ldr	r3, [r2, #0]
    7f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    7f96:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
    7f98:	680b      	ldr	r3, [r1, #0]
    7f9a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    7f9e:	210a      	movs	r1, #10
    7fa0:	4620      	mov	r0, r4
    7fa2:	4798      	blx	r3
		return -ENODEV;
	}

	ret = gpio_pin_configure_dt(&ccs_gpio, GPIO_OUTPUT_HIGH);
	if (ret < 0) {
    7fa4:	2800      	cmp	r0, #0
    7fa6:	db04      	blt.n	7fb2 <pwr_ctrl_init+0x32>
	return z_impl_k_sleep(timeout);
    7fa8:	2021      	movs	r0, #33	; 0x21
    7faa:	2100      	movs	r1, #0
    7fac:	f018 fbc8 	bl	20740 <z_impl_k_sleep>
		return ret;
	}

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */
    7fb0:	2000      	movs	r0, #0

	return 0;
}
    7fb2:	bd10      	pop	{r4, pc}
		return -ENODEV;
    7fb4:	f06f 0012 	mvn.w	r0, #18
    7fb8:	e7fb      	b.n	7fb2 <pwr_ctrl_init+0x32>
    7fba:	bf00      	nop
    7fbc:	00027690 	.word	0x00027690

00007fc0 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    7fc0:	4b0e      	ldr	r3, [pc, #56]	; (7ffc <bt_hex+0x3c>)
    7fc2:	2940      	cmp	r1, #64	; 0x40
{
    7fc4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    7fc6:	bf28      	it	cs
    7fc8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    7fca:	4c0d      	ldr	r4, [pc, #52]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fcc:	1846      	adds	r6, r0, r1
    7fce:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    7fd0:	42b0      	cmp	r0, r6
    7fd2:	f103 0302 	add.w	r3, r3, #2
    7fd6:	d104      	bne.n	7fe2 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7fd8:	2300      	movs	r3, #0
    7fda:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    7fde:	4807      	ldr	r0, [pc, #28]	; (7ffc <bt_hex+0x3c>)
    7fe0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    7fe2:	7802      	ldrb	r2, [r0, #0]
    7fe4:	0912      	lsrs	r2, r2, #4
    7fe6:	5ca2      	ldrb	r2, [r4, r2]
    7fe8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    7fec:	f810 2b01 	ldrb.w	r2, [r0], #1
    7ff0:	f002 020f 	and.w	r2, r2, #15
    7ff4:	5ca2      	ldrb	r2, [r4, r2]
    7ff6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    7ffa:	e7e9      	b.n	7fd0 <bt_hex+0x10>
    7ffc:	20003b4d 	.word	0x20003b4d
    8000:	0002ba0b 	.word	0x0002ba0b

00008004 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    8004:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    8006:	7803      	ldrb	r3, [r0, #0]
    8008:	b08b      	sub	sp, #44	; 0x2c
    800a:	4604      	mov	r4, r0
    800c:	ad07      	add	r5, sp, #28
    800e:	2b03      	cmp	r3, #3
    8010:	d821      	bhi.n	8056 <bt_addr_le_str+0x52>
    8012:	e8df f003 	tbb	[pc, r3]
    8016:	1a02      	.short	0x1a02
    8018:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    801a:	4912      	ldr	r1, [pc, #72]	; (8064 <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    801c:	4628      	mov	r0, r5
    801e:	f01b fd72 	bl	23b06 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8022:	9505      	str	r5, [sp, #20]
    8024:	7863      	ldrb	r3, [r4, #1]
    8026:	9304      	str	r3, [sp, #16]
    8028:	78a3      	ldrb	r3, [r4, #2]
    802a:	9303      	str	r3, [sp, #12]
    802c:	78e3      	ldrb	r3, [r4, #3]
    802e:	9302      	str	r3, [sp, #8]
    8030:	7923      	ldrb	r3, [r4, #4]
    8032:	9301      	str	r3, [sp, #4]
    8034:	7963      	ldrb	r3, [r4, #5]
    8036:	9300      	str	r3, [sp, #0]
    8038:	79a3      	ldrb	r3, [r4, #6]
    803a:	4a0b      	ldr	r2, [pc, #44]	; (8068 <bt_addr_le_str+0x64>)
    803c:	480b      	ldr	r0, [pc, #44]	; (806c <bt_addr_le_str+0x68>)
    803e:	211e      	movs	r1, #30
    8040:	f018 ff67 	bl	20f12 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    8044:	4809      	ldr	r0, [pc, #36]	; (806c <bt_addr_le_str+0x68>)
    8046:	b00b      	add	sp, #44	; 0x2c
    8048:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    804a:	4909      	ldr	r1, [pc, #36]	; (8070 <bt_addr_le_str+0x6c>)
    804c:	e7e6      	b.n	801c <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    804e:	4909      	ldr	r1, [pc, #36]	; (8074 <bt_addr_le_str+0x70>)
    8050:	e7e4      	b.n	801c <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    8052:	4909      	ldr	r1, [pc, #36]	; (8078 <bt_addr_le_str+0x74>)
    8054:	e7e2      	b.n	801c <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8056:	4a09      	ldr	r2, [pc, #36]	; (807c <bt_addr_le_str+0x78>)
    8058:	210a      	movs	r1, #10
    805a:	4628      	mov	r0, r5
    805c:	f018 ff59 	bl	20f12 <snprintk>
		break;
    8060:	e7df      	b.n	8022 <bt_addr_le_str+0x1e>
    8062:	bf00      	nop
    8064:	0002b9c6 	.word	0x0002b9c6
    8068:	0002b9e8 	.word	0x0002b9e8
    806c:	20003b2f 	.word	0x20003b2f
    8070:	0002b9cd 	.word	0x0002b9cd
    8074:	0002b9d4 	.word	0x0002b9d4
    8078:	0002b9de 	.word	0x0002b9de
    807c:	0002cca3 	.word	0x0002cca3

00008080 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    8080:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
    8082:	4d0a      	ldr	r5, [pc, #40]	; (80ac <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    8084:	4b0a      	ldr	r3, [pc, #40]	; (80b0 <long_wq_init+0x30>)
{
    8086:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    8088:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
    808a:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    808c:	9302      	str	r3, [sp, #8]
    808e:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    8090:	f01e feb6 	bl	26e00 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    8094:	ab02      	add	r3, sp, #8
    8096:	9300      	str	r3, [sp, #0]
    8098:	4628      	mov	r0, r5
    809a:	4906      	ldr	r1, [pc, #24]	; (80b4 <long_wq_init+0x34>)
    809c:	230a      	movs	r3, #10
    809e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    80a2:	f017 ffe9 	bl	20078 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    80a6:	4620      	mov	r0, r4
    80a8:	b005      	add	sp, #20
    80aa:	bd30      	pop	{r4, r5, pc}
    80ac:	200018c8 	.word	0x200018c8
    80b0:	0002ba1c 	.word	0x0002ba1c
    80b4:	20004bc0 	.word	0x20004bc0

000080b8 <bt_long_wq_schedule>:
{
    80b8:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    80ba:	4801      	ldr	r0, [pc, #4]	; (80c0 <bt_long_wq_schedule+0x8>)
    80bc:	f018 b814 	b.w	200e8 <k_work_schedule_for_queue>
    80c0:	200018c8 	.word	0x200018c8

000080c4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    80c4:	b430      	push	{r4, r5}
    80c6:	4603      	mov	r3, r0
    80c8:	4608      	mov	r0, r1
	switch (src->type) {
    80ca:	781a      	ldrb	r2, [r3, #0]
    80cc:	2a01      	cmp	r2, #1
    80ce:	d013      	beq.n	80f8 <uuid_to_uuid128+0x34>
    80d0:	2a02      	cmp	r2, #2
    80d2:	d026      	beq.n	8122 <uuid_to_uuid128+0x5e>
    80d4:	b972      	cbnz	r2, 80f4 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    80d6:	4a15      	ldr	r2, [pc, #84]	; (812c <uuid_to_uuid128+0x68>)
    80d8:	f102 0410 	add.w	r4, r2, #16
    80dc:	f852 5b04 	ldr.w	r5, [r2], #4
    80e0:	f841 5b04 	str.w	r5, [r1], #4
    80e4:	42a2      	cmp	r2, r4
    80e6:	d1f9      	bne.n	80dc <uuid_to_uuid128+0x18>
    80e8:	7812      	ldrb	r2, [r2, #0]
    80ea:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    80ec:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    80ee:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    80f0:	0a1b      	lsrs	r3, r3, #8
    80f2:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    80f4:	bc30      	pop	{r4, r5}
    80f6:	4770      	bx	lr
		*dst = uuid128_base;
    80f8:	4a0c      	ldr	r2, [pc, #48]	; (812c <uuid_to_uuid128+0x68>)
    80fa:	f102 0410 	add.w	r4, r2, #16
    80fe:	f852 5b04 	ldr.w	r5, [r2], #4
    8102:	f841 5b04 	str.w	r5, [r1], #4
    8106:	42a2      	cmp	r2, r4
    8108:	d1f9      	bne.n	80fe <uuid_to_uuid128+0x3a>
    810a:	7812      	ldrb	r2, [r2, #0]
    810c:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    810e:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
    8110:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    8112:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    8116:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    8118:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    811a:	0a1b      	lsrs	r3, r3, #8
    811c:	7382      	strb	r2, [r0, #14]
    811e:	7403      	strb	r3, [r0, #16]
}
    8120:	e7e8      	b.n	80f4 <uuid_to_uuid128+0x30>
}
    8122:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    8124:	2211      	movs	r2, #17
    8126:	4619      	mov	r1, r3
    8128:	f01b bd70 	b.w	23c0c <memcpy>
    812c:	0002ba25 	.word	0x0002ba25

00008130 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    8130:	b538      	push	{r3, r4, r5, lr}
    8132:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    8134:	4805      	ldr	r0, [pc, #20]	; (814c <bt_buf_get_rx+0x1c>)
    8136:	f01d fa17 	bl	25568 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    813a:	4604      	mov	r4, r0
    813c:	b120      	cbz	r0, 8148 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    813e:	2100      	movs	r1, #0
    8140:	300c      	adds	r0, #12
    8142:	f01d fa1e 	bl	25582 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    8146:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    8148:	4620      	mov	r0, r4
    814a:	bd38      	pop	{r3, r4, r5, pc}
    814c:	20000cbc 	.word	0x20000cbc

00008150 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    8150:	b510      	push	{r4, lr}
    8152:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    8154:	490a      	ldr	r1, [pc, #40]	; (8180 <bt_buf_get_cmd_complete+0x30>)
{
    8156:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    8158:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
    815c:	b920      	cbnz	r0, 8168 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    815e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8162:	2001      	movs	r0, #1
    8164:	f7ff bfe4 	b.w	8130 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    8168:	f01d fa11 	bl	2558e <net_buf_ref>
    816c:	2301      	movs	r3, #1
		buf->len = 0U;
    816e:	2100      	movs	r1, #0
    8170:	7603      	strb	r3, [r0, #24]
    8172:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
    8174:	4604      	mov	r4, r0
    8176:	300c      	adds	r0, #12
    8178:	f01d fa03 	bl	25582 <net_buf_simple_reserve>
}
    817c:	4620      	mov	r0, r4
    817e:	bd10      	pop	{r4, pc}
    8180:	20000010 	.word	0x20000010

00008184 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    8184:	b570      	push	{r4, r5, r6, lr}
    8186:	4604      	mov	r4, r0
	switch (evt) {
    8188:	2c0f      	cmp	r4, #15
{
    818a:	460d      	mov	r5, r1
    818c:	4610      	mov	r0, r2
    818e:	4619      	mov	r1, r3
	switch (evt) {
    8190:	d805      	bhi.n	819e <bt_buf_get_evt+0x1a>
    8192:	2c0d      	cmp	r4, #13
    8194:	d90d      	bls.n	81b2 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    8196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    819a:	f7ff bfd9 	b.w	8150 <bt_buf_get_cmd_complete>
	switch (evt) {
    819e:	2c13      	cmp	r4, #19
    81a0:	d107      	bne.n	81b2 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    81a2:	480c      	ldr	r0, [pc, #48]	; (81d4 <bt_buf_get_evt+0x50>)
    81a4:	f01d f9e0 	bl	25568 <net_buf_alloc_fixed>
			if (buf) {
    81a8:	4604      	mov	r4, r0
    81aa:	b938      	cbnz	r0, 81bc <bt_buf_get_evt+0x38>
{
    81ac:	2400      	movs	r4, #0
}
    81ae:	4620      	mov	r0, r4
    81b0:	bd70      	pop	{r4, r5, r6, pc}
    81b2:	4602      	mov	r2, r0
    81b4:	460b      	mov	r3, r1
		if (discardable) {
    81b6:	b145      	cbz	r5, 81ca <bt_buf_get_evt+0x46>
    81b8:	4807      	ldr	r0, [pc, #28]	; (81d8 <bt_buf_get_evt+0x54>)
    81ba:	e7f3      	b.n	81a4 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    81bc:	2100      	movs	r1, #0
    81be:	300c      	adds	r0, #12
    81c0:	f01d f9df 	bl	25582 <net_buf_simple_reserve>
    81c4:	2301      	movs	r3, #1
    81c6:	7623      	strb	r3, [r4, #24]
}
    81c8:	e7f1      	b.n	81ae <bt_buf_get_evt+0x2a>
}
    81ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    81ce:	2001      	movs	r0, #1
    81d0:	f7ff bfae 	b.w	8130 <bt_buf_get_rx>
    81d4:	20000ce8 	.word	0x20000ce8
    81d8:	20000c38 	.word	0x20000c38

000081dc <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    81dc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    81de:	4d0b      	ldr	r5, [pc, #44]	; (820c <ver_str+0x30>)
{
    81e0:	4606      	mov	r6, r0
	const char * const str[] = {
    81e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    81e4:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    81e6:	ac01      	add	r4, sp, #4
    81e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    81ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    81ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    81ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    81f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
    81f2:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    81f4:	682b      	ldr	r3, [r5, #0]
    81f6:	6023      	str	r3, [r4, #0]
		return str[ver];
    81f8:	bf9b      	ittet	ls
    81fa:	ab0e      	addls	r3, sp, #56	; 0x38
    81fc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    8200:	4803      	ldrhi	r0, [pc, #12]	; (8210 <ver_str+0x34>)
		return str[ver];
    8202:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
    8206:	b00e      	add	sp, #56	; 0x38
    8208:	bd70      	pop	{r4, r5, r6, pc}
    820a:	bf00      	nop
    820c:	00027b64 	.word	0x00027b64
    8210:	0002ba36 	.word	0x0002ba36

00008214 <hci_disconn_complete_prio>:
{
    8214:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8216:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8218:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
    821c:	781b      	ldrb	r3, [r3, #0]
    821e:	b963      	cbnz	r3, 823a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
    8220:	4620      	mov	r0, r4
    8222:	f002 fefb 	bl	b01c <bt_conn_lookup_handle>
	if (!conn) {
    8226:	4605      	mov	r5, r0
    8228:	b940      	cbnz	r0, 823c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    822a:	4b08      	ldr	r3, [pc, #32]	; (824c <hci_disconn_complete_prio+0x38>)
    822c:	881a      	ldrh	r2, [r3, #0]
    822e:	b922      	cbnz	r2, 823a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    8230:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    8234:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    8238:	8018      	strh	r0, [r3, #0]
}
    823a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    823c:	2101      	movs	r1, #1
    823e:	f002 fef5 	bl	b02c <bt_conn_set_state>
	bt_conn_unref(conn);
    8242:	4628      	mov	r0, r5
}
    8244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8248:	f01b bff4 	b.w	24234 <bt_conn_unref>
    824c:	20003ad4 	.word	0x20003ad4

00008250 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8250:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8252:	4c08      	ldr	r4, [pc, #32]	; (8274 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8254:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8256:	2205      	movs	r2, #5
    8258:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    825c:	f003 f91a 	bl	b494 <bt_conn_lookup_state_le>
		if (!conn) {
    8260:	b938      	cbnz	r0, 8272 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8262:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    8266:	4904      	ldr	r1, [pc, #16]	; (8278 <find_pending_connect.part.0+0x28>)
}
    8268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    826c:	2204      	movs	r2, #4
    826e:	f003 b911 	b.w	b494 <bt_conn_lookup_state_le>
}
    8272:	bd10      	pop	{r4, pc}
    8274:	20000010 	.word	0x20000010
    8278:	0002b9ac 	.word	0x0002b9ac

0000827c <hci_data_buf_overflow>:
{
    827c:	b598      	push	{r3, r4, r7, lr}
    827e:	4603      	mov	r3, r0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    8280:	480c      	ldr	r0, [pc, #48]	; (82b4 <hci_data_buf_overflow+0x38>)
    8282:	6802      	ldr	r2, [r0, #0]
    8284:	f012 0f06 	tst.w	r2, #6
{
    8288:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    828a:	d011      	beq.n	82b0 <hci_data_buf_overflow+0x34>
    828c:	68db      	ldr	r3, [r3, #12]
    828e:	466c      	mov	r4, sp
    8290:	b088      	sub	sp, #32
    8292:	781b      	ldrb	r3, [r3, #0]
    8294:	466a      	mov	r2, sp
    8296:	4908      	ldr	r1, [pc, #32]	; (82b8 <hci_data_buf_overflow+0x3c>)
    8298:	6151      	str	r1, [r2, #20]
    829a:	4908      	ldr	r1, [pc, #32]	; (82bc <hci_data_buf_overflow+0x40>)
    829c:	e9c2 1306 	strd	r1, r3, [r2, #24]
    82a0:	2304      	movs	r3, #4
    82a2:	f842 3f10 	str.w	r3, [r2, #16]!
    82a6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    82aa:	f01b fd6e 	bl	23d8a <z_log_msg_static_create.constprop.0>
    82ae:	46a5      	mov	sp, r4
}
    82b0:	46bd      	mov	sp, r7
    82b2:	bd98      	pop	{r3, r4, r7, pc}
    82b4:	20000afc 	.word	0x20000afc
    82b8:	0002ba3e 	.word	0x0002ba3e
    82bc:	0002c2f1 	.word	0x0002c2f1

000082c0 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    82c0:	b598      	push	{r3, r4, r7, lr}
		LOG_ERR("Unable to allocate buffer");
    82c2:	480b      	ldr	r0, [pc, #44]	; (82f0 <le_conn_param_neg_reply.part.0+0x30>)
    82c4:	6803      	ldr	r3, [r0, #0]
    82c6:	075b      	lsls	r3, r3, #29
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    82c8:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to allocate buffer");
    82ca:	d00e      	beq.n	82ea <le_conn_param_neg_reply.part.0+0x2a>
    82cc:	466c      	mov	r4, sp
    82ce:	b088      	sub	sp, #32
    82d0:	466a      	mov	r2, sp
    82d2:	4b08      	ldr	r3, [pc, #32]	; (82f4 <le_conn_param_neg_reply.part.0+0x34>)
    82d4:	6153      	str	r3, [r2, #20]
    82d6:	4b08      	ldr	r3, [pc, #32]	; (82f8 <le_conn_param_neg_reply.part.0+0x38>)
    82d8:	6193      	str	r3, [r2, #24]
    82da:	2303      	movs	r3, #3
    82dc:	f842 3f10 	str.w	r3, [r2, #16]!
    82e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    82e4:	f01b fd51 	bl	23d8a <z_log_msg_static_create.constprop.0>
    82e8:	46a5      	mov	sp, r4
}
    82ea:	46bd      	mov	sp, r7
    82ec:	bd98      	pop	{r3, r4, r7, pc}
    82ee:	bf00      	nop
    82f0:	20000afc 	.word	0x20000afc
    82f4:	0002ba6a 	.word	0x0002ba6a
    82f8:	0002c237 	.word	0x0002c237

000082fc <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    82fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    8300:	4d12      	ldr	r5, [pc, #72]	; (834c <handle_event.part.0+0x50>)
    8302:	682a      	ldr	r2, [r5, #0]
    8304:	f012 0f06 	tst.w	r2, #6
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    8308:	af00      	add	r7, sp, #0
    830a:	4604      	mov	r4, r0
    830c:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    830e:	d01a      	beq.n	8346 <handle_event.part.0+0x4a>
    8310:	8a0e      	ldrh	r6, [r1, #16]
    8312:	68d8      	ldr	r0, [r3, #12]
    8314:	4631      	mov	r1, r6
    8316:	f7ff fe53 	bl	7fc0 <bt_hex>
    831a:	46e8      	mov	r8, sp
    831c:	b08c      	sub	sp, #48	; 0x30
    831e:	466a      	mov	r2, sp
    8320:	4b0b      	ldr	r3, [pc, #44]	; (8350 <handle_event.part.0+0x54>)
    8322:	6153      	str	r3, [r2, #20]
    8324:	4b0b      	ldr	r3, [pc, #44]	; (8354 <handle_event.part.0+0x58>)
    8326:	e9c2 3406 	strd	r3, r4, [r2, #24]
    832a:	f240 5303 	movw	r3, #1283	; 0x503
    832e:	8513      	strh	r3, [r2, #40]	; 0x28
    8330:	4b09      	ldr	r3, [pc, #36]	; (8358 <handle_event.part.0+0x5c>)
    8332:	e9c2 6008 	strd	r6, r0, [r2, #32]
    8336:	f44f 5152 	mov.w	r1, #13440	; 0x3480
    833a:	f842 3f10 	str.w	r3, [r2, #16]!
    833e:	4628      	mov	r0, r5
    8340:	f01b fd23 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8344:	46c5      	mov	sp, r8
}
    8346:	46bd      	mov	sp, r7
    8348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    834c:	20000afc 	.word	0x20000afc
    8350:	0002ba88 	.word	0x0002ba88
    8354:	0002c2d7 	.word	0x0002c2d7
    8358:	01000006 	.word	0x01000006

0000835c <hci_hardware_error>:
{
    835c:	b598      	push	{r3, r4, r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    835e:	2101      	movs	r1, #1
    8360:	af00      	add	r7, sp, #0
    8362:	300c      	adds	r0, #12
    8364:	f01d f976 	bl	25654 <net_buf_simple_pull_mem>
    8368:	4603      	mov	r3, r0
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    836a:	480b      	ldr	r0, [pc, #44]	; (8398 <hci_hardware_error+0x3c>)
    836c:	6802      	ldr	r2, [r0, #0]
    836e:	0752      	lsls	r2, r2, #29
    8370:	d010      	beq.n	8394 <hci_hardware_error+0x38>
    8372:	466c      	mov	r4, sp
    8374:	b088      	sub	sp, #32
    8376:	781b      	ldrb	r3, [r3, #0]
    8378:	466a      	mov	r2, sp
    837a:	4908      	ldr	r1, [pc, #32]	; (839c <hci_hardware_error+0x40>)
    837c:	6151      	str	r1, [r2, #20]
    837e:	4908      	ldr	r1, [pc, #32]	; (83a0 <hci_hardware_error+0x44>)
    8380:	e9c2 1306 	strd	r1, r3, [r2, #24]
    8384:	2304      	movs	r3, #4
    8386:	f842 3f10 	str.w	r3, [r2, #16]!
    838a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    838e:	f01b fcfc 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8392:	46a5      	mov	sp, r4
}
    8394:	46bd      	mov	sp, r7
    8396:	bd98      	pop	{r3, r4, r7, pc}
    8398:	20000afc 	.word	0x20000afc
    839c:	0002baae 	.word	0x0002baae
    83a0:	0002c2a0 	.word	0x0002c2a0

000083a4 <le_data_len_change>:
{
    83a4:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    83a6:	68c3      	ldr	r3, [r0, #12]
    83a8:	881c      	ldrh	r4, [r3, #0]
{
    83aa:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
    83ac:	4620      	mov	r0, r4
    83ae:	f002 fe35 	bl	b01c <bt_conn_lookup_handle>
	if (!conn) {
    83b2:	b9a8      	cbnz	r0, 83e0 <le_data_len_change+0x3c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    83b4:	480c      	ldr	r0, [pc, #48]	; (83e8 <le_data_len_change+0x44>)
    83b6:	6803      	ldr	r3, [r0, #0]
    83b8:	075b      	lsls	r3, r3, #29
    83ba:	d00f      	beq.n	83dc <le_data_len_change+0x38>
    83bc:	466d      	mov	r5, sp
    83be:	b088      	sub	sp, #32
    83c0:	466a      	mov	r2, sp
    83c2:	4b0a      	ldr	r3, [pc, #40]	; (83ec <le_data_len_change+0x48>)
    83c4:	6153      	str	r3, [r2, #20]
    83c6:	4b0a      	ldr	r3, [pc, #40]	; (83f0 <le_data_len_change+0x4c>)
    83c8:	e9c2 3406 	strd	r3, r4, [r2, #24]
    83cc:	2304      	movs	r3, #4
    83ce:	f842 3f10 	str.w	r3, [r2, #16]!
    83d2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    83d6:	f01b fcd8 	bl	23d8a <z_log_msg_static_create.constprop.0>
    83da:	46ad      	mov	sp, r5
}
    83dc:	46bd      	mov	sp, r7
    83de:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    83e0:	f01b ff28 	bl	24234 <bt_conn_unref>
    83e4:	e7fa      	b.n	83dc <le_data_len_change+0x38>
    83e6:	bf00      	nop
    83e8:	20000afc 	.word	0x20000afc
    83ec:	0002bad4 	.word	0x0002bad4
    83f0:	0002c261 	.word	0x0002c261

000083f4 <le_phy_update_complete>:
{
    83f4:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    83f6:	68c3      	ldr	r3, [r0, #12]
    83f8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
    83fc:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
    83fe:	4620      	mov	r0, r4
    8400:	f002 fe0c 	bl	b01c <bt_conn_lookup_handle>
	if (!conn) {
    8404:	b9a8      	cbnz	r0, 8432 <le_phy_update_complete+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    8406:	480c      	ldr	r0, [pc, #48]	; (8438 <le_phy_update_complete+0x44>)
    8408:	6803      	ldr	r3, [r0, #0]
    840a:	075b      	lsls	r3, r3, #29
    840c:	d00f      	beq.n	842e <le_phy_update_complete+0x3a>
    840e:	466d      	mov	r5, sp
    8410:	b088      	sub	sp, #32
    8412:	466a      	mov	r2, sp
    8414:	4b09      	ldr	r3, [pc, #36]	; (843c <le_phy_update_complete+0x48>)
    8416:	6153      	str	r3, [r2, #20]
    8418:	4b09      	ldr	r3, [pc, #36]	; (8440 <le_phy_update_complete+0x4c>)
    841a:	e9c2 3406 	strd	r3, r4, [r2, #24]
    841e:	2304      	movs	r3, #4
    8420:	f842 3f10 	str.w	r3, [r2, #16]!
    8424:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    8428:	f01b fcaf 	bl	23d8a <z_log_msg_static_create.constprop.0>
    842c:	46ad      	mov	sp, r5
}
    842e:	46bd      	mov	sp, r7
    8430:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    8432:	f01b feff 	bl	24234 <bt_conn_unref>
    8436:	e7fa      	b.n	842e <le_phy_update_complete+0x3a>
    8438:	20000afc 	.word	0x20000afc
    843c:	0002bad4 	.word	0x0002bad4
    8440:	0002c274 	.word	0x0002c274

00008444 <hci_disconn_complete>:
{
    8444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8448:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
    844a:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    844c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
{
    8450:	af00      	add	r7, sp, #0
	if (evt->status) {
    8452:	b9c6      	cbnz	r6, 8486 <hci_disconn_complete+0x42>
	conn = bt_conn_lookup_handle(handle);
    8454:	4640      	mov	r0, r8
    8456:	f002 fde1 	bl	b01c <bt_conn_lookup_handle>
	if (!conn) {
    845a:	4604      	mov	r4, r0
    845c:	b9b0      	cbnz	r0, 848c <hci_disconn_complete+0x48>
		LOG_ERR("Unable to look up conn with handle %u", handle);
    845e:	4810      	ldr	r0, [pc, #64]	; (84a0 <hci_disconn_complete+0x5c>)
    8460:	6803      	ldr	r3, [r0, #0]
    8462:	075b      	lsls	r3, r3, #29
    8464:	d00f      	beq.n	8486 <hci_disconn_complete+0x42>
    8466:	466c      	mov	r4, sp
    8468:	b088      	sub	sp, #32
    846a:	466a      	mov	r2, sp
    846c:	4b0d      	ldr	r3, [pc, #52]	; (84a4 <hci_disconn_complete+0x60>)
    846e:	6153      	str	r3, [r2, #20]
    8470:	4b0d      	ldr	r3, [pc, #52]	; (84a8 <hci_disconn_complete+0x64>)
    8472:	e9c2 3806 	strd	r3, r8, [r2, #24]
    8476:	2304      	movs	r3, #4
    8478:	f842 3f10 	str.w	r3, [r2, #16]!
    847c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    8480:	f01b fc83 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8484:	46a5      	mov	sp, r4
}
    8486:	46bd      	mov	sp, r7
    8488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    848c:	78eb      	ldrb	r3, [r5, #3]
    848e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8490:	4631      	mov	r1, r6
    8492:	f002 fdcb 	bl	b02c <bt_conn_set_state>
		bt_conn_unref(conn);
    8496:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    8498:	f01b fecc 	bl	24234 <bt_conn_unref>
    849c:	e7f3      	b.n	8486 <hci_disconn_complete+0x42>
    849e:	bf00      	nop
    84a0:	20000afc 	.word	0x20000afc
    84a4:	0002bafc 	.word	0x0002bafc
    84a8:	0002c28b 	.word	0x0002c28b

000084ac <handle_event>:
{
    84ac:	b5b0      	push	{r4, r5, r7, lr}
    84ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    84b2:	af00      	add	r7, sp, #0
    84b4:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
    84b6:	4293      	cmp	r3, r2
    84b8:	d103      	bne.n	84c2 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    84ba:	4620      	mov	r0, r4
    84bc:	f7ff ff1e 	bl	82fc <handle_event.part.0>
}
    84c0:	e01d      	b.n	84fe <handle_event+0x52>
		if (handler->event != event) {
    84c2:	4610      	mov	r0, r2
    84c4:	f810 5b08 	ldrb.w	r5, [r0], #8
    84c8:	42a5      	cmp	r5, r4
    84ca:	d11e      	bne.n	850a <handle_event+0x5e>
		if (buf->len < handler->min_len) {
    84cc:	8a0b      	ldrh	r3, [r1, #16]
    84ce:	7850      	ldrb	r0, [r2, #1]
    84d0:	4298      	cmp	r0, r3
    84d2:	d916      	bls.n	8502 <handle_event+0x56>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    84d4:	480e      	ldr	r0, [pc, #56]	; (8510 <handle_event+0x64>)
    84d6:	6802      	ldr	r2, [r0, #0]
    84d8:	0752      	lsls	r2, r2, #29
    84da:	d010      	beq.n	84fe <handle_event+0x52>
    84dc:	466d      	mov	r5, sp
    84de:	b08a      	sub	sp, #40	; 0x28
    84e0:	466a      	mov	r2, sp
    84e2:	490c      	ldr	r1, [pc, #48]	; (8514 <handle_event+0x68>)
    84e4:	6151      	str	r1, [r2, #20]
    84e6:	490c      	ldr	r1, [pc, #48]	; (8518 <handle_event+0x6c>)
    84e8:	6214      	str	r4, [r2, #32]
    84ea:	e9c2 1306 	strd	r1, r3, [r2, #24]
    84ee:	2305      	movs	r3, #5
    84f0:	f842 3f10 	str.w	r3, [r2, #16]!
    84f4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    84f8:	f01b fc47 	bl	23d8a <z_log_msg_static_create.constprop.0>
    84fc:	46ad      	mov	sp, r5
}
    84fe:	46bd      	mov	sp, r7
    8500:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    8502:	6853      	ldr	r3, [r2, #4]
    8504:	4608      	mov	r0, r1
    8506:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    8508:	e7f9      	b.n	84fe <handle_event+0x52>
    850a:	4602      	mov	r2, r0
    850c:	e7d3      	b.n	84b6 <handle_event+0xa>
    850e:	bf00      	nop
    8510:	20000afc 	.word	0x20000afc
    8514:	0002bb26 	.word	0x0002bb26
    8518:	0002c2c3 	.word	0x0002c2c3

0000851c <hci_le_meta_event>:
{
    851c:	b510      	push	{r4, lr}
    851e:	2101      	movs	r1, #1
    8520:	4604      	mov	r4, r0
    8522:	300c      	adds	r0, #12
    8524:	f01d f896 	bl	25654 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8528:	4621      	mov	r1, r4
    852a:	4a03      	ldr	r2, [pc, #12]	; (8538 <hci_le_meta_event+0x1c>)
    852c:	7800      	ldrb	r0, [r0, #0]
}
    852e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8532:	2307      	movs	r3, #7
    8534:	f7ff bfba 	b.w	84ac <handle_event>
    8538:	0002831c 	.word	0x0002831c

0000853c <le_remote_feat_complete>:
{
    853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    853e:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8540:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    8544:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
    8546:	4630      	mov	r0, r6
    8548:	f002 fd68 	bl	b01c <bt_conn_lookup_handle>
	if (!conn) {
    854c:	4604      	mov	r4, r0
    854e:	b9a8      	cbnz	r0, 857c <le_remote_feat_complete+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    8550:	4812      	ldr	r0, [pc, #72]	; (859c <le_remote_feat_complete+0x60>)
    8552:	6803      	ldr	r3, [r0, #0]
    8554:	075b      	lsls	r3, r3, #29
    8556:	d00f      	beq.n	8578 <le_remote_feat_complete+0x3c>
    8558:	466c      	mov	r4, sp
    855a:	b088      	sub	sp, #32
    855c:	466a      	mov	r2, sp
    855e:	4b10      	ldr	r3, [pc, #64]	; (85a0 <le_remote_feat_complete+0x64>)
    8560:	6153      	str	r3, [r2, #20]
    8562:	4b10      	ldr	r3, [pc, #64]	; (85a4 <le_remote_feat_complete+0x68>)
    8564:	e9c2 3606 	strd	r3, r6, [r2, #24]
    8568:	2304      	movs	r3, #4
    856a:	f842 3f10 	str.w	r3, [r2, #16]!
    856e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    8572:	f01b fc0a 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8576:	46a5      	mov	sp, r4
}
    8578:	46bd      	mov	sp, r7
    857a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    857c:	782b      	ldrb	r3, [r5, #0]
    857e:	b923      	cbnz	r3, 858a <le_remote_feat_complete+0x4e>
		memcpy(conn->le.features, evt->features,
    8580:	2208      	movs	r2, #8
    8582:	1ce9      	adds	r1, r5, #3
    8584:	30ad      	adds	r0, #173	; 0xad
    8586:	f01b fb41 	bl	23c0c <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    858a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    858e:	1d20      	adds	r0, r4, #4
    8590:	f01b fbec 	bl	23d6c <atomic_or>
	bt_conn_unref(conn);
    8594:	4620      	mov	r0, r4
    8596:	f01b fe4d 	bl	24234 <bt_conn_unref>
    859a:	e7ed      	b.n	8578 <le_remote_feat_complete+0x3c>
    859c:	20000afc 	.word	0x20000afc
    85a0:	0002bad4 	.word	0x0002bad4
    85a4:	0002c21f 	.word	0x0002c21f

000085a8 <hci_cmd_done>:
{
    85a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    85ac:	4606      	mov	r6, r0
    85ae:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    85b0:	7a90      	ldrb	r0, [r2, #10]
    85b2:	f8df 912c 	ldr.w	r9, [pc, #300]	; 86e0 <hci_cmd_done+0x138>
{
    85b6:	4688      	mov	r8, r1
    85b8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    85ba:	f012 fb25 	bl	1ac08 <net_buf_pool_get>
    85be:	4581      	cmp	r9, r0
    85c0:	d021      	beq.n	8606 <hci_cmd_done+0x5e>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    85c2:	4d48      	ldr	r5, [pc, #288]	; (86e4 <hci_cmd_done+0x13c>)
    85c4:	682b      	ldr	r3, [r5, #0]
    85c6:	f013 0f06 	tst.w	r3, #6
    85ca:	d019      	beq.n	8600 <hci_cmd_done+0x58>
    85cc:	f894 800a 	ldrb.w	r8, [r4, #10]
    85d0:	4640      	mov	r0, r8
    85d2:	f012 fb19 	bl	1ac08 <net_buf_pool_get>
    85d6:	466c      	mov	r4, sp
    85d8:	b08c      	sub	sp, #48	; 0x30
    85da:	466a      	mov	r2, sp
    85dc:	4b42      	ldr	r3, [pc, #264]	; (86e8 <hci_cmd_done+0x140>)
    85de:	6153      	str	r3, [r2, #20]
    85e0:	4b42      	ldr	r3, [pc, #264]	; (86ec <hci_cmd_done+0x144>)
    85e2:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
    85e6:	e9c2 3606 	strd	r3, r6, [r2, #24]
    85ea:	2307      	movs	r3, #7
    85ec:	e9c2 8008 	strd	r8, r0, [r2, #32]
    85f0:	f842 3f10 	str.w	r3, [r2, #16]!
    85f4:	f44f 5162 	mov.w	r1, #14464	; 0x3880
    85f8:	4628      	mov	r0, r5
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    85fa:	f01b fbc6 	bl	23d8a <z_log_msg_static_create.constprop.0>
    85fe:	46a5      	mov	sp, r4
}
    8600:	46bd      	mov	sp, r7
    8602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    8606:	4620      	mov	r0, r4
    8608:	f012 fb06 	bl	1ac18 <net_buf_id>
    860c:	4d38      	ldr	r5, [pc, #224]	; (86f0 <hci_cmd_done+0x148>)
    860e:	f04f 090c 	mov.w	r9, #12
    8612:	fb09 5000 	mla	r0, r9, r0, r5
    8616:	8843      	ldrh	r3, [r0, #2]
    8618:	42b3      	cmp	r3, r6
    861a:	d01c      	beq.n	8656 <hci_cmd_done+0xae>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    861c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 86e4 <hci_cmd_done+0x13c>
    8620:	f8d8 3000 	ldr.w	r3, [r8]
    8624:	f013 0f06 	tst.w	r3, #6
    8628:	d0ea      	beq.n	8600 <hci_cmd_done+0x58>
    862a:	4620      	mov	r0, r4
    862c:	f012 faf4 	bl	1ac18 <net_buf_id>
    8630:	fb09 5000 	mla	r0, r9, r0, r5
    8634:	466c      	mov	r4, sp
    8636:	b08a      	sub	sp, #40	; 0x28
    8638:	8843      	ldrh	r3, [r0, #2]
    863a:	466a      	mov	r2, sp
    863c:	492d      	ldr	r1, [pc, #180]	; (86f4 <hci_cmd_done+0x14c>)
    863e:	6151      	str	r1, [r2, #20]
    8640:	492a      	ldr	r1, [pc, #168]	; (86ec <hci_cmd_done+0x144>)
    8642:	6213      	str	r3, [r2, #32]
    8644:	2305      	movs	r3, #5
    8646:	e9c2 1606 	strd	r1, r6, [r2, #24]
    864a:	4640      	mov	r0, r8
    864c:	f842 3f10 	str.w	r3, [r2, #16]!
    8650:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    8654:	e7d1      	b.n	85fa <hci_cmd_done+0x52>
	if (bt_dev.sent_cmd) {
    8656:	4e28      	ldr	r6, [pc, #160]	; (86f8 <hci_cmd_done+0x150>)
    8658:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
    865c:	b120      	cbz	r0, 8668 <hci_cmd_done+0xc0>
		net_buf_unref(bt_dev.sent_cmd);
    865e:	f012 fb95 	bl	1ad8c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8662:	2300      	movs	r3, #0
    8664:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    8668:	4620      	mov	r0, r4
    866a:	f012 fad5 	bl	1ac18 <net_buf_id>
    866e:	260c      	movs	r6, #12
    8670:	fb06 5000 	mla	r0, r6, r0, r5
    8674:	6843      	ldr	r3, [r0, #4]
    8676:	b1ab      	cbz	r3, 86a4 <hci_cmd_done+0xfc>
    8678:	f1b8 0f00 	cmp.w	r8, #0
    867c:	d112      	bne.n	86a4 <hci_cmd_done+0xfc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    867e:	4620      	mov	r0, r4
    8680:	f012 faca 	bl	1ac18 <net_buf_id>
    8684:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    8688:	2101      	movs	r1, #1
    868a:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    868c:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    8690:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    8692:	f003 061f 	and.w	r6, r3, #31
    8696:	40b1      	lsls	r1, r6
	if (val) {
    8698:	095b      	lsrs	r3, r3, #5
    869a:	b1da      	cbz	r2, 86d4 <hci_cmd_done+0x12c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    869c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    86a0:	f01b fb64 	bl	23d6c <atomic_or>
	if (cmd(buf)->sync) {
    86a4:	4620      	mov	r0, r4
    86a6:	f012 fab7 	bl	1ac18 <net_buf_id>
    86aa:	260c      	movs	r6, #12
    86ac:	fb06 5000 	mla	r0, r6, r0, r5
    86b0:	6883      	ldr	r3, [r0, #8]
    86b2:	2b00      	cmp	r3, #0
    86b4:	d0a4      	beq.n	8600 <hci_cmd_done+0x58>
		cmd(buf)->status = status;
    86b6:	4620      	mov	r0, r4
    86b8:	f012 faae 	bl	1ac18 <net_buf_id>
    86bc:	4370      	muls	r0, r6
    86be:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    86c2:	4620      	mov	r0, r4
    86c4:	f012 faa8 	bl	1ac18 <net_buf_id>
    86c8:	fb06 5500 	mla	r5, r6, r0, r5
    86cc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    86ce:	f017 fb2d 	bl	1fd2c <z_impl_k_sem_give>
}
    86d2:	e795      	b.n	8600 <hci_cmd_done+0x58>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    86d4:	43c9      	mvns	r1, r1
    86d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    86da:	f01b fb59 	bl	23d90 <atomic_and.isra.0>
    86de:	e7e1      	b.n	86a4 <hci_cmd_done+0xfc>
    86e0:	20000c90 	.word	0x20000c90
    86e4:	20000afc 	.word	0x20000afc
    86e8:	0002bb4c 	.word	0x0002bb4c
    86ec:	0002c2e4 	.word	0x0002c2e4
    86f0:	20002574 	.word	0x20002574
    86f4:	0002bb85 	.word	0x0002bb85
    86f8:	20000010 	.word	0x20000010

000086fc <hci_cmd_status>:
{
    86fc:	b538      	push	{r3, r4, r5, lr}
    86fe:	2104      	movs	r1, #4
    8700:	4604      	mov	r4, r0
    8702:	300c      	adds	r0, #12
    8704:	f01c ffa6 	bl	25654 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    8708:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    870a:	7801      	ldrb	r1, [r0, #0]
    870c:	8840      	ldrh	r0, [r0, #2]
    870e:	4622      	mov	r2, r4
    8710:	f7ff ff4a 	bl	85a8 <hci_cmd_done>
	if (ncmd) {
    8714:	b125      	cbz	r5, 8720 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    8716:	4803      	ldr	r0, [pc, #12]	; (8724 <hci_cmd_status+0x28>)
}
    8718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    871c:	f017 bb06 	b.w	1fd2c <z_impl_k_sem_give>
    8720:	bd38      	pop	{r3, r4, r5, pc}
    8722:	bf00      	nop
    8724:	20000128 	.word	0x20000128

00008728 <hci_cmd_complete>:
{
    8728:	b538      	push	{r3, r4, r5, lr}
    872a:	2103      	movs	r1, #3
    872c:	4604      	mov	r4, r0
    872e:	300c      	adds	r0, #12
    8730:	f01c ff90 	bl	25654 <net_buf_simple_pull_mem>
	status = buf->data[0];
    8734:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    8736:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    8738:	7819      	ldrb	r1, [r3, #0]
    873a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    873e:	4622      	mov	r2, r4
    8740:	f7ff ff32 	bl	85a8 <hci_cmd_done>
	if (ncmd) {
    8744:	b125      	cbz	r5, 8750 <hci_cmd_complete+0x28>
    8746:	4803      	ldr	r0, [pc, #12]	; (8754 <hci_cmd_complete+0x2c>)
}
    8748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    874c:	f017 baee 	b.w	1fd2c <z_impl_k_sem_give>
    8750:	bd38      	pop	{r3, r4, r5, pc}
    8752:	bf00      	nop
    8754:	20000128 	.word	0x20000128

00008758 <hci_num_completed_packets>:
{
    8758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    875c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    875e:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
    8762:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8880 <hci_num_completed_packets+0x128>
{
    8766:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
    8768:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
    876a:	f898 3000 	ldrb.w	r3, [r8]
    876e:	429d      	cmp	r5, r3
    8770:	db02      	blt.n	8778 <hci_num_completed_packets+0x20>
}
    8772:	46bd      	mov	sp, r7
    8774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    8778:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    877c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    8780:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    8784:	4658      	mov	r0, fp
    8786:	f002 fc49 	bl	b01c <bt_conn_lookup_handle>
		if (!conn) {
    878a:	4604      	mov	r4, r0
    878c:	b1d8      	cbz	r0, 87c6 <hci_num_completed_packets+0x6e>
			k_work_submit(&conn->tx_complete_work);
    878e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    8792:	2e00      	cmp	r6, #0
    8794:	d048      	beq.n	8828 <hci_num_completed_packets+0xd0>
	__asm__ volatile(
    8796:	f04f 0320 	mov.w	r3, #32
    879a:	f3ef 8211 	mrs	r2, BASEPRI
    879e:	f383 8812 	msr	BASEPRI_MAX, r3
    87a2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    87a6:	69e3      	ldr	r3, [r4, #28]
    87a8:	b323      	cbz	r3, 87f4 <hci_num_completed_packets+0x9c>
				conn->pending_no_cb--;
    87aa:	3b01      	subs	r3, #1
    87ac:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    87ae:	f382 8811 	msr	BASEPRI, r2
    87b2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    87b6:	4620      	mov	r0, r4
    87b8:	f002 fa56 	bl	ac68 <bt_conn_get_pkts>
    87bc:	3e01      	subs	r6, #1
    87be:	f017 fab5 	bl	1fd2c <z_impl_k_sem_give>
    87c2:	b2b6      	uxth	r6, r6
    87c4:	e7e5      	b.n	8792 <hci_num_completed_packets+0x3a>
			LOG_ERR("No connection for handle %u", handle);
    87c6:	f8da 3000 	ldr.w	r3, [sl]
    87ca:	075a      	lsls	r2, r3, #29
    87cc:	d010      	beq.n	87f0 <hci_num_completed_packets+0x98>
    87ce:	466c      	mov	r4, sp
    87d0:	b088      	sub	sp, #32
    87d2:	466a      	mov	r2, sp
    87d4:	4b2b      	ldr	r3, [pc, #172]	; (8884 <hci_num_completed_packets+0x12c>)
    87d6:	6153      	str	r3, [r2, #20]
    87d8:	4b2b      	ldr	r3, [pc, #172]	; (8888 <hci_num_completed_packets+0x130>)
    87da:	4829      	ldr	r0, [pc, #164]	; (8880 <hci_num_completed_packets+0x128>)
    87dc:	e9c2 3b06 	strd	r3, fp, [r2, #24]
    87e0:	2304      	movs	r3, #4
    87e2:	f842 3f10 	str.w	r3, [r2, #16]!
    87e6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    87ea:	f01b face 	bl	23d8a <z_log_msg_static_create.constprop.0>
    87ee:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    87f0:	3501      	adds	r5, #1
    87f2:	e7ba      	b.n	876a <hci_num_completed_packets+0x12>
	return list->head;
    87f4:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    87f6:	b9db      	cbnz	r3, 8830 <hci_num_completed_packets+0xd8>
    87f8:	f382 8811 	msr	BASEPRI, r2
    87fc:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
    8800:	f8da 3000 	ldr.w	r3, [sl]
    8804:	075b      	lsls	r3, r3, #29
    8806:	d00f      	beq.n	8828 <hci_num_completed_packets+0xd0>
    8808:	466e      	mov	r6, sp
    880a:	b088      	sub	sp, #32
    880c:	466a      	mov	r2, sp
    880e:	4b1f      	ldr	r3, [pc, #124]	; (888c <hci_num_completed_packets+0x134>)
    8810:	6153      	str	r3, [r2, #20]
    8812:	4b1d      	ldr	r3, [pc, #116]	; (8888 <hci_num_completed_packets+0x130>)
    8814:	6193      	str	r3, [r2, #24]
    8816:	2303      	movs	r3, #3
    8818:	f842 3f10 	str.w	r3, [r2, #16]!
    881c:	4818      	ldr	r0, [pc, #96]	; (8880 <hci_num_completed_packets+0x128>)
    881e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8822:	f01b fab2 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8826:	46b5      	mov	sp, r6
		bt_conn_unref(conn);
    8828:	4620      	mov	r0, r4
    882a:	f01b fd03 	bl	24234 <bt_conn_unref>
    882e:	e7df      	b.n	87f0 <hci_num_completed_packets+0x98>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8830:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    8832:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    8834:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8836:	428b      	cmp	r3, r1
	list->tail = node;
    8838:	bf08      	it	eq
    883a:	61a0      	streq	r0, [r4, #24]
    883c:	f382 8811 	msr	BASEPRI, r2
    8840:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    8844:	f04f 0220 	mov.w	r2, #32
    8848:	f3ef 8111 	mrs	r1, BASEPRI
    884c:	f382 8812 	msr	BASEPRI_MAX, r2
    8850:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    8854:	68da      	ldr	r2, [r3, #12]
    8856:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    8858:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    885c:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    8860:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    8862:	b94a      	cbnz	r2, 8878 <hci_num_completed_packets+0x120>
	list->head = node;
    8864:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    8868:	f381 8811 	msr	BASEPRI, r1
    886c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    8870:	4658      	mov	r0, fp
    8872:	f017 fbfb 	bl	2006c <k_work_submit>
    8876:	e79e      	b.n	87b6 <hci_num_completed_packets+0x5e>
	parent->next = child;
    8878:	6013      	str	r3, [r2, #0]
	list->tail = node;
    887a:	6263      	str	r3, [r4, #36]	; 0x24
}
    887c:	e7f4      	b.n	8868 <hci_num_completed_packets+0x110>
    887e:	bf00      	nop
    8880:	20000afc 	.word	0x20000afc
    8884:	0002bbbc 	.word	0x0002bbbc
    8888:	0002c307 	.word	0x0002c307
    888c:	0002bbdc 	.word	0x0002bbdc

00008890 <le_conn_update_complete>:
{
    8890:	b5f0      	push	{r4, r5, r6, r7, lr}
    8892:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    8894:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
    8896:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    889a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
    889c:	4630      	mov	r0, r6
    889e:	f002 fbbd 	bl	b01c <bt_conn_lookup_handle>
	if (!conn) {
    88a2:	4604      	mov	r4, r0
    88a4:	b9b0      	cbnz	r0, 88d4 <le_conn_update_complete+0x44>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    88a6:	4832      	ldr	r0, [pc, #200]	; (8970 <le_conn_update_complete+0xe0>)
    88a8:	6803      	ldr	r3, [r0, #0]
    88aa:	0759      	lsls	r1, r3, #29
    88ac:	d00f      	beq.n	88ce <le_conn_update_complete+0x3e>
    88ae:	466c      	mov	r4, sp
    88b0:	b088      	sub	sp, #32
    88b2:	466a      	mov	r2, sp
    88b4:	4b2f      	ldr	r3, [pc, #188]	; (8974 <le_conn_update_complete+0xe4>)
    88b6:	6153      	str	r3, [r2, #20]
    88b8:	4b2f      	ldr	r3, [pc, #188]	; (8978 <le_conn_update_complete+0xe8>)
    88ba:	e9c2 3606 	strd	r3, r6, [r2, #24]
    88be:	2304      	movs	r3, #4
    88c0:	f842 3f10 	str.w	r3, [r2, #16]!
    88c4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    88c8:	f01b fa5f 	bl	23d8a <z_log_msg_static_create.constprop.0>
    88cc:	46a5      	mov	sp, r4
}
    88ce:	370c      	adds	r7, #12
    88d0:	46bd      	mov	sp, r7
    88d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    88d4:	782b      	ldrb	r3, [r5, #0]
    88d6:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
    88d8:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    88dc:	d117      	bne.n	890e <le_conn_update_complete+0x7e>
    88de:	78c3      	ldrb	r3, [r0, #3]
    88e0:	2b01      	cmp	r3, #1
    88e2:	d128      	bne.n	8936 <le_conn_update_complete+0xa6>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    88e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    88e8:	4630      	mov	r0, r6
    88ea:	f01b fa3f 	bl	23d6c <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
    88ee:	0542      	lsls	r2, r0, #21
    88f0:	d40d      	bmi.n	890e <le_conn_update_complete+0x7e>
		param.interval_min = conn->le.interval_min;
    88f2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    88f6:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    88f8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    88fc:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    88fe:	4639      	mov	r1, r7
    8900:	4620      	mov	r0, r4
    8902:	f003 f901 	bl	bb08 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
    8906:	4620      	mov	r0, r4
    8908:	f01b fc94 	bl	24234 <bt_conn_unref>
    890c:	e7df      	b.n	88ce <le_conn_update_complete+0x3e>
		if (!evt->status) {
    890e:	782b      	ldrb	r3, [r5, #0]
    8910:	b98b      	cbnz	r3, 8936 <le_conn_update_complete+0xa6>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
    8912:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    8916:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
    891a:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    891e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8922:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    8926:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    892a:	f46f 7180 	mvn.w	r1, #256	; 0x100
    892e:	4630      	mov	r0, r6
    8930:	f01b fa2e 	bl	23d90 <atomic_and.isra.0>
}
    8934:	e017      	b.n	8966 <le_conn_update_complete+0xd6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8936:	f3bf 8f5b 	dmb	ish
    893a:	6863      	ldr	r3, [r4, #4]
    893c:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
    8940:	05db      	lsls	r3, r3, #23
    8942:	d5f2      	bpl.n	892a <le_conn_update_complete+0x9a>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
    8944:	782b      	ldrb	r3, [r5, #0]
    8946:	2b20      	cmp	r3, #32
    8948:	d1ef      	bne.n	892a <le_conn_update_complete+0x9a>
			   conn->le.conn_param_retry_countdown) {
    894a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
    894e:	2b00      	cmp	r3, #0
    8950:	d0eb      	beq.n	892a <le_conn_update_complete+0x9a>
			conn->le.conn_param_retry_countdown--;
    8952:	3b01      	subs	r3, #1
    8954:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    8958:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    895c:	2300      	movs	r3, #0
    895e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    8962:	f017 fbeb 	bl	2013c <k_work_schedule>
		notify_le_param_updated(conn);
    8966:	4620      	mov	r0, r4
    8968:	f002 fc9a 	bl	b2a0 <notify_le_param_updated>
    896c:	e7cb      	b.n	8906 <le_conn_update_complete+0x76>
    896e:	bf00      	nop
    8970:	20000afc 	.word	0x20000afc
    8974:	0002bad4 	.word	0x0002bad4
    8978:	0002c207 	.word	0x0002c207

0000897c <bt_hci_cmd_state_set_init>:
{
    897c:	b510      	push	{r4, lr}
	state->bit = bit;
    897e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    8982:	f89d 3008 	ldrb.w	r3, [sp, #8]
    8986:	720b      	strb	r3, [r1, #8]
{
    8988:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    898a:	f012 f945 	bl	1ac18 <net_buf_id>
    898e:	4b03      	ldr	r3, [pc, #12]	; (899c <bt_hci_cmd_state_set_init+0x20>)
    8990:	220c      	movs	r2, #12
    8992:	fb02 3300 	mla	r3, r2, r0, r3
    8996:	605c      	str	r4, [r3, #4]
}
    8998:	bd10      	pop	{r4, pc}
    899a:	bf00      	nop
    899c:	20002574 	.word	0x20002574

000089a0 <bt_hci_cmd_create>:
{
    89a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    89a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    89a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    89ac:	4606      	mov	r6, r0
    89ae:	4817      	ldr	r0, [pc, #92]	; (8a0c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    89b0:	4d17      	ldr	r5, [pc, #92]	; (8a10 <bt_hci_cmd_create+0x70>)
{
    89b2:	460f      	mov	r7, r1
    89b4:	f01c fdd8 	bl	25568 <net_buf_alloc_fixed>
    89b8:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    89ba:	f100 0a0c 	add.w	sl, r0, #12
    89be:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    89c0:	f04f 0800 	mov.w	r8, #0
    89c4:	4650      	mov	r0, sl
    89c6:	f01c fddc 	bl	25582 <net_buf_simple_reserve>
    89ca:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    89ce:	4620      	mov	r0, r4
    89d0:	f012 f922 	bl	1ac18 <net_buf_id>
    89d4:	f04f 090c 	mov.w	r9, #12
    89d8:	fb09 5000 	mla	r0, r9, r0, r5
    89dc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    89de:	4620      	mov	r0, r4
    89e0:	f012 f91a 	bl	1ac18 <net_buf_id>
    89e4:	fb09 5000 	mla	r0, r9, r0, r5
    89e8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    89ec:	4620      	mov	r0, r4
    89ee:	f012 f913 	bl	1ac18 <net_buf_id>
    89f2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    89f6:	2103      	movs	r1, #3
    89f8:	f8c5 8004 	str.w	r8, [r5, #4]
    89fc:	4650      	mov	r0, sl
    89fe:	f01c fdf8 	bl	255f2 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    8a02:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    8a04:	7087      	strb	r7, [r0, #2]
}
    8a06:	4620      	mov	r0, r4
    8a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a0c:	20000c90 	.word	0x20000c90
    8a10:	20002574 	.word	0x20002574

00008a14 <bt_hci_cmd_send_sync>:
{
    8a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8a18:	b087      	sub	sp, #28
    8a1a:	4680      	mov	r8, r0
    8a1c:	af00      	add	r7, sp, #0
    8a1e:	4615      	mov	r5, r2
	if (!buf) {
    8a20:	460c      	mov	r4, r1
    8a22:	b921      	cbnz	r1, 8a2e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    8a24:	f7ff ffbc 	bl	89a0 <bt_hci_cmd_create>
		if (!buf) {
    8a28:	4604      	mov	r4, r0
    8a2a:	2800      	cmp	r0, #0
    8a2c:	d060      	beq.n	8af0 <bt_hci_cmd_send_sync+0xdc>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8a2e:	2201      	movs	r2, #1
    8a30:	2100      	movs	r1, #0
    8a32:	4638      	mov	r0, r7
    8a34:	f01e f924 	bl	26c80 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8a38:	4620      	mov	r0, r4
    8a3a:	f012 f8ed 	bl	1ac18 <net_buf_id>
    8a3e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8af8 <bt_hci_cmd_send_sync+0xe4>
    8a42:	230c      	movs	r3, #12
    8a44:	fb03 9000 	mla	r0, r3, r0, r9
    8a48:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    8a4a:	4620      	mov	r0, r4
    8a4c:	f01c fd9f 	bl	2558e <net_buf_ref>
    8a50:	4601      	mov	r1, r0
    8a52:	482a      	ldr	r0, [pc, #168]	; (8afc <bt_hci_cmd_send_sync+0xe8>)
    8a54:	f01c fd99 	bl	2558a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8a58:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8a5c:	2300      	movs	r3, #0
    8a5e:	4638      	mov	r0, r7
    8a60:	f017 f98a 	bl	1fd78 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    8a64:	4606      	mov	r6, r0
    8a66:	b180      	cbz	r0, 8a8a <bt_hci_cmd_send_sync+0x76>
    8a68:	4a25      	ldr	r2, [pc, #148]	; (8b00 <bt_hci_cmd_send_sync+0xec>)
    8a6a:	4926      	ldr	r1, [pc, #152]	; (8b04 <bt_hci_cmd_send_sync+0xf0>)
    8a6c:	4826      	ldr	r0, [pc, #152]	; (8b08 <bt_hci_cmd_send_sync+0xf4>)
    8a6e:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    8a72:	f018 fe6b 	bl	2174c <assert_print>
    8a76:	4825      	ldr	r0, [pc, #148]	; (8b0c <bt_hci_cmd_send_sync+0xf8>)
    8a78:	4631      	mov	r1, r6
    8a7a:	f018 fe67 	bl	2174c <assert_print>
    8a7e:	4040      	eors	r0, r0
    8a80:	f380 8811 	msr	BASEPRI, r0
    8a84:	f04f 0003 	mov.w	r0, #3
    8a88:	df02      	svc	2
	status = cmd(buf)->status;
    8a8a:	4620      	mov	r0, r4
    8a8c:	f012 f8c4 	bl	1ac18 <net_buf_id>
    8a90:	230c      	movs	r3, #12
    8a92:	4358      	muls	r0, r3
    8a94:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    8a98:	b316      	cbz	r6, 8ae0 <bt_hci_cmd_send_sync+0xcc>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    8a9a:	481d      	ldr	r0, [pc, #116]	; (8b10 <bt_hci_cmd_send_sync+0xfc>)
    8a9c:	6803      	ldr	r3, [r0, #0]
    8a9e:	f013 0f06 	tst.w	r3, #6
    8aa2:	d010      	beq.n	8ac6 <bt_hci_cmd_send_sync+0xb2>
    8aa4:	466d      	mov	r5, sp
    8aa6:	b08a      	sub	sp, #40	; 0x28
    8aa8:	466a      	mov	r2, sp
    8aaa:	4b1a      	ldr	r3, [pc, #104]	; (8b14 <bt_hci_cmd_send_sync+0x100>)
    8aac:	6153      	str	r3, [r2, #20]
    8aae:	4b1a      	ldr	r3, [pc, #104]	; (8b18 <bt_hci_cmd_send_sync+0x104>)
    8ab0:	6216      	str	r6, [r2, #32]
    8ab2:	e9c2 3806 	strd	r3, r8, [r2, #24]
    8ab6:	2305      	movs	r3, #5
    8ab8:	f842 3f10 	str.w	r3, [r2, #16]!
    8abc:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    8ac0:	f01b f963 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8ac4:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    8ac6:	4620      	mov	r0, r4
    8ac8:	f012 f960 	bl	1ad8c <net_buf_unref>
			return -ECONNREFUSED;
    8acc:	2e09      	cmp	r6, #9
    8ace:	bf14      	ite	ne
    8ad0:	f06f 0004 	mvnne.w	r0, #4
    8ad4:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    8ad8:	371c      	adds	r7, #28
    8ada:	46bd      	mov	sp, r7
    8adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    8ae0:	b115      	cbz	r5, 8ae8 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
    8ae2:	602c      	str	r4, [r5, #0]
	return 0;
    8ae4:	2000      	movs	r0, #0
    8ae6:	e7f7      	b.n	8ad8 <bt_hci_cmd_send_sync+0xc4>
		net_buf_unref(buf);
    8ae8:	4620      	mov	r0, r4
    8aea:	f012 f94f 	bl	1ad8c <net_buf_unref>
    8aee:	e7f9      	b.n	8ae4 <bt_hci_cmd_send_sync+0xd0>
			return -ENOBUFS;
    8af0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8af4:	e7f0      	b.n	8ad8 <bt_hci_cmd_send_sync+0xc4>
    8af6:	bf00      	nop
    8af8:	20002574 	.word	0x20002574
    8afc:	20000144 	.word	0x20000144
    8b00:	0002bbf7 	.word	0x0002bbf7
    8b04:	0002bc2b 	.word	0x0002bc2b
    8b08:	0002bc34 	.word	0x0002bc34
    8b0c:	0002bc51 	.word	0x0002bc51
    8b10:	20000afc 	.word	0x20000afc
    8b14:	0002bc71 	.word	0x0002bc71
    8b18:	0002c36d 	.word	0x0002c36d

00008b1c <hci_le_read_max_data_len>:
{
    8b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b1e:	b083      	sub	sp, #12
    8b20:	af00      	add	r7, sp, #0
    8b22:	4606      	mov	r6, r0
    8b24:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    8b26:	1d3a      	adds	r2, r7, #4
    8b28:	2100      	movs	r1, #0
    8b2a:	f242 002f 	movw	r0, #8239	; 0x202f
    8b2e:	f7ff ff71 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    8b32:	4604      	mov	r4, r0
    8b34:	b1b0      	cbz	r0, 8b64 <hci_le_read_max_data_len+0x48>
		LOG_ERR("Failed to read DLE max data len");
    8b36:	4811      	ldr	r0, [pc, #68]	; (8b7c <hci_le_read_max_data_len+0x60>)
    8b38:	6803      	ldr	r3, [r0, #0]
    8b3a:	075b      	lsls	r3, r3, #29
    8b3c:	d00e      	beq.n	8b5c <hci_le_read_max_data_len+0x40>
    8b3e:	466d      	mov	r5, sp
    8b40:	b088      	sub	sp, #32
    8b42:	466a      	mov	r2, sp
    8b44:	4b0e      	ldr	r3, [pc, #56]	; (8b80 <hci_le_read_max_data_len+0x64>)
    8b46:	6153      	str	r3, [r2, #20]
    8b48:	4b0e      	ldr	r3, [pc, #56]	; (8b84 <hci_le_read_max_data_len+0x68>)
    8b4a:	6193      	str	r3, [r2, #24]
    8b4c:	2303      	movs	r3, #3
    8b4e:	f842 3f10 	str.w	r3, [r2, #16]!
    8b52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8b56:	f01b f918 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8b5a:	46ad      	mov	sp, r5
}
    8b5c:	4620      	mov	r0, r4
    8b5e:	370c      	adds	r7, #12
    8b60:	46bd      	mov	sp, r7
    8b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    8b64:	6878      	ldr	r0, [r7, #4]
    8b66:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    8b68:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8b6c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    8b6e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    8b72:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    8b74:	f012 f90a 	bl	1ad8c <net_buf_unref>
	return 0;
    8b78:	e7f0      	b.n	8b5c <hci_le_read_max_data_len+0x40>
    8b7a:	bf00      	nop
    8b7c:	20000afc 	.word	0x20000afc
    8b80:	0002bc91 	.word	0x0002bc91
    8b84:	0002c39e 	.word	0x0002c39e

00008b88 <bt_hci_le_rand>:
{
    8b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    8b8a:	4b14      	ldr	r3, [pc, #80]	; (8bdc <bt_hci_le_rand+0x54>)
    8b8c:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
    8b90:	2b00      	cmp	r3, #0
{
    8b92:	4605      	mov	r5, r0
    8b94:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    8b96:	da1d      	bge.n	8bd4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    8b98:	b914      	cbnz	r4, 8ba0 <bt_hci_le_rand+0x18>
	return 0;
    8b9a:	4620      	mov	r0, r4
}
    8b9c:	b003      	add	sp, #12
    8b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    8ba0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    8ba2:	aa01      	add	r2, sp, #4
    8ba4:	f04f 0100 	mov.w	r1, #0
    8ba8:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    8bac:	4626      	mov	r6, r4
    8bae:	bf28      	it	cs
    8bb0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    8bb2:	f7ff ff2f 	bl	8a14 <bt_hci_cmd_send_sync>
		if (err) {
    8bb6:	2800      	cmp	r0, #0
    8bb8:	d1f0      	bne.n	8b9c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    8bba:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    8bbc:	68f9      	ldr	r1, [r7, #12]
    8bbe:	4632      	mov	r2, r6
    8bc0:	3101      	adds	r1, #1
    8bc2:	4628      	mov	r0, r5
    8bc4:	f01b f822 	bl	23c0c <memcpy>
		net_buf_unref(rsp);
    8bc8:	4638      	mov	r0, r7
    8bca:	f012 f8df 	bl	1ad8c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    8bce:	4435      	add	r5, r6
		len -= count;
    8bd0:	1ba4      	subs	r4, r4, r6
    8bd2:	e7e1      	b.n	8b98 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    8bd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8bd8:	e7e0      	b.n	8b9c <bt_hci_le_rand+0x14>
    8bda:	bf00      	nop
    8bdc:	20000010 	.word	0x20000010

00008be0 <bt_hci_le_enh_conn_complete>:
{
    8be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8be4:	b089      	sub	sp, #36	; 0x24
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8be6:	f8b0 a001 	ldrh.w	sl, [r0, #1]
		if (disconnected_handles[i] == handle) {
    8bea:	4a53      	ldr	r2, [pc, #332]	; (8d38 <bt_hci_le_enh_conn_complete+0x158>)
	handle |= ~BT_ACL_HANDLE_MASK;
    8bec:	ea6f 530a 	mvn.w	r3, sl, lsl #20
		if (disconnected_handles[i] == handle) {
    8bf0:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    8bf2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    8bf6:	b29b      	uxth	r3, r3
    8bf8:	4299      	cmp	r1, r3
    8bfa:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    8bfe:	bf08      	it	eq
    8c00:	8016      	strheq	r6, [r2, #0]
	if (evt->status) {
    8c02:	7804      	ldrb	r4, [r0, #0]
{
    8c04:	af02      	add	r7, sp, #8
    8c06:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8c08:	fa1f f88a 	uxth.w	r8, sl
			return true;
    8c0c:	bf08      	it	eq
    8c0e:	2601      	moveq	r6, #1
	if (evt->status) {
    8c10:	2c00      	cmp	r4, #0
    8c12:	d042      	beq.n	8c9a <bt_hci_le_enh_conn_complete+0xba>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8c14:	2c3c      	cmp	r4, #60	; 0x3c
    8c16:	d12a      	bne.n	8c6e <bt_hci_le_enh_conn_complete+0x8e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8c18:	f001 fc56 	bl	a4c8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8c1c:	f06f 0180 	mvn.w	r1, #128	; 0x80
    8c20:	3010      	adds	r0, #16
    8c22:	f01b f8b5 	bl	23d90 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    8c26:	2000      	movs	r0, #0
    8c28:	f7ff fb12 	bl	8250 <find_pending_connect.part.0>
		if (!conn) {
    8c2c:	4605      	mov	r5, r0
    8c2e:	b9b0      	cbnz	r0, 8c5e <bt_hci_le_enh_conn_complete+0x7e>
			LOG_ERR("No pending peripheral connection");
    8c30:	4842      	ldr	r0, [pc, #264]	; (8d3c <bt_hci_le_enh_conn_complete+0x15c>)
    8c32:	6803      	ldr	r3, [r0, #0]
    8c34:	075e      	lsls	r6, r3, #29
    8c36:	d00e      	beq.n	8c56 <bt_hci_le_enh_conn_complete+0x76>
    8c38:	466c      	mov	r4, sp
    8c3a:	b088      	sub	sp, #32
    8c3c:	aa02      	add	r2, sp, #8
    8c3e:	4b40      	ldr	r3, [pc, #256]	; (8d40 <bt_hci_le_enh_conn_complete+0x160>)
    8c40:	6153      	str	r3, [r2, #20]
    8c42:	4b40      	ldr	r3, [pc, #256]	; (8d44 <bt_hci_le_enh_conn_complete+0x164>)
    8c44:	6193      	str	r3, [r2, #24]
    8c46:	2303      	movs	r3, #3
    8c48:	f842 3f10 	str.w	r3, [r2, #16]!
    8c4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8c50:	f01b f89b 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8c54:	46a5      	mov	sp, r4
}
    8c56:	371c      	adds	r7, #28
    8c58:	46bd      	mov	sp, r7
    8c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    8c5e:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8c60:	2100      	movs	r1, #0
    8c62:	f002 f9e3 	bl	b02c <bt_conn_set_state>
		bt_conn_unref(conn);
    8c66:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    8c68:	f01b fae4 	bl	24234 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8c6c:	e7f3      	b.n	8c56 <bt_hci_le_enh_conn_complete+0x76>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
    8c6e:	4833      	ldr	r0, [pc, #204]	; (8d3c <bt_hci_le_enh_conn_complete+0x15c>)
    8c70:	6803      	ldr	r3, [r0, #0]
    8c72:	f013 0f06 	tst.w	r3, #6
    8c76:	d0ee      	beq.n	8c56 <bt_hci_le_enh_conn_complete+0x76>
    8c78:	466d      	mov	r5, sp
    8c7a:	b088      	sub	sp, #32
    8c7c:	aa02      	add	r2, sp, #8
    8c7e:	4b32      	ldr	r3, [pc, #200]	; (8d48 <bt_hci_le_enh_conn_complete+0x168>)
    8c80:	6153      	str	r3, [r2, #20]
    8c82:	4b32      	ldr	r3, [pc, #200]	; (8d4c <bt_hci_le_enh_conn_complete+0x16c>)
    8c84:	e9c2 3406 	strd	r3, r4, [r2, #24]
    8c88:	2304      	movs	r3, #4
    8c8a:	f842 3f10 	str.w	r3, [r2, #16]!
    8c8e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    8c92:	f01b f87a 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8c96:	46ad      	mov	sp, r5
    8c98:	e7dd      	b.n	8c56 <bt_hci_le_enh_conn_complete+0x76>
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    8c9a:	f100 0904 	add.w	r9, r0, #4
    8c9e:	4648      	mov	r0, r9
    8ca0:	f01b f84d 	bl	23d3e <bt_addr_le_is_resolved>
    8ca4:	b380      	cbz	r0, 8d08 <bt_hci_le_enh_conn_complete+0x128>
		bt_addr_le_copy_resolved(&id_addr, &evt->peer_addr);
    8ca6:	4649      	mov	r1, r9
    8ca8:	f107 0010 	add.w	r0, r7, #16
    8cac:	f01b f83d 	bl	23d2a <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
    8cb0:	2206      	movs	r2, #6
    8cb2:	f105 0111 	add.w	r1, r5, #17
    8cb6:	f107 0009 	add.w	r0, r7, #9
    8cba:	f01a ffa7 	bl	23c0c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    8cbe:	2301      	movs	r3, #1
    8cc0:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    8cc2:	78eb      	ldrb	r3, [r5, #3]
    8cc4:	2b01      	cmp	r3, #1
    8cc6:	d049      	beq.n	8d5c <bt_hci_le_enh_conn_complete+0x17c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
    8cc8:	4c1c      	ldr	r4, [pc, #112]	; (8d3c <bt_hci_le_enh_conn_complete+0x15c>)
    8cca:	6823      	ldr	r3, [r4, #0]
    8ccc:	075d      	lsls	r5, r3, #29
    8cce:	d016      	beq.n	8cfe <bt_hci_le_enh_conn_complete+0x11e>
    8cd0:	4648      	mov	r0, r9
    8cd2:	f7ff f997 	bl	8004 <bt_addr_le_str>
    8cd6:	466d      	mov	r5, sp
    8cd8:	b08a      	sub	sp, #40	; 0x28
    8cda:	aa02      	add	r2, sp, #8
    8cdc:	4b1c      	ldr	r3, [pc, #112]	; (8d50 <bt_hci_le_enh_conn_complete+0x170>)
    8cde:	6153      	str	r3, [r2, #20]
    8ce0:	4b1a      	ldr	r3, [pc, #104]	; (8d4c <bt_hci_le_enh_conn_complete+0x16c>)
    8ce2:	e9c2 3006 	strd	r3, r0, [r2, #24]
    8ce6:	f240 3301 	movw	r3, #769	; 0x301
    8cea:	8413      	strh	r3, [r2, #32]
    8cec:	4b19      	ldr	r3, [pc, #100]	; (8d54 <bt_hci_le_enh_conn_complete+0x174>)
    8cee:	f842 3f10 	str.w	r3, [r2, #16]!
    8cf2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    8cf6:	4620      	mov	r0, r4
    8cf8:	f01b f847 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8cfc:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    8cfe:	211f      	movs	r1, #31
    8d00:	4640      	mov	r0, r8
    8d02:	f01b f851 	bl	23da8 <bt_hci_disconnect>
		return;
    8d06:	e7a6      	b.n	8c56 <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    8d08:	78eb      	ldrb	r3, [r5, #3]
    8d0a:	2b01      	cmp	r3, #1
    8d0c:	bf04      	itt	eq
    8d0e:	4b12      	ldreq	r3, [pc, #72]	; (8d58 <bt_hci_le_enh_conn_complete+0x178>)
    8d10:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    8d14:	4649      	mov	r1, r9
    8d16:	4620      	mov	r0, r4
    8d18:	f01b f92c 	bl	23f74 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    8d1c:	2207      	movs	r2, #7
    8d1e:	4601      	mov	r1, r0
    8d20:	f107 0010 	add.w	r0, r7, #16
    8d24:	f01a ff72 	bl	23c0c <memcpy>
    8d28:	2207      	movs	r2, #7
    8d2a:	4649      	mov	r1, r9
    8d2c:	f107 0008 	add.w	r0, r7, #8
    8d30:	f01a ff6c 	bl	23c0c <memcpy>
}
    8d34:	e7c5      	b.n	8cc2 <bt_hci_le_enh_conn_complete+0xe2>
    8d36:	bf00      	nop
    8d38:	20003ad4 	.word	0x20003ad4
    8d3c:	20000afc 	.word	0x20000afc
    8d40:	0002bcb5 	.word	0x0002bcb5
    8d44:	0002c334 	.word	0x0002c334
    8d48:	0002bcda 	.word	0x0002bcda
    8d4c:	0002c351 	.word	0x0002c351
    8d50:	0002bcf7 	.word	0x0002bcf7
    8d54:	01000004 	.word	0x01000004
    8d58:	20000010 	.word	0x20000010
    8d5c:	f107 0010 	add.w	r0, r7, #16
    8d60:	f7ff fa76 	bl	8250 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8d64:	78eb      	ldrb	r3, [r5, #3]
    8d66:	2b01      	cmp	r3, #1
    8d68:	4604      	mov	r4, r0
    8d6a:	d10a      	bne.n	8d82 <bt_hci_le_enh_conn_complete+0x1a2>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8d6c:	f001 fbac 	bl	a4c8 <bt_le_adv_lookup_legacy>
    8d70:	f06f 0180 	mvn.w	r1, #128	; 0x80
    8d74:	4683      	mov	fp, r0
    8d76:	3010      	adds	r0, #16
    8d78:	f01b f80a 	bl	23d90 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    8d7c:	4658      	mov	r0, fp
    8d7e:	f01b fa08 	bl	24192 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    8d82:	2c00      	cmp	r4, #0
    8d84:	d0a0      	beq.n	8cc8 <bt_hci_le_enh_conn_complete+0xe8>
	conn->handle = handle;
    8d86:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    8d88:	2207      	movs	r2, #7
    8d8a:	f820 ab88 	strh.w	sl, [r0], #136
    8d8e:	f107 0110 	add.w	r1, r7, #16
    8d92:	f01a ff3b 	bl	23c0c <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    8d96:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    8d9a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    8d9e:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    8da2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8da6:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    8daa:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    8dae:	78eb      	ldrb	r3, [r5, #3]
    8db0:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    8db2:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8db4:	2b01      	cmp	r3, #1
	conn->err = 0U;
    8db6:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8db8:	d118      	bne.n	8dec <bt_hci_le_enh_conn_complete+0x20c>
    8dba:	2207      	movs	r2, #7
    8dbc:	f107 0108 	add.w	r1, r7, #8
    8dc0:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    8dc4:	f01a ff22 	bl	23c0c <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8dc8:	f001 fb7e 	bl	a4c8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    8dcc:	7a21      	ldrb	r1, [r4, #8]
    8dce:	4d53      	ldr	r5, [pc, #332]	; (8f1c <bt_hci_le_enh_conn_complete+0x33c>)
    8dd0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8dd4:	2207      	movs	r2, #7
    8dd6:	4429      	add	r1, r5
    8dd8:	f104 0096 	add.w	r0, r4, #150	; 0x96
    8ddc:	f01a ff16 	bl	23c0c <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    8de0:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    8de4:	0658      	lsls	r0, r3, #25
    8de6:	d501      	bpl.n	8dec <bt_hci_le_enh_conn_complete+0x20c>
			bt_le_adv_resume();
    8de8:	f001 fd4c 	bl	a884 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    8dec:	2107      	movs	r1, #7
    8dee:	4620      	mov	r0, r4
    8df0:	f002 f91c 	bl	b02c <bt_conn_set_state>
	if (is_disconnected) {
    8df4:	b11e      	cbz	r6, 8dfe <bt_hci_le_enh_conn_complete+0x21e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    8df6:	2101      	movs	r1, #1
    8df8:	4620      	mov	r0, r4
    8dfa:	f002 f917 	bl	b02c <bt_conn_set_state>
	bt_conn_connected(conn);
    8dfe:	4620      	mov	r0, r4
    8e00:	f01b fa56 	bl	242b0 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    8e04:	7aa3      	ldrb	r3, [r4, #10]
    8e06:	2b07      	cmp	r3, #7
    8e08:	f040 8083 	bne.w	8f12 <bt_hci_le_enh_conn_complete+0x332>
    8e0c:	f3bf 8f5b 	dmb	ish
    8e10:	6863      	ldr	r3, [r4, #4]
    8e12:	4d42      	ldr	r5, [pc, #264]	; (8f1c <bt_hci_le_enh_conn_complete+0x33c>)
    8e14:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    8e18:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    8e1c:	d12f      	bne.n	8e7e <bt_hci_le_enh_conn_complete+0x29e>
    8e1e:	78e3      	ldrb	r3, [r4, #3]
    8e20:	b11b      	cbz	r3, 8e2a <bt_hci_le_enh_conn_complete+0x24a>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    8e22:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    8e26:	0719      	lsls	r1, r3, #28
    8e28:	d529      	bpl.n	8e7e <bt_hci_le_enh_conn_complete+0x29e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    8e2a:	2102      	movs	r1, #2
    8e2c:	f242 0016 	movw	r0, #8214	; 0x2016
    8e30:	f7ff fdb6 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
    8e34:	4606      	mov	r6, r0
    8e36:	2800      	cmp	r0, #0
    8e38:	d06d      	beq.n	8f16 <bt_hci_le_enh_conn_complete+0x336>
    8e3a:	2102      	movs	r1, #2
    8e3c:	300c      	adds	r0, #12
    8e3e:	f01c fbd8 	bl	255f2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8e42:	8823      	ldrh	r3, [r4, #0]
    8e44:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    8e46:	2200      	movs	r2, #0
    8e48:	4631      	mov	r1, r6
    8e4a:	f242 0016 	movw	r0, #8214	; 0x2016
    8e4e:	f7ff fde1 	bl	8a14 <bt_hci_cmd_send_sync>
		if (err) {
    8e52:	4603      	mov	r3, r0
    8e54:	b198      	cbz	r0, 8e7e <bt_hci_le_enh_conn_complete+0x29e>
			LOG_ERR("Failed read remote features (%d)", err);
    8e56:	4832      	ldr	r0, [pc, #200]	; (8f20 <bt_hci_le_enh_conn_complete+0x340>)
    8e58:	6802      	ldr	r2, [r0, #0]
    8e5a:	0752      	lsls	r2, r2, #29
    8e5c:	d00f      	beq.n	8e7e <bt_hci_le_enh_conn_complete+0x29e>
    8e5e:	466e      	mov	r6, sp
    8e60:	b088      	sub	sp, #32
    8e62:	aa02      	add	r2, sp, #8
    8e64:	492f      	ldr	r1, [pc, #188]	; (8f24 <bt_hci_le_enh_conn_complete+0x344>)
    8e66:	6151      	str	r1, [r2, #20]
    8e68:	492f      	ldr	r1, [pc, #188]	; (8f28 <bt_hci_le_enh_conn_complete+0x348>)
    8e6a:	e9c2 1306 	strd	r1, r3, [r2, #24]
    8e6e:	2304      	movs	r3, #4
    8e70:	f842 3f10 	str.w	r3, [r2, #16]!
    8e74:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    8e78:	f01a ff87 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8e7c:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    8e7e:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    8e82:	07db      	lsls	r3, r3, #31
    8e84:	d51c      	bpl.n	8ec0 <bt_hci_le_enh_conn_complete+0x2e0>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    8e86:	2302      	movs	r3, #2
    8e88:	2100      	movs	r1, #0
    8e8a:	461a      	mov	r2, r3
    8e8c:	9100      	str	r1, [sp, #0]
    8e8e:	4620      	mov	r0, r4
    8e90:	f01a ffc3 	bl	23e1a <bt_le_set_phy>
		if (err) {
    8e94:	4603      	mov	r3, r0
    8e96:	b198      	cbz	r0, 8ec0 <bt_hci_le_enh_conn_complete+0x2e0>
			LOG_ERR("Failed LE Set PHY (%d)", err);
    8e98:	4821      	ldr	r0, [pc, #132]	; (8f20 <bt_hci_le_enh_conn_complete+0x340>)
    8e9a:	6802      	ldr	r2, [r0, #0]
    8e9c:	0756      	lsls	r6, r2, #29
    8e9e:	d00f      	beq.n	8ec0 <bt_hci_le_enh_conn_complete+0x2e0>
    8ea0:	466e      	mov	r6, sp
    8ea2:	b088      	sub	sp, #32
    8ea4:	aa02      	add	r2, sp, #8
    8ea6:	4921      	ldr	r1, [pc, #132]	; (8f2c <bt_hci_le_enh_conn_complete+0x34c>)
    8ea8:	6151      	str	r1, [r2, #20]
    8eaa:	491f      	ldr	r1, [pc, #124]	; (8f28 <bt_hci_le_enh_conn_complete+0x348>)
    8eac:	e9c2 1306 	strd	r1, r3, [r2, #24]
    8eb0:	2304      	movs	r3, #4
    8eb2:	f842 3f10 	str.w	r3, [r2, #16]!
    8eb6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    8eba:	f01a ff66 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8ebe:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    8ec0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    8ec4:	0698      	lsls	r0, r3, #26
    8ec6:	d524      	bpl.n	8f12 <bt_hci_le_enh_conn_complete+0x332>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    8ec8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    8ecc:	689b      	ldr	r3, [r3, #8]
    8ece:	0799      	lsls	r1, r3, #30
    8ed0:	d51f      	bpl.n	8f12 <bt_hci_le_enh_conn_complete+0x332>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    8ed2:	1db9      	adds	r1, r7, #6
    8ed4:	1d38      	adds	r0, r7, #4
    8ed6:	f7ff fe21 	bl	8b1c <hci_le_read_max_data_len>
			if (!err) {
    8eda:	b9d0      	cbnz	r0, 8f12 <bt_hci_le_enh_conn_complete+0x332>
				err = bt_le_set_data_len(conn,
    8edc:	88fa      	ldrh	r2, [r7, #6]
    8ede:	88b9      	ldrh	r1, [r7, #4]
    8ee0:	4620      	mov	r0, r4
    8ee2:	f01a ff7c 	bl	23dde <bt_le_set_data_len>
				if (err) {
    8ee6:	4603      	mov	r3, r0
    8ee8:	b198      	cbz	r0, 8f12 <bt_hci_le_enh_conn_complete+0x332>
					LOG_ERR("Failed to set data len (%d)", err);
    8eea:	480d      	ldr	r0, [pc, #52]	; (8f20 <bt_hci_le_enh_conn_complete+0x340>)
    8eec:	6802      	ldr	r2, [r0, #0]
    8eee:	0752      	lsls	r2, r2, #29
    8ef0:	d00f      	beq.n	8f12 <bt_hci_le_enh_conn_complete+0x332>
    8ef2:	466d      	mov	r5, sp
    8ef4:	b088      	sub	sp, #32
    8ef6:	aa02      	add	r2, sp, #8
    8ef8:	490d      	ldr	r1, [pc, #52]	; (8f30 <bt_hci_le_enh_conn_complete+0x350>)
    8efa:	6151      	str	r1, [r2, #20]
    8efc:	490a      	ldr	r1, [pc, #40]	; (8f28 <bt_hci_le_enh_conn_complete+0x348>)
    8efe:	e9c2 1306 	strd	r1, r3, [r2, #24]
    8f02:	2304      	movs	r3, #4
    8f04:	f842 3f10 	str.w	r3, [r2, #16]!
    8f08:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    8f0c:	f01a ff3d 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8f10:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    8f12:	4620      	mov	r0, r4
    8f14:	e6a8      	b.n	8c68 <bt_hci_le_enh_conn_complete+0x88>
		return -ENOBUFS;
    8f16:	f06f 0368 	mvn.w	r3, #104	; 0x68
    8f1a:	e79c      	b.n	8e56 <bt_hci_le_enh_conn_complete+0x276>
    8f1c:	20000010 	.word	0x20000010
    8f20:	20000afc 	.word	0x20000afc
    8f24:	0002bd17 	.word	0x0002bd17
    8f28:	0002c321 	.word	0x0002c321
    8f2c:	0002bd3c 	.word	0x0002bd3c
    8f30:	0002bd57 	.word	0x0002bd57

00008f34 <le_legacy_conn_complete>:
{
    8f34:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    8f36:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
    8f38:	4c18      	ldr	r4, [pc, #96]	; (8f9c <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
    8f3a:	780b      	ldrb	r3, [r1, #0]
{
    8f3c:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
    8f3e:	2207      	movs	r2, #7
	enh.status         = evt->status;
    8f40:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    8f44:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    8f48:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    8f4c:	78cb      	ldrb	r3, [r1, #3]
    8f4e:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    8f52:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    8f56:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    8f5a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    8f5e:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    8f62:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    8f66:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    8f6a:	7c4b      	ldrb	r3, [r1, #17]
    8f6c:	f88d 301d 	strb.w	r3, [sp, #29]
    8f70:	3104      	adds	r1, #4
    8f72:	a801      	add	r0, sp, #4
    8f74:	f01a fe4a 	bl	23c0c <memcpy>
	memcpy(dst, src, sizeof(*dst));
    8f78:	4621      	mov	r1, r4
    8f7a:	2206      	movs	r2, #6
    8f7c:	f10d 000b 	add.w	r0, sp, #11
    8f80:	f01a fe44 	bl	23c0c <memcpy>
    8f84:	2206      	movs	r2, #6
    8f86:	4621      	mov	r1, r4
    8f88:	f10d 0011 	add.w	r0, sp, #17
    8f8c:	f01a fe3e 	bl	23c0c <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    8f90:	4668      	mov	r0, sp
    8f92:	f7ff fe25 	bl	8be0 <bt_hci_le_enh_conn_complete>
}
    8f96:	b008      	add	sp, #32
    8f98:	bd10      	pop	{r4, pc}
    8f9a:	bf00      	nop
    8f9c:	0002b9c0 	.word	0x0002b9c0

00008fa0 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    8fa0:	4b02      	ldr	r3, [pc, #8]	; (8fac <bt_send+0xc>)
    8fa2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    8fa6:	695b      	ldr	r3, [r3, #20]
    8fa8:	4718      	bx	r3
    8faa:	bf00      	nop
    8fac:	20000010 	.word	0x20000010

00008fb0 <bt_hci_cmd_send>:
{
    8fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fb2:	4605      	mov	r5, r0
    8fb4:	af00      	add	r7, sp, #0
	if (!buf) {
    8fb6:	460c      	mov	r4, r1
    8fb8:	b919      	cbnz	r1, 8fc2 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    8fba:	f7ff fcf1 	bl	89a0 <bt_hci_cmd_create>
		if (!buf) {
    8fbe:	4604      	mov	r4, r0
    8fc0:	b340      	cbz	r0, 9014 <bt_hci_cmd_send+0x64>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    8fc2:	f640 4335 	movw	r3, #3125	; 0xc35
    8fc6:	429d      	cmp	r5, r3
    8fc8:	d11e      	bne.n	9008 <bt_hci_cmd_send+0x58>
		err = bt_send(buf);
    8fca:	4620      	mov	r0, r4
    8fcc:	f7ff ffe8 	bl	8fa0 <bt_send>
		if (err) {
    8fd0:	4605      	mov	r5, r0
    8fd2:	b1e8      	cbz	r0, 9010 <bt_hci_cmd_send+0x60>
			LOG_ERR("Unable to send to driver (err %d)", err);
    8fd4:	4811      	ldr	r0, [pc, #68]	; (901c <bt_hci_cmd_send+0x6c>)
    8fd6:	6803      	ldr	r3, [r0, #0]
    8fd8:	075b      	lsls	r3, r3, #29
    8fda:	d00f      	beq.n	8ffc <bt_hci_cmd_send+0x4c>
    8fdc:	466e      	mov	r6, sp
    8fde:	b088      	sub	sp, #32
    8fe0:	466a      	mov	r2, sp
    8fe2:	4b0f      	ldr	r3, [pc, #60]	; (9020 <bt_hci_cmd_send+0x70>)
    8fe4:	6153      	str	r3, [r2, #20]
    8fe6:	4b0f      	ldr	r3, [pc, #60]	; (9024 <bt_hci_cmd_send+0x74>)
    8fe8:	e9c2 3506 	strd	r3, r5, [r2, #24]
    8fec:	2304      	movs	r3, #4
    8fee:	f842 3f10 	str.w	r3, [r2, #16]!
    8ff2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    8ff6:	f01a fec8 	bl	23d8a <z_log_msg_static_create.constprop.0>
    8ffa:	46b5      	mov	sp, r6
			net_buf_unref(buf);
    8ffc:	4620      	mov	r0, r4
    8ffe:	f011 fec5 	bl	1ad8c <net_buf_unref>
}
    9002:	4628      	mov	r0, r5
    9004:	46bd      	mov	sp, r7
    9006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    9008:	4807      	ldr	r0, [pc, #28]	; (9028 <bt_hci_cmd_send+0x78>)
    900a:	4621      	mov	r1, r4
    900c:	f01c fabd 	bl	2558a <net_buf_put>
	return 0;
    9010:	2500      	movs	r5, #0
    9012:	e7f6      	b.n	9002 <bt_hci_cmd_send+0x52>
			return -ENOBUFS;
    9014:	f06f 0568 	mvn.w	r5, #104	; 0x68
    9018:	e7f3      	b.n	9002 <bt_hci_cmd_send+0x52>
    901a:	bf00      	nop
    901c:	20000afc 	.word	0x20000afc
    9020:	0002bd77 	.word	0x0002bd77
    9024:	0002c382 	.word	0x0002c382
    9028:	20000144 	.word	0x20000144

0000902c <le_conn_param_req>:
{
    902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9030:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    9032:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9034:	78d9      	ldrb	r1, [r3, #3]
    9036:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    9038:	f8b3 8000 	ldrh.w	r8, [r3]
{
    903c:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    903e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9042:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    9044:	7959      	ldrb	r1, [r3, #5]
    9046:	791a      	ldrb	r2, [r3, #4]
    9048:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    904c:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    904e:	799a      	ldrb	r2, [r3, #6]
    9050:	79d9      	ldrb	r1, [r3, #7]
    9052:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9056:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9058:	7a1a      	ldrb	r2, [r3, #8]
    905a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    905c:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9060:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    9064:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9066:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    9068:	f001 ffd8 	bl	b01c <bt_conn_lookup_handle>
	if (!conn) {
    906c:	4606      	mov	r6, r0
    906e:	b9d8      	cbnz	r0, 90a8 <le_conn_param_req+0x7c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    9070:	4824      	ldr	r0, [pc, #144]	; (9104 <le_conn_param_req+0xd8>)
    9072:	6803      	ldr	r3, [r0, #0]
    9074:	075b      	lsls	r3, r3, #29
    9076:	d00f      	beq.n	9098 <le_conn_param_req+0x6c>
    9078:	466d      	mov	r5, sp
    907a:	b088      	sub	sp, #32
    907c:	466a      	mov	r2, sp
    907e:	4b22      	ldr	r3, [pc, #136]	; (9108 <le_conn_param_req+0xdc>)
    9080:	6153      	str	r3, [r2, #20]
    9082:	4b22      	ldr	r3, [pc, #136]	; (910c <le_conn_param_req+0xe0>)
    9084:	e9c2 3406 	strd	r3, r4, [r2, #24]
    9088:	2304      	movs	r3, #4
    908a:	f842 3f10 	str.w	r3, [r2, #16]!
    908e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    9092:	f01a fe7a 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9096:	46ad      	mov	sp, r5
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    9098:	2102      	movs	r1, #2
    909a:	4620      	mov	r0, r4
    909c:	f01a ff09 	bl	23eb2 <le_conn_param_neg_reply>
}
    90a0:	3708      	adds	r7, #8
    90a2:	46bd      	mov	sp, r7
    90a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    90a8:	4639      	mov	r1, r7
    90aa:	f002 f945 	bl	b338 <le_param_req>
    90ae:	b938      	cbnz	r0, 90c0 <le_conn_param_req+0x94>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    90b0:	211e      	movs	r1, #30
    90b2:	4620      	mov	r0, r4
    90b4:	f01a fefd 	bl	23eb2 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    90b8:	4630      	mov	r0, r6
    90ba:	f01b f8bb 	bl	24234 <bt_conn_unref>
    90be:	e7ef      	b.n	90a0 <le_conn_param_req+0x74>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    90c0:	210e      	movs	r1, #14
    90c2:	f242 0020 	movw	r0, #8224	; 0x2020
    90c6:	f7ff fc6b 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
    90ca:	4605      	mov	r5, r0
    90cc:	2800      	cmp	r0, #0
    90ce:	d0f3      	beq.n	90b8 <le_conn_param_req+0x8c>
    90d0:	210e      	movs	r1, #14
    90d2:	300c      	adds	r0, #12
    90d4:	f01c fa8d 	bl	255f2 <net_buf_simple_add>
    90d8:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    90da:	220e      	movs	r2, #14
    90dc:	2100      	movs	r1, #0
    90de:	f01a fda0 	bl	23c22 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    90e2:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    90e6:	883b      	ldrh	r3, [r7, #0]
    90e8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    90ea:	887b      	ldrh	r3, [r7, #2]
    90ec:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    90ee:	88bb      	ldrh	r3, [r7, #4]
    90f0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    90f2:	88fb      	ldrh	r3, [r7, #6]
    90f4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    90f6:	4629      	mov	r1, r5
    90f8:	f242 0020 	movw	r0, #8224	; 0x2020
    90fc:	f7ff ff58 	bl	8fb0 <bt_hci_cmd_send>
    9100:	e7da      	b.n	90b8 <le_conn_param_req+0x8c>
    9102:	bf00      	nop
    9104:	20000afc 	.word	0x20000afc
    9108:	0002bad4 	.word	0x0002bad4
    910c:	0002c24f 	.word	0x0002c24f

00009110 <hci_tx_thread>:
{
    9110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    9114:	f8df 8184 	ldr.w	r8, [pc, #388]	; 929c <hci_tx_thread+0x18c>
		BT_ASSERT(err == 0);
    9118:	f8df 9184 	ldr.w	r9, [pc, #388]	; 92a0 <hci_tx_thread+0x190>
{
    911c:	b083      	sub	sp, #12
    911e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    9120:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    9124:	485f      	ldr	r0, [pc, #380]	; (92a4 <hci_tx_thread+0x194>)
		events[0].state = K_POLL_STATE_NOT_READY;
    9126:	f36f 3394 	bfc	r3, #14, #7
    912a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    912e:	f001 ff23 	bl	af78 <bt_conn_prepare_events>
    9132:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    9134:	4859      	ldr	r0, [pc, #356]	; (929c <hci_tx_thread+0x18c>)
    9136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    913a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    913e:	4629      	mov	r1, r5
    9140:	f017 fdb6 	bl	20cb0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    9144:	b160      	cbz	r0, 9160 <hci_tx_thread+0x50>
    9146:	4958      	ldr	r1, [pc, #352]	; (92a8 <hci_tx_thread+0x198>)
    9148:	4858      	ldr	r0, [pc, #352]	; (92ac <hci_tx_thread+0x19c>)
    914a:	f640 13ec 	movw	r3, #2540	; 0x9ec
    914e:	464a      	mov	r2, r9
    9150:	f018 fafc 	bl	2174c <assert_print>
    9154:	4040      	eors	r0, r0
    9156:	f380 8811 	msr	BASEPRI, r0
    915a:	f04f 0003 	mov.w	r0, #3
    915e:	df02      	svc	2
{
    9160:	4e4e      	ldr	r6, [pc, #312]	; (929c <hci_tx_thread+0x18c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    9162:	f8df b14c 	ldr.w	fp, [pc, #332]	; 92b0 <hci_tx_thread+0x1a0>
	for (; count; ev++, count--) {
    9166:	b915      	cbnz	r5, 916e <hci_tx_thread+0x5e>
	z_impl_k_yield();
    9168:	f017 fa68 	bl	2063c <z_impl_k_yield>
	while (1) {
    916c:	e7d8      	b.n	9120 <hci_tx_thread+0x10>
		switch (ev->state) {
    916e:	68f3      	ldr	r3, [r6, #12]
    9170:	f3c3 3386 	ubfx	r3, r3, #14, #7
    9174:	2b02      	cmp	r3, #2
    9176:	d970      	bls.n	925a <hci_tx_thread+0x14a>
    9178:	2b04      	cmp	r3, #4
    917a:	d178      	bne.n	926e <hci_tx_thread+0x15e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    917c:	7b33      	ldrb	r3, [r6, #12]
    917e:	2b00      	cmp	r3, #0
    9180:	d16e      	bne.n	9260 <hci_tx_thread+0x150>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    9182:	484c      	ldr	r0, [pc, #304]	; (92b4 <hci_tx_thread+0x1a4>)
    9184:	2200      	movs	r2, #0
    9186:	2300      	movs	r3, #0
    9188:	f01c f9f3 	bl	25572 <net_buf_get>
	BT_ASSERT(buf);
    918c:	4604      	mov	r4, r0
    918e:	b960      	cbnz	r0, 91aa <hci_tx_thread+0x9a>
    9190:	4949      	ldr	r1, [pc, #292]	; (92b8 <hci_tx_thread+0x1a8>)
    9192:	4846      	ldr	r0, [pc, #280]	; (92ac <hci_tx_thread+0x19c>)
    9194:	f640 137e 	movw	r3, #2430	; 0x97e
    9198:	464a      	mov	r2, r9
    919a:	f018 fad7 	bl	2174c <assert_print>
    919e:	4040      	eors	r0, r0
    91a0:	f380 8811 	msr	BASEPRI, r0
    91a4:	f04f 0003 	mov.w	r0, #3
    91a8:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    91aa:	f8df a110 	ldr.w	sl, [pc, #272]	; 92bc <hci_tx_thread+0x1ac>
	return z_impl_k_sem_take(sem, timeout);
    91ae:	4844      	ldr	r0, [pc, #272]	; (92c0 <hci_tx_thread+0x1b0>)
    91b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    91b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    91b8:	f016 fdde 	bl	1fd78 <z_impl_k_sem_take>
    91bc:	f8da 2130 	ldr.w	r2, [sl, #304]	; 0x130
    91c0:	b1da      	cbz	r2, 91fa <hci_tx_thread+0xea>
		LOG_ERR("Uncleared pending sent_cmd");
    91c2:	483b      	ldr	r0, [pc, #236]	; (92b0 <hci_tx_thread+0x1a0>)
    91c4:	6802      	ldr	r2, [r0, #0]
    91c6:	0751      	lsls	r1, r2, #29
    91c8:	d010      	beq.n	91ec <hci_tx_thread+0xdc>
    91ca:	f8c7 d004 	str.w	sp, [r7, #4]
    91ce:	b088      	sub	sp, #32
    91d0:	466a      	mov	r2, sp
    91d2:	493c      	ldr	r1, [pc, #240]	; (92c4 <hci_tx_thread+0x1b4>)
    91d4:	6151      	str	r1, [r2, #20]
    91d6:	493c      	ldr	r1, [pc, #240]	; (92c8 <hci_tx_thread+0x1b8>)
    91d8:	6191      	str	r1, [r2, #24]
    91da:	2103      	movs	r1, #3
    91dc:	f842 1f10 	str.w	r1, [r2, #16]!
    91e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    91e4:	f01a fdd1 	bl	23d8a <z_log_msg_static_create.constprop.0>
    91e8:	f8d7 d004 	ldr.w	sp, [r7, #4]
		net_buf_unref(bt_dev.sent_cmd);
    91ec:	f8da 0130 	ldr.w	r0, [sl, #304]	; 0x130
    91f0:	f011 fdcc 	bl	1ad8c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    91f4:	2200      	movs	r2, #0
    91f6:	f8ca 2130 	str.w	r2, [sl, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    91fa:	4620      	mov	r0, r4
    91fc:	f01c f9c7 	bl	2558e <net_buf_ref>
    9200:	f8ca 0130 	str.w	r0, [sl, #304]	; 0x130
	err = bt_send(buf);
    9204:	4620      	mov	r0, r4
    9206:	f7ff fecb 	bl	8fa0 <bt_send>
	if (err) {
    920a:	4603      	mov	r3, r0
    920c:	b328      	cbz	r0, 925a <hci_tx_thread+0x14a>
		LOG_ERR("Unable to send to driver (err %d)", err);
    920e:	4828      	ldr	r0, [pc, #160]	; (92b0 <hci_tx_thread+0x1a0>)
    9210:	6802      	ldr	r2, [r0, #0]
    9212:	0752      	lsls	r2, r2, #29
    9214:	d00f      	beq.n	9236 <hci_tx_thread+0x126>
    9216:	46ea      	mov	sl, sp
    9218:	b088      	sub	sp, #32
    921a:	466a      	mov	r2, sp
    921c:	492b      	ldr	r1, [pc, #172]	; (92cc <hci_tx_thread+0x1bc>)
    921e:	6151      	str	r1, [r2, #20]
    9220:	4929      	ldr	r1, [pc, #164]	; (92c8 <hci_tx_thread+0x1b8>)
    9222:	e9c2 1306 	strd	r1, r3, [r2, #24]
    9226:	2304      	movs	r3, #4
    9228:	f842 3f10 	str.w	r3, [r2, #16]!
    922c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    9230:	f01a fdab 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9234:	46d5      	mov	sp, sl
	z_impl_k_sem_give(sem);
    9236:	4822      	ldr	r0, [pc, #136]	; (92c0 <hci_tx_thread+0x1b0>)
    9238:	f016 fd78 	bl	1fd2c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    923c:	4620      	mov	r0, r4
    923e:	f011 fceb 	bl	1ac18 <net_buf_id>
    9242:	4b23      	ldr	r3, [pc, #140]	; (92d0 <hci_tx_thread+0x1c0>)
    9244:	220c      	movs	r2, #12
    9246:	fb02 3000 	mla	r0, r2, r0, r3
    924a:	211f      	movs	r1, #31
    924c:	8840      	ldrh	r0, [r0, #2]
    924e:	4622      	mov	r2, r4
    9250:	f7ff f9aa 	bl	85a8 <hci_cmd_done>
		net_buf_unref(buf);
    9254:	4620      	mov	r0, r4
    9256:	f011 fd99 	bl	1ad8c <net_buf_unref>
	for (; count; ev++, count--) {
    925a:	3614      	adds	r6, #20
    925c:	3d01      	subs	r5, #1
    925e:	e782      	b.n	9166 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    9260:	2b01      	cmp	r3, #1
    9262:	d1fa      	bne.n	925a <hci_tx_thread+0x14a>
					conn = CONTAINER_OF(ev->fifo,
    9264:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    9266:	3838      	subs	r0, #56	; 0x38
    9268:	f002 fa1c 	bl	b6a4 <bt_conn_process_tx>
    926c:	e7f5      	b.n	925a <hci_tx_thread+0x14a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    926e:	f8db 2000 	ldr.w	r2, [fp]
    9272:	f012 0f06 	tst.w	r2, #6
    9276:	d0f0      	beq.n	925a <hci_tx_thread+0x14a>
    9278:	466c      	mov	r4, sp
    927a:	b088      	sub	sp, #32
    927c:	466a      	mov	r2, sp
    927e:	4915      	ldr	r1, [pc, #84]	; (92d4 <hci_tx_thread+0x1c4>)
    9280:	6151      	str	r1, [r2, #20]
    9282:	4915      	ldr	r1, [pc, #84]	; (92d8 <hci_tx_thread+0x1c8>)
    9284:	480a      	ldr	r0, [pc, #40]	; (92b0 <hci_tx_thread+0x1a0>)
		switch (ev->state) {
    9286:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    928a:	2304      	movs	r3, #4
    928c:	f842 3f10 	str.w	r3, [r2, #16]!
    9290:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    9294:	f01a fd79 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9298:	46a5      	mov	sp, r4
    929a:	e7de      	b.n	925a <hci_tx_thread+0x14a>
    929c:	2000023c 	.word	0x2000023c
    92a0:	0002bbf7 	.word	0x0002bbf7
    92a4:	20000250 	.word	0x20000250
    92a8:	0002bc2b 	.word	0x0002bc2b
    92ac:	0002bc34 	.word	0x0002bc34
    92b0:	20000afc 	.word	0x20000afc
    92b4:	20000144 	.word	0x20000144
    92b8:	0002d0b4 	.word	0x0002d0b4
    92bc:	20000010 	.word	0x20000010
    92c0:	20000128 	.word	0x20000128
    92c4:	0002bd9d 	.word	0x0002bd9d
    92c8:	0002c0e5 	.word	0x0002c0e5
    92cc:	0002bd77 	.word	0x0002bd77
    92d0:	20002574 	.word	0x20002574
    92d4:	0002bdbc 	.word	0x0002bdbc
    92d8:	0002c0ee 	.word	0x0002c0ee

000092dc <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    92dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92e0:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    92e2:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    92e6:	4630      	mov	r0, r6
    92e8:	f01c f9c4 	bl	25674 <net_buf_simple_headroom>
	state->len = buf->len;
    92ec:	f8b4 8010 	ldrh.w	r8, [r4, #16]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    92f0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    92f4:	4605      	mov	r5, r0
    92f6:	d80c      	bhi.n	9312 <hci_event_prio+0x36>
    92f8:	4a1c      	ldr	r2, [pc, #112]	; (936c <hci_event_prio+0x90>)
    92fa:	491d      	ldr	r1, [pc, #116]	; (9370 <hci_event_prio+0x94>)
    92fc:	481d      	ldr	r0, [pc, #116]	; (9374 <hci_event_prio+0x98>)
    92fe:	f640 5381 	movw	r3, #3457	; 0xd81
    9302:	f018 fa23 	bl	2174c <assert_print>
    9306:	4040      	eors	r0, r0
    9308:	f380 8811 	msr	BASEPRI, r0
    930c:	f04f 0003 	mov.w	r0, #3
    9310:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    9312:	4630      	mov	r0, r6
    9314:	2102      	movs	r1, #2
    9316:	f01c f99d 	bl	25654 <net_buf_simple_pull_mem>
    931a:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    931c:	7800      	ldrb	r0, [r0, #0]
    931e:	f01a fd12 	bl	23d46 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9322:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9324:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9326:	d40c      	bmi.n	9342 <hci_event_prio+0x66>
    9328:	4a10      	ldr	r2, [pc, #64]	; (936c <hci_event_prio+0x90>)
    932a:	4913      	ldr	r1, [pc, #76]	; (9378 <hci_event_prio+0x9c>)
    932c:	4811      	ldr	r0, [pc, #68]	; (9374 <hci_event_prio+0x98>)
    932e:	f640 5385 	movw	r3, #3461	; 0xd85
    9332:	f018 fa0b 	bl	2174c <assert_print>
    9336:	4040      	eors	r0, r0
    9338:	f380 8811 	msr	BASEPRI, r0
    933c:	f04f 0003 	mov.w	r0, #3
    9340:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9342:	2305      	movs	r3, #5
    9344:	4a0d      	ldr	r2, [pc, #52]	; (937c <hci_event_prio+0xa0>)
    9346:	7838      	ldrb	r0, [r7, #0]
    9348:	4621      	mov	r1, r4
    934a:	f7ff f8af 	bl	84ac <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    934e:	07b3      	lsls	r3, r6, #30
    9350:	d507      	bpl.n	9362 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    9352:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    9354:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    9358:	fa13 f585 	uxtah	r5, r3, r5
    935c:	60e5      	str	r5, [r4, #12]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    935e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    9362:	4620      	mov	r0, r4
}
    9364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    9368:	f011 bd10 	b.w	1ad8c <net_buf_unref>
    936c:	0002bbf7 	.word	0x0002bbf7
    9370:	0002bde1 	.word	0x0002bde1
    9374:	0002bc34 	.word	0x0002bc34
    9378:	0002bdfa 	.word	0x0002bdfa
    937c:	000282d4 	.word	0x000282d4

00009380 <bt_recv>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_recv(struct net_buf *buf)
{
    9380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    9382:	7e03      	ldrb	r3, [r0, #24]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	LOG_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    9384:	2b01      	cmp	r3, #1
{
    9386:	af00      	add	r7, sp, #0
    9388:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    938a:	d05f      	beq.n	944c <bt_recv+0xcc>
    938c:	2b03      	cmp	r3, #3
    938e:	f040 808c 	bne.w	94aa <bt_recv+0x12a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9392:	8a03      	ldrh	r3, [r0, #16]
    9394:	2b03      	cmp	r3, #3
    9396:	d80c      	bhi.n	93b2 <bt_recv+0x32>
    9398:	4a51      	ldr	r2, [pc, #324]	; (94e0 <bt_recv+0x160>)
    939a:	4952      	ldr	r1, [pc, #328]	; (94e4 <bt_recv+0x164>)
    939c:	4852      	ldr	r0, [pc, #328]	; (94e8 <bt_recv+0x168>)
    939e:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
    93a2:	f018 f9d3 	bl	2174c <assert_print>
    93a6:	4040      	eors	r0, r0
    93a8:	f380 8811 	msr	BASEPRI, r0
    93ac:	f04f 0003 	mov.w	r0, #3
    93b0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    93b2:	2104      	movs	r1, #4
    93b4:	f104 000c 	add.w	r0, r4, #12
    93b8:	f01c f94c 	bl	25654 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    93bc:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    93be:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    93c0:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    93c2:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    93c4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    93c8:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    93ca:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    93cc:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
    93ce:	d018      	beq.n	9402 <bt_recv+0x82>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    93d0:	4846      	ldr	r0, [pc, #280]	; (94ec <bt_recv+0x16c>)
    93d2:	6802      	ldr	r2, [r0, #0]
    93d4:	0756      	lsls	r6, r2, #29
    93d6:	d010      	beq.n	93fa <bt_recv+0x7a>
    93d8:	466d      	mov	r5, sp
    93da:	b08a      	sub	sp, #40	; 0x28
    93dc:	466a      	mov	r2, sp
    93de:	4e44      	ldr	r6, [pc, #272]	; (94f0 <bt_recv+0x170>)
    93e0:	6156      	str	r6, [r2, #20]
    93e2:	4e44      	ldr	r6, [pc, #272]	; (94f4 <bt_recv+0x174>)
    93e4:	6213      	str	r3, [r2, #32]
    93e6:	2305      	movs	r3, #5
    93e8:	e9c2 6106 	strd	r6, r1, [r2, #24]
    93ec:	f842 3f10 	str.w	r3, [r2, #16]!
    93f0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    93f4:	f01a fcc9 	bl	23d8a <z_log_msg_static_create.constprop.0>
    93f8:	46ad      	mov	sp, r5
	net_buf_unref(buf);
    93fa:	4620      	mov	r0, r4
    93fc:	f011 fcc6 	bl	1ad8c <net_buf_unref>
}
    9400:	e021      	b.n	9446 <bt_recv+0xc6>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    9402:	f001 fe0b 	bl	b01c <bt_conn_lookup_handle>
	if (!conn) {
    9406:	4605      	mov	r5, r0
    9408:	b990      	cbnz	r0, 9430 <bt_recv+0xb0>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    940a:	4838      	ldr	r0, [pc, #224]	; (94ec <bt_recv+0x16c>)
    940c:	6803      	ldr	r3, [r0, #0]
    940e:	075d      	lsls	r5, r3, #29
    9410:	d0f3      	beq.n	93fa <bt_recv+0x7a>
    9412:	466d      	mov	r5, sp
    9414:	b088      	sub	sp, #32
    9416:	8b63      	ldrh	r3, [r4, #26]
    9418:	466a      	mov	r2, sp
    941a:	4937      	ldr	r1, [pc, #220]	; (94f8 <bt_recv+0x178>)
    941c:	6151      	str	r1, [r2, #20]
    941e:	4935      	ldr	r1, [pc, #212]	; (94f4 <bt_recv+0x174>)
    9420:	e9c2 1306 	strd	r1, r3, [r2, #24]
    9424:	2304      	movs	r3, #4
    9426:	f842 3f10 	str.w	r3, [r2, #16]!
    942a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    942e:	e7e1      	b.n	93f4 <bt_recv+0x74>
	acl(buf)->index = bt_conn_index(conn);
    9430:	f001 ff14 	bl	b25c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9434:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    9436:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
    9438:	4621      	mov	r1, r4
    943a:	4628      	mov	r0, r5
    943c:	f001 fc52 	bl	ace4 <bt_conn_recv>
	bt_conn_unref(conn);
    9440:	4628      	mov	r0, r5
    9442:	f01a fef7 	bl	24234 <bt_conn_unref>
#if defined(CONFIG_BT_RECV_BLOCKING)
		hci_acl(buf);
#else
		rx_queue_put(buf);
#endif
		return 0;
    9446:	2000      	movs	r0, #0
	default:
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    9448:	46bd      	mov	sp, r7
    944a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    944c:	8a03      	ldrh	r3, [r0, #16]
    944e:	2b01      	cmp	r3, #1
    9450:	d80c      	bhi.n	946c <bt_recv+0xec>
    9452:	4a23      	ldr	r2, [pc, #140]	; (94e0 <bt_recv+0x160>)
    9454:	4923      	ldr	r1, [pc, #140]	; (94e4 <bt_recv+0x164>)
    9456:	4824      	ldr	r0, [pc, #144]	; (94e8 <bt_recv+0x168>)
    9458:	f640 136b 	movw	r3, #2411	; 0x96b
    945c:	f018 f976 	bl	2174c <assert_print>
    9460:	4040      	eors	r0, r0
    9462:	f380 8811 	msr	BASEPRI, r0
    9466:	f04f 0003 	mov.w	r0, #3
    946a:	df02      	svc	2
    946c:	2102      	movs	r1, #2
    946e:	f104 000c 	add.w	r0, r4, #12
    9472:	f01c f8ef 	bl	25654 <net_buf_simple_pull_mem>
    9476:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    9478:	7800      	ldrb	r0, [r0, #0]
    947a:	f01a fc64 	bl	23d46 <bt_hci_evt_get_flags>
    947e:	0781      	lsls	r1, r0, #30
    9480:	d40c      	bmi.n	949c <bt_recv+0x11c>
    9482:	4a17      	ldr	r2, [pc, #92]	; (94e0 <bt_recv+0x160>)
    9484:	491d      	ldr	r1, [pc, #116]	; (94fc <bt_recv+0x17c>)
    9486:	4818      	ldr	r0, [pc, #96]	; (94e8 <bt_recv+0x168>)
    9488:	f640 136f 	movw	r3, #2415	; 0x96f
    948c:	f018 f95e 	bl	2174c <assert_print>
    9490:	4040      	eors	r0, r0
    9492:	f380 8811 	msr	BASEPRI, r0
    9496:	f04f 0003 	mov.w	r0, #3
    949a:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    949c:	4a18      	ldr	r2, [pc, #96]	; (9500 <bt_recv+0x180>)
    949e:	7828      	ldrb	r0, [r5, #0]
    94a0:	2304      	movs	r3, #4
    94a2:	4621      	mov	r1, r4
    94a4:	f7ff f802 	bl	84ac <handle_event>
    94a8:	e7a7      	b.n	93fa <bt_recv+0x7a>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    94aa:	4810      	ldr	r0, [pc, #64]	; (94ec <bt_recv+0x16c>)
    94ac:	6802      	ldr	r2, [r0, #0]
    94ae:	0752      	lsls	r2, r2, #29
    94b0:	d00f      	beq.n	94d2 <bt_recv+0x152>
    94b2:	466d      	mov	r5, sp
    94b4:	b088      	sub	sp, #32
    94b6:	466a      	mov	r2, sp
    94b8:	4912      	ldr	r1, [pc, #72]	; (9504 <bt_recv+0x184>)
    94ba:	6151      	str	r1, [r2, #20]
    94bc:	4912      	ldr	r1, [pc, #72]	; (9508 <bt_recv+0x188>)
	switch (bt_buf_get_type(buf)) {
    94be:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    94c2:	2304      	movs	r3, #4
    94c4:	f842 3f10 	str.w	r3, [r2, #16]!
    94c8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    94cc:	f01a fc5d 	bl	23d8a <z_log_msg_static_create.constprop.0>
    94d0:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    94d2:	4620      	mov	r0, r4
    94d4:	f011 fc5a 	bl	1ad8c <net_buf_unref>
		return -EINVAL;
    94d8:	f06f 0015 	mvn.w	r0, #21
    94dc:	e7b4      	b.n	9448 <bt_recv+0xc8>
    94de:	bf00      	nop
    94e0:	0002bbf7 	.word	0x0002bbf7
    94e4:	0002bde1 	.word	0x0002bde1
    94e8:	0002bc34 	.word	0x0002bc34
    94ec:	20000afc 	.word	0x20000afc
    94f0:	0002be13 	.word	0x0002be13
    94f4:	0002c2b3 	.word	0x0002c2b3
    94f8:	0002be3b 	.word	0x0002be3b
    94fc:	0002be61 	.word	0x0002be61
    9500:	000282fc 	.word	0x000282fc
    9504:	0002be8f 	.word	0x0002be8f
    9508:	0002c2bb 	.word	0x0002c2bb

0000950c <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    950c:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    950e:	7e03      	ldrb	r3, [r0, #24]
    9510:	2b01      	cmp	r3, #1
{
    9512:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9514:	d00c      	beq.n	9530 <bt_recv_prio+0x24>
    9516:	4a09      	ldr	r2, [pc, #36]	; (953c <bt_recv_prio+0x30>)
    9518:	4909      	ldr	r1, [pc, #36]	; (9540 <bt_recv_prio+0x34>)
    951a:	480a      	ldr	r0, [pc, #40]	; (9544 <bt_recv_prio+0x38>)
    951c:	f640 53d7 	movw	r3, #3543	; 0xdd7
    9520:	f018 f914 	bl	2174c <assert_print>
    9524:	4040      	eors	r0, r0
    9526:	f380 8811 	msr	BASEPRI, r0
    952a:	f04f 0003 	mov.w	r0, #3
    952e:	df02      	svc	2

	hci_event_prio(buf);
    9530:	4620      	mov	r0, r4
    9532:	f7ff fed3 	bl	92dc <hci_event_prio>

	return 0;
}
    9536:	2000      	movs	r0, #0
    9538:	bd10      	pop	{r4, pc}
    953a:	bf00      	nop
    953c:	0002bbf7 	.word	0x0002bbf7
    9540:	0002bea7 	.word	0x0002bea7
    9544:	0002bc34 	.word	0x0002bc34

00009548 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    9548:	4a08      	ldr	r2, [pc, #32]	; (956c <bt_hci_driver_register+0x24>)
{
    954a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    954c:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    9550:	b930      	cbnz	r0, 9560 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    9552:	68d9      	ldr	r1, [r3, #12]
    9554:	b139      	cbz	r1, 9566 <bt_hci_driver_register+0x1e>
    9556:	6959      	ldr	r1, [r3, #20]
    9558:	b129      	cbz	r1, 9566 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    955a:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	LOG_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    955e:	4770      	bx	lr
		return -EALREADY;
    9560:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9564:	4770      	bx	lr
		return -EINVAL;
    9566:	f06f 0015 	mvn.w	r0, #21
}
    956a:	4770      	bx	lr
    956c:	20000010 	.word	0x20000010

00009570 <bt_finalize_init>:

void bt_finalize_init(void)
{
    9570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9574:	f8df 9150 	ldr.w	r9, [pc, #336]	; 96c8 <bt_finalize_init+0x158>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9578:	4854      	ldr	r0, [pc, #336]	; (96cc <bt_finalize_init+0x15c>)
    957a:	4c55      	ldr	r4, [pc, #340]	; (96d0 <bt_finalize_init+0x160>)
{
    957c:	b083      	sub	sp, #12
    957e:	2104      	movs	r1, #4
    9580:	af00      	add	r7, sp, #0
    9582:	f01a fbf3 	bl	23d6c <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9586:	f8d9 3000 	ldr.w	r3, [r9]
    958a:	f003 0307 	and.w	r3, r3, #7
    958e:	2b02      	cmp	r3, #2
    9590:	d928      	bls.n	95e4 <bt_finalize_init+0x74>
    9592:	79e2      	ldrb	r2, [r4, #7]
    9594:	4b4f      	ldr	r3, [pc, #316]	; (96d4 <bt_finalize_init+0x164>)
    9596:	4d50      	ldr	r5, [pc, #320]	; (96d8 <bt_finalize_init+0x168>)
    9598:	4620      	mov	r0, r4
    959a:	2a01      	cmp	r2, #1
    959c:	bf88      	it	hi
    959e:	461d      	movhi	r5, r3
    95a0:	466e      	mov	r6, sp
    95a2:	f7fe fd2f 	bl	8004 <bt_addr_le_str>
    95a6:	b08a      	sub	sp, #40	; 0x28
    95a8:	466b      	mov	r3, sp
    95aa:	494c      	ldr	r1, [pc, #304]	; (96dc <bt_finalize_init+0x16c>)
    95ac:	6159      	str	r1, [r3, #20]
    95ae:	494c      	ldr	r1, [pc, #304]	; (96e0 <bt_finalize_init+0x170>)
    95b0:	6218      	str	r0, [r3, #32]
    95b2:	e9c3 1506 	strd	r1, r5, [r3, #24]
    95b6:	494b      	ldr	r1, [pc, #300]	; (96e4 <bt_finalize_init+0x174>)
    95b8:	6079      	str	r1, [r7, #4]
    95ba:	f103 0210 	add.w	r2, r3, #16
    95be:	1d38      	adds	r0, r7, #4
    95c0:	f103 0123 	add.w	r1, r3, #35	; 0x23
    95c4:	f103 0527 	add.w	r5, r3, #39	; 0x27
    95c8:	f810 cb01 	ldrb.w	ip, [r0], #1
    95cc:	f801 cf01 	strb.w	ip, [r1, #1]!
    95d0:	42a9      	cmp	r1, r5
    95d2:	d1f9      	bne.n	95c8 <bt_finalize_init+0x58>
    95d4:	4944      	ldr	r1, [pc, #272]	; (96e8 <bt_finalize_init+0x178>)
    95d6:	6119      	str	r1, [r3, #16]
    95d8:	483b      	ldr	r0, [pc, #236]	; (96c8 <bt_finalize_init+0x158>)
    95da:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
    95de:	f01a fbd4 	bl	23d8a <z_log_msg_static_create.constprop.0>
    95e2:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    95e4:	4d41      	ldr	r5, [pc, #260]	; (96ec <bt_finalize_init+0x17c>)
    95e6:	4e3e      	ldr	r6, [pc, #248]	; (96e0 <bt_finalize_init+0x170>)
    95e8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 96f0 <bt_finalize_init+0x180>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    95ec:	f04f 0b01 	mov.w	fp, #1
	for (i = 1; i < bt_dev.id_count; i++) {
    95f0:	79e2      	ldrb	r2, [r4, #7]
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    95f2:	f8d9 3000 	ldr.w	r3, [r9]
	for (i = 1; i < bt_dev.id_count; i++) {
    95f6:	4593      	cmp	fp, r2
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    95f8:	f003 0307 	and.w	r3, r3, #7
	for (i = 1; i < bt_dev.id_count; i++) {
    95fc:	db47      	blt.n	968e <bt_finalize_init+0x11e>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    95fe:	2b02      	cmp	r3, #2
    9600:	d941      	bls.n	9686 <bt_finalize_init+0x116>
    9602:	f894 6068 	ldrb.w	r6, [r4, #104]	; 0x68
    9606:	4630      	mov	r0, r6
    9608:	f7fe fde8 	bl	81dc <ver_str>
    960c:	466d      	mov	r5, sp
    960e:	b08c      	sub	sp, #48	; 0x30
    9610:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
    9614:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    9618:	466a      	mov	r2, sp
    961a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 96e0 <bt_finalize_init+0x170>
    961e:	6293      	str	r3, [r2, #40]	; 0x28
    9620:	e9c2 6108 	strd	r6, r1, [r2, #32]
    9624:	4b33      	ldr	r3, [pc, #204]	; (96f4 <bt_finalize_init+0x184>)
    9626:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 96f8 <bt_finalize_init+0x188>
    962a:	f8c2 c014 	str.w	ip, [r2, #20]
    962e:	f240 3601 	movw	r6, #769	; 0x301
    9632:	e9c2 8006 	strd	r8, r0, [r2, #24]
    9636:	8596      	strh	r6, [r2, #44]	; 0x2c
    9638:	4823      	ldr	r0, [pc, #140]	; (96c8 <bt_finalize_init+0x158>)
    963a:	f842 3f10 	str.w	r3, [r2, #16]!
    963e:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
    9642:	f01a fba2 	bl	23d8a <z_log_msg_static_create.constprop.0>
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    9646:	f8d9 3000 	ldr.w	r3, [r9]
    964a:	f003 0307 	and.w	r3, r3, #7
    964e:	2b02      	cmp	r3, #2
    9650:	46ad      	mov	sp, r5
    9652:	d918      	bls.n	9686 <bt_finalize_init+0x116>
    9654:	f894 9069 	ldrb.w	r9, [r4, #105]	; 0x69
    9658:	4648      	mov	r0, r9
    965a:	f7fe fdbf 	bl	81dc <ver_str>
    965e:	b08c      	sub	sp, #48	; 0x30
    9660:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    9664:	466a      	mov	r2, sp
    9666:	4925      	ldr	r1, [pc, #148]	; (96fc <bt_finalize_init+0x18c>)
    9668:	6253      	str	r3, [r2, #36]	; 0x24
    966a:	4b25      	ldr	r3, [pc, #148]	; (9700 <bt_finalize_init+0x190>)
    966c:	8516      	strh	r6, [r2, #40]	; 0x28
    966e:	e9c2 1805 	strd	r1, r8, [r2, #20]
    9672:	e9c2 0907 	strd	r0, r9, [r2, #28]
    9676:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
    967a:	f842 3f10 	str.w	r3, [r2, #16]!
    967e:	4812      	ldr	r0, [pc, #72]	; (96c8 <bt_finalize_init+0x158>)
    9680:	f01a fb83 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9684:	46ad      	mov	sp, r5
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
    9686:	370c      	adds	r7, #12
    9688:	46bd      	mov	sp, r7
    968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    968e:	2b02      	cmp	r3, #2
    9690:	d916      	bls.n	96c0 <bt_finalize_init+0x150>
    9692:	ebcb 00cb 	rsb	r0, fp, fp, lsl #3
    9696:	4420      	add	r0, r4
    9698:	f7fe fcb4 	bl	8004 <bt_addr_le_str>
    969c:	46ea      	mov	sl, sp
    969e:	b08a      	sub	sp, #40	; 0x28
    96a0:	466a      	mov	r2, sp
    96a2:	f240 4302 	movw	r3, #1026	; 0x402
    96a6:	e9c2 b007 	strd	fp, r0, [r2, #28]
    96aa:	e9c2 5605 	strd	r5, r6, [r2, #20]
    96ae:	8493      	strh	r3, [r2, #36]	; 0x24
    96b0:	4805      	ldr	r0, [pc, #20]	; (96c8 <bt_finalize_init+0x158>)
    96b2:	f842 8f10 	str.w	r8, [r2, #16]!
    96b6:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    96ba:	f01a fb66 	bl	23d8a <z_log_msg_static_create.constprop.0>
    96be:	46d5      	mov	sp, sl
	for (i = 1; i < bt_dev.id_count; i++) {
    96c0:	f10b 0b01 	add.w	fp, fp, #1
    96c4:	e794      	b.n	95f0 <bt_finalize_init+0x80>
    96c6:	bf00      	nop
    96c8:	20000afc 	.word	0x20000afc
    96cc:	200000dc 	.word	0x200000dc
    96d0:	20000010 	.word	0x20000010
    96d4:	0002beca 	.word	0x0002beca
    96d8:	0002a598 	.word	0x0002a598
    96dc:	0002bece 	.word	0x0002bece
    96e0:	0002c1f6 	.word	0x0002c1f6
    96e4:	04020301 	.word	0x04020301
    96e8:	02000005 	.word	0x02000005
    96ec:	0002bee1 	.word	0x0002bee1
    96f0:	01000005 	.word	0x01000005
    96f4:	01000007 	.word	0x01000007
    96f8:	0002bef6 	.word	0x0002bef6
    96fc:	0002bf38 	.word	0x0002bf38
    9700:	01000006 	.word	0x01000006

00009704 <bt_init>:

static int bt_init(void)
{
    9704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9708:	4dbc      	ldr	r5, [pc, #752]	; (99fc <bt_init+0x2f8>)
{
    970a:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    970c:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    9710:	6899      	ldr	r1, [r3, #8]
    9712:	f011 0101 	ands.w	r1, r1, #1
{
    9716:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9718:	d121      	bne.n	975e <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    971a:	1d3a      	adds	r2, r7, #4
    971c:	f640 4003 	movw	r0, #3075	; 0xc03
    9720:	f7ff f978 	bl	8a14 <bt_hci_cmd_send_sync>
		if (err) {
    9724:	4604      	mov	r4, r0
    9726:	2800      	cmp	r0, #0
    9728:	d165      	bne.n	97f6 <bt_init+0xf2>
		hci_reset_complete(rsp);
    972a:	6878      	ldr	r0, [r7, #4]
	uint8_t status = buf->data[0];
    972c:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    972e:	781b      	ldrb	r3, [r3, #0]
    9730:	b99b      	cbnz	r3, 975a <bt_init+0x56>
    9732:	f3bf 8f5b 	dmb	ish
    9736:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    973a:	f3bf 8f5b 	dmb	ish
    973e:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9742:	f003 0309 	and.w	r3, r3, #9
    9746:	f3bf 8f5b 	dmb	ish
    974a:	e852 1f00 	ldrex	r1, [r2]
    974e:	e842 3400 	strex	r4, r3, [r2]
    9752:	2c00      	cmp	r4, #0
    9754:	d1f9      	bne.n	974a <bt_init+0x46>
    9756:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    975a:	f011 fb17 	bl	1ad8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    975e:	1d3a      	adds	r2, r7, #4
    9760:	2100      	movs	r1, #0
    9762:	f241 0003 	movw	r0, #4099	; 0x1003
    9766:	f7ff f955 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    976a:	4604      	mov	r4, r0
    976c:	2800      	cmp	r0, #0
    976e:	d142      	bne.n	97f6 <bt_init+0xf2>
	read_local_features_complete(rsp);
    9770:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9772:	48a3      	ldr	r0, [pc, #652]	; (9a00 <bt_init+0x2fc>)
    9774:	68f1      	ldr	r1, [r6, #12]
    9776:	2208      	movs	r2, #8
    9778:	3101      	adds	r1, #1
    977a:	f01a fa47 	bl	23c0c <memcpy>
	net_buf_unref(rsp);
    977e:	4630      	mov	r0, r6
    9780:	f011 fb04 	bl	1ad8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9784:	4621      	mov	r1, r4
    9786:	1d3a      	adds	r2, r7, #4
    9788:	f241 0001 	movw	r0, #4097	; 0x1001
    978c:	f7ff f942 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    9790:	4604      	mov	r4, r0
    9792:	bb80      	cbnz	r0, 97f6 <bt_init+0xf2>
	read_local_ver_complete(rsp);
    9794:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    9796:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    9798:	785a      	ldrb	r2, [r3, #1]
    979a:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    979e:	885a      	ldrh	r2, [r3, #2]
    97a0:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    97a4:	791a      	ldrb	r2, [r3, #4]
    97a6:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    97aa:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    97ae:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    97b2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    97b6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    97ba:	f011 fae7 	bl	1ad8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    97be:	4621      	mov	r1, r4
    97c0:	1d3a      	adds	r2, r7, #4
    97c2:	f241 0002 	movw	r0, #4098	; 0x1002
    97c6:	f7ff f925 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    97ca:	4604      	mov	r4, r0
    97cc:	b998      	cbnz	r0, 97f6 <bt_init+0xf2>
	read_supported_commands_complete(rsp);
    97ce:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    97d0:	488c      	ldr	r0, [pc, #560]	; (9a04 <bt_init+0x300>)
    97d2:	68f1      	ldr	r1, [r6, #12]
    97d4:	2240      	movs	r2, #64	; 0x40
    97d6:	3101      	adds	r1, #1
    97d8:	f01a fa18 	bl	23c0c <memcpy>
	net_buf_unref(rsp);
    97dc:	4630      	mov	r0, r6
    97de:	f011 fad5 	bl	1ad8c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    97e2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    97e6:	0658      	lsls	r0, r3, #25
    97e8:	d41a      	bmi.n	9820 <bt_init+0x11c>
		LOG_ERR("Non-LE capable controller detected!");
    97ea:	4887      	ldr	r0, [pc, #540]	; (9a08 <bt_init+0x304>)
    97ec:	6803      	ldr	r3, [r0, #0]
    97ee:	0759      	lsls	r1, r3, #29
    97f0:	d106      	bne.n	9800 <bt_init+0xfc>
		return -ENODEV;
    97f2:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    97f6:	4620      	mov	r0, r4
    97f8:	370c      	adds	r7, #12
    97fa:	46bd      	mov	sp, r7
    97fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Non-LE capable controller detected!");
    9800:	466c      	mov	r4, sp
    9802:	b088      	sub	sp, #32
    9804:	466a      	mov	r2, sp
    9806:	4b81      	ldr	r3, [pc, #516]	; (9a0c <bt_init+0x308>)
    9808:	6153      	str	r3, [r2, #20]
    980a:	4b81      	ldr	r3, [pc, #516]	; (9a10 <bt_init+0x30c>)
    980c:	6193      	str	r3, [r2, #24]
    980e:	2303      	movs	r3, #3
    9810:	f842 3f10 	str.w	r3, [r2, #16]!
    9814:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9818:	f01a fab7 	bl	23d8a <z_log_msg_static_create.constprop.0>
    981c:	46a5      	mov	sp, r4
	if (err) {
    981e:	e7e8      	b.n	97f2 <bt_init+0xee>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9820:	4621      	mov	r1, r4
    9822:	1d3a      	adds	r2, r7, #4
    9824:	f242 0003 	movw	r0, #8195	; 0x2003
    9828:	f7ff f8f4 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    982c:	4604      	mov	r4, r0
    982e:	2800      	cmp	r0, #0
    9830:	d1e1      	bne.n	97f6 <bt_init+0xf2>
	read_le_features_complete(rsp);
    9832:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9834:	4877      	ldr	r0, [pc, #476]	; (9a14 <bt_init+0x310>)
    9836:	68f1      	ldr	r1, [r6, #12]
    9838:	2208      	movs	r2, #8
    983a:	3101      	adds	r1, #1
    983c:	f01a f9e6 	bl	23c0c <memcpy>
	net_buf_unref(rsp);
    9840:	4630      	mov	r0, r6
    9842:	f011 faa3 	bl	1ad8c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9846:	4621      	mov	r1, r4
    9848:	1d3a      	adds	r2, r7, #4
    984a:	f242 0002 	movw	r0, #8194	; 0x2002
    984e:	f7ff f8e1 	bl	8a14 <bt_hci_cmd_send_sync>
		if (err) {
    9852:	4604      	mov	r4, r0
    9854:	2800      	cmp	r0, #0
    9856:	d1ce      	bne.n	97f6 <bt_init+0xf2>
		le_read_buffer_size_complete(rsp);
    9858:	687c      	ldr	r4, [r7, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    985a:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    985c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9860:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    9864:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    9866:	b121      	cbz	r1, 9872 <bt_init+0x16e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9868:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    986a:	486b      	ldr	r0, [pc, #428]	; (9a18 <bt_init+0x314>)
    986c:	4611      	mov	r1, r2
    986e:	f01d fa07 	bl	26c80 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    9872:	4620      	mov	r0, r4
    9874:	f011 fa8a 	bl	1ad8c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9878:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    987c:	f016 0620 	ands.w	r6, r6, #32
    9880:	d118      	bne.n	98b4 <bt_init+0x1b0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    9882:	2102      	movs	r1, #2
    9884:	f640 406d 	movw	r0, #3181	; 0xc6d
    9888:	f7ff f88a 	bl	89a0 <bt_hci_cmd_create>
		if (!buf) {
    988c:	4604      	mov	r4, r0
    988e:	2800      	cmp	r0, #0
    9890:	f000 80a7 	beq.w	99e2 <bt_init+0x2de>
	return net_buf_simple_add(&buf->b, len);
    9894:	2102      	movs	r1, #2
    9896:	300c      	adds	r0, #12
    9898:	f01b feab 	bl	255f2 <net_buf_simple_add>
		cp_le->le = 0x01;
    989c:	2301      	movs	r3, #1
    989e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    98a0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    98a2:	4621      	mov	r1, r4
    98a4:	4632      	mov	r2, r6
    98a6:	f640 406d 	movw	r0, #3181	; 0xc6d
    98aa:	f7ff f8b3 	bl	8a14 <bt_hci_cmd_send_sync>
		if (err) {
    98ae:	4604      	mov	r4, r0
    98b0:	2800      	cmp	r0, #0
    98b2:	d1a0      	bne.n	97f6 <bt_init+0xf2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    98b4:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    98b8:	071a      	lsls	r2, r3, #28
    98ba:	d512      	bpl.n	98e2 <bt_init+0x1de>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    98bc:	1d3a      	adds	r2, r7, #4
    98be:	2100      	movs	r1, #0
    98c0:	f242 001c 	movw	r0, #8220	; 0x201c
    98c4:	f7ff f8a6 	bl	8a14 <bt_hci_cmd_send_sync>
		if (err) {
    98c8:	4604      	mov	r4, r0
    98ca:	2800      	cmp	r0, #0
    98cc:	d193      	bne.n	97f6 <bt_init+0xf2>
		le_read_supp_states_complete(rsp);
    98ce:	6878      	ldr	r0, [r7, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    98d0:	68c3      	ldr	r3, [r0, #12]
    98d2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    98d6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    98da:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    98de:	f011 fa55 	bl	1ad8c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    98e2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    98e6:	069b      	lsls	r3, r3, #26
    98e8:	d521      	bpl.n	992e <bt_init+0x22a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    98ea:	1cb9      	adds	r1, r7, #2
    98ec:	4638      	mov	r0, r7
    98ee:	f7ff f915 	bl	8b1c <hci_le_read_max_data_len>
		if (err) {
    98f2:	4604      	mov	r4, r0
    98f4:	2800      	cmp	r0, #0
    98f6:	f47f af7e 	bne.w	97f6 <bt_init+0xf2>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    98fa:	2104      	movs	r1, #4
    98fc:	f242 0024 	movw	r0, #8228	; 0x2024
    9900:	f7ff f84e 	bl	89a0 <bt_hci_cmd_create>
		if (!buf) {
    9904:	4606      	mov	r6, r0
    9906:	2800      	cmp	r0, #0
    9908:	d06b      	beq.n	99e2 <bt_init+0x2de>
    990a:	2104      	movs	r1, #4
    990c:	300c      	adds	r0, #12
    990e:	f01b fe70 	bl	255f2 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9912:	883b      	ldrh	r3, [r7, #0]
    9914:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9916:	887b      	ldrh	r3, [r7, #2]
    9918:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    991a:	4622      	mov	r2, r4
    991c:	4631      	mov	r1, r6
    991e:	f242 0024 	movw	r0, #8228	; 0x2024
    9922:	f7ff f877 	bl	8a14 <bt_hci_cmd_send_sync>
		if (err) {
    9926:	4604      	mov	r4, r0
    9928:	2800      	cmp	r0, #0
    992a:	f47f af64 	bne.w	97f6 <bt_init+0xf2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    992e:	2108      	movs	r1, #8
    9930:	f242 0001 	movw	r0, #8193	; 0x2001
    9934:	f7ff f834 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
    9938:	4604      	mov	r4, r0
    993a:	2800      	cmp	r0, #0
    993c:	d051      	beq.n	99e2 <bt_init+0x2de>
    993e:	2108      	movs	r1, #8
    9940:	300c      	adds	r0, #12
    9942:	f01b fe56 	bl	255f2 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9946:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    994a:	f012 0f02 	tst.w	r2, #2
    994e:	bf14      	ite	ne
    9950:	232f      	movne	r3, #47	; 0x2f
    9952:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9954:	0696      	lsls	r6, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9956:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    995a:	bf48      	it	mi
    995c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9960:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9964:	bf18      	it	ne
    9966:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    996a:	2200      	movs	r2, #0
    996c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    996e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9972:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    9974:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    9976:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    9978:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    997a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    997c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    997e:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9980:	4621      	mov	r1, r4
    9982:	f242 0001 	movw	r0, #8193	; 0x2001
    9986:	f7ff f845 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    998a:	4604      	mov	r4, r0
    998c:	2800      	cmp	r0, #0
    998e:	f47f af32 	bne.w	97f6 <bt_init+0xf2>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9992:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    9996:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    999a:	0698      	lsls	r0, r3, #26
    999c:	d424      	bmi.n	99e8 <bt_init+0x2e4>
	if (bt_dev.le.acl_mtu) {
    999e:	b9c9      	cbnz	r1, 99d4 <bt_init+0x2d0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    99a0:	1d3a      	adds	r2, r7, #4
    99a2:	f241 0005 	movw	r0, #4101	; 0x1005
    99a6:	f7ff f835 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    99aa:	4604      	mov	r4, r0
    99ac:	2800      	cmp	r0, #0
    99ae:	f47f af22 	bne.w	97f6 <bt_init+0xf2>
	if (bt_dev.le.acl_mtu) {
    99b2:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    99b6:	687c      	ldr	r4, [r7, #4]
	if (bt_dev.le.acl_mtu) {
    99b8:	b94b      	cbnz	r3, 99ce <bt_init+0x2ca>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    99ba:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    99bc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    99c0:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    99c4:	889a      	ldrh	r2, [r3, #4]
    99c6:	4814      	ldr	r0, [pc, #80]	; (9a18 <bt_init+0x314>)
    99c8:	4611      	mov	r1, r2
    99ca:	f01d f959 	bl	26c80 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    99ce:	4620      	mov	r0, r4
    99d0:	f011 f9dc 	bl	1ad8c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    99d4:	2108      	movs	r1, #8
    99d6:	f640 4001 	movw	r0, #3073	; 0xc01
    99da:	f7fe ffe1 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
    99de:	4604      	mov	r4, r0
    99e0:	bb60      	cbnz	r0, 9a3c <bt_init+0x338>
		return -ENOBUFS;
    99e2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    99e6:	e706      	b.n	97f6 <bt_init+0xf2>
	else if (!bt_dev.le.acl_mtu) {
    99e8:	2900      	cmp	r1, #0
    99ea:	d1f3      	bne.n	99d4 <bt_init+0x2d0>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    99ec:	4806      	ldr	r0, [pc, #24]	; (9a08 <bt_init+0x304>)
    99ee:	6803      	ldr	r3, [r0, #0]
    99f0:	075a      	lsls	r2, r3, #29
    99f2:	d113      	bne.n	9a1c <bt_init+0x318>
		return -EIO;
    99f4:	f06f 0404 	mvn.w	r4, #4
    99f8:	e6fd      	b.n	97f6 <bt_init+0xf2>
    99fa:	bf00      	nop
    99fc:	20000010 	.word	0x20000010
    9a00:	20000080 	.word	0x20000080
    9a04:	20000088 	.word	0x20000088
    9a08:	20000afc 	.word	0x20000afc
    9a0c:	0002bf63 	.word	0x0002bf63
    9a10:	0002c3b7 	.word	0x0002c3b7
    9a14:	200000e0 	.word	0x200000e0
    9a18:	20000110 	.word	0x20000110
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9a1c:	466c      	mov	r4, sp
    9a1e:	b088      	sub	sp, #32
    9a20:	466a      	mov	r2, sp
    9a22:	4b8b      	ldr	r3, [pc, #556]	; (9c50 <bt_init+0x54c>)
    9a24:	6153      	str	r3, [r2, #20]
    9a26:	4b8b      	ldr	r3, [pc, #556]	; (9c54 <bt_init+0x550>)
    9a28:	6193      	str	r3, [r2, #24]
    9a2a:	2303      	movs	r3, #3
    9a2c:	f842 3f10 	str.w	r3, [r2, #16]!
    9a30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9a34:	f01a f9a9 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9a38:	46a5      	mov	sp, r4
	if (err) {
    9a3a:	e7db      	b.n	99f4 <bt_init+0x2f0>
    9a3c:	2108      	movs	r1, #8
    9a3e:	300c      	adds	r0, #12
    9a40:	f01b fdd7 	bl	255f2 <net_buf_simple_add>
	dst[0] = val;
    9a44:	2310      	movs	r3, #16
    9a46:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    9a48:	2388      	movs	r3, #136	; 0x88
    9a4a:	7043      	strb	r3, [r0, #1]
    9a4c:	2302      	movs	r3, #2
	dst[0] = val;
    9a4e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    9a50:	70c3      	strb	r3, [r0, #3]
    9a52:	2320      	movs	r3, #32
	dst[0] = val;
    9a54:	7082      	strb	r2, [r0, #2]
    9a56:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    9a58:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    9a5a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    9a5c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9a5e:	4621      	mov	r1, r4
    9a60:	f640 4001 	movw	r0, #3073	; 0xc01
    9a64:	f7fe ffd6 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    9a68:	4604      	mov	r4, r0
    9a6a:	2800      	cmp	r0, #0
    9a6c:	f47f aec3 	bne.w	97f6 <bt_init+0xf2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9a70:	4601      	mov	r1, r0
    9a72:	1d3a      	adds	r2, r7, #4
    9a74:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9a78:	f7fe ffcc 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    9a7c:	4c76      	ldr	r4, [pc, #472]	; (9c58 <bt_init+0x554>)
    9a7e:	b310      	cbz	r0, 9ac6 <bt_init+0x3c2>
		LOG_WRN("Vendor HCI extensions not available");
    9a80:	6823      	ldr	r3, [r4, #0]
    9a82:	f013 0f06 	tst.w	r3, #6
    9a86:	d00f      	beq.n	9aa8 <bt_init+0x3a4>
    9a88:	466d      	mov	r5, sp
    9a8a:	b088      	sub	sp, #32
    9a8c:	466a      	mov	r2, sp
    9a8e:	4b73      	ldr	r3, [pc, #460]	; (9c5c <bt_init+0x558>)
    9a90:	6153      	str	r3, [r2, #20]
    9a92:	4b73      	ldr	r3, [pc, #460]	; (9c60 <bt_init+0x55c>)
    9a94:	6193      	str	r3, [r2, #24]
    9a96:	2303      	movs	r3, #3
    9a98:	f842 3f10 	str.w	r3, [r2, #16]!
    9a9c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9aa0:	4620      	mov	r0, r4
    9aa2:	f01a f972 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9aa6:	46ad      	mov	sp, r5
	err = bt_id_init();
    9aa8:	f000 fbce 	bl	a248 <bt_id_init>
	if (err) {
    9aac:	4604      	mov	r4, r0
    9aae:	2800      	cmp	r0, #0
    9ab0:	f47f aea1 	bne.w	97f6 <bt_init+0xf2>
		err = bt_conn_init();
    9ab4:	f001 fe84 	bl	b7c0 <bt_conn_init>
		if (err) {
    9ab8:	4604      	mov	r4, r0
    9aba:	2800      	cmp	r0, #0
    9abc:	f47f ae9b 	bne.w	97f6 <bt_init+0xf2>
	bt_finalize_init();
    9ac0:	f7ff fd56 	bl	9570 <bt_finalize_init>
	return 0;
    9ac4:	e697      	b.n	97f6 <bt_init+0xf2>
	rp.info = (void *)rsp->data;
    9ac6:	687b      	ldr	r3, [r7, #4]
    9ac8:	f8d3 800c 	ldr.w	r8, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    9acc:	6823      	ldr	r3, [r4, #0]
    9ace:	f003 0307 	and.w	r3, r3, #7
    9ad2:	2b02      	cmp	r3, #2
    9ad4:	d96b      	bls.n	9bae <bt_init+0x4aa>
    9ad6:	f8b8 3001 	ldrh.w	r3, [r8, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    9ada:	2b03      	cmp	r3, #3
		return plat_str[platform];
    9adc:	bf96      	itet	ls
    9ade:	4a61      	ldrls	r2, [pc, #388]	; (9c64 <bt_init+0x560>)
	return "unknown";
    9ae0:	4961      	ldrhi	r1, [pc, #388]	; (9c68 <bt_init+0x564>)
		return plat_str[platform];
    9ae2:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    9ae6:	46e9      	mov	r9, sp
    9ae8:	b08a      	sub	sp, #40	; 0x28
    9aea:	466a      	mov	r2, sp
    9aec:	4e5c      	ldr	r6, [pc, #368]	; (9c60 <bt_init+0x55c>)
    9aee:	6213      	str	r3, [r2, #32]
    9af0:	f240 3301 	movw	r3, #769	; 0x301
    9af4:	8493      	strh	r3, [r2, #36]	; 0x24
    9af6:	485d      	ldr	r0, [pc, #372]	; (9c6c <bt_init+0x568>)
    9af8:	4b5d      	ldr	r3, [pc, #372]	; (9c70 <bt_init+0x56c>)
    9afa:	6150      	str	r0, [r2, #20]
    9afc:	e9c2 6106 	strd	r6, r1, [r2, #24]
    9b00:	4855      	ldr	r0, [pc, #340]	; (9c58 <bt_init+0x554>)
    9b02:	f842 3f10 	str.w	r3, [r2, #16]!
    9b06:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    9b0a:	f01a f93e 	bl	23d8a <z_log_msg_static_create.constprop.0>
	LOG_INF("HW Variant: %s (0x%04x)",
    9b0e:	6823      	ldr	r3, [r4, #0]
    9b10:	f003 0307 	and.w	r3, r3, #7
    9b14:	2b02      	cmp	r3, #2
    9b16:	46cd      	mov	sp, r9
    9b18:	d949      	bls.n	9bae <bt_init+0x4aa>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9b1a:	f8b8 2001 	ldrh.w	r2, [r8, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
    9b1e:	f8b8 3003 	ldrh.w	r3, [r8, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9b22:	2a02      	cmp	r2, #2
    9b24:	d164      	bne.n	9bf0 <bt_init+0x4ec>
	if (variant < ARRAY_SIZE(nordic_str)) {
    9b26:	2b03      	cmp	r3, #3
    9b28:	d862      	bhi.n	9bf0 <bt_init+0x4ec>
		return nordic_str[variant];
    9b2a:	4a52      	ldr	r2, [pc, #328]	; (9c74 <bt_init+0x570>)
    9b2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
    9b30:	46e9      	mov	r9, sp
    9b32:	b08a      	sub	sp, #40	; 0x28
    9b34:	466a      	mov	r2, sp
    9b36:	4850      	ldr	r0, [pc, #320]	; (9c78 <bt_init+0x574>)
    9b38:	e9c2 1307 	strd	r1, r3, [r2, #28]
    9b3c:	f240 3301 	movw	r3, #769	; 0x301
    9b40:	8493      	strh	r3, [r2, #36]	; 0x24
    9b42:	4b4b      	ldr	r3, [pc, #300]	; (9c70 <bt_init+0x56c>)
    9b44:	e9c2 0605 	strd	r0, r6, [r2, #20]
    9b48:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    9b4c:	f842 3f10 	str.w	r3, [r2, #16]!
    9b50:	4841      	ldr	r0, [pc, #260]	; (9c58 <bt_init+0x554>)
    9b52:	f01a f91a 	bl	23d8a <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    9b56:	6823      	ldr	r3, [r4, #0]
    9b58:	f003 0307 	and.w	r3, r3, #7
    9b5c:	2b02      	cmp	r3, #2
    9b5e:	46cd      	mov	sp, r9
    9b60:	d925      	bls.n	9bae <bt_init+0x4aa>
    9b62:	f898 3005 	ldrb.w	r3, [r8, #5]
    9b66:	f898 e006 	ldrb.w	lr, [r8, #6]
    9b6a:	f8b8 c007 	ldrh.w	ip, [r8, #7]
    9b6e:	f8d8 0009 	ldr.w	r0, [r8, #9]
	if (variant < ARRAY_SIZE(var_str)) {
    9b72:	2b03      	cmp	r3, #3
		return var_str[variant];
    9b74:	bf96      	itet	ls
    9b76:	4a41      	ldrls	r2, [pc, #260]	; (9c7c <bt_init+0x578>)
	return "unknown";
    9b78:	493b      	ldrhi	r1, [pc, #236]	; (9c68 <bt_init+0x564>)
		return var_str[variant];
    9b7a:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    9b7e:	46e8      	mov	r8, sp
    9b80:	b08e      	sub	sp, #56	; 0x38
    9b82:	466a      	mov	r2, sp
    9b84:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9c80 <bt_init+0x57c>
    9b88:	62d0      	str	r0, [r2, #44]	; 0x2c
    9b8a:	e9c2 1307 	strd	r1, r3, [r2, #28]
    9b8e:	f240 3301 	movw	r3, #769	; 0x301
    9b92:	8613      	strh	r3, [r2, #48]	; 0x30
    9b94:	4b3b      	ldr	r3, [pc, #236]	; (9c84 <bt_init+0x580>)
    9b96:	4830      	ldr	r0, [pc, #192]	; (9c58 <bt_init+0x554>)
    9b98:	e9c2 9605 	strd	r9, r6, [r2, #20]
    9b9c:	e9c2 ec09 	strd	lr, ip, [r2, #36]	; 0x24
    9ba0:	f244 41c0 	movw	r1, #17600	; 0x44c0
    9ba4:	f842 3f10 	str.w	r3, [r2, #16]!
    9ba8:	f01a f8ef 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9bac:	46c5      	mov	sp, r8
	net_buf_unref(rsp);
    9bae:	6878      	ldr	r0, [r7, #4]
    9bb0:	f011 f8ec 	bl	1ad8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9bb4:	1d3a      	adds	r2, r7, #4
    9bb6:	2100      	movs	r1, #0
    9bb8:	f64f 4002 	movw	r0, #64514	; 0xfc02
    9bbc:	f7fe ff2a 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    9bc0:	4606      	mov	r6, r0
    9bc2:	b1b8      	cbz	r0, 9bf4 <bt_init+0x4f0>
		LOG_WRN("Failed to read supported vendor commands");
    9bc4:	6823      	ldr	r3, [r4, #0]
    9bc6:	f013 0f06 	tst.w	r3, #6
    9bca:	f43f af6d 	beq.w	9aa8 <bt_init+0x3a4>
    9bce:	466c      	mov	r4, sp
    9bd0:	b088      	sub	sp, #32
    9bd2:	466a      	mov	r2, sp
    9bd4:	4b2c      	ldr	r3, [pc, #176]	; (9c88 <bt_init+0x584>)
			LOG_WRN("Failed to read supported vendor features");
    9bd6:	6153      	str	r3, [r2, #20]
    9bd8:	4b21      	ldr	r3, [pc, #132]	; (9c60 <bt_init+0x55c>)
    9bda:	6193      	str	r3, [r2, #24]
    9bdc:	2303      	movs	r3, #3
    9bde:	f842 3f10 	str.w	r3, [r2, #16]!
    9be2:	481d      	ldr	r0, [pc, #116]	; (9c58 <bt_init+0x554>)
    9be4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9be8:	f01a f8cf 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9bec:	46a5      	mov	sp, r4
    9bee:	e75b      	b.n	9aa8 <bt_init+0x3a4>
		return "unknown";
    9bf0:	491d      	ldr	r1, [pc, #116]	; (9c68 <bt_init+0x564>)
    9bf2:	e79d      	b.n	9b30 <bt_init+0x42c>
	rp.cmds = (void *)rsp->data;
    9bf4:	f8d7 8004 	ldr.w	r8, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9bf8:	4824      	ldr	r0, [pc, #144]	; (9c8c <bt_init+0x588>)
    9bfa:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9bfe:	2202      	movs	r2, #2
    9c00:	3101      	adds	r1, #1
    9c02:	f01a f803 	bl	23c0c <memcpy>
	net_buf_unref(rsp);
    9c06:	4640      	mov	r0, r8
    9c08:	f011 f8c0 	bl	1ad8c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9c0c:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    9c10:	075b      	lsls	r3, r3, #29
    9c12:	f57f af49 	bpl.w	9aa8 <bt_init+0x3a4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    9c16:	1d3a      	adds	r2, r7, #4
    9c18:	4631      	mov	r1, r6
    9c1a:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9c1e:	f7fe fef9 	bl	8a14 <bt_hci_cmd_send_sync>
		if (err) {
    9c22:	b148      	cbz	r0, 9c38 <bt_init+0x534>
			LOG_WRN("Failed to read supported vendor features");
    9c24:	6823      	ldr	r3, [r4, #0]
    9c26:	f013 0f06 	tst.w	r3, #6
    9c2a:	f43f af3d 	beq.w	9aa8 <bt_init+0x3a4>
    9c2e:	466c      	mov	r4, sp
    9c30:	b088      	sub	sp, #32
    9c32:	466a      	mov	r2, sp
    9c34:	4b16      	ldr	r3, [pc, #88]	; (9c90 <bt_init+0x58c>)
    9c36:	e7ce      	b.n	9bd6 <bt_init+0x4d2>
		rp.feat = (void *)rsp->data;
    9c38:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9c3a:	4816      	ldr	r0, [pc, #88]	; (9c94 <bt_init+0x590>)
    9c3c:	68e1      	ldr	r1, [r4, #12]
    9c3e:	2201      	movs	r2, #1
    9c40:	4411      	add	r1, r2
    9c42:	f019 ffe3 	bl	23c0c <memcpy>
		net_buf_unref(rsp);
    9c46:	4620      	mov	r0, r4
    9c48:	f011 f8a0 	bl	1ad8c <net_buf_unref>
    9c4c:	e72c      	b.n	9aa8 <bt_init+0x3a4>
    9c4e:	bf00      	nop
    9c50:	0002bf8b 	.word	0x0002bf8b
    9c54:	0002c3bf 	.word	0x0002c3bf
    9c58:	20000afc 	.word	0x20000afc
    9c5c:	0002bfb2 	.word	0x0002bfb2
    9c60:	0002c392 	.word	0x0002c392
    9c64:	000282c4 	.word	0x000282c4
    9c68:	0002ba36 	.word	0x0002ba36
    9c6c:	0002bfda 	.word	0x0002bfda
    9c70:	01000005 	.word	0x01000005
    9c74:	000282b4 	.word	0x000282b4
    9c78:	0002bff7 	.word	0x0002bff7
    9c7c:	000282a4 	.word	0x000282a4
    9c80:	0002c013 	.word	0x0002c013
    9c84:	01000008 	.word	0x01000008
    9c88:	0002c044 	.word	0x0002c044
    9c8c:	200000c9 	.word	0x200000c9
    9c90:	0002c071 	.word	0x0002c071
    9c94:	200000c8 	.word	0x200000c8

00009c98 <init_work>:

static void init_work(struct k_work *work)
{
    9c98:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    9c9a:	f7ff fd33 	bl	9704 <bt_init>
	if (ready_cb) {
    9c9e:	4b03      	ldr	r3, [pc, #12]	; (9cac <init_work+0x14>)
    9ca0:	681b      	ldr	r3, [r3, #0]
    9ca2:	b113      	cbz	r3, 9caa <init_work+0x12>
		ready_cb(err);
	}
}
    9ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    9ca8:	4718      	bx	r3
}
    9caa:	bd10      	pop	{r4, pc}
    9cac:	2000258c 	.word	0x2000258c

00009cb0 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    9cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
    9cb2:	4d3b      	ldr	r5, [pc, #236]	; (9da0 <bt_enable+0xf0>)
{
    9cb4:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
    9cb6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    9cba:	af08      	add	r7, sp, #32
    9cbc:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    9cbe:	b9cb      	cbnz	r3, 9cf4 <bt_enable+0x44>
		LOG_ERR("No HCI driver registered");
    9cc0:	4838      	ldr	r0, [pc, #224]	; (9da4 <bt_enable+0xf4>)
    9cc2:	6803      	ldr	r3, [r0, #0]
    9cc4:	075a      	lsls	r2, r3, #29
    9cc6:	d105      	bne.n	9cd4 <bt_enable+0x24>
		return -ENODEV;
    9cc8:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    9ccc:	4620      	mov	r0, r4
    9cce:	3704      	adds	r7, #4
    9cd0:	46bd      	mov	sp, r7
    9cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("No HCI driver registered");
    9cd4:	466c      	mov	r4, sp
    9cd6:	4622      	mov	r2, r4
    9cd8:	b088      	sub	sp, #32
    9cda:	4b33      	ldr	r3, [pc, #204]	; (9da8 <bt_enable+0xf8>)
    9cdc:	6163      	str	r3, [r4, #20]
    9cde:	4b33      	ldr	r3, [pc, #204]	; (9dac <bt_enable+0xfc>)
    9ce0:	61a3      	str	r3, [r4, #24]
    9ce2:	2303      	movs	r3, #3
    9ce4:	f842 3f10 	str.w	r3, [r2, #16]!
    9ce8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9cec:	f01a f84d 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9cf0:	46a5      	mov	sp, r4
    9cf2:	e7e9      	b.n	9cc8 <bt_enable+0x18>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9cf4:	f06f 0102 	mvn.w	r1, #2
    9cf8:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    9cfc:	f01a f848 	bl	23d90 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    9d00:	2101      	movs	r1, #1
    9d02:	f01a f833 	bl	23d6c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9d06:	ea10 0401 	ands.w	r4, r0, r1
    9d0a:	d145      	bne.n	9d98 <bt_enable+0xe8>
	ready_cb = cb;
    9d0c:	4b28      	ldr	r3, [pc, #160]	; (9db0 <bt_enable+0x100>)
    9d0e:	601e      	str	r6, [r3, #0]
    9d10:	460a      	mov	r2, r1
    9d12:	f505 708c 	add.w	r0, r5, #280	; 0x118
    9d16:	f01c ffb3 	bl	26c80 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    9d1a:	f505 709a 	add.w	r0, r5, #308	; 0x134
    9d1e:	f01c ff69 	bl	26bf4 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9d22:	2200      	movs	r2, #0
    9d24:	2300      	movs	r3, #0
    9d26:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9d2a:	f06f 0308 	mvn.w	r3, #8
    9d2e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    9d32:	e9cd 4400 	strd	r4, r4, [sp]
    9d36:	4b1f      	ldr	r3, [pc, #124]	; (9db4 <bt_enable+0x104>)
    9d38:	491f      	ldr	r1, [pc, #124]	; (9db8 <bt_enable+0x108>)
    9d3a:	9404      	str	r4, [sp, #16]
    9d3c:	f44f 7240 	mov.w	r2, #768	; 0x300
    9d40:	481e      	ldr	r0, [pc, #120]	; (9dbc <bt_enable+0x10c>)
    9d42:	f015 fe5f 	bl	1fa04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    9d46:	491e      	ldr	r1, [pc, #120]	; (9dc0 <bt_enable+0x110>)
    9d48:	481c      	ldr	r0, [pc, #112]	; (9dbc <bt_enable+0x10c>)
    9d4a:	f015 fd95 	bl	1f878 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    9d4e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    9d52:	68db      	ldr	r3, [r3, #12]
    9d54:	4798      	blx	r3
	if (err) {
    9d56:	4604      	mov	r4, r0
    9d58:	b1a0      	cbz	r0, 9d84 <bt_enable+0xd4>
		LOG_ERR("HCI driver open failed (%d)", err);
    9d5a:	4812      	ldr	r0, [pc, #72]	; (9da4 <bt_enable+0xf4>)
    9d5c:	6803      	ldr	r3, [r0, #0]
    9d5e:	075b      	lsls	r3, r3, #29
    9d60:	d0b4      	beq.n	9ccc <bt_enable+0x1c>
    9d62:	466d      	mov	r5, sp
    9d64:	462a      	mov	r2, r5
    9d66:	b088      	sub	sp, #32
    9d68:	4b16      	ldr	r3, [pc, #88]	; (9dc4 <bt_enable+0x114>)
    9d6a:	616b      	str	r3, [r5, #20]
    9d6c:	4b0f      	ldr	r3, [pc, #60]	; (9dac <bt_enable+0xfc>)
    9d6e:	e9c5 3406 	strd	r3, r4, [r5, #24]
    9d72:	2304      	movs	r3, #4
    9d74:	f842 3f10 	str.w	r3, [r2, #16]!
    9d78:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    9d7c:	f01a f805 	bl	23d8a <z_log_msg_static_create.constprop.0>
    9d80:	46ad      	mov	sp, r5
    9d82:	e7a3      	b.n	9ccc <bt_enable+0x1c>
	if (!cb) {
    9d84:	b91e      	cbnz	r6, 9d8e <bt_enable+0xde>
		return bt_init();
    9d86:	f7ff fcbd 	bl	9704 <bt_init>
    9d8a:	4604      	mov	r4, r0
    9d8c:	e79e      	b.n	9ccc <bt_enable+0x1c>
	k_work_submit(&bt_dev.init);
    9d8e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    9d92:	f016 f96b 	bl	2006c <k_work_submit>
	return 0;
    9d96:	e799      	b.n	9ccc <bt_enable+0x1c>
		return -EALREADY;
    9d98:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9d9c:	e796      	b.n	9ccc <bt_enable+0x1c>
    9d9e:	bf00      	nop
    9da0:	20000010 	.word	0x20000010
    9da4:	20000afc 	.word	0x20000afc
    9da8:	0002c09e 	.word	0x0002c09e
    9dac:	0002c0fd 	.word	0x0002c0fd
    9db0:	2000258c 	.word	0x2000258c
    9db4:	00009111 	.word	0x00009111
    9db8:	20005140 	.word	0x20005140
    9dbc:	200019a0 	.word	0x200019a0
    9dc0:	0002c0bb 	.word	0x0002c0bb
    9dc4:	0002c0c1 	.word	0x0002c0c1

00009dc8 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9dc8:	4b04      	ldr	r3, [pc, #16]	; (9ddc <bt_is_ready+0x14>)
    9dca:	f3bf 8f5b 	dmb	ish
    9dce:	6818      	ldr	r0, [r3, #0]
    9dd0:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    9dd4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    9dd8:	4770      	bx	lr
    9dda:	bf00      	nop
    9ddc:	200000dc 	.word	0x200000dc

00009de0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    9de0:	4800      	ldr	r0, [pc, #0]	; (9de4 <bt_get_name+0x4>)
    9de2:	4770      	bx	lr
    9de4:	0002c0e1 	.word	0x0002c0e1

00009de8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    9de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    9dea:	4f0a      	ldr	r7, [pc, #40]	; (9e14 <id_find+0x2c>)
{
    9dec:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    9dee:	2500      	movs	r5, #0
    9df0:	79fb      	ldrb	r3, [r7, #7]
    9df2:	b2ec      	uxtb	r4, r5
    9df4:	42a3      	cmp	r3, r4
    9df6:	d802      	bhi.n	9dfe <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    9df8:	f06f 0001 	mvn.w	r0, #1
    9dfc:	e009      	b.n	9e12 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    9dfe:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9e02:	4439      	add	r1, r7
    9e04:	4630      	mov	r0, r6
    9e06:	f01a f8aa 	bl	23f5e <bt_addr_le_eq>
    9e0a:	3501      	adds	r5, #1
    9e0c:	2800      	cmp	r0, #0
    9e0e:	d0ef      	beq.n	9df0 <id_find+0x8>
    9e10:	4620      	mov	r0, r4
}
    9e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e14:	20000010 	.word	0x20000010

00009e18 <set_random_address>:
{
    9e18:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    9e1a:	4913      	ldr	r1, [pc, #76]	; (9e68 <set_random_address+0x50>)
    9e1c:	2206      	movs	r2, #6
    9e1e:	4605      	mov	r5, r0
    9e20:	f019 fecd 	bl	23bbe <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9e24:	b1d8      	cbz	r0, 9e5e <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9e26:	2106      	movs	r1, #6
    9e28:	f242 0005 	movw	r0, #8197	; 0x2005
    9e2c:	f7fe fdb8 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
    9e30:	4604      	mov	r4, r0
    9e32:	b1b0      	cbz	r0, 9e62 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9e34:	2206      	movs	r2, #6
    9e36:	4629      	mov	r1, r5
    9e38:	300c      	adds	r0, #12
    9e3a:	f01b fbe0 	bl	255fe <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    9e3e:	2200      	movs	r2, #0
    9e40:	4621      	mov	r1, r4
    9e42:	f242 0005 	movw	r0, #8197	; 0x2005
    9e46:	f7fe fde5 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    9e4a:	b948      	cbnz	r0, 9e60 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    9e4c:	2206      	movs	r2, #6
    9e4e:	4806      	ldr	r0, [pc, #24]	; (9e68 <set_random_address+0x50>)
    9e50:	4629      	mov	r1, r5
    9e52:	f019 fedb 	bl	23c0c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    9e56:	4b05      	ldr	r3, [pc, #20]	; (9e6c <set_random_address+0x54>)
    9e58:	2201      	movs	r2, #1
    9e5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
    9e5e:	2000      	movs	r0, #0
}
    9e60:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    9e62:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9e66:	e7fb      	b.n	9e60 <set_random_address+0x48>
    9e68:	20000071 	.word	0x20000071
    9e6c:	20000010 	.word	0x20000010

00009e70 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    9e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9e72:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    9e74:	460d      	mov	r5, r1
    9e76:	b179      	cbz	r1, 9e98 <id_create.constprop.0+0x28>
    9e78:	4914      	ldr	r1, [pc, #80]	; (9ecc <id_create.constprop.0+0x5c>)
    9e7a:	4628      	mov	r0, r5
    9e7c:	f01a f86f 	bl	23f5e <bt_addr_le_eq>
    9e80:	b950      	cbnz	r0, 9e98 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    9e82:	4813      	ldr	r0, [pc, #76]	; (9ed0 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    9e84:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9e88:	2207      	movs	r2, #7
    9e8a:	4629      	mov	r1, r5
    9e8c:	4420      	add	r0, r4
    9e8e:	f019 febd 	bl	23c0c <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    9e92:	2000      	movs	r0, #0
}
    9e94:	b003      	add	sp, #12
    9e96:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    9e98:	4668      	mov	r0, sp
    9e9a:	f019 ff38 	bl	23d0e <bt_addr_le_create_static>
			if (err) {
    9e9e:	2800      	cmp	r0, #0
    9ea0:	d1f8      	bne.n	9e94 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    9ea2:	4668      	mov	r0, sp
    9ea4:	f7ff ffa0 	bl	9de8 <id_find>
    9ea8:	2800      	cmp	r0, #0
    9eaa:	daf5      	bge.n	9e98 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    9eac:	4b08      	ldr	r3, [pc, #32]	; (9ed0 <id_create.constprop.0+0x60>)
    9eae:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9eb2:	441c      	add	r4, r3
    9eb4:	2207      	movs	r2, #7
    9eb6:	4669      	mov	r1, sp
    9eb8:	4620      	mov	r0, r4
    9eba:	f019 fea7 	bl	23c0c <memcpy>
		if (addr) {
    9ebe:	2d00      	cmp	r5, #0
    9ec0:	d0e7      	beq.n	9e92 <id_create.constprop.0+0x22>
    9ec2:	2207      	movs	r2, #7
    9ec4:	4621      	mov	r1, r4
    9ec6:	4628      	mov	r0, r5
    9ec8:	e7e1      	b.n	9e8e <id_create.constprop.0+0x1e>
    9eca:	bf00      	nop
    9ecc:	0002b9b3 	.word	0x0002b9b3
    9ed0:	20000010 	.word	0x20000010

00009ed4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    9ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ed6:	460d      	mov	r5, r1
    9ed8:	af00      	add	r7, sp, #0
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    9eda:	4604      	mov	r4, r0
    9edc:	b920      	cbnz	r0, 9ee8 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9ede:	b365      	cbz	r5, 9f3a <bt_id_create+0x66>
			return -EINVAL;
    9ee0:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    9ee4:	46bd      	mov	sp, r7
    9ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    9ee8:	4926      	ldr	r1, [pc, #152]	; (9f84 <bt_id_create+0xb0>)
    9eea:	f01a f838 	bl	23f5e <bt_addr_le_eq>
    9eee:	2800      	cmp	r0, #0
    9ef0:	d1f5      	bne.n	9ede <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9ef2:	7823      	ldrb	r3, [r4, #0]
    9ef4:	2b01      	cmp	r3, #1
    9ef6:	d104      	bne.n	9f02 <bt_id_create+0x2e>
    9ef8:	79a3      	ldrb	r3, [r4, #6]
    9efa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9efe:	2bc0      	cmp	r3, #192	; 0xc0
    9f00:	d013      	beq.n	9f2a <bt_id_create+0x56>
			LOG_ERR("Only static random identity address supported");
    9f02:	4821      	ldr	r0, [pc, #132]	; (9f88 <bt_id_create+0xb4>)
    9f04:	6803      	ldr	r3, [r0, #0]
    9f06:	075a      	lsls	r2, r3, #29
    9f08:	d0ea      	beq.n	9ee0 <bt_id_create+0xc>
    9f0a:	466c      	mov	r4, sp
    9f0c:	b088      	sub	sp, #32
    9f0e:	466a      	mov	r2, sp
    9f10:	4b1e      	ldr	r3, [pc, #120]	; (9f8c <bt_id_create+0xb8>)
    9f12:	6153      	str	r3, [r2, #20]
    9f14:	4b1e      	ldr	r3, [pc, #120]	; (9f90 <bt_id_create+0xbc>)
    9f16:	6193      	str	r3, [r2, #24]
    9f18:	2303      	movs	r3, #3
    9f1a:	f842 3f10 	str.w	r3, [r2, #16]!
    9f1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9f22:	f01a f824 	bl	23f6e <z_log_msg_static_create.constprop.0>
    9f26:	46a5      	mov	sp, r4
    9f28:	e7da      	b.n	9ee0 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    9f2a:	4620      	mov	r0, r4
    9f2c:	f7ff ff5c 	bl	9de8 <id_find>
    9f30:	2800      	cmp	r0, #0
    9f32:	dbd4      	blt.n	9ede <bt_id_create+0xa>
			return -EALREADY;
    9f34:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9f38:	e7d4      	b.n	9ee4 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9f3a:	4d16      	ldr	r5, [pc, #88]	; (9f94 <bt_id_create+0xc0>)
    9f3c:	79eb      	ldrb	r3, [r5, #7]
    9f3e:	2b01      	cmp	r3, #1
    9f40:	d01c      	beq.n	9f7c <bt_id_create+0xa8>
    9f42:	f3bf 8f5b 	dmb	ish
    9f46:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    9f4a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9f4e:	07db      	lsls	r3, r3, #31
    9f50:	d50b      	bpl.n	9f6a <bt_id_create+0x96>
	new_id = bt_dev.id_count;
    9f52:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    9f54:	4621      	mov	r1, r4
    9f56:	4630      	mov	r0, r6
    9f58:	f7ff ff8a 	bl	9e70 <id_create.constprop.0>
	if (err) {
    9f5c:	2800      	cmp	r0, #0
    9f5e:	d1c1      	bne.n	9ee4 <bt_id_create+0x10>
		bt_dev.id_count++;
    9f60:	79eb      	ldrb	r3, [r5, #7]
    9f62:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
    9f64:	4630      	mov	r0, r6
		bt_dev.id_count++;
    9f66:	71eb      	strb	r3, [r5, #7]
	return new_id;
    9f68:	e7bc      	b.n	9ee4 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    9f6a:	2c00      	cmp	r4, #0
    9f6c:	d0b8      	beq.n	9ee0 <bt_id_create+0xc>
    9f6e:	4905      	ldr	r1, [pc, #20]	; (9f84 <bt_id_create+0xb0>)
    9f70:	4620      	mov	r0, r4
    9f72:	f019 fff4 	bl	23f5e <bt_addr_le_eq>
    9f76:	2800      	cmp	r0, #0
    9f78:	d0eb      	beq.n	9f52 <bt_id_create+0x7e>
    9f7a:	e7b1      	b.n	9ee0 <bt_id_create+0xc>
		return -ENOMEM;
    9f7c:	f06f 000b 	mvn.w	r0, #11
    9f80:	e7b0      	b.n	9ee4 <bt_id_create+0x10>
    9f82:	bf00      	nop
    9f84:	0002b9b3 	.word	0x0002b9b3
    9f88:	20000b00 	.word	0x20000b00
    9f8c:	0002c3c8 	.word	0x0002c3c8
    9f90:	0002c534 	.word	0x0002c534
    9f94:	20000010 	.word	0x20000010

00009f98 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    9f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f9a:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    9f9c:	4604      	mov	r4, r0
{
    9f9e:	af00      	add	r7, sp, #0
	CHECKIF(addr == NULL) {
    9fa0:	b9b8      	cbnz	r0, 9fd2 <bt_id_read_public_addr+0x3a>
		LOG_WRN("Invalid input parameters");
    9fa2:	4824      	ldr	r0, [pc, #144]	; (a034 <bt_id_read_public_addr+0x9c>)
    9fa4:	6803      	ldr	r3, [r0, #0]
    9fa6:	f013 0f06 	tst.w	r3, #6
    9faa:	d00e      	beq.n	9fca <bt_id_read_public_addr+0x32>
    9fac:	466c      	mov	r4, sp
    9fae:	b088      	sub	sp, #32
    9fb0:	466a      	mov	r2, sp
    9fb2:	4b21      	ldr	r3, [pc, #132]	; (a038 <bt_id_read_public_addr+0xa0>)
    9fb4:	6153      	str	r3, [r2, #20]
    9fb6:	4b21      	ldr	r3, [pc, #132]	; (a03c <bt_id_read_public_addr+0xa4>)
    9fb8:	6193      	str	r3, [r2, #24]
    9fba:	2303      	movs	r3, #3
    9fbc:	f842 3f10 	str.w	r3, [r2, #16]!
    9fc0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9fc4:	f019 ffd3 	bl	23f6e <z_log_msg_static_create.constprop.0>
    9fc8:	46a5      	mov	sp, r4
		return 0U;
    9fca:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    9fcc:	370c      	adds	r7, #12
    9fce:	46bd      	mov	sp, r7
    9fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9fd2:	1d3a      	adds	r2, r7, #4
    9fd4:	2100      	movs	r1, #0
    9fd6:	f241 0009 	movw	r0, #4105	; 0x1009
    9fda:	f7fe fd1b 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    9fde:	4606      	mov	r6, r0
    9fe0:	b148      	cbz	r0, 9ff6 <bt_id_read_public_addr+0x5e>
		LOG_WRN("Failed to read public address");
    9fe2:	4814      	ldr	r0, [pc, #80]	; (a034 <bt_id_read_public_addr+0x9c>)
    9fe4:	6803      	ldr	r3, [r0, #0]
    9fe6:	f013 0f06 	tst.w	r3, #6
    9fea:	d0ee      	beq.n	9fca <bt_id_read_public_addr+0x32>
    9fec:	466c      	mov	r4, sp
    9fee:	b088      	sub	sp, #32
    9ff0:	466a      	mov	r2, sp
    9ff2:	4b13      	ldr	r3, [pc, #76]	; (a040 <bt_id_read_public_addr+0xa8>)
    9ff4:	e7de      	b.n	9fb4 <bt_id_read_public_addr+0x1c>
	rp = (void *)rsp->data;
    9ff6:	687b      	ldr	r3, [r7, #4]
	return memcmp(a, b, sizeof(*a));
    9ff8:	4912      	ldr	r1, [pc, #72]	; (a044 <bt_id_read_public_addr+0xac>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9ffa:	68dd      	ldr	r5, [r3, #12]
    9ffc:	3501      	adds	r5, #1
    9ffe:	2206      	movs	r2, #6
    a000:	4628      	mov	r0, r5
    a002:	f019 fddc 	bl	23bbe <memcmp>
    a006:	b918      	cbnz	r0, a010 <bt_id_read_public_addr+0x78>
		net_buf_unref(rsp);
    a008:	6878      	ldr	r0, [r7, #4]
    a00a:	f010 febf 	bl	1ad8c <net_buf_unref>
		return 0U;
    a00e:	e7dc      	b.n	9fca <bt_id_read_public_addr+0x32>
    a010:	490d      	ldr	r1, [pc, #52]	; (a048 <bt_id_read_public_addr+0xb0>)
    a012:	2206      	movs	r2, #6
    a014:	4628      	mov	r0, r5
    a016:	f019 fdd2 	bl	23bbe <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a01a:	2800      	cmp	r0, #0
    a01c:	d0f4      	beq.n	a008 <bt_id_read_public_addr+0x70>
	memcpy(dst, src, sizeof(*dst));
    a01e:	2206      	movs	r2, #6
    a020:	4629      	mov	r1, r5
    a022:	1c60      	adds	r0, r4, #1
    a024:	f019 fdf2 	bl	23c0c <memcpy>
	net_buf_unref(rsp);
    a028:	6878      	ldr	r0, [r7, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    a02a:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    a02c:	f010 feae 	bl	1ad8c <net_buf_unref>
	return 1U;
    a030:	2001      	movs	r0, #1
    a032:	e7cb      	b.n	9fcc <bt_id_read_public_addr+0x34>
    a034:	20000b00 	.word	0x20000b00
    a038:	0002c3fa 	.word	0x0002c3fa
    a03c:	0002c51d 	.word	0x0002c51d
    a040:	0002c417 	.word	0x0002c417
    a044:	0002b9c0 	.word	0x0002b9c0
    a048:	0002b9ba 	.word	0x0002b9ba

0000a04c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    a04c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    a04e:	4668      	mov	r0, sp
    a050:	f7ff ffa2 	bl	9f98 <bt_id_read_public_addr>
    a054:	4b04      	ldr	r3, [pc, #16]	; (a068 <bt_setup_public_id_addr+0x1c>)
    a056:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    a058:	b118      	cbz	r0, a062 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    a05a:	4669      	mov	r1, sp
    a05c:	2000      	movs	r0, #0
    a05e:	f7ff ff07 	bl	9e70 <id_create.constprop.0>
}
    a062:	b003      	add	sp, #12
    a064:	f85d fb04 	ldr.w	pc, [sp], #4
    a068:	20000010 	.word	0x20000010

0000a06c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    a06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a070:	4b2b      	ldr	r3, [pc, #172]	; (a120 <bt_read_static_addr+0xb4>)
{
    a072:	b083      	sub	sp, #12
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a074:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    a078:	07db      	lsls	r3, r3, #31
{
    a07a:	af00      	add	r7, sp, #0
    a07c:	4680      	mov	r8, r0
    a07e:	4689      	mov	r9, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a080:	d419      	bmi.n	a0b6 <bt_read_static_addr+0x4a>
		LOG_WRN("Read Static Addresses command not available");
    a082:	4828      	ldr	r0, [pc, #160]	; (a124 <bt_read_static_addr+0xb8>)
    a084:	6803      	ldr	r3, [r0, #0]
    a086:	f013 0f06 	tst.w	r3, #6
    a08a:	d00e      	beq.n	a0aa <bt_read_static_addr+0x3e>
    a08c:	466c      	mov	r4, sp
    a08e:	b088      	sub	sp, #32
    a090:	466a      	mov	r2, sp
    a092:	4b25      	ldr	r3, [pc, #148]	; (a128 <bt_read_static_addr+0xbc>)
    a094:	6153      	str	r3, [r2, #20]
    a096:	4b25      	ldr	r3, [pc, #148]	; (a12c <bt_read_static_addr+0xc0>)
    a098:	6193      	str	r3, [r2, #24]
    a09a:	2303      	movs	r3, #3
    a09c:	f842 3f10 	str.w	r3, [r2, #16]!
    a0a0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    a0a4:	f019 ff63 	bl	23f6e <z_log_msg_static_create.constprop.0>
    a0a8:	46a5      	mov	sp, r4
		return 0;
    a0aa:	2500      	movs	r5, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    a0ac:	4628      	mov	r0, r5
    a0ae:	370c      	adds	r7, #12
    a0b0:	46bd      	mov	sp, r7
    a0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a0b6:	1d3a      	adds	r2, r7, #4
    a0b8:	2100      	movs	r1, #0
    a0ba:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a0be:	f7fe fca9 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    a0c2:	4604      	mov	r4, r0
    a0c4:	b148      	cbz	r0, a0da <bt_read_static_addr+0x6e>
		LOG_WRN("Failed to read static addresses");
    a0c6:	4817      	ldr	r0, [pc, #92]	; (a124 <bt_read_static_addr+0xb8>)
    a0c8:	6803      	ldr	r3, [r0, #0]
    a0ca:	f013 0f06 	tst.w	r3, #6
    a0ce:	d0ec      	beq.n	a0aa <bt_read_static_addr+0x3e>
    a0d0:	466c      	mov	r4, sp
    a0d2:	b088      	sub	sp, #32
    a0d4:	466a      	mov	r2, sp
    a0d6:	4b16      	ldr	r3, [pc, #88]	; (a130 <bt_read_static_addr+0xc4>)
    a0d8:	e7dc      	b.n	a094 <bt_read_static_addr+0x28>
	rp = (void *)rsp->data;
    a0da:	687b      	ldr	r3, [r7, #4]
    a0dc:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    a0de:	7875      	ldrb	r5, [r6, #1]
    a0e0:	454d      	cmp	r5, r9
    a0e2:	bf28      	it	cs
    a0e4:	464d      	movcs	r5, r9
	for (i = 0; i < cnt; i++) {
    a0e6:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    a0e8:	f04f 0916 	mov.w	r9, #22
	for (i = 0; i < cnt; i++) {
    a0ec:	42a5      	cmp	r5, r4
    a0ee:	dc0e      	bgt.n	a10e <bt_read_static_addr+0xa2>
	net_buf_unref(rsp);
    a0f0:	6878      	ldr	r0, [r7, #4]
    a0f2:	f010 fe4b 	bl	1ad8c <net_buf_unref>
	if (!cnt) {
    a0f6:	2d00      	cmp	r5, #0
    a0f8:	d1d8      	bne.n	a0ac <bt_read_static_addr+0x40>
		LOG_WRN("No static addresses stored in controller");
    a0fa:	480a      	ldr	r0, [pc, #40]	; (a124 <bt_read_static_addr+0xb8>)
    a0fc:	6803      	ldr	r3, [r0, #0]
    a0fe:	f013 0f06 	tst.w	r3, #6
    a102:	d0d2      	beq.n	a0aa <bt_read_static_addr+0x3e>
    a104:	466c      	mov	r4, sp
    a106:	b088      	sub	sp, #32
    a108:	466a      	mov	r2, sp
    a10a:	4b0a      	ldr	r3, [pc, #40]	; (a134 <bt_read_static_addr+0xc8>)
    a10c:	e7c2      	b.n	a094 <bt_read_static_addr+0x28>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    a10e:	4631      	mov	r1, r6
    a110:	fb09 8004 	mla	r0, r9, r4, r8
    a114:	2216      	movs	r2, #22
    a116:	f019 fd79 	bl	23c0c <memcpy>
	for (i = 0; i < cnt; i++) {
    a11a:	3401      	adds	r4, #1
    a11c:	3616      	adds	r6, #22
    a11e:	e7e5      	b.n	a0ec <bt_read_static_addr+0x80>
    a120:	20000010 	.word	0x20000010
    a124:	20000b00 	.word	0x20000b00
    a128:	0002c439 	.word	0x0002c439
    a12c:	0002c509 	.word	0x0002c509
    a130:	0002c469 	.word	0x0002c469
    a134:	0002c48d 	.word	0x0002c48d

0000a138 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    a138:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    a13a:	4e15      	ldr	r6, [pc, #84]	; (a190 <bt_setup_random_id_addr+0x58>)
    a13c:	79f4      	ldrb	r4, [r6, #7]
{
    a13e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    a140:	b92c      	cbnz	r4, a14e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a142:	2101      	movs	r1, #1
    a144:	a802      	add	r0, sp, #8
    a146:	f7ff ff91 	bl	a06c <bt_read_static_addr>
    a14a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    a14c:	b9c8      	cbnz	r0, a182 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    a14e:	2100      	movs	r1, #0
    a150:	4608      	mov	r0, r1
}
    a152:	b009      	add	sp, #36	; 0x24
    a154:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    a158:	f7ff bebc 	b.w	9ed4 <bt_id_create>
    a15c:	ab02      	add	r3, sp, #8
    a15e:	fb07 3105 	mla	r1, r7, r5, r3
    a162:	2206      	movs	r2, #6
    a164:	f10d 0001 	add.w	r0, sp, #1
    a168:	f019 fd50 	bl	23c0c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    a16c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    a16e:	4669      	mov	r1, sp
    a170:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    a172:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    a176:	f7ff fe7b 	bl	9e70 <id_create.constprop.0>
				if (err) {
    a17a:	3401      	adds	r4, #1
    a17c:	b110      	cbz	r0, a184 <bt_setup_random_id_addr+0x4c>
}
    a17e:	b009      	add	sp, #36	; 0x24
    a180:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    a182:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a184:	79f3      	ldrb	r3, [r6, #7]
    a186:	b2e5      	uxtb	r5, r4
    a188:	42ab      	cmp	r3, r5
    a18a:	d8e7      	bhi.n	a15c <bt_setup_random_id_addr+0x24>
			return 0;
    a18c:	2000      	movs	r0, #0
    a18e:	e7f6      	b.n	a17e <bt_setup_random_id_addr+0x46>
    a190:	20000010 	.word	0x20000010

0000a194 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    a194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a198:	4690      	mov	r8, r2
    a19a:	460e      	mov	r6, r1
    a19c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    a19e:	4602      	mov	r2, r0
    a1a0:	2800      	cmp	r0, #0
    a1a2:	d04b      	beq.n	a23c <bt_id_set_adv_own_addr+0xa8>
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d049      	beq.n	a23c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    a1a8:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    a1aa:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    a1ac:	d531      	bpl.n	a212 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    a1ae:	4f25      	ldr	r7, [pc, #148]	; (a244 <bt_id_set_adv_own_addr+0xb0>)
    a1b0:	f1b8 0f00 	cmp.w	r8, #0
    a1b4:	d013      	beq.n	a1de <bt_id_set_adv_own_addr+0x4a>
    a1b6:	0688      	lsls	r0, r1, #26
    a1b8:	d40a      	bmi.n	a1d0 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a1ba:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    a1be:	5cfb      	ldrb	r3, [r7, r3]
    a1c0:	2b01      	cmp	r3, #1
    a1c2:	d015      	beq.n	a1f0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    a1c4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    a1c6:	06b2      	lsls	r2, r6, #26
    a1c8:	d50f      	bpl.n	a1ea <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    a1ca:	f043 0302 	orr.w	r3, r3, #2
    a1ce:	e00b      	b.n	a1e8 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    a1d0:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
    a1d4:	0659      	lsls	r1, r3, #25
    a1d6:	d4f0      	bmi.n	a1ba <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    a1d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a1dc:	e006      	b.n	a1ec <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a1de:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    a1e2:	5cfb      	ldrb	r3, [r7, r3]
    a1e4:	2b01      	cmp	r3, #1
    a1e6:	d003      	beq.n	a1f0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    a1e8:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    a1ea:	2000      	movs	r0, #0
}
    a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    a1f0:	2107      	movs	r1, #7
    a1f2:	fb01 7104 	mla	r1, r1, r4, r7
    a1f6:	3101      	adds	r1, #1
    a1f8:	4610      	mov	r0, r2
    a1fa:	f019 fec0 	bl	23f7e <bt_id_set_adv_random_addr>
				if (err) {
    a1fe:	2800      	cmp	r0, #0
    a200:	d1f4      	bne.n	a1ec <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    a202:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    a206:	5d3b      	ldrb	r3, [r7, r4]
    a208:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    a20a:	f1b8 0f00 	cmp.w	r8, #0
    a20e:	d0ec      	beq.n	a1ea <bt_id_set_adv_own_addr+0x56>
    a210:	e7d9      	b.n	a1c6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    a212:	074b      	lsls	r3, r1, #29
    a214:	d50e      	bpl.n	a234 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a216:	4e0b      	ldr	r6, [pc, #44]	; (a244 <bt_id_set_adv_own_addr+0xb0>)
    a218:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    a21c:	5df3      	ldrb	r3, [r6, r7]
    a21e:	2b01      	cmp	r3, #1
    a220:	d1e2      	bne.n	a1e8 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    a222:	2107      	movs	r1, #7
    a224:	fb11 3104 	smlabb	r1, r1, r4, r3
    a228:	4431      	add	r1, r6
    a22a:	f019 fea8 	bl	23f7e <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    a22e:	5df3      	ldrb	r3, [r6, r7]
    a230:	702b      	strb	r3, [r5, #0]
		if (err) {
    a232:	e7db      	b.n	a1ec <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    a234:	f019 feab 	bl	23f8e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    a238:	2301      	movs	r3, #1
    a23a:	e7f9      	b.n	a230 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    a23c:	f06f 0015 	mvn.w	r0, #21
    a240:	e7d4      	b.n	a1ec <bt_id_set_adv_own_addr+0x58>
    a242:	bf00      	nop
    a244:	20000010 	.word	0x20000010

0000a248 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    a248:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    a24a:	4d1b      	ldr	r5, [pc, #108]	; (a2b8 <bt_id_init+0x70>)
    a24c:	79eb      	ldrb	r3, [r5, #7]
{
    a24e:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    a250:	b11b      	cbz	r3, a25a <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    a252:	2400      	movs	r4, #0
}
    a254:	4620      	mov	r0, r4
    a256:	46bd      	mov	sp, r7
    a258:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_setup_public_id_addr();
    a25a:	f7ff fef7 	bl	a04c <bt_setup_public_id_addr>
		if (err) {
    a25e:	4604      	mov	r4, r0
    a260:	b198      	cbz	r0, a28a <bt_id_init+0x42>
			LOG_ERR("Unable to set identity address");
    a262:	4816      	ldr	r0, [pc, #88]	; (a2bc <bt_id_init+0x74>)
    a264:	6803      	ldr	r3, [r0, #0]
    a266:	075a      	lsls	r2, r3, #29
    a268:	d0f4      	beq.n	a254 <bt_id_init+0xc>
    a26a:	466d      	mov	r5, sp
    a26c:	b088      	sub	sp, #32
    a26e:	466a      	mov	r2, sp
    a270:	4b13      	ldr	r3, [pc, #76]	; (a2c0 <bt_id_init+0x78>)
			LOG_ERR("Unable to set random address");
    a272:	6153      	str	r3, [r2, #20]
    a274:	4b13      	ldr	r3, [pc, #76]	; (a2c4 <bt_id_init+0x7c>)
    a276:	6193      	str	r3, [r2, #24]
    a278:	2303      	movs	r3, #3
    a27a:	f842 3f10 	str.w	r3, [r2, #16]!
    a27e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a282:	f019 fe74 	bl	23f6e <z_log_msg_static_create.constprop.0>
    a286:	46ad      	mov	sp, r5
    a288:	e7e4      	b.n	a254 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    a28a:	79eb      	ldrb	r3, [r5, #7]
    a28c:	2b00      	cmp	r3, #0
    a28e:	d1e0      	bne.n	a252 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    a290:	f7ff ff52 	bl	a138 <bt_setup_random_id_addr>
		if (err) {
    a294:	4604      	mov	r4, r0
    a296:	2800      	cmp	r0, #0
    a298:	d1e3      	bne.n	a262 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    a29a:	1c68      	adds	r0, r5, #1
    a29c:	f7ff fdbc 	bl	9e18 <set_random_address>
		if (err) {
    a2a0:	4604      	mov	r4, r0
    a2a2:	2800      	cmp	r0, #0
    a2a4:	d0d5      	beq.n	a252 <bt_id_init+0xa>
			LOG_ERR("Unable to set random address");
    a2a6:	4805      	ldr	r0, [pc, #20]	; (a2bc <bt_id_init+0x74>)
    a2a8:	6803      	ldr	r3, [r0, #0]
    a2aa:	075b      	lsls	r3, r3, #29
    a2ac:	d0d2      	beq.n	a254 <bt_id_init+0xc>
    a2ae:	466d      	mov	r5, sp
    a2b0:	b088      	sub	sp, #32
    a2b2:	466a      	mov	r2, sp
    a2b4:	4b04      	ldr	r3, [pc, #16]	; (a2c8 <bt_id_init+0x80>)
    a2b6:	e7dc      	b.n	a272 <bt_id_init+0x2a>
    a2b8:	20000010 	.word	0x20000010
    a2bc:	20000b00 	.word	0x20000b00
    a2c0:	0002c4ba 	.word	0x0002c4ba
    a2c4:	0002c4fe 	.word	0x0002c4fe
    a2c8:	0002c4dd 	.word	0x0002c4dd

0000a2cc <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2d0:	b085      	sub	sp, #20
    a2d2:	af00      	add	r7, sp, #0
    a2d4:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    a2d6:	2120      	movs	r1, #32
{
    a2d8:	60b8      	str	r0, [r7, #8]
    a2da:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    a2dc:	f7fe fb60 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
    a2e0:	4605      	mov	r5, r0
    a2e2:	2800      	cmp	r0, #0
    a2e4:	d069      	beq.n	a3ba <hci_set_ad+0xee>
	return net_buf_simple_add(&buf->b, len);
    a2e6:	2120      	movs	r1, #32
    a2e8:	300c      	adds	r0, #12
    a2ea:	f01b f982 	bl	255f2 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    a2ee:	2220      	movs	r2, #32
    a2f0:	2100      	movs	r1, #0
    a2f2:	4682      	mov	sl, r0
    a2f4:	f019 fc95 	bl	23c22 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    a2f8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
    a2fc:	f10a 0b01 	add.w	fp, sl, #1
	for (size_t i = 0; i < ad_len; i++) {
    a300:	60fb      	str	r3, [r7, #12]
	uint8_t set_data_len = 0;
    a302:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    a304:	f8d4 9000 	ldr.w	r9, [r4]
    a308:	2300      	movs	r3, #0
    a30a:	6862      	ldr	r2, [r4, #4]
    a30c:	4293      	cmp	r3, r2
    a30e:	d30e      	bcc.n	a32e <hci_set_ad+0x62>
	for (size_t i = 0; i < ad_len; i++) {
    a310:	68fb      	ldr	r3, [r7, #12]
    a312:	3408      	adds	r4, #8
    a314:	42a3      	cmp	r3, r4
    a316:	d1f5      	bne.n	a304 <hci_set_ad+0x38>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    a318:	68b8      	ldr	r0, [r7, #8]
	*data_len = set_data_len;
    a31a:	f88a 6000 	strb.w	r6, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    a31e:	2200      	movs	r2, #0
    a320:	4629      	mov	r1, r5
    a322:	f7fe fb77 	bl	8a14 <bt_hci_cmd_send_sync>
}
    a326:	3714      	adds	r7, #20
    a328:	46bd      	mov	sp, r7
    a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = data[j].data_len;
    a32e:	f899 2001 	ldrb.w	r2, [r9, #1]
			uint8_t type = data[j].type;
    a332:	f899 c000 	ldrb.w	ip, [r9]
			if ((set_data_len + len + 2) > set_data_len_max) {
    a336:	1cb0      	adds	r0, r6, #2
    a338:	1881      	adds	r1, r0, r2
    a33a:	291f      	cmp	r1, #31
    a33c:	d922      	bls.n	a384 <hci_set_ad+0xb8>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    a33e:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    a342:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    a346:	d101      	bne.n	a34c <hci_set_ad+0x80>
    a348:	2a00      	cmp	r2, #0
    a34a:	dc19      	bgt.n	a380 <hci_set_ad+0xb4>
					LOG_ERR("Too big advertising data");
    a34c:	481c      	ldr	r0, [pc, #112]	; (a3c0 <hci_set_ad+0xf4>)
    a34e:	6803      	ldr	r3, [r0, #0]
    a350:	075b      	lsls	r3, r3, #29
    a352:	d00f      	beq.n	a374 <hci_set_ad+0xa8>
    a354:	466c      	mov	r4, sp
    a356:	b088      	sub	sp, #32
    a358:	466a      	mov	r2, sp
    a35a:	4b1a      	ldr	r3, [pc, #104]	; (a3c4 <hci_set_ad+0xf8>)
    a35c:	6153      	str	r3, [r2, #20]
    a35e:	4b1a      	ldr	r3, [pc, #104]	; (a3c8 <hci_set_ad+0xfc>)
    a360:	6193      	str	r3, [r2, #24]
    a362:	2303      	movs	r3, #3
    a364:	f842 3f10 	str.w	r3, [r2, #16]!
    a368:	2300      	movs	r3, #0
    a36a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a36e:	f7f9 feef 	bl	4150 <z_impl_z_log_msg_static_create>
    a372:	46a5      	mov	sp, r4
		net_buf_unref(buf);
    a374:	4628      	mov	r0, r5
    a376:	f010 fd09 	bl	1ad8c <net_buf_unref>
		return err;
    a37a:	f06f 0015 	mvn.w	r0, #21
    a37e:	e7d2      	b.n	a326 <hci_set_ad+0x5a>
				type = BT_DATA_NAME_SHORTENED;
    a380:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    a384:	fa5f f882 	uxtb.w	r8, r2
    a388:	f108 0101 	add.w	r1, r8, #1
    a38c:	f80b 1006 	strb.w	r1, [fp, r6]
    a390:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    a392:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    a394:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    a398:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    a39c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a3a0:	607b      	str	r3, [r7, #4]
			set_data_len += len;
    a3a2:	f108 0802 	add.w	r8, r8, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    a3a6:	f019 fc31 	bl	23c0c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    a3aa:	687b      	ldr	r3, [r7, #4]
			set_data_len += len;
    a3ac:	44b0      	add	r8, r6
    a3ae:	fa5f f688 	uxtb.w	r6, r8
		for (size_t j = 0; j < ad[i].len; j++) {
    a3b2:	3301      	adds	r3, #1
    a3b4:	f109 0908 	add.w	r9, r9, #8
    a3b8:	e7a7      	b.n	a30a <hci_set_ad+0x3e>
		return -ENOBUFS;
    a3ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
    a3be:	e7b2      	b.n	a326 <hci_set_ad+0x5a>
    a3c0:	20000adc 	.word	0x20000adc
    a3c4:	0002c547 	.word	0x0002c547
    a3c8:	0002c614 	.word	0x0002c614

0000a3cc <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
    a3cc:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
    a3ce:	4904      	ldr	r1, [pc, #16]	; (a3e0 <adv_is_directed+0x14>)
    a3d0:	2207      	movs	r2, #7
    a3d2:	3009      	adds	r0, #9
    a3d4:	f019 fbf3 	bl	23bbe <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
    a3d8:	3800      	subs	r0, #0
    a3da:	bf18      	it	ne
    a3dc:	2001      	movne	r0, #1
    a3de:	bd08      	pop	{r3, pc}
    a3e0:	0002b9b3 	.word	0x0002b9b3

0000a3e4 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    a3e4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    a3e6:	4b15      	ldr	r3, [pc, #84]	; (a43c <le_adv_start_add_conn+0x58>)
    a3e8:	7802      	ldrb	r2, [r0, #0]
    a3ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    a3ee:	4604      	mov	r4, r0
    a3f0:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
    a3f2:	f7ff ffeb 	bl	a3cc <adv_is_directed>
    a3f6:	4603      	mov	r3, r0
    a3f8:	7820      	ldrb	r0, [r4, #0]
    a3fa:	b96b      	cbnz	r3, a418 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    a3fc:	4910      	ldr	r1, [pc, #64]	; (a440 <le_adv_start_add_conn+0x5c>)
    a3fe:	f000 ffdd 	bl	b3bc <bt_conn_add_le>
		if (!conn) {
    a402:	4604      	mov	r4, r0
    a404:	b910      	cbnz	r0, a40c <le_adv_start_add_conn+0x28>
			return -ENOMEM;
    a406:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    a40a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    a40c:	2104      	movs	r1, #4
    a40e:	f000 fe0d 	bl	b02c <bt_conn_set_state>
		*out_conn = conn;
    a412:	602c      	str	r4, [r5, #0]
		return 0;
    a414:	2000      	movs	r0, #0
    a416:	e7f8      	b.n	a40a <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    a418:	f104 0609 	add.w	r6, r4, #9
    a41c:	4631      	mov	r1, r6
    a41e:	f001 f801 	bl	b424 <bt_conn_exists_le>
    a422:	b940      	cbnz	r0, a436 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    a424:	7820      	ldrb	r0, [r4, #0]
    a426:	4631      	mov	r1, r6
    a428:	f000 ffc8 	bl	b3bc <bt_conn_add_le>
	if (!conn) {
    a42c:	4604      	mov	r4, r0
    a42e:	2800      	cmp	r0, #0
    a430:	d0e9      	beq.n	a406 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    a432:	2105      	movs	r1, #5
    a434:	e7eb      	b.n	a40e <le_adv_start_add_conn+0x2a>
		return -EINVAL;
    a436:	f06f 0015 	mvn.w	r0, #21
    a43a:	e7e6      	b.n	a40a <le_adv_start_add_conn+0x26>
    a43c:	20000010 	.word	0x20000010
    a440:	0002b9ac 	.word	0x0002b9ac

0000a444 <valid_adv_param>:
{
    a444:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    a446:	6843      	ldr	r3, [r0, #4]
{
    a448:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    a44a:	0558      	lsls	r0, r3, #21
    a44c:	d501      	bpl.n	a452 <valid_adv_param+0xe>
		return false;
    a44e:	2000      	movs	r0, #0
}
    a450:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a452:	6922      	ldr	r2, [r4, #16]
    a454:	b10a      	cbz	r2, a45a <valid_adv_param+0x16>
    a456:	07d9      	lsls	r1, r3, #31
    a458:	d5f9      	bpl.n	a44e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    a45a:	4d19      	ldr	r5, [pc, #100]	; (a4c0 <valid_adv_param+0x7c>)
    a45c:	7820      	ldrb	r0, [r4, #0]
    a45e:	79eb      	ldrb	r3, [r5, #7]
    a460:	4283      	cmp	r3, r0
    a462:	d9f4      	bls.n	a44e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    a464:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a468:	4916      	ldr	r1, [pc, #88]	; (a4c4 <valid_adv_param+0x80>)
    a46a:	2207      	movs	r2, #7
    a46c:	4428      	add	r0, r5
    a46e:	f019 fba6 	bl	23bbe <memcmp>
	if (param->id >= bt_dev.id_count ||
    a472:	2800      	cmp	r0, #0
    a474:	d0eb      	beq.n	a44e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a476:	6860      	ldr	r0, [r4, #4]
    a478:	07c2      	lsls	r2, r0, #31
    a47a:	d406      	bmi.n	a48a <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    a47c:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    a480:	2b08      	cmp	r3, #8
    a482:	d802      	bhi.n	a48a <valid_adv_param+0x46>
    a484:	68a3      	ldr	r3, [r4, #8]
    a486:	2b9f      	cmp	r3, #159	; 0x9f
    a488:	d9e1      	bls.n	a44e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    a48a:	f010 0f30 	tst.w	r0, #48	; 0x30
    a48e:	d002      	beq.n	a496 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    a490:	6923      	ldr	r3, [r4, #16]
    a492:	2b00      	cmp	r3, #0
    a494:	d0db      	beq.n	a44e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    a496:	06c3      	lsls	r3, r0, #27
    a498:	d401      	bmi.n	a49e <valid_adv_param+0x5a>
    a49a:	6923      	ldr	r3, [r4, #16]
    a49c:	b943      	cbnz	r3, a4b0 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    a49e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    a4a2:	429a      	cmp	r2, r3
    a4a4:	d8d3      	bhi.n	a44e <valid_adv_param+0xa>
    a4a6:	2a1f      	cmp	r2, #31
    a4a8:	d9d1      	bls.n	a44e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    a4aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    a4ae:	d8ce      	bhi.n	a44e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    a4b0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    a4b4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    a4b8:	bf18      	it	ne
    a4ba:	2001      	movne	r0, #1
    a4bc:	e7c8      	b.n	a450 <valid_adv_param+0xc>
    a4be:	bf00      	nop
    a4c0:	20000010 	.word	0x20000010
    a4c4:	0002b9b3 	.word	0x0002b9b3

0000a4c8 <bt_le_adv_lookup_legacy>:
}
    a4c8:	4800      	ldr	r0, [pc, #0]	; (a4cc <bt_le_adv_lookup_legacy+0x4>)
    a4ca:	4770      	bx	lr
    a4cc:	20000028 	.word	0x20000028

0000a4d0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4d4:	b08d      	sub	sp, #52	; 0x34
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    a4d6:	f8d1 b010 	ldr.w	fp, [r1, #16]
{
    a4da:	af04      	add	r7, sp, #16
    a4dc:	e9c7 3200 	strd	r3, r2, [r7]
	struct bt_conn *conn = NULL;
    a4e0:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    a4e2:	ebbb 0403 	subs.w	r4, fp, r3
{
    a4e6:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a4e8:	4897      	ldr	r0, [pc, #604]	; (a748 <bt_le_adv_start_legacy+0x278>)
	struct bt_conn *conn = NULL;
    a4ea:	60fb      	str	r3, [r7, #12]
	bool dir_adv = (param->peer != NULL), scannable = false;
    a4ec:	bf18      	it	ne
    a4ee:	2401      	movne	r4, #1
    a4f0:	f019 fd77 	bl	23fe2 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a4f4:	0742      	lsls	r2, r0, #29
{
    a4f6:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a4f8:	f140 811c 	bpl.w	a734 <bt_le_adv_start_legacy+0x264>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    a4fc:	4608      	mov	r0, r1
    a4fe:	f7ff ffa1 	bl	a444 <valid_adv_param>
    a502:	b930      	cbnz	r0, a512 <bt_le_adv_start_legacy+0x42>
		return -EINVAL;
    a504:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    a508:	4620      	mov	r0, r4
    a50a:	3724      	adds	r7, #36	; 0x24
    a50c:	46bd      	mov	sp, r7
    a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    a512:	4628      	mov	r0, r5
    a514:	f019 fd52 	bl	23fbc <bt_id_adv_random_addr_check>
    a518:	4682      	mov	sl, r0
    a51a:	2800      	cmp	r0, #0
    a51c:	d0f2      	beq.n	a504 <bt_le_adv_start_legacy+0x34>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a51e:	f106 0910 	add.w	r9, r6, #16
    a522:	4648      	mov	r0, r9
    a524:	f019 fd5d 	bl	23fe2 <atomic_get>
    a528:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a52a:	f3c0 18c0 	ubfx	r8, r0, #7, #1
    a52e:	f100 8104 	bmi.w	a73a <bt_le_adv_start_legacy+0x26a>
	(void)memset(&set_param, 0, sizeof(set_param));
    a532:	220f      	movs	r2, #15
    a534:	4641      	mov	r1, r8
    a536:	f107 0010 	add.w	r0, r7, #16
    a53a:	f019 fb72 	bl	23c22 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a53e:	68ab      	ldr	r3, [r5, #8]
    a540:	823b      	strh	r3, [r7, #16]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a542:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a544:	68eb      	ldr	r3, [r5, #12]
    a546:	827b      	strh	r3, [r7, #18]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a548:	f019 fd3c 	bl	23fc4 <get_adv_channel_map>
	if (adv->id != param->id) {
    a54c:	7832      	ldrb	r2, [r6, #0]
    a54e:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a550:	7778      	strb	r0, [r7, #29]
	if (adv->id != param->id) {
    a552:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    a554:	f887 801e 	strb.w	r8, [r7, #30]
	if (adv->id != param->id) {
    a558:	d004      	beq.n	a564 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a55a:	487b      	ldr	r0, [pc, #492]	; (a748 <bt_le_adv_start_legacy+0x278>)
    a55c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    a560:	f019 fd45 	bl	23fee <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    a564:	4a79      	ldr	r2, [pc, #484]	; (a74c <bt_le_adv_start_legacy+0x27c>)
	adv->id = param->id;
    a566:	782b      	ldrb	r3, [r5, #0]
    a568:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    a56a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    a56e:	6869      	ldr	r1, [r5, #4]
    a570:	4622      	mov	r2, r4
    a572:	f107 0315 	add.w	r3, r7, #21
    a576:	4630      	mov	r0, r6
    a578:	f7ff fe0c 	bl	a194 <bt_id_set_adv_own_addr>
	if (err) {
    a57c:	4604      	mov	r4, r0
    a57e:	2800      	cmp	r0, #0
    a580:	d1c2      	bne.n	a508 <bt_le_adv_start_legacy+0x38>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    a582:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
    a586:	2207      	movs	r2, #7
	if (dir_adv) {
    a588:	f1bb 0f00 	cmp.w	fp, #0
    a58c:	d013      	beq.n	a5b6 <bt_le_adv_start_legacy+0xe6>
    a58e:	6929      	ldr	r1, [r5, #16]
    a590:	f019 fb3c 	bl	23c0c <memcpy>
	name_type = get_adv_name_type_param(param);
    a594:	4628      	mov	r0, r5
    a596:	f019 fdc7 	bl	24128 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a59a:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    a59c:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a59e:	07d8      	lsls	r0, r3, #31
    a5a0:	d416      	bmi.n	a5d0 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    a5a2:	059a      	lsls	r2, r3, #22
    a5a4:	d404      	bmi.n	a5b0 <bt_le_adv_start_legacy+0xe0>
    a5a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a5a8:	b913      	cbnz	r3, a5b0 <bt_le_adv_start_legacy+0xe0>
    a5aa:	f1b8 0f02 	cmp.w	r8, #2
    a5ae:	d162      	bne.n	a676 <bt_le_adv_start_legacy+0x1a6>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    a5b0:	2302      	movs	r3, #2
    a5b2:	753b      	strb	r3, [r7, #20]
    a5b4:	e019      	b.n	a5ea <bt_le_adv_start_legacy+0x11a>
    a5b6:	4966      	ldr	r1, [pc, #408]	; (a750 <bt_le_adv_start_legacy+0x280>)
    a5b8:	f019 fb28 	bl	23c0c <memcpy>
	name_type = get_adv_name_type_param(param);
    a5bc:	4628      	mov	r0, r5
    a5be:	f019 fdb3 	bl	24128 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a5c2:	686b      	ldr	r3, [r5, #4]
    a5c4:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
    a5c6:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a5c8:	d5eb      	bpl.n	a5a2 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    a5ca:	f887 b014 	strb.w	fp, [r7, #20]
    a5ce:	e00c      	b.n	a5ea <bt_le_adv_start_legacy+0x11a>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    a5d0:	f013 0f10 	tst.w	r3, #16
    a5d4:	bf0c      	ite	eq
    a5d6:	2301      	moveq	r3, #1
    a5d8:	2304      	movne	r3, #4
    a5da:	6929      	ldr	r1, [r5, #16]
    a5dc:	753b      	strb	r3, [r7, #20]
    a5de:	2207      	movs	r2, #7
    a5e0:	f107 0016 	add.w	r0, r7, #22
    a5e4:	f019 fb12 	bl	23c0c <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    a5e8:	46a2      	mov	sl, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    a5ea:	210f      	movs	r1, #15
    a5ec:	f242 0006 	movw	r0, #8198	; 0x2006
    a5f0:	f7fe f9d6 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
    a5f4:	4604      	mov	r4, r0
    a5f6:	2800      	cmp	r0, #0
    a5f8:	f000 80a2 	beq.w	a740 <bt_le_adv_start_legacy+0x270>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a5fc:	220f      	movs	r2, #15
    a5fe:	f107 0110 	add.w	r1, r7, #16
    a602:	300c      	adds	r0, #12
    a604:	f01a fffb 	bl	255fe <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    a608:	4621      	mov	r1, r4
    a60a:	2200      	movs	r2, #0
    a60c:	f242 0006 	movw	r0, #8198	; 0x2006
    a610:	f7fe fa00 	bl	8a14 <bt_hci_cmd_send_sync>
	if (err) {
    a614:	4604      	mov	r4, r0
    a616:	2800      	cmp	r0, #0
    a618:	f47f af76 	bne.w	a508 <bt_le_adv_start_legacy+0x38>
	if (!dir_adv) {
    a61c:	f1bb 0f00 	cmp.w	fp, #0
    a620:	d02e      	beq.n	a680 <bt_le_adv_start_legacy+0x1b0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a622:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a624:	07db      	lsls	r3, r3, #31
    a626:	d439      	bmi.n	a69c <bt_le_adv_start_legacy+0x1cc>
	return bt_le_adv_set_enable_legacy(adv, enable);
    a628:	2101      	movs	r1, #1
    a62a:	4630      	mov	r0, r6
    a62c:	f019 fd8c 	bl	24148 <bt_le_adv_set_enable_legacy>
	if (err) {
    a630:	4604      	mov	r4, r0
    a632:	2800      	cmp	r0, #0
    a634:	d076      	beq.n	a724 <bt_le_adv_start_legacy+0x254>
		LOG_ERR("Failed to start advertiser");
    a636:	4847      	ldr	r0, [pc, #284]	; (a754 <bt_le_adv_start_legacy+0x284>)
    a638:	6803      	ldr	r3, [r0, #0]
    a63a:	075d      	lsls	r5, r3, #29
    a63c:	d00f      	beq.n	a65e <bt_le_adv_start_legacy+0x18e>
    a63e:	466d      	mov	r5, sp
    a640:	b088      	sub	sp, #32
    a642:	aa04      	add	r2, sp, #16
    a644:	4b44      	ldr	r3, [pc, #272]	; (a758 <bt_le_adv_start_legacy+0x288>)
    a646:	6153      	str	r3, [r2, #20]
    a648:	4b44      	ldr	r3, [pc, #272]	; (a75c <bt_le_adv_start_legacy+0x28c>)
    a64a:	6193      	str	r3, [r2, #24]
    a64c:	2303      	movs	r3, #3
    a64e:	f842 3f10 	str.w	r3, [r2, #16]!
    a652:	2300      	movs	r3, #0
    a654:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a658:	f7f9 fd7a 	bl	4150 <z_impl_z_log_msg_static_create>
    a65c:	46ad      	mov	sp, r5
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a65e:	68fd      	ldr	r5, [r7, #12]
    a660:	2d00      	cmp	r5, #0
    a662:	f43f af51 	beq.w	a508 <bt_le_adv_start_legacy+0x38>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a666:	4628      	mov	r0, r5
    a668:	2100      	movs	r1, #0
    a66a:	f000 fcdf 	bl	b02c <bt_conn_set_state>
			bt_conn_unref(conn);
    a66e:	4628      	mov	r0, r5
    a670:	f019 fde0 	bl	24234 <bt_conn_unref>
    a674:	e748      	b.n	a508 <bt_le_adv_start_legacy+0x38>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    a676:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    a678:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    a67c:	753b      	strb	r3, [r7, #20]
    a67e:	e7b4      	b.n	a5ea <bt_le_adv_start_legacy+0x11a>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    a680:	e9cd a801 	strd	sl, r8, [sp, #4]
    a684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a686:	9300      	str	r3, [sp, #0]
    a688:	e9d7 2100 	ldrd	r2, r1, [r7]
    a68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a68e:	4630      	mov	r0, r6
    a690:	f019 fcd3 	bl	2403a <le_adv_update.constprop.0>
		if (err) {
    a694:	4604      	mov	r4, r0
    a696:	2800      	cmp	r0, #0
    a698:	d0c3      	beq.n	a622 <bt_le_adv_start_legacy+0x152>
    a69a:	e735      	b.n	a508 <bt_le_adv_start_legacy+0x38>
		err = le_adv_start_add_conn(adv, &conn);
    a69c:	f107 010c 	add.w	r1, r7, #12
    a6a0:	4630      	mov	r0, r6
    a6a2:	f7ff fe9f 	bl	a3e4 <le_adv_start_add_conn>
		if (err) {
    a6a6:	4604      	mov	r4, r0
    a6a8:	2800      	cmp	r0, #0
    a6aa:	d0bd      	beq.n	a628 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
    a6ac:	f110 0f0c 	cmn.w	r0, #12
    a6b0:	f47f af2a 	bne.w	a508 <bt_le_adv_start_legacy+0x38>
    a6b4:	f1bb 0f00 	cmp.w	fp, #0
    a6b8:	f47f af26 	bne.w	a508 <bt_le_adv_start_legacy+0x38>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    a6bc:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    a6be:	079e      	lsls	r6, r3, #30
    a6c0:	f53f af22 	bmi.w	a508 <bt_le_adv_start_legacy+0x38>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a6c4:	686c      	ldr	r4, [r5, #4]
    a6c6:	f084 0402 	eor.w	r4, r4, #2
    a6ca:	f3c4 0440 	ubfx	r4, r4, #1, #1
    a6ce:	f004 0201 	and.w	r2, r4, #1
    a6d2:	210e      	movs	r1, #14
    a6d4:	4648      	mov	r0, r9
    a6d6:	f019 fc99 	bl	2400c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    a6da:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    a6de:	425a      	negs	r2, r3
    a6e0:	415a      	adcs	r2, r3
    a6e2:	2108      	movs	r1, #8
    a6e4:	4648      	mov	r0, r9
    a6e6:	f019 fc91 	bl	2400c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    a6ea:	f1a8 0102 	sub.w	r1, r8, #2
    a6ee:	424a      	negs	r2, r1
    a6f0:	414a      	adcs	r2, r1
    a6f2:	4648      	mov	r0, r9
    a6f4:	2109      	movs	r1, #9
    a6f6:	f019 fc89 	bl	2400c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    a6fa:	686a      	ldr	r2, [r5, #4]
    a6fc:	210a      	movs	r1, #10
    a6fe:	f002 0201 	and.w	r2, r2, #1
    a702:	4648      	mov	r0, r9
    a704:	f019 fc82 	bl	2400c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    a708:	4652      	mov	r2, sl
    a70a:	210b      	movs	r1, #11
    a70c:	4648      	mov	r0, r9
    a70e:	f019 fc7d 	bl	2400c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    a712:	686a      	ldr	r2, [r5, #4]
    a714:	210d      	movs	r1, #13
    a716:	f3c2 0280 	ubfx	r2, r2, #2, #1
    a71a:	4648      	mov	r0, r9
    a71c:	f019 fc76 	bl	2400c <atomic_set_bit_to>
	return 0;
    a720:	2400      	movs	r4, #0
    a722:	e6f1      	b.n	a508 <bt_le_adv_start_legacy+0x38>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a724:	68f8      	ldr	r0, [r7, #12]
    a726:	b108      	cbz	r0, a72c <bt_le_adv_start_legacy+0x25c>
		bt_conn_unref(conn);
    a728:	f019 fd84 	bl	24234 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a72c:	f1bb 0f00 	cmp.w	fp, #0
    a730:	d1cd      	bne.n	a6ce <bt_le_adv_start_legacy+0x1fe>
    a732:	e7c7      	b.n	a6c4 <bt_le_adv_start_legacy+0x1f4>
		return -EAGAIN;
    a734:	f06f 040a 	mvn.w	r4, #10
    a738:	e6e6      	b.n	a508 <bt_le_adv_start_legacy+0x38>
		return -EALREADY;
    a73a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a73e:	e6e3      	b.n	a508 <bt_le_adv_start_legacy+0x38>
		return -ENOBUFS;
    a740:	f06f 0468 	mvn.w	r4, #104	; 0x68
    a744:	e6e0      	b.n	a508 <bt_le_adv_start_legacy+0x38>
    a746:	bf00      	nop
    a748:	200000dc 	.word	0x200000dc
    a74c:	20000010 	.word	0x20000010
    a750:	0002b9b3 	.word	0x0002b9b3
    a754:	20000adc 	.word	0x20000adc
    a758:	0002c564 	.word	0x0002c564
    a75c:	0002c5fd 	.word	0x0002c5fd

0000a760 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    a760:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a762:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    a764:	9a06      	ldr	r2, [sp, #24]
{
    a766:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    a768:	e9cd 3200 	strd	r3, r2, [sp]
    a76c:	462b      	mov	r3, r5
    a76e:	460a      	mov	r2, r1
    a770:	4601      	mov	r1, r0
    a772:	4811      	ldr	r0, [pc, #68]	; (a7b8 <bt_le_adv_start+0x58>)
    a774:	f7ff feac 	bl	a4d0 <bt_le_adv_start_legacy>
    a778:	4621      	mov	r1, r4
    a77a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    a77c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    a77e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    a782:	429d      	cmp	r5, r3
    a784:	d102      	bne.n	a78c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    a786:	4630      	mov	r0, r6
    a788:	b002      	add	sp, #8
    a78a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    a78c:	880a      	ldrh	r2, [r1, #0]
    a78e:	4282      	cmp	r2, r0
    a790:	d104      	bne.n	a79c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    a792:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    a794:	b112      	cbz	r2, a79c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    a796:	7812      	ldrb	r2, [r2, #0]
    a798:	07d2      	lsls	r2, r2, #31
    a79a:	d402      	bmi.n	a7a2 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    a79c:	3301      	adds	r3, #1
    a79e:	3108      	adds	r1, #8
    a7a0:	e7ef      	b.n	a782 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    a7a2:	4906      	ldr	r1, [pc, #24]	; (a7bc <bt_le_adv_start+0x5c>)
    a7a4:	4806      	ldr	r0, [pc, #24]	; (a7c0 <bt_le_adv_start+0x60>)
    a7a6:	f01c fb31 	bl	26e0c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    a7aa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    a7ae:	2300      	movs	r3, #0
    a7b0:	4803      	ldr	r0, [pc, #12]	; (a7c0 <bt_le_adv_start+0x60>)
    a7b2:	f015 fcf7 	bl	201a4 <k_work_reschedule>
    a7b6:	e7e6      	b.n	a786 <bt_le_adv_start+0x26>
    a7b8:	20000028 	.word	0x20000028
    a7bc:	0000a83d 	.word	0x0000a83d
    a7c0:	20000040 	.word	0x20000040

0000a7c4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    a7c4:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    a7c6:	4819      	ldr	r0, [pc, #100]	; (a82c <bt_le_adv_stop+0x68>)
    a7c8:	f019 fce3 	bl	24192 <bt_le_lim_adv_cancel_timeout>
    a7cc:	4818      	ldr	r0, [pc, #96]	; (a830 <bt_le_adv_stop+0x6c>)
    a7ce:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    a7d2:	f019 fc0c 	bl	23fee <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a7d6:	4816      	ldr	r0, [pc, #88]	; (a830 <bt_le_adv_stop+0x6c>)
    a7d8:	f019 fc03 	bl	23fe2 <atomic_get>
    a7dc:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a7de:	061a      	lsls	r2, r3, #24
    a7e0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    a7e4:	d521      	bpl.n	a82a <bt_le_adv_stop+0x66>
    a7e6:	4812      	ldr	r0, [pc, #72]	; (a830 <bt_le_adv_stop+0x6c>)
    a7e8:	f019 fbfb 	bl	23fe2 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a7ec:	0543      	lsls	r3, r0, #21
    a7ee:	d512      	bpl.n	a816 <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
    a7f0:	480e      	ldr	r0, [pc, #56]	; (a82c <bt_le_adv_stop+0x68>)
    a7f2:	f7ff fdeb 	bl	a3cc <adv_is_directed>
    a7f6:	4b0f      	ldr	r3, [pc, #60]	; (a834 <bt_le_adv_stop+0x70>)
    a7f8:	b998      	cbnz	r0, a822 <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    a7fa:	490f      	ldr	r1, [pc, #60]	; (a838 <bt_le_adv_stop+0x74>)
    a7fc:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    a7fe:	7e18      	ldrb	r0, [r3, #24]
    a800:	f000 fe48 	bl	b494 <bt_conn_lookup_state_le>
    a804:	4604      	mov	r4, r0
	if (conn) {
    a806:	b130      	cbz	r0, a816 <bt_le_adv_stop+0x52>
		conn->err = status;
    a808:	2100      	movs	r1, #0
    a80a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a80c:	f000 fc0e 	bl	b02c <bt_conn_set_state>
		bt_conn_unref(conn);
    a810:	4620      	mov	r0, r4
    a812:	f019 fd0f 	bl	24234 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    a816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    a81a:	4804      	ldr	r0, [pc, #16]	; (a82c <bt_le_adv_stop+0x68>)
    a81c:	2100      	movs	r1, #0
    a81e:	f019 bc93 	b.w	24148 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    a822:	2205      	movs	r2, #5
    a824:	f103 0121 	add.w	r1, r3, #33	; 0x21
    a828:	e7e9      	b.n	a7fe <bt_le_adv_stop+0x3a>
}
    a82a:	bd10      	pop	{r4, pc}
    a82c:	20000028 	.word	0x20000028
    a830:	20000038 	.word	0x20000038
    a834:	20000010 	.word	0x20000010
    a838:	0002b9ac 	.word	0x0002b9ac

0000a83c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    a83c:	b598      	push	{r3, r4, r7, lr}
    a83e:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    a840:	f7ff ffc0 	bl	a7c4 <bt_le_adv_stop>
    a844:	4603      	mov	r3, r0
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
    a846:	480c      	ldr	r0, [pc, #48]	; (a878 <adv_timeout+0x3c>)
    a848:	6802      	ldr	r2, [r0, #0]
    a84a:	f012 0f06 	tst.w	r2, #6
    a84e:	d010      	beq.n	a872 <adv_timeout+0x36>
    a850:	466c      	mov	r4, sp
    a852:	b088      	sub	sp, #32
    a854:	466a      	mov	r2, sp
    a856:	4909      	ldr	r1, [pc, #36]	; (a87c <adv_timeout+0x40>)
    a858:	6151      	str	r1, [r2, #20]
    a85a:	4909      	ldr	r1, [pc, #36]	; (a880 <adv_timeout+0x44>)
    a85c:	e9c2 1306 	strd	r1, r3, [r2, #24]
    a860:	2304      	movs	r3, #4
    a862:	f842 3f10 	str.w	r3, [r2, #16]!
    a866:	2300      	movs	r3, #0
    a868:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    a86c:	f7f9 fc70 	bl	4150 <z_impl_z_log_msg_static_create>
    a870:	46a5      	mov	sp, r4
}
    a872:	46bd      	mov	sp, r7
    a874:	bd98      	pop	{r3, r4, r7, pc}
    a876:	bf00      	nop
    a878:	20000adc 	.word	0x20000adc
    a87c:	0002c583 	.word	0x0002c583
    a880:	0002c5f1 	.word	0x0002c5f1

0000a884 <bt_le_adv_resume>:
{
    a884:	b5f0      	push	{r4, r5, r6, r7, lr}
    a886:	b083      	sub	sp, #12
    a888:	483c      	ldr	r0, [pc, #240]	; (a97c <bt_le_adv_resume+0xf8>)
    a88a:	4c3c      	ldr	r4, [pc, #240]	; (a97c <bt_le_adv_resume+0xf8>)
    a88c:	af00      	add	r7, sp, #0
    a88e:	f019 fba8 	bl	23fe2 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    a892:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    a896:	d047      	beq.n	a928 <bt_le_adv_resume+0xa4>
    a898:	4620      	mov	r0, r4
    a89a:	f019 fba2 	bl	23fe2 <atomic_get>
    a89e:	0603      	lsls	r3, r0, #24
    a8a0:	d442      	bmi.n	a928 <bt_le_adv_resume+0xa4>
    a8a2:	4620      	mov	r0, r4
    a8a4:	f019 fb9d 	bl	23fe2 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    a8a8:	0546      	lsls	r6, r0, #21
    a8aa:	d53d      	bpl.n	a928 <bt_le_adv_resume+0xa4>
	err = le_adv_start_add_conn(adv, &conn);
    a8ac:	1d39      	adds	r1, r7, #4
    a8ae:	f1a4 0010 	sub.w	r0, r4, #16
    a8b2:	f7ff fd97 	bl	a3e4 <le_adv_start_add_conn>
	if (err) {
    a8b6:	2800      	cmp	r0, #0
    a8b8:	d136      	bne.n	a928 <bt_le_adv_resume+0xa4>
		bool dir_adv = adv_is_directed(adv);
    a8ba:	f1a4 0010 	sub.w	r0, r4, #16
    a8be:	f7ff fd85 	bl	a3cc <adv_is_directed>
    a8c2:	4602      	mov	r2, r0
    a8c4:	4620      	mov	r0, r4
    a8c6:	f019 fb8c 	bl	23fe2 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a8ca:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a8ce:	4620      	mov	r0, r4
    a8d0:	f019 fb87 	bl	23fe2 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    a8d4:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    a8d8:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    a8da:	ea4f 0141 	mov.w	r1, r1, lsl #1
    a8de:	4827      	ldr	r0, [pc, #156]	; (a97c <bt_le_adv_resume+0xf8>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
    a8e0:	bf48      	it	mi
    a8e2:	f041 0101 	orrmi.w	r1, r1, #1
    a8e6:	f019 fb7c 	bl	23fe2 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    a8ea:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
    a8ec:	bf48      	it	mi
    a8ee:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
    a8f2:	4823      	ldr	r0, [pc, #140]	; (a980 <bt_le_adv_resume+0xfc>)
    a8f4:	1cfb      	adds	r3, r7, #3
    a8f6:	f7ff fc4d 	bl	a194 <bt_id_set_adv_own_addr>
		if (err) {
    a8fa:	4605      	mov	r5, r0
    a8fc:	b1b8      	cbz	r0, a92e <bt_le_adv_resume+0xaa>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
    a8fe:	4821      	ldr	r0, [pc, #132]	; (a984 <bt_le_adv_resume+0x100>)
    a900:	6803      	ldr	r3, [r0, #0]
    a902:	075a      	lsls	r2, r3, #29
    a904:	d010      	beq.n	a928 <bt_le_adv_resume+0xa4>
    a906:	466c      	mov	r4, sp
    a908:	b088      	sub	sp, #32
    a90a:	466a      	mov	r2, sp
    a90c:	4b1e      	ldr	r3, [pc, #120]	; (a988 <bt_le_adv_resume+0x104>)
    a90e:	6153      	str	r3, [r2, #20]
    a910:	4b1e      	ldr	r3, [pc, #120]	; (a98c <bt_le_adv_resume+0x108>)
    a912:	e9c2 3506 	strd	r3, r5, [r2, #24]
    a916:	2304      	movs	r3, #4
    a918:	f842 3f10 	str.w	r3, [r2, #16]!
    a91c:	2300      	movs	r3, #0
    a91e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a922:	f7f9 fc15 	bl	4150 <z_impl_z_log_msg_static_create>
    a926:	46a5      	mov	sp, r4
}
    a928:	370c      	adds	r7, #12
    a92a:	46bd      	mov	sp, r7
    a92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
    a92e:	4814      	ldr	r0, [pc, #80]	; (a980 <bt_le_adv_resume+0xfc>)
    a930:	2101      	movs	r1, #1
    a932:	f019 fc09 	bl	24148 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
    a936:	687e      	ldr	r6, [r7, #4]
	if (err) {
    a938:	b918      	cbnz	r0, a942 <bt_le_adv_resume+0xbe>
	bt_conn_unref(conn);
    a93a:	4630      	mov	r0, r6
    a93c:	f019 fc7a 	bl	24234 <bt_conn_unref>
	if (persist_paused) {
    a940:	e7f2      	b.n	a928 <bt_le_adv_resume+0xa4>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a942:	4629      	mov	r1, r5
    a944:	4630      	mov	r0, r6
    a946:	f000 fb71 	bl	b02c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a94a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    a94e:	480b      	ldr	r0, [pc, #44]	; (a97c <bt_le_adv_resume+0xf8>)
    a950:	f019 fb4d 	bl	23fee <atomic_and>
    a954:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    a956:	4630      	mov	r0, r6
    a958:	f019 fc6c 	bl	24234 <bt_conn_unref>
	if (persist_paused) {
    a95c:	046b      	lsls	r3, r5, #17
    a95e:	d5e3      	bpl.n	a928 <bt_le_adv_resume+0xa4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a960:	f3bf 8f5b 	dmb	ish
    a964:	e854 3f00 	ldrex	r3, [r4]
    a968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    a96c:	e844 3200 	strex	r2, r3, [r4]
    a970:	2a00      	cmp	r2, #0
    a972:	d1f7      	bne.n	a964 <bt_le_adv_resume+0xe0>
    a974:	f3bf 8f5b 	dmb	ish
    a978:	e7d6      	b.n	a928 <bt_le_adv_resume+0xa4>
    a97a:	bf00      	nop
    a97c:	20000038 	.word	0x20000038
    a980:	20000028 	.word	0x20000028
    a984:	20000adc 	.word	0x20000adc
    a988:	0002c5a6 	.word	0x0002c5a6
    a98c:	0002c5e0 	.word	0x0002c5e0

0000a990 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    a990:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    a992:	4b0b      	ldr	r3, [pc, #44]	; (a9c0 <notify_connected+0x30>)
    a994:	681d      	ldr	r5, [r3, #0]
{
    a996:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a998:	b925      	cbnz	r5, a9a4 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    a99a:	4d0a      	ldr	r5, [pc, #40]	; (a9c4 <notify_connected+0x34>)
    a99c:	4e0a      	ldr	r6, [pc, #40]	; (a9c8 <notify_connected+0x38>)
    a99e:	42b5      	cmp	r5, r6
    a9a0:	d307      	bcc.n	a9b2 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    a9a2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
    a9a4:	682b      	ldr	r3, [r5, #0]
    a9a6:	b113      	cbz	r3, a9ae <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    a9a8:	7a61      	ldrb	r1, [r4, #9]
    a9aa:	4620      	mov	r0, r4
    a9ac:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a9ae:	692d      	ldr	r5, [r5, #16]
    a9b0:	e7f2      	b.n	a998 <notify_connected+0x8>
		if (cb->connected) {
    a9b2:	682b      	ldr	r3, [r5, #0]
    a9b4:	b113      	cbz	r3, a9bc <notify_connected+0x2c>
			cb->connected(conn, conn->err);
    a9b6:	7a61      	ldrb	r1, [r4, #9]
    a9b8:	4620      	mov	r0, r4
    a9ba:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    a9bc:	3514      	adds	r5, #20
    a9be:	e7ee      	b.n	a99e <notify_connected+0xe>
    a9c0:	200025c0 	.word	0x200025c0
    a9c4:	00027910 	.word	0x00027910
    a9c8:	00027910 	.word	0x00027910

0000a9cc <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
    a9cc:	b598      	push	{r3, r4, r7, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
    a9ce:	480c      	ldr	r0, [pc, #48]	; (aa00 <bt_conn_create_pdu_timeout.part.0+0x34>)
    a9d0:	6803      	ldr	r3, [r0, #0]
    a9d2:	f013 0f06 	tst.w	r3, #6
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
    a9d6:	af00      	add	r7, sp, #0
		LOG_WRN("Unable to allocate buffer within timeout");
    a9d8:	d00e      	beq.n	a9f8 <bt_conn_create_pdu_timeout.part.0+0x2c>
    a9da:	466c      	mov	r4, sp
    a9dc:	b088      	sub	sp, #32
    a9de:	466a      	mov	r2, sp
    a9e0:	4b08      	ldr	r3, [pc, #32]	; (aa04 <bt_conn_create_pdu_timeout.part.0+0x38>)
    a9e2:	6153      	str	r3, [r2, #20]
    a9e4:	4b08      	ldr	r3, [pc, #32]	; (aa08 <bt_conn_create_pdu_timeout.part.0+0x3c>)
    a9e6:	6193      	str	r3, [r2, #24]
    a9e8:	2303      	movs	r3, #3
    a9ea:	f842 3f10 	str.w	r3, [r2, #16]!
    a9ee:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    a9f2:	f019 fbd1 	bl	24198 <z_log_msg_static_create.constprop.0>
    a9f6:	46a5      	mov	sp, r4
}
    a9f8:	2000      	movs	r0, #0
    a9fa:	46bd      	mov	sp, r7
    a9fc:	bd98      	pop	{r3, r4, r7, pc}
    a9fe:	bf00      	nop
    aa00:	20000ae4 	.word	0x20000ae4
    aa04:	0002c631 	.word	0x0002c631
    aa08:	0002c8ff 	.word	0x0002c8ff

0000aa0c <tx_notify>:
{
    aa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
    aa10:	4f15      	ldr	r7, [pc, #84]	; (aa68 <tx_notify+0x5c>)
{
    aa12:	4604      	mov	r4, r0
	tx->cb = NULL;
    aa14:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    aa18:	f04f 0220 	mov.w	r2, #32
    aa1c:	f3ef 8311 	mrs	r3, BASEPRI
    aa20:	f382 8812 	msr	BASEPRI_MAX, r2
    aa24:	f3bf 8f6f 	isb	sy
	return list->head;
    aa28:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
    aa2a:	b929      	cbnz	r1, aa38 <tx_notify+0x2c>
	__asm__ volatile(
    aa2c:	f383 8811 	msr	BASEPRI, r3
    aa30:	f3bf 8f6f 	isb	sy
}
    aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa38:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    aa3a:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    aa3c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa3e:	4281      	cmp	r1, r0
	list->tail = node;
    aa40:	bf08      	it	eq
    aa42:	6262      	streq	r2, [r4, #36]	; 0x24
    aa44:	f383 8811 	msr	BASEPRI, r3
    aa48:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    aa4c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    aa50:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
    aa54:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
    aa58:	4638      	mov	r0, r7
    aa5a:	f01c f8f8 	bl	26c4e <k_queue_append>
		cb(conn, user_data, 0);
    aa5e:	2200      	movs	r2, #0
    aa60:	4631      	mov	r1, r6
    aa62:	4620      	mov	r0, r4
    aa64:	47a8      	blx	r5
	while (1) {
    aa66:	e7d7      	b.n	aa18 <tx_notify+0xc>
    aa68:	20000bf4 	.word	0x20000bf4

0000aa6c <conn_tx_destroy>:
{
    aa6c:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
    aa6e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
    aa72:	2200      	movs	r2, #0
	tx->user_data = NULL;
    aa74:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
    aa78:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
    aa7a:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
    aa7c:	4805      	ldr	r0, [pc, #20]	; (aa94 <conn_tx_destroy+0x28>)
    aa7e:	f01c f8e6 	bl	26c4e <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    aa82:	4631      	mov	r1, r6
    aa84:	4620      	mov	r0, r4
    aa86:	462b      	mov	r3, r5
    aa88:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
    aa8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    aa90:	4718      	bx	r3
    aa92:	bf00      	nop
    aa94:	20000bf4 	.word	0x20000bf4

0000aa98 <send_frag>:
{
    aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
    aa9c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; ac54 <send_frag+0x1bc>
{
    aaa0:	b083      	sub	sp, #12
    aaa2:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
    aaa4:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
	return NULL;
    aaa8:	2b00      	cmp	r3, #0
{
    aaaa:	af00      	add	r7, sp, #0
    aaac:	4604      	mov	r4, r0
    aaae:	460d      	mov	r5, r1
	return NULL;
    aab0:	f509 7080 	add.w	r0, r9, #256	; 0x100
{
    aab4:	4616      	mov	r6, r2
	return NULL;
    aab6:	bf08      	it	eq
    aab8:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
    aaba:	2200      	movs	r2, #0
    aabc:	2300      	movs	r3, #0
    aabe:	f015 f95b 	bl	1fd78 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
    aac2:	2800      	cmp	r0, #0
    aac4:	f040 80c3 	bne.w	ac4e <send_frag+0x1b6>
	if (frag) {
    aac8:	2e00      	cmp	r6, #0
    aaca:	f000 8096 	beq.w	abfa <send_frag+0x162>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    aace:	f106 0b0c 	add.w	fp, r6, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    aad2:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
    aad6:	607b      	str	r3, [r7, #4]
    aad8:	4658      	mov	r0, fp
    aada:	f01a fdcf 	bl	2567c <net_buf_simple_tailroom>
    aade:	687b      	ldr	r3, [r7, #4]
    aae0:	4298      	cmp	r0, r3
    aae2:	f240 8085 	bls.w	abf0 <send_frag+0x158>
	return bt_dev.le.acl_mtu;
    aae6:	f8b9 20fc 	ldrh.w	r2, [r9, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    aaea:	f855 1f0c 	ldr.w	r1, [r5, #12]!
    aaee:	607a      	str	r2, [r7, #4]
    aaf0:	4658      	mov	r0, fp
    aaf2:	f01a fd84 	bl	255fe <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    aaf6:	687a      	ldr	r2, [r7, #4]
    aaf8:	4628      	mov	r0, r5
    aafa:	4611      	mov	r1, r2
    aafc:	f01a fda2 	bl	25644 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
    ab00:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    ab02:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
    ab04:	2b07      	cmp	r3, #7
    ab06:	f040 809f 	bne.w	ac48 <send_frag+0x1b0>
	__asm__ volatile(
    ab0a:	f04f 0320 	mov.w	r3, #32
    ab0e:	f3ef 8211 	mrs	r2, BASEPRI
    ab12:	f383 8812 	msr	BASEPRI_MAX, r3
    ab16:	f3bf 8f6f 	isb	sy
	if (tx) {
    ab1a:	2d00      	cmp	r5, #0
    ab1c:	d078      	beq.n	ac10 <send_frag+0x178>
	parent->next = child;
    ab1e:	2300      	movs	r3, #0
    ab20:	602b      	str	r3, [r5, #0]
	return list->tail;
    ab22:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
    ab24:	2b00      	cmp	r3, #0
    ab26:	d170      	bne.n	ac0a <send_frag+0x172>
	list->head = node;
    ab28:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    ab2c:	f382 8811 	msr	BASEPRI, r2
    ab30:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    ab34:	2104      	movs	r1, #4
    ab36:	f106 000c 	add.w	r0, r6, #12
    ab3a:	f01a fd7b 	bl	25634 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    ab3e:	8823      	ldrh	r3, [r4, #0]
    ab40:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    ab44:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    ab48:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ab4c:	8a33      	ldrh	r3, [r6, #16]
    ab4e:	3b04      	subs	r3, #4
    ab50:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ab52:	2302      	movs	r3, #2
    ab54:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
    ab56:	4630      	mov	r0, r6
    ab58:	f7fe fa22 	bl	8fa0 <bt_send>
	if (err) {
    ab5c:	4680      	mov	r8, r0
    ab5e:	2800      	cmp	r0, #0
    ab60:	d041      	beq.n	abe6 <send_frag+0x14e>
		LOG_ERR("Unable to send to driver (err %d)", err);
    ab62:	483d      	ldr	r0, [pc, #244]	; (ac58 <send_frag+0x1c0>)
    ab64:	6803      	ldr	r3, [r0, #0]
    ab66:	075b      	lsls	r3, r3, #29
    ab68:	d00f      	beq.n	ab8a <send_frag+0xf2>
    ab6a:	46eb      	mov	fp, sp
    ab6c:	b088      	sub	sp, #32
    ab6e:	466a      	mov	r2, sp
    ab70:	4b3a      	ldr	r3, [pc, #232]	; (ac5c <send_frag+0x1c4>)
    ab72:	6153      	str	r3, [r2, #20]
    ab74:	4b3a      	ldr	r3, [pc, #232]	; (ac60 <send_frag+0x1c8>)
    ab76:	e9c2 3806 	strd	r3, r8, [r2, #24]
    ab7a:	2304      	movs	r3, #4
    ab7c:	f842 3f10 	str.w	r3, [r2, #16]!
    ab80:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ab84:	f019 fb08 	bl	24198 <z_log_msg_static_create.constprop.0>
    ab88:	46dd      	mov	sp, fp
	__asm__ volatile(
    ab8a:	f04f 0320 	mov.w	r3, #32
    ab8e:	f3ef 8111 	mrs	r1, BASEPRI
    ab92:	f383 8812 	msr	BASEPRI_MAX, r3
    ab96:	f3bf 8f6f 	isb	sy
		if (tx) {
    ab9a:	2d00      	cmp	r5, #0
    ab9c:	d04e      	beq.n	ac3c <send_frag+0x1a4>
	return list->head;
    ab9e:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aba0:	2200      	movs	r2, #0
    aba2:	b15b      	cbz	r3, abbc <send_frag+0x124>
    aba4:	429d      	cmp	r5, r3
    aba6:	d146      	bne.n	ac36 <send_frag+0x19e>
	return node->next;
    aba8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    abaa:	2a00      	cmp	r2, #0
    abac:	d13d      	bne.n	ac2a <send_frag+0x192>
    abae:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    abb0:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    abb2:	4295      	cmp	r5, r2
    abb4:	d100      	bne.n	abb8 <send_frag+0x120>
	list->tail = node;
    abb6:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    abb8:	2300      	movs	r3, #0
    abba:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    abbc:	f381 8811 	msr	BASEPRI, r1
    abc0:	f3bf 8f6f 	isb	sy
		err = -EIO;
    abc4:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
    abc8:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
	return NULL;
    abcc:	4825      	ldr	r0, [pc, #148]	; (ac64 <send_frag+0x1cc>)
    abce:	2b00      	cmp	r3, #0
    abd0:	bf08      	it	eq
    abd2:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    abd4:	f015 f8aa 	bl	1fd2c <z_impl_k_sem_give>
	if (tx) {
    abd8:	b12d      	cbz	r5, abe6 <send_frag+0x14e>
		tx_data(buf)->tx = NULL;
    abda:	2300      	movs	r3, #0
    abdc:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
    abde:	4629      	mov	r1, r5
    abe0:	4620      	mov	r0, r4
    abe2:	f7ff ff43 	bl	aa6c <conn_tx_destroy>
}
    abe6:	4640      	mov	r0, r8
    abe8:	370c      	adds	r7, #12
    abea:	46bd      	mov	sp, r7
    abec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
    abf0:	4658      	mov	r0, fp
    abf2:	f01a fd43 	bl	2567c <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    abf6:	b282      	uxth	r2, r0
    abf8:	e777      	b.n	aaea <send_frag+0x52>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    abfa:	2200      	movs	r2, #0
    abfc:	2300      	movs	r3, #0
    abfe:	f104 0038 	add.w	r0, r4, #56	; 0x38
    ac02:	f01a fcb6 	bl	25572 <net_buf_get>
    ac06:	4606      	mov	r6, r0
		frag = buf;
    ac08:	e77a      	b.n	ab00 <send_frag+0x68>
    ac0a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    ac0c:	61a5      	str	r5, [r4, #24]
}
    ac0e:	e78d      	b.n	ab2c <send_frag+0x94>
	return list->tail;
    ac10:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    ac12:	b133      	cbz	r3, ac22 <send_frag+0x18a>
			pending_no_cb = &tail_tx->pending_no_cb;
    ac14:	f103 0a0c 	add.w	sl, r3, #12
    ac18:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    ac1a:	3301      	adds	r3, #1
    ac1c:	f8ca 3000 	str.w	r3, [sl]
    ac20:	e784      	b.n	ab2c <send_frag+0x94>
			pending_no_cb = &conn->pending_no_cb;
    ac22:	69e3      	ldr	r3, [r4, #28]
    ac24:	f104 0a1c 	add.w	sl, r4, #28
    ac28:	e7f7      	b.n	ac1a <send_frag+0x182>
	parent->next = child;
    ac2a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ac2c:	69a3      	ldr	r3, [r4, #24]
    ac2e:	429d      	cmp	r5, r3
	list->tail = node;
    ac30:	bf08      	it	eq
    ac32:	61a2      	streq	r2, [r4, #24]
}
    ac34:	e7c0      	b.n	abb8 <send_frag+0x120>
	return node->next;
    ac36:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ac38:	681b      	ldr	r3, [r3, #0]
    ac3a:	e7b2      	b.n	aba2 <send_frag+0x10a>
			(*pending_no_cb)--;
    ac3c:	f8da 3000 	ldr.w	r3, [sl]
    ac40:	3b01      	subs	r3, #1
    ac42:	f8ca 3000 	str.w	r3, [sl]
    ac46:	e7b9      	b.n	abbc <send_frag+0x124>
		err = -ENOTCONN;
    ac48:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    ac4c:	e7bc      	b.n	abc8 <send_frag+0x130>
		return -ENOBUFS;
    ac4e:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ac52:	e7c8      	b.n	abe6 <send_frag+0x14e>
    ac54:	20000010 	.word	0x20000010
    ac58:	20000ae4 	.word	0x20000ae4
    ac5c:	0002bd77 	.word	0x0002bd77
    ac60:	0002c92c 	.word	0x0002c92c
    ac64:	20000110 	.word	0x20000110

0000ac68 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
    ac68:	4804      	ldr	r0, [pc, #16]	; (ac7c <bt_conn_get_pkts+0x14>)
    ac6a:	f8b0 30fc 	ldrh.w	r3, [r0, #252]	; 0xfc
	return NULL;
    ac6e:	2b00      	cmp	r3, #0
    ac70:	f500 7080 	add.w	r0, r0, #256	; 0x100
}
    ac74:	bf08      	it	eq
    ac76:	2000      	moveq	r0, #0
    ac78:	4770      	bx	lr
    ac7a:	bf00      	nop
    ac7c:	20000010 	.word	0x20000010

0000ac80 <bt_conn_new>:
{
    ac80:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    ac82:	2200      	movs	r2, #0
    ac84:	4604      	mov	r4, r0
    ac86:	428a      	cmp	r2, r1
    ac88:	d102      	bne.n	ac90 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    ac8a:	2400      	movs	r4, #0
}
    ac8c:	4620      	mov	r0, r4
    ac8e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ac90:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    ac94:	2001      	movs	r0, #1
    ac96:	f3bf 8f5b 	dmb	ish
    ac9a:	e853 5f00 	ldrex	r5, [r3]
    ac9e:	2d00      	cmp	r5, #0
    aca0:	d104      	bne.n	acac <bt_conn_new+0x2c>
    aca2:	e843 0c00 	strex	ip, r0, [r3]
    aca6:	f1bc 0f00 	cmp.w	ip, #0
    acaa:	d1f6      	bne.n	ac9a <bt_conn_new+0x1a>
    acac:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    acb0:	d002      	beq.n	acb8 <bt_conn_new+0x38>
    acb2:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
    acb4:	4402      	add	r2, r0
    acb6:	e7e6      	b.n	ac86 <bt_conn_new+0x6>
	if (!conn) {
    acb8:	2c00      	cmp	r4, #0
    acba:	d0e6      	beq.n	ac8a <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    acbc:	22bc      	movs	r2, #188	; 0xbc
    acbe:	2100      	movs	r1, #0
    acc0:	4620      	mov	r0, r4
    acc2:	f018 ffae 	bl	23c22 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    acc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    acca:	4904      	ldr	r1, [pc, #16]	; (acdc <bt_conn_new+0x5c>)
    accc:	f01c f89e 	bl	26e0c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    acd0:	4903      	ldr	r1, [pc, #12]	; (ace0 <bt_conn_new+0x60>)
    acd2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    acd6:	f01c f855 	bl	26d84 <k_work_init>
	return conn;
    acda:	e7d7      	b.n	ac8c <bt_conn_new+0xc>
    acdc:	0000b545 	.word	0x0000b545
    ace0:	0002419f 	.word	0x0002419f

0000ace4 <bt_conn_recv>:
{
    ace4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ace8:	4616      	mov	r6, r2
    acea:	af00      	add	r7, sp, #0
    acec:	4604      	mov	r4, r0
    acee:	460d      	mov	r5, r1
	tx_notify(conn);
    acf0:	f7ff fe8c 	bl	aa0c <tx_notify>
	switch (flags) {
    acf4:	2e01      	cmp	r6, #1
    acf6:	d03f      	beq.n	ad78 <bt_conn_recv+0x94>
    acf8:	2e02      	cmp	r6, #2
    acfa:	f040 8088 	bne.w	ae0e <bt_conn_recv+0x12a>
		if (conn->rx) {
    acfe:	6923      	ldr	r3, [r4, #16]
    ad00:	b1ab      	cbz	r3, ad2e <bt_conn_recv+0x4a>
			LOG_ERR("Unexpected first L2CAP frame");
    ad02:	4851      	ldr	r0, [pc, #324]	; (ae48 <bt_conn_recv+0x164>)
    ad04:	6803      	ldr	r3, [r0, #0]
    ad06:	075a      	lsls	r2, r3, #29
    ad08:	d00e      	beq.n	ad28 <bt_conn_recv+0x44>
    ad0a:	466e      	mov	r6, sp
    ad0c:	b088      	sub	sp, #32
    ad0e:	466a      	mov	r2, sp
    ad10:	4b4e      	ldr	r3, [pc, #312]	; (ae4c <bt_conn_recv+0x168>)
    ad12:	6153      	str	r3, [r2, #20]
    ad14:	4b4e      	ldr	r3, [pc, #312]	; (ae50 <bt_conn_recv+0x16c>)
    ad16:	6193      	str	r3, [r2, #24]
    ad18:	2303      	movs	r3, #3
    ad1a:	f842 3f10 	str.w	r3, [r2, #16]!
    ad1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ad22:	f019 fa39 	bl	24198 <z_log_msg_static_create.constprop.0>
    ad26:	46b5      	mov	sp, r6
			bt_conn_reset_rx_state(conn);
    ad28:	4620      	mov	r0, r4
    ad2a:	f019 fa3b 	bl	241a4 <bt_conn_reset_rx_state>
		conn->rx = buf;
    ad2e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    ad30:	6921      	ldr	r1, [r4, #16]
    ad32:	8a0d      	ldrh	r5, [r1, #16]
    ad34:	2d01      	cmp	r5, #1
    ad36:	d93a      	bls.n	adae <bt_conn_recv+0xca>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    ad38:	68cb      	ldr	r3, [r1, #12]
    ad3a:	881b      	ldrh	r3, [r3, #0]
    ad3c:	3304      	adds	r3, #4
    ad3e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    ad40:	429d      	cmp	r5, r3
    ad42:	d334      	bcc.n	adae <bt_conn_recv+0xca>
	if (conn->rx->len > acl_total_len) {
    ad44:	d979      	bls.n	ae3a <bt_conn_recv+0x156>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
    ad46:	4840      	ldr	r0, [pc, #256]	; (ae48 <bt_conn_recv+0x164>)
    ad48:	6802      	ldr	r2, [r0, #0]
    ad4a:	0752      	lsls	r2, r2, #29
    ad4c:	d010      	beq.n	ad70 <bt_conn_recv+0x8c>
    ad4e:	466e      	mov	r6, sp
    ad50:	b08a      	sub	sp, #40	; 0x28
    ad52:	466a      	mov	r2, sp
    ad54:	493f      	ldr	r1, [pc, #252]	; (ae54 <bt_conn_recv+0x170>)
    ad56:	6151      	str	r1, [r2, #20]
    ad58:	493d      	ldr	r1, [pc, #244]	; (ae50 <bt_conn_recv+0x16c>)
    ad5a:	6213      	str	r3, [r2, #32]
    ad5c:	2305      	movs	r3, #5
    ad5e:	e9c2 1506 	strd	r1, r5, [r2, #24]
    ad62:	f842 3f10 	str.w	r3, [r2, #16]!
    ad66:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    ad6a:	f019 fa15 	bl	24198 <z_log_msg_static_create.constprop.0>
    ad6e:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
    ad70:	4620      	mov	r0, r4
    ad72:	f019 fa17 	bl	241a4 <bt_conn_reset_rx_state>
		return;
    ad76:	e01a      	b.n	adae <bt_conn_recv+0xca>
		if (!conn->rx) {
    ad78:	6920      	ldr	r0, [r4, #16]
    ad7a:	b9d8      	cbnz	r0, adb4 <bt_conn_recv+0xd0>
			LOG_ERR("Unexpected L2CAP continuation");
    ad7c:	4832      	ldr	r0, [pc, #200]	; (ae48 <bt_conn_recv+0x164>)
    ad7e:	6803      	ldr	r3, [r0, #0]
    ad80:	075b      	lsls	r3, r3, #29
    ad82:	d00e      	beq.n	ada2 <bt_conn_recv+0xbe>
    ad84:	466e      	mov	r6, sp
    ad86:	b088      	sub	sp, #32
    ad88:	466a      	mov	r2, sp
    ad8a:	4b33      	ldr	r3, [pc, #204]	; (ae58 <bt_conn_recv+0x174>)
    ad8c:	6153      	str	r3, [r2, #20]
    ad8e:	4b30      	ldr	r3, [pc, #192]	; (ae50 <bt_conn_recv+0x16c>)
    ad90:	6193      	str	r3, [r2, #24]
    ad92:	2303      	movs	r3, #3
    ad94:	f842 3f10 	str.w	r3, [r2, #16]!
    ad98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ad9c:	f019 f9fc 	bl	24198 <z_log_msg_static_create.constprop.0>
    ada0:	46b5      	mov	sp, r6
			bt_conn_reset_rx_state(conn);
    ada2:	4620      	mov	r0, r4
    ada4:	f019 f9fe 	bl	241a4 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    ada8:	4628      	mov	r0, r5
    adaa:	f00f ffef 	bl	1ad8c <net_buf_unref>
}
    adae:	46bd      	mov	sp, r7
    adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!buf->len) {
    adb4:	8a2e      	ldrh	r6, [r5, #16]
    adb6:	2e00      	cmp	r6, #0
    adb8:	d0f6      	beq.n	ada8 <bt_conn_recv+0xc4>
    adba:	300c      	adds	r0, #12
    adbc:	f01a fc5e 	bl	2567c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    adc0:	4286      	cmp	r6, r0
    adc2:	d91a      	bls.n	adfa <bt_conn_recv+0x116>
			LOG_ERR("Not enough buffer space for L2CAP data");
    adc4:	4820      	ldr	r0, [pc, #128]	; (ae48 <bt_conn_recv+0x164>)
    adc6:	6803      	ldr	r3, [r0, #0]
    adc8:	075e      	lsls	r6, r3, #29
    adca:	d00e      	beq.n	adea <bt_conn_recv+0x106>
    adcc:	466e      	mov	r6, sp
    adce:	b088      	sub	sp, #32
    add0:	466a      	mov	r2, sp
    add2:	4b22      	ldr	r3, [pc, #136]	; (ae5c <bt_conn_recv+0x178>)
    add4:	6153      	str	r3, [r2, #20]
    add6:	4b1e      	ldr	r3, [pc, #120]	; (ae50 <bt_conn_recv+0x16c>)
    add8:	6193      	str	r3, [r2, #24]
    adda:	2303      	movs	r3, #3
    addc:	f842 3f10 	str.w	r3, [r2, #16]!
    ade0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ade4:	f019 f9d8 	bl	24198 <z_log_msg_static_create.constprop.0>
    ade8:	46b5      	mov	sp, r6
			bt_l2cap_recv(conn, conn->rx, false);
    adea:	6921      	ldr	r1, [r4, #16]
    adec:	2200      	movs	r2, #0
    adee:	4620      	mov	r0, r4
    adf0:	f000 fe40 	bl	ba74 <bt_l2cap_recv>
			conn->rx = NULL;
    adf4:	2300      	movs	r3, #0
    adf6:	6123      	str	r3, [r4, #16]
    adf8:	e7d6      	b.n	ada8 <bt_conn_recv+0xc4>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    adfa:	6920      	ldr	r0, [r4, #16]
    adfc:	8a2a      	ldrh	r2, [r5, #16]
    adfe:	68e9      	ldr	r1, [r5, #12]
    ae00:	300c      	adds	r0, #12
    ae02:	f01a fbfc 	bl	255fe <net_buf_simple_add_mem>
		net_buf_unref(buf);
    ae06:	4628      	mov	r0, r5
    ae08:	f00f ffc0 	bl	1ad8c <net_buf_unref>
		break;
    ae0c:	e790      	b.n	ad30 <bt_conn_recv+0x4c>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    ae0e:	480e      	ldr	r0, [pc, #56]	; (ae48 <bt_conn_recv+0x164>)
    ae10:	6803      	ldr	r3, [r0, #0]
    ae12:	0759      	lsls	r1, r3, #29
    ae14:	d0c5      	beq.n	ada2 <bt_conn_recv+0xbe>
    ae16:	46e8      	mov	r8, sp
    ae18:	b088      	sub	sp, #32
    ae1a:	466b      	mov	r3, sp
    ae1c:	4a10      	ldr	r2, [pc, #64]	; (ae60 <bt_conn_recv+0x17c>)
    ae1e:	615a      	str	r2, [r3, #20]
    ae20:	4a0b      	ldr	r2, [pc, #44]	; (ae50 <bt_conn_recv+0x16c>)
	switch (flags) {
    ae22:	e9c3 2606 	strd	r2, r6, [r3, #24]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    ae26:	461a      	mov	r2, r3
    ae28:	2304      	movs	r3, #4
    ae2a:	f842 3f10 	str.w	r3, [r2, #16]!
    ae2e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ae32:	f019 f9b1 	bl	24198 <z_log_msg_static_create.constprop.0>
    ae36:	46c5      	mov	sp, r8
    ae38:	e7b3      	b.n	ada2 <bt_conn_recv+0xbe>
	conn->rx = NULL;
    ae3a:	2300      	movs	r3, #0
    ae3c:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    ae3e:	2201      	movs	r2, #1
    ae40:	4620      	mov	r0, r4
    ae42:	f000 fe17 	bl	ba74 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    ae46:	e7b2      	b.n	adae <bt_conn_recv+0xca>
    ae48:	20000ae4 	.word	0x20000ae4
    ae4c:	0002c65e 	.word	0x0002c65e
    ae50:	0002c949 	.word	0x0002c949
    ae54:	0002c6ee 	.word	0x0002c6ee
    ae58:	0002c67f 	.word	0x0002c67f
    ae5c:	0002c6a1 	.word	0x0002c6a1
    ae60:	0002c6cc 	.word	0x0002c6cc

0000ae64 <bt_conn_send_cb>:
{
    ae64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ae68:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
    ae6a:	7a83      	ldrb	r3, [r0, #10]
    ae6c:	2b07      	cmp	r3, #7
{
    ae6e:	af00      	add	r7, sp, #0
    ae70:	4605      	mov	r5, r0
    ae72:	460e      	mov	r6, r1
    ae74:	4690      	mov	r8, r2
	if (conn->state != BT_CONN_CONNECTED) {
    ae76:	d015      	beq.n	aea4 <bt_conn_send_cb+0x40>
		LOG_ERR("not connected!");
    ae78:	4838      	ldr	r0, [pc, #224]	; (af5c <bt_conn_send_cb+0xf8>)
    ae7a:	6803      	ldr	r3, [r0, #0]
    ae7c:	075a      	lsls	r2, r3, #29
    ae7e:	d00e      	beq.n	ae9e <bt_conn_send_cb+0x3a>
    ae80:	466c      	mov	r4, sp
    ae82:	b088      	sub	sp, #32
    ae84:	466a      	mov	r2, sp
    ae86:	4b36      	ldr	r3, [pc, #216]	; (af60 <bt_conn_send_cb+0xfc>)
    ae88:	6153      	str	r3, [r2, #20]
    ae8a:	4b36      	ldr	r3, [pc, #216]	; (af64 <bt_conn_send_cb+0x100>)
    ae8c:	6193      	str	r3, [r2, #24]
    ae8e:	2303      	movs	r3, #3
    ae90:	f842 3f10 	str.w	r3, [r2, #16]!
    ae94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ae98:	f019 f97e 	bl	24198 <z_log_msg_static_create.constprop.0>
    ae9c:	46a5      	mov	sp, r4
		return -ENOTCONN;
    ae9e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    aea2:	e017      	b.n	aed4 <bt_conn_send_cb+0x70>
	if (cb) {
    aea4:	2a00      	cmp	r2, #0
    aea6:	d056      	beq.n	af56 <bt_conn_send_cb+0xf2>
	return z_impl_z_current_get();
    aea8:	f015 fc64 	bl	20774 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    aeac:	4b2e      	ldr	r3, [pc, #184]	; (af68 <bt_conn_send_cb+0x104>)
    aeae:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    aeb0:	482e      	ldr	r0, [pc, #184]	; (af6c <bt_conn_send_cb+0x108>)
    aeb2:	bf07      	ittee	eq
    aeb4:	2200      	moveq	r2, #0
    aeb6:	2300      	moveq	r3, #0
    aeb8:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    aebc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    aec0:	f014 ff00 	bl	1fcc4 <z_impl_k_queue_get>
    aec4:	4604      	mov	r4, r0
		if (!tx) {
    aec6:	b9c0      	cbnz	r0, aefa <bt_conn_send_cb+0x96>
			LOG_ERR("Unable to allocate TX context");
    aec8:	4824      	ldr	r0, [pc, #144]	; (af5c <bt_conn_send_cb+0xf8>)
    aeca:	6803      	ldr	r3, [r0, #0]
    aecc:	075b      	lsls	r3, r3, #29
    aece:	d104      	bne.n	aeda <bt_conn_send_cb+0x76>
			return -ENOBUFS;
    aed0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    aed4:	46bd      	mov	sp, r7
    aed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			LOG_ERR("Unable to allocate TX context");
    aeda:	466c      	mov	r4, sp
    aedc:	b088      	sub	sp, #32
    aede:	466a      	mov	r2, sp
    aee0:	4b23      	ldr	r3, [pc, #140]	; (af70 <bt_conn_send_cb+0x10c>)
    aee2:	6153      	str	r3, [r2, #20]
    aee4:	4b1f      	ldr	r3, [pc, #124]	; (af64 <bt_conn_send_cb+0x100>)
    aee6:	6193      	str	r3, [r2, #24]
    aee8:	2303      	movs	r3, #3
    aeea:	f842 3f10 	str.w	r3, [r2, #16]!
    aeee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    aef2:	f019 f951 	bl	24198 <z_log_msg_static_create.constprop.0>
    aef6:	46a5      	mov	sp, r4
    aef8:	e7ea      	b.n	aed0 <bt_conn_send_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    aefa:	7aab      	ldrb	r3, [r5, #10]
    aefc:	2b07      	cmp	r3, #7
    aefe:	d01c      	beq.n	af3a <bt_conn_send_cb+0xd6>
			LOG_WRN("Disconnected while allocating context");
    af00:	4816      	ldr	r0, [pc, #88]	; (af5c <bt_conn_send_cb+0xf8>)
    af02:	6803      	ldr	r3, [r0, #0]
    af04:	f013 0f06 	tst.w	r3, #6
    af08:	d00e      	beq.n	af28 <bt_conn_send_cb+0xc4>
    af0a:	466d      	mov	r5, sp
    af0c:	b088      	sub	sp, #32
    af0e:	466a      	mov	r2, sp
    af10:	4b18      	ldr	r3, [pc, #96]	; (af74 <bt_conn_send_cb+0x110>)
    af12:	6153      	str	r3, [r2, #20]
    af14:	4b13      	ldr	r3, [pc, #76]	; (af64 <bt_conn_send_cb+0x100>)
    af16:	6193      	str	r3, [r2, #24]
    af18:	2303      	movs	r3, #3
    af1a:	f842 3f10 	str.w	r3, [r2, #16]!
    af1e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    af22:	f019 f939 	bl	24198 <z_log_msg_static_create.constprop.0>
    af26:	46ad      	mov	sp, r5
	tx->cb = NULL;
    af28:	2300      	movs	r3, #0
	tx->user_data = NULL;
    af2a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
    af2e:	480f      	ldr	r0, [pc, #60]	; (af6c <bt_conn_send_cb+0x108>)
	tx->pending_no_cb = 0U;
    af30:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
    af32:	4621      	mov	r1, r4
    af34:	f01b fe8b 	bl	26c4e <k_queue_append>
}
    af38:	e7b1      	b.n	ae9e <bt_conn_send_cb+0x3a>
		tx->user_data = user_data;
    af3a:	e9c0 8901 	strd	r8, r9, [r0, #4]
		tx->pending_no_cb = 0U;
    af3e:	2300      	movs	r3, #0
    af40:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    af42:	61b4      	str	r4, [r6, #24]
	tx_data(buf)->is_cont = false;
    af44:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
    af46:	f105 0038 	add.w	r0, r5, #56	; 0x38
	tx_data(buf)->is_cont = false;
    af4a:	7734      	strb	r4, [r6, #28]
	net_buf_put(&conn->tx_queue, buf);
    af4c:	4631      	mov	r1, r6
    af4e:	f01a fb1c 	bl	2558a <net_buf_put>
	return 0;
    af52:	4620      	mov	r0, r4
    af54:	e7be      	b.n	aed4 <bt_conn_send_cb+0x70>
    af56:	4614      	mov	r4, r2
    af58:	e7f3      	b.n	af42 <bt_conn_send_cb+0xde>
    af5a:	bf00      	nop
    af5c:	20000ae4 	.word	0x20000ae4
    af60:	0002c70d 	.word	0x0002c70d
    af64:	0002c939 	.word	0x0002c939
    af68:	20002088 	.word	0x20002088
    af6c:	20000bf4 	.word	0x20000bf4
    af70:	0002c720 	.word	0x0002c720
    af74:	0002c742 	.word	0x0002c742

0000af78 <bt_conn_prepare_events>:
{
    af78:	b570      	push	{r4, r5, r6, lr}
    af7a:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
    af7c:	4823      	ldr	r0, [pc, #140]	; (b00c <bt_conn_prepare_events+0x94>)
    af7e:	f01c fa93 	bl	274a8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    af82:	4b22      	ldr	r3, [pc, #136]	; (b00c <bt_conn_prepare_events+0x94>)
    af84:	2200      	movs	r2, #0
    af86:	4620      	mov	r0, r4
    af88:	2101      	movs	r1, #1
    af8a:	f01c fa70 	bl	2746e <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    af8e:	f3bf 8f5b 	dmb	ish
    af92:	4b1f      	ldr	r3, [pc, #124]	; (b010 <bt_conn_prepare_events+0x98>)
    af94:	681a      	ldr	r2, [r3, #0]
    af96:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    af9a:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
    af9e:	b90a      	cbnz	r2, afa4 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    afa0:	2001      	movs	r0, #1
}
    afa2:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    afa4:	f1a3 01bc 	sub.w	r1, r3, #188	; 0xbc
    afa8:	f813 3cb2 	ldrb.w	r3, [r3, #-178]
    afac:	b993      	cbnz	r3, afd4 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    afae:	f3bf 8f5b 	dmb	ish
    afb2:	1d0b      	adds	r3, r1, #4
    afb4:	e853 2f00 	ldrex	r2, [r3]
    afb8:	f022 0540 	bic.w	r5, r2, #64	; 0x40
    afbc:	e843 5600 	strex	r6, r5, [r3]
    afc0:	2e00      	cmp	r6, #0
    afc2:	d1f7      	bne.n	afb4 <bt_conn_prepare_events+0x3c>
    afc4:	f3bf 8f5b 	dmb	ish
    afc8:	0653      	lsls	r3, r2, #25
    afca:	d503      	bpl.n	afd4 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
    afcc:	4608      	mov	r0, r1
    afce:	f019 f8f2 	bl	241b6 <conn_cleanup>
		return -ENOTCONN;
    afd2:	e7e5      	b.n	afa0 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
    afd4:	7a8b      	ldrb	r3, [r1, #10]
    afd6:	2b07      	cmp	r3, #7
    afd8:	d1e2      	bne.n	afa0 <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
    afda:	4b0e      	ldr	r3, [pc, #56]	; (b014 <bt_conn_prepare_events+0x9c>)
    afdc:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	; 0xfc
    afe0:	2a00      	cmp	r2, #0
    afe2:	d0dd      	beq.n	afa0 <bt_conn_prepare_events+0x28>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    afe4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
	if (packets_waiting && !buffers_available) {
    afe8:	6b89      	ldr	r1, [r1, #56]	; 0x38
    afea:	b151      	cbz	r1, b002 <bt_conn_prepare_events+0x8a>
    afec:	b94a      	cbnz	r2, b002 <bt_conn_prepare_events+0x8a>
		k_poll_event_init(&events[0],
    afee:	f503 7380 	add.w	r3, r3, #256	; 0x100
    aff2:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
    aff4:	f01c fa3b 	bl	2746e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    aff8:	2301      	movs	r3, #1
    affa:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    affe:	2002      	movs	r0, #2
	return ev_count;
    b000:	e7cf      	b.n	afa2 <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
    b002:	4b05      	ldr	r3, [pc, #20]	; (b018 <bt_conn_prepare_events+0xa0>)
    b004:	2200      	movs	r2, #0
    b006:	2104      	movs	r1, #4
    b008:	e7f4      	b.n	aff4 <bt_conn_prepare_events+0x7c>
    b00a:	bf00      	nop
    b00c:	20000278 	.word	0x20000278
    b010:	20001b14 	.word	0x20001b14
    b014:	20000010 	.word	0x20000010
    b018:	20001a90 	.word	0x20001a90

0000b01c <bt_conn_lookup_handle>:
{
    b01c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    b01e:	2101      	movs	r1, #1
    b020:	4801      	ldr	r0, [pc, #4]	; (b028 <bt_conn_lookup_handle+0xc>)
    b022:	f019 b923 	b.w	2426c <conn_lookup_handle>
    b026:	bf00      	nop
    b028:	20001a58 	.word	0x20001a58

0000b02c <bt_conn_set_state>:
{
    b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    b030:	7a86      	ldrb	r6, [r0, #10]
    b032:	428e      	cmp	r6, r1
{
    b034:	af00      	add	r7, sp, #0
    b036:	4604      	mov	r4, r0
    b038:	460d      	mov	r5, r1
	if (conn->state == state) {
    b03a:	d11f      	bne.n	b07c <bt_conn_set_state+0x50>
		LOG_WRN("no transition %s", state2str(state));
    b03c:	4b7d      	ldr	r3, [pc, #500]	; (b234 <bt_conn_set_state+0x208>)
    b03e:	681b      	ldr	r3, [r3, #0]
    b040:	f013 0f06 	tst.w	r3, #6
    b044:	d067      	beq.n	b116 <bt_conn_set_state+0xea>
	switch (state) {
    b046:	2e08      	cmp	r6, #8
    b048:	bf96      	itet	ls
    b04a:	4b7b      	ldrls	r3, [pc, #492]	; (b238 <bt_conn_set_state+0x20c>)
		LOG_WRN("no transition %s", state2str(state));
    b04c:	4b7b      	ldrhi	r3, [pc, #492]	; (b23c <bt_conn_set_state+0x210>)
    b04e:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
    b052:	466c      	mov	r4, sp
    b054:	b08a      	sub	sp, #40	; 0x28
    b056:	466a      	mov	r2, sp
    b058:	4979      	ldr	r1, [pc, #484]	; (b240 <bt_conn_set_state+0x214>)
    b05a:	6151      	str	r1, [r2, #20]
    b05c:	4979      	ldr	r1, [pc, #484]	; (b244 <bt_conn_set_state+0x218>)
    b05e:	4875      	ldr	r0, [pc, #468]	; (b234 <bt_conn_set_state+0x208>)
    b060:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b064:	f240 3301 	movw	r3, #769	; 0x301
    b068:	8413      	strh	r3, [r2, #32]
    b06a:	4b77      	ldr	r3, [pc, #476]	; (b248 <bt_conn_set_state+0x21c>)
    b06c:	f842 3f10 	str.w	r3, [r2, #16]!
    b070:	f44f 5112 	mov.w	r1, #9344	; 0x2480
		LOG_WRN("no valid (%u) state was set", state);
    b074:	f019 f890 	bl	24198 <z_log_msg_static_create.constprop.0>
    b078:	46a5      	mov	sp, r4
    b07a:	e04c      	b.n	b116 <bt_conn_set_state+0xea>
	conn->state = state;
    b07c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    b07e:	b926      	cbnz	r6, b08a <bt_conn_set_state+0x5e>
		if (conn->type != BT_CONN_TYPE_ISO) {
    b080:	7883      	ldrb	r3, [r0, #2]
    b082:	2b08      	cmp	r3, #8
    b084:	d001      	beq.n	b08a <bt_conn_set_state+0x5e>
			bt_conn_ref(conn);
    b086:	f019 f8b9 	bl	241fc <bt_conn_ref>
	switch (conn->state) {
    b08a:	7aa3      	ldrb	r3, [r4, #10]
    b08c:	2b08      	cmp	r3, #8
    b08e:	f200 80c5 	bhi.w	b21c <bt_conn_set_state+0x1f0>
    b092:	e8df f003 	tbb	[pc, r3]
    b096:	0543      	.short	0x0543
    b098:	40404040 	.word	0x40404040
    b09c:	2540      	.short	0x2540
    b09e:	40          	.byte	0x40
    b09f:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
    b0a0:	4d6a      	ldr	r5, [pc, #424]	; (b24c <bt_conn_set_state+0x220>)
		tx->pending_no_cb = 0U;
    b0a2:	f04f 0800 	mov.w	r8, #0
	return NULL;
    b0a6:	f505 7680 	add.w	r6, r5, #256	; 0x100
	__asm__ volatile(
    b0aa:	f04f 0220 	mov.w	r2, #32
    b0ae:	f3ef 8311 	mrs	r3, BASEPRI
    b0b2:	f382 8812 	msr	BASEPRI_MAX, r2
    b0b6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    b0ba:	69e2      	ldr	r2, [r4, #28]
    b0bc:	2a00      	cmp	r2, #0
    b0be:	f000 8088 	beq.w	b1d2 <bt_conn_set_state+0x1a6>
			conn->pending_no_cb--;
    b0c2:	3a01      	subs	r2, #1
    b0c4:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
    b0c6:	f383 8811 	msr	BASEPRI, r3
    b0ca:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
    b0ce:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	return NULL;
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	bf14      	ite	ne
    b0d6:	4630      	movne	r0, r6
    b0d8:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    b0da:	f014 fe27 	bl	1fd2c <z_impl_k_sem_give>
}
    b0de:	e7e4      	b.n	b0aa <bt_conn_set_state+0x7e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b0e0:	78a3      	ldrb	r3, [r4, #2]
    b0e2:	2b04      	cmp	r3, #4
    b0e4:	d017      	beq.n	b116 <bt_conn_set_state+0xea>
	z_impl_k_queue_init(queue);
    b0e6:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b0ea:	f01b fd83 	bl	26bf4 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    b0ee:	4858      	ldr	r0, [pc, #352]	; (b250 <bt_conn_set_state+0x224>)
    b0f0:	2100      	movs	r1, #0
    b0f2:	f015 fe39 	bl	20d68 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    b0f6:	2300      	movs	r3, #0
	list->tail = NULL;
    b0f8:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b0fc:	78e3      	ldrb	r3, [r4, #3]
    b0fe:	2b01      	cmp	r3, #1
    b100:	d109      	bne.n	b116 <bt_conn_set_state+0xea>
			conn->le.conn_param_retry_countdown =
    b102:	2303      	movs	r3, #3
    b104:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    b108:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    b10c:	2300      	movs	r3, #0
    b10e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b112:	f015 f813 	bl	2013c <k_work_schedule>
}
    b116:	46bd      	mov	sp, r7
    b118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    b11c:	78a3      	ldrb	r3, [r4, #2]
    b11e:	2b04      	cmp	r3, #4
    b120:	d103      	bne.n	b12a <bt_conn_set_state+0xfe>
			bt_conn_unref(conn);
    b122:	4620      	mov	r0, r4
    b124:	f019 f886 	bl	24234 <bt_conn_unref>
			break;
    b128:	e7f5      	b.n	b116 <bt_conn_set_state+0xea>
		switch (old_state) {
    b12a:	2e08      	cmp	r6, #8
    b12c:	d8f3      	bhi.n	b116 <bt_conn_set_state+0xea>
    b12e:	a301      	add	r3, pc, #4	; (adr r3, b134 <bt_conn_set_state+0x108>)
    b130:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    b134:	0000b1ad 	.word	0x0000b1ad
    b138:	0000b159 	.word	0x0000b159
    b13c:	0000b19f 	.word	0x0000b19f
    b140:	0000b123 	.word	0x0000b123
    b144:	0000b123 	.word	0x0000b123
    b148:	0000b19f 	.word	0x0000b19f
    b14c:	0000b19f 	.word	0x0000b19f
    b150:	0000b117 	.word	0x0000b117
    b154:	0000b1ad 	.word	0x0000b1ad
			tx_notify(conn);
    b158:	4620      	mov	r0, r4
    b15a:	f7ff fc57 	bl	aa0c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    b15e:	78a3      	ldrb	r3, [r4, #2]
    b160:	2b01      	cmp	r3, #1
    b162:	d10a      	bne.n	b17a <bt_conn_set_state+0x14e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    b164:	f104 0558 	add.w	r5, r4, #88	; 0x58
    b168:	4628      	mov	r0, r5
    b16a:	f01b fe5b 	bl	26e24 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    b16e:	f010 0f0c 	tst.w	r0, #12
    b172:	d002      	beq.n	b17a <bt_conn_set_state+0x14e>
				k_work_cancel_delayable(&conn->deferred_work);
    b174:	4628      	mov	r0, r5
    b176:	f01b fe57 	bl	26e28 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b17a:	f3bf 8f5b 	dmb	ish
    b17e:	3404      	adds	r4, #4
    b180:	e854 3f00 	ldrex	r3, [r4]
    b184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b188:	e844 3200 	strex	r2, r3, [r4]
    b18c:	2a00      	cmp	r2, #0
    b18e:	d1f7      	bne.n	b180 <bt_conn_set_state+0x154>
    b190:	f3bf 8f5b 	dmb	ish
    b194:	2100      	movs	r1, #0
    b196:	482e      	ldr	r0, [pc, #184]	; (b250 <bt_conn_set_state+0x224>)
    b198:	f015 fde6 	bl	20d68 <z_impl_k_poll_signal_raise>
    b19c:	e7bb      	b.n	b116 <bt_conn_set_state+0xea>
			if (conn->err) {
    b19e:	7a63      	ldrb	r3, [r4, #9]
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d0be      	beq.n	b122 <bt_conn_set_state+0xf6>
				notify_connected(conn);
    b1a4:	4620      	mov	r0, r4
    b1a6:	f7ff fbf3 	bl	a990 <notify_connected>
    b1aa:	e7ba      	b.n	b122 <bt_conn_set_state+0xf6>
			LOG_WRN("Invalid (%u) old state", state);
    b1ac:	4821      	ldr	r0, [pc, #132]	; (b234 <bt_conn_set_state+0x208>)
    b1ae:	6803      	ldr	r3, [r0, #0]
    b1b0:	f013 0f06 	tst.w	r3, #6
    b1b4:	d0af      	beq.n	b116 <bt_conn_set_state+0xea>
    b1b6:	466c      	mov	r4, sp
    b1b8:	b088      	sub	sp, #32
    b1ba:	466a      	mov	r2, sp
    b1bc:	4b25      	ldr	r3, [pc, #148]	; (b254 <bt_conn_set_state+0x228>)
		LOG_WRN("no valid (%u) state was set", state);
    b1be:	6153      	str	r3, [r2, #20]
    b1c0:	4b20      	ldr	r3, [pc, #128]	; (b244 <bt_conn_set_state+0x218>)
    b1c2:	e9c2 3506 	strd	r3, r5, [r2, #24]
    b1c6:	2304      	movs	r3, #4
    b1c8:	f842 3f10 	str.w	r3, [r2, #16]!
    b1cc:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    b1d0:	e750      	b.n	b074 <bt_conn_set_state+0x48>
	return list->head;
    b1d2:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    b1d4:	b921      	cbnz	r1, b1e0 <bt_conn_set_state+0x1b4>
    b1d6:	f383 8811 	msr	BASEPRI, r3
    b1da:	f3bf 8f6f 	isb	sy
		if (!node) {
    b1de:	e79a      	b.n	b116 <bt_conn_set_state+0xea>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b1e0:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    b1e2:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    b1e4:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b1e6:	4281      	cmp	r1, r0
	list->tail = node;
    b1e8:	bf08      	it	eq
    b1ea:	61a2      	streq	r2, [r4, #24]
    b1ec:	f383 8811 	msr	BASEPRI, r3
    b1f0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    b1f4:	f04f 0220 	mov.w	r2, #32
    b1f8:	f3ef 8311 	mrs	r3, BASEPRI
    b1fc:	f382 8812 	msr	BASEPRI_MAX, r2
    b200:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    b204:	68ca      	ldr	r2, [r1, #12]
    b206:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    b208:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
    b20c:	f383 8811 	msr	BASEPRI, r3
    b210:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    b214:	4620      	mov	r0, r4
    b216:	f7ff fc29 	bl	aa6c <conn_tx_destroy>
    b21a:	e758      	b.n	b0ce <bt_conn_set_state+0xa2>
		LOG_WRN("no valid (%u) state was set", state);
    b21c:	4805      	ldr	r0, [pc, #20]	; (b234 <bt_conn_set_state+0x208>)
    b21e:	6803      	ldr	r3, [r0, #0]
    b220:	f013 0f06 	tst.w	r3, #6
    b224:	f43f af77 	beq.w	b116 <bt_conn_set_state+0xea>
    b228:	466c      	mov	r4, sp
    b22a:	b088      	sub	sp, #32
    b22c:	466a      	mov	r2, sp
    b22e:	4b0a      	ldr	r3, [pc, #40]	; (b258 <bt_conn_set_state+0x22c>)
    b230:	e7c5      	b.n	b1be <bt_conn_set_state+0x192>
    b232:	bf00      	nop
    b234:	20000ae4 	.word	0x20000ae4
    b238:	00028364 	.word	0x00028364
    b23c:	0002c76c 	.word	0x0002c76c
    b240:	0002c776 	.word	0x0002c776
    b244:	0002c91a 	.word	0x0002c91a
    b248:	01000004 	.word	0x01000004
    b24c:	20000010 	.word	0x20000010
    b250:	20000278 	.word	0x20000278
    b254:	0002c78b 	.word	0x0002c78b
    b258:	0002c7a6 	.word	0x0002c7a6

0000b25c <bt_conn_index>:
		index = conn - acl_conns;
    b25c:	4b03      	ldr	r3, [pc, #12]	; (b26c <bt_conn_index+0x10>)
    b25e:	1ac0      	subs	r0, r0, r3
    b260:	4b03      	ldr	r3, [pc, #12]	; (b270 <bt_conn_index+0x14>)
    b262:	1180      	asrs	r0, r0, #6
    b264:	4358      	muls	r0, r3
}
    b266:	b2c0      	uxtb	r0, r0
    b268:	4770      	bx	lr
    b26a:	bf00      	nop
    b26c:	20001a58 	.word	0x20001a58
    b270:	aaaaaaab 	.word	0xaaaaaaab

0000b274 <bt_conn_create_pdu_timeout>:
{
    b274:	b538      	push	{r3, r4, r5, lr}
    b276:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    b278:	4908      	ldr	r1, [pc, #32]	; (b29c <bt_conn_create_pdu_timeout+0x28>)
    b27a:	2800      	cmp	r0, #0
    b27c:	bf08      	it	eq
    b27e:	4608      	moveq	r0, r1
    b280:	f01a f972 	bl	25568 <net_buf_alloc_fixed>
	if (!buf) {
    b284:	4604      	mov	r4, r0
    b286:	b918      	cbnz	r0, b290 <bt_conn_create_pdu_timeout+0x1c>
}
    b288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b28c:	f7ff bb9e 	b.w	a9cc <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
    b290:	1d29      	adds	r1, r5, #4
    b292:	300c      	adds	r0, #12
    b294:	f01a f975 	bl	25582 <net_buf_simple_reserve>
    b298:	4620      	mov	r0, r4
    b29a:	bd38      	pop	{r3, r4, r5, pc}
    b29c:	20000c0c 	.word	0x20000c0c

0000b2a0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b2a2:	f3bf 8f5b 	dmb	ish
    b2a6:	6842      	ldr	r2, [r0, #4]
    b2a8:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    b2ac:	0592      	lsls	r2, r2, #22
{
    b2ae:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    b2b0:	f100 0304 	add.w	r3, r0, #4
    b2b4:	d519      	bpl.n	b2ea <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    b2b6:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    b2ba:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    b2be:	4291      	cmp	r1, r2
    b2c0:	d813      	bhi.n	b2ea <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    b2c2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    b2c6:	4291      	cmp	r1, r2
    b2c8:	d30f      	bcc.n	b2ea <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    b2ca:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    b2ce:	4291      	cmp	r1, r2
    b2d0:	d10b      	bne.n	b2ea <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b2d2:	f3bf 8f5b 	dmb	ish
    b2d6:	e853 1f00 	ldrex	r1, [r3]
    b2da:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    b2de:	e843 1200 	strex	r2, r1, [r3]
    b2e2:	2a00      	cmp	r2, #0
    b2e4:	d1f7      	bne.n	b2d6 <notify_le_param_updated+0x36>
    b2e6:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    b2ea:	4b10      	ldr	r3, [pc, #64]	; (b32c <notify_le_param_updated+0x8c>)
    b2ec:	681d      	ldr	r5, [r3, #0]
    b2ee:	b925      	cbnz	r5, b2fa <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b2f0:	4d0f      	ldr	r5, [pc, #60]	; (b330 <notify_le_param_updated+0x90>)
    b2f2:	4f10      	ldr	r7, [pc, #64]	; (b334 <notify_le_param_updated+0x94>)
    b2f4:	42bd      	cmp	r5, r7
    b2f6:	d30c      	bcc.n	b312 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    b2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    b2fa:	68ee      	ldr	r6, [r5, #12]
    b2fc:	b13e      	cbz	r6, b30e <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    b2fe:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    b302:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    b306:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    b30a:	4620      	mov	r0, r4
    b30c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    b30e:	692d      	ldr	r5, [r5, #16]
    b310:	e7ed      	b.n	b2ee <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    b312:	68ee      	ldr	r6, [r5, #12]
    b314:	b13e      	cbz	r6, b326 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    b316:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    b31a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    b31e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    b322:	4620      	mov	r0, r4
    b324:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b326:	3514      	adds	r5, #20
    b328:	e7e4      	b.n	b2f4 <notify_le_param_updated+0x54>
    b32a:	bf00      	nop
    b32c:	200025c0 	.word	0x200025c0
    b330:	00027910 	.word	0x00027910
    b334:	00027910 	.word	0x00027910

0000b338 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    b338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b33c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    b33e:	4608      	mov	r0, r1
{
    b340:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    b342:	f018 fd95 	bl	23e70 <bt_le_conn_params_valid>
    b346:	4605      	mov	r5, r0
    b348:	b918      	cbnz	r0, b352 <le_param_req+0x1a>
		return false;
    b34a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    b34c:	4628      	mov	r0, r5
    b34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    b352:	4b13      	ldr	r3, [pc, #76]	; (b3a0 <le_param_req+0x68>)
    b354:	681e      	ldr	r6, [r3, #0]
    b356:	b946      	cbnz	r6, b36a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b358:	4e12      	ldr	r6, [pc, #72]	; (b3a4 <le_param_req+0x6c>)
    b35a:	f8df 804c 	ldr.w	r8, [pc, #76]	; b3a8 <le_param_req+0x70>
    b35e:	4546      	cmp	r6, r8
    b360:	d2f4      	bcs.n	b34c <le_param_req+0x14>
		if (!cb->le_param_req) {
    b362:	68b3      	ldr	r3, [r6, #8]
    b364:	b983      	cbnz	r3, b388 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b366:	3614      	adds	r6, #20
    b368:	e7f9      	b.n	b35e <le_param_req+0x26>
		if (!cb->le_param_req) {
    b36a:	68b3      	ldr	r3, [r6, #8]
    b36c:	b90b      	cbnz	r3, b372 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    b36e:	6936      	ldr	r6, [r6, #16]
    b370:	e7f1      	b.n	b356 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    b372:	4621      	mov	r1, r4
    b374:	4638      	mov	r0, r7
    b376:	4798      	blx	r3
    b378:	2800      	cmp	r0, #0
    b37a:	d0e6      	beq.n	b34a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    b37c:	4620      	mov	r0, r4
    b37e:	f018 fd77 	bl	23e70 <bt_le_conn_params_valid>
    b382:	2800      	cmp	r0, #0
    b384:	d1f3      	bne.n	b36e <le_param_req+0x36>
    b386:	e7e0      	b.n	b34a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    b388:	4621      	mov	r1, r4
    b38a:	4638      	mov	r0, r7
    b38c:	4798      	blx	r3
    b38e:	2800      	cmp	r0, #0
    b390:	d0db      	beq.n	b34a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    b392:	4620      	mov	r0, r4
    b394:	f018 fd6c 	bl	23e70 <bt_le_conn_params_valid>
    b398:	2800      	cmp	r0, #0
    b39a:	d1e4      	bne.n	b366 <le_param_req+0x2e>
    b39c:	e7d5      	b.n	b34a <le_param_req+0x12>
    b39e:	bf00      	nop
    b3a0:	200025c0 	.word	0x200025c0
    b3a4:	00027910 	.word	0x00027910
    b3a8:	00027910 	.word	0x00027910

0000b3ac <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    b3ac:	4b02      	ldr	r3, [pc, #8]	; (b3b8 <bt_conn_cb_register+0xc>)
    b3ae:	681a      	ldr	r2, [r3, #0]
    b3b0:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    b3b2:	6018      	str	r0, [r3, #0]
}
    b3b4:	4770      	bx	lr
    b3b6:	bf00      	nop
    b3b8:	200025c0 	.word	0x200025c0

0000b3bc <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    b3bc:	b570      	push	{r4, r5, r6, lr}
    b3be:	4606      	mov	r6, r0
    b3c0:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    b3c2:	4809      	ldr	r0, [pc, #36]	; (b3e8 <bt_conn_add_le+0x2c>)
    b3c4:	2101      	movs	r1, #1
    b3c6:	f7ff fc5b 	bl	ac80 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    b3ca:	4604      	mov	r4, r0
    b3cc:	b150      	cbz	r0, b3e4 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    b3ce:	7206      	strb	r6, [r0, #8]
    b3d0:	2207      	movs	r2, #7
    b3d2:	4629      	mov	r1, r5
    b3d4:	3088      	adds	r0, #136	; 0x88
    b3d6:	f018 fc19 	bl	23c0c <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    b3da:	2301      	movs	r3, #1
    b3dc:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    b3de:	4b03      	ldr	r3, [pc, #12]	; (b3ec <bt_conn_add_le+0x30>)
    b3e0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    b3e4:	4620      	mov	r0, r4
    b3e6:	bd70      	pop	{r4, r5, r6, pc}
    b3e8:	20001a58 	.word	0x20001a58
    b3ec:	00280018 	.word	0x00280018

0000b3f0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    b3f0:	b570      	push	{r4, r5, r6, lr}
    b3f2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b3f4:	480a      	ldr	r0, [pc, #40]	; (b420 <bt_conn_lookup_addr_le+0x30>)
{
    b3f6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b3f8:	f018 ff00 	bl	241fc <bt_conn_ref>
    b3fc:	4604      	mov	r4, r0

		if (!conn) {
    b3fe:	b120      	cbz	r0, b40a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b400:	7883      	ldrb	r3, [r0, #2]
    b402:	2b01      	cmp	r3, #1
    b404:	d004      	beq.n	b410 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
    b406:	f018 ff15 	bl	24234 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    b40a:	2400      	movs	r4, #0
}
    b40c:	4620      	mov	r0, r4
    b40e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    b410:	4632      	mov	r2, r6
    b412:	4629      	mov	r1, r5
    b414:	f018 ff57 	bl	242c6 <bt_conn_is_peer_addr_le>
    b418:	2800      	cmp	r0, #0
    b41a:	d1f7      	bne.n	b40c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    b41c:	4620      	mov	r0, r4
    b41e:	e7f2      	b.n	b406 <bt_conn_lookup_addr_le+0x16>
    b420:	20001a58 	.word	0x20001a58

0000b424 <bt_conn_exists_le>:
{
    b424:	b5b0      	push	{r4, r5, r7, lr}
    b426:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    b428:	f7ff ffe2 	bl	b3f0 <bt_conn_lookup_addr_le>
	if (conn) {
    b42c:	4604      	mov	r4, r0
    b42e:	b318      	cbz	r0, b478 <bt_conn_exists_le+0x54>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
    b430:	4b12      	ldr	r3, [pc, #72]	; (b47c <bt_conn_exists_le+0x58>)
    b432:	681b      	ldr	r3, [r3, #0]
    b434:	f013 0f06 	tst.w	r3, #6
    b438:	d01a      	beq.n	b470 <bt_conn_exists_le+0x4c>
    b43a:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
    b43c:	2b08      	cmp	r3, #8
    b43e:	bf96      	itet	ls
    b440:	4a0f      	ldrls	r2, [pc, #60]	; (b480 <bt_conn_exists_le+0x5c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
    b442:	4b10      	ldrhi	r3, [pc, #64]	; (b484 <bt_conn_exists_le+0x60>)
    b444:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    b448:	466d      	mov	r5, sp
    b44a:	b08a      	sub	sp, #40	; 0x28
    b44c:	466a      	mov	r2, sp
    b44e:	490e      	ldr	r1, [pc, #56]	; (b488 <bt_conn_exists_le+0x64>)
    b450:	6151      	str	r1, [r2, #20]
    b452:	490e      	ldr	r1, [pc, #56]	; (b48c <bt_conn_exists_le+0x68>)
    b454:	4809      	ldr	r0, [pc, #36]	; (b47c <bt_conn_exists_le+0x58>)
    b456:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b45a:	f240 3301 	movw	r3, #769	; 0x301
    b45e:	8413      	strh	r3, [r2, #32]
    b460:	4b0b      	ldr	r3, [pc, #44]	; (b490 <bt_conn_exists_le+0x6c>)
    b462:	f842 3f10 	str.w	r3, [r2, #16]!
    b466:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    b46a:	f018 fe95 	bl	24198 <z_log_msg_static_create.constprop.0>
    b46e:	46ad      	mov	sp, r5
		bt_conn_unref(conn);
    b470:	4620      	mov	r0, r4
    b472:	f018 fedf 	bl	24234 <bt_conn_unref>
		return true;
    b476:	2001      	movs	r0, #1
}
    b478:	46bd      	mov	sp, r7
    b47a:	bdb0      	pop	{r4, r5, r7, pc}
    b47c:	20000ae4 	.word	0x20000ae4
    b480:	00028364 	.word	0x00028364
    b484:	0002c76c 	.word	0x0002c76c
    b488:	0002c7c6 	.word	0x0002c7c6
    b48c:	0002c8ed 	.word	0x0002c8ed
    b490:	01000004 	.word	0x01000004

0000b494 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    b494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b496:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b498:	480e      	ldr	r0, [pc, #56]	; (b4d4 <bt_conn_lookup_state_le+0x40>)
{
    b49a:	460e      	mov	r6, r1
    b49c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b49e:	f018 fead 	bl	241fc <bt_conn_ref>

		if (!conn) {
    b4a2:	4604      	mov	r4, r0
    b4a4:	b120      	cbz	r0, b4b0 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b4a6:	7883      	ldrb	r3, [r0, #2]
    b4a8:	2b01      	cmp	r3, #1
    b4aa:	d003      	beq.n	b4b4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    b4ac:	f018 fec2 	bl	24234 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    b4b0:	2400      	movs	r4, #0
    b4b2:	e00d      	b.n	b4d0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    b4b4:	b136      	cbz	r6, b4c4 <bt_conn_lookup_state_le+0x30>
    b4b6:	4632      	mov	r2, r6
    b4b8:	4629      	mov	r1, r5
    b4ba:	f018 ff04 	bl	242c6 <bt_conn_is_peer_addr_le>
    b4be:	b908      	cbnz	r0, b4c4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    b4c0:	4620      	mov	r0, r4
    b4c2:	e7f3      	b.n	b4ac <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    b4c4:	7aa3      	ldrb	r3, [r4, #10]
    b4c6:	42bb      	cmp	r3, r7
    b4c8:	d1fa      	bne.n	b4c0 <bt_conn_lookup_state_le+0x2c>
    b4ca:	7a23      	ldrb	r3, [r4, #8]
    b4cc:	42ab      	cmp	r3, r5
    b4ce:	d1f7      	bne.n	b4c0 <bt_conn_lookup_state_le+0x2c>
}
    b4d0:	4620      	mov	r0, r4
    b4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b4d4:	20001a58 	.word	0x20001a58

0000b4d8 <send_conn_le_param_update>:
{
    b4d8:	b538      	push	{r3, r4, r5, lr}
    b4da:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    b4dc:	4608      	mov	r0, r1
{
    b4de:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b4e0:	f018 fcc6 	bl	23e70 <bt_le_conn_params_valid>
    b4e4:	b348      	cbz	r0, b53a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b4e6:	4b16      	ldr	r3, [pc, #88]	; (b540 <send_conn_le_param_update+0x68>)
    b4e8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    b4ec:	0799      	lsls	r1, r3, #30
    b4ee:	d407      	bmi.n	b500 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    b4f0:	78e3      	ldrb	r3, [r4, #3]
    b4f2:	b183      	cbz	r3, b516 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    b4f4:	4629      	mov	r1, r5
    b4f6:	4620      	mov	r0, r4
}
    b4f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    b4fc:	f000 bb04 	b.w	bb08 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b500:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    b504:	079a      	lsls	r2, r3, #30
    b506:	d5f3      	bpl.n	b4f0 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b508:	f3bf 8f5b 	dmb	ish
    b50c:	6863      	ldr	r3, [r4, #4]
    b50e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    b512:	055b      	lsls	r3, r3, #21
    b514:	d4ec      	bmi.n	b4f0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    b516:	4629      	mov	r1, r5
    b518:	4620      	mov	r0, r4
    b51a:	f018 fef4 	bl	24306 <bt_conn_le_conn_update>
		if (rc == 0) {
    b51e:	b958      	cbnz	r0, b538 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    b520:	882b      	ldrh	r3, [r5, #0]
    b522:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    b526:	886b      	ldrh	r3, [r5, #2]
    b528:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    b52c:	88ab      	ldrh	r3, [r5, #4]
    b52e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    b532:	88eb      	ldrh	r3, [r5, #6]
    b534:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    b538:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b53a:	f06f 0015 	mvn.w	r0, #21
    b53e:	e7fb      	b.n	b538 <send_conn_le_param_update+0x60>
    b540:	20000010 	.word	0x20000010

0000b544 <deferred_work>:
{
    b544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b548:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
    b54a:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    b54e:	af00      	add	r7, sp, #0
    b550:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    b552:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    b556:	bb0b      	cbnz	r3, b59c <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
    b558:	4630      	mov	r0, r6
    b55a:	f018 ff31 	bl	243c0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    b55e:	4b46      	ldr	r3, [pc, #280]	; (b678 <deferred_work+0x134>)
    b560:	681d      	ldr	r5, [r3, #0]
    b562:	b95d      	cbnz	r5, b57c <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b564:	4d45      	ldr	r5, [pc, #276]	; (b67c <deferred_work+0x138>)
    b566:	f8df 8118 	ldr.w	r8, [pc, #280]	; b680 <deferred_work+0x13c>
    b56a:	4545      	cmp	r5, r8
    b56c:	d30e      	bcc.n	b58c <deferred_work+0x48>
		bt_conn_unref(conn);
    b56e:	4630      	mov	r0, r6
    b570:	f018 fe60 	bl	24234 <bt_conn_unref>
}
    b574:	3708      	adds	r7, #8
    b576:	46bd      	mov	sp, r7
    b578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
    b57c:	686b      	ldr	r3, [r5, #4]
    b57e:	b11b      	cbz	r3, b588 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
    b580:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    b584:	4630      	mov	r0, r6
    b586:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b588:	692d      	ldr	r5, [r5, #16]
    b58a:	e7ea      	b.n	b562 <deferred_work+0x1e>
		if (cb->disconnected) {
    b58c:	686b      	ldr	r3, [r5, #4]
    b58e:	b11b      	cbz	r3, b598 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
    b590:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    b594:	4630      	mov	r0, r6
    b596:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b598:	3514      	adds	r5, #20
    b59a:	e7e6      	b.n	b56a <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
    b59c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    b5a0:	2b01      	cmp	r3, #1
    b5a2:	d1e7      	bne.n	b574 <deferred_work+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b5a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    b5a8:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    b5ac:	e855 3f00 	ldrex	r3, [r5]
    b5b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    b5b4:	e845 2100 	strex	r1, r2, [r5]
    b5b8:	2900      	cmp	r1, #0
    b5ba:	d1f7      	bne.n	b5ac <deferred_work+0x68>
    b5bc:	f3bf 8f5b 	dmb	ish
    b5c0:	0599      	lsls	r1, r3, #22
    b5c2:	d538      	bpl.n	b636 <deferred_work+0xf2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    b5c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b5c6:	603b      	str	r3, [r7, #0]
    b5c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b5ca:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
    b5cc:	4639      	mov	r1, r7
    b5ce:	4630      	mov	r0, r6
    b5d0:	f7ff ff82 	bl	b4d8 <send_conn_le_param_update>
		if (!err) {
    b5d4:	4603      	mov	r3, r0
    b5d6:	b9c0      	cbnz	r0, b60a <deferred_work+0xc6>
    b5d8:	f3bf 8f5b 	dmb	ish
    b5dc:	e855 3f00 	ldrex	r3, [r5]
    b5e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b5e4:	e845 3200 	strex	r2, r3, [r5]
    b5e8:	2a00      	cmp	r2, #0
    b5ea:	d1f7      	bne.n	b5dc <deferred_work+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5ec:	f3bf 8f5b 	dmb	ish
    b5f0:	f3bf 8f5b 	dmb	ish
    b5f4:	e855 3f00 	ldrex	r3, [r5]
    b5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b5fc:	e845 3200 	strex	r2, r3, [r5]
    b600:	2a00      	cmp	r2, #0
    b602:	d1f7      	bne.n	b5f4 <deferred_work+0xb0>
    b604:	f3bf 8f5b 	dmb	ish
    b608:	e7b4      	b.n	b574 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
    b60a:	481e      	ldr	r0, [pc, #120]	; (b684 <deferred_work+0x140>)
    b60c:	6802      	ldr	r2, [r0, #0]
    b60e:	f012 0f06 	tst.w	r2, #6
    b612:	d0ed      	beq.n	b5f0 <deferred_work+0xac>
    b614:	466c      	mov	r4, sp
    b616:	b088      	sub	sp, #32
    b618:	466a      	mov	r2, sp
    b61a:	491b      	ldr	r1, [pc, #108]	; (b688 <deferred_work+0x144>)
			LOG_WRN("Send auto LE param update failed (err %d)",
    b61c:	6151      	str	r1, [r2, #20]
    b61e:	491b      	ldr	r1, [pc, #108]	; (b68c <deferred_work+0x148>)
    b620:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b624:	2304      	movs	r3, #4
    b626:	f842 3f10 	str.w	r3, [r2, #16]!
    b62a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    b62e:	f018 fdb3 	bl	24198 <z_log_msg_static_create.constprop.0>
    b632:	46a5      	mov	sp, r4
    b634:	e7dc      	b.n	b5f0 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(
    b636:	4a16      	ldr	r2, [pc, #88]	; (b690 <deferred_work+0x14c>)
    b638:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    b63c:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
    b640:	4639      	mov	r1, r7
    b642:	4630      	mov	r0, r6
    b644:	f7ff ff48 	bl	b4d8 <send_conn_le_param_update>
		if (!err) {
    b648:	4603      	mov	r3, r0
    b64a:	b950      	cbnz	r0, b662 <deferred_work+0x11e>
    b64c:	f3bf 8f5b 	dmb	ish
    b650:	e855 3f00 	ldrex	r3, [r5]
    b654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b658:	e845 3200 	strex	r2, r3, [r5]
    b65c:	2a00      	cmp	r2, #0
    b65e:	d0c5      	beq.n	b5ec <deferred_work+0xa8>
    b660:	e7f6      	b.n	b650 <deferred_work+0x10c>
			LOG_WRN("Send auto LE param update failed (err %d)",
    b662:	4808      	ldr	r0, [pc, #32]	; (b684 <deferred_work+0x140>)
    b664:	6802      	ldr	r2, [r0, #0]
    b666:	f012 0f06 	tst.w	r2, #6
    b66a:	d0c1      	beq.n	b5f0 <deferred_work+0xac>
    b66c:	466c      	mov	r4, sp
    b66e:	b088      	sub	sp, #32
    b670:	466a      	mov	r2, sp
    b672:	4908      	ldr	r1, [pc, #32]	; (b694 <deferred_work+0x150>)
    b674:	e7d2      	b.n	b61c <deferred_work+0xd8>
    b676:	bf00      	nop
    b678:	200025c0 	.word	0x200025c0
    b67c:	00027910 	.word	0x00027910
    b680:	00027910 	.word	0x00027910
    b684:	20000ae4 	.word	0x20000ae4
    b688:	0002c7ed 	.word	0x0002c7ed
    b68c:	0002c955 	.word	0x0002c955
    b690:	00280018 	.word	0x00280018
    b694:	0002c816 	.word	0x0002c816

0000b698 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    b698:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    b69a:	4801      	ldr	r0, [pc, #4]	; (b6a0 <bt_conn_create_frag_timeout+0x8>)
    b69c:	f7ff bdea 	b.w	b274 <bt_conn_create_pdu_timeout>
    b6a0:	20000c64 	.word	0x20000c64

0000b6a4 <bt_conn_process_tx>:
{
    b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b6a8:	7a83      	ldrb	r3, [r0, #10]
{
    b6aa:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    b6ac:	b993      	cbnz	r3, b6d4 <bt_conn_process_tx+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b6ae:	f3bf 8f5b 	dmb	ish
    b6b2:	1d03      	adds	r3, r0, #4
    b6b4:	e853 2f00 	ldrex	r2, [r3]
    b6b8:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    b6bc:	e843 1400 	strex	r4, r1, [r3]
    b6c0:	2c00      	cmp	r4, #0
    b6c2:	d1f7      	bne.n	b6b4 <bt_conn_process_tx+0x10>
    b6c4:	f3bf 8f5b 	dmb	ish
    b6c8:	0653      	lsls	r3, r2, #25
    b6ca:	d503      	bpl.n	b6d4 <bt_conn_process_tx+0x30>
}
    b6cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
    b6d0:	f018 bd71 	b.w	241b6 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
    b6d4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    b6d8:	f01b face 	bl	26c78 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
    b6dc:	4604      	mov	r4, r0
    b6de:	b960      	cbnz	r0, b6fa <bt_conn_process_tx+0x56>
    b6e0:	4a33      	ldr	r2, [pc, #204]	; (b7b0 <bt_conn_process_tx+0x10c>)
    b6e2:	4934      	ldr	r1, [pc, #208]	; (b7b4 <bt_conn_process_tx+0x110>)
    b6e4:	4834      	ldr	r0, [pc, #208]	; (b7b8 <bt_conn_process_tx+0x114>)
    b6e6:	f240 3369 	movw	r3, #873	; 0x369
    b6ea:	f016 f82f 	bl	2174c <assert_print>
    b6ee:	4040      	eors	r0, r0
    b6f0:	f380 8811 	msr	BASEPRI, r0
    b6f4:	f04f 0003 	mov.w	r0, #3
    b6f8:	df02      	svc	2
	buf = net_buf_ref(buf);
    b6fa:	4620      	mov	r0, r4
    b6fc:	f019 ff47 	bl	2558e <net_buf_ref>
	return bt_dev.le.acl_mtu;
    b700:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b7bc <bt_conn_process_tx+0x118>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
    b704:	8a02      	ldrh	r2, [r0, #16]
    b706:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
    b70a:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
    b70c:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
    b70e:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
    b710:	d807      	bhi.n	b722 <bt_conn_process_tx+0x7e>
    b712:	b932      	cbnz	r2, b722 <bt_conn_process_tx+0x7e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
    b714:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
    b716:	4621      	mov	r1, r4
    b718:	4628      	mov	r0, r5
    b71a:	f7ff f9bd 	bl	aa98 <send_frag>
    b71e:	4606      	mov	r6, r0
    b720:	e030      	b.n	b784 <bt_conn_process_tx+0xe0>
	if (tx_data(buf)->is_cont) {
    b722:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
    b724:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
    b728:	8a22      	ldrh	r2, [r4, #16]
    b72a:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
    b72e:	429a      	cmp	r2, r3
    b730:	d804      	bhi.n	b73c <bt_conn_process_tx+0x98>
	tx_data(buf)->is_cont = true;
    b732:	2301      	movs	r3, #1
    b734:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
    b736:	2200      	movs	r2, #0
    b738:	2303      	movs	r3, #3
    b73a:	e7ec      	b.n	b716 <bt_conn_process_tx+0x72>
		frag = bt_conn_create_frag(0);
    b73c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b744:	2000      	movs	r0, #0
    b746:	f7ff ffa7 	bl	b698 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    b74a:	7aab      	ldrb	r3, [r5, #10]
    b74c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    b74e:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
    b750:	d006      	beq.n	b760 <bt_conn_process_tx+0xbc>
		net_buf_unref(frag);
    b752:	f00f fb1b 	bl	1ad8c <net_buf_unref>
	net_buf_unref(buf);
    b756:	4620      	mov	r0, r4
}
    b758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
    b75c:	f00f bb16 	b.w	1ad8c <net_buf_unref>
	tx_data(frag)->tx = NULL;
    b760:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
    b764:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
    b768:	4602      	mov	r2, r0
    b76a:	463b      	mov	r3, r7
    b76c:	4621      	mov	r1, r4
    b76e:	4628      	mov	r0, r5
    b770:	f7ff f992 	bl	aa98 <send_frag>
		if (err) {
    b774:	4606      	mov	r6, r0
    b776:	b1b8      	cbz	r0, b7a8 <bt_conn_process_tx+0x104>
			tx_data(buf)->is_cont = flags != FRAG_START;
    b778:	f007 0701 	and.w	r7, r7, #1
    b77c:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
    b77e:	4640      	mov	r0, r8
    b780:	f00f fb04 	bl	1ad8c <net_buf_unref>
	net_buf_unref(buf);
    b784:	4620      	mov	r0, r4
    b786:	f00f fb01 	bl	1ad8c <net_buf_unref>
	if (err  == -EIO) {
    b78a:	3605      	adds	r6, #5
    b78c:	d10e      	bne.n	b7ac <bt_conn_process_tx+0x108>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    b78e:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
    b790:	2300      	movs	r3, #0
    b792:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
    b794:	4620      	mov	r0, r4
    b796:	f00f faf9 	bl	1ad8c <net_buf_unref>
		if (tx) {
    b79a:	b13e      	cbz	r6, b7ac <bt_conn_process_tx+0x108>
			conn_tx_destroy(conn, tx);
    b79c:	4631      	mov	r1, r6
    b79e:	4628      	mov	r0, r5
}
    b7a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
    b7a4:	f7ff b962 	b.w	aa6c <conn_tx_destroy>
		flags = FRAG_CONT;
    b7a8:	2701      	movs	r7, #1
    b7aa:	e7bd      	b.n	b728 <bt_conn_process_tx+0x84>
}
    b7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7b0:	0002c844 	.word	0x0002c844
    b7b4:	0002d0b4 	.word	0x0002d0b4
    b7b8:	0002bc34 	.word	0x0002bc34
    b7bc:	20000010 	.word	0x20000010

0000b7c0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    b7c0:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
    b7c2:	480c      	ldr	r0, [pc, #48]	; (b7f4 <bt_conn_init+0x34>)
    b7c4:	f01b fa16 	bl	26bf4 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    b7c8:	490b      	ldr	r1, [pc, #44]	; (b7f8 <bt_conn_init+0x38>)
    b7ca:	480a      	ldr	r0, [pc, #40]	; (b7f4 <bt_conn_init+0x34>)
    b7cc:	f01b fa3f 	bl	26c4e <k_queue_append>
    b7d0:	490a      	ldr	r1, [pc, #40]	; (b7fc <bt_conn_init+0x3c>)
    b7d2:	4808      	ldr	r0, [pc, #32]	; (b7f4 <bt_conn_init+0x34>)
    b7d4:	f01b fa3b 	bl	26c4e <k_queue_append>
    b7d8:	4909      	ldr	r1, [pc, #36]	; (b800 <bt_conn_init+0x40>)
    b7da:	4806      	ldr	r0, [pc, #24]	; (b7f4 <bt_conn_init+0x34>)
    b7dc:	f01b fa37 	bl	26c4e <k_queue_append>
	}

	bt_att_init();
    b7e0:	f001 f998 	bl	cb14 <bt_att_init>

	err = bt_smp_init();
    b7e4:	f019 febd 	bl	25562 <bt_smp_init>
	if (err) {
    b7e8:	4604      	mov	r4, r0
    b7ea:	b908      	cbnz	r0, b7f0 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    b7ec:	f018 fe26 	bl	2443c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    b7f0:	4620      	mov	r0, r4
    b7f2:	bd10      	pop	{r4, pc}
    b7f4:	20000bf4 	.word	0x20000bf4
    b7f8:	20002590 	.word	0x20002590
    b7fc:	200025a0 	.word	0x200025a0
    b800:	200025b0 	.word	0x200025b0

0000b804 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b804:	b598      	push	{r3, r4, r7, lr}
    b806:	4603      	mov	r3, r0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
    b808:	480b      	ldr	r0, [pc, #44]	; (b838 <l2cap_create_le_sig_pdu.part.0+0x34>)
    b80a:	6802      	ldr	r2, [r0, #0]
    b80c:	0752      	lsls	r2, r2, #29
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b80e:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
    b810:	d00f      	beq.n	b832 <l2cap_create_le_sig_pdu.part.0+0x2e>
    b812:	466c      	mov	r4, sp
    b814:	b088      	sub	sp, #32
    b816:	466a      	mov	r2, sp
    b818:	4908      	ldr	r1, [pc, #32]	; (b83c <l2cap_create_le_sig_pdu.part.0+0x38>)
    b81a:	6151      	str	r1, [r2, #20]
    b81c:	4908      	ldr	r1, [pc, #32]	; (b840 <l2cap_create_le_sig_pdu.part.0+0x3c>)
    b81e:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b822:	2304      	movs	r3, #4
    b824:	f842 3f10 	str.w	r3, [r2, #16]!
    b828:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b82c:	f018 fd94 	bl	24358 <z_log_msg_static_create.constprop.0>
    b830:	46a5      	mov	sp, r4
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
    b832:	2000      	movs	r0, #0
    b834:	46bd      	mov	sp, r7
    b836:	bd98      	pop	{r3, r4, r7, pc}
    b838:	20000b04 	.word	0x20000b04
    b83c:	0002c963 	.word	0x0002c963
    b840:	0002cafd 	.word	0x0002cafd

0000b844 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
    b844:	b598      	push	{r3, r4, r7, lr}
    b846:	4603      	mov	r3, r0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
    b848:	480c      	ldr	r0, [pc, #48]	; (b87c <l2cap_accept.part.0+0x38>)
    b84a:	6802      	ldr	r2, [r0, #0]
    b84c:	0752      	lsls	r2, r2, #29
static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
    b84e:	af00      	add	r7, sp, #0
	LOG_ERR("No available L2CAP context for conn %p", conn);
    b850:	d00f      	beq.n	b872 <l2cap_accept.part.0+0x2e>
    b852:	466c      	mov	r4, sp
    b854:	b088      	sub	sp, #32
    b856:	466a      	mov	r2, sp
    b858:	4909      	ldr	r1, [pc, #36]	; (b880 <l2cap_accept.part.0+0x3c>)
    b85a:	6151      	str	r1, [r2, #20]
    b85c:	4909      	ldr	r1, [pc, #36]	; (b884 <l2cap_accept.part.0+0x40>)
    b85e:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b862:	2304      	movs	r3, #4
    b864:	f842 3f10 	str.w	r3, [r2, #16]!
    b868:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b86c:	f018 fd74 	bl	24358 <z_log_msg_static_create.constprop.0>
    b870:	46a5      	mov	sp, r4

	return -ENOMEM;
}
    b872:	f06f 000b 	mvn.w	r0, #11
    b876:	46bd      	mov	sp, r7
    b878:	bd98      	pop	{r3, r4, r7, pc}
    b87a:	bf00      	nop
    b87c:	20000b04 	.word	0x20000b04
    b880:	0002c98f 	.word	0x0002c98f
    b884:	0002caf0 	.word	0x0002caf0

0000b888 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
    b888:	4b04      	ldr	r3, [pc, #16]	; (b89c <l2cap_accept+0x14>)
    b88a:	681a      	ldr	r2, [r3, #0]
    b88c:	b10a      	cbz	r2, b892 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    b88e:	f7ff bfd9 	b.w	b844 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
    b892:	4803      	ldr	r0, [pc, #12]	; (b8a0 <l2cap_accept+0x18>)
    b894:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
    b896:	600b      	str	r3, [r1, #0]
}
    b898:	4610      	mov	r0, r2
    b89a:	4770      	bx	lr
    b89c:	200025c4 	.word	0x200025c4
    b8a0:	000283a8 	.word	0x000283a8

0000b8a4 <bt_l2cap_connected>:
{
    b8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b8a6:	4d24      	ldr	r5, [pc, #144]	; (b938 <bt_l2cap_connected+0x94>)
    b8a8:	4f24      	ldr	r7, [pc, #144]	; (b93c <bt_l2cap_connected+0x98>)
{
    b8aa:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b8ac:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b8ae:	42bd      	cmp	r5, r7
    b8b0:	d301      	bcc.n	b8b6 <bt_l2cap_connected+0x12>
}
    b8b2:	b003      	add	sp, #12
    b8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
    b8b6:	686b      	ldr	r3, [r5, #4]
    b8b8:	a901      	add	r1, sp, #4
    b8ba:	4620      	mov	r0, r4
    b8bc:	4798      	blx	r3
    b8be:	2800      	cmp	r0, #0
    b8c0:	db34      	blt.n	b92c <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    b8c2:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    b8c4:	882a      	ldrh	r2, [r5, #0]
    b8c6:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
    b8c8:	849a      	strh	r2, [r3, #36]	; 0x24
    b8ca:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b8ce:	68a8      	ldr	r0, [r5, #8]
    b8d0:	f3bf 8f5b 	dmb	ish
    b8d4:	e852 1f00 	ldrex	r1, [r2]
    b8d8:	e842 6c00 	strex	ip, r6, [r2]
    b8dc:	f1bc 0f00 	cmp.w	ip, #0
    b8e0:	d1f8      	bne.n	b8d4 <bt_l2cap_connected+0x30>
    b8e2:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    b8e6:	609e      	str	r6, [r3, #8]
	return list->tail;
    b8e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    b8ea:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
    b8ee:	b9f9      	cbnz	r1, b930 <bt_l2cap_connected+0x8c>
	list->head = node;
    b8f0:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
    b8f4:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
    b8f6:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
    b8f8:	9801      	ldr	r0, [sp, #4]
    b8fa:	6843      	ldr	r3, [r0, #4]
    b8fc:	681b      	ldr	r3, [r3, #0]
    b8fe:	b103      	cbz	r3, b902 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
    b900:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b902:	9b01      	ldr	r3, [sp, #4]
    b904:	f3bf 8f5b 	dmb	ish
    b908:	3310      	adds	r3, #16
    b90a:	e853 1f00 	ldrex	r1, [r3]
    b90e:	f041 0101 	orr.w	r1, r1, #1
    b912:	e843 1200 	strex	r2, r1, [r3]
    b916:	2a00      	cmp	r2, #0
    b918:	d1f7      	bne.n	b90a <bt_l2cap_connected+0x66>
    b91a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    b91e:	9801      	ldr	r0, [sp, #4]
    b920:	6843      	ldr	r3, [r0, #4]
    b922:	69db      	ldr	r3, [r3, #28]
    b924:	b113      	cbz	r3, b92c <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
    b926:	f100 0110 	add.w	r1, r0, #16
    b92a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b92c:	350c      	adds	r5, #12
    b92e:	e7be      	b.n	b8ae <bt_l2cap_connected+0xa>
	parent->next = child;
    b930:	600a      	str	r2, [r1, #0]
	list->tail = node;
    b932:	6562      	str	r2, [r4, #84]	; 0x54
}
    b934:	e7de      	b.n	b8f4 <bt_l2cap_connected+0x50>
    b936:	bf00      	nop
    b938:	000278ec 	.word	0x000278ec
    b93c:	00027910 	.word	0x00027910

0000b940 <l2cap_recv>:
{
    b940:	b5f0      	push	{r4, r5, r6, r7, lr}
    b942:	b083      	sub	sp, #12
	if (buf->len < sizeof(*hdr)) {
    b944:	8a0b      	ldrh	r3, [r1, #16]
    b946:	2b03      	cmp	r3, #3
{
    b948:	af02      	add	r7, sp, #8
    b94a:	4606      	mov	r6, r0
    b94c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    b94e:	d810      	bhi.n	b972 <l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP signaling PDU");
    b950:	4840      	ldr	r0, [pc, #256]	; (ba54 <l2cap_recv+0x114>)
    b952:	6803      	ldr	r3, [r0, #0]
    b954:	075d      	lsls	r5, r3, #29
    b956:	d02b      	beq.n	b9b0 <l2cap_recv+0x70>
    b958:	466c      	mov	r4, sp
    b95a:	b088      	sub	sp, #32
    b95c:	aa02      	add	r2, sp, #8
    b95e:	4b3e      	ldr	r3, [pc, #248]	; (ba58 <l2cap_recv+0x118>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
    b960:	6153      	str	r3, [r2, #20]
    b962:	4b3e      	ldr	r3, [pc, #248]	; (ba5c <l2cap_recv+0x11c>)
    b964:	6193      	str	r3, [r2, #24]
    b966:	2303      	movs	r3, #3
    b968:	f842 3f10 	str.w	r3, [r2, #16]!
    b96c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b970:	e01b      	b.n	b9aa <l2cap_recv+0x6a>
	return net_buf_simple_pull_mem(&buf->b, len);
    b972:	2104      	movs	r1, #4
    b974:	f105 000c 	add.w	r0, r5, #12
    b978:	f019 fe6c 	bl	25654 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    b97c:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
    b97e:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
    b980:	4299      	cmp	r1, r3
    b982:	4604      	mov	r4, r0
    b984:	d018      	beq.n	b9b8 <l2cap_recv+0x78>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b986:	4833      	ldr	r0, [pc, #204]	; (ba54 <l2cap_recv+0x114>)
    b988:	6802      	ldr	r2, [r0, #0]
    b98a:	0754      	lsls	r4, r2, #29
    b98c:	d010      	beq.n	b9b0 <l2cap_recv+0x70>
    b98e:	466c      	mov	r4, sp
    b990:	b08a      	sub	sp, #40	; 0x28
    b992:	aa02      	add	r2, sp, #8
    b994:	4d32      	ldr	r5, [pc, #200]	; (ba60 <l2cap_recv+0x120>)
    b996:	6155      	str	r5, [r2, #20]
    b998:	4d30      	ldr	r5, [pc, #192]	; (ba5c <l2cap_recv+0x11c>)
    b99a:	6213      	str	r3, [r2, #32]
    b99c:	2305      	movs	r3, #5
    b99e:	e9c2 5106 	strd	r5, r1, [r2, #24]
    b9a2:	f842 3f10 	str.w	r3, [r2, #16]!
    b9a6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
		LOG_ERR("Invalid ident value in L2CAP PDU");
    b9aa:	f018 fcd5 	bl	24358 <z_log_msg_static_create.constprop.0>
    b9ae:	46a5      	mov	sp, r4
}
    b9b0:	2000      	movs	r0, #0
    b9b2:	3704      	adds	r7, #4
    b9b4:	46bd      	mov	sp, r7
    b9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    b9b8:	7843      	ldrb	r3, [r0, #1]
    b9ba:	b943      	cbnz	r3, b9ce <l2cap_recv+0x8e>
		LOG_ERR("Invalid ident value in L2CAP PDU");
    b9bc:	4825      	ldr	r0, [pc, #148]	; (ba54 <l2cap_recv+0x114>)
    b9be:	6803      	ldr	r3, [r0, #0]
    b9c0:	075a      	lsls	r2, r3, #29
    b9c2:	d0f5      	beq.n	b9b0 <l2cap_recv+0x70>
    b9c4:	466c      	mov	r4, sp
    b9c6:	b088      	sub	sp, #32
    b9c8:	aa02      	add	r2, sp, #8
    b9ca:	4b26      	ldr	r3, [pc, #152]	; (ba64 <l2cap_recv+0x124>)
    b9cc:	e7c8      	b.n	b960 <l2cap_recv+0x20>
	switch (hdr->code) {
    b9ce:	7803      	ldrb	r3, [r0, #0]
    b9d0:	2b01      	cmp	r3, #1
    b9d2:	d0ed      	beq.n	b9b0 <l2cap_recv+0x70>
    b9d4:	2b13      	cmp	r3, #19
    b9d6:	d10c      	bne.n	b9f2 <l2cap_recv+0xb2>
	if (buf->len < sizeof(*rsp)) {
    b9d8:	2901      	cmp	r1, #1
    b9da:	d8e9      	bhi.n	b9b0 <l2cap_recv+0x70>
		LOG_ERR("Too small LE conn param rsp");
    b9dc:	481d      	ldr	r0, [pc, #116]	; (ba54 <l2cap_recv+0x114>)
    b9de:	6803      	ldr	r3, [r0, #0]
    b9e0:	075b      	lsls	r3, r3, #29
    b9e2:	d0e5      	beq.n	b9b0 <l2cap_recv+0x70>
    b9e4:	466c      	mov	r4, sp
    b9e6:	b088      	sub	sp, #32
    b9e8:	aa02      	add	r2, sp, #8
    b9ea:	4b1f      	ldr	r3, [pc, #124]	; (ba68 <l2cap_recv+0x128>)
    b9ec:	6153      	str	r3, [r2, #20]
    b9ee:	4b1f      	ldr	r3, [pc, #124]	; (ba6c <l2cap_recv+0x12c>)
    b9f0:	e7b8      	b.n	b964 <l2cap_recv+0x24>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
    b9f2:	4818      	ldr	r0, [pc, #96]	; (ba54 <l2cap_recv+0x114>)
    b9f4:	6802      	ldr	r2, [r0, #0]
    b9f6:	f012 0f06 	tst.w	r2, #6
    b9fa:	d00f      	beq.n	ba1c <l2cap_recv+0xdc>
    b9fc:	466d      	mov	r5, sp
    b9fe:	b088      	sub	sp, #32
    ba00:	aa02      	add	r2, sp, #8
    ba02:	491b      	ldr	r1, [pc, #108]	; (ba70 <l2cap_recv+0x130>)
    ba04:	6151      	str	r1, [r2, #20]
    ba06:	4915      	ldr	r1, [pc, #84]	; (ba5c <l2cap_recv+0x11c>)
	switch (hdr->code) {
    ba08:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
    ba0c:	2304      	movs	r3, #4
    ba0e:	f842 3f10 	str.w	r3, [r2, #16]!
    ba12:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    ba16:	f018 fc9f 	bl	24358 <z_log_msg_static_create.constprop.0>
    ba1a:	46ad      	mov	sp, r5
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    ba1c:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    ba1e:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    ba20:	2202      	movs	r2, #2
    ba22:	2001      	movs	r0, #1
    ba24:	f018 fc9b 	bl	2435e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    ba28:	4604      	mov	r4, r0
    ba2a:	2800      	cmp	r0, #0
    ba2c:	d0c0      	beq.n	b9b0 <l2cap_recv+0x70>
	return net_buf_simple_add(&buf->b, len);
    ba2e:	2102      	movs	r1, #2
    ba30:	300c      	adds	r0, #12
    ba32:	f019 fdde 	bl	255f2 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    ba36:	2300      	movs	r3, #0
    ba38:	7003      	strb	r3, [r0, #0]
    ba3a:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    ba3c:	4622      	mov	r2, r4
    ba3e:	9300      	str	r3, [sp, #0]
    ba40:	2105      	movs	r1, #5
    ba42:	4628      	mov	r0, r5
    ba44:	f018 fcd7 	bl	243f6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    ba48:	2800      	cmp	r0, #0
    ba4a:	d0b1      	beq.n	b9b0 <l2cap_recv+0x70>
		net_buf_unref(buf);
    ba4c:	4620      	mov	r0, r4
    ba4e:	f00f f99d 	bl	1ad8c <net_buf_unref>
    ba52:	e7ad      	b.n	b9b0 <l2cap_recv+0x70>
    ba54:	20000b04 	.word	0x20000b04
    ba58:	0002c9ba 	.word	0x0002c9ba
    ba5c:	0002cae5 	.word	0x0002cae5
    ba60:	0002c9dc 	.word	0x0002c9dc
    ba64:	0002ca01 	.word	0x0002ca01
    ba68:	0002ca26 	.word	0x0002ca26
    ba6c:	0002cad3 	.word	0x0002cad3
    ba70:	0002ca46 	.word	0x0002ca46

0000ba74 <bt_l2cap_recv>:
{
    ba74:	b5b0      	push	{r4, r5, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    ba76:	8a0b      	ldrh	r3, [r1, #16]
    ba78:	2b03      	cmp	r3, #3
{
    ba7a:	af00      	add	r7, sp, #0
    ba7c:	4605      	mov	r5, r0
    ba7e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    ba80:	d817      	bhi.n	bab2 <bt_l2cap_recv+0x3e>
		LOG_ERR("Too small L2CAP PDU received");
    ba82:	481d      	ldr	r0, [pc, #116]	; (baf8 <bt_l2cap_recv+0x84>)
    ba84:	6803      	ldr	r3, [r0, #0]
    ba86:	075b      	lsls	r3, r3, #29
    ba88:	d00e      	beq.n	baa8 <bt_l2cap_recv+0x34>
    ba8a:	466d      	mov	r5, sp
    ba8c:	b088      	sub	sp, #32
    ba8e:	466a      	mov	r2, sp
    ba90:	4b1a      	ldr	r3, [pc, #104]	; (bafc <bt_l2cap_recv+0x88>)
    ba92:	6153      	str	r3, [r2, #20]
    ba94:	4b1a      	ldr	r3, [pc, #104]	; (bb00 <bt_l2cap_recv+0x8c>)
    ba96:	6193      	str	r3, [r2, #24]
    ba98:	2303      	movs	r3, #3
    ba9a:	f842 3f10 	str.w	r3, [r2, #16]!
    ba9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    baa2:	f018 fc59 	bl	24358 <z_log_msg_static_create.constprop.0>
    baa6:	46ad      	mov	sp, r5
	net_buf_unref(buf);
    baa8:	4620      	mov	r0, r4
    baaa:	f00f f96f 	bl	1ad8c <net_buf_unref>
}
    baae:	46bd      	mov	sp, r7
    bab0:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    bab2:	2104      	movs	r1, #4
    bab4:	f104 000c 	add.w	r0, r4, #12
    bab8:	f019 fdcc 	bl	25654 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    babc:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    babe:	4628      	mov	r0, r5
    bac0:	f018 fcb2 	bl	24428 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bac4:	b990      	cbnz	r0, baec <bt_l2cap_recv+0x78>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
    bac6:	480c      	ldr	r0, [pc, #48]	; (baf8 <bt_l2cap_recv+0x84>)
    bac8:	6803      	ldr	r3, [r0, #0]
    baca:	f013 0f06 	tst.w	r3, #6
    bace:	d0eb      	beq.n	baa8 <bt_l2cap_recv+0x34>
    bad0:	466d      	mov	r5, sp
    bad2:	b088      	sub	sp, #32
    bad4:	466a      	mov	r2, sp
    bad6:	4b0b      	ldr	r3, [pc, #44]	; (bb04 <bt_l2cap_recv+0x90>)
    bad8:	6153      	str	r3, [r2, #20]
    bada:	4b09      	ldr	r3, [pc, #36]	; (bb00 <bt_l2cap_recv+0x8c>)
    badc:	e9c2 3106 	strd	r3, r1, [r2, #24]
    bae0:	2304      	movs	r3, #4
    bae2:	f842 3f10 	str.w	r3, [r2, #16]!
    bae6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    baea:	e7da      	b.n	baa2 <bt_l2cap_recv+0x2e>
	chan->ops->recv(chan, buf);
    baec:	6843      	ldr	r3, [r0, #4]
    baee:	4621      	mov	r1, r4
    baf0:	695b      	ldr	r3, [r3, #20]
    baf2:	4798      	blx	r3
    baf4:	e7d8      	b.n	baa8 <bt_l2cap_recv+0x34>
    baf6:	bf00      	nop
    baf8:	20000b04 	.word	0x20000b04
    bafc:	0002ca72 	.word	0x0002ca72
    bb00:	0002cb15 	.word	0x0002cb15
    bb04:	0002ca93 	.word	0x0002ca93

0000bb08 <bt_l2cap_update_conn_param>:
{
    bb08:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    bb0a:	4b17      	ldr	r3, [pc, #92]	; (bb68 <bt_l2cap_update_conn_param+0x60>)
{
    bb0c:	460e      	mov	r6, r1
	ident++;
    bb0e:	7819      	ldrb	r1, [r3, #0]
    bb10:	3101      	adds	r1, #1
    bb12:	b2c9      	uxtb	r1, r1
    bb14:	2901      	cmp	r1, #1
    bb16:	bf38      	it	cc
    bb18:	2101      	movcc	r1, #1
{
    bb1a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    bb1c:	2208      	movs	r2, #8
    bb1e:	2012      	movs	r0, #18
	ident++;
    bb20:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    bb22:	f018 fc1c 	bl	2435e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    bb26:	4604      	mov	r4, r0
    bb28:	b1d0      	cbz	r0, bb60 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
    bb2a:	2108      	movs	r1, #8
    bb2c:	300c      	adds	r0, #12
    bb2e:	f019 fd60 	bl	255f2 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    bb32:	8833      	ldrh	r3, [r6, #0]
    bb34:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    bb36:	8873      	ldrh	r3, [r6, #2]
    bb38:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    bb3a:	88b3      	ldrh	r3, [r6, #4]
    bb3c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    bb3e:	88f3      	ldrh	r3, [r6, #6]
    bb40:	80c3      	strh	r3, [r0, #6]
    bb42:	2300      	movs	r3, #0
    bb44:	4628      	mov	r0, r5
    bb46:	9300      	str	r3, [sp, #0]
    bb48:	4622      	mov	r2, r4
    bb4a:	2105      	movs	r1, #5
    bb4c:	f018 fc53 	bl	243f6 <bt_l2cap_send_cb>
	if (err) {
    bb50:	4605      	mov	r5, r0
    bb52:	b110      	cbz	r0, bb5a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
    bb54:	4620      	mov	r0, r4
    bb56:	f00f f919 	bl	1ad8c <net_buf_unref>
}
    bb5a:	4628      	mov	r0, r5
    bb5c:	b002      	add	sp, #8
    bb5e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    bb60:	f06f 050b 	mvn.w	r5, #11
    bb64:	e7f9      	b.n	bb5a <bt_l2cap_update_conn_param+0x52>
    bb66:	bf00      	nop
    bb68:	20003bce 	.word	0x20003bce

0000bb6c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
    bb6c:	2823      	cmp	r0, #35	; 0x23
    bb6e:	d81f      	bhi.n	bbb0 <att_op_get_type+0x44>
    bb70:	281a      	cmp	r0, #26
    bb72:	d804      	bhi.n	bb7e <att_op_get_type+0x12>
    bb74:	1e43      	subs	r3, r0, #1
    bb76:	2b18      	cmp	r3, #24
    bb78:	d90e      	bls.n	bb98 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    bb7a:	2006      	movs	r0, #6
    bb7c:	4770      	bx	lr
	switch (op) {
    bb7e:	f1a0 031b 	sub.w	r3, r0, #27
    bb82:	2b08      	cmp	r3, #8
    bb84:	d81e      	bhi.n	bbc4 <att_op_get_type+0x58>
    bb86:	e8df f003 	tbb	[pc, r3]
    bb8a:	1d05      	.short	0x1d05
    bb8c:	191d231b 	.word	0x191d231b
    bb90:	1d25      	.short	0x1d25
    bb92:	05          	.byte	0x05
    bb93:	00          	.byte	0x00
		return ATT_NOTIFICATION;
    bb94:	2003      	movs	r0, #3
    bb96:	4770      	bx	lr
	switch (op) {
    bb98:	4a0f      	ldr	r2, [pc, #60]	; (bbd8 <att_op_get_type+0x6c>)
    bb9a:	2301      	movs	r3, #1
    bb9c:	4083      	lsls	r3, r0
    bb9e:	401a      	ands	r2, r3
    bba0:	b9c2      	cbnz	r2, bbd4 <att_op_get_type+0x68>
    bba2:	4a0e      	ldr	r2, [pc, #56]	; (bbdc <att_op_get_type+0x70>)
    bba4:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
    bba6:	2a00      	cmp	r2, #0
    bba8:	bf14      	ite	ne
    bbaa:	2001      	movne	r0, #1
    bbac:	2006      	moveq	r0, #6
    bbae:	4770      	bx	lr
	switch (op) {
    bbb0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    bbb4:	2b52      	cmp	r3, #82	; 0x52
    bbb6:	d105      	bne.n	bbc4 <att_op_get_type+0x58>
		return ATT_COMMAND;
    bbb8:	2000      	movs	r0, #0
}
    bbba:	4770      	bx	lr
		return ATT_REQUEST;
    bbbc:	2001      	movs	r0, #1
    bbbe:	4770      	bx	lr
		return ATT_INDICATION;
    bbc0:	2005      	movs	r0, #5
    bbc2:	4770      	bx	lr
		return ATT_COMMAND;
    bbc4:	f010 0f40 	tst.w	r0, #64	; 0x40
    bbc8:	bf0c      	ite	eq
    bbca:	2006      	moveq	r0, #6
    bbcc:	2000      	movne	r0, #0
    bbce:	4770      	bx	lr
	switch (op) {
    bbd0:	2004      	movs	r0, #4
    bbd2:	4770      	bx	lr
		return ATT_RESPONSE;
    bbd4:	2002      	movs	r0, #2
    bbd6:	4770      	bx	lr
    bbd8:	028aaaaa 	.word	0x028aaaaa
    bbdc:	01455554 	.word	0x01455554

0000bbe0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    bbe0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    bbe2:	3804      	subs	r0, #4
    bbe4:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    bbe6:	a901      	add	r1, sp, #4
    bbe8:	4802      	ldr	r0, [pc, #8]	; (bbf4 <bt_att_released+0x14>)
    bbea:	f01a ff35 	bl	26a58 <k_mem_slab_free>
}
    bbee:	b003      	add	sp, #12
    bbf0:	f85d fb04 	ldr.w	pc, [sp], #4
    bbf4:	20000b78 	.word	0x20000b78

0000bbf8 <tx_meta_data_free>:
{
    bbf8:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
    bbfa:	2100      	movs	r1, #0
{
    bbfc:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
    bbfe:	2214      	movs	r2, #20
    bc00:	f018 f80f 	bl	23c22 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    bc04:	4621      	mov	r1, r4
    bc06:	4802      	ldr	r0, [pc, #8]	; (bc10 <tx_meta_data_free+0x18>)
}
    bc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
    bc0c:	f01b b81f 	b.w	26c4e <k_queue_append>
    bc10:	20000bdc 	.word	0x20000bdc

0000bc14 <find_type_cb>:
{
    bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc18:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
    bc1a:	f8d2 a000 	ldr.w	sl, [r2]
{
    bc1e:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
    bc20:	f8da 3004 	ldr.w	r3, [sl, #4]
    bc24:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bc26:	2500      	movs	r5, #0
    bc28:	f642 0301 	movw	r3, #10241	; 0x2801
{
    bc2c:	4680      	mov	r8, r0
    bc2e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bc30:	6800      	ldr	r0, [r0, #0]
    bc32:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
    bc36:	85fb      	strh	r3, [r7, #46]	; 0x2e
    bc38:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
    bc3c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bc3e:	f018 f81d 	bl	23c7c <bt_uuid_cmp>
    bc42:	2800      	cmp	r0, #0
    bc44:	d076      	beq.n	bd34 <find_type_cb+0x120>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    bc46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bc4a:	f8d8 0000 	ldr.w	r0, [r8]
    bc4e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
    bc52:	85fb      	strh	r3, [r7, #46]	; 0x2e
    bc54:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    bc58:	f018 f810 	bl	23c7c <bt_uuid_cmp>
    bc5c:	b138      	cbz	r0, bc6e <find_type_cb+0x5a>
		if (data->group &&
    bc5e:	68a3      	ldr	r3, [r4, #8]
    bc60:	b11b      	cbz	r3, bc6a <find_type_cb+0x56>
    bc62:	885a      	ldrh	r2, [r3, #2]
    bc64:	42b2      	cmp	r2, r6
    bc66:	d200      	bcs.n	bc6a <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
    bc68:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    bc6a:	2001      	movs	r0, #1
    bc6c:	e009      	b.n	bc82 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    bc6e:	6861      	ldr	r1, [r4, #4]
    bc70:	4608      	mov	r0, r1
    bc72:	f018 fbee 	bl	24452 <net_buf_frags_len>
    bc76:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
    bc7a:	1a1b      	subs	r3, r3, r0
    bc7c:	2b03      	cmp	r3, #3
    bc7e:	d804      	bhi.n	bc8a <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
    bc80:	2000      	movs	r0, #0
}
    bc82:	3744      	adds	r7, #68	; 0x44
    bc84:	46bd      	mov	sp, r7
    bc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    bc8a:	4608      	mov	r0, r1
    bc8c:	f019 fc83 	bl	25596 <net_buf_frag_last>
    bc90:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    bc92:	6860      	ldr	r0, [r4, #4]
    bc94:	f018 fbdd 	bl	24452 <net_buf_frags_len>
    bc98:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
    bc9c:	f105 090c 	add.w	r9, r5, #12
    bca0:	ebab 0b00 	sub.w	fp, fp, r0
    bca4:	4648      	mov	r0, r9
    bca6:	f019 fce9 	bl	2567c <net_buf_simple_tailroom>
    bcaa:	4558      	cmp	r0, fp
    bcac:	d945      	bls.n	bd3a <find_type_cb+0x126>
    bcae:	6860      	ldr	r0, [r4, #4]
    bcb0:	f018 fbcf 	bl	24452 <net_buf_frags_len>
    bcb4:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
    bcb8:	1a18      	subs	r0, r3, r0
	if (!len) {
    bcba:	b970      	cbnz	r0, bcda <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    bcbc:	6863      	ldr	r3, [r4, #4]
    bcbe:	7a98      	ldrb	r0, [r3, #10]
    bcc0:	f00e ffa2 	bl	1ac08 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    bcc4:	2200      	movs	r2, #0
    bcc6:	2300      	movs	r3, #0
    bcc8:	f019 fc4e 	bl	25568 <net_buf_alloc_fixed>
		if (!frag) {
    bccc:	4605      	mov	r5, r0
    bcce:	2800      	cmp	r0, #0
    bcd0:	d0d6      	beq.n	bc80 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
    bcd2:	4601      	mov	r1, r0
    bcd4:	6860      	ldr	r0, [r4, #4]
    bcd6:	f019 fc6f 	bl	255b8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    bcda:	2300      	movs	r3, #0
    bcdc:	9300      	str	r3, [sp, #0]
    bcde:	f8d8 a004 	ldr.w	sl, [r8, #4]
    bce2:	6878      	ldr	r0, [r7, #4]
    bce4:	4641      	mov	r1, r8
    bce6:	2310      	movs	r3, #16
    bce8:	f107 0208 	add.w	r2, r7, #8
    bcec:	47d0      	blx	sl
	if (read < 0) {
    bcee:	f1b0 0800 	subs.w	r8, r0, #0
    bcf2:	db1f      	blt.n	bd34 <find_type_cb+0x120>
	if (read != data->value_len) {
    bcf4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    bcf6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    bcf8:	4542      	cmp	r2, r8
    bcfa:	d04c      	beq.n	bd96 <find_type_cb+0x182>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    bcfc:	4601      	mov	r1, r0
    bcfe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    bd02:	f017 ffe9 	bl	23cd8 <bt_uuid_create>
    bd06:	b9e0      	cbnz	r0, bd42 <find_type_cb+0x12e>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
    bd08:	4825      	ldr	r0, [pc, #148]	; (bda0 <find_type_cb+0x18c>)
    bd0a:	6803      	ldr	r3, [r0, #0]
    bd0c:	f013 0f06 	tst.w	r3, #6
    bd10:	d010      	beq.n	bd34 <find_type_cb+0x120>
    bd12:	466d      	mov	r5, sp
    bd14:	b088      	sub	sp, #32
    bd16:	7c23      	ldrb	r3, [r4, #16]
    bd18:	aa02      	add	r2, sp, #8
    bd1a:	4922      	ldr	r1, [pc, #136]	; (bda4 <find_type_cb+0x190>)
    bd1c:	6151      	str	r1, [r2, #20]
    bd1e:	4922      	ldr	r1, [pc, #136]	; (bda8 <find_type_cb+0x194>)
    bd20:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unable to create UUID: size %d", read);
    bd24:	2304      	movs	r3, #4
    bd26:	f842 3f10 	str.w	r3, [r2, #16]!
    bd2a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    bd2e:	f018 fc97 	bl	24660 <z_log_msg_static_create.constprop.0>
    bd32:	46ad      	mov	sp, r5
	data->group = NULL;
    bd34:	2300      	movs	r3, #0
    bd36:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    bd38:	e797      	b.n	bc6a <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
    bd3a:	4648      	mov	r0, r9
    bd3c:	f019 fc9e 	bl	2567c <net_buf_simple_tailroom>
    bd40:	e7bb      	b.n	bcba <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    bd42:	fa5f f288 	uxtb.w	r2, r8
    bd46:	f107 0108 	add.w	r1, r7, #8
    bd4a:	f107 0018 	add.w	r0, r7, #24
    bd4e:	f017 ffc3 	bl	23cd8 <bt_uuid_create>
    bd52:	b968      	cbnz	r0, bd70 <find_type_cb+0x15c>
			LOG_WRN("Unable to create UUID: size %d", read);
    bd54:	4812      	ldr	r0, [pc, #72]	; (bda0 <find_type_cb+0x18c>)
    bd56:	6803      	ldr	r3, [r0, #0]
    bd58:	f013 0f06 	tst.w	r3, #6
    bd5c:	d0ea      	beq.n	bd34 <find_type_cb+0x120>
    bd5e:	466d      	mov	r5, sp
    bd60:	b088      	sub	sp, #32
    bd62:	aa02      	add	r2, sp, #8
    bd64:	4b11      	ldr	r3, [pc, #68]	; (bdac <find_type_cb+0x198>)
    bd66:	6153      	str	r3, [r2, #20]
    bd68:	4b0f      	ldr	r3, [pc, #60]	; (bda8 <find_type_cb+0x194>)
    bd6a:	e9c2 3806 	strd	r3, r8, [r2, #24]
    bd6e:	e7d9      	b.n	bd24 <find_type_cb+0x110>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    bd70:	f107 0118 	add.w	r1, r7, #24
    bd74:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    bd78:	f017 ff80 	bl	23c7c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    bd7c:	2800      	cmp	r0, #0
    bd7e:	d1d9      	bne.n	bd34 <find_type_cb+0x120>
	data->err = 0x00;
    bd80:	2300      	movs	r3, #0
    bd82:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    bd84:	2104      	movs	r1, #4
    bd86:	f105 000c 	add.w	r0, r5, #12
    bd8a:	f019 fc32 	bl	255f2 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    bd8e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    bd90:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    bd92:	68a3      	ldr	r3, [r4, #8]
    bd94:	e768      	b.n	bc68 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
    bd96:	f107 0108 	add.w	r1, r7, #8
    bd9a:	f017 ff10 	bl	23bbe <memcmp>
    bd9e:	e7ed      	b.n	bd7c <find_type_cb+0x168>
    bda0:	20000ae0 	.word	0x20000ae0
    bda4:	0002cb23 	.word	0x0002cb23
    bda8:	0002cd66 	.word	0x0002cd66
    bdac:	0002cb46 	.word	0x0002cb46

0000bdb0 <chan_send>:
{
    bdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdb4:	b082      	sub	sp, #8
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    bdb6:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
    bdba:	68cb      	ldr	r3, [r1, #12]
{
    bdbc:	af02      	add	r7, sp, #8
    bdbe:	4606      	mov	r6, r0
    bdc0:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    bdc2:	3090      	adds	r0, #144	; 0x90
    bdc4:	2102      	movs	r1, #2
    bdc6:	f018 fb5e 	bl	24486 <atomic_test_bit>
    bdca:	b9a8      	cbnz	r0, bdf8 <chan_send+0x48>
		LOG_ERR("ATT channel not connected");
    bdcc:	4831      	ldr	r0, [pc, #196]	; (be94 <chan_send+0xe4>)
    bdce:	6803      	ldr	r3, [r0, #0]
    bdd0:	075a      	lsls	r2, r3, #29
    bdd2:	d00e      	beq.n	bdf2 <chan_send+0x42>
    bdd4:	466c      	mov	r4, sp
    bdd6:	b088      	sub	sp, #32
    bdd8:	aa02      	add	r2, sp, #8
    bdda:	4b2f      	ldr	r3, [pc, #188]	; (be98 <chan_send+0xe8>)
    bddc:	6153      	str	r3, [r2, #20]
    bdde:	4b2f      	ldr	r3, [pc, #188]	; (be9c <chan_send+0xec>)
    bde0:	6193      	str	r3, [r2, #24]
    bde2:	2303      	movs	r3, #3
    bde4:	f842 3f10 	str.w	r3, [r2, #16]!
    bde8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bdec:	f018 fc38 	bl	24660 <z_log_msg_static_create.constprop.0>
    bdf0:	46a5      	mov	sp, r4
		return -EINVAL;
    bdf2:	f06f 0515 	mvn.w	r5, #21
    bdf6:	e022      	b.n	be3e <chan_send+0x8e>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    bdf8:	781b      	ldrb	r3, [r3, #0]
    bdfa:	2bd2      	cmp	r3, #210	; 0xd2
    bdfc:	d123      	bne.n	be46 <chan_send+0x96>
		err = bt_smp_sign(chan->att->conn, buf);
    bdfe:	6833      	ldr	r3, [r6, #0]
    be00:	4621      	mov	r1, r4
    be02:	6818      	ldr	r0, [r3, #0]
    be04:	f019 fbaa 	bl	2555c <bt_smp_sign>
		if (err) {
    be08:	4605      	mov	r5, r0
    be0a:	b1e0      	cbz	r0, be46 <chan_send+0x96>
			LOG_ERR("Error signing data");
    be0c:	4821      	ldr	r0, [pc, #132]	; (be94 <chan_send+0xe4>)
    be0e:	6803      	ldr	r3, [r0, #0]
    be10:	075b      	lsls	r3, r3, #29
    be12:	d00e      	beq.n	be32 <chan_send+0x82>
    be14:	466e      	mov	r6, sp
    be16:	b088      	sub	sp, #32
    be18:	aa02      	add	r2, sp, #8
    be1a:	4b21      	ldr	r3, [pc, #132]	; (bea0 <chan_send+0xf0>)
    be1c:	6153      	str	r3, [r2, #20]
    be1e:	4b1f      	ldr	r3, [pc, #124]	; (be9c <chan_send+0xec>)
    be20:	6193      	str	r3, [r2, #24]
    be22:	2303      	movs	r3, #3
    be24:	f842 3f10 	str.w	r3, [r2, #16]!
    be28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    be2c:	f018 fc18 	bl	24660 <z_log_msg_static_create.constprop.0>
    be30:	46b5      	mov	sp, r6
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    be32:	69a0      	ldr	r0, [r4, #24]
    be34:	f7ff fee0 	bl	bbf8 <tx_meta_data_free>
			net_buf_unref(buf);
    be38:	4620      	mov	r0, r4
    be3a:	f00e ffa7 	bl	1ad8c <net_buf_unref>
}
    be3e:	4628      	mov	r0, r5
    be40:	46bd      	mov	sp, r7
    be42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	state->offset = net_buf_simple_headroom(buf);
    be46:	f104 000c 	add.w	r0, r4, #12
    be4a:	f019 fc13 	bl	25674 <net_buf_simple_headroom>
	state->len = buf->len;
    be4e:	f8b4 a010 	ldrh.w	sl, [r4, #16]
	data->att_chan = chan;
    be52:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    be56:	6833      	ldr	r3, [r6, #0]
    be58:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    be5a:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    be5c:	4680      	mov	r8, r0
    be5e:	7818      	ldrb	r0, [r3, #0]
    be60:	f7ff fe84 	bl	bb6c <att_op_get_type>
	switch (op_type) {
    be64:	2805      	cmp	r0, #5
    be66:	bf96      	itet	ls
    be68:	4b0e      	ldrls	r3, [pc, #56]	; (bea4 <chan_send+0xf4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    be6a:	4b0f      	ldrhi	r3, [pc, #60]	; (bea8 <chan_send+0xf8>)
    be6c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    be70:	f8cd 9000 	str.w	r9, [sp]
    be74:	4628      	mov	r0, r5
    be76:	4622      	mov	r2, r4
    be78:	2104      	movs	r1, #4
    be7a:	f018 fabc 	bl	243f6 <bt_l2cap_send_cb>
	if (err) {
    be7e:	4605      	mov	r5, r0
    be80:	2800      	cmp	r0, #0
    be82:	d0dc      	beq.n	be3e <chan_send+0x8e>
	buf->data = buf->__buf + state->offset;
    be84:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    be86:	f8a4 a010 	strh.w	sl, [r4, #16]
	buf->data = buf->__buf + state->offset;
    be8a:	fa13 f388 	uxtah	r3, r3, r8
    be8e:	60e3      	str	r3, [r4, #12]
}
    be90:	e7d5      	b.n	be3e <chan_send+0x8e>
    be92:	bf00      	nop
    be94:	20000ae0 	.word	0x20000ae0
    be98:	0002cb69 	.word	0x0002cb69
    be9c:	0002cd8e 	.word	0x0002cd8e
    bea0:	0002cb87 	.word	0x0002cb87
    bea4:	000283d0 	.word	0x000283d0
    bea8:	00024a5f 	.word	0x00024a5f

0000beac <att_get>:
{
    beac:	b598      	push	{r3, r4, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    beae:	7a83      	ldrb	r3, [r0, #10]
    beb0:	2b07      	cmp	r3, #7
{
    beb2:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
    beb4:	d016      	beq.n	bee4 <att_get+0x38>
		LOG_WRN("Not connected");
    beb6:	481f      	ldr	r0, [pc, #124]	; (bf34 <att_get+0x88>)
    beb8:	6803      	ldr	r3, [r0, #0]
    beba:	f013 0f06 	tst.w	r3, #6
    bebe:	d00e      	beq.n	bede <att_get+0x32>
    bec0:	466c      	mov	r4, sp
    bec2:	b088      	sub	sp, #32
    bec4:	466a      	mov	r2, sp
    bec6:	4b1c      	ldr	r3, [pc, #112]	; (bf38 <att_get+0x8c>)
    bec8:	6153      	str	r3, [r2, #20]
    beca:	4b1c      	ldr	r3, [pc, #112]	; (bf3c <att_get+0x90>)
    becc:	6193      	str	r3, [r2, #24]
    bece:	2303      	movs	r3, #3
    bed0:	f842 3f10 	str.w	r3, [r2, #16]!
    bed4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    bed8:	f018 fbc2 	bl	24660 <z_log_msg_static_create.constprop.0>
    bedc:	46a5      	mov	sp, r4
		return NULL;
    bede:	2000      	movs	r0, #0
}
    bee0:	46bd      	mov	sp, r7
    bee2:	bd98      	pop	{r3, r4, r7, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    bee4:	2104      	movs	r1, #4
    bee6:	f018 fa9f 	bl	24428 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    beea:	4603      	mov	r3, r0
    beec:	b980      	cbnz	r0, bf10 <att_get+0x64>
		LOG_ERR("Unable to find ATT channel");
    beee:	4811      	ldr	r0, [pc, #68]	; (bf34 <att_get+0x88>)
    bef0:	6803      	ldr	r3, [r0, #0]
    bef2:	075a      	lsls	r2, r3, #29
    bef4:	d0f3      	beq.n	bede <att_get+0x32>
    bef6:	466c      	mov	r4, sp
    bef8:	b088      	sub	sp, #32
    befa:	466a      	mov	r2, sp
    befc:	4b10      	ldr	r3, [pc, #64]	; (bf40 <att_get+0x94>)
		LOG_ERR("ATT channel not connected");
    befe:	6153      	str	r3, [r2, #20]
    bf00:	4b0e      	ldr	r3, [pc, #56]	; (bf3c <att_get+0x90>)
    bf02:	6193      	str	r3, [r2, #24]
    bf04:	2303      	movs	r3, #3
    bf06:	f842 3f10 	str.w	r3, [r2, #16]!
    bf0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bf0e:	e7e3      	b.n	bed8 <att_get+0x2c>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
    bf10:	2102      	movs	r1, #2
    bf12:	308c      	adds	r0, #140	; 0x8c
    bf14:	f018 fab7 	bl	24486 <atomic_test_bit>
    bf18:	b940      	cbnz	r0, bf2c <att_get+0x80>
		LOG_ERR("ATT channel not connected");
    bf1a:	4806      	ldr	r0, [pc, #24]	; (bf34 <att_get+0x88>)
    bf1c:	6803      	ldr	r3, [r0, #0]
    bf1e:	075b      	lsls	r3, r3, #29
    bf20:	d0dd      	beq.n	bede <att_get+0x32>
    bf22:	466c      	mov	r4, sp
    bf24:	b088      	sub	sp, #32
    bf26:	466a      	mov	r2, sp
    bf28:	4b06      	ldr	r3, [pc, #24]	; (bf44 <att_get+0x98>)
    bf2a:	e7e8      	b.n	befe <att_get+0x52>
	return att_chan->att;
    bf2c:	f853 0c04 	ldr.w	r0, [r3, #-4]
    bf30:	e7d6      	b.n	bee0 <att_get+0x34>
    bf32:	bf00      	nop
    bf34:	20000ae0 	.word	0x20000ae0
    bf38:	0002cb9e 	.word	0x0002cb9e
    bf3c:	0002cdb3 	.word	0x0002cdb3
    bf40:	0002cbb0 	.word	0x0002cbb0
    bf44:	0002cb69 	.word	0x0002cb69

0000bf48 <read_group_cb>:
{
    bf48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bf4c:	4605      	mov	r5, r0
    bf4e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bf50:	f04f 0800 	mov.w	r8, #0
    bf54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bf58:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    bf5a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bf5c:	f88d 8008 	strb.w	r8, [sp, #8]
    bf60:	a902      	add	r1, sp, #8
{
    bf62:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bf64:	f8ad 300a 	strh.w	r3, [sp, #10]
    bf68:	f017 fe88 	bl	23c7c <bt_uuid_cmp>
    bf6c:	b1a0      	cbz	r0, bf98 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bf6e:	f642 0301 	movw	r3, #10241	; 0x2801
    bf72:	6828      	ldr	r0, [r5, #0]
    bf74:	f88d 800c 	strb.w	r8, [sp, #12]
    bf78:	a903      	add	r1, sp, #12
    bf7a:	f8ad 300e 	strh.w	r3, [sp, #14]
    bf7e:	f017 fe7d 	bl	23c7c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bf82:	b148      	cbz	r0, bf98 <read_group_cb+0x50>
		if (data->group &&
    bf84:	6923      	ldr	r3, [r4, #16]
    bf86:	b11b      	cbz	r3, bf90 <read_group_cb+0x48>
    bf88:	885a      	ldrh	r2, [r3, #2]
    bf8a:	42b2      	cmp	r2, r6
    bf8c:	d200      	bcs.n	bf90 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    bf8e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    bf90:	2001      	movs	r0, #1
}
    bf92:	b004      	add	sp, #16
    bf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bf98:	6861      	ldr	r1, [r4, #4]
    bf9a:	6828      	ldr	r0, [r5, #0]
    bf9c:	f017 fe6e 	bl	23c7c <bt_uuid_cmp>
    bfa0:	b110      	cbz	r0, bfa8 <read_group_cb+0x60>
		data->group = NULL;
    bfa2:	2300      	movs	r3, #0
    bfa4:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    bfa6:	e7f3      	b.n	bf90 <read_group_cb+0x48>
	if (data->rsp->len &&
    bfa8:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    bfaa:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    bfac:	781a      	ldrb	r2, [r3, #0]
    bfae:	b132      	cbz	r2, bfbe <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    bfb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    bfb2:	8a01      	ldrh	r1, [r0, #16]
    bfb4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    bfb6:	4293      	cmp	r3, r2
    bfb8:	da01      	bge.n	bfbe <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
    bfba:	2000      	movs	r0, #0
    bfbc:	e7e9      	b.n	bf92 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    bfbe:	2104      	movs	r1, #4
    bfc0:	300c      	adds	r0, #12
    bfc2:	f019 fb16 	bl	255f2 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    bfc6:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
    bfc8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    bfca:	6923      	ldr	r3, [r4, #16]
    bfcc:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    bfce:	4b08      	ldr	r3, [pc, #32]	; (bff0 <read_group_cb+0xa8>)
    bfd0:	9300      	str	r3, [sp, #0]
    bfd2:	9401      	str	r4, [sp, #4]
    bfd4:	68a2      	ldr	r2, [r4, #8]
    bfd6:	2300      	movs	r3, #0
    bfd8:	4629      	mov	r1, r5
    bfda:	4638      	mov	r0, r7
    bfdc:	f018 fb84 	bl	246e8 <att_chan_read>
	if (read < 0) {
    bfe0:	2800      	cmp	r0, #0
    bfe2:	dbea      	blt.n	bfba <read_group_cb+0x72>
	if (!data->group) {
    bfe4:	6920      	ldr	r0, [r4, #16]
    bfe6:	3800      	subs	r0, #0
    bfe8:	bf18      	it	ne
    bfea:	2001      	movne	r0, #1
    bfec:	e7d1      	b.n	bf92 <read_group_cb+0x4a>
    bfee:	bf00      	nop
    bff0:	00024641 	.word	0x00024641

0000bff4 <bt_att_connected>:
{
    bff4:	b510      	push	{r4, lr}
    bff6:	f100 038c 	add.w	r3, r0, #140	; 0x8c
    bffa:	4604      	mov	r4, r0
    bffc:	f3bf 8f5b 	dmb	ish
    c000:	e853 1f00 	ldrex	r1, [r3]
    c004:	f041 0104 	orr.w	r1, r1, #4
    c008:	e843 1200 	strex	r2, r1, [r3]
    c00c:	2a00      	cmp	r2, #0
    c00e:	d1f7      	bne.n	c000 <bt_att_connected+0xc>
    c010:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c014:	2317      	movs	r3, #23
    c016:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c018:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
    c01a:	1f20      	subs	r0, r4, #4
    c01c:	f018 fa55 	bl	244ca <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    c020:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    c024:	4903      	ldr	r1, [pc, #12]	; (c034 <bt_att_connected+0x40>)
    c026:	f01a fef1 	bl	26e0c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    c02a:	6820      	ldr	r0, [r4, #0]
}
    c02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
    c030:	f001 bef6 	b.w	de20 <bt_gatt_connected>
    c034:	0000cd65 	.word	0x0000cd65

0000c038 <read_type_cb>:
{
    c038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    c03c:	6817      	ldr	r7, [r2, #0]
{
    c03e:	4605      	mov	r5, r0
    c040:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c042:	6800      	ldr	r0, [r0, #0]
    c044:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    c046:	687e      	ldr	r6, [r7, #4]
{
    c048:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c04a:	f017 fe17 	bl	23c7c <bt_uuid_cmp>
    c04e:	4681      	mov	r9, r0
    c050:	2800      	cmp	r0, #0
    c052:	d13c      	bne.n	c0ce <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c054:	4630      	mov	r0, r6
    c056:	2295      	movs	r2, #149	; 0x95
    c058:	4629      	mov	r1, r5
    c05a:	f019 f92a 	bl	252b2 <bt_gatt_check_perm>
    c05e:	4606      	mov	r6, r0
    c060:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c062:	b140      	cbz	r0, c076 <read_type_cb+0x3e>
		if (data->rsp->len) {
    c064:	68e3      	ldr	r3, [r4, #12]
    c066:	781b      	ldrb	r3, [r3, #0]
    c068:	b10b      	cbz	r3, c06e <read_type_cb+0x36>
			data->err = 0x00;
    c06a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
    c06e:	2000      	movs	r0, #0
}
    c070:	b003      	add	sp, #12
    c072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c076:	68a0      	ldr	r0, [r4, #8]
    c078:	f019 fa8d 	bl	25596 <net_buf_frag_last>
    c07c:	2102      	movs	r1, #2
    c07e:	300c      	adds	r0, #12
    c080:	f019 fab7 	bl	255f2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c084:	4b13      	ldr	r3, [pc, #76]	; (c0d4 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c086:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
    c088:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c08c:	9300      	str	r3, [sp, #0]
    c08e:	9401      	str	r4, [sp, #4]
    c090:	68a2      	ldr	r2, [r4, #8]
    c092:	4633      	mov	r3, r6
    c094:	4629      	mov	r1, r5
    c096:	4638      	mov	r0, r7
    c098:	f018 fb26 	bl	246e8 <att_chan_read>
	if (read < 0) {
    c09c:	2800      	cmp	r0, #0
    c09e:	da07      	bge.n	c0b0 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
    c0a0:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c0a4:	bf26      	itte	cs
    c0a6:	4240      	negcs	r0, r0
    c0a8:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c0aa:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    c0ac:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    c0ae:	e7de      	b.n	c06e <read_type_cb+0x36>
	if (!data->item) {
    c0b0:	6923      	ldr	r3, [r4, #16]
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	d0db      	beq.n	c06e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c0b6:	68a0      	ldr	r0, [r4, #8]
    c0b8:	f018 f9cb 	bl	24452 <net_buf_frags_len>
    c0bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    c0be:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c0c0:	68e3      	ldr	r3, [r4, #12]
    c0c2:	781b      	ldrb	r3, [r3, #0]
    c0c4:	4298      	cmp	r0, r3
    c0c6:	bf94      	ite	ls
    c0c8:	2000      	movls	r0, #0
    c0ca:	2001      	movhi	r0, #1
    c0cc:	e7d0      	b.n	c070 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    c0ce:	2001      	movs	r0, #1
    c0d0:	e7ce      	b.n	c070 <read_type_cb+0x38>
    c0d2:	bf00      	nop
    c0d4:	00024463 	.word	0x00024463

0000c0d8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0dc:	b082      	sub	sp, #8
    c0de:	af00      	add	r7, sp, #0
    c0e0:	4604      	mov	r4, r0
    c0e2:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c0e4:	4841      	ldr	r0, [pc, #260]	; (c1ec <bt_att_accept+0x114>)
    c0e6:	2200      	movs	r2, #0
    c0e8:	2300      	movs	r3, #0
    c0ea:	4639      	mov	r1, r7
    c0ec:	f013 fb5e 	bl	1f7ac <k_mem_slab_alloc>
    c0f0:	4605      	mov	r5, r0
    c0f2:	b1d0      	cbz	r0, c12a <bt_att_accept+0x52>
		LOG_ERR("No available ATT context for conn %p", conn);
    c0f4:	483e      	ldr	r0, [pc, #248]	; (c1f0 <bt_att_accept+0x118>)
    c0f6:	6803      	ldr	r3, [r0, #0]
    c0f8:	075b      	lsls	r3, r3, #29
    c0fa:	d00f      	beq.n	c11c <bt_att_accept+0x44>
    c0fc:	466d      	mov	r5, sp
    c0fe:	b088      	sub	sp, #32
    c100:	466a      	mov	r2, sp
    c102:	4b3c      	ldr	r3, [pc, #240]	; (c1f4 <bt_att_accept+0x11c>)
    c104:	6153      	str	r3, [r2, #20]
    c106:	4b3c      	ldr	r3, [pc, #240]	; (c1f8 <bt_att_accept+0x120>)
    c108:	e9c2 3406 	strd	r3, r4, [r2, #24]
    c10c:	2304      	movs	r3, #4
    c10e:	f842 3f10 	str.w	r3, [r2, #16]!
    c112:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c116:	f018 faa3 	bl	24660 <z_log_msg_static_create.constprop.0>
    c11a:	46ad      	mov	sp, r5
		return -ENOMEM;
    c11c:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c120:	4628      	mov	r0, r5
    c122:	3708      	adds	r7, #8
    c124:	46bd      	mov	sp, r7
    c126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
    c12a:	f014 fb23 	bl	20774 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
    c12e:	4b33      	ldr	r3, [pc, #204]	; (c1fc <bt_att_accept+0x124>)
	(void)memset(att, 0, sizeof(*att));
    c130:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
    c132:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
    c134:	222c      	movs	r2, #44	; 0x2c
    c136:	6838      	ldr	r0, [r7, #0]
    c138:	f017 fd73 	bl	23c22 <memset>
	att->conn = conn;
    c13c:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c13e:	4830      	ldr	r0, [pc, #192]	; (c200 <bt_att_accept+0x128>)
	att->conn = conn;
    c140:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
    c142:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c144:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
    c146:	e9c4 5501 	strd	r5, r5, [r4, #4]
    c14a:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c14e:	2200      	movs	r2, #0
    c150:	2300      	movs	r3, #0
    c152:	1d39      	adds	r1, r7, #4
    c154:	f013 fb2a 	bl	1f7ac <k_mem_slab_alloc>
    c158:	4605      	mov	r5, r0
    c15a:	b1b0      	cbz	r0, c18a <bt_att_accept+0xb2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
    c15c:	4824      	ldr	r0, [pc, #144]	; (c1f0 <bt_att_accept+0x118>)
    c15e:	6803      	ldr	r3, [r0, #0]
    c160:	f013 0f06 	tst.w	r3, #6
    c164:	d0da      	beq.n	c11c <bt_att_accept+0x44>
    c166:	6823      	ldr	r3, [r4, #0]
    c168:	466c      	mov	r4, sp
    c16a:	b088      	sub	sp, #32
    c16c:	466a      	mov	r2, sp
    c16e:	4925      	ldr	r1, [pc, #148]	; (c204 <bt_att_accept+0x12c>)
    c170:	6151      	str	r1, [r2, #20]
    c172:	4925      	ldr	r1, [pc, #148]	; (c208 <bt_att_accept+0x130>)
    c174:	e9c2 1306 	strd	r1, r3, [r2, #24]
    c178:	2304      	movs	r3, #4
    c17a:	f842 3f10 	str.w	r3, [r2, #16]!
    c17e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    c182:	f018 fa6d 	bl	24660 <z_log_msg_static_create.constprop.0>
    c186:	46a5      	mov	sp, r4
	if (!chan) {
    c188:	e7c8      	b.n	c11c <bt_att_accept+0x44>
	(void)memset(chan, 0, sizeof(*chan));
    c18a:	4601      	mov	r1, r0
    c18c:	22e8      	movs	r2, #232	; 0xe8
    c18e:	6878      	ldr	r0, [r7, #4]
    c190:	f017 fd47 	bl	23c22 <memset>
	chan->chan.chan.ops = &ops;
    c194:	6878      	ldr	r0, [r7, #4]
    c196:	4b1d      	ldr	r3, [pc, #116]	; (c20c <bt_att_accept+0x134>)
    c198:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
    c19a:	3098      	adds	r0, #152	; 0x98
    c19c:	f01a fd2a 	bl	26bf4 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c1a0:	687b      	ldr	r3, [r7, #4]
    c1a2:	f3bf 8f5b 	dmb	ish
    c1a6:	3390      	adds	r3, #144	; 0x90
    c1a8:	e853 2f00 	ldrex	r2, [r3]
    c1ac:	e843 5100 	strex	r1, r5, [r3]
    c1b0:	2900      	cmp	r1, #0
    c1b2:	d1f9      	bne.n	c1a8 <bt_att_accept+0xd0>
    c1b4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    c1b8:	687b      	ldr	r3, [r7, #4]
    c1ba:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
    c1bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
    c1be:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
    c1c2:	b91b      	cbnz	r3, c1cc <bt_att_accept+0xf4>
    c1c4:	f104 000c 	add.w	r0, r4, #12
    c1c8:	f01a fd14 	bl	26bf4 <z_impl_k_queue_init>
	return list->head;
    c1cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
    c1ce:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
    c1d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    c1d4:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
    c1d8:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    c1da:	b902      	cbnz	r2, c1de <bt_att_accept+0x106>
	list->tail = node;
    c1dc:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
    c1de:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
    c1e0:	2b00      	cmp	r3, #0
    c1e2:	d09b      	beq.n	c11c <bt_att_accept+0x44>
	*ch = &chan->chan.chan;
    c1e4:	3304      	adds	r3, #4
    c1e6:	6033      	str	r3, [r6, #0]
	return 0;
    c1e8:	e79a      	b.n	c120 <bt_att_accept+0x48>
    c1ea:	bf00      	nop
    c1ec:	20000b5c 	.word	0x20000b5c
    c1f0:	20000ae0 	.word	0x20000ae0
    c1f4:	0002cbcf 	.word	0x0002cbcf
    c1f8:	0002cda5 	.word	0x0002cda5
    c1fc:	2000268c 	.word	0x2000268c
    c200:	20000b78 	.word	0x20000b78
    c204:	0002cbf8 	.word	0x0002cbf8
    c208:	0002cd98 	.word	0x0002cd98
    c20c:	20000288 	.word	0x20000288

0000c210 <bt_att_chan_create_pdu>:
{
    c210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    c214:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c216:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    c218:	1c53      	adds	r3, r2, #1
    c21a:	428b      	cmp	r3, r1
{
    c21c:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c21e:	d91a      	bls.n	c256 <bt_att_chan_create_pdu+0x46>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
    c220:	4838      	ldr	r0, [pc, #224]	; (c304 <bt_att_chan_create_pdu+0xf4>)
    c222:	6802      	ldr	r2, [r0, #0]
    c224:	f012 0f06 	tst.w	r2, #6
    c228:	d010      	beq.n	c24c <bt_att_chan_create_pdu+0x3c>
    c22a:	466c      	mov	r4, sp
    c22c:	b08a      	sub	sp, #40	; 0x28
    c22e:	466a      	mov	r2, sp
    c230:	4d35      	ldr	r5, [pc, #212]	; (c308 <bt_att_chan_create_pdu+0xf8>)
    c232:	6155      	str	r5, [r2, #20]
    c234:	4d35      	ldr	r5, [pc, #212]	; (c30c <bt_att_chan_create_pdu+0xfc>)
    c236:	6213      	str	r3, [r2, #32]
    c238:	2305      	movs	r3, #5
    c23a:	e9c2 5106 	strd	r5, r1, [r2, #24]
    c23e:	f842 3f10 	str.w	r3, [r2, #16]!
    c242:	f44f 5122 	mov.w	r1, #10368	; 0x2880
    c246:	f018 fa0b 	bl	24660 <z_log_msg_static_create.constprop.0>
    c24a:	46a5      	mov	sp, r4
		return NULL;
    c24c:	2400      	movs	r4, #0
}
    c24e:	4620      	mov	r0, r4
    c250:	46bd      	mov	sp, r7
    c252:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
    c256:	4628      	mov	r0, r5
    c258:	f7ff fc88 	bl	bb6c <att_op_get_type>
    c25c:	2802      	cmp	r0, #2
    c25e:	d01f      	beq.n	c2a0 <bt_att_chan_create_pdu+0x90>
    c260:	2804      	cmp	r0, #4
    c262:	d01d      	beq.n	c2a0 <bt_att_chan_create_pdu+0x90>
		timeout = K_FOREVER;
    c264:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    c268:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
    c26c:	2100      	movs	r1, #0
    c26e:	4642      	mov	r2, r8
    c270:	464b      	mov	r3, r9
    c272:	4608      	mov	r0, r1
    c274:	f018 f8bc 	bl	243f0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
    c278:	4604      	mov	r4, r0
    c27a:	b9b0      	cbnz	r0, c2aa <bt_att_chan_create_pdu+0x9a>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
    c27c:	4821      	ldr	r0, [pc, #132]	; (c304 <bt_att_chan_create_pdu+0xf4>)
    c27e:	6803      	ldr	r3, [r0, #0]
    c280:	075b      	lsls	r3, r3, #29
    c282:	d0e3      	beq.n	c24c <bt_att_chan_create_pdu+0x3c>
    c284:	466c      	mov	r4, sp
    c286:	b088      	sub	sp, #32
    c288:	466a      	mov	r2, sp
    c28a:	4b21      	ldr	r3, [pc, #132]	; (c310 <bt_att_chan_create_pdu+0x100>)
    c28c:	6153      	str	r3, [r2, #20]
    c28e:	4b1f      	ldr	r3, [pc, #124]	; (c30c <bt_att_chan_create_pdu+0xfc>)
    c290:	e9c2 3506 	strd	r3, r5, [r2, #24]
    c294:	2304      	movs	r3, #4
    c296:	f842 3f10 	str.w	r3, [r2, #16]!
    c29a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c29e:	e7d2      	b.n	c246 <bt_att_chan_create_pdu+0x36>
	switch (att_op_get_type(op)) {
    c2a0:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
    c2a4:	f04f 0900 	mov.w	r9, #0
    c2a8:	e7e0      	b.n	c26c <bt_att_chan_create_pdu+0x5c>
	return z_impl_z_current_get();
    c2aa:	f014 fa63 	bl	20774 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    c2ae:	4b19      	ldr	r3, [pc, #100]	; (c314 <bt_att_chan_create_pdu+0x104>)
    c2b0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    c2b2:	4819      	ldr	r0, [pc, #100]	; (c318 <bt_att_chan_create_pdu+0x108>)
    c2b4:	bf07      	ittee	eq
    c2b6:	2200      	moveq	r2, #0
    c2b8:	2300      	moveq	r3, #0
    c2ba:	4642      	movne	r2, r8
    c2bc:	464b      	movne	r3, r9
    c2be:	f013 fd01 	bl	1fcc4 <z_impl_k_queue_get>
	if (!data) {
    c2c2:	b9b8      	cbnz	r0, c2f4 <bt_att_chan_create_pdu+0xe4>
		LOG_WRN("Unable to allocate ATT TX meta");
    c2c4:	480f      	ldr	r0, [pc, #60]	; (c304 <bt_att_chan_create_pdu+0xf4>)
    c2c6:	6803      	ldr	r3, [r0, #0]
    c2c8:	f013 0f06 	tst.w	r3, #6
    c2cc:	d00e      	beq.n	c2ec <bt_att_chan_create_pdu+0xdc>
    c2ce:	466d      	mov	r5, sp
    c2d0:	b088      	sub	sp, #32
    c2d2:	466a      	mov	r2, sp
    c2d4:	4b11      	ldr	r3, [pc, #68]	; (c31c <bt_att_chan_create_pdu+0x10c>)
    c2d6:	6153      	str	r3, [r2, #20]
    c2d8:	4b0c      	ldr	r3, [pc, #48]	; (c30c <bt_att_chan_create_pdu+0xfc>)
    c2da:	6193      	str	r3, [r2, #24]
    c2dc:	2303      	movs	r3, #3
    c2de:	f842 3f10 	str.w	r3, [r2, #16]!
    c2e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c2e6:	f018 f9bb 	bl	24660 <z_log_msg_static_create.constprop.0>
    c2ea:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    c2ec:	4620      	mov	r0, r4
    c2ee:	f00e fd4d 	bl	1ad8c <net_buf_unref>
		return NULL;
    c2f2:	e7ab      	b.n	c24c <bt_att_chan_create_pdu+0x3c>
	bt_att_tx_meta_data(buf) = data;
    c2f4:	61a0      	str	r0, [r4, #24]
    c2f6:	2101      	movs	r1, #1
    c2f8:	f104 000c 	add.w	r0, r4, #12
    c2fc:	f019 f979 	bl	255f2 <net_buf_simple_add>
	hdr->code = op;
    c300:	7005      	strb	r5, [r0, #0]
	return buf;
    c302:	e7a4      	b.n	c24e <bt_att_chan_create_pdu+0x3e>
    c304:	20000ae0 	.word	0x20000ae0
    c308:	0002cc21 	.word	0x0002cc21
    c30c:	0002cdcd 	.word	0x0002cdcd
    c310:	0002c963 	.word	0x0002c963
    c314:	20002088 	.word	0x20002088
    c318:	20000bdc 	.word	0x20000bdc
    c31c:	0002cc4a 	.word	0x0002cc4a

0000c320 <bt_att_recv>:
{
    c320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    c324:	8a0b      	ldrh	r3, [r1, #16]
{
    c326:	af00      	add	r7, sp, #0
    c328:	4681      	mov	r9, r0
    c32a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    c32c:	b9b3      	cbnz	r3, c35c <bt_att_recv+0x3c>
		LOG_ERR("Too small ATT PDU received");
    c32e:	4860      	ldr	r0, [pc, #384]	; (c4b0 <bt_att_recv+0x190>)
    c330:	6803      	ldr	r3, [r0, #0]
    c332:	0759      	lsls	r1, r3, #29
    c334:	d00e      	beq.n	c354 <bt_att_recv+0x34>
    c336:	466c      	mov	r4, sp
    c338:	b088      	sub	sp, #32
    c33a:	466a      	mov	r2, sp
    c33c:	4b5d      	ldr	r3, [pc, #372]	; (c4b4 <bt_att_recv+0x194>)
    c33e:	6153      	str	r3, [r2, #20]
    c340:	4b5d      	ldr	r3, [pc, #372]	; (c4b8 <bt_att_recv+0x198>)
    c342:	6193      	str	r3, [r2, #24]
    c344:	2303      	movs	r3, #3
    c346:	f842 3f10 	str.w	r3, [r2, #16]!
    c34a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_WRN("Ignoring unexpected indication");
    c34e:	f018 f987 	bl	24660 <z_log_msg_static_create.constprop.0>
    c352:	46a5      	mov	sp, r4
}
    c354:	2000      	movs	r0, #0
    c356:	46bd      	mov	sp, r7
    c358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    c35c:	2101      	movs	r1, #1
    c35e:	f108 000c 	add.w	r0, r8, #12
    c362:	f019 f977 	bl	25654 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    c366:	f859 3c04 	ldr.w	r3, [r9, #-4]
    c36a:	4605      	mov	r5, r0
    c36c:	2b00      	cmp	r3, #0
    c36e:	d0f1      	beq.n	c354 <bt_att_recv+0x34>
		if (hdr->code == handlers[i].op) {
    c370:	7801      	ldrb	r1, [r0, #0]
    c372:	4c52      	ldr	r4, [pc, #328]	; (c4bc <bt_att_recv+0x19c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    c374:	f1a9 0604 	sub.w	r6, r9, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c378:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    c37a:	f814 0033 	ldrb.w	r0, [r4, r3, lsl #3]
    c37e:	4288      	cmp	r0, r1
    c380:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    c384:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c388:	d11d      	bne.n	c3c6 <bt_att_recv+0xa6>
		if (handler->type == ATT_REQUEST &&
    c38a:	f892 a002 	ldrb.w	sl, [r2, #2]
    c38e:	f1ba 0f01 	cmp.w	sl, #1
    c392:	d140      	bne.n	c416 <bt_att_recv+0xf6>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
    c394:	2100      	movs	r1, #0
    c396:	f109 008c 	add.w	r0, r9, #140	; 0x8c
    c39a:	f018 fa5a 	bl	24852 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
    c39e:	2800      	cmp	r0, #0
    c3a0:	d04c      	beq.n	c43c <bt_att_recv+0x11c>
			LOG_WRN("Ignoring unexpected request");
    c3a2:	4843      	ldr	r0, [pc, #268]	; (c4b0 <bt_att_recv+0x190>)
    c3a4:	6803      	ldr	r3, [r0, #0]
    c3a6:	f013 0f06 	tst.w	r3, #6
    c3aa:	d0d3      	beq.n	c354 <bt_att_recv+0x34>
    c3ac:	466c      	mov	r4, sp
    c3ae:	b088      	sub	sp, #32
    c3b0:	466a      	mov	r2, sp
    c3b2:	4b43      	ldr	r3, [pc, #268]	; (c4c0 <bt_att_recv+0x1a0>)
			LOG_WRN("Ignoring unexpected indication");
    c3b4:	6153      	str	r3, [r2, #20]
    c3b6:	4b40      	ldr	r3, [pc, #256]	; (c4b8 <bt_att_recv+0x198>)
    c3b8:	6193      	str	r3, [r2, #24]
    c3ba:	2303      	movs	r3, #3
    c3bc:	f842 3f10 	str.w	r3, [r2, #16]!
    c3c0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c3c4:	e7c3      	b.n	c34e <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c3c6:	3301      	adds	r3, #1
    c3c8:	2b1e      	cmp	r3, #30
    c3ca:	d1d6      	bne.n	c37a <bt_att_recv+0x5a>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
    c3cc:	4838      	ldr	r0, [pc, #224]	; (c4b0 <bt_att_recv+0x190>)
    c3ce:	6803      	ldr	r3, [r0, #0]
    c3d0:	f013 0f06 	tst.w	r3, #6
    c3d4:	d00f      	beq.n	c3f6 <bt_att_recv+0xd6>
    c3d6:	466c      	mov	r4, sp
    c3d8:	b088      	sub	sp, #32
    c3da:	466a      	mov	r2, sp
    c3dc:	4b39      	ldr	r3, [pc, #228]	; (c4c4 <bt_att_recv+0x1a4>)
    c3de:	6153      	str	r3, [r2, #20]
    c3e0:	4b35      	ldr	r3, [pc, #212]	; (c4b8 <bt_att_recv+0x198>)
    c3e2:	e9c2 3106 	strd	r3, r1, [r2, #24]
    c3e6:	2304      	movs	r3, #4
    c3e8:	f842 3f10 	str.w	r3, [r2, #16]!
    c3ec:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    c3f0:	f018 f936 	bl	24660 <z_log_msg_static_create.constprop.0>
    c3f4:	46a5      	mov	sp, r4
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    c3f6:	7829      	ldrb	r1, [r5, #0]
    c3f8:	4608      	mov	r0, r1
    c3fa:	f7ff fbb7 	bl	bb6c <att_op_get_type>
    c3fe:	2800      	cmp	r0, #0
    c400:	d0a8      	beq.n	c354 <bt_att_recv+0x34>
    c402:	2805      	cmp	r0, #5
    c404:	d0a6      	beq.n	c354 <bt_att_recv+0x34>
	if (!req) {
    c406:	2900      	cmp	r1, #0
    c408:	d0a4      	beq.n	c354 <bt_att_recv+0x34>
    c40a:	2306      	movs	r3, #6
    c40c:	2200      	movs	r2, #0
    c40e:	4630      	mov	r0, r6
    c410:	f018 fb9b 	bl	24b4a <send_err_rsp.part.0>
    c414:	e79e      	b.n	c354 <bt_att_recv+0x34>
		} else if (handler->type == ATT_INDICATION &&
    c416:	f1ba 0f05 	cmp.w	sl, #5
    c41a:	d10f      	bne.n	c43c <bt_att_recv+0x11c>
			   atomic_test_and_set_bit(att_chan->flags,
    c41c:	2101      	movs	r1, #1
    c41e:	f109 008c 	add.w	r0, r9, #140	; 0x8c
    c422:	f018 fa16 	bl	24852 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
    c426:	b148      	cbz	r0, c43c <bt_att_recv+0x11c>
			LOG_WRN("Ignoring unexpected indication");
    c428:	4821      	ldr	r0, [pc, #132]	; (c4b0 <bt_att_recv+0x190>)
    c42a:	6803      	ldr	r3, [r0, #0]
    c42c:	f013 0f06 	tst.w	r3, #6
    c430:	d090      	beq.n	c354 <bt_att_recv+0x34>
    c432:	466c      	mov	r4, sp
    c434:	b088      	sub	sp, #32
    c436:	466a      	mov	r2, sp
    c438:	4b23      	ldr	r3, [pc, #140]	; (c4c8 <bt_att_recv+0x1a8>)
    c43a:	e7bb      	b.n	c3b4 <bt_att_recv+0x94>
	if (buf->len < handler->expect_len) {
    c43c:	445c      	add	r4, fp
    c43e:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    c442:	7862      	ldrb	r2, [r4, #1]
    c444:	429a      	cmp	r2, r3
    c446:	d925      	bls.n	c494 <bt_att_recv+0x174>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c448:	4819      	ldr	r0, [pc, #100]	; (c4b0 <bt_att_recv+0x190>)
    c44a:	6802      	ldr	r2, [r0, #0]
    c44c:	0752      	lsls	r2, r2, #29
    c44e:	d109      	bne.n	c464 <bt_att_recv+0x144>
	if (handler->type == ATT_REQUEST && err) {
    c450:	f1ba 0f01 	cmp.w	sl, #1
    c454:	f47f af7e 	bne.w	c354 <bt_att_recv+0x34>
		err = BT_ATT_ERR_INVALID_PDU;
    c458:	2304      	movs	r3, #4
		send_err_rsp(att_chan, hdr->code, 0, err);
    c45a:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    c45c:	2900      	cmp	r1, #0
    c45e:	f43f af79 	beq.w	c354 <bt_att_recv+0x34>
    c462:	e7d3      	b.n	c40c <bt_att_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c464:	46e8      	mov	r8, sp
    c466:	b08a      	sub	sp, #40	; 0x28
    c468:	7829      	ldrb	r1, [r5, #0]
    c46a:	466a      	mov	r2, sp
    c46c:	f8df c05c 	ldr.w	ip, [pc, #92]	; c4cc <bt_att_recv+0x1ac>
    c470:	f8c2 c014 	str.w	ip, [r2, #20]
    c474:	f8df c040 	ldr.w	ip, [pc, #64]	; c4b8 <bt_att_recv+0x198>
    c478:	6211      	str	r1, [r2, #32]
    c47a:	e9c2 c306 	strd	ip, r3, [r2, #24]
    c47e:	2305      	movs	r3, #5
    c480:	f842 3f10 	str.w	r3, [r2, #16]!
    c484:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    c488:	f018 f8ea 	bl	24660 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
    c48c:	78a3      	ldrb	r3, [r4, #2]
    c48e:	46c5      	mov	sp, r8
    c490:	2b01      	cmp	r3, #1
    c492:	e7df      	b.n	c454 <bt_att_recv+0x134>
		err = handler->func(att_chan, buf);
    c494:	6863      	ldr	r3, [r4, #4]
    c496:	4641      	mov	r1, r8
    c498:	4630      	mov	r0, r6
    c49a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    c49c:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
    c4a0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    c4a2:	f47f af57 	bne.w	c354 <bt_att_recv+0x34>
    c4a6:	2800      	cmp	r0, #0
    c4a8:	f43f af54 	beq.w	c354 <bt_att_recv+0x34>
    c4ac:	e7d5      	b.n	c45a <bt_att_recv+0x13a>
    c4ae:	bf00      	nop
    c4b0:	20000ae0 	.word	0x20000ae0
    c4b4:	0002cc6d 	.word	0x0002cc6d
    c4b8:	0002cd82 	.word	0x0002cd82
    c4bc:	000283e8 	.word	0x000283e8
    c4c0:	0002ccaa 	.word	0x0002ccaa
    c4c4:	0002cc8c 	.word	0x0002cc8c
    c4c8:	0002ccca 	.word	0x0002ccca
    c4cc:	0002cced 	.word	0x0002cced

0000c4d0 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    c4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4d2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c4d4:	6803      	ldr	r3, [r0, #0]
    c4d6:	460d      	mov	r5, r1
    c4d8:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    c4da:	b087      	sub	sp, #28
    c4dc:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c4de:	bf18      	it	ne
    c4e0:	2101      	movne	r1, #1
    c4e2:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    c4e4:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c4e6:	f018 ffdf 	bl	254a8 <bt_gatt_change_aware>
    c4ea:	b948      	cbnz	r0, c500 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    c4ec:	2105      	movs	r1, #5
    c4ee:	f104 0090 	add.w	r0, r4, #144	; 0x90
    c4f2:	f018 f9ae 	bl	24852 <atomic_test_and_set_bit>
    c4f6:	2800      	cmp	r0, #0
    c4f8:	d048      	beq.n	c58c <att_write_rsp.constprop.0+0xbc>
			return 0;
    c4fa:	2000      	movs	r0, #0
}
    c4fc:	b007      	add	sp, #28
    c4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
    c500:	2e00      	cmp	r6, #0
    c502:	d045      	beq.n	c590 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
    c504:	2218      	movs	r2, #24
    c506:	2100      	movs	r1, #0
    c508:	4668      	mov	r0, sp
    c50a:	f017 fb8a 	bl	23c22 <memset>
	if (rsp) {
    c50e:	bb67      	cbnz	r7, c56a <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
    c510:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c512:	4a20      	ldr	r2, [pc, #128]	; (c594 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
    c514:	681b      	ldr	r3, [r3, #0]
    c516:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    c518:	2300      	movs	r3, #0
    c51a:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    c51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c520:	9303      	str	r3, [sp, #12]
	data.len = len;
    c522:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    c526:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c52a:	2301      	movs	r3, #1
    c52c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c530:	4631      	mov	r1, r6
    c532:	466b      	mov	r3, sp
    c534:	4630      	mov	r0, r6
	data.req = req;
    c536:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c53a:	f018 f82a 	bl	24592 <bt_gatt_foreach_attr>
	if (data.err) {
    c53e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c542:	b1e3      	cbz	r3, c57e <att_write_rsp.constprop.0+0xae>
		if (rsp) {
    c544:	2f00      	cmp	r7, #0
    c546:	d0d8      	beq.n	c4fa <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    c548:	9b01      	ldr	r3, [sp, #4]
    c54a:	6998      	ldr	r0, [r3, #24]
    c54c:	f7ff fb54 	bl	bbf8 <tx_meta_data_free>
			net_buf_unref(data.buf);
    c550:	9801      	ldr	r0, [sp, #4]
    c552:	f00e fc1b 	bl	1ad8c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
    c556:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
    c55a:	2d00      	cmp	r5, #0
    c55c:	d0cd      	beq.n	c4fa <att_write_rsp.constprop.0+0x2a>
    c55e:	4632      	mov	r2, r6
    c560:	4629      	mov	r1, r5
    c562:	4620      	mov	r0, r4
    c564:	f018 faf1 	bl	24b4a <send_err_rsp.part.0>
    c568:	e7c7      	b.n	c4fa <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    c56a:	2200      	movs	r2, #0
    c56c:	4639      	mov	r1, r7
    c56e:	4620      	mov	r0, r4
    c570:	f7ff fe4e 	bl	c210 <bt_att_chan_create_pdu>
    c574:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    c576:	2800      	cmp	r0, #0
    c578:	d1ca      	bne.n	c510 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
    c57a:	200e      	movs	r0, #14
    c57c:	e7be      	b.n	c4fc <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
    c57e:	9901      	ldr	r1, [sp, #4]
    c580:	2900      	cmp	r1, #0
    c582:	d0ba      	beq.n	c4fa <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
    c584:	4620      	mov	r0, r4
    c586:	f018 f8a1 	bl	246cc <bt_att_chan_send_rsp>
    c58a:	e7b6      	b.n	c4fa <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c58c:	2012      	movs	r0, #18
    c58e:	e7b5      	b.n	c4fc <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
    c590:	2001      	movs	r0, #1
    c592:	e7b3      	b.n	c4fc <att_write_rsp.constprop.0+0x2c>
    c594:	00024531 	.word	0x00024531

0000c598 <bt_att_create_pdu>:
{
    c598:	b5b0      	push	{r4, r5, r7, lr}
    c59a:	af00      	add	r7, sp, #0
    c59c:	460d      	mov	r5, r1
    c59e:	4614      	mov	r4, r2
	att = att_get(conn);
    c5a0:	f7ff fc84 	bl	beac <att_get>
	if (!att) {
    c5a4:	b308      	cbz	r0, c5ea <bt_att_create_pdu+0x52>
	return list->head;
    c5a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c5a8:	b140      	cbz	r0, c5bc <bt_att_create_pdu+0x24>
	return node->next;
    c5aa:	f850 39e0 	ldr.w	r3, [r0], #-224
    c5ae:	b103      	cbz	r3, c5b2 <bt_att_create_pdu+0x1a>
    c5b0:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c5b2:	1c62      	adds	r2, r4, #1
    c5b4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    c5b6:	428a      	cmp	r2, r1
    c5b8:	d923      	bls.n	c602 <bt_att_create_pdu+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c5ba:	b9c3      	cbnz	r3, c5ee <bt_att_create_pdu+0x56>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
    c5bc:	4814      	ldr	r0, [pc, #80]	; (c610 <bt_att_create_pdu+0x78>)
    c5be:	6803      	ldr	r3, [r0, #0]
    c5c0:	f013 0f06 	tst.w	r3, #6
    c5c4:	d011      	beq.n	c5ea <bt_att_create_pdu+0x52>
    c5c6:	466d      	mov	r5, sp
    c5c8:	b088      	sub	sp, #32
    c5ca:	466b      	mov	r3, sp
    c5cc:	4a11      	ldr	r2, [pc, #68]	; (c614 <bt_att_create_pdu+0x7c>)
    c5ce:	615a      	str	r2, [r3, #20]
    c5d0:	4a11      	ldr	r2, [pc, #68]	; (c618 <bt_att_create_pdu+0x80>)
    c5d2:	619a      	str	r2, [r3, #24]
    c5d4:	3401      	adds	r4, #1
    c5d6:	461a      	mov	r2, r3
    c5d8:	61dc      	str	r4, [r3, #28]
    c5da:	2304      	movs	r3, #4
    c5dc:	f842 3f10 	str.w	r3, [r2, #16]!
    c5e0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    c5e4:	f018 f83c 	bl	24660 <z_log_msg_static_create.constprop.0>
    c5e8:	46ad      	mov	sp, r5
		return NULL;
    c5ea:	2000      	movs	r0, #0
    c5ec:	e00d      	b.n	c60a <bt_att_create_pdu+0x72>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c5ee:	4618      	mov	r0, r3
    c5f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d0dd      	beq.n	c5b4 <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c5f8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    c5fa:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c5fc:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c600:	d8f5      	bhi.n	c5ee <bt_att_create_pdu+0x56>
		return bt_att_chan_create_pdu(chan, op, len);
    c602:	4622      	mov	r2, r4
    c604:	4629      	mov	r1, r5
    c606:	f7ff fe03 	bl	c210 <bt_att_chan_create_pdu>
}
    c60a:	46bd      	mov	sp, r7
    c60c:	bdb0      	pop	{r4, r5, r7, pc}
    c60e:	bf00      	nop
    c610:	20000ae0 	.word	0x20000ae0
    c614:	0002cd10 	.word	0x0002cd10
    c618:	0002cdbb 	.word	0x0002cdbb

0000c61c <att_read_group_req>:
{
    c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c620:	8a0e      	ldrh	r6, [r1, #16]
    c622:	3e04      	subs	r6, #4
    c624:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
    c626:	2e02      	cmp	r6, #2
{
    c628:	4604      	mov	r4, r0
    c62a:	b08c      	sub	sp, #48	; 0x30
    c62c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c62e:	d001      	beq.n	c634 <att_read_group_req+0x18>
    c630:	2e10      	cmp	r6, #16
    c632:	d16a      	bne.n	c70a <att_read_group_req+0xee>
    c634:	2104      	movs	r1, #4
    c636:	300c      	adds	r0, #12
    c638:	f019 f80c 	bl	25654 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c63c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    c640:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c642:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c644:	1d01      	adds	r1, r0, #4
    c646:	4632      	mov	r2, r6
    c648:	4640      	mov	r0, r8
    c64a:	f017 fb45 	bl	23cd8 <bt_uuid_create>
    c64e:	2800      	cmp	r0, #0
    c650:	d05d      	beq.n	c70e <att_read_group_req+0xf2>
	if (!start || !end) {
    c652:	2d00      	cmp	r5, #0
    c654:	d03a      	beq.n	c6cc <att_read_group_req+0xb0>
    c656:	2600      	movs	r6, #0
    c658:	2f00      	cmp	r7, #0
    c65a:	d036      	beq.n	c6ca <att_read_group_req+0xae>
	if (start > end) {
    c65c:	42bd      	cmp	r5, r7
    c65e:	d835      	bhi.n	c6cc <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c660:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c664:	a901      	add	r1, sp, #4
    c666:	4640      	mov	r0, r8
    c668:	f88d 6004 	strb.w	r6, [sp, #4]
    c66c:	f8ad 3006 	strh.w	r3, [sp, #6]
    c670:	f017 fb04 	bl	23c7c <bt_uuid_cmp>
    c674:	bb70      	cbnz	r0, c6d4 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
    c676:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    c678:	2214      	movs	r2, #20
    c67a:	2100      	movs	r1, #0
    c67c:	a807      	add	r0, sp, #28
    c67e:	f017 fad0 	bl	23c22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    c682:	2201      	movs	r2, #1
    c684:	2111      	movs	r1, #17
    c686:	4630      	mov	r0, r6
    c688:	f7ff ff86 	bl	c598 <bt_att_create_pdu>
    c68c:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    c68e:	2800      	cmp	r0, #0
    c690:	d03d      	beq.n	c70e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
    c692:	2101      	movs	r1, #1
    c694:	300c      	adds	r0, #12
	data.uuid = uuid;
    c696:	e9cd 4807 	strd	r4, r8, [sp, #28]
    c69a:	f018 ffaa 	bl	255f2 <net_buf_simple_add>
	data.rsp->len = 0U;
    c69e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c6a0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c6a2:	4a1c      	ldr	r2, [pc, #112]	; (c714 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
    c6a4:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c6a6:	4639      	mov	r1, r7
	data.group = NULL;
    c6a8:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c6aa:	4628      	mov	r0, r5
    c6ac:	ab07      	add	r3, sp, #28
    c6ae:	f017 ff70 	bl	24592 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    c6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c6b4:	781b      	ldrb	r3, [r3, #0]
    c6b6:	bb1b      	cbnz	r3, c700 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    c6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6ba:	6998      	ldr	r0, [r3, #24]
    c6bc:	f7ff fa9c 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    c6c0:	9809      	ldr	r0, [sp, #36]	; 0x24
    c6c2:	f00e fb63 	bl	1ad8c <net_buf_unref>
	if (!req) {
    c6c6:	230a      	movs	r3, #10
    c6c8:	e001      	b.n	c6ce <att_read_group_req+0xb2>
			*err = 0U;
    c6ca:	463d      	mov	r5, r7
	if (!req) {
    c6cc:	2301      	movs	r3, #1
    c6ce:	462a      	mov	r2, r5
    c6d0:	2110      	movs	r1, #16
    c6d2:	e00e      	b.n	c6f2 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    c6d4:	f642 0301 	movw	r3, #10241	; 0x2801
    c6d8:	a907      	add	r1, sp, #28
    c6da:	4640      	mov	r0, r8
    c6dc:	f88d 601c 	strb.w	r6, [sp, #28]
    c6e0:	f8ad 301e 	strh.w	r3, [sp, #30]
    c6e4:	f017 faca 	bl	23c7c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c6e8:	2800      	cmp	r0, #0
    c6ea:	d0c4      	beq.n	c676 <att_read_group_req+0x5a>
	if (!req) {
    c6ec:	2310      	movs	r3, #16
    c6ee:	462a      	mov	r2, r5
    c6f0:	4619      	mov	r1, r3
    c6f2:	4620      	mov	r0, r4
    c6f4:	f018 fa29 	bl	24b4a <send_err_rsp.part.0>
		return 0;
    c6f8:	2000      	movs	r0, #0
}
    c6fa:	b00c      	add	sp, #48	; 0x30
    c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
    c700:	9909      	ldr	r1, [sp, #36]	; 0x24
    c702:	4620      	mov	r0, r4
    c704:	f017 ffe2 	bl	246cc <bt_att_chan_send_rsp>
	return 0;
    c708:	e7f6      	b.n	c6f8 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
    c70a:	2004      	movs	r0, #4
    c70c:	e7f5      	b.n	c6fa <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
    c70e:	200e      	movs	r0, #14
    c710:	e7f3      	b.n	c6fa <att_read_group_req+0xde>
    c712:	bf00      	nop
    c714:	0000bf49 	.word	0x0000bf49

0000c718 <att_read_mult_vl_req>:
{
    c718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c71c:	6846      	ldr	r6, [r0, #4]
{
    c71e:	b085      	sub	sp, #20
    c720:	4604      	mov	r4, r0
    c722:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    c724:	4630      	mov	r0, r6
    c726:	2101      	movs	r1, #1
    c728:	f018 febe 	bl	254a8 <bt_gatt_change_aware>
    c72c:	b950      	cbnz	r0, c744 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    c72e:	2105      	movs	r1, #5
    c730:	f104 0090 	add.w	r0, r4, #144	; 0x90
    c734:	f018 f88d 	bl	24852 <atomic_test_and_set_bit>
    c738:	2800      	cmp	r0, #0
    c73a:	d13b      	bne.n	c7b4 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c73c:	2012      	movs	r0, #18
}
    c73e:	b005      	add	sp, #20
    c740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    c744:	2210      	movs	r2, #16
    c746:	2100      	movs	r1, #0
    c748:	4668      	mov	r0, sp
    c74a:	f017 fa6a 	bl	23c22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
    c74e:	2200      	movs	r2, #0
    c750:	2121      	movs	r1, #33	; 0x21
    c752:	4630      	mov	r0, r6
    c754:	f7ff ff20 	bl	c598 <bt_att_create_pdu>
    c758:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c75a:	b368      	cbz	r0, c7b8 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    c75c:	f8df 905c 	ldr.w	r9, [pc, #92]	; c7bc <att_read_mult_vl_req+0xa4>
	data.chan = chan;
    c760:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    c762:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c766:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    c76a:	8a2b      	ldrh	r3, [r5, #16]
    c76c:	2b01      	cmp	r3, #1
    c76e:	d804      	bhi.n	c77a <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
    c770:	9902      	ldr	r1, [sp, #8]
    c772:	4620      	mov	r0, r4
    c774:	f017 ffaa 	bl	246cc <bt_att_chan_send_rsp>
	return 0;
    c778:	e01c      	b.n	c7b4 <att_read_mult_vl_req+0x9c>
    c77a:	4638      	mov	r0, r7
    c77c:	f018 ff72 	bl	25664 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    c780:	466b      	mov	r3, sp
    c782:	464a      	mov	r2, r9
    c784:	4601      	mov	r1, r0
    c786:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c788:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    c78c:	f017 ff01 	bl	24592 <bt_gatt_foreach_attr>
		if (data.err) {
    c790:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c794:	2b00      	cmp	r3, #0
    c796:	d0e8      	beq.n	c76a <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    c798:	9b02      	ldr	r3, [sp, #8]
    c79a:	6998      	ldr	r0, [r3, #24]
    c79c:	f7ff fa2c 	bl	bbf8 <tx_meta_data_free>
			net_buf_unref(data.buf);
    c7a0:	9802      	ldr	r0, [sp, #8]
    c7a2:	f00e faf3 	bl	1ad8c <net_buf_unref>
	if (!req) {
    c7a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c7aa:	4632      	mov	r2, r6
    c7ac:	2120      	movs	r1, #32
    c7ae:	4620      	mov	r0, r4
    c7b0:	f018 f9cb 	bl	24b4a <send_err_rsp.part.0>
			return 0;
    c7b4:	2000      	movs	r0, #0
    c7b6:	e7c2      	b.n	c73e <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
    c7b8:	200e      	movs	r0, #14
    c7ba:	e7c0      	b.n	c73e <att_read_mult_vl_req+0x26>
    c7bc:	000248c3 	.word	0x000248c3

0000c7c0 <att_read_mult_req>:
{
    c7c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c7c4:	6846      	ldr	r6, [r0, #4]
{
    c7c6:	b085      	sub	sp, #20
    c7c8:	4604      	mov	r4, r0
    c7ca:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    c7cc:	4630      	mov	r0, r6
    c7ce:	2101      	movs	r1, #1
    c7d0:	f018 fe6a 	bl	254a8 <bt_gatt_change_aware>
    c7d4:	b950      	cbnz	r0, c7ec <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    c7d6:	2105      	movs	r1, #5
    c7d8:	f104 0090 	add.w	r0, r4, #144	; 0x90
    c7dc:	f018 f839 	bl	24852 <atomic_test_and_set_bit>
    c7e0:	2800      	cmp	r0, #0
    c7e2:	d13b      	bne.n	c85c <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c7e4:	2012      	movs	r0, #18
}
    c7e6:	b005      	add	sp, #20
    c7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    c7ec:	2210      	movs	r2, #16
    c7ee:	2100      	movs	r1, #0
    c7f0:	4668      	mov	r0, sp
    c7f2:	f017 fa16 	bl	23c22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    c7f6:	2200      	movs	r2, #0
    c7f8:	210f      	movs	r1, #15
    c7fa:	4630      	mov	r0, r6
    c7fc:	f7ff fecc 	bl	c598 <bt_att_create_pdu>
    c800:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c802:	b368      	cbz	r0, c860 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c804:	f8df 905c 	ldr.w	r9, [pc, #92]	; c864 <att_read_mult_req+0xa4>
	data.chan = chan;
    c808:	9400      	str	r4, [sp, #0]
    c80a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c80e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    c812:	8a2b      	ldrh	r3, [r5, #16]
    c814:	2b01      	cmp	r3, #1
    c816:	d804      	bhi.n	c822 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
    c818:	9902      	ldr	r1, [sp, #8]
    c81a:	4620      	mov	r0, r4
    c81c:	f017 ff56 	bl	246cc <bt_att_chan_send_rsp>
	return 0;
    c820:	e01c      	b.n	c85c <att_read_mult_req+0x9c>
    c822:	4638      	mov	r0, r7
    c824:	f018 ff1e 	bl	25664 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c828:	466b      	mov	r3, sp
    c82a:	464a      	mov	r2, r9
    c82c:	4601      	mov	r1, r0
    c82e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c830:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c834:	f017 fead 	bl	24592 <bt_gatt_foreach_attr>
		if (data.err) {
    c838:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c83c:	2b00      	cmp	r3, #0
    c83e:	d0e8      	beq.n	c812 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    c840:	9b02      	ldr	r3, [sp, #8]
    c842:	6998      	ldr	r0, [r3, #24]
    c844:	f7ff f9d8 	bl	bbf8 <tx_meta_data_free>
			net_buf_unref(data.buf);
    c848:	9802      	ldr	r0, [sp, #8]
    c84a:	f00e fa9f 	bl	1ad8c <net_buf_unref>
	if (!req) {
    c84e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c852:	4632      	mov	r2, r6
    c854:	210e      	movs	r1, #14
    c856:	4620      	mov	r0, r4
    c858:	f018 f977 	bl	24b4a <send_err_rsp.part.0>
			return 0;
    c85c:	2000      	movs	r0, #0
    c85e:	e7c2      	b.n	c7e6 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
    c860:	200e      	movs	r0, #14
    c862:	e7c0      	b.n	c7e6 <att_read_mult_req+0x26>
    c864:	0002487d 	.word	0x0002487d

0000c868 <att_read_rsp>:
{
    c868:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c86c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    c870:	4604      	mov	r4, r0
    c872:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
    c874:	4640      	mov	r0, r8
    c876:	2101      	movs	r1, #1
{
    c878:	4617      	mov	r7, r2
    c87a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    c87c:	f018 fe14 	bl	254a8 <bt_gatt_change_aware>
    c880:	b948      	cbnz	r0, c896 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    c882:	2105      	movs	r1, #5
    c884:	f104 0090 	add.w	r0, r4, #144	; 0x90
    c888:	f017 ffe3 	bl	24852 <atomic_test_and_set_bit>
    c88c:	bb78      	cbnz	r0, c8ee <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c88e:	2012      	movs	r0, #18
}
    c890:	b004      	add	sp, #16
    c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
    c896:	b38d      	cbz	r5, c8fc <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
    c898:	2210      	movs	r2, #16
    c89a:	2100      	movs	r1, #0
    c89c:	4668      	mov	r0, sp
    c89e:	f017 f9c0 	bl	23c22 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    c8a2:	2200      	movs	r2, #0
    c8a4:	4639      	mov	r1, r7
    c8a6:	4640      	mov	r0, r8
    c8a8:	f7ff fe76 	bl	c598 <bt_att_create_pdu>
    c8ac:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c8ae:	b338      	cbz	r0, c900 <att_read_rsp+0x98>
	data.offset = offset;
    c8b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c8b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c8b8:	2301      	movs	r3, #1
    c8ba:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c8be:	4a11      	ldr	r2, [pc, #68]	; (c904 <att_read_rsp+0x9c>)
	data.chan = chan;
    c8c0:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c8c2:	466b      	mov	r3, sp
    c8c4:	4629      	mov	r1, r5
    c8c6:	4628      	mov	r0, r5
    c8c8:	f017 fe63 	bl	24592 <bt_gatt_foreach_attr>
	if (data.err) {
    c8cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c8d0:	b17b      	cbz	r3, c8f2 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    c8d2:	9b02      	ldr	r3, [sp, #8]
    c8d4:	6998      	ldr	r0, [r3, #24]
    c8d6:	f7ff f98f 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    c8da:	9802      	ldr	r0, [sp, #8]
    c8dc:	f00e fa56 	bl	1ad8c <net_buf_unref>
	if (!req) {
    c8e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c8e4:	462a      	mov	r2, r5
    c8e6:	4631      	mov	r1, r6
    c8e8:	4620      	mov	r0, r4
    c8ea:	f018 f92e 	bl	24b4a <send_err_rsp.part.0>
			return 0;
    c8ee:	2000      	movs	r0, #0
    c8f0:	e7ce      	b.n	c890 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
    c8f2:	9902      	ldr	r1, [sp, #8]
    c8f4:	4620      	mov	r0, r4
    c8f6:	f017 fee9 	bl	246cc <bt_att_chan_send_rsp>
	return 0;
    c8fa:	e7f8      	b.n	c8ee <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
    c8fc:	2001      	movs	r0, #1
    c8fe:	e7c7      	b.n	c890 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
    c900:	200e      	movs	r0, #14
    c902:	e7c5      	b.n	c890 <att_read_rsp+0x28>
    c904:	0002487d 	.word	0x0002487d

0000c908 <att_read_type_req>:
{
    c908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c90c:	8a0d      	ldrh	r5, [r1, #16]
    c90e:	3d04      	subs	r5, #4
    c910:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
    c912:	2d02      	cmp	r5, #2
{
    c914:	4604      	mov	r4, r0
    c916:	b08c      	sub	sp, #48	; 0x30
    c918:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c91a:	d001      	beq.n	c920 <att_read_type_req+0x18>
    c91c:	2d10      	cmp	r5, #16
    c91e:	d150      	bne.n	c9c2 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    c920:	2104      	movs	r1, #4
    c922:	300c      	adds	r0, #12
    c924:	f018 fe96 	bl	25654 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c928:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    c92c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c92e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c930:	1d01      	adds	r1, r0, #4
    c932:	462a      	mov	r2, r5
    c934:	4640      	mov	r0, r8
    c936:	f017 f9cf 	bl	23cd8 <bt_uuid_create>
    c93a:	b188      	cbz	r0, c960 <att_read_type_req+0x58>
	if (!start || !end) {
    c93c:	b19e      	cbz	r6, c966 <att_read_type_req+0x5e>
    c93e:	b18f      	cbz	r7, c964 <att_read_type_req+0x5c>
	if (start > end) {
    c940:	42b7      	cmp	r7, r6
    c942:	d310      	bcc.n	c966 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    c944:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    c946:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    c948:	2100      	movs	r1, #0
    c94a:	eb0d 0002 	add.w	r0, sp, r2
    c94e:	f017 f968 	bl	23c22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    c952:	2201      	movs	r2, #1
    c954:	2109      	movs	r1, #9
    c956:	4628      	mov	r0, r5
    c958:	f7ff fe1e 	bl	c598 <bt_att_create_pdu>
    c95c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    c95e:	b960      	cbnz	r0, c97a <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
    c960:	200e      	movs	r0, #14
    c962:	e007      	b.n	c974 <att_read_type_req+0x6c>
			*err = 0U;
    c964:	463e      	mov	r6, r7
	if (!req) {
    c966:	2301      	movs	r3, #1
    c968:	4632      	mov	r2, r6
    c96a:	2108      	movs	r1, #8
    c96c:	4620      	mov	r0, r4
    c96e:	f018 f8ec 	bl	24b4a <send_err_rsp.part.0>
		return 0;
    c972:	2000      	movs	r0, #0
}
    c974:	b00c      	add	sp, #48	; 0x30
    c976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    c97a:	2101      	movs	r1, #1
    c97c:	300c      	adds	r0, #12
	data.uuid = uuid;
    c97e:	e9cd 4806 	strd	r4, r8, [sp, #24]
    c982:	f018 fe36 	bl	255f2 <net_buf_simple_add>
	data.rsp->len = 0U;
    c986:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c988:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
    c98a:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c98c:	230a      	movs	r3, #10
    c98e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c992:	4a0d      	ldr	r2, [pc, #52]	; (c9c8 <att_read_type_req+0xc0>)
    c994:	ab06      	add	r3, sp, #24
    c996:	4639      	mov	r1, r7
    c998:	4630      	mov	r0, r6
    c99a:	f017 fdfa 	bl	24592 <bt_gatt_foreach_attr>
	if (data.err) {
    c99e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    c9a2:	b14b      	cbz	r3, c9b8 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    c9a4:	9b08      	ldr	r3, [sp, #32]
    c9a6:	6998      	ldr	r0, [r3, #24]
    c9a8:	f7ff f926 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    c9ac:	9808      	ldr	r0, [sp, #32]
    c9ae:	f00e f9ed 	bl	1ad8c <net_buf_unref>
	if (!req) {
    c9b2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    c9b6:	e7d7      	b.n	c968 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
    c9b8:	9908      	ldr	r1, [sp, #32]
    c9ba:	4620      	mov	r0, r4
    c9bc:	f017 fe86 	bl	246cc <bt_att_chan_send_rsp>
	return 0;
    c9c0:	e7d7      	b.n	c972 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
    c9c2:	2004      	movs	r0, #4
    c9c4:	e7d6      	b.n	c974 <att_read_type_req+0x6c>
    c9c6:	bf00      	nop
    c9c8:	0000c039 	.word	0x0000c039

0000c9cc <att_find_type_req>:
{
    c9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9d0:	460f      	mov	r7, r1
    c9d2:	b086      	sub	sp, #24
    c9d4:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    c9d6:	2106      	movs	r1, #6
    c9d8:	f107 000c 	add.w	r0, r7, #12
    c9dc:	f018 fe3a 	bl	25654 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    c9e0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c9e2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
    c9e6:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
    c9e8:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
    c9ec:	b1c5      	cbz	r5, ca20 <att_find_type_req+0x54>
    c9ee:	2300      	movs	r3, #0
    c9f0:	f1b8 0f00 	cmp.w	r8, #0
    c9f4:	d013      	beq.n	ca1e <att_find_type_req+0x52>
	if (start > end) {
    c9f6:	4545      	cmp	r5, r8
    c9f8:	d812      	bhi.n	ca20 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c9fa:	f88d 3000 	strb.w	r3, [sp]
    c9fe:	f88d 3004 	strb.w	r3, [sp, #4]
    ca02:	a901      	add	r1, sp, #4
    ca04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ca08:	4668      	mov	r0, sp
    ca0a:	f8ad 2002 	strh.w	r2, [sp, #2]
    ca0e:	f8ad 3006 	strh.w	r3, [sp, #6]
    ca12:	f017 f933 	bl	23c7c <bt_uuid_cmp>
    ca16:	4606      	mov	r6, r0
    ca18:	b160      	cbz	r0, ca34 <att_find_type_req+0x68>
	if (!req) {
    ca1a:	230a      	movs	r3, #10
    ca1c:	e001      	b.n	ca22 <att_find_type_req+0x56>
			*err = 0U;
    ca1e:	4645      	mov	r5, r8
	if (!req) {
    ca20:	2301      	movs	r3, #1
    ca22:	462a      	mov	r2, r5
    ca24:	2106      	movs	r1, #6
    ca26:	4620      	mov	r0, r4
    ca28:	f018 f88f 	bl	24b4a <send_err_rsp.part.0>
		return 0;
    ca2c:	2000      	movs	r0, #0
}
    ca2e:	b006      	add	sp, #24
    ca30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
    ca34:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    ca38:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
    ca3a:	4601      	mov	r1, r0
    ca3c:	2214      	movs	r2, #20
    ca3e:	a801      	add	r0, sp, #4
    ca40:	f017 f8ef 	bl	23c22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    ca44:	4632      	mov	r2, r6
    ca46:	2107      	movs	r1, #7
    ca48:	4650      	mov	r0, sl
    ca4a:	f7ff fda5 	bl	c598 <bt_att_create_pdu>
    ca4e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    ca50:	b1f8      	cbz	r0, ca92 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ca52:	230a      	movs	r3, #10
    ca54:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ca58:	4a0f      	ldr	r2, [pc, #60]	; (ca98 <att_find_type_req+0xcc>)
	data.chan = chan;
    ca5a:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ca5c:	ab01      	add	r3, sp, #4
    ca5e:	4641      	mov	r1, r8
    ca60:	4628      	mov	r0, r5
	data.value = value;
    ca62:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
    ca66:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ca6a:	f017 fd92 	bl	24592 <bt_gatt_foreach_attr>
	if (data.err) {
    ca6e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ca72:	b14b      	cbz	r3, ca88 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    ca74:	9b02      	ldr	r3, [sp, #8]
    ca76:	6998      	ldr	r0, [r3, #24]
    ca78:	f7ff f8be 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    ca7c:	9802      	ldr	r0, [sp, #8]
    ca7e:	f00e f985 	bl	1ad8c <net_buf_unref>
	if (!req) {
    ca82:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ca86:	e7cc      	b.n	ca22 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
    ca88:	9902      	ldr	r1, [sp, #8]
    ca8a:	4620      	mov	r0, r4
    ca8c:	f017 fe1e 	bl	246cc <bt_att_chan_send_rsp>
	return 0;
    ca90:	e7cc      	b.n	ca2c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
    ca92:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    ca94:	e7cb      	b.n	ca2e <att_find_type_req+0x62>
    ca96:	bf00      	nop
    ca98:	0000bc15 	.word	0x0000bc15

0000ca9c <att_find_info_req>:
{
    ca9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    ca9e:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
    caa0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    caa2:	885e      	ldrh	r6, [r3, #2]
{
    caa4:	b085      	sub	sp, #20
    caa6:	4604      	mov	r4, r0
	if (!start || !end) {
    caa8:	b195      	cbz	r5, cad0 <att_find_info_req+0x34>
    caaa:	b186      	cbz	r6, cace <att_find_info_req+0x32>
	if (start > end) {
    caac:	42b5      	cmp	r5, r6
    caae:	d80f      	bhi.n	cad0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    cab0:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    cab2:	2210      	movs	r2, #16
    cab4:	2100      	movs	r1, #0
    cab6:	4668      	mov	r0, sp
    cab8:	f017 f8b3 	bl	23c22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    cabc:	2200      	movs	r2, #0
    cabe:	2105      	movs	r1, #5
    cac0:	4638      	mov	r0, r7
    cac2:	f7ff fd69 	bl	c598 <bt_att_create_pdu>
    cac6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    cac8:	b958      	cbnz	r0, cae2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    caca:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    cacc:	e007      	b.n	cade <att_find_info_req+0x42>
			*err = 0U;
    cace:	4635      	mov	r5, r6
	if (!req) {
    cad0:	2301      	movs	r3, #1
    cad2:	462a      	mov	r2, r5
    cad4:	2104      	movs	r1, #4
    cad6:	4620      	mov	r0, r4
    cad8:	f018 f837 	bl	24b4a <send_err_rsp.part.0>
		return 0;
    cadc:	2000      	movs	r0, #0
}
    cade:	b005      	add	sp, #20
    cae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    cae2:	466b      	mov	r3, sp
    cae4:	4a0a      	ldr	r2, [pc, #40]	; (cb10 <att_find_info_req+0x74>)
	data.chan = chan;
    cae6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    cae8:	4631      	mov	r1, r6
    caea:	4628      	mov	r0, r5
    caec:	f017 fd51 	bl	24592 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    caf0:	9b02      	ldr	r3, [sp, #8]
    caf2:	b943      	cbnz	r3, cb06 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    caf4:	9b01      	ldr	r3, [sp, #4]
    caf6:	6998      	ldr	r0, [r3, #24]
    caf8:	f7ff f87e 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    cafc:	9801      	ldr	r0, [sp, #4]
    cafe:	f00e f945 	bl	1ad8c <net_buf_unref>
	if (!req) {
    cb02:	230a      	movs	r3, #10
    cb04:	e7e5      	b.n	cad2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
    cb06:	9901      	ldr	r1, [sp, #4]
    cb08:	4620      	mov	r0, r4
    cb0a:	f017 fddf 	bl	246cc <bt_att_chan_send_rsp>
	return 0;
    cb0e:	e7e5      	b.n	cadc <att_find_info_req+0x40>
    cb10:	000245a9 	.word	0x000245a9

0000cb14 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
    cb14:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
    cb16:	4c0b      	ldr	r4, [pc, #44]	; (cb44 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
    cb18:	4d0b      	ldr	r5, [pc, #44]	; (cb48 <bt_att_init+0x34>)
    cb1a:	4620      	mov	r0, r4
    cb1c:	f01a f86a 	bl	26bf4 <z_impl_k_queue_init>
    cb20:	4629      	mov	r1, r5
    cb22:	4620      	mov	r0, r4
    cb24:	f01a f893 	bl	26c4e <k_queue_append>
    cb28:	f105 0114 	add.w	r1, r5, #20
    cb2c:	4620      	mov	r0, r4
    cb2e:	f01a f88e 	bl	26c4e <k_queue_append>
    cb32:	f105 0128 	add.w	r1, r5, #40	; 0x28
    cb36:	4620      	mov	r0, r4
    cb38:	f01a f889 	bl	26c4e <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
    cb3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
    cb40:	f000 bc0c 	b.w	d35c <bt_gatt_init>
    cb44:	20000bdc 	.word	0x20000bdc
    cb48:	20002650 	.word	0x20002650

0000cb4c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    cb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    cb4e:	2300      	movs	r3, #0
{
    cb50:	4605      	mov	r5, r0
    cb52:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    cb54:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    cb56:	f013 fe0d 	bl	20774 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
    cb5a:	4b0b      	ldr	r3, [pc, #44]	; (cb88 <bt_att_req_alloc+0x3c>)
    cb5c:	681b      	ldr	r3, [r3, #0]
    cb5e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    cb60:	bf04      	itt	eq
    cb62:	2500      	moveq	r5, #0
    cb64:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cb66:	a901      	add	r1, sp, #4
    cb68:	4808      	ldr	r0, [pc, #32]	; (cb8c <bt_att_req_alloc+0x40>)
    cb6a:	462a      	mov	r2, r5
    cb6c:	4623      	mov	r3, r4
    cb6e:	f012 fe1d 	bl	1f7ac <k_mem_slab_alloc>
    cb72:	4601      	mov	r1, r0
    cb74:	b930      	cbnz	r0, cb84 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    cb76:	9801      	ldr	r0, [sp, #4]
    cb78:	2210      	movs	r2, #16
    cb7a:	f017 f852 	bl	23c22 <memset>

	return req;
    cb7e:	9801      	ldr	r0, [sp, #4]
}
    cb80:	b003      	add	sp, #12
    cb82:	bd30      	pop	{r4, r5, pc}
		return NULL;
    cb84:	2000      	movs	r0, #0
    cb86:	e7fb      	b.n	cb80 <bt_att_req_alloc+0x34>
    cb88:	2000268c 	.word	0x2000268c
    cb8c:	20000b94 	.word	0x20000b94

0000cb90 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    cb90:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
    cb92:	6883      	ldr	r3, [r0, #8]
{
    cb94:	9001      	str	r0, [sp, #4]
	if (req->buf) {
    cb96:	b14b      	cbz	r3, cbac <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
    cb98:	6998      	ldr	r0, [r3, #24]
    cb9a:	f7ff f82d 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(req->buf);
    cb9e:	9b01      	ldr	r3, [sp, #4]
    cba0:	6898      	ldr	r0, [r3, #8]
    cba2:	f00e f8f3 	bl	1ad8c <net_buf_unref>
		req->buf = NULL;
    cba6:	9b01      	ldr	r3, [sp, #4]
    cba8:	2200      	movs	r2, #0
    cbaa:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    cbac:	4803      	ldr	r0, [pc, #12]	; (cbbc <bt_att_req_free+0x2c>)
    cbae:	a901      	add	r1, sp, #4
    cbb0:	f019 ff52 	bl	26a58 <k_mem_slab_free>
}
    cbb4:	b003      	add	sp, #12
    cbb6:	f85d fb04 	ldr.w	pc, [sp], #4
    cbba:	bf00      	nop
    cbbc:	20000b94 	.word	0x20000b94

0000cbc0 <att_handle_rsp>:
{
    cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbc4:	4604      	mov	r4, r0
    cbc6:	b083      	sub	sp, #12
	k_work_cancel_delayable(&chan->timeout_work);
    cbc8:	30b0      	adds	r0, #176	; 0xb0
{
    cbca:	af02      	add	r7, sp, #8
    cbcc:	460e      	mov	r6, r1
    cbce:	4690      	mov	r8, r2
    cbd0:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
    cbd2:	f01a f929 	bl	26e28 <k_work_cancel_delayable>
	if (!chan->req) {
    cbd6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cbda:	b9e0      	cbnz	r0, cc16 <att_handle_rsp+0x56>
		LOG_WRN("No pending ATT request");
    cbdc:	481f      	ldr	r0, [pc, #124]	; (cc5c <att_handle_rsp+0x9c>)
    cbde:	6803      	ldr	r3, [r0, #0]
    cbe0:	f013 0f06 	tst.w	r3, #6
    cbe4:	d107      	bne.n	cbf6 <att_handle_rsp+0x36>
	att_req_send_process(chan->att);
    cbe6:	6820      	ldr	r0, [r4, #0]
    cbe8:	f017 fecd 	bl	24986 <att_req_send_process>
}
    cbec:	2000      	movs	r0, #0
    cbee:	3704      	adds	r7, #4
    cbf0:	46bd      	mov	sp, r7
    cbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_WRN("No pending ATT request");
    cbf6:	466d      	mov	r5, sp
    cbf8:	b088      	sub	sp, #32
    cbfa:	aa02      	add	r2, sp, #8
    cbfc:	4b18      	ldr	r3, [pc, #96]	; (cc60 <att_handle_rsp+0xa0>)
    cbfe:	6153      	str	r3, [r2, #20]
    cc00:	4b18      	ldr	r3, [pc, #96]	; (cc64 <att_handle_rsp+0xa4>)
    cc02:	6193      	str	r3, [r2, #24]
    cc04:	2303      	movs	r3, #3
    cc06:	f842 3f10 	str.w	r3, [r2, #16]!
    cc0a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    cc0e:	f017 fd27 	bl	24660 <z_log_msg_static_create.constprop.0>
    cc12:	46ad      	mov	sp, r5
	att_req_send_process(chan->att);
    cc14:	e7e7      	b.n	cbe6 <att_handle_rsp+0x26>
	if (chan->req == &cancel) {
    cc16:	4b14      	ldr	r3, [pc, #80]	; (cc68 <att_handle_rsp+0xa8>)
    cc18:	4298      	cmp	r0, r3
    cc1a:	f04f 0900 	mov.w	r9, #0
    cc1e:	d102      	bne.n	cc26 <att_handle_rsp+0x66>
		chan->req = NULL;
    cc20:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    cc24:	e7df      	b.n	cbe6 <att_handle_rsp+0x26>
	func = chan->req->func;
    cc26:	f8d0 a004 	ldr.w	sl, [r0, #4]
	chan->req->func = NULL;
    cc2a:	f8c0 9004 	str.w	r9, [r0, #4]
	params = chan->req->user_data;
    cc2e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cc32:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	bt_att_req_free(chan->req);
    cc36:	f7ff ffab 	bl	cb90 <bt_att_req_free>
	att_req_send_process(chan->att);
    cc3a:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
    cc3c:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
    cc40:	f017 fea1 	bl	24986 <att_req_send_process>
	if (func) {
    cc44:	f1ba 0f00 	cmp.w	sl, #0
    cc48:	d0d0      	beq.n	cbec <att_handle_rsp+0x2c>
		func(chan->att->conn, err, pdu, len, params);
    cc4a:	6820      	ldr	r0, [r4, #0]
    cc4c:	f8cd b000 	str.w	fp, [sp]
    cc50:	6800      	ldr	r0, [r0, #0]
    cc52:	4643      	mov	r3, r8
    cc54:	4632      	mov	r2, r6
    cc56:	4629      	mov	r1, r5
    cc58:	47d0      	blx	sl
    cc5a:	e7c7      	b.n	cbec <att_handle_rsp+0x2c>
    cc5c:	20000ae0 	.word	0x20000ae0
    cc60:	0002cd2f 	.word	0x0002cd2f
    cc64:	0002cd73 	.word	0x0002cd73
    cc68:	20002690 	.word	0x20002690

0000cc6c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel || !rsp->error) {
    cc6c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
	rsp = (void *)buf->data;
    cc70:	68ca      	ldr	r2, [r1, #12]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
    cc72:	b153      	cbz	r3, cc8a <att_error_rsp+0x1e>
    cc74:	4906      	ldr	r1, [pc, #24]	; (cc90 <att_error_rsp+0x24>)
    cc76:	428b      	cmp	r3, r1
    cc78:	d007      	beq.n	cc8a <att_error_rsp+0x1e>
    cc7a:	78d3      	ldrb	r3, [r2, #3]
		err = BT_ATT_ERR_UNLIKELY;
    cc7c:	2b00      	cmp	r3, #0
    cc7e:	bf08      	it	eq
    cc80:	230e      	moveq	r3, #14
	return att_handle_rsp(chan, NULL, 0, err);
    cc82:	2200      	movs	r2, #0
    cc84:	4611      	mov	r1, r2
    cc86:	f7ff bf9b 	b.w	cbc0 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    cc8a:	230e      	movs	r3, #14
    cc8c:	e7f9      	b.n	cc82 <att_error_rsp+0x16>
    cc8e:	bf00      	nop
    cc90:	20002690 	.word	0x20002690

0000cc94 <bt_att_disconnected>:
{
    cc94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
    cc98:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
    cc9c:	4604      	mov	r4, r0
	if (!att_chan->att) {
    cc9e:	2e00      	cmp	r6, #0
    cca0:	d05b      	beq.n	cd5a <bt_att_disconnected+0xc6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    cca2:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
    cca6:	f106 0024 	add.w	r0, r6, #36	; 0x24
    ccaa:	f017 fda8 	bl	247fe <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    ccae:	1f27      	subs	r7, r4, #4
    ccb0:	f104 0894 	add.w	r8, r4, #148	; 0x94
    ccb4:	2200      	movs	r2, #0
    ccb6:	2300      	movs	r3, #0
    ccb8:	4640      	mov	r0, r8
    ccba:	f018 fc5a 	bl	25572 <net_buf_get>
    ccbe:	4605      	mov	r5, r0
    ccc0:	bb50      	cbnz	r0, cd18 <bt_att_disconnected+0x84>
	if (chan->req) {
    ccc2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    ccc6:	b12b      	cbz	r3, ccd4 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    ccc8:	4602      	mov	r2, r0
    ccca:	4601      	mov	r1, r0
    cccc:	230e      	movs	r3, #14
    ccce:	4638      	mov	r0, r7
    ccd0:	f7ff ff76 	bl	cbc0 <att_handle_rsp>
	chan->att = NULL;
    ccd4:	2300      	movs	r3, #0
    ccd6:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
    ccda:	2102      	movs	r1, #2
    ccdc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    cce0:	f017 fda6 	bl	24830 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
    cce4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    cce6:	2b00      	cmp	r3, #0
    cce8:	d137      	bne.n	cd5a <bt_att_disconnected+0xc6>
	att_reset(att);
    ccea:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    ccec:	9803      	ldr	r0, [sp, #12]
    ccee:	2200      	movs	r2, #0
    ccf0:	2300      	movs	r3, #0
    ccf2:	300c      	adds	r0, #12
    ccf4:	f018 fc3d 	bl	25572 <net_buf_get>
    ccf8:	4605      	mov	r5, r0
    ccfa:	b9a0      	cbnz	r0, cd26 <bt_att_disconnected+0x92>
	while (!sys_slist_is_empty(&att->reqs)) {
    ccfc:	9803      	ldr	r0, [sp, #12]
	return list->head;
    ccfe:	6845      	ldr	r5, [r0, #4]
    cd00:	b9c5      	cbnz	r5, cd34 <bt_att_disconnected+0xa0>
	att->conn = NULL;
    cd02:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    cd04:	a903      	add	r1, sp, #12
    cd06:	4816      	ldr	r0, [pc, #88]	; (cd60 <bt_att_disconnected+0xcc>)
    cd08:	f019 fea6 	bl	26a58 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
    cd0c:	6820      	ldr	r0, [r4, #0]
}
    cd0e:	b004      	add	sp, #16
    cd10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
    cd14:	f001 b8a8 	b.w	de68 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    cd18:	69a8      	ldr	r0, [r5, #24]
    cd1a:	f7fe ff6d 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(buf);
    cd1e:	4628      	mov	r0, r5
    cd20:	f00e f834 	bl	1ad8c <net_buf_unref>
    cd24:	e7c6      	b.n	ccb4 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    cd26:	69a8      	ldr	r0, [r5, #24]
    cd28:	f7fe ff66 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(buf);
    cd2c:	4628      	mov	r0, r5
    cd2e:	f00e f82d 	bl	1ad8c <net_buf_unref>
    cd32:	e7db      	b.n	ccec <bt_att_disconnected+0x58>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    cd34:	6882      	ldr	r2, [r0, #8]
	return node->next;
    cd36:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    cd38:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    cd3a:	4295      	cmp	r5, r2
	list->tail = node;
    cd3c:	bf08      	it	eq
    cd3e:	6083      	streq	r3, [r0, #8]
		if (req->func) {
    cd40:	686e      	ldr	r6, [r5, #4]
    cd42:	b136      	cbz	r6, cd52 <bt_att_disconnected+0xbe>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    cd44:	68eb      	ldr	r3, [r5, #12]
    cd46:	9300      	str	r3, [sp, #0]
    cd48:	2300      	movs	r3, #0
    cd4a:	6800      	ldr	r0, [r0, #0]
    cd4c:	461a      	mov	r2, r3
    cd4e:	210e      	movs	r1, #14
    cd50:	47b0      	blx	r6
		bt_att_req_free(req);
    cd52:	4628      	mov	r0, r5
    cd54:	f7ff ff1c 	bl	cb90 <bt_att_req_free>
    cd58:	e7d0      	b.n	ccfc <bt_att_disconnected+0x68>
}
    cd5a:	b004      	add	sp, #16
    cd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd60:	20000b5c 	.word	0x20000b5c

0000cd64 <att_timeout>:
{
    cd64:	b5b0      	push	{r4, r5, r7, lr}
    cd66:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
    cd68:	480c      	ldr	r0, [pc, #48]	; (cd9c <att_timeout+0x38>)
    cd6a:	6803      	ldr	r3, [r0, #0]
    cd6c:	075b      	lsls	r3, r3, #29
{
    cd6e:	af00      	add	r7, sp, #0
	LOG_ERR("ATT Timeout");
    cd70:	d00e      	beq.n	cd90 <att_timeout+0x2c>
    cd72:	466d      	mov	r5, sp
    cd74:	b088      	sub	sp, #32
    cd76:	466a      	mov	r2, sp
    cd78:	4b09      	ldr	r3, [pc, #36]	; (cda0 <att_timeout+0x3c>)
    cd7a:	6153      	str	r3, [r2, #20]
    cd7c:	4b09      	ldr	r3, [pc, #36]	; (cda4 <att_timeout+0x40>)
    cd7e:	6193      	str	r3, [r2, #24]
    cd80:	2303      	movs	r3, #3
    cd82:	f842 3f10 	str.w	r3, [r2, #16]!
    cd86:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cd8a:	f017 fc69 	bl	24660 <z_log_msg_static_create.constprop.0>
    cd8e:	46ad      	mov	sp, r5
	bt_att_disconnected(&chan->chan.chan);
    cd90:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
    cd94:	f7ff ff7e 	bl	cc94 <bt_att_disconnected>
}
    cd98:	46bd      	mov	sp, r7
    cd9a:	bdb0      	pop	{r4, r5, r7, pc}
    cd9c:	20000ae0 	.word	0x20000ae0
    cda0:	0002cd4a 	.word	0x0002cd4a
    cda4:	0002cd5a 	.word	0x0002cd5a

0000cda8 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    cda8:	b510      	push	{r4, lr}
    cdaa:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
    cdac:	b338      	cbz	r0, cdfe <bt_att_req_cancel+0x56>
    cdae:	b331      	cbz	r1, cdfe <bt_att_req_cancel+0x56>
		return;
	}

	att = att_get(conn);
    cdb0:	f7ff f87c 	bl	beac <att_get>
	if (!att) {
    cdb4:	b318      	cbz	r0, cdfe <bt_att_req_cancel+0x56>
	return list->head;
    cdb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cdb8:	b1db      	cbz	r3, cdf2 <bt_att_req_cancel+0x4a>
	return node->next;
    cdba:	f853 29e0 	ldr.w	r2, [r3], #-224
    cdbe:	b102      	cbz	r2, cdc2 <bt_att_req_cancel+0x1a>
    cdc0:	3ae0      	subs	r2, #224	; 0xe0
	if (chan->req != req) {
    cdc2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    cdc6:	428c      	cmp	r4, r1
    cdc8:	d00b      	beq.n	cde2 <bt_att_req_cancel+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cdca:	b192      	cbz	r2, cdf2 <bt_att_req_cancel+0x4a>
    cdcc:	4613      	mov	r3, r2
    cdce:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    cdd2:	2a00      	cmp	r2, #0
    cdd4:	d0f5      	beq.n	cdc2 <bt_att_req_cancel+0x1a>
	if (chan->req != req) {
    cdd6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    cdda:	428c      	cmp	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cddc:	f1a2 02e0 	sub.w	r2, r2, #224	; 0xe0
	if (chan->req != req) {
    cde0:	d1f4      	bne.n	cdcc <bt_att_req_cancel+0x24>
	chan->req = &cancel;
    cde2:	4a07      	ldr	r2, [pc, #28]	; (ce00 <bt_att_req_cancel+0x58>)
    cde4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	bt_att_req_free(req);
    cde8:	4620      	mov	r0, r4

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
    cdea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
    cdee:	f7ff becf 	b.w	cb90 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
    cdf2:	3004      	adds	r0, #4
    cdf4:	4621      	mov	r1, r4
    cdf6:	f017 fd02 	bl	247fe <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
    cdfa:	4620      	mov	r0, r4
    cdfc:	e7f5      	b.n	cdea <bt_att_req_cancel+0x42>
}
    cdfe:	bd10      	pop	{r4, pc}
    ce00:	20002690 	.word	0x20002690

0000ce04 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    ce04:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    ce06:	b930      	cbnz	r0, ce16 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    ce08:	4907      	ldr	r1, [pc, #28]	; (ce28 <find_cf_cfg+0x24>)
    ce0a:	4808      	ldr	r0, [pc, #32]	; (ce2c <find_cf_cfg+0x28>)
    ce0c:	f018 f874 	bl	24ef8 <bt_addr_le_eq>
    ce10:	b138      	cbz	r0, ce22 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    ce12:	4807      	ldr	r0, [pc, #28]	; (ce30 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
    ce14:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ce16:	4a05      	ldr	r2, [pc, #20]	; (ce2c <find_cf_cfg+0x28>)
    ce18:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    ce1c:	f017 fa53 	bl	242c6 <bt_conn_is_peer_addr_le>
    ce20:	e7f6      	b.n	ce10 <find_cf_cfg+0xc>
	return NULL;
    ce22:	2000      	movs	r0, #0
    ce24:	e7f6      	b.n	ce14 <find_cf_cfg+0x10>
    ce26:	bf00      	nop
    ce28:	0002b9b3 	.word	0x0002b9b3
    ce2c:	200026b9 	.word	0x200026b9
    ce30:	200026b8 	.word	0x200026b8

0000ce34 <find_sc_cfg>:
{
    ce34:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    ce36:	4c06      	ldr	r4, [pc, #24]	; (ce50 <find_sc_cfg+0x1c>)
    ce38:	7823      	ldrb	r3, [r4, #0]
    ce3a:	4283      	cmp	r3, r0
    ce3c:	d103      	bne.n	ce46 <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
    ce3e:	1c60      	adds	r0, r4, #1
    ce40:	f018 f85a 	bl	24ef8 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
    ce44:	b908      	cbnz	r0, ce4a <find_sc_cfg+0x16>
	return NULL;
    ce46:	2000      	movs	r0, #0
}
    ce48:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    ce4a:	4620      	mov	r0, r4
    ce4c:	e7fc      	b.n	ce48 <find_sc_cfg+0x14>
    ce4e:	bf00      	nop
    ce50:	20003ad6 	.word	0x20003ad6

0000ce54 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
    ce54:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
    ce56:	1c4a      	adds	r2, r1, #1
{
    ce58:	460c      	mov	r4, r1
		if (conn) {
    ce5a:	b138      	cbz	r0, ce6c <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
    ce5c:	7809      	ldrb	r1, [r1, #0]
    ce5e:	f017 fa32 	bl	242c6 <bt_conn_is_peer_addr_le>
    ce62:	b108      	cbz	r0, ce68 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    ce64:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
    ce66:	bd10      	pop	{r4, pc}
	return NULL;
    ce68:	2000      	movs	r0, #0
    ce6a:	e7fc      	b.n	ce66 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    ce6c:	4902      	ldr	r1, [pc, #8]	; (ce78 <find_ccc_cfg+0x24>)
    ce6e:	4610      	mov	r0, r2
    ce70:	f018 f842 	bl	24ef8 <bt_addr_le_eq>
    ce74:	e7f5      	b.n	ce62 <find_ccc_cfg+0xe>
    ce76:	bf00      	nop
    ce78:	0002b9b3 	.word	0x0002b9b3

0000ce7c <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    ce7c:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    ce7e:	b930      	cbnz	r0, ce8e <gatt_sub_find+0x12>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
    ce80:	4907      	ldr	r1, [pc, #28]	; (cea0 <gatt_sub_find+0x24>)
    ce82:	4808      	ldr	r0, [pc, #32]	; (cea4 <gatt_sub_find+0x28>)
    ce84:	f018 f838 	bl	24ef8 <bt_addr_le_eq>
    ce88:	b138      	cbz	r0, ce9a <gatt_sub_find+0x1e>
		struct gatt_sub *sub = &subscriptions[i];
    ce8a:	4807      	ldr	r0, [pc, #28]	; (cea8 <gatt_sub_find+0x2c>)
			return sub;
		}
	}

	return NULL;
}
    ce8c:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    ce8e:	4a05      	ldr	r2, [pc, #20]	; (cea4 <gatt_sub_find+0x28>)
    ce90:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    ce94:	f017 fa17 	bl	242c6 <bt_conn_is_peer_addr_le>
    ce98:	e7f6      	b.n	ce88 <gatt_sub_find+0xc>
	return NULL;
    ce9a:	2000      	movs	r0, #0
    ce9c:	e7f6      	b.n	ce8c <gatt_sub_find+0x10>
    ce9e:	bf00      	nop
    cea0:	0002b9b3 	.word	0x0002b9b3
    cea4:	200026d9 	.word	0x200026d9
    cea8:	200026d8 	.word	0x200026d8

0000ceac <gatt_sub_remove>:
{
    ceac:	b538      	push	{r3, r4, r5, lr}
    ceae:	460c      	mov	r4, r1
	if (params) {
    ceb0:	4619      	mov	r1, r3
    ceb2:	b16b      	cbz	r3, ced0 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
    ceb4:	f103 0518 	add.w	r5, r3, #24
    ceb8:	699b      	ldr	r3, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
    ceba:	b98a      	cbnz	r2, cee0 <gatt_sub_remove+0x34>
    cebc:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
    cebe:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
    cec0:	4295      	cmp	r5, r2
    cec2:	d100      	bne.n	cec6 <gatt_sub_remove+0x1a>
	list->tail = node;
    cec4:	60e3      	str	r3, [r4, #12]
	parent->next = child;
    cec6:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
    cec8:	680d      	ldr	r5, [r1, #0]
    ceca:	618b      	str	r3, [r1, #24]
    cecc:	461a      	mov	r2, r3
    cece:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
    ced0:	68a3      	ldr	r3, [r4, #8]
    ced2:	b95b      	cbnz	r3, ceec <gatt_sub_remove+0x40>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
    ced4:	1c60      	adds	r0, r4, #1
    ced6:	4906      	ldr	r1, [pc, #24]	; (cef0 <gatt_sub_remove+0x44>)
}
    ced8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
    cedc:	f018 b829 	b.w	24f32 <bt_addr_le_copy>
    cee0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    cee2:	68e3      	ldr	r3, [r4, #12]
    cee4:	429d      	cmp	r5, r3
	list->tail = node;
    cee6:	bf08      	it	eq
    cee8:	60e2      	streq	r2, [r4, #12]
}
    ceea:	e7ec      	b.n	cec6 <gatt_sub_remove+0x1a>
}
    ceec:	bd38      	pop	{r3, r4, r5, pc}
    ceee:	bf00      	nop
    cef0:	0002b9b3 	.word	0x0002b9b3

0000cef4 <cf_write>:
{
    cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cef8:	af00      	add	r7, sp, #0
    cefa:	461e      	mov	r6, r3
    cefc:	8c3b      	ldrh	r3, [r7, #32]
	if (offset > sizeof(cfg->data)) {
    cefe:	2b01      	cmp	r3, #1
{
    cf00:	4680      	mov	r8, r0
    cf02:	4691      	mov	r9, r2
	if (offset > sizeof(cfg->data)) {
    cf04:	d848      	bhi.n	cf98 <cf_write+0xa4>
	if (offset + len > sizeof(cfg->data)) {
    cf06:	4433      	add	r3, r6
    cf08:	2b01      	cmp	r3, #1
    cf0a:	4635      	mov	r5, r6
    cf0c:	dc47      	bgt.n	cf9e <cf_write+0xaa>
	cfg = find_cf_cfg(conn);
    cf0e:	f7ff ff79 	bl	ce04 <find_cf_cfg>
	if (!cfg) {
    cf12:	4604      	mov	r4, r0
    cf14:	b9f0      	cbnz	r0, cf54 <cf_write+0x60>
		cfg = find_cf_cfg(NULL);
    cf16:	f7ff ff75 	bl	ce04 <find_cf_cfg>
	if (!cfg) {
    cf1a:	4604      	mov	r4, r0
    cf1c:	b9d0      	cbnz	r0, cf54 <cf_write+0x60>
		LOG_WRN("No space to store Client Supported Features");
    cf1e:	4823      	ldr	r0, [pc, #140]	; (cfac <cf_write+0xb8>)
    cf20:	6803      	ldr	r3, [r0, #0]
    cf22:	f013 0f06 	tst.w	r3, #6
    cf26:	d105      	bne.n	cf34 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    cf28:	f06f 0510 	mvn.w	r5, #16
}
    cf2c:	4628      	mov	r0, r5
    cf2e:	46bd      	mov	sp, r7
    cf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("No space to store Client Supported Features");
    cf34:	466c      	mov	r4, sp
    cf36:	b088      	sub	sp, #32
    cf38:	466a      	mov	r2, sp
    cf3a:	4b1d      	ldr	r3, [pc, #116]	; (cfb0 <cf_write+0xbc>)
    cf3c:	6153      	str	r3, [r2, #20]
    cf3e:	4b1d      	ldr	r3, [pc, #116]	; (cfb4 <cf_write+0xc0>)
    cf40:	6193      	str	r3, [r2, #24]
    cf42:	2303      	movs	r3, #3
    cf44:	f842 3f10 	str.w	r3, [r2, #16]!
    cf48:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    cf4c:	f018 f803 	bl	24f56 <z_log_msg_static_create.constprop.0>
    cf50:	46a5      	mov	sp, r4
    cf52:	e7e9      	b.n	cf28 <cf_write+0x34>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    cf54:	b196      	cbz	r6, cf7c <cf_write+0x88>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    cf56:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
    cf58:	f899 2000 	ldrb.w	r2, [r9]
    cf5c:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    cf5e:	fa21 f003 	lsr.w	r0, r1, r3
    cf62:	07c6      	lsls	r6, r0, #31
    cf64:	d503      	bpl.n	cf6e <cf_write+0x7a>
		    !(value[i / 8] & BIT(i % 8))) {
    cf66:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    cf6a:	07c0      	lsls	r0, r0, #31
    cf6c:	d51a      	bpl.n	cfa4 <cf_write+0xb0>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    cf6e:	3301      	adds	r3, #1
    cf70:	2b03      	cmp	r3, #3
    cf72:	d1f4      	bne.n	cf5e <cf_write+0x6a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    cf74:	f002 0207 	and.w	r2, r2, #7
    cf78:	4311      	orrs	r1, r2
    cf7a:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    cf7c:	f108 0188 	add.w	r1, r8, #136	; 0x88
    cf80:	1c60      	adds	r0, r4, #1
    cf82:	f017 ffd6 	bl	24f32 <bt_addr_le_copy>
	cfg->id = conn->id;
    cf86:	4620      	mov	r0, r4
    cf88:	f898 3008 	ldrb.w	r3, [r8, #8]
    cf8c:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    cf90:	2101      	movs	r1, #1
    cf92:	f017 ffbf 	bl	24f14 <atomic_or>
}
    cf96:	e7c9      	b.n	cf2c <cf_write+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cf98:	f06f 0506 	mvn.w	r5, #6
    cf9c:	e7c6      	b.n	cf2c <cf_write+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    cf9e:	f06f 050c 	mvn.w	r5, #12
    cfa2:	e7c3      	b.n	cf2c <cf_write+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    cfa4:	f06f 0512 	mvn.w	r5, #18
    cfa8:	e7c0      	b.n	cf2c <cf_write+0x38>
    cfaa:	bf00      	nop
    cfac:	20000af8 	.word	0x20000af8
    cfb0:	0002cdeb 	.word	0x0002cdeb
    cfb4:	0002d04e 	.word	0x0002d04e

0000cfb8 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, uint8_t err,
			       const void *pdu, uint16_t length,
			       void *user_data)
{
    cfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfbc:	af00      	add	r7, sp, #0
    cfbe:	4688      	mov	r8, r1
    cfc0:	69bc      	ldr	r4, [r7, #24]
    cfc2:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cfc4:	f06f 0104 	mvn.w	r1, #4
    cfc8:	f104 0014 	add.w	r0, r4, #20
    cfcc:	f017 ffb4 	bl	24f38 <atomic_and>
	LOG_DBG("err 0x%02x", err);

	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    cfd0:	f1b8 0f00 	cmp.w	r8, #0
    cfd4:	d020      	beq.n	d018 <gatt_write_ccc_rsp+0x60>
		struct gatt_sub *sub;
		sys_snode_t *node, *tmp;

		sub = gatt_sub_find(conn);
    cfd6:	4628      	mov	r0, r5
    cfd8:	f7ff ff50 	bl	ce7c <gatt_sub_find>
		if (!sub) {
    cfdc:	4601      	mov	r1, r0
    cfde:	b188      	cbz	r0, d004 <gatt_write_ccc_rsp+0x4c>
	return list->head;
    cfe0:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
    cfe2:	b14b      	cbz	r3, cff8 <gatt_write_ccc_rsp+0x40>
	return node->next;
    cfe4:	681a      	ldr	r2, [r3, #0]
			return;
		}

		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
			if (node == &params->node) {
    cfe6:	f104 0618 	add.w	r6, r4, #24
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
    cfea:	b12b      	cbz	r3, cff8 <gatt_write_ccc_rsp+0x40>
			if (node == &params->node) {
    cfec:	42b3      	cmp	r3, r6
    cfee:	d10c      	bne.n	d00a <gatt_write_ccc_rsp+0x52>
				gatt_sub_remove(conn, sub, tmp, params);
    cff0:	4623      	mov	r3, r4
    cff2:	4628      	mov	r0, r5
    cff4:	f7ff ff5a 	bl	ceac <gatt_sub_remove>
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}

	if (params->subscribe) {
    cff8:	6863      	ldr	r3, [r4, #4]
    cffa:	b1bb      	cbz	r3, d02c <gatt_write_ccc_rsp+0x74>
		params->subscribe(conn, err, params);
    cffc:	4622      	mov	r2, r4
	} else if (params->write) {
		/* TODO: Remove after deprecation */
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
		params->write(conn, err, NULL);
    cffe:	4641      	mov	r1, r8
    d000:	4628      	mov	r0, r5
    d002:	4798      	blx	r3
	}
}
    d004:	46bd      	mov	sp, r7
    d006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    d00a:	b11a      	cbz	r2, d014 <gatt_write_ccc_rsp+0x5c>
	return node->next;
    d00c:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
    d00e:	4613      	mov	r3, r2
    d010:	4602      	mov	r2, r0
    d012:	e7ea      	b.n	cfea <gatt_write_ccc_rsp+0x32>
    d014:	4610      	mov	r0, r2
    d016:	e7fa      	b.n	d00e <gatt_write_ccc_rsp+0x56>
	} else if (!params->value) {
    d018:	8a23      	ldrh	r3, [r4, #16]
    d01a:	2b00      	cmp	r3, #0
    d01c:	d1ec      	bne.n	cff8 <gatt_write_ccc_rsp+0x40>
		params->notify(conn, params, NULL, 0);
    d01e:	6826      	ldr	r6, [r4, #0]
    d020:	4643      	mov	r3, r8
    d022:	4642      	mov	r2, r8
    d024:	4621      	mov	r1, r4
    d026:	4628      	mov	r0, r5
    d028:	47b0      	blx	r6
    d02a:	e7e5      	b.n	cff8 <gatt_write_ccc_rsp+0x40>
	} else if (params->write) {
    d02c:	68a3      	ldr	r3, [r4, #8]
    d02e:	2b00      	cmp	r3, #0
    d030:	d0e8      	beq.n	d004 <gatt_write_ccc_rsp+0x4c>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
    d032:	480b      	ldr	r0, [pc, #44]	; (d060 <gatt_write_ccc_rsp+0xa8>)
    d034:	6803      	ldr	r3, [r0, #0]
    d036:	f013 0f06 	tst.w	r3, #6
    d03a:	d00e      	beq.n	d05a <gatt_write_ccc_rsp+0xa2>
    d03c:	466e      	mov	r6, sp
    d03e:	b088      	sub	sp, #32
    d040:	466a      	mov	r2, sp
    d042:	4b08      	ldr	r3, [pc, #32]	; (d064 <gatt_write_ccc_rsp+0xac>)
    d044:	6153      	str	r3, [r2, #20]
    d046:	4b08      	ldr	r3, [pc, #32]	; (d068 <gatt_write_ccc_rsp+0xb0>)
    d048:	6193      	str	r3, [r2, #24]
    d04a:	2303      	movs	r3, #3
    d04c:	f842 3f10 	str.w	r3, [r2, #16]!
    d050:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d054:	f017 ff7f 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d058:	46b5      	mov	sp, r6
		params->write(conn, err, NULL);
    d05a:	68a3      	ldr	r3, [r4, #8]
    d05c:	2200      	movs	r2, #0
    d05e:	e7ce      	b.n	cffe <gatt_write_ccc_rsp+0x46>
    d060:	20000af8 	.word	0x20000af8
    d064:	0002ce1b 	.word	0x0002ce1b
    d068:	0002cfde 	.word	0x0002cfde

0000d06c <bt_gatt_attr_write_ccc>:
{
    d06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d070:	af00      	add	r7, sp, #0
    d072:	461e      	mov	r6, r3
    d074:	8c3b      	ldrh	r3, [r7, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d076:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    d07a:	4682      	mov	sl, r0
    d07c:	4688      	mov	r8, r1
	if (offset) {
    d07e:	2b00      	cmp	r3, #0
    d080:	d156      	bne.n	d130 <bt_gatt_attr_write_ccc+0xc4>
	if (!len || len > sizeof(uint16_t)) {
    d082:	1e73      	subs	r3, r6, #1
    d084:	2b01      	cmp	r3, #1
    d086:	d856      	bhi.n	d136 <bt_gatt_attr_write_ccc+0xca>
	if (len < sizeof(uint16_t)) {
    d088:	2e01      	cmp	r6, #1
	cfg = find_ccc_cfg(conn, ccc);
    d08a:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    d08c:	7815      	ldrb	r5, [r2, #0]
    d08e:	bf18      	it	ne
    d090:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
    d092:	f7ff fedf 	bl	ce54 <find_ccc_cfg>
	if (!cfg) {
    d096:	4604      	mov	r4, r0
    d098:	bb48      	cbnz	r0, d0ee <bt_gatt_attr_write_ccc+0x82>
		if (!value) {
    d09a:	b91d      	cbnz	r5, d0a4 <bt_gatt_attr_write_ccc+0x38>
			return len;
    d09c:	4630      	mov	r0, r6
}
    d09e:	46bd      	mov	sp, r7
    d0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    d0a4:	4649      	mov	r1, r9
    d0a6:	f7ff fed5 	bl	ce54 <find_ccc_cfg>
		if (!cfg) {
    d0aa:	4604      	mov	r4, r0
    d0ac:	b9b8      	cbnz	r0, d0de <bt_gatt_attr_write_ccc+0x72>
			LOG_WRN("No space to store CCC cfg");
    d0ae:	4823      	ldr	r0, [pc, #140]	; (d13c <bt_gatt_attr_write_ccc+0xd0>)
    d0b0:	6803      	ldr	r3, [r0, #0]
    d0b2:	f013 0f06 	tst.w	r3, #6
    d0b6:	d102      	bne.n	d0be <bt_gatt_attr_write_ccc+0x52>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d0b8:	f06f 0010 	mvn.w	r0, #16
    d0bc:	e7ef      	b.n	d09e <bt_gatt_attr_write_ccc+0x32>
			LOG_WRN("No space to store CCC cfg");
    d0be:	466c      	mov	r4, sp
    d0c0:	b088      	sub	sp, #32
    d0c2:	466a      	mov	r2, sp
    d0c4:	4b1e      	ldr	r3, [pc, #120]	; (d140 <bt_gatt_attr_write_ccc+0xd4>)
    d0c6:	6153      	str	r3, [r2, #20]
    d0c8:	4b1e      	ldr	r3, [pc, #120]	; (d144 <bt_gatt_attr_write_ccc+0xd8>)
    d0ca:	6193      	str	r3, [r2, #24]
    d0cc:	2303      	movs	r3, #3
    d0ce:	f842 3f10 	str.w	r3, [r2, #16]!
    d0d2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d0d6:	f017 ff3e 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d0da:	46a5      	mov	sp, r4
    d0dc:	e7ec      	b.n	d0b8 <bt_gatt_attr_write_ccc+0x4c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d0de:	f10a 0188 	add.w	r1, sl, #136	; 0x88
    d0e2:	3001      	adds	r0, #1
    d0e4:	f017 ff25 	bl	24f32 <bt_addr_le_copy>
		cfg->id = conn->id;
    d0e8:	f89a 3008 	ldrb.w	r3, [sl, #8]
    d0ec:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    d0ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
    d0f2:	b98b      	cbnz	r3, d118 <bt_gatt_attr_write_ccc+0xac>
	cfg->value = value;
    d0f4:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    d0f6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    d0fa:	42ab      	cmp	r3, r5
    d0fc:	d003      	beq.n	d106 <bt_gatt_attr_write_ccc+0x9a>
		gatt_ccc_changed(attr, ccc);
    d0fe:	4649      	mov	r1, r9
    d100:	4640      	mov	r0, r8
    d102:	f017 fe85 	bl	24e10 <gatt_ccc_changed>
	if (!value) {
    d106:	2d00      	cmp	r5, #0
    d108:	d1c8      	bne.n	d09c <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d10a:	490f      	ldr	r1, [pc, #60]	; (d148 <bt_gatt_attr_write_ccc+0xdc>)
    d10c:	1c60      	adds	r0, r4, #1
    d10e:	f017 ff10 	bl	24f32 <bt_addr_le_copy>
	cfg->id = 0U;
    d112:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    d114:	8125      	strh	r5, [r4, #8]
}
    d116:	e7c1      	b.n	d09c <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    d118:	462a      	mov	r2, r5
    d11a:	4641      	mov	r1, r8
    d11c:	4650      	mov	r0, sl
    d11e:	4798      	blx	r3
		if (write < 0) {
    d120:	2800      	cmp	r0, #0
    d122:	dbbc      	blt.n	d09e <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
    d124:	3801      	subs	r0, #1
    d126:	2801      	cmp	r0, #1
    d128:	d9e4      	bls.n	d0f4 <bt_gatt_attr_write_ccc+0x88>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    d12a:	f06f 000d 	mvn.w	r0, #13
    d12e:	e7b6      	b.n	d09e <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d130:	f06f 0006 	mvn.w	r0, #6
    d134:	e7b3      	b.n	d09e <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d136:	f06f 000c 	mvn.w	r0, #12
    d13a:	e7b0      	b.n	d09e <bt_gatt_attr_write_ccc+0x32>
    d13c:	20000af8 	.word	0x20000af8
    d140:	0002ce56 	.word	0x0002ce56
    d144:	0002d02f 	.word	0x0002d02f
    d148:	0002b9b3 	.word	0x0002b9b3

0000d14c <clear_cf_cfg>:
{
    d14c:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d14e:	490c      	ldr	r1, [pc, #48]	; (d180 <clear_cf_cfg+0x34>)
{
    d150:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d152:	3001      	adds	r0, #1
    d154:	f017 feed 	bl	24f32 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
    d158:	f104 0008 	add.w	r0, r4, #8
    d15c:	2201      	movs	r2, #1
    d15e:	2100      	movs	r1, #0
    d160:	f016 fd5f 	bl	23c22 <memset>
    d164:	f3bf 8f5b 	dmb	ish
    d168:	340c      	adds	r4, #12
    d16a:	2300      	movs	r3, #0
    d16c:	e854 2f00 	ldrex	r2, [r4]
    d170:	e844 3100 	strex	r1, r3, [r4]
    d174:	2900      	cmp	r1, #0
    d176:	d1f9      	bne.n	d16c <clear_cf_cfg+0x20>
    d178:	f3bf 8f5b 	dmb	ish
}
    d17c:	bd10      	pop	{r4, pc}
    d17e:	bf00      	nop
    d180:	0002b9b3 	.word	0x0002b9b3

0000d184 <sc_save>:
{
    d184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d188:	af00      	add	r7, sp, #0
    d18a:	4681      	mov	r9, r0
    d18c:	4688      	mov	r8, r1
    d18e:	4616      	mov	r6, r2
    d190:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    d192:	f7ff fe4f 	bl	ce34 <find_sc_cfg>
	if (!cfg) {
    d196:	4604      	mov	r4, r0
    d198:	b9f8      	cbnz	r0, d1da <sc_save+0x56>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d19a:	4916      	ldr	r1, [pc, #88]	; (d1f4 <sc_save+0x70>)
    d19c:	f7ff fe4a 	bl	ce34 <find_sc_cfg>
		if (!cfg) {
    d1a0:	4604      	mov	r4, r0
    d1a2:	b9a8      	cbnz	r0, d1d0 <sc_save+0x4c>
			LOG_ERR("unable to save SC: no cfg left");
    d1a4:	4814      	ldr	r0, [pc, #80]	; (d1f8 <sc_save+0x74>)
    d1a6:	6803      	ldr	r3, [r0, #0]
    d1a8:	075b      	lsls	r3, r3, #29
    d1aa:	d00e      	beq.n	d1ca <sc_save+0x46>
    d1ac:	466c      	mov	r4, sp
    d1ae:	b088      	sub	sp, #32
    d1b0:	466a      	mov	r2, sp
    d1b2:	4b12      	ldr	r3, [pc, #72]	; (d1fc <sc_save+0x78>)
    d1b4:	6153      	str	r3, [r2, #20]
    d1b6:	4b12      	ldr	r3, [pc, #72]	; (d200 <sc_save+0x7c>)
    d1b8:	6193      	str	r3, [r2, #24]
    d1ba:	2303      	movs	r3, #3
    d1bc:	f842 3f10 	str.w	r3, [r2, #16]!
    d1c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d1c4:	f017 fec7 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d1c8:	46a5      	mov	sp, r4
}
    d1ca:	46bd      	mov	sp, r7
    d1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg->id = id;
    d1d0:	f800 9b01 	strb.w	r9, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    d1d4:	4641      	mov	r1, r8
    d1d6:	f017 feac 	bl	24f32 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    d1da:	8922      	ldrh	r2, [r4, #8]
    d1dc:	8963      	ldrh	r3, [r4, #10]
    d1de:	b91a      	cbnz	r2, d1e8 <sc_save+0x64>
    d1e0:	b92b      	cbnz	r3, d1ee <sc_save+0x6a>
		cfg->data.start = start;
    d1e2:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    d1e4:	8165      	strh	r5, [r4, #10]
    d1e6:	e7f0      	b.n	d1ca <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
    d1e8:	4296      	cmp	r6, r2
		*start = new_start;
    d1ea:	bf38      	it	cc
    d1ec:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
    d1ee:	429d      	cmp	r5, r3
    d1f0:	d9eb      	bls.n	d1ca <sc_save+0x46>
    d1f2:	e7f7      	b.n	d1e4 <sc_save+0x60>
    d1f4:	0002b9b3 	.word	0x0002b9b3
    d1f8:	20000af8 	.word	0x20000af8
    d1fc:	0002ce74 	.word	0x0002ce74
    d200:	0002d046 	.word	0x0002d046

0000d204 <disconnected_cb>:
{
    d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d208:	4b23      	ldr	r3, [pc, #140]	; (d298 <disconnected_cb+0x94>)
{
    d20a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d20c:	6882      	ldr	r2, [r0, #8]
    d20e:	429a      	cmp	r2, r3
{
    d210:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d212:	d102      	bne.n	d21a <disconnected_cb+0x16>
	ccc = attr->user_data;
    d214:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    d216:	8963      	ldrh	r3, [r4, #10]
    d218:	bb33      	cbnz	r3, d268 <disconnected_cb+0x64>
}
    d21a:	2001      	movs	r0, #1
    d21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
    d220:	f017 f808 	bl	24234 <bt_conn_unref>
		if (ccc->cfg_changed) {
    d224:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    d226:	2100      	movs	r1, #0
    d228:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    d22a:	2b00      	cmp	r3, #0
    d22c:	d0f5      	beq.n	d21a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    d22e:	4638      	mov	r0, r7
    d230:	4798      	blx	r3
    d232:	e7f2      	b.n	d21a <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d234:	f105 0888 	add.w	r8, r5, #136	; 0x88
    d238:	7a28      	ldrb	r0, [r5, #8]
    d23a:	4641      	mov	r1, r8
    d23c:	f016 fe56 	bl	23eec <bt_addr_le_is_bonded>
    d240:	b968      	cbnz	r0, d25e <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
    d242:	4b16      	ldr	r3, [pc, #88]	; (d29c <disconnected_cb+0x98>)
    d244:	429c      	cmp	r4, r3
    d246:	d102      	bne.n	d24e <disconnected_cb+0x4a>
					sc_clear(conn);
    d248:	4628      	mov	r0, r5
    d24a:	f017 fe87 	bl	24f5c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d24e:	4914      	ldr	r1, [pc, #80]	; (d2a0 <disconnected_cb+0x9c>)
    d250:	4630      	mov	r0, r6
    d252:	f017 fe6e 	bl	24f32 <bt_addr_le_copy>
	cfg->id = 0U;
    d256:	2300      	movs	r3, #0
    d258:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
    d25a:	8123      	strh	r3, [r4, #8]
}
    d25c:	e7e2      	b.n	d224 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d25e:	4641      	mov	r1, r8
    d260:	4630      	mov	r0, r6
    d262:	f017 fe66 	bl	24f32 <bt_addr_le_copy>
    d266:	e7dd      	b.n	d224 <disconnected_cb+0x20>
		if (!cfg->value) {
    d268:	8923      	ldrh	r3, [r4, #8]
    d26a:	2b00      	cmp	r3, #0
    d26c:	d0da      	beq.n	d224 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d26e:	4626      	mov	r6, r4
    d270:	4628      	mov	r0, r5
    d272:	f816 1b01 	ldrb.w	r1, [r6], #1
    d276:	4632      	mov	r2, r6
    d278:	f017 f825 	bl	242c6 <bt_conn_is_peer_addr_le>
    d27c:	2800      	cmp	r0, #0
    d27e:	d1d9      	bne.n	d234 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d280:	7820      	ldrb	r0, [r4, #0]
    d282:	4631      	mov	r1, r6
    d284:	f7fe f8b4 	bl	b3f0 <bt_conn_lookup_addr_le>
			if (tmp) {
    d288:	2800      	cmp	r0, #0
    d28a:	d0cb      	beq.n	d224 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
    d28c:	7a83      	ldrb	r3, [r0, #10]
    d28e:	2b07      	cmp	r3, #7
    d290:	d1c6      	bne.n	d220 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
    d292:	f016 ffcf 	bl	24234 <bt_conn_unref>
	if (!value_used) {
    d296:	e7c0      	b.n	d21a <disconnected_cb+0x16>
    d298:	0000d06d 	.word	0x0000d06d
    d29c:	200002c8 	.word	0x200002c8
    d2a0:	0002b9b3 	.word	0x0002b9b3

0000d2a4 <read_ppcp>:
{
    d2a4:	b513      	push	{r0, r1, r4, lr}
    d2a6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
    d2aa:	4c0b      	ldr	r4, [pc, #44]	; (d2d8 <read_ppcp+0x34>)
{
    d2ac:	4610      	mov	r0, r2
	if (offset > value_len) {
    d2ae:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
    d2b0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    d2b4:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    d2b8:	d80b      	bhi.n	d2d2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    d2ba:	f1c1 0408 	rsb	r4, r1, #8
    d2be:	429c      	cmp	r4, r3
    d2c0:	bfa8      	it	ge
    d2c2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    d2c4:	4622      	mov	r2, r4
    d2c6:	4469      	add	r1, sp
    d2c8:	f016 fca0 	bl	23c0c <memcpy>
}
    d2cc:	4620      	mov	r0, r4
    d2ce:	b002      	add	sp, #8
    d2d0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d2d2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    d2d6:	e7f9      	b.n	d2cc <read_ppcp+0x28>
    d2d8:	00280018 	.word	0x00280018

0000d2dc <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
    d2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d2de:	460c      	mov	r4, r1
    d2e0:	4605      	mov	r5, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d2e2:	2108      	movs	r1, #8
    d2e4:	f104 0014 	add.w	r0, r4, #20
    d2e8:	f017 fe14 	bl	24f14 <atomic_or>
	/* The value of the params doesn't matter, this is just so we don't
	 * repeat CCC writes when the AUTO_RESUBSCRIBE quirk is enabled.
	 */
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    d2ec:	2312      	movs	r3, #18
    d2ee:	2204      	movs	r2, #4
    d2f0:	e9cd 3200 	strd	r3, r2, [sp]
    d2f4:	4903      	ldr	r1, [pc, #12]	; (d304 <gatt_write_ccc+0x28>)
    d2f6:	4b04      	ldr	r3, [pc, #16]	; (d308 <gatt_write_ccc+0x2c>)
    d2f8:	4622      	mov	r2, r4
    d2fa:	4628      	mov	r0, r5
    d2fc:	f017 fe51 	bl	24fa2 <gatt_req_send.constprop.0>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len,
			     BT_ATT_CHAN_OPT(params));
}
    d300:	b003      	add	sp, #12
    d302:	bd30      	pop	{r4, r5, pc}
    d304:	0000cfb9 	.word	0x0000cfb9
    d308:	00025165 	.word	0x00025165

0000d30c <sc_indicate_rsp>:
{
    d30c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d30e:	f06f 0102 	mvn.w	r1, #2
    d312:	4604      	mov	r4, r0
    d314:	480f      	ldr	r0, [pc, #60]	; (d354 <sc_indicate_rsp+0x48>)
    d316:	f017 fe0f 	bl	24f38 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d31a:	480e      	ldr	r0, [pc, #56]	; (d354 <sc_indicate_rsp+0x48>)
    d31c:	f017 fdf4 	bl	24f08 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d320:	07c2      	lsls	r2, r0, #31
    d322:	d504      	bpl.n	d32e <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
    d324:	480c      	ldr	r0, [pc, #48]	; (d358 <sc_indicate_rsp+0x4c>)
    d326:	2200      	movs	r2, #0
    d328:	2300      	movs	r3, #0
    d32a:	f012 ff3b 	bl	201a4 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
    d32e:	4620      	mov	r0, r4
    d330:	f017 fd46 	bl	24dc0 <bt_att_fixed_chan_only>
    d334:	b160      	cbz	r0, d350 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
    d336:	4620      	mov	r0, r4
    d338:	f7ff fd64 	bl	ce04 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
    d33c:	b140      	cbz	r0, d350 <sc_indicate_rsp+0x44>
    d33e:	7a03      	ldrb	r3, [r0, #8]
    d340:	07db      	lsls	r3, r3, #31
    d342:	d505      	bpl.n	d350 <sc_indicate_rsp+0x44>
}
    d344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d348:	2101      	movs	r1, #1
    d34a:	300c      	adds	r0, #12
    d34c:	f017 bde2 	b.w	24f14 <atomic_or>
    d350:	bd10      	pop	{r4, pc}
    d352:	bf00      	nop
    d354:	20001bd0 	.word	0x20001bd0
    d358:	20001ba0 	.word	0x20001ba0

0000d35c <bt_gatt_init>:
{
    d35c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d35e:	4b20      	ldr	r3, [pc, #128]	; (d3e0 <bt_gatt_init+0x84>)
    d360:	f3bf 8f5b 	dmb	ish
    d364:	2201      	movs	r2, #1
    d366:	e853 1f00 	ldrex	r1, [r3]
    d36a:	2900      	cmp	r1, #0
    d36c:	d103      	bne.n	d376 <bt_gatt_init+0x1a>
    d36e:	e843 2000 	strex	r0, r2, [r3]
    d372:	2800      	cmp	r0, #0
    d374:	d1f7      	bne.n	d366 <bt_gatt_init+0xa>
    d376:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    d37a:	d130      	bne.n	d3de <bt_gatt_init+0x82>
    d37c:	f3bf 8f5b 	dmb	ish
    d380:	4b18      	ldr	r3, [pc, #96]	; (d3e4 <bt_gatt_init+0x88>)
    d382:	e853 1f00 	ldrex	r1, [r3]
    d386:	2900      	cmp	r1, #0
    d388:	d103      	bne.n	d392 <bt_gatt_init+0x36>
    d38a:	e843 2000 	strex	r0, r2, [r3]
    d38e:	2800      	cmp	r0, #0
    d390:	d1f7      	bne.n	d382 <bt_gatt_init+0x26>
    d392:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    d396:	d108      	bne.n	d3aa <bt_gatt_init+0x4e>
    d398:	4913      	ldr	r1, [pc, #76]	; (d3e8 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d39a:	4a14      	ldr	r2, [pc, #80]	; (d3ec <bt_gatt_init+0x90>)
    d39c:	880b      	ldrh	r3, [r1, #0]
    d39e:	4c14      	ldr	r4, [pc, #80]	; (d3f0 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    d3a0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d3a2:	42a2      	cmp	r2, r4
    d3a4:	d315      	bcc.n	d3d2 <bt_gatt_init+0x76>
    d3a6:	b100      	cbz	r0, d3aa <bt_gatt_init+0x4e>
    d3a8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    d3aa:	4b12      	ldr	r3, [pc, #72]	; (d3f4 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    d3ac:	4912      	ldr	r1, [pc, #72]	; (d3f8 <bt_gatt_init+0x9c>)
    d3ae:	4813      	ldr	r0, [pc, #76]	; (d3fc <bt_gatt_init+0xa0>)
    d3b0:	2200      	movs	r2, #0
	list->tail = NULL;
    d3b2:	e9c3 2200 	strd	r2, r2, [r3]
    d3b6:	f019 fd29 	bl	26e0c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    d3ba:	4810      	ldr	r0, [pc, #64]	; (d3fc <bt_gatt_init+0xa0>)
    d3bc:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d3c0:	2300      	movs	r3, #0
    d3c2:	f7fa fe79 	bl	80b8 <bt_long_wq_schedule>
}
    d3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    d3ca:	490d      	ldr	r1, [pc, #52]	; (d400 <bt_gatt_init+0xa4>)
    d3cc:	480d      	ldr	r0, [pc, #52]	; (d404 <bt_gatt_init+0xa8>)
    d3ce:	f019 bd1d 	b.w	26e0c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    d3d2:	6850      	ldr	r0, [r2, #4]
    d3d4:	4403      	add	r3, r0
    d3d6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d3d8:	3208      	adds	r2, #8
    d3da:	2001      	movs	r0, #1
    d3dc:	e7e1      	b.n	d3a2 <bt_gatt_init+0x46>
}
    d3de:	bd10      	pop	{r4, pc}
    d3e0:	200026cc 	.word	0x200026cc
    d3e4:	200026c8 	.word	0x200026c8
    d3e8:	20003ae2 	.word	0x20003ae2
    d3ec:	00027910 	.word	0x00027910
    d3f0:	00027928 	.word	0x00027928
    d3f4:	200026d0 	.word	0x200026d0
    d3f8:	000252af 	.word	0x000252af
    d3fc:	20001b28 	.word	0x20001b28
    d400:	0000d8b1 	.word	0x0000d8b1
    d404:	20001ba0 	.word	0x20001ba0

0000d408 <bt_gatt_attr_get_handle>:
{
    d408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    d40c:	4603      	mov	r3, r0
    d40e:	b148      	cbz	r0, d424 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    d410:	8a00      	ldrh	r0, [r0, #16]
    d412:	b938      	cbnz	r0, d424 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d414:	4912      	ldr	r1, [pc, #72]	; (d460 <bt_gatt_attr_get_handle+0x58>)
    d416:	f8df e04c 	ldr.w	lr, [pc, #76]	; d464 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    d41a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d41c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d420:	4571      	cmp	r1, lr
    d422:	d301      	bcc.n	d428 <bt_gatt_attr_get_handle+0x20>
}
    d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d428:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    d42c:	42bb      	cmp	r3, r7
    d42e:	d304      	bcc.n	d43a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d430:	fb0c 7206 	mla	r2, ip, r6, r7
    d434:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    d436:	4293      	cmp	r3, r2
    d438:	d90e      	bls.n	d458 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    d43a:	4434      	add	r4, r6
    d43c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d43e:	3108      	adds	r1, #8
    d440:	4614      	mov	r4, r2
    d442:	e7ed      	b.n	d420 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    d444:	fb0c 7805 	mla	r8, ip, r5, r7
    d448:	4543      	cmp	r3, r8
    d44a:	d007      	beq.n	d45c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d44c:	3501      	adds	r5, #1
    d44e:	1962      	adds	r2, r4, r5
    d450:	42b5      	cmp	r5, r6
    d452:	b292      	uxth	r2, r2
    d454:	d1f6      	bne.n	d444 <bt_gatt_attr_get_handle+0x3c>
    d456:	e7f2      	b.n	d43e <bt_gatt_attr_get_handle+0x36>
    d458:	2500      	movs	r5, #0
    d45a:	e7f8      	b.n	d44e <bt_gatt_attr_get_handle+0x46>
    d45c:	4610      	mov	r0, r2
    d45e:	e7e1      	b.n	d424 <bt_gatt_attr_get_handle+0x1c>
    d460:	00027910 	.word	0x00027910
    d464:	00027928 	.word	0x00027928

0000d468 <bt_gatt_foreach_attr_type>:
{
    d468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d46c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    d470:	9100      	str	r1, [sp, #0]
    d472:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    d474:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d478:	2d00      	cmp	r5, #0
    d47a:	bf08      	it	eq
    d47c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    d47e:	4b24      	ldr	r3, [pc, #144]	; (d510 <bt_gatt_foreach_attr_type+0xa8>)
    d480:	881b      	ldrh	r3, [r3, #0]
    d482:	4283      	cmp	r3, r0
{
    d484:	4607      	mov	r7, r0
    d486:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    d488:	d23c      	bcs.n	d504 <bt_gatt_foreach_attr_type+0x9c>
}
    d48a:	b003      	add	sp, #12
    d48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    d490:	6873      	ldr	r3, [r6, #4]
    d492:	4423      	add	r3, r4
    d494:	42bb      	cmp	r3, r7
    d496:	d232      	bcs.n	d4fe <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    d498:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d49a:	3608      	adds	r6, #8
    d49c:	4b1d      	ldr	r3, [pc, #116]	; (d514 <bt_gatt_foreach_attr_type+0xac>)
    d49e:	429e      	cmp	r6, r3
    d4a0:	d3f6      	bcc.n	d490 <bt_gatt_foreach_attr_type+0x28>
    d4a2:	e7f2      	b.n	d48a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d4a4:	5889      	ldr	r1, [r1, r2]
    d4a6:	9301      	str	r3, [sp, #4]
    d4a8:	4640      	mov	r0, r8
    d4aa:	f016 fbe7 	bl	23c7c <bt_uuid_cmp>
    d4ae:	9b01      	ldr	r3, [sp, #4]
    d4b0:	b190      	cbz	r0, d4d8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d4b2:	3401      	adds	r4, #1
    d4b4:	f10a 0a01 	add.w	sl, sl, #1
    d4b8:	b2a4      	uxth	r4, r4
    d4ba:	6873      	ldr	r3, [r6, #4]
    d4bc:	4553      	cmp	r3, sl
    d4be:	d9ec      	bls.n	d49a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    d4c0:	9b00      	ldr	r3, [sp, #0]
    d4c2:	429c      	cmp	r4, r3
    d4c4:	d8e1      	bhi.n	d48a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    d4c6:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d4c8:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
    d4ca:	d3f2      	bcc.n	d4b2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d4cc:	fb0b f20a 	mul.w	r2, fp, sl
    d4d0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d4d2:	f1b8 0f00 	cmp.w	r8, #0
    d4d6:	d1e5      	bne.n	d4a4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    d4d8:	f1b9 0f00 	cmp.w	r9, #0
    d4dc:	d10b      	bne.n	d4f6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    d4de:	3d01      	subs	r5, #1
    d4e0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    d4e2:	4618      	mov	r0, r3
    d4e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d4e8:	4621      	mov	r1, r4
    d4ea:	4798      	blx	r3
	if (!*num_matches) {
    d4ec:	2d00      	cmp	r5, #0
    d4ee:	d0cc      	beq.n	d48a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d4f0:	2800      	cmp	r0, #0
    d4f2:	d1de      	bne.n	d4b2 <bt_gatt_foreach_attr_type+0x4a>
    d4f4:	e7c9      	b.n	d48a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    d4f6:	68da      	ldr	r2, [r3, #12]
    d4f8:	4591      	cmp	r9, r2
    d4fa:	d1da      	bne.n	d4b2 <bt_gatt_foreach_attr_type+0x4a>
    d4fc:	e7ef      	b.n	d4de <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d4fe:	f04f 0a00 	mov.w	sl, #0
    d502:	e7da      	b.n	d4ba <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d504:	4e04      	ldr	r6, [pc, #16]	; (d518 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    d506:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d508:	f04f 0b14 	mov.w	fp, #20
    d50c:	e7c6      	b.n	d49c <bt_gatt_foreach_attr_type+0x34>
    d50e:	bf00      	nop
    d510:	20003ae2 	.word	0x20003ae2
    d514:	00027928 	.word	0x00027928
    d518:	00027910 	.word	0x00027910

0000d51c <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    d51c:	b590      	push	{r4, r7, lr}
    d51e:	b0c9      	sub	sp, #292	; 0x124
    d520:	af00      	add	r7, sp, #0
	uint8_t key[16] = {};
    d522:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    d524:	f107 0270 	add.w	r2, r7, #112	; 0x70
    d528:	4639      	mov	r1, r7
    d52a:	f107 0010 	add.w	r0, r7, #16
	uint8_t key[16] = {};
    d52e:	e9c7 4400 	strd	r4, r4, [r7]
    d532:	e9c7 4402 	strd	r4, r4, [r7, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    d536:	f016 f8fe 	bl	23736 <tc_cmac_setup>
    d53a:	b9b0      	cbnz	r0, d56a <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to setup AES CMAC");
    d53c:	481f      	ldr	r0, [pc, #124]	; (d5bc <db_hash_gen.constprop.0+0xa0>)
    d53e:	6803      	ldr	r3, [r0, #0]
    d540:	075a      	lsls	r2, r3, #29
    d542:	d00e      	beq.n	d562 <db_hash_gen.constprop.0+0x46>
    d544:	466c      	mov	r4, sp
    d546:	b088      	sub	sp, #32
    d548:	466a      	mov	r2, sp
    d54a:	4b1d      	ldr	r3, [pc, #116]	; (d5c0 <db_hash_gen.constprop.0+0xa4>)
		LOG_ERR("Unable to calculate hash");
    d54c:	6153      	str	r3, [r2, #20]
    d54e:	4b1d      	ldr	r3, [pc, #116]	; (d5c4 <db_hash_gen.constprop.0+0xa8>)
    d550:	6193      	str	r3, [r2, #24]
    d552:	2303      	movs	r3, #3
    d554:	f842 3f10 	str.w	r3, [r2, #16]!
    d558:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d55c:	f017 fcfb 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d560:	46a5      	mov	sp, r4
}
    d562:	f507 7792 	add.w	r7, r7, #292	; 0x124
    d566:	46bd      	mov	sp, r7
    d568:	bd90      	pop	{r4, r7, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    d56a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d56e:	2001      	movs	r0, #1
    d570:	4a15      	ldr	r2, [pc, #84]	; (d5c8 <db_hash_gen.constprop.0+0xac>)
    d572:	f107 0310 	add.w	r3, r7, #16
    d576:	f017 fe8f 	bl	25298 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    d57a:	4814      	ldr	r0, [pc, #80]	; (d5cc <db_hash_gen.constprop.0+0xb0>)
    d57c:	f107 0110 	add.w	r1, r7, #16
    d580:	f016 f96e 	bl	23860 <tc_cmac_final>
    d584:	b940      	cbnz	r0, d598 <db_hash_gen.constprop.0+0x7c>
		LOG_ERR("Unable to calculate hash");
    d586:	480d      	ldr	r0, [pc, #52]	; (d5bc <db_hash_gen.constprop.0+0xa0>)
    d588:	6803      	ldr	r3, [r0, #0]
    d58a:	075b      	lsls	r3, r3, #29
    d58c:	d0e9      	beq.n	d562 <db_hash_gen.constprop.0+0x46>
    d58e:	466c      	mov	r4, sp
    d590:	b088      	sub	sp, #32
    d592:	466a      	mov	r2, sp
    d594:	4b0e      	ldr	r3, [pc, #56]	; (d5d0 <db_hash_gen.constprop.0+0xb4>)
    d596:	e7d9      	b.n	d54c <db_hash_gen.constprop.0+0x30>
    d598:	4b0c      	ldr	r3, [pc, #48]	; (d5cc <db_hash_gen.constprop.0+0xb0>)
    d59a:	f103 0210 	add.w	r2, r3, #16
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    d59e:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    d5a0:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    d5a2:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    d5a6:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
    d5aa:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    d5ac:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
    d5ae:	d1f6      	bne.n	d59e <db_hash_gen.constprop.0+0x82>
    d5b0:	2104      	movs	r1, #4
    d5b2:	4808      	ldr	r0, [pc, #32]	; (d5d4 <db_hash_gen.constprop.0+0xb8>)
    d5b4:	f017 fcae 	bl	24f14 <atomic_or>
    d5b8:	e7d3      	b.n	d562 <db_hash_gen.constprop.0+0x46>
    d5ba:	bf00      	nop
    d5bc:	20000af8 	.word	0x20000af8
    d5c0:	0002ce97 	.word	0x0002ce97
    d5c4:	0002d057 	.word	0x0002d057
    d5c8:	00024e53 	.word	0x00024e53
    d5cc:	20001b18 	.word	0x20001b18
    d5d0:	0002ceb4 	.word	0x0002ceb4
    d5d4:	20001bd0 	.word	0x20001bd0

0000d5d8 <db_hash_read>:
{
    d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    d5da:	491a      	ldr	r1, [pc, #104]	; (d644 <db_hash_read+0x6c>)
{
    d5dc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    d5e0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    d5e2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    d5e6:	4615      	mov	r5, r2
    d5e8:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    d5ea:	f019 fc31 	bl	26e50 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d5ee:	4816      	ldr	r0, [pc, #88]	; (d648 <db_hash_read+0x70>)
    d5f0:	f017 fc8a 	bl	24f08 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    d5f4:	0741      	lsls	r1, r0, #29
    d5f6:	d401      	bmi.n	d5fc <db_hash_read+0x24>
		db_hash_gen(true);
    d5f8:	f7ff ff90 	bl	d51c <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
    d5fc:	4620      	mov	r0, r4
    d5fe:	f7ff fc01 	bl	ce04 <find_cf_cfg>
	if (cfg &&
    d602:	b168      	cbz	r0, d620 <db_hash_read+0x48>
    d604:	7a03      	ldrb	r3, [r0, #8]
    d606:	07da      	lsls	r2, r3, #31
    d608:	d50a      	bpl.n	d620 <db_hash_read+0x48>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
    d60a:	f100 040c 	add.w	r4, r0, #12
    d60e:	4620      	mov	r0, r4
    d610:	f017 fc7a 	bl	24f08 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
    d614:	07c3      	lsls	r3, r0, #31
    d616:	d403      	bmi.n	d620 <db_hash_read+0x48>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d618:	2102      	movs	r1, #2
    d61a:	4620      	mov	r0, r4
    d61c:	f017 fc7a 	bl	24f14 <atomic_or>
	if (offset > value_len) {
    d620:	2e10      	cmp	r6, #16
    d622:	d80c      	bhi.n	d63e <db_hash_read+0x66>
	len = MIN(buf_len, value_len - offset);
    d624:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    d628:	4908      	ldr	r1, [pc, #32]	; (d64c <db_hash_read+0x74>)
	len = MIN(buf_len, value_len - offset);
    d62a:	42bc      	cmp	r4, r7
    d62c:	bfa8      	it	ge
    d62e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    d630:	4622      	mov	r2, r4
    d632:	4431      	add	r1, r6
    d634:	4628      	mov	r0, r5
    d636:	f016 fae9 	bl	23c0c <memcpy>
}
    d63a:	4620      	mov	r0, r4
    d63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d63e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    d642:	e7fa      	b.n	d63a <db_hash_read+0x62>
    d644:	20001b58 	.word	0x20001b58
    d648:	20001bd0 	.word	0x20001bd0
    d64c:	20001b18 	.word	0x20001b18

0000d650 <bt_gatt_attr_next>:
{
    d650:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
    d652:	2300      	movs	r3, #0
    d654:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
    d656:	f7ff fed7 	bl	d408 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
    d65a:	1c41      	adds	r1, r0, #1
    d65c:	b289      	uxth	r1, r1
    d65e:	4608      	mov	r0, r1
    d660:	4a03      	ldr	r2, [pc, #12]	; (d670 <bt_gatt_attr_next+0x20>)
    d662:	ab01      	add	r3, sp, #4
    d664:	f017 fe18 	bl	25298 <bt_gatt_foreach_attr>
}
    d668:	9801      	ldr	r0, [sp, #4]
    d66a:	b003      	add	sp, #12
    d66c:	f85d fb04 	ldr.w	pc, [sp], #4
    d670:	00024e0b 	.word	0x00024e0b

0000d674 <gatt_indicate>:
{
    d674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d678:	4615      	mov	r5, r2
    d67a:	af00      	add	r7, sp, #0
    d67c:	468a      	mov	sl, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    d67e:	2294      	movs	r2, #148	; 0x94
    d680:	6869      	ldr	r1, [r5, #4]
{
    d682:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    d684:	f017 fe15 	bl	252b2 <bt_gatt_check_perm>
    d688:	4681      	mov	r9, r0
    d68a:	b1d0      	cbz	r0, d6c2 <gatt_indicate+0x4e>
		LOG_WRN("Link is not encrypted");
    d68c:	4846      	ldr	r0, [pc, #280]	; (d7a8 <gatt_indicate+0x134>)
    d68e:	6803      	ldr	r3, [r0, #0]
    d690:	f013 0f06 	tst.w	r3, #6
    d694:	d105      	bne.n	d6a2 <gatt_indicate+0x2e>
		return -EPERM;
    d696:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
    d69a:	4628      	mov	r0, r5
    d69c:	46bd      	mov	sp, r7
    d69e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_WRN("Link is not encrypted");
    d6a2:	466c      	mov	r4, sp
    d6a4:	b088      	sub	sp, #32
    d6a6:	466a      	mov	r2, sp
    d6a8:	4b40      	ldr	r3, [pc, #256]	; (d7ac <gatt_indicate+0x138>)
    d6aa:	6153      	str	r3, [r2, #20]
    d6ac:	4b40      	ldr	r3, [pc, #256]	; (d7b0 <gatt_indicate+0x13c>)
    d6ae:	6193      	str	r3, [r2, #24]
    d6b0:	2303      	movs	r3, #3
    d6b2:	f842 3f10 	str.w	r3, [r2, #16]!
    d6b6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d6ba:	f017 fc4c 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d6be:	46a5      	mov	sp, r4
    d6c0:	e7e9      	b.n	d696 <gatt_indicate+0x22>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
    d6c2:	6869      	ldr	r1, [r5, #4]
    d6c4:	2202      	movs	r2, #2
    d6c6:	4630      	mov	r0, r6
    d6c8:	f017 fe1c 	bl	25304 <bt_gatt_is_subscribed>
    d6cc:	b9b8      	cbnz	r0, d6fe <gatt_indicate+0x8a>
			LOG_WRN("Device is not subscribed to characteristic");
    d6ce:	4836      	ldr	r0, [pc, #216]	; (d7a8 <gatt_indicate+0x134>)
    d6d0:	6803      	ldr	r3, [r0, #0]
    d6d2:	f013 0f06 	tst.w	r3, #6
    d6d6:	d102      	bne.n	d6de <gatt_indicate+0x6a>
			return -EINVAL;
    d6d8:	f06f 0515 	mvn.w	r5, #21
    d6dc:	e7dd      	b.n	d69a <gatt_indicate+0x26>
			LOG_WRN("Device is not subscribed to characteristic");
    d6de:	466c      	mov	r4, sp
    d6e0:	b088      	sub	sp, #32
    d6e2:	466a      	mov	r2, sp
    d6e4:	4b33      	ldr	r3, [pc, #204]	; (d7b4 <gatt_indicate+0x140>)
    d6e6:	6153      	str	r3, [r2, #20]
    d6e8:	4b31      	ldr	r3, [pc, #196]	; (d7b0 <gatt_indicate+0x13c>)
    d6ea:	6193      	str	r3, [r2, #24]
    d6ec:	2303      	movs	r3, #3
    d6ee:	f842 3f10 	str.w	r3, [r2, #16]!
    d6f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d6f6:	f017 fc2e 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d6fa:	46a5      	mov	sp, r4
    d6fc:	e7ec      	b.n	d6d8 <gatt_indicate+0x64>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d6fe:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    d702:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    d704:	f8b5 8014 	ldrh.w	r8, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d708:	f7ff fa20 	bl	cb4c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    d70c:	f108 0802 	add.w	r8, r8, #2
	if (!req) {
    d710:	4604      	mov	r4, r0
    d712:	b300      	cbz	r0, d756 <gatt_indicate+0xe2>
	req->func = func;
    d714:	4b28      	ldr	r3, [pc, #160]	; (d7b8 <gatt_indicate+0x144>)
    d716:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    d718:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    d71a:	4642      	mov	r2, r8
    d71c:	211d      	movs	r1, #29
    d71e:	4630      	mov	r0, r6
    d720:	f7fe ff3a 	bl	c598 <bt_att_create_pdu>
	if (!buf) {
    d724:	4680      	mov	r8, r0
    d726:	b9c8      	cbnz	r0, d75c <gatt_indicate+0xe8>
		LOG_WRN("No buffer available to send indication");
    d728:	481f      	ldr	r0, [pc, #124]	; (d7a8 <gatt_indicate+0x134>)
    d72a:	6803      	ldr	r3, [r0, #0]
    d72c:	f013 0f06 	tst.w	r3, #6
    d730:	d00e      	beq.n	d750 <gatt_indicate+0xdc>
    d732:	466d      	mov	r5, sp
    d734:	b088      	sub	sp, #32
    d736:	466a      	mov	r2, sp
    d738:	4b20      	ldr	r3, [pc, #128]	; (d7bc <gatt_indicate+0x148>)
    d73a:	6153      	str	r3, [r2, #20]
    d73c:	4b1c      	ldr	r3, [pc, #112]	; (d7b0 <gatt_indicate+0x13c>)
    d73e:	6193      	str	r3, [r2, #24]
    d740:	2303      	movs	r3, #3
    d742:	f842 3f10 	str.w	r3, [r2, #16]!
    d746:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d74a:	f017 fc04 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d74e:	46ad      	mov	sp, r5
		bt_att_req_free(req);
    d750:	4620      	mov	r0, r4
    d752:	f7ff fa1d 	bl	cb90 <bt_att_req_free>
		return -ENOMEM;
    d756:	f06f 050b 	mvn.w	r5, #11
    d75a:	e79e      	b.n	d69a <gatt_indicate+0x26>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
    d75c:	2301      	movs	r3, #1
    d75e:	464a      	mov	r2, r9
    d760:	4649      	mov	r1, r9
	return net_buf_simple_add(&buf->b, len);
    d762:	f108 0b0c 	add.w	fp, r8, #12
    d766:	f017 fb49 	bl	24dfc <bt_att_set_tx_meta_data>
    d76a:	2102      	movs	r1, #2
    d76c:	4658      	mov	r0, fp
    d76e:	f017 ff40 	bl	255f2 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    d772:	4681      	mov	r9, r0
    d774:	4658      	mov	r0, fp
    d776:	f829 ab02 	strh.w	sl, [r9], #2
    d77a:	8aa9      	ldrh	r1, [r5, #20]
    d77c:	f017 ff39 	bl	255f2 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    d780:	8aaa      	ldrh	r2, [r5, #20]
    d782:	6929      	ldr	r1, [r5, #16]
    d784:	4648      	mov	r0, r9
    d786:	f016 fa41 	bl	23c0c <memcpy>
	req->buf = buf;
    d78a:	f8c4 8008 	str.w	r8, [r4, #8]
	err = bt_att_req_send(conn, req);
    d78e:	4621      	mov	r1, r4
    d790:	4630      	mov	r0, r6
    d792:	f017 fae6 	bl	24d62 <bt_att_req_send>
	if (err) {
    d796:	4605      	mov	r5, r0
    d798:	2800      	cmp	r0, #0
    d79a:	f43f af7e 	beq.w	d69a <gatt_indicate+0x26>
		bt_att_req_free(req);
    d79e:	4620      	mov	r0, r4
    d7a0:	f7ff f9f6 	bl	cb90 <bt_att_req_free>
    d7a4:	e779      	b.n	d69a <gatt_indicate+0x26>
    d7a6:	bf00      	nop
    d7a8:	20000af8 	.word	0x20000af8
    d7ac:	0002ced1 	.word	0x0002ced1
    d7b0:	0002d017 	.word	0x0002d017
    d7b4:	0002ceeb 	.word	0x0002ceeb
    d7b8:	00024e25 	.word	0x00024e25
    d7bc:	0002cf1a 	.word	0x0002cf1a

0000d7c0 <bt_gatt_indicate>:
{
    d7c0:	b530      	push	{r4, r5, lr}
    d7c2:	4604      	mov	r4, r0
    d7c4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d7c6:	4837      	ldr	r0, [pc, #220]	; (d8a4 <bt_gatt_indicate+0xe4>)
    d7c8:	f017 fb9e 	bl	24f08 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d7cc:	0742      	lsls	r2, r0, #29
{
    d7ce:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d7d0:	d561      	bpl.n	d896 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    d7d2:	b114      	cbz	r4, d7da <bt_gatt_indicate+0x1a>
    d7d4:	7aa3      	ldrb	r3, [r4, #10]
    d7d6:	2b07      	cmp	r3, #7
    d7d8:	d160      	bne.n	d89c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    d7da:	6868      	ldr	r0, [r5, #4]
    d7dc:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    d7de:	f7ff fe13 	bl	d408 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    d7e2:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    d7e4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    d7e8:	b33a      	cbz	r2, d83a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d7ea:	a905      	add	r1, sp, #20
    d7ec:	9102      	str	r1, [sp, #8]
    d7ee:	492e      	ldr	r1, [pc, #184]	; (d8a8 <bt_gatt_indicate+0xe8>)
    d7f0:	9101      	str	r1, [sp, #4]
    d7f2:	2101      	movs	r1, #1
	found->attr = NULL;
    d7f4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d7f6:	9100      	str	r1, [sp, #0]
    d7f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    d7fc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d7fe:	f7ff fe33 	bl	d468 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    d802:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    d804:	b91b      	cbnz	r3, d80e <bt_gatt_indicate+0x4e>
			return -ENOENT;
    d806:	f06f 0001 	mvn.w	r0, #1
}
    d80a:	b00b      	add	sp, #44	; 0x2c
    d80c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    d80e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    d810:	9b05      	ldr	r3, [sp, #20]
    d812:	6818      	ldr	r0, [r3, #0]
    d814:	2300      	movs	r3, #0
    d816:	f88d 3010 	strb.w	r3, [sp, #16]
    d81a:	a904      	add	r1, sp, #16
    d81c:	f642 0303 	movw	r3, #10243	; 0x2803
    d820:	f8ad 3012 	strh.w	r3, [sp, #18]
    d824:	f016 fa2a 	bl	23c7c <bt_uuid_cmp>
    d828:	b970      	cbnz	r0, d848 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    d82a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    d82c:	68c3      	ldr	r3, [r0, #12]
    d82e:	799b      	ldrb	r3, [r3, #6]
    d830:	069b      	lsls	r3, r3, #26
    d832:	d405      	bmi.n	d840 <bt_gatt_indicate+0x80>
			return -EINVAL;
    d834:	f06f 0015 	mvn.w	r0, #21
    d838:	e7e7      	b.n	d80a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    d83a:	2800      	cmp	r0, #0
    d83c:	d1e8      	bne.n	d810 <bt_gatt_indicate+0x50>
    d83e:	e7e2      	b.n	d806 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    d840:	f017 fcdc 	bl	251fc <bt_gatt_attr_value_handle>
    d844:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    d848:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    d84c:	b13c      	cbz	r4, d85e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    d84e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    d850:	4601      	mov	r1, r0
		params->_ref = 1;
    d852:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    d854:	462a      	mov	r2, r5
    d856:	4620      	mov	r0, r4
    d858:	f7ff ff0c 	bl	d674 <gatt_indicate>
    d85c:	e7d5      	b.n	d80a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    d85e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    d862:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    d864:	2302      	movs	r3, #2
    d866:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d86a:	f642 1302 	movw	r3, #10498	; 0x2902
    d86e:	f8ad 3012 	strh.w	r3, [sp, #18]
    d872:	ab05      	add	r3, sp, #20
	params->_ref = 0;
    d874:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d876:	9302      	str	r3, [sp, #8]
    d878:	4b0c      	ldr	r3, [pc, #48]	; (d8ac <bt_gatt_indicate+0xec>)
    d87a:	9301      	str	r3, [sp, #4]
    d87c:	2301      	movs	r3, #1
    d87e:	9300      	str	r3, [sp, #0]
    d880:	aa04      	add	r2, sp, #16
    d882:	4623      	mov	r3, r4
    d884:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    d888:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d88a:	f88d 4010 	strb.w	r4, [sp, #16]
    d88e:	f7ff fdeb 	bl	d468 <bt_gatt_foreach_attr_type>
	return data.err;
    d892:	9807      	ldr	r0, [sp, #28]
    d894:	e7b9      	b.n	d80a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    d896:	f06f 000a 	mvn.w	r0, #10
    d89a:	e7b6      	b.n	d80a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    d89c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    d8a0:	e7b3      	b.n	d80a <bt_gatt_indicate+0x4a>
    d8a2:	bf00      	nop
    d8a4:	200000dc 	.word	0x200000dc
    d8a8:	00024e4b 	.word	0x00024e4b
    d8ac:	0000db35 	.word	0x0000db35

0000d8b0 <sc_process>:
{
    d8b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    d8b2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    d8b6:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    d8b8:	f850 3c08 	ldr.w	r3, [r0, #-8]
    d8bc:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    d8be:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d8c2:	f06f 0101 	mvn.w	r1, #1
    d8c6:	4628      	mov	r0, r5
    d8c8:	f017 fb36 	bl	24f38 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    d8cc:	4b0d      	ldr	r3, [pc, #52]	; (d904 <sc_process+0x54>)
    d8ce:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    d8d2:	4b0d      	ldr	r3, [pc, #52]	; (d908 <sc_process+0x58>)
    d8d4:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    d8d8:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    d8da:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    d8dc:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    d8e0:	2304      	movs	r3, #4
	sc->start = 0U;
    d8e2:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    d8e6:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    d8ea:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    d8ee:	4631      	mov	r1, r6
    d8f0:	f7ff ff66 	bl	d7c0 <bt_gatt_indicate>
    d8f4:	b918      	cbnz	r0, d8fe <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d8f6:	2102      	movs	r1, #2
    d8f8:	4628      	mov	r0, r5
    d8fa:	f017 fb0b 	bl	24f14 <atomic_or>
}
    d8fe:	b002      	add	sp, #8
    d900:	bd70      	pop	{r4, r5, r6, pc}
    d902:	bf00      	nop
    d904:	00028500 	.word	0x00028500
    d908:	0000d30d 	.word	0x0000d30d

0000d90c <update_ccc>:
{
    d90c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d90e:	b083      	sub	sp, #12
	struct bt_conn *conn = data->conn;
    d910:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    d912:	4b39      	ldr	r3, [pc, #228]	; (d9f8 <update_ccc+0xec>)
    d914:	6882      	ldr	r2, [r0, #8]
    d916:	429a      	cmp	r2, r3
{
    d918:	af00      	add	r7, sp, #0
    d91a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d91c:	d125      	bne.n	d96a <update_ccc+0x5e>
	ccc = attr->user_data;
    d91e:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    d920:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d922:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
    d924:	b30b      	cbz	r3, d96a <update_ccc+0x5e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d926:	7831      	ldrb	r1, [r6, #0]
    d928:	4628      	mov	r0, r5
    d92a:	f016 fccc 	bl	242c6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    d92e:	b1e0      	cbz	r0, d96a <update_ccc+0x5e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    d930:	f44f 7295 	mov.w	r2, #298	; 0x12a
    d934:	4621      	mov	r1, r4
    d936:	4628      	mov	r0, r5
    d938:	f017 fcbb 	bl	252b2 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    d93c:	2803      	cmp	r0, #3
    d93e:	d118      	bne.n	d972 <update_ccc+0x66>
				LOG_WRN("CCC %p not writable", attr);
    d940:	482e      	ldr	r0, [pc, #184]	; (d9fc <update_ccc+0xf0>)
    d942:	6803      	ldr	r3, [r0, #0]
    d944:	f013 0f06 	tst.w	r3, #6
    d948:	d00f      	beq.n	d96a <update_ccc+0x5e>
    d94a:	466d      	mov	r5, sp
    d94c:	b088      	sub	sp, #32
    d94e:	466a      	mov	r2, sp
    d950:	4b2b      	ldr	r3, [pc, #172]	; (da00 <update_ccc+0xf4>)
    d952:	6153      	str	r3, [r2, #20]
    d954:	4b2b      	ldr	r3, [pc, #172]	; (da04 <update_ccc+0xf8>)
    d956:	e9c2 3406 	strd	r3, r4, [r2, #24]
    d95a:	2304      	movs	r3, #4
    d95c:	f842 3f10 	str.w	r3, [r2, #16]!
    d960:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    d964:	f017 faf7 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d968:	46ad      	mov	sp, r5
}
    d96a:	2001      	movs	r0, #1
    d96c:	370c      	adds	r7, #12
    d96e:	46bd      	mov	sp, r7
    d970:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
    d972:	4631      	mov	r1, r6
    d974:	4620      	mov	r0, r4
    d976:	f017 fa4b 	bl	24e10 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    d97a:	4b23      	ldr	r3, [pc, #140]	; (da08 <update_ccc+0xfc>)
    d97c:	429e      	cmp	r6, r3
    d97e:	d1f4      	bne.n	d96a <update_ccc+0x5e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d980:	7a28      	ldrb	r0, [r5, #8]
    d982:	f105 0188 	add.w	r1, r5, #136	; 0x88
    d986:	f7ff fa55 	bl	ce34 <find_sc_cfg>
	if (!cfg) {
    d98a:	2800      	cmp	r0, #0
    d98c:	d0ed      	beq.n	d96a <update_ccc+0x5e>
	if (!(cfg->data.start || cfg->data.end)) {
    d98e:	8902      	ldrh	r2, [r0, #8]
    d990:	8943      	ldrh	r3, [r0, #10]
    d992:	ea52 0103 	orrs.w	r1, r2, r3
    d996:	d0e8      	beq.n	d96a <update_ccc+0x5e>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    d998:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    d99a:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
    d99c:	4628      	mov	r0, r5
    d99e:	f7fd fc5d 	bl	b25c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    d9a2:	491a      	ldr	r1, [pc, #104]	; (da0c <update_ccc+0x100>)
    d9a4:	4a1a      	ldr	r2, [pc, #104]	; (da10 <update_ccc+0x104>)
    d9a6:	2318      	movs	r3, #24
    d9a8:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d9ac:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    d9ae:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    d9b0:	4a18      	ldr	r2, [pc, #96]	; (da14 <update_ccc+0x108>)
    d9b2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    d9b4:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d9b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    d9ba:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    d9bc:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d9be:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    d9c2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d9c4:	4628      	mov	r0, r5
    d9c6:	f7ff fefb 	bl	d7c0 <bt_gatt_indicate>
    d9ca:	2800      	cmp	r0, #0
    d9cc:	d0cd      	beq.n	d96a <update_ccc+0x5e>
		LOG_ERR("SC restore indication failed");
    d9ce:	4b0b      	ldr	r3, [pc, #44]	; (d9fc <update_ccc+0xf0>)
    d9d0:	681b      	ldr	r3, [r3, #0]
    d9d2:	075b      	lsls	r3, r3, #29
    d9d4:	d0c9      	beq.n	d96a <update_ccc+0x5e>
    d9d6:	466c      	mov	r4, sp
    d9d8:	b088      	sub	sp, #32
    d9da:	466a      	mov	r2, sp
    d9dc:	4b0e      	ldr	r3, [pc, #56]	; (da18 <update_ccc+0x10c>)
    d9de:	6153      	str	r3, [r2, #20]
    d9e0:	4b0e      	ldr	r3, [pc, #56]	; (da1c <update_ccc+0x110>)
    d9e2:	6193      	str	r3, [r2, #24]
    d9e4:	2303      	movs	r3, #3
    d9e6:	f842 3f10 	str.w	r3, [r2, #16]!
    d9ea:	4804      	ldr	r0, [pc, #16]	; (d9fc <update_ccc+0xf0>)
    d9ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d9f0:	f017 fab1 	bl	24f56 <z_log_msg_static_create.constprop.0>
    d9f4:	46a5      	mov	sp, r4
    d9f6:	e7b8      	b.n	d96a <update_ccc+0x5e>
    d9f8:	0000d06d 	.word	0x0000d06d
    d9fc:	20000af8 	.word	0x20000af8
    da00:	0002cf45 	.word	0x0002cf45
    da04:	0002cfd3 	.word	0x0002cfd3
    da08:	200002c8 	.word	0x200002c8
    da0c:	200026a0 	.word	0x200026a0
    da10:	00028500 	.word	0x00028500
    da14:	0002518f 	.word	0x0002518f
    da18:	0002cf5d 	.word	0x0002cf5d
    da1c:	0002cfc8 	.word	0x0002cfc8

0000da20 <gatt_notify>:
{
    da20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da24:	4614      	mov	r4, r2
    da26:	af00      	add	r7, sp, #0
    da28:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    da2a:	2294      	movs	r2, #148	; 0x94
    da2c:	6861      	ldr	r1, [r4, #4]
{
    da2e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    da30:	f017 fc3f 	bl	252b2 <bt_gatt_check_perm>
    da34:	b1c8      	cbz	r0, da6a <gatt_notify+0x4a>
		LOG_WRN("Link is not encrypted");
    da36:	483a      	ldr	r0, [pc, #232]	; (db20 <gatt_notify+0x100>)
    da38:	6803      	ldr	r3, [r0, #0]
    da3a:	f013 0f06 	tst.w	r3, #6
    da3e:	d104      	bne.n	da4a <gatt_notify+0x2a>
		return -EPERM;
    da40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    da44:	46bd      	mov	sp, r7
    da46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("Link is not encrypted");
    da4a:	466c      	mov	r4, sp
    da4c:	b088      	sub	sp, #32
    da4e:	466a      	mov	r2, sp
    da50:	4b34      	ldr	r3, [pc, #208]	; (db24 <gatt_notify+0x104>)
    da52:	6153      	str	r3, [r2, #20]
    da54:	4b34      	ldr	r3, [pc, #208]	; (db28 <gatt_notify+0x108>)
    da56:	6193      	str	r3, [r2, #24]
    da58:	2303      	movs	r3, #3
    da5a:	f842 3f10 	str.w	r3, [r2, #16]!
    da5e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    da62:	f017 fa78 	bl	24f56 <z_log_msg_static_create.constprop.0>
    da66:	46a5      	mov	sp, r4
    da68:	e7ea      	b.n	da40 <gatt_notify+0x20>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
    da6a:	6861      	ldr	r1, [r4, #4]
    da6c:	2201      	movs	r2, #1
    da6e:	4630      	mov	r0, r6
    da70:	f017 fc48 	bl	25304 <bt_gatt_is_subscribed>
    da74:	b9b8      	cbnz	r0, daa6 <gatt_notify+0x86>
			LOG_WRN("Device is not subscribed to characteristic");
    da76:	482a      	ldr	r0, [pc, #168]	; (db20 <gatt_notify+0x100>)
    da78:	6803      	ldr	r3, [r0, #0]
    da7a:	f013 0f06 	tst.w	r3, #6
    da7e:	d102      	bne.n	da86 <gatt_notify+0x66>
			return -EINVAL;
    da80:	f06f 0015 	mvn.w	r0, #21
    da84:	e7de      	b.n	da44 <gatt_notify+0x24>
			LOG_WRN("Device is not subscribed to characteristic");
    da86:	466c      	mov	r4, sp
    da88:	b088      	sub	sp, #32
    da8a:	466a      	mov	r2, sp
    da8c:	4b27      	ldr	r3, [pc, #156]	; (db2c <gatt_notify+0x10c>)
    da8e:	6153      	str	r3, [r2, #20]
    da90:	4b25      	ldr	r3, [pc, #148]	; (db28 <gatt_notify+0x108>)
    da92:	6193      	str	r3, [r2, #24]
    da94:	2303      	movs	r3, #3
    da96:	f842 3f10 	str.w	r3, [r2, #16]!
    da9a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    da9e:	f017 fa5a 	bl	24f56 <z_log_msg_static_create.constprop.0>
    daa2:	46a5      	mov	sp, r4
    daa4:	e7ec      	b.n	da80 <gatt_notify+0x60>
				sizeof(*nfy) + params->len);
    daa6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    daa8:	211b      	movs	r1, #27
    daaa:	3202      	adds	r2, #2
    daac:	4630      	mov	r0, r6
    daae:	f7fe fd73 	bl	c598 <bt_att_create_pdu>
	if (!buf) {
    dab2:	4605      	mov	r5, r0
    dab4:	b9b8      	cbnz	r0, dae6 <gatt_notify+0xc6>
		LOG_WRN("No buffer available to send notification");
    dab6:	481a      	ldr	r0, [pc, #104]	; (db20 <gatt_notify+0x100>)
    dab8:	6803      	ldr	r3, [r0, #0]
    daba:	f013 0f06 	tst.w	r3, #6
    dabe:	d102      	bne.n	dac6 <gatt_notify+0xa6>
		return -ENOMEM;
    dac0:	f06f 000b 	mvn.w	r0, #11
    dac4:	e7be      	b.n	da44 <gatt_notify+0x24>
		LOG_WRN("No buffer available to send notification");
    dac6:	466c      	mov	r4, sp
    dac8:	b088      	sub	sp, #32
    daca:	466a      	mov	r2, sp
    dacc:	4b18      	ldr	r3, [pc, #96]	; (db30 <gatt_notify+0x110>)
    dace:	6153      	str	r3, [r2, #20]
    dad0:	4b15      	ldr	r3, [pc, #84]	; (db28 <gatt_notify+0x108>)
    dad2:	6193      	str	r3, [r2, #24]
    dad4:	2303      	movs	r3, #3
    dad6:	f842 3f10 	str.w	r3, [r2, #16]!
    dada:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    dade:	f017 fa3a 	bl	24f56 <z_log_msg_static_create.constprop.0>
    dae2:	46a5      	mov	sp, r4
    dae4:	e7ec      	b.n	dac0 <gatt_notify+0xa0>
    dae6:	f100 0a0c 	add.w	sl, r0, #12
    daea:	2102      	movs	r1, #2
    daec:	4650      	mov	r0, sl
    daee:	f017 fd80 	bl	255f2 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    daf2:	4680      	mov	r8, r0
    daf4:	4650      	mov	r0, sl
    daf6:	f828 9b02 	strh.w	r9, [r8], #2
    dafa:	89a1      	ldrh	r1, [r4, #12]
    dafc:	f017 fd79 	bl	255f2 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    db00:	89a2      	ldrh	r2, [r4, #12]
    db02:	68a1      	ldr	r1, [r4, #8]
    db04:	4640      	mov	r0, r8
    db06:	f016 f881 	bl	23c0c <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
    db0a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    db0e:	4628      	mov	r0, r5
    db10:	2301      	movs	r3, #1
    db12:	f017 f973 	bl	24dfc <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
    db16:	4629      	mov	r1, r5
    db18:	4630      	mov	r0, r6
    db1a:	f017 f8e4 	bl	24ce6 <bt_att_send>
    db1e:	e791      	b.n	da44 <gatt_notify+0x24>
    db20:	20000af8 	.word	0x20000af8
    db24:	0002ced1 	.word	0x0002ced1
    db28:	0002d00b 	.word	0x0002d00b
    db2c:	0002ceeb 	.word	0x0002ceeb
    db30:	0002cf7e 	.word	0x0002cf7e

0000db34 <notify_cb>:
{
    db34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    db38:	4b45      	ldr	r3, [pc, #276]	; (dc50 <notify_cb+0x11c>)
{
    db3a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    db3c:	6882      	ldr	r2, [r0, #8]
    db3e:	429a      	cmp	r2, r3
{
    db40:	af00      	add	r7, sp, #0
    db42:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    db44:	d005      	beq.n	db52 <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
    db46:	f04f 0801 	mov.w	r8, #1
}
    db4a:	4640      	mov	r0, r8
    db4c:	46bd      	mov	sp, r7
    db4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ccc = attr->user_data;
    db52:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    db54:	4b3f      	ldr	r3, [pc, #252]	; (dc54 <notify_cb+0x120>)
    db56:	429e      	cmp	r6, r3
    db58:	d060      	beq.n	dc1c <notify_cb+0xe8>
		if (cfg->value != data->type) {
    db5a:	8932      	ldrh	r2, [r6, #8]
    db5c:	89ab      	ldrh	r3, [r5, #12]
    db5e:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    db60:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
    db64:	d1ef      	bne.n	db46 <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    db66:	7830      	ldrb	r0, [r6, #0]
    db68:	f7fd fc42 	bl	b3f0 <bt_conn_lookup_addr_le>
		if (!conn) {
    db6c:	4604      	mov	r4, r0
    db6e:	2800      	cmp	r0, #0
    db70:	d0e9      	beq.n	db46 <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
    db72:	7a83      	ldrb	r3, [r0, #10]
    db74:	2b07      	cmp	r3, #7
    db76:	d005      	beq.n	db84 <notify_cb+0x50>
			bt_conn_unref(conn);
    db78:	f016 fb5c 	bl	24234 <bt_conn_unref>
			continue;
    db7c:	e7e3      	b.n	db46 <notify_cb+0x12>
			bt_conn_unref(conn);
    db7e:	f016 fb59 	bl	24234 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    db82:	e7ea      	b.n	db5a <notify_cb+0x26>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    db84:	6973      	ldr	r3, [r6, #20]
    db86:	b123      	cbz	r3, db92 <notify_cb+0x5e>
    db88:	4641      	mov	r1, r8
    db8a:	4798      	blx	r3
    db8c:	b908      	cbnz	r0, db92 <notify_cb+0x5e>
			bt_conn_unref(conn);
    db8e:	4620      	mov	r0, r4
    db90:	e7f2      	b.n	db78 <notify_cb+0x44>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    db92:	4641      	mov	r1, r8
    db94:	2294      	movs	r2, #148	; 0x94
    db96:	4620      	mov	r0, r4
    db98:	f017 fb8b 	bl	252b2 <bt_gatt_check_perm>
    db9c:	4680      	mov	r8, r0
    db9e:	b1a0      	cbz	r0, dbca <notify_cb+0x96>
			LOG_WRN("Link is not encrypted");
    dba0:	482d      	ldr	r0, [pc, #180]	; (dc58 <notify_cb+0x124>)
    dba2:	6803      	ldr	r3, [r0, #0]
    dba4:	f013 0f06 	tst.w	r3, #6
    dba8:	d0f1      	beq.n	db8e <notify_cb+0x5a>
    dbaa:	466d      	mov	r5, sp
    dbac:	b088      	sub	sp, #32
    dbae:	466a      	mov	r2, sp
    dbb0:	4b2a      	ldr	r3, [pc, #168]	; (dc5c <notify_cb+0x128>)
    dbb2:	6153      	str	r3, [r2, #20]
    dbb4:	4b2a      	ldr	r3, [pc, #168]	; (dc60 <notify_cb+0x12c>)
    dbb6:	6193      	str	r3, [r2, #24]
    dbb8:	2303      	movs	r3, #3
    dbba:	f842 3f10 	str.w	r3, [r2, #16]!
    dbbe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    dbc2:	f017 f9c8 	bl	24f56 <z_log_msg_static_create.constprop.0>
    dbc6:	46ad      	mov	sp, r5
    dbc8:	e7e1      	b.n	db8e <notify_cb+0x5a>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
    dbca:	89ab      	ldrh	r3, [r5, #12]
    dbcc:	2b02      	cmp	r3, #2
    dbce:	d114      	bne.n	dbfa <notify_cb+0xc6>
    dbd0:	8933      	ldrh	r3, [r6, #8]
    dbd2:	079a      	lsls	r2, r3, #30
    dbd4:	d405      	bmi.n	dbe2 <notify_cb+0xae>
		bt_conn_unref(conn);
    dbd6:	4620      	mov	r0, r4
    dbd8:	f016 fb2c 	bl	24234 <bt_conn_unref>
		data->err = 0;
    dbdc:	2300      	movs	r3, #0
    dbde:	60ab      	str	r3, [r5, #8]
    dbe0:	e7b1      	b.n	db46 <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
    dbe2:	692a      	ldr	r2, [r5, #16]
    dbe4:	88a9      	ldrh	r1, [r5, #4]
    dbe6:	4620      	mov	r0, r4
    dbe8:	f7ff fd44 	bl	d674 <gatt_indicate>
			if (err == 0) {
    dbec:	4606      	mov	r6, r0
    dbee:	b978      	cbnz	r0, dc10 <notify_cb+0xdc>
				data->ind_params->_ref++;
    dbf0:	692a      	ldr	r2, [r5, #16]
    dbf2:	7d93      	ldrb	r3, [r2, #22]
    dbf4:	3301      	adds	r3, #1
    dbf6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    dbf8:	e7ed      	b.n	dbd6 <notify_cb+0xa2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
    dbfa:	2b01      	cmp	r3, #1
    dbfc:	d1eb      	bne.n	dbd6 <notify_cb+0xa2>
    dbfe:	8933      	ldrh	r3, [r6, #8]
    dc00:	07db      	lsls	r3, r3, #31
    dc02:	d5e8      	bpl.n	dbd6 <notify_cb+0xa2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    dc04:	692a      	ldr	r2, [r5, #16]
    dc06:	88a9      	ldrh	r1, [r5, #4]
    dc08:	4620      	mov	r0, r4
    dc0a:	f7ff ff09 	bl	da20 <gatt_notify>
    dc0e:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    dc10:	4620      	mov	r0, r4
    dc12:	f016 fb0f 	bl	24234 <bt_conn_unref>
		if (err < 0) {
    dc16:	2e00      	cmp	r6, #0
    dc18:	db97      	blt.n	db4a <notify_cb+0x16>
    dc1a:	e7df      	b.n	dbdc <notify_cb+0xa8>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    dc1c:	4c11      	ldr	r4, [pc, #68]	; (dc64 <notify_cb+0x130>)
    dc1e:	4912      	ldr	r1, [pc, #72]	; (dc68 <notify_cb+0x134>)
    dc20:	4620      	mov	r0, r4
    dc22:	f017 f969 	bl	24ef8 <bt_addr_le_eq>
    dc26:	2800      	cmp	r0, #0
    dc28:	d197      	bne.n	db5a <notify_cb+0x26>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    dc2a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    dc2e:	2207      	movs	r2, #7
    dc30:	4621      	mov	r1, r4
    dc32:	f7fd fc2f 	bl	b494 <bt_conn_lookup_state_le>
			if (!conn) {
    dc36:	2800      	cmp	r0, #0
    dc38:	d1a1      	bne.n	db7e <notify_cb+0x4a>
				sc = (struct sc_data *)data->ind_params->data;
    dc3a:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
    dc3c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    dc40:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    dc42:	4621      	mov	r1, r4
    dc44:	8853      	ldrh	r3, [r2, #2]
    dc46:	8812      	ldrh	r2, [r2, #0]
    dc48:	f7ff fa9c 	bl	d184 <sc_save>
				continue;
    dc4c:	e785      	b.n	db5a <notify_cb+0x26>
    dc4e:	bf00      	nop
    dc50:	0000d06d 	.word	0x0000d06d
    dc54:	200002c8 	.word	0x200002c8
    dc58:	20000af8 	.word	0x20000af8
    dc5c:	0002ced1 	.word	0x0002ced1
    dc60:	0002d025 	.word	0x0002d025
    dc64:	20003ad7 	.word	0x20003ad7
    dc68:	0002b9b3 	.word	0x0002b9b3

0000dc6c <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
    dc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool has_subscription = false, found = false;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    dc70:	7a83      	ldrb	r3, [r0, #10]
    dc72:	2b07      	cmp	r3, #7
{
    dc74:	4607      	mov	r7, r0
    dc76:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
    dc78:	d15b      	bne.n	dd32 <bt_gatt_unsubscribe+0xc6>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
    dc7a:	f7ff f8ff 	bl	ce7c <gatt_sub_find>
	if (!sub) {
    dc7e:	4606      	mov	r6, r0
    dc80:	2800      	cmp	r0, #0
    dc82:	d059      	beq.n	dd38 <bt_gatt_unsubscribe+0xcc>
	return list->head;
    dc84:	6884      	ldr	r4, [r0, #8]
		return -EINVAL;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
    dc86:	2c00      	cmp	r4, #0
    dc88:	d056      	beq.n	dd38 <bt_gatt_unsubscribe+0xcc>
    dc8a:	2300      	movs	r3, #0
    dc8c:	3c18      	subs	r4, #24
    dc8e:	4698      	mov	r8, r3
		if (params == tmp) {
    dc90:	42a5      	cmp	r5, r4
    dc92:	d009      	beq.n	dca8 <bt_gatt_unsubscribe+0x3c>
			found = true;
			continue;
		}

		/* Check if there still remains any other subscription */
		if (tmp->value_handle == params->value_handle) {
    dc94:	89a1      	ldrh	r1, [r4, #12]
    dc96:	89aa      	ldrh	r2, [r5, #12]
			has_subscription = true;
    dc98:	4291      	cmp	r1, r2
    dc9a:	bf08      	it	eq
    dc9c:	f04f 0801 	moveq.w	r8, #1
	return node->next;
    dca0:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
    dca2:	b11c      	cbz	r4, dcac <bt_gatt_unsubscribe+0x40>
    dca4:	3c18      	subs	r4, #24
    dca6:	e7f3      	b.n	dc90 <bt_gatt_unsubscribe+0x24>
			found = true;
    dca8:	2301      	movs	r3, #1
    dcaa:	e7f9      	b.n	dca0 <bt_gatt_unsubscribe+0x34>
		}
	}

	if (!found) {
    dcac:	2b00      	cmp	r3, #0
    dcae:	d043      	beq.n	dd38 <bt_gatt_unsubscribe+0xcc>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    dcb0:	f105 0014 	add.w	r0, r5, #20
    dcb4:	f017 f928 	bl	24f08 <atomic_get>
		return -EINVAL;
	}

	/* Attempt to cancel if write is pending */
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
    dcb8:	0743      	lsls	r3, r0, #29
    dcba:	d503      	bpl.n	dcc4 <bt_gatt_unsubscribe+0x58>
		bt_gatt_cancel(conn, params);
    dcbc:	4629      	mov	r1, r5
    dcbe:	4638      	mov	r0, r7
    dcc0:	f017 fba4 	bl	2540c <bt_gatt_cancel>
	}

	if (!has_subscription) {
    dcc4:	f1b8 0f00 	cmp.w	r8, #0
    dcc8:	d019      	beq.n	dcfe <bt_gatt_unsubscribe+0x92>
	return list->head;
    dcca:	68b3      	ldr	r3, [r6, #8]
		if (err) {
			return err;
		}
	}

	sys_slist_find_and_remove(&sub->list, &params->node);
    dccc:	f105 0218 	add.w	r2, r5, #24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    dcd0:	b153      	cbz	r3, dce8 <bt_gatt_unsubscribe+0x7c>
    dcd2:	429a      	cmp	r2, r3
    dcd4:	d123      	bne.n	dd1e <bt_gatt_unsubscribe+0xb2>
	return node->next;
    dcd6:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
    dcd8:	b9dc      	cbnz	r4, dd12 <bt_gatt_unsubscribe+0xa6>
    dcda:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
    dcdc:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
    dcde:	428a      	cmp	r2, r1
    dce0:	d100      	bne.n	dce4 <bt_gatt_unsubscribe+0x78>
	list->tail = node;
    dce2:	60f3      	str	r3, [r6, #12]
	parent->next = child;
    dce4:	2300      	movs	r3, #0
    dce6:	61ab      	str	r3, [r5, #24]

	if (gatt_sub_is_empty(sub)) {
    dce8:	68b3      	ldr	r3, [r6, #8]
    dcea:	b91b      	cbnz	r3, dcf4 <bt_gatt_unsubscribe+0x88>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
    dcec:	4914      	ldr	r1, [pc, #80]	; (dd40 <bt_gatt_unsubscribe+0xd4>)
    dcee:	1c70      	adds	r0, r6, #1
    dcf0:	f017 f91f 	bl	24f32 <bt_addr_le_copy>
		gatt_sub_free(sub);
	}

	if (has_subscription) {
    dcf4:	f1b8 0f00 	cmp.w	r8, #0
    dcf8:	d114      	bne.n	dd24 <bt_gatt_unsubscribe+0xb8>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}

	return 0;
    dcfa:	2000      	movs	r0, #0
    dcfc:	e007      	b.n	dd0e <bt_gatt_unsubscribe+0xa2>
		params->value = 0x0000;
    dcfe:	f8a5 8010 	strh.w	r8, [r5, #16]
		err = gatt_write_ccc(conn, params);
    dd02:	4629      	mov	r1, r5
    dd04:	4638      	mov	r0, r7
    dd06:	f7ff fae9 	bl	d2dc <gatt_write_ccc>
		if (err) {
    dd0a:	2800      	cmp	r0, #0
    dd0c:	d0dd      	beq.n	dcca <bt_gatt_unsubscribe+0x5e>
}
    dd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd12:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    dd14:	68f3      	ldr	r3, [r6, #12]
    dd16:	429a      	cmp	r2, r3
	list->tail = node;
    dd18:	bf08      	it	eq
    dd1a:	60f4      	streq	r4, [r6, #12]
}
    dd1c:	e7e2      	b.n	dce4 <bt_gatt_unsubscribe+0x78>
	return node->next;
    dd1e:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    dd20:	681b      	ldr	r3, [r3, #0]
    dd22:	e7d5      	b.n	dcd0 <bt_gatt_unsubscribe+0x64>
		params->notify(conn, params, NULL, 0);
    dd24:	2300      	movs	r3, #0
    dd26:	682c      	ldr	r4, [r5, #0]
    dd28:	461a      	mov	r2, r3
    dd2a:	4629      	mov	r1, r5
    dd2c:	4638      	mov	r0, r7
    dd2e:	47a0      	blx	r4
    dd30:	e7e3      	b.n	dcfa <bt_gatt_unsubscribe+0x8e>
		return -ENOTCONN;
    dd32:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    dd36:	e7ea      	b.n	dd0e <bt_gatt_unsubscribe+0xa2>
		return -EINVAL;
    dd38:	f06f 0015 	mvn.w	r0, #21
    dd3c:	e7e7      	b.n	dd0e <bt_gatt_unsubscribe+0xa2>
    dd3e:	bf00      	nop
    dd40:	0002b9b3 	.word	0x0002b9b3

0000dd44 <bt_gatt_mult_notification>:
{
    dd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd48:	b087      	sub	sp, #28
    dd4a:	af00      	add	r7, sp, #0
    dd4c:	460c      	mov	r4, r1
    dd4e:	6078      	str	r0, [r7, #4]
    dd50:	4692      	mov	sl, r2
	sub = gatt_sub_find(conn);
    dd52:	f7ff f893 	bl	ce7c <gatt_sub_find>
	if (!sub) {
    dd56:	4680      	mov	r8, r0
    dd58:	b358      	cbz	r0, ddb2 <bt_gatt_mult_notification+0x6e>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    dd5a:	4652      	mov	r2, sl
    dd5c:	4621      	mov	r1, r4
    dd5e:	f107 000c 	add.w	r0, r7, #12
    dd62:	f017 fc08 	bl	25576 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    dd66:	8a3b      	ldrh	r3, [r7, #16]
    dd68:	2b04      	cmp	r3, #4
    dd6a:	d922      	bls.n	ddb2 <bt_gatt_mult_notification+0x6e>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    dd6c:	2104      	movs	r1, #4
    dd6e:	f107 000c 	add.w	r0, r7, #12
    dd72:	f017 fc6f 	bl	25654 <net_buf_simple_pull_mem>
		if (len > buf.len) {
    dd76:	8a3a      	ldrh	r2, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
    dd78:	f8b0 9002 	ldrh.w	r9, [r0, #2]
		handle = sys_cpu_to_le16(nfy->handle);
    dd7c:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
    dd80:	454a      	cmp	r2, r9
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    dd82:	4605      	mov	r5, r0
		if (len > buf.len) {
    dd84:	d219      	bcs.n	ddba <bt_gatt_mult_notification+0x76>
			LOG_ERR("Invalid data len %u > %u", len, length);
    dd86:	4823      	ldr	r0, [pc, #140]	; (de14 <bt_gatt_mult_notification+0xd0>)
    dd88:	6802      	ldr	r2, [r0, #0]
    dd8a:	0753      	lsls	r3, r2, #29
    dd8c:	d011      	beq.n	ddb2 <bt_gatt_mult_notification+0x6e>
    dd8e:	466c      	mov	r4, sp
    dd90:	b08a      	sub	sp, #40	; 0x28
    dd92:	466a      	mov	r2, sp
    dd94:	4920      	ldr	r1, [pc, #128]	; (de18 <bt_gatt_mult_notification+0xd4>)
    dd96:	6151      	str	r1, [r2, #20]
    dd98:	4920      	ldr	r1, [pc, #128]	; (de1c <bt_gatt_mult_notification+0xd8>)
    dd9a:	f8c2 a020 	str.w	sl, [r2, #32]
    dd9e:	2305      	movs	r3, #5
    dda0:	e9c2 1906 	strd	r1, r9, [r2, #24]
    dda4:	f842 3f10 	str.w	r3, [r2, #16]!
    dda8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    ddac:	f017 f8d3 	bl	24f56 <z_log_msg_static_create.constprop.0>
    ddb0:	46a5      	mov	sp, r4
}
    ddb2:	371c      	adds	r7, #28
    ddb4:	46bd      	mov	sp, r7
    ddb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
    ddba:	f8d8 6008 	ldr.w	r6, [r8, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    ddbe:	b1fe      	cbz	r6, de00 <bt_gatt_mult_notification+0xbc>
	return node->next;
    ddc0:	6834      	ldr	r4, [r6, #0]
    ddc2:	b104      	cbz	r4, ddc6 <bt_gatt_mult_notification+0x82>
    ddc4:	3c18      	subs	r4, #24
			if (handle != params->value_handle) {
    ddc6:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
    ddca:	455a      	cmp	r2, fp
    ddcc:	d115      	bne.n	ddfa <bt_gatt_mult_notification+0xb6>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    ddce:	3e18      	subs	r6, #24
    ddd0:	e007      	b.n	dde2 <bt_gatt_mult_notification+0x9e>
    ddd2:	4626      	mov	r6, r4
    ddd4:	69a4      	ldr	r4, [r4, #24]
    ddd6:	89b2      	ldrh	r2, [r6, #12]
    ddd8:	b1c4      	cbz	r4, de0c <bt_gatt_mult_notification+0xc8>
			if (handle != params->value_handle) {
    ddda:	455a      	cmp	r2, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    dddc:	f1a4 0418 	sub.w	r4, r4, #24
			if (handle != params->value_handle) {
    dde0:	d1f7      	bne.n	ddd2 <bt_gatt_mult_notification+0x8e>
				if (params->notify(conn, params, nfy->value, len) ==
    dde2:	6878      	ldr	r0, [r7, #4]
    dde4:	f8d6 c000 	ldr.w	ip, [r6]
    dde8:	464b      	mov	r3, r9
    ddea:	1d2a      	adds	r2, r5, #4
    ddec:	4631      	mov	r1, r6
    ddee:	47e0      	blx	ip
    ddf0:	b918      	cbnz	r0, ddfa <bt_gatt_mult_notification+0xb6>
					bt_gatt_unsubscribe(conn, params);
    ddf2:	6878      	ldr	r0, [r7, #4]
    ddf4:	4631      	mov	r1, r6
    ddf6:	f7ff ff39 	bl	dc6c <bt_gatt_unsubscribe>
    ddfa:	4626      	mov	r6, r4
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    ddfc:	2c00      	cmp	r4, #0
    ddfe:	d1e9      	bne.n	ddd4 <bt_gatt_mult_notification+0x90>
		net_buf_simple_pull_mem(&buf, len);
    de00:	4649      	mov	r1, r9
    de02:	f107 000c 	add.w	r0, r7, #12
    de06:	f017 fc25 	bl	25654 <net_buf_simple_pull_mem>
    de0a:	e7ac      	b.n	dd66 <bt_gatt_mult_notification+0x22>
			if (handle != params->value_handle) {
    de0c:	455a      	cmp	r2, fp
    de0e:	d0e8      	beq.n	dde2 <bt_gatt_mult_notification+0x9e>
    de10:	e7f6      	b.n	de00 <bt_gatt_mult_notification+0xbc>
    de12:	bf00      	nop
    de14:	20000af8 	.word	0x20000af8
    de18:	0002cfab 	.word	0x0002cfab
    de1c:	0002cff1 	.word	0x0002cff1

0000de20 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    de20:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    de22:	4a06      	ldr	r2, [pc, #24]	; (de3c <bt_gatt_connected+0x1c>)
	data.conn = conn;
    de24:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    de26:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    de28:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    de2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    de2e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    de32:	f017 fa31 	bl	25298 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
    de36:	b003      	add	sp, #12
    de38:	f85d fb04 	ldr.w	pc, [sp], #4
    de3c:	0000d90d 	.word	0x0000d90d

0000de40 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    de42:	4b08      	ldr	r3, [pc, #32]	; (de64 <bt_gatt_att_max_mtu_changed+0x24>)
    de44:	681c      	ldr	r4, [r3, #0]
    de46:	4605      	mov	r5, r0
    de48:	460e      	mov	r6, r1
    de4a:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    de4c:	b14c      	cbz	r4, de62 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    de4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    de52:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    de54:	b11b      	cbz	r3, de5e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    de56:	463a      	mov	r2, r7
    de58:	4631      	mov	r1, r6
    de5a:	4628      	mov	r0, r5
    de5c:	4798      	blx	r3
	return node->next;
    de5e:	6864      	ldr	r4, [r4, #4]
    de60:	e7f4      	b.n	de4c <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    de62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de64:	200026d0 	.word	0x200026d0

0000de68 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    de68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    de6c:	4a2f      	ldr	r2, [pc, #188]	; (df2c <bt_gatt_disconnected+0xc4>)
    de6e:	4603      	mov	r3, r0
{
    de70:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    de72:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de76:	2001      	movs	r0, #1
    de78:	f017 fa0e 	bl	25298 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    de7c:	4620      	mov	r0, r4
    de7e:	f7fe fffd 	bl	ce7c <gatt_sub_find>
	if (!sub) {
    de82:	4606      	mov	r6, r0
    de84:	b938      	cbnz	r0, de96 <bt_gatt_disconnected+0x2e>
	cfg = find_cf_cfg(conn);
    de86:	4620      	mov	r0, r4
    de88:	f7fe ffbc 	bl	ce04 <find_cf_cfg>
	if (!cfg) {
    de8c:	4605      	mov	r5, r0
    de8e:	2800      	cmp	r0, #0
    de90:	d139      	bne.n	df06 <bt_gatt_disconnected+0x9e>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    de92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
    de96:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    de98:	2d00      	cmp	r5, #0
    de9a:	d0f4      	beq.n	de86 <bt_gatt_disconnected+0x1e>
	return node->next;
    de9c:	f855 7918 	ldr.w	r7, [r5], #-24
    dea0:	b107      	cbz	r7, dea4 <bt_gatt_disconnected+0x3c>
    dea2:	3f18      	subs	r7, #24
{
    dea4:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    dea8:	f104 0988 	add.w	r9, r4, #136	; 0x88
			params->value = 0U;
    deac:	46c2      	mov	sl, r8
    deae:	e001      	b.n	deb4 <bt_gatt_disconnected+0x4c>
{
    deb0:	463d      	mov	r5, r7
    deb2:	461f      	mov	r7, r3
		atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);
    deb4:	f105 0b14 	add.w	fp, r5, #20
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    deb8:	f06f 0108 	mvn.w	r1, #8
    debc:	4658      	mov	r0, fp
    debe:	f017 f83b 	bl	24f38 <atomic_and>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    dec2:	7a20      	ldrb	r0, [r4, #8]
    dec4:	4649      	mov	r1, r9
    dec6:	f016 f811 	bl	23eec <bt_addr_le_is_bonded>
    deca:	b970      	cbnz	r0, deea <bt_gatt_disconnected+0x82>
			params->value = 0U;
    decc:	f8a5 a010 	strh.w	sl, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
    ded0:	462b      	mov	r3, r5
    ded2:	4642      	mov	r2, r8
    ded4:	4631      	mov	r1, r6
    ded6:	4620      	mov	r0, r4
    ded8:	f7fe ffe8 	bl	ceac <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    dedc:	2f00      	cmp	r7, #0
    dede:	d0d2      	beq.n	de86 <bt_gatt_disconnected+0x1e>
    dee0:	69bb      	ldr	r3, [r7, #24]
    dee2:	2b00      	cmp	r3, #0
    dee4:	d0e4      	beq.n	deb0 <bt_gatt_disconnected+0x48>
    dee6:	3b18      	subs	r3, #24
    dee8:	e7e2      	b.n	deb0 <bt_gatt_disconnected+0x48>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    deea:	4658      	mov	r0, fp
    deec:	f017 f80c 	bl	24f08 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    def0:	07c3      	lsls	r3, r0, #31
    def2:	d4eb      	bmi.n	decc <bt_gatt_disconnected+0x64>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    def4:	7873      	ldrb	r3, [r6, #1]
    def6:	b11b      	cbz	r3, df00 <bt_gatt_disconnected+0x98>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    def8:	4649      	mov	r1, r9
    defa:	1c70      	adds	r0, r6, #1
    defc:	f017 f819 	bl	24f32 <bt_addr_le_copy>
			prev = &params->node;
    df00:	f105 0818 	add.w	r8, r5, #24
    df04:	e7ea      	b.n	dedc <bt_gatt_disconnected+0x74>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    df06:	f104 0688 	add.w	r6, r4, #136	; 0x88
    df0a:	7a20      	ldrb	r0, [r4, #8]
    df0c:	4631      	mov	r1, r6
    df0e:	f015 ffed 	bl	23eec <bt_addr_le_is_bonded>
    df12:	b920      	cbnz	r0, df1e <bt_gatt_disconnected+0xb6>
		clear_cf_cfg(cfg);
    df14:	4628      	mov	r0, r5
}
    df16:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    df1a:	f7ff b917 	b.w	d14c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    df1e:	4631      	mov	r1, r6
    df20:	1c68      	adds	r0, r5, #1
}
    df22:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    df26:	f017 b804 	b.w	24f32 <bt_addr_le_copy>
    df2a:	bf00      	nop
    df2c:	0000d205 	.word	0x0000d205

0000df30 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
    df30:	b598      	push	{r3, r4, r7, lr}
    df32:	4603      	mov	r3, r0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
    df34:	480c      	ldr	r0, [pc, #48]	; (df68 <bt_smp_accept.part.0+0x38>)
    df36:	6802      	ldr	r2, [r0, #0]
    df38:	0752      	lsls	r2, r2, #29
static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
    df3a:	af00      	add	r7, sp, #0
	LOG_ERR("No available SMP context for conn %p", conn);
    df3c:	d010      	beq.n	df60 <bt_smp_accept.part.0+0x30>
    df3e:	466c      	mov	r4, sp
    df40:	b088      	sub	sp, #32
    df42:	466a      	mov	r2, sp
    df44:	4909      	ldr	r1, [pc, #36]	; (df6c <bt_smp_accept.part.0+0x3c>)
    df46:	6151      	str	r1, [r2, #20]
    df48:	4909      	ldr	r1, [pc, #36]	; (df70 <bt_smp_accept.part.0+0x40>)
    df4a:	e9c2 1306 	strd	r1, r3, [r2, #24]
    df4e:	2304      	movs	r3, #4
    df50:	f842 3f10 	str.w	r3, [r2, #16]!
    df54:	2300      	movs	r3, #0
    df56:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    df5a:	f7f6 f8f9 	bl	4150 <z_impl_z_log_msg_static_create>
    df5e:	46a5      	mov	sp, r4

	return -ENOMEM;
}
    df60:	f06f 000b 	mvn.w	r0, #11
    df64:	46bd      	mov	sp, r7
    df66:	bd98      	pop	{r3, r4, r7, pc}
    df68:	20000b08 	.word	0x20000b08
    df6c:	0002d072 	.word	0x0002d072
    df70:	0002d09b 	.word	0x0002d09b

0000df74 <bt_smp_accept>:
		if (smp->chan.conn) {
    df74:	4b04      	ldr	r3, [pc, #16]	; (df88 <bt_smp_accept+0x14>)
    df76:	681a      	ldr	r2, [r3, #0]
    df78:	b10a      	cbz	r2, df7e <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    df7a:	f7ff bfd9 	b.w	df30 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
    df7e:	4803      	ldr	r0, [pc, #12]	; (df8c <bt_smp_accept+0x18>)
    df80:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
    df82:	600b      	str	r3, [r1, #0]
}
    df84:	4610      	mov	r0, r2
    df86:	4770      	bx	lr
    df88:	200026e8 	.word	0x200026e8
    df8c:	00028604 	.word	0x00028604

0000df90 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    df90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df94:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    df96:	1dc2      	adds	r2, r0, #7
    df98:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    df9c:	1e75      	subs	r5, r6, #1
{
    df9e:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    dfa0:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    dfa2:	6018      	str	r0, [r3, #0]
{
    dfa4:	b082      	sub	sp, #8
    dfa6:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    dfa8:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    dfaa:	2100      	movs	r1, #0
    dfac:	2204      	movs	r2, #4
    dfae:	fb07 0005 	mla	r0, r7, r5, r0
    dfb2:	f015 fe36 	bl	23c22 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    dfb6:	b1bd      	cbz	r5, dfe8 <mem_init+0x58>
    dfb8:	3e02      	subs	r6, #2
    dfba:	b2b6      	uxth	r6, r6
    dfbc:	fb06 7307 	mla	r3, r6, r7, r7
    dfc0:	fb06 f807 	mul.w	r8, r6, r7
    dfc4:	441c      	add	r4, r3
    dfc6:	eba8 0803 	sub.w	r8, r8, r3
    dfca:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    dfcc:	2204      	movs	r2, #4
    dfce:	eb04 0008 	add.w	r0, r4, r8
    dfd2:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    dfd6:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    dfd8:	f015 fe18 	bl	23c0c <memcpy>
	while (mem_count--) {
    dfdc:	42b5      	cmp	r5, r6
    dfde:	eba4 0407 	sub.w	r4, r4, r7
    dfe2:	f105 0501 	add.w	r5, r5, #1
    dfe6:	d1f1      	bne.n	dfcc <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    dfe8:	b002      	add	sp, #8
    dfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfee:	bf00      	nop

0000dff0 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    dff0:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    dff2:	6805      	ldr	r5, [r0, #0]
{
    dff4:	b082      	sub	sp, #8
	if (*mem_head) {
    dff6:	b19d      	cbz	r5, e020 <mem_acquire+0x30>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    dff8:	1deb      	adds	r3, r5, #7
    dffa:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    dffe:	2204      	movs	r2, #4
    e000:	4604      	mov	r4, r0
    e002:	4629      	mov	r1, r5
    e004:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    e008:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    e00a:	f015 fdff 	bl	23c0c <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    e00e:	9b01      	ldr	r3, [sp, #4]
    e010:	b12b      	cbz	r3, e01e <mem_acquire+0x2e>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    e012:	3307      	adds	r3, #7
    e014:	f023 0303 	bic.w	r3, r3, #3
		free_count--;
    e018:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    e01a:	801e      	strh	r6, [r3, #0]
				free_count;
		}

		*mem_head = head;
    e01c:	9b01      	ldr	r3, [sp, #4]
    e01e:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    e020:	4628      	mov	r0, r5
    e022:	b002      	add	sp, #8
    e024:	bd70      	pop	{r4, r5, r6, pc}
    e026:	bf00      	nop

0000e028 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    e028:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    e02a:	680b      	ldr	r3, [r1, #0]
{
    e02c:	460c      	mov	r4, r1
    e02e:	4605      	mov	r5, r0
	if (*mem_head) {
    e030:	b183      	cbz	r3, e054 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    e032:	3307      	adds	r3, #7
    e034:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    e038:	881e      	ldrh	r6, [r3, #0]
    e03a:	3601      	adds	r6, #1
    e03c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    e03e:	2204      	movs	r2, #4
    e040:	4621      	mov	r1, r4
    e042:	4628      	mov	r0, r5
    e044:	f015 fde2 	bl	23c0c <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    e048:	1deb      	adds	r3, r5, #7
    e04a:	f023 0303 	bic.w	r3, r3, #3
    e04e:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    e050:	6025      	str	r5, [r4, #0]
}
    e052:	bd70      	pop	{r4, r5, r6, pc}
    e054:	2601      	movs	r6, #1
    e056:	e7f2      	b.n	e03e <mem_release+0x16>

0000e058 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    e058:	fb02 0001 	mla	r0, r2, r1, r0
    e05c:	4770      	bx	lr
    e05e:	bf00      	nop

0000e060 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
    e060:	1a40      	subs	r0, r0, r1
    e062:	fb90 f0f2 	sdiv	r0, r0, r2
}
    e066:	b280      	uxth	r0, r0
    e068:	4770      	bx	lr
    e06a:	bf00      	nop

0000e06c <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    e06c:	1e53      	subs	r3, r2, #1
	src += len;
    e06e:	4411      	add	r1, r2
	while (len--) {
    e070:	b29b      	uxth	r3, r3
    e072:	b142      	cbz	r2, e086 <mem_rcopy+0x1a>
    e074:	43db      	mvns	r3, r3
    e076:	3801      	subs	r0, #1
    e078:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    e07a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    e07e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    e082:	4291      	cmp	r1, r2
    e084:	d1f9      	bne.n	e07a <mem_rcopy+0xe>
	}
}
    e086:	4770      	bx	lr

0000e088 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    e088:	4401      	add	r1, r0
    e08a:	e002      	b.n	e092 <mem_nz+0xa>
		if (*src++) {
    e08c:	f810 3b01 	ldrb.w	r3, [r0], #1
    e090:	b91b      	cbnz	r3, e09a <mem_nz+0x12>
	while (len--) {
    e092:	4288      	cmp	r0, r1
    e094:	d1fa      	bne.n	e08c <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    e096:	2000      	movs	r0, #0
    e098:	4770      	bx	lr
			return 1;
    e09a:	2001      	movs	r0, #1
}
    e09c:	4770      	bx	lr
    e09e:	bf00      	nop

0000e0a0 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    e0a0:	6010      	str	r0, [r2, #0]
    e0a2:	6008      	str	r0, [r1, #0]

	return link;
}
    e0a4:	4770      	bx	lr
    e0a6:	bf00      	nop

0000e0a8 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    e0a8:	680a      	ldr	r2, [r1, #0]
{
    e0aa:	4603      	mov	r3, r0
	if (*head != *tail) {
    e0ac:	6800      	ldr	r0, [r0, #0]
    e0ae:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    e0b0:	bf05      	ittet	eq
    e0b2:	2200      	moveq	r2, #0
    e0b4:	600a      	streq	r2, [r1, #0]
		return NULL;
    e0b6:	2000      	movne	r0, #0
	*head = *tail = NULL;
    e0b8:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    e0ba:	4770      	bx	lr

0000e0bc <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    e0bc:	f8d2 c000 	ldr.w	ip, [r2]
    e0c0:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    e0c4:	f8d2 c000 	ldr.w	ip, [r2]
    e0c8:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    e0cc:	6010      	str	r0, [r2, #0]

	return link;
}
    e0ce:	4770      	bx	lr

0000e0d0 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    e0d0:	4288      	cmp	r0, r1
    e0d2:	d003      	beq.n	e0dc <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    e0d4:	b11a      	cbz	r2, e0de <memq_peek+0xe>
		*mem = head->mem;
    e0d6:	6843      	ldr	r3, [r0, #4]
    e0d8:	6013      	str	r3, [r2, #0]
    e0da:	4770      	bx	lr
		return NULL;
    e0dc:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    e0de:	4770      	bx	lr

0000e0e0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    e0e0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    e0e2:	4283      	cmp	r3, r0
    e0e4:	d009      	beq.n	e0fa <memq_dequeue+0x1a>
	if (mem) {
    e0e6:	b12a      	cbz	r2, e0f4 <memq_dequeue+0x14>
		*mem = head->mem;
    e0e8:	6858      	ldr	r0, [r3, #4]
    e0ea:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    e0ec:	681a      	ldr	r2, [r3, #0]
    e0ee:	600a      	str	r2, [r1, #0]

	return old_head;
}
    e0f0:	4618      	mov	r0, r3
    e0f2:	4770      	bx	lr
	if (old_head == NULL) {
    e0f4:	2b00      	cmp	r3, #0
    e0f6:	d1f9      	bne.n	e0ec <memq_dequeue+0xc>
    e0f8:	e7fa      	b.n	e0f0 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    e0fa:	2300      	movs	r3, #0
    e0fc:	e7f8      	b.n	e0f0 <memq_dequeue+0x10>
    e0fe:	bf00      	nop

0000e100 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    e100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e104:	f8df 8030 	ldr.w	r8, [pc, #48]	; e138 <mayfly_init+0x38>
    e108:	4e0c      	ldr	r6, [pc, #48]	; (e13c <mayfly_init+0x3c>)
    e10a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    e10c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    e110:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    e112:	1d22      	adds	r2, r4, #4
    e114:	4621      	mov	r1, r4
    e116:	4628      	mov	r0, r5
		while (caller_id--) {
    e118:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    e11a:	f7ff ffc1 	bl	e0a0 <memq_init>
		while (caller_id--) {
    e11e:	42a6      	cmp	r6, r4
    e120:	f1a5 0508 	sub.w	r5, r5, #8
    e124:	d1f5      	bne.n	e112 <mayfly_init+0x12>
	while (callee_id--) {
    e126:	3f04      	subs	r7, #4
    e128:	1d3b      	adds	r3, r7, #4
    e12a:	f1a8 0820 	sub.w	r8, r8, #32
    e12e:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
    e132:	d1eb      	bne.n	e10c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    e134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e138:	200027f0 	.word	0x200027f0
    e13c:	2000287c 	.word	0x2000287c

0000e140 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    e140:	b410      	push	{r4}
    e142:	4603      	mov	r3, r0
    e144:	468c      	mov	ip, r1
	if (enable) {
    e146:	b19a      	cbz	r2, e170 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    e148:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e14c:	4814      	ldr	r0, [pc, #80]	; (e1a0 <mayfly_enable+0x60>)
    e14e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    e152:	0109      	lsls	r1, r1, #4
    e154:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    e158:	4401      	add	r1, r0
    e15a:	7a48      	ldrb	r0, [r1, #9]
    e15c:	7a0c      	ldrb	r4, [r1, #8]
    e15e:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    e160:	bf04      	itt	eq
    e162:	3001      	addeq	r0, #1
    e164:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    e166:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    e168:	4661      	mov	r1, ip
    e16a:	4618      	mov	r0, r3
    e16c:	f00c bb72 	b.w	1a854 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    e170:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    e174:	4c0a      	ldr	r4, [pc, #40]	; (e1a0 <mayfly_enable+0x60>)
    e176:	0112      	lsls	r2, r2, #4
    e178:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e17c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e180:	4423      	add	r3, r4
    e182:	7a9c      	ldrb	r4, [r3, #10]
    e184:	7ada      	ldrb	r2, [r3, #11]
    e186:	42a2      	cmp	r2, r4
    e188:	d001      	beq.n	e18e <mayfly_enable+0x4e>
}
    e18a:	bc10      	pop	{r4}
    e18c:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    e18e:	3201      	adds	r2, #1
    e190:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    e192:	4b04      	ldr	r3, [pc, #16]	; (e1a4 <mayfly_enable+0x64>)
    e194:	2201      	movs	r2, #1
    e196:	545a      	strb	r2, [r3, r1]
}
    e198:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    e19a:	f00c bbaf 	b.w	1a8fc <mayfly_pend>
    e19e:	bf00      	nop
    e1a0:	200027f8 	.word	0x200027f8
    e1a4:	20002774 	.word	0x20002774

0000e1a8 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1aa:	4606      	mov	r6, r0
    e1ac:	461c      	mov	r4, r3
    e1ae:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    e1b0:	b302      	cbz	r2, e1f4 <mayfly_enqueue+0x4c>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    e1b2:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    e1b4:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    e1b6:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    e1b8:	f012 0203 	ands.w	r2, r2, #3
    e1bc:	d13a      	bne.n	e234 <mayfly_enqueue+0x8c>
    e1be:	4f27      	ldr	r7, [pc, #156]	; (e25c <mayfly_enqueue+0xb4>)
    e1c0:	0071      	lsls	r1, r6, #1
    e1c2:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    e1c6:	4431      	add	r1, r6
    e1c8:	44ac      	add	ip, r5
    e1ca:	0089      	lsls	r1, r1, #2
    e1cc:	eb01 110c 	add.w	r1, r1, ip, lsl #4
	m->_req = ack + 1;
    e1d0:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    e1d2:	3104      	adds	r1, #4
	m->_req = ack + 1;
    e1d4:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    e1d6:	187a      	adds	r2, r7, r1
    e1d8:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    e1da:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    e1dc:	4621      	mov	r1, r4
    e1de:	f7ff ff6d 	bl	e0bc <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    e1e2:	4b1f      	ldr	r3, [pc, #124]	; (e260 <mayfly_enqueue+0xb8>)
    e1e4:	2201      	movs	r2, #1
    e1e6:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    e1e8:	4629      	mov	r1, r5
    e1ea:	4630      	mov	r0, r6
    e1ec:	f00c fb86 	bl	1a8fc <mayfly_pend>
		return 0;
    e1f0:	2000      	movs	r0, #0

	return 0;
}
    e1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e1f4:	f00c fb6c 	bl	1a8d0 <mayfly_prio_is_equal>
    e1f8:	2800      	cmp	r0, #0
    e1fa:	d0da      	beq.n	e1b2 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    e1fc:	4629      	mov	r1, r5
    e1fe:	4630      	mov	r0, r6
    e200:	f00c fb46 	bl	1a890 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e204:	2800      	cmp	r0, #0
    e206:	d0d4      	beq.n	e1b2 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    e208:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    e20c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    e210:	4f12      	ldr	r7, [pc, #72]	; (e25c <mayfly_enqueue+0xb4>)
	ack = m->_ack;
    e212:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
    e214:	0112      	lsls	r2, r2, #4
    e216:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    e21a:	443a      	add	r2, r7
    e21c:	0071      	lsls	r1, r6, #1
		!mayfly_is_enabled(caller_id, callee_id) ||
    e21e:	7a90      	ldrb	r0, [r2, #10]
    e220:	7ad2      	ldrb	r2, [r2, #11]
    e222:	4290      	cmp	r0, r2
		(mft[callee_id][caller_id].disable_req !=
    e224:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		!mayfly_is_enabled(caller_id, callee_id) ||
    e228:	d00c      	beq.n	e244 <mayfly_enqueue+0x9c>
	state = (m->_req - ack) & 0x03;
    e22a:	7820      	ldrb	r0, [r4, #0]
    e22c:	1ac0      	subs	r0, r0, r3
	if (state != 0U) {
    e22e:	f010 0203 	ands.w	r2, r0, #3
    e232:	d0c8      	beq.n	e1c6 <mayfly_enqueue+0x1e>
			if (state != 1U) {
    e234:	2a01      	cmp	r2, #1
    e236:	d003      	beq.n	e240 <mayfly_enqueue+0x98>
				m->_req = ack + 1;
    e238:	3301      	adds	r3, #1
    e23a:	b2db      	uxtb	r3, r3
    e23c:	7023      	strb	r3, [r4, #0]
				goto mayfly_enqueue_pend;
    e23e:	e7d0      	b.n	e1e2 <mayfly_enqueue+0x3a>
			return 1;
    e240:	4610      	mov	r0, r2
}
    e242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = (m->_req - ack) & 0x03;
    e244:	7822      	ldrb	r2, [r4, #0]
    e246:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    e248:	0792      	lsls	r2, r2, #30
    e24a:	d002      	beq.n	e252 <mayfly_enqueue+0xaa>
		m->_req = ack + 2;
    e24c:	3302      	adds	r3, #2
    e24e:	b2db      	uxtb	r3, r3
    e250:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    e252:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    e256:	4798      	blx	r3
		return 0;
    e258:	e7ca      	b.n	e1f0 <mayfly_enqueue+0x48>
    e25a:	bf00      	nop
    e25c:	200027f8 	.word	0x200027f8
    e260:	20002774 	.word	0x20002774

0000e264 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
    e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    e268:	f8df 9140 	ldr.w	r9, [pc, #320]	; e3ac <mayfly_run+0x148>
    e26c:	f819 3000 	ldrb.w	r3, [r9, r0]
{
    e270:	b089      	sub	sp, #36	; 0x24
	if (!mfp[callee_id]) {
    e272:	2b00      	cmp	r3, #0
    e274:	d060      	beq.n	e338 <mayfly_run+0xd4>
		return;
	}
	mfp[callee_id] = 0U;
    e276:	f8df a138 	ldr.w	sl, [pc, #312]	; e3b0 <mayfly_run+0x14c>
    e27a:	9003      	str	r0, [sp, #12]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e27c:	223c      	movs	r2, #60	; 0x3c
    e27e:	2304      	movs	r3, #4
	mfp[callee_id] = 0U;
    e280:	2500      	movs	r5, #0
    e282:	eb00 0b40 	add.w	fp, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e286:	fb12 3300 	smlabb	r3, r2, r0, r3

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    e28a:	2403      	movs	r4, #3
    e28c:	e9cd 5504 	strd	r5, r5, [sp, #16]
	mfp[callee_id] = 0U;
    e290:	f809 5000 	strb.w	r5, [r9, r0]
	while (caller_id--) {
    e294:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e298:	9302      	str	r3, [sp, #8]
    e29a:	4625      	mov	r5, r4
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    e29c:	465c      	mov	r4, fp
		struct mayfly *m = 0;
    e29e:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    e2a0:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
    e2a4:	f854 0f24 	ldr.w	r0, [r4, #36]!
		struct mayfly *m = 0;
    e2a8:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    e2aa:	aa07      	add	r2, sp, #28
    e2ac:	f7ff ff10 	bl	e0d0 <memq_peek>
    e2b0:	9501      	str	r5, [sp, #4]
    e2b2:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    e2b4:	2f00      	cmp	r7, #0
    e2b6:	d04b      	beq.n	e350 <mayfly_run+0xec>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    e2b8:	9d07      	ldr	r5, [sp, #28]
    e2ba:	7868      	ldrb	r0, [r5, #1]
    e2bc:	782e      	ldrb	r6, [r5, #0]
    e2be:	1a36      	subs	r6, r6, r0
    e2c0:	f006 0603 	and.w	r6, r6, #3
			if (state == 1U) {
    e2c4:	2e01      	cmp	r6, #1
    e2c6:	d107      	bne.n	e2d8 <mayfly_run+0x74>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    e2c8:	3801      	subs	r0, #1
    e2ca:	7068      	strb	r0, [r5, #1]

				/* call the mayfly function */
				m->fp(m->param);
    e2cc:	9b07      	ldr	r3, [sp, #28]
    e2ce:	e9d3 0302 	ldrd	r0, r3, [r3, #8]
    e2d2:	4798      	blx	r3
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    e2d4:	9d07      	ldr	r5, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
    e2d6:	7868      	ldrb	r0, [r5, #1]
	req = m->_req;
    e2d8:	782b      	ldrb	r3, [r5, #0]
		memq_dequeue(mft[callee_id][caller_id].tail,
    e2da:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    e2de:	1a18      	subs	r0, r3, r0
    e2e0:	f000 0003 	and.w	r0, r0, #3
    e2e4:	2801      	cmp	r0, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    e2e6:	f04f 0200 	mov.w	r2, #0
    e2ea:	4621      	mov	r1, r4
	req = m->_req;
    e2ec:	fa5f f883 	uxtb.w	r8, r3
		memq_dequeue(mft[callee_id][caller_id].tail,
    e2f0:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    e2f2:	d00d      	beq.n	e310 <mayfly_run+0xac>
		memq_dequeue(mft[callee_id][caller_id].tail,
    e2f4:	f7ff fef4 	bl	e0e0 <memq_dequeue>
		ack = m->_ack;
    e2f8:	7869      	ldrb	r1, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    e2fa:	782a      	ldrb	r2, [r5, #0]
		m->_link = link;
    e2fc:	606f      	str	r7, [r5, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    e2fe:	1a52      	subs	r2, r2, r1
    e300:	f002 0203 	and.w	r2, r2, #3
    e304:	2a01      	cmp	r2, #1
		m->_ack = req;
    e306:	f885 8001 	strb.w	r8, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    e30a:	d018      	beq.n	e33e <mayfly_run+0xda>
    e30c:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    e310:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    e314:	aa07      	add	r2, sp, #28
    e316:	4661      	mov	r1, ip
    e318:	f7ff feda 	bl	e0d0 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    e31c:	2e01      	cmp	r6, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    e31e:	4607      	mov	r7, r0
			if (state == 1U) {
    e320:	d1c8      	bne.n	e2b4 <mayfly_run+0x50>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    e322:	9d01      	ldr	r5, [sp, #4]
    e324:	2d00      	cmp	r5, #0
    e326:	d03d      	beq.n	e3a4 <mayfly_run+0x140>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
    e328:	9f03      	ldr	r7, [sp, #12]
    e32a:	2301      	movs	r3, #1
    e32c:	f809 3007 	strb.w	r3, [r9, r7]

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
    e330:	4639      	mov	r1, r7
    e332:	4638      	mov	r0, r7
    e334:	f00c fae2 	bl	1a8fc <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    e338:	b009      	add	sp, #36	; 0x24
    e33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e33e:	9b02      	ldr	r3, [sp, #8]
			m->_ack = ack;
    e340:	7069      	strb	r1, [r5, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e342:	4638      	mov	r0, r7
    e344:	4629      	mov	r1, r5
    e346:	eb0a 0203 	add.w	r2, sl, r3
    e34a:	f7ff feb7 	bl	e0bc <memq_enqueue>
    e34e:	e7dd      	b.n	e30c <mayfly_run+0xa8>
    e350:	9d01      	ldr	r5, [sp, #4]
		if (mft[callee_id][caller_id].disable_req !=
    e352:	f89b 302e 	ldrb.w	r3, [fp, #46]	; 0x2e
    e356:	f89b 202f 	ldrb.w	r2, [fp, #47]	; 0x2f
    e35a:	429a      	cmp	r2, r3
    e35c:	d003      	beq.n	e366 <mayfly_run+0x102>
			mft[callee_id][caller_id].disable_ack =
    e35e:	f88b 302f 	strb.w	r3, [fp, #47]	; 0x2f
			disable = 1U;
    e362:	2301      	movs	r3, #1
    e364:	9304      	str	r3, [sp, #16]
		if (mft[callee_id][caller_id].enable_req !=
    e366:	f89b 302c 	ldrb.w	r3, [fp, #44]	; 0x2c
    e36a:	f89b 202d 	ldrb.w	r2, [fp, #45]	; 0x2d
    e36e:	429a      	cmp	r2, r3
    e370:	d003      	beq.n	e37a <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
    e372:	f88b 302d 	strb.w	r3, [fp, #45]	; 0x2d
			enable = 1U;
    e376:	2301      	movs	r3, #1
    e378:	9305      	str	r3, [sp, #20]
	while (caller_id--) {
    e37a:	3d01      	subs	r5, #1
    e37c:	b2ed      	uxtb	r5, r5
    e37e:	2dff      	cmp	r5, #255	; 0xff
    e380:	f1ab 0b0c 	sub.w	fp, fp, #12
    e384:	d18a      	bne.n	e29c <mayfly_run+0x38>
	if (disable && !enable) {
    e386:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
    e38a:	9f03      	ldr	r7, [sp, #12]
    e38c:	2a00      	cmp	r2, #0
    e38e:	d0d3      	beq.n	e338 <mayfly_run+0xd4>
    e390:	2d00      	cmp	r5, #0
    e392:	d1d1      	bne.n	e338 <mayfly_run+0xd4>
		mayfly_enable_cb(callee_id, callee_id, 0);
    e394:	462a      	mov	r2, r5
    e396:	4639      	mov	r1, r7
    e398:	4638      	mov	r0, r7
}
    e39a:	b009      	add	sp, #36	; 0x24
    e39c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    e3a0:	f00c ba58 	b.w	1a854 <mayfly_enable_cb>
				if (caller_id || link) {
    e3a4:	2800      	cmp	r0, #0
    e3a6:	d0d4      	beq.n	e352 <mayfly_run+0xee>
    e3a8:	e7be      	b.n	e328 <mayfly_run+0xc4>
    e3aa:	bf00      	nop
    e3ac:	20002774 	.word	0x20002774
    e3b0:	200027f8 	.word	0x200027f8

0000e3b4 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    e3b4:	1e4b      	subs	r3, r1, #1
    e3b6:	b2db      	uxtb	r3, r3
    e3b8:	b171      	cbz	r1, e3d8 <util_ones_count_get+0x24>
    e3ba:	1e41      	subs	r1, r0, #1
    e3bc:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    e3c0:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    e3c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    e3c6:	b123      	cbz	r3, e3d2 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
    e3c8:	1e5a      	subs	r2, r3, #1
			one_count++;
    e3ca:	3001      	adds	r0, #1
		while (bite) {
    e3cc:	4013      	ands	r3, r2
			one_count++;
    e3ce:	b2c0      	uxtb	r0, r0
		while (bite) {
    e3d0:	d1fa      	bne.n	e3c8 <util_ones_count_get+0x14>
	while (octets_len--) {
    e3d2:	4561      	cmp	r1, ip
    e3d4:	d1f5      	bne.n	e3c2 <util_ones_count_get+0xe>
    e3d6:	4770      	bx	lr
	uint8_t one_count = 0U;
    e3d8:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    e3da:	4770      	bx	lr

0000e3dc <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    e3dc:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    e3de:	7e03      	ldrb	r3, [r0, #24]
	node = &instance->nodes[0];
    e3e0:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    e3e2:	2bff      	cmp	r3, #255	; 0xff
    e3e4:	d014      	beq.n	e410 <ticker_dequeue+0x34>
		ticker_current = &node[current];
    e3e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    e3ea:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    e3ec:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    e3f0:	d027      	beq.n	e442 <ticker_dequeue+0x66>
	total = 0U;
    e3f2:	f04f 0c00 	mov.w	ip, #0
    e3f6:	e001      	b.n	e3fc <ticker_dequeue+0x20>
		if (current == id) {
    e3f8:	4299      	cmp	r1, r3
    e3fa:	d00b      	beq.n	e414 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    e3fc:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    e3fe:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    e400:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    e402:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    e404:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    e408:	44a4      	add	ip, r4
		ticker_current = &node[current];
    e40a:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    e40e:	d1f3      	bne.n	e3f8 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    e410:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    e412:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    e414:	4571      	cmp	r1, lr
    e416:	d017      	beq.n	e448 <ticker_dequeue+0x6c>
	node[previous].next = ticker_current->next;
    e418:	fa0f fe8e 	sxth.w	lr, lr
    e41c:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    e41e:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    e420:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    e424:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
	if (ticker_current->next != TICKER_NULL) {
    e428:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
    e42a:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    e42e:	d006      	beq.n	e43e <ticker_dequeue+0x62>
		node[ticker_current->next].ticks_to_expire += timeout;
    e430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e434:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    e438:	689a      	ldr	r2, [r3, #8]
    e43a:	4402      	add	r2, r0
    e43c:	609a      	str	r2, [r3, #8]
	return (total + timeout);
    e43e:	4460      	add	r0, ip
}
    e440:	bd30      	pop	{r4, r5, pc}
	previous = instance->ticker_id_head;
    e442:	469e      	mov	lr, r3
	total = 0U;
    e444:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    e448:	7813      	ldrb	r3, [r2, #0]
    e44a:	7603      	strb	r3, [r0, #24]
    e44c:	e7e4      	b.n	e418 <ticker_dequeue+0x3c>
    e44e:	bf00      	nop

0000e450 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e450:	eba2 0c01 	sub.w	ip, r2, r1
    e454:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    e458:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    e45a:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    e45c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e45e:	d10a      	bne.n	e476 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e460:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    e464:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
    e466:	42a3      	cmp	r3, r4
    e468:	d80d      	bhi.n	e486 <ticks_to_expire_prep+0x36>
		ticks_to_expire_minus -= ticks_to_expire;
    e46a:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
    e46c:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    e46e:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    e470:	6083      	str	r3, [r0, #8]
}
    e472:	bc10      	pop	{r4}
    e474:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e476:	1a89      	subs	r1, r1, r2
    e478:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    e47c:	428b      	cmp	r3, r1
    e47e:	d908      	bls.n	e492 <ticks_to_expire_prep+0x42>
			ticks_to_expire -= delta_current_start;
    e480:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    e482:	42a3      	cmp	r3, r4
    e484:	d9f1      	bls.n	e46a <ticks_to_expire_prep+0x1a>
		ticks_to_expire -= ticks_to_expire_minus;
    e486:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    e488:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    e48a:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    e48c:	6083      	str	r3, [r0, #8]
}
    e48e:	bc10      	pop	{r4}
    e490:	4770      	bx	lr
			ticks_to_expire_minus +=
    e492:	440c      	add	r4, r1
    e494:	1ae4      	subs	r4, r4, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    e496:	e7e9      	b.n	e46c <ticks_to_expire_prep+0x1c>

0000e498 <ticker_job_list_insert>:
{
    e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e49c:	4607      	mov	r7, r0
    e49e:	b087      	sub	sp, #28
	count_user = instance->count_user;
    e4a0:	7a40      	ldrb	r0, [r0, #9]
	node = &instance->nodes[0];
    e4a2:	683b      	ldr	r3, [r7, #0]
	users = &instance->users[0];
    e4a4:	687c      	ldr	r4, [r7, #4]
	node = &instance->nodes[0];
    e4a6:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    e4a8:	2800      	cmp	r0, #0
    e4aa:	f000 80e9 	beq.w	e680 <ticker_job_list_insert+0x1e8>
    e4ae:	1e42      	subs	r2, r0, #1
    e4b0:	b2d2      	uxtb	r2, r2
    e4b2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    e4b6:	46bb      	mov	fp, r7
    e4b8:	9202      	str	r2, [sp, #8]
    e4ba:	9405      	str	r4, [sp, #20]
    e4bc:	460f      	mov	r7, r1
		user_ops = (void *)&user->user_op[0];
    e4be:	9b02      	ldr	r3, [sp, #8]
    e4c0:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    e4c2:	f893 8001 	ldrb.w	r8, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    e4c6:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    e4c8:	f8cd 800c 	str.w	r8, [sp, #12]
    e4cc:	2fff      	cmp	r7, #255	; 0xff
    e4ce:	d05d      	beq.n	e58c <ticker_job_list_insert+0xf4>
				ticker = &node[id_insert];
    e4d0:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    e4d4:	9b01      	ldr	r3, [sp, #4]
    e4d6:	0126      	lsls	r6, r4, #4
    e4d8:	46ba      	mov	sl, r7
				insert_head = ticker->next;
    e4da:	5d9f      	ldrb	r7, [r3, r6]
				ticker = &node[id_insert];
    e4dc:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    e4e0:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    e4e2:	f04f 0eff 	mov.w	lr, #255	; 0xff
    e4e6:	f884 e000 	strb.w	lr, [r4]
	node = &instance->nodes[0];
    e4ea:	f8db c000 	ldr.w	ip, [fp]
	current = instance->ticker_id_head;
    e4ee:	f89b 2018 	ldrb.w	r2, [fp, #24]
	ticker_new = &node[id];
    e4f2:	eb0c 0906 	add.w	r9, ip, r6
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e4f6:	4572      	cmp	r2, lr
	ticks_to_expire = ticker_new->ticks_to_expire;
    e4f8:	f8d9 1008 	ldr.w	r1, [r9, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e4fc:	d10d      	bne.n	e51a <ticker_job_list_insert+0x82>
    e4fe:	e0ba      	b.n	e676 <ticker_job_list_insert+0x1de>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    e500:	1a09      	subs	r1, r1, r0
    e502:	d104      	bne.n	e50e <ticker_job_list_insert+0x76>
    e504:	f8b9 801e 	ldrh.w	r8, [r9, #30]
    e508:	8bf6      	ldrh	r6, [r6, #30]
    e50a:	45b0      	cmp	r8, r6
    e50c:	d875      	bhi.n	e5fa <ticker_job_list_insert+0x162>
		current = ticker_current->next;
    e50e:	f81c 3003 	ldrb.w	r3, [ip, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e512:	2bff      	cmp	r3, #255	; 0xff
    e514:	4696      	mov	lr, r2
		current = ticker_current->next;
    e516:	461a      	mov	r2, r3
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e518:	d007      	beq.n	e52a <ticker_job_list_insert+0x92>
		(ticker_current = &node[current])->ticks_to_expire))) {
    e51a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    e51e:	eb0c 1603 	add.w	r6, ip, r3, lsl #4
    e522:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    e524:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e526:	4288      	cmp	r0, r1
    e528:	d9ea      	bls.n	e500 <ticker_job_list_insert+0x68>
	if (previous == TICKER_NULL) {
    e52a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    e52e:	f8c9 1008 	str.w	r1, [r9, #8]
	ticker_new->next = current;
    e532:	f889 2000 	strb.w	r2, [r9]
	if (previous == TICKER_NULL) {
    e536:	d05d      	beq.n	e5f4 <ticker_job_list_insert+0x15c>
		node[previous].next = id;
    e538:	fa0f fe8e 	sxth.w	lr, lr
    e53c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    e540:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    e544:	f80c a00e 	strb.w	sl, [ip, lr]
	if (current != TICKER_NULL) {
    e548:	2aff      	cmp	r2, #255	; 0xff
    e54a:	d008      	beq.n	e55e <ticker_job_list_insert+0xc6>
		node[current].ticks_to_expire -= ticks_to_expire;
    e54c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e550:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
    e554:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e558:	1a5b      	subs	r3, r3, r1
    e55a:	f8cc 3008 	str.w	r3, [ip, #8]
	ticker->req = ticker->ack + 1;
    e55e:	78a3      	ldrb	r3, [r4, #2]
    e560:	3301      	adds	r3, #1
    e562:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    e564:	2d00      	cmp	r5, #0
    e566:	d0b1      	beq.n	e4cc <ticker_job_list_insert+0x34>
	if (user_op->fp_op_func) {
    e568:	6aab      	ldr	r3, [r5, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    e56a:	f04f 0200 	mov.w	r2, #0
    e56e:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    e570:	70aa      	strb	r2, [r5, #2]
	if (user_op->fp_op_func) {
    e572:	b113      	cbz	r3, e57a <ticker_job_list_insert+0xe2>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    e574:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e576:	2000      	movs	r0, #0
    e578:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    e57a:	6863      	ldr	r3, [r4, #4]
    e57c:	2b00      	cmp	r3, #0
    e57e:	d1a5      	bne.n	e4cc <ticker_job_list_insert+0x34>
						user_op->fp_op_func;
    e580:	6aab      	ldr	r3, [r5, #40]	; 0x28
					ticker->fp_op_func =
    e582:	6223      	str	r3, [r4, #32]
						user_op->op_context;
    e584:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
					ticker->op_context =
    e586:	6263      	str	r3, [r4, #36]	; 0x24
		while ((insert_head != TICKER_NULL) ||
    e588:	2fff      	cmp	r7, #255	; 0xff
    e58a:	d1a1      	bne.n	e4d0 <ticker_job_list_insert+0x38>
    e58c:	9b02      	ldr	r3, [sp, #8]
    e58e:	e9dd 8903 	ldrd	r8, r9, [sp, #12]
    e592:	789b      	ldrb	r3, [r3, #2]
				user_op = &user_ops[user_ops_first];
    e594:	eb08 0248 	add.w	r2, r8, r8, lsl #1
				first = user_ops_first + 1;
    e598:	f108 0001 	add.w	r0, r8, #1
		while ((insert_head != TICKER_NULL) ||
    e59c:	4543      	cmp	r3, r8
				user_op = &user_ops[user_ops_first];
    e59e:	ea4f 1102 	mov.w	r1, r2, lsl #4
    e5a2:	eb09 1502 	add.w	r5, r9, r2, lsl #4
				first = user_ops_first + 1;
    e5a6:	fa5f f880 	uxtb.w	r8, r0
				if (first == user->count_user_op) {
    e5aa:	9a02      	ldr	r2, [sp, #8]
		while ((insert_head != TICKER_NULL) ||
    e5ac:	d05b      	beq.n	e666 <ticker_job_list_insert+0x1ce>
				if (first == user->count_user_op) {
    e5ae:	7810      	ldrb	r0, [r2, #0]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    e5b0:	f819 2001 	ldrb.w	r2, [r9, r1]
					first = 0U;
    e5b4:	4540      	cmp	r0, r8
    e5b6:	bf08      	it	eq
    e5b8:	f04f 0800 	moveq.w	r8, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    e5bc:	2a04      	cmp	r2, #4
    e5be:	d1e9      	bne.n	e594 <ticker_job_list_insert+0xfc>
				id_insert = user_op->id;
    e5c0:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    e5c4:	9a01      	ldr	r2, [sp, #4]
    e5c6:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    e5ca:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    e5ce:	011e      	lsls	r6, r3, #4
				if (((ticker->req -
    e5d0:	7862      	ldrb	r2, [r4, #1]
    e5d2:	78a3      	ldrb	r3, [r4, #2]
    e5d4:	429a      	cmp	r2, r3
	user_op->status = status;
    e5d6:	f04f 0001 	mov.w	r0, #1
				if (((ticker->req -
    e5da:	d010      	beq.n	e5fe <ticker_job_list_insert+0x166>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    e5dc:	f04f 0300 	mov.w	r3, #0
    e5e0:	f809 3001 	strb.w	r3, [r9, r1]
	if (user_op->fp_op_func) {
    e5e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
	user_op->status = status;
    e5e6:	70a8      	strb	r0, [r5, #2]
	if (user_op->fp_op_func) {
    e5e8:	b10b      	cbz	r3, e5ee <ticker_job_list_insert+0x156>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    e5ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e5ec:	4798      	blx	r3
    e5ee:	9b02      	ldr	r3, [sp, #8]
    e5f0:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
    e5f2:	e7cf      	b.n	e594 <ticker_job_list_insert+0xfc>
		instance->ticker_id_head = id;
    e5f4:	f88b a018 	strb.w	sl, [fp, #24]
    e5f8:	e7a6      	b.n	e548 <ticker_job_list_insert+0xb0>
		(ticks_to_expire_current =
    e5fa:	4601      	mov	r1, r0
    e5fc:	e795      	b.n	e52a <ticker_job_list_insert+0x92>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e5fe:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    e600:	f8db 1014 	ldr.w	r1, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e604:	f8cd 800c 	str.w	r8, [sp, #12]
    e608:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    e60c:	4293      	cmp	r3, r2
    e60e:	d007      	beq.n	e620 <ticker_job_list_insert+0x188>
		ticker->must_expire =
    e610:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e614:	1a9b      	subs	r3, r3, r2
    e616:	fab3 f383 	clz	r3, r3
    e61a:	095b      	lsrs	r3, r3, #5
    e61c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    e620:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e622:	62a3      	str	r3, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    e624:	68eb      	ldr	r3, [r5, #12]
    e626:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    e628:	692b      	ldr	r3, [r5, #16]
    e62a:	6223      	str	r3, [r4, #32]
		(start->lazy < TICKER_LAZY_MUST_EXPIRE_KEEP) ? start->lazy :
    e62c:	8aab      	ldrh	r3, [r5, #20]
	ticker->lazy_periodic =
    e62e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    e632:	4293      	cmp	r3, r2
    e634:	bf88      	it	hi
    e636:	2300      	movhi	r3, #0
    e638:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    e63a:	69ab      	ldr	r3, [r5, #24]
    e63c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    e63e:	69eb      	ldr	r3, [r5, #28]
    e640:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    e642:	6a2b      	ldr	r3, [r5, #32]
    e644:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    e646:	68ab      	ldr	r3, [r5, #8]
    e648:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    e64a:	2300      	movs	r3, #0
    e64c:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    e64e:	686a      	ldr	r2, [r5, #4]
    e650:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    e652:	4698      	mov	r8, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    e654:	f7ff fefc 	bl	e450 <ticks_to_expire_prep>
	ticker->force = 1U;
    e658:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
    e65a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    e65e:	f8a4 801e 	strh.w	r8, [r4, #30]
	ticker->force = 1U;
    e662:	70e3      	strb	r3, [r4, #3]
}
    e664:	e73d      	b.n	e4e2 <ticker_job_list_insert+0x4a>
	while (count_user--) {
    e666:	9905      	ldr	r1, [sp, #20]
		user->first = user_ops_first;
    e668:	7053      	strb	r3, [r2, #1]
	while (count_user--) {
    e66a:	4291      	cmp	r1, r2
    e66c:	f1a2 0308 	sub.w	r3, r2, #8
    e670:	d006      	beq.n	e680 <ticker_job_list_insert+0x1e8>
    e672:	9302      	str	r3, [sp, #8]
    e674:	e723      	b.n	e4be <ticker_job_list_insert+0x26>
	ticker_new->next = current;
    e676:	f80c 2006 	strb.w	r2, [ip, r6]
		instance->ticker_id_head = id;
    e67a:	f88b a018 	strb.w	sl, [fp, #24]
	if (current != TICKER_NULL) {
    e67e:	e76e      	b.n	e55e <ticker_job_list_insert+0xc6>
}
    e680:	b007      	add	sp, #28
    e682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e686:	bf00      	nop

0000e688 <ticker_worker>:
{
    e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    e68c:	7e47      	ldrb	r7, [r0, #25]
	instance->worker_trigger = 1U;
    e68e:	2301      	movs	r3, #1
{
    e690:	b089      	sub	sp, #36	; 0x24
	instance->worker_trigger = 1U;
    e692:	7683      	strb	r3, [r0, #26]
	if (instance->job_guard) {
    e694:	2f00      	cmp	r7, #0
    e696:	f040 809a 	bne.w	e7ce <ticker_worker+0x146>
	if (instance->ticker_id_head == TICKER_NULL) {
    e69a:	7e03      	ldrb	r3, [r0, #24]
    e69c:	2bff      	cmp	r3, #255	; 0xff
    e69e:	4606      	mov	r6, r0
    e6a0:	f000 8094 	beq.w	e7cc <ticker_worker+0x144>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    e6a4:	f00b fc7a 	bl	19f9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e6a8:	6972      	ldr	r2, [r6, #20]
	if (instance->ticks_slot_previous > ticks_elapsed) {
    e6aa:	69f3      	ldr	r3, [r6, #28]
	ticker_id_head = instance->ticker_id_head;
    e6ac:	7e34      	ldrb	r4, [r6, #24]
	node = &instance->nodes[0];
    e6ae:	f8d6 9000 	ldr.w	r9, [r6]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e6b2:	1a80      	subs	r0, r0, r2
    e6b4:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	if (instance->ticks_slot_previous > ticks_elapsed) {
    e6b8:	4553      	cmp	r3, sl
    e6ba:	bf94      	ite	ls
    e6bc:	2300      	movls	r3, #0
    e6be:	2301      	movhi	r3, #1
	while (ticker_id_head != TICKER_NULL) {
    e6c0:	2cff      	cmp	r4, #255	; 0xff
	if (instance->ticks_slot_previous > ticks_elapsed) {
    e6c2:	9303      	str	r3, [sp, #12]
	ticks_expired = 0U;
    e6c4:	46bb      	mov	fp, r7
	while (ticker_id_head != TICKER_NULL) {
    e6c6:	d065      	beq.n	e794 <ticker_worker+0x10c>
			ticker->ext_data->ticks_drift = 0U;
    e6c8:	9704      	str	r7, [sp, #16]
    e6ca:	46b0      	mov	r8, r6
		ticker = &node[ticker_id_head];
    e6cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e6d0:	eb09 1504 	add.w	r5, r9, r4, lsl #4
    e6d4:	0124      	lsls	r4, r4, #4
		ticks_to_expire = ticker->ticks_to_expire;
    e6d6:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
    e6d8:	4553      	cmp	r3, sl
    e6da:	d859      	bhi.n	e790 <ticker_worker+0x108>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    e6dc:	78aa      	ldrb	r2, [r5, #2]
		ticker_id_head = ticker->next;
    e6de:	f819 4004 	ldrb.w	r4, [r9, r4]
		ticks_elapsed -= ticks_to_expire;
    e6e2:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
    e6e6:	449b      	add	fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    e6e8:	786b      	ldrb	r3, [r5, #1]
    e6ea:	1a9b      	subs	r3, r3, r2
    e6ec:	b2db      	uxtb	r3, r3
    e6ee:	2b01      	cmp	r3, #1
    e6f0:	d14c      	bne.n	e78c <ticker_worker+0x104>
		if (ticker->ticks_slot != 0U &&
    e6f2:	69a9      	ldr	r1, [r5, #24]
    e6f4:	2900      	cmp	r1, #0
    e6f6:	d06f      	beq.n	e7d8 <ticker_worker+0x150>
    e6f8:	9b03      	ldr	r3, [sp, #12]
    e6fa:	b923      	cbnz	r3, e706 <ticker_worker+0x7e>
		   (slot_reserved ||
    e6fc:	f8d8 301c 	ldr.w	r3, [r8, #28]
    e700:	455b      	cmp	r3, fp
    e702:	f240 8081 	bls.w	e808 <ticker_worker+0x180>
			struct ticker_ext *ext_data = ticker->ext_data;
    e706:	6aab      	ldr	r3, [r5, #40]	; 0x28
			if (ext_data &&
    e708:	b13b      	cbz	r3, e71a <ticker_worker+0x92>
    e70a:	681a      	ldr	r2, [r3, #0]
    e70c:	b112      	cbz	r2, e714 <ticker_worker+0x8c>
			    ext_data->ticks_slot_window != 0U &&
    e70e:	7a1a      	ldrb	r2, [r3, #8]
    e710:	2a00      	cmp	r2, #0
    e712:	d072      	beq.n	e7fa <ticker_worker+0x172>
				ext_data->reschedule_state =
    e714:	f04f 0200 	mov.w	r2, #0
    e718:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    e71a:	8beb      	ldrh	r3, [r5, #30]
			if ((ticker->must_expire == 0U) ||
    e71c:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
			ticker->lazy_current++;
    e720:	3301      	adds	r3, #1
    e722:	b29b      	uxth	r3, r3
    e724:	83eb      	strh	r3, [r5, #30]
			if ((ticker->must_expire == 0U) ||
    e726:	2a00      	cmp	r2, #0
    e728:	d05a      	beq.n	e7e0 <ticker_worker+0x158>
    e72a:	8baa      	ldrh	r2, [r5, #28]
    e72c:	429a      	cmp	r2, r3
    e72e:	d257      	bcs.n	e7e0 <ticker_worker+0x158>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    e730:	6aab      	ldr	r3, [r5, #40]	; 0x28
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    e732:	2b00      	cmp	r3, #0
    e734:	f000 80b9 	beq.w	e8aa <ticker_worker+0x222>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    e738:	7a1a      	ldrb	r2, [r3, #8]
    e73a:	2a01      	cmp	r2, #1
    e73c:	d050      	beq.n	e7e0 <ticker_worker+0x158>
			must_expire_skip = 1U;
    e73e:	2601      	movs	r6, #1
			ticker->ext_data->ticks_drift = 0U;
    e740:	2200      	movs	r2, #0
			ticks_drift = ticker->ext_data->ticks_drift;
    e742:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
    e744:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
    e746:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e748:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
    e74a:	78aa      	ldrb	r2, [r5, #2]
		if (ticker->timeout_func) {
    e74c:	68ef      	ldr	r7, [r5, #12]
		ticker->ack--;
    e74e:	3a01      	subs	r2, #1
    e750:	70aa      	strb	r2, [r5, #2]
		if (ticker->timeout_func) {
    e752:	b1df      	cbz	r7, e78c <ticker_worker+0x104>
					   ticks_expired -
    e754:	696b      	ldr	r3, [r5, #20]
    e756:	f8d8 2014 	ldr.w	r2, [r8, #20]
			ticker->timeout_func(ticks_at_expire,
    e75a:	f895 c003 	ldrb.w	ip, [r5, #3]
					   ticks_expired -
    e75e:	ebab 0303 	sub.w	r3, fp, r3
    e762:	4413      	add	r3, r2
			ticks_at_expire = (instance->ticks_current +
    e764:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    e768:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e76a:	692b      	ldr	r3, [r5, #16]
    e76c:	2e00      	cmp	r6, #0
    e76e:	d13b      	bne.n	e7e8 <ticker_worker+0x160>
    e770:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
    e774:	e9cd c300 	strd	ip, r3, [sp]
    e778:	4673      	mov	r3, lr
    e77a:	47b8      	blx	r7
				if (ticker->ticks_slot != 0U) {
    e77c:	69ab      	ldr	r3, [r5, #24]
				ticker->lazy_current = 0U;
    e77e:	83ee      	strh	r6, [r5, #30]
					slot_reserved = 1U;
    e780:	2b00      	cmp	r3, #0
    e782:	9b03      	ldr	r3, [sp, #12]
				ticker->force = 0U;
    e784:	70ee      	strb	r6, [r5, #3]
					slot_reserved = 1U;
    e786:	bf18      	it	ne
    e788:	2301      	movne	r3, #1
    e78a:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    e78c:	2cff      	cmp	r4, #255	; 0xff
    e78e:	d19d      	bne.n	e6cc <ticker_worker+0x44>
    e790:	9f04      	ldr	r7, [sp, #16]
    e792:	4646      	mov	r6, r8
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    e794:	7af3      	ldrb	r3, [r6, #11]
    e796:	7ab2      	ldrb	r2, [r6, #10]
    e798:	429a      	cmp	r2, r3
    e79a:	d107      	bne.n	e7ac <ticker_worker+0x124>
	uint8_t idx = *ticks_elapsed_index + 1;
    e79c:	3201      	adds	r2, #1
    e79e:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    e7a0:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    e7a2:	bf1a      	itte	ne
    e7a4:	4617      	movne	r7, r2
    e7a6:	463b      	movne	r3, r7
    e7a8:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    e7aa:	72f7      	strb	r7, [r6, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    e7ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
	instance->worker_trigger = 0U;
    e7b0:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    e7b2:	f8c3 b00c 	str.w	fp, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    e7b6:	6a74      	ldr	r4, [r6, #36]	; 0x24
	instance->worker_trigger = 0U;
    e7b8:	76b2      	strb	r2, [r6, #26]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    e7ba:	4633      	mov	r3, r6
    e7bc:	2201      	movs	r2, #1
    e7be:	2104      	movs	r1, #4
    e7c0:	2003      	movs	r0, #3
    e7c2:	46a4      	mov	ip, r4
}
    e7c4:	b009      	add	sp, #36	; 0x24
    e7c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    e7ca:	4760      	bx	ip
		instance->worker_trigger = 0U;
    e7cc:	7687      	strb	r7, [r0, #26]
}
    e7ce:	b009      	add	sp, #36	; 0x24
    e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7d4:	e9dd 4205 	ldrd	r4, r2, [sp, #20]
		if (ticker->ext_data) {
    e7d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e7da:	b15b      	cbz	r3, e7f4 <ticker_worker+0x16c>
    e7dc:	2600      	movs	r6, #0
    e7de:	e7af      	b.n	e740 <ticker_worker+0xb8>
				ticker->ack--;
    e7e0:	78ab      	ldrb	r3, [r5, #2]
    e7e2:	3b01      	subs	r3, #1
    e7e4:	70ab      	strb	r3, [r5, #2]
				continue;
    e7e6:	e7d1      	b.n	e78c <ticker_worker+0x104>
			ticker->timeout_func(ticks_at_expire,
    e7e8:	e9cd c300 	strd	ip, r3, [sp]
    e7ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e7f0:	47b8      	blx	r7
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    e7f2:	e7cb      	b.n	e78c <ticker_worker+0x104>
    e7f4:	461e      	mov	r6, r3
			ticks_drift = 0U;
    e7f6:	4619      	mov	r1, r3
    e7f8:	e7a8      	b.n	e74c <ticker_worker+0xc4>
			    TICKER_RESCHEDULE_STATE_NONE &&
    e7fa:	8ba9      	ldrh	r1, [r5, #28]
    e7fc:	8bea      	ldrh	r2, [r5, #30]
    e7fe:	4291      	cmp	r1, r2
    e800:	d888      	bhi.n	e714 <ticker_worker+0x8c>
				ext_data->reschedule_state =
    e802:	2201      	movs	r2, #1
    e804:	721a      	strb	r2, [r3, #8]
    e806:	e788      	b.n	e71a <ticker_worker+0x92>
	if (ticker->next != TICKER_NULL) {
    e808:	2cff      	cmp	r4, #255	; 0xff
    e80a:	d0e5      	beq.n	e7d8 <ticker_worker+0x150>
		uint16_t lazy_current = ticker->lazy_current;
    e80c:	8be8      	ldrh	r0, [r5, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    e80e:	8bab      	ldrh	r3, [r5, #28]
		uint32_t current_age = ticker->ticks_periodic +
    e810:	f8d5 e004 	ldr.w	lr, [r5, #4]
		if (lazy_current >= ticker->lazy_periodic) {
    e814:	4298      	cmp	r0, r3
			lazy_current -= ticker->lazy_periodic;
    e816:	bf24      	itt	cs
    e818:	1ac3      	subcs	r3, r0, r3
    e81a:	b298      	uxthcs	r0, r3
			struct ticker_node *ticker_next = &nodes[id_head];
    e81c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    e820:	eb09 1303 	add.w	r3, r9, r3, lsl #4
		uint32_t current_age = ticker->ticks_periodic +
    e824:	fb00 e00e 	mla	r0, r0, lr, lr
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    e828:	689f      	ldr	r7, [r3, #8]
		uint32_t current_age = ticker->ticks_periodic +
    e82a:	9007      	str	r0, [sp, #28]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    e82c:	428f      	cmp	r7, r1
    e82e:	d8d3      	bhi.n	e7d8 <ticker_worker+0x150>
    e830:	9405      	str	r4, [sp, #20]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    e832:	463e      	mov	r6, r7
    e834:	468c      	mov	ip, r1
    e836:	4674      	mov	r4, lr
    e838:	9206      	str	r2, [sp, #24]
    e83a:	e00f      	b.n	e85c <ticker_worker+0x1d4>
					  0U :
    e83c:	bb51      	cbnz	r1, e894 <ticker_worker+0x20c>
			     (next_is_critical ||
    e83e:	78d9      	ldrb	r1, [r3, #3]
    e840:	78ea      	ldrb	r2, [r5, #3]
    e842:	4291      	cmp	r1, r2
    e844:	d824      	bhi.n	e890 <ticker_worker+0x208>
			id_head = ticker_next->next;
    e846:	781b      	ldrb	r3, [r3, #0]
		while (id_head != TICKER_NULL) {
    e848:	2bff      	cmp	r3, #255	; 0xff
    e84a:	d0c3      	beq.n	e7d4 <ticker_worker+0x14c>
			struct ticker_node *ticker_next = &nodes[id_head];
    e84c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e850:	eb09 1303 	add.w	r3, r9, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    e854:	689f      	ldr	r7, [r3, #8]
    e856:	443e      	add	r6, r7
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    e858:	45b4      	cmp	ip, r6
    e85a:	d3bb      	bcc.n	e7d4 <ticker_worker+0x14c>
			if (ticker_next->ticks_slot == 0U) {
    e85c:	699a      	ldr	r2, [r3, #24]
    e85e:	2a00      	cmp	r2, #0
    e860:	d0f1      	beq.n	e846 <ticker_worker+0x1be>
			uint16_t lazy_next = ticker_next->lazy_current;
    e862:	8bda      	ldrh	r2, [r3, #30]
				ticker_next->lazy_periodic > lazy_next;
    e864:	8b98      	ldrh	r0, [r3, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    e866:	6859      	ldr	r1, [r3, #4]
			if (!lazy_next_periodic_skip) {
    e868:	4282      	cmp	r2, r0
    e86a:	d2e7      	bcs.n	e83c <ticker_worker+0x1b4>
					  0U :
    e86c:	2900      	cmp	r1, #0
    e86e:	d0ea      	beq.n	e846 <ticker_worker+0x1be>
				(ticker->ticks_periodic != 0U) &&
    e870:	2c00      	cmp	r4, #0
    e872:	d0e8      	beq.n	e846 <ticker_worker+0x1be>
    e874:	4696      	mov	lr, r2
			if (curr_has_ticks_slot_window ||
    e876:	4282      	cmp	r2, r0
    e878:	d3e5      	bcc.n	e846 <ticker_worker+0x1be>
				(ticker->force == ticker_next->force);
    e87a:	78e8      	ldrb	r0, [r5, #3]
    e87c:	78da      	ldrb	r2, [r3, #3]
			     (next_is_critical ||
    e87e:	4290      	cmp	r0, r2
    e880:	d306      	bcc.n	e890 <ticker_worker+0x208>
			      (equal_priority && equal_force && next_is_older &&
    e882:	d1e0      	bne.n	e846 <ticker_worker+0x1be>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    e884:	fb0e 1201 	mla	r2, lr, r1, r1
			      (equal_priority && equal_force && next_is_older &&
    e888:	9907      	ldr	r1, [sp, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    e88a:	1bd2      	subs	r2, r2, r7
			      (equal_priority && equal_force && next_is_older &&
    e88c:	4291      	cmp	r1, r2
    e88e:	d2da      	bcs.n	e846 <ticker_worker+0x1be>
    e890:	9c05      	ldr	r4, [sp, #20]
    e892:	e738      	b.n	e706 <ticker_worker+0x7e>
				(ticker->ticks_periodic != 0U) &&
    e894:	b124      	cbz	r4, e8a0 <ticker_worker+0x218>
				lazy_next -= ticker_next->lazy_periodic;
    e896:	eba2 0e00 	sub.w	lr, r2, r0
    e89a:	fa1f fe8e 	uxth.w	lr, lr
    e89e:	e7ea      	b.n	e876 <ticker_worker+0x1ee>
			     (next_is_critical ||
    e8a0:	78e9      	ldrb	r1, [r5, #3]
    e8a2:	78da      	ldrb	r2, [r3, #3]
    e8a4:	4291      	cmp	r1, r2
    e8a6:	d2ce      	bcs.n	e846 <ticker_worker+0x1be>
    e8a8:	e7f2      	b.n	e890 <ticker_worker+0x208>
				ticker->ack--;
    e8aa:	78aa      	ldrb	r2, [r5, #2]
			ticks_drift = 0U;
    e8ac:	4619      	mov	r1, r3
			must_expire_skip = 1U;
    e8ae:	2601      	movs	r6, #1
    e8b0:	e74c      	b.n	e74c <ticker_worker+0xc4>
    e8b2:	bf00      	nop

0000e8b4 <ticker_job>:
	if (instance->worker_trigger) {
    e8b4:	7e83      	ldrb	r3, [r0, #26]
    e8b6:	2b00      	cmp	r3, #0
    e8b8:	f040 83de 	bne.w	f078 <ticker_job+0x7c4>
{
    e8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    e8c0:	7e46      	ldrb	r6, [r0, #25]
{
    e8c2:	b08f      	sub	sp, #60	; 0x3c
    e8c4:	4682      	mov	sl, r0
	if (instance->job_guard) {
    e8c6:	2e00      	cmp	r6, #0
    e8c8:	d17c      	bne.n	e9c4 <ticker_job+0x110>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    e8ca:	7a83      	ldrb	r3, [r0, #10]
    e8cc:	7ac2      	ldrb	r2, [r0, #11]
	instance->job_guard = 1U;
    e8ce:	2101      	movs	r1, #1
    e8d0:	7641      	strb	r1, [r0, #25]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    e8d2:	429a      	cmp	r2, r3
	ticks_previous = instance->ticks_current;
    e8d4:	6941      	ldr	r1, [r0, #20]
    e8d6:	9108      	str	r1, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    e8d8:	f000 83cf 	beq.w	f07a <ticker_job+0x7c6>
	uint8_t idx = *ticks_elapsed_index + 1;
    e8dc:	3301      	adds	r3, #1
    e8de:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    e8e0:	2b02      	cmp	r3, #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];
    e8e2:	bf12      	itee	ne
    e8e4:	461a      	movne	r2, r3
    e8e6:	4632      	moveq	r2, r6
		idx = 0U;
    e8e8:	4633      	moveq	r3, r6
		ticks_elapsed =
    e8ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	*ticks_elapsed_index = idx;
    e8ee:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
    e8f0:	68d2      	ldr	r2, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    e8f2:	9b08      	ldr	r3, [sp, #32]
		ticks_elapsed =
    e8f4:	9204      	str	r2, [sp, #16]
		instance->ticks_current += ticks_elapsed;
    e8f6:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    e8f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    e8fc:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1U;
    e8fe:	2401      	movs	r4, #1
	ticker_id_old_head = instance->ticker_id_head;
    e900:	f89a 3018 	ldrb.w	r3, [sl, #24]
    e904:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_now = cntr_cnt_get();
    e906:	f00b fb49 	bl	19f9c <cntr_cnt_get>
	count_user = instance->count_user;
    e90a:	f89a 2009 	ldrb.w	r2, [sl, #9]
	node = &instance->nodes[0];
    e90e:	f8da 3000 	ldr.w	r3, [sl]
    e912:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    e914:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    e916:	f8da 5004 	ldr.w	r5, [sl, #4]
	ticks_now = cntr_cnt_get();
    e91a:	9006      	str	r0, [sp, #24]
	while (count_user--) {
    e91c:	b2db      	uxtb	r3, r3
    e91e:	2a00      	cmp	r2, #0
    e920:	f000 83da 	beq.w	f0d8 <ticker_job+0x824>
    e924:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
    e928:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
	insert_head = TICKER_NULL;
    e92c:	23ff      	movs	r3, #255	; 0xff
    e92e:	9305      	str	r3, [sp, #20]
    e930:	f8cd a00c 	str.w	sl, [sp, #12]
		user_ops = &user->user_op[0];
    e934:	f8d9 b004 	ldr.w	fp, [r9, #4]
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    e938:	f04f 0a00 	mov.w	sl, #0
    e93c:	462f      	mov	r7, r5
		while (user->middle != user->last) {
    e93e:	f899 0003 	ldrb.w	r0, [r9, #3]
    e942:	f899 8002 	ldrb.w	r8, [r9, #2]
			user_op = &user_ops[user->middle];
    e946:	fa0f f488 	sxth.w	r4, r8
    e94a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
			middle = user->middle + 1;
    e94e:	f108 0301 	add.w	r3, r8, #1
		while (user->middle != user->last) {
    e952:	4540      	cmp	r0, r8
			user_op = &user_ops[user->middle];
    e954:	ea4f 1604 	mov.w	r6, r4, lsl #4
			middle = user->middle + 1;
    e958:	b2db      	uxtb	r3, r3
			user_op = &user_ops[user->middle];
    e95a:	eb0b 1404 	add.w	r4, fp, r4, lsl #4
		while (user->middle != user->last) {
    e95e:	f000 810b 	beq.w	eb78 <ticker_job+0x2c4>
			if (middle == user->count_user_op) {
    e962:	f899 2000 	ldrb.w	r2, [r9]
				middle = 0U;
    e966:	429a      	cmp	r2, r3
    e968:	bf08      	it	eq
    e96a:	2300      	moveq	r3, #0
			user->middle = middle;
    e96c:	f889 3002 	strb.w	r3, [r9, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    e970:	f81b 2006 	ldrb.w	r2, [fp, r6]
			ticker = &node[user_op->id];
    e974:	7861      	ldrb	r1, [r4, #1]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    e976:	2a04      	cmp	r2, #4
    e978:	d93a      	bls.n	e9f0 <ticker_job+0x13c>
			ticker = &node[user_op->id];
    e97a:	9801      	ldr	r0, [sp, #4]
    e97c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    e980:	eb00 1503 	add.w	r5, r0, r3, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    e984:	2a08      	cmp	r2, #8
			ticker = &node[user_op->id];
    e986:	ea4f 1303 	mov.w	r3, r3, lsl #4
    e98a:	9302      	str	r3, [sp, #8]
			state = (ticker->req - ticker->ack) & 0xff;
    e98c:	78a8      	ldrb	r0, [r5, #2]
    e98e:	786b      	ldrb	r3, [r5, #1]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    e990:	d822      	bhi.n	e9d8 <ticker_job+0x124>
			state = (ticker->req - ticker->ack) & 0xff;
    e992:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    e994:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    e998:	d12c      	bne.n	e9f4 <ticker_job+0x140>
			    ((state == 0U) &&
    e99a:	2a06      	cmp	r2, #6
    e99c:	d11c      	bne.n	e9d8 <ticker_job+0x124>
		if (instance->ticker_id_slot_previous == user_op->id) {
    e99e:	9b03      	ldr	r3, [sp, #12]
    e9a0:	7edb      	ldrb	r3, [r3, #27]
    e9a2:	428b      	cmp	r3, r1
    e9a4:	d04f      	beq.n	ea46 <ticker_job+0x192>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    e9a6:	f80b a006 	strb.w	sl, [fp, r6]
	if (user_op->fp_op_func) {
    e9aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	user_op->status = status;
    e9ac:	f884 a002 	strb.w	sl, [r4, #2]
	if (user_op->fp_op_func) {
    e9b0:	2b00      	cmp	r3, #0
    e9b2:	d0c4      	beq.n	e93e <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    e9b4:	2000      	movs	r0, #0
    e9b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e9b8:	4798      	blx	r3
		while (user->middle != user->last) {
    e9ba:	f899 0003 	ldrb.w	r0, [r9, #3]
    e9be:	f899 8002 	ldrb.w	r8, [r9, #2]
    e9c2:	e7c0      	b.n	e946 <ticker_job+0x92>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    e9c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e9c6:	2104      	movs	r1, #4
    e9c8:	4603      	mov	r3, r0
    e9ca:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    e9cc:	2004      	movs	r0, #4
    e9ce:	46a4      	mov	ip, r4
}
    e9d0:	b00f      	add	sp, #60	; 0x3c
    e9d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    e9d6:	4760      	bx	ip
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    e9d8:	f80b a006 	strb.w	sl, [fp, r6]
	user_op->status = status;
    e9dc:	f04f 0301 	mov.w	r3, #1
    e9e0:	70a3      	strb	r3, [r4, #2]
	if (user_op->fp_op_func) {
    e9e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e9e4:	2b00      	cmp	r3, #0
    e9e6:	d0aa      	beq.n	e93e <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    e9e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e9ea:	2001      	movs	r0, #1
    e9ec:	4798      	blx	r3
    e9ee:	e7a6      	b.n	e93e <ticker_job+0x8a>
    e9f0:	4698      	mov	r8, r3
    e9f2:	e7a8      	b.n	e946 <ticker_job+0x92>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
    e9f4:	2a05      	cmp	r2, #5
    e9f6:	d11d      	bne.n	ea34 <ticker_job+0x180>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    e9f8:	6862      	ldr	r2, [r4, #4]
    e9fa:	b94a      	cbnz	r2, ea10 <ticker_job+0x15c>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    e9fc:	68a2      	ldr	r2, [r4, #8]
    e9fe:	b93a      	cbnz	r2, ea10 <ticker_job+0x15c>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    ea00:	68e2      	ldr	r2, [r4, #12]
    ea02:	b92a      	cbnz	r2, ea10 <ticker_job+0x15c>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    ea04:	6922      	ldr	r2, [r4, #16]
    ea06:	b91a      	cbnz	r2, ea10 <ticker_job+0x15c>
			     (user_op->params.update.lazy == 0U) &&
    ea08:	6962      	ldr	r2, [r4, #20]
    ea0a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    ea0e:	d0e3      	beq.n	e9d8 <ticker_job+0x124>
			if ((state == 1U) ||
    ea10:	2b01      	cmp	r3, #1
    ea12:	d01a      	beq.n	ea4a <ticker_job+0x196>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    ea14:	9b03      	ldr	r3, [sp, #12]
    ea16:	2104      	movs	r1, #4
    ea18:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    ea1a:	463d      	mov	r5, r7
    ea1c:	2201      	movs	r2, #1
    ea1e:	4608      	mov	r0, r1
    ea20:	47a0      	blx	r4
	while (count_user--) {
    ea22:	45a9      	cmp	r9, r5
				user->middle = prev;
    ea24:	f889 8002 	strb.w	r8, [r9, #2]
	while (count_user--) {
    ea28:	f1a9 0308 	sub.w	r3, r9, #8
    ea2c:	f000 80aa 	beq.w	eb84 <ticker_job+0x2d0>
    ea30:	4699      	mov	r9, r3
    ea32:	e77f      	b.n	e934 <ticker_job+0x80>
			if ((state == 1U) ||
    ea34:	2b01      	cmp	r3, #1
    ea36:	f000 813b 	beq.w	ecb0 <ticker_job+0x3fc>
    ea3a:	2a06      	cmp	r2, #6
    ea3c:	d1ea      	bne.n	ea14 <ticker_job+0x160>
		if (instance->ticker_id_slot_previous == user_op->id) {
    ea3e:	9b03      	ldr	r3, [sp, #12]
    ea40:	7edb      	ldrb	r3, [r3, #27]
    ea42:	428b      	cmp	r3, r1
    ea44:	d1af      	bne.n	e9a6 <ticker_job+0xf2>
				ticks_at_yield =
    ea46:	6861      	ldr	r1, [r4, #4]
    ea48:	e154      	b.n	ecf4 <ticker_job+0x440>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ea4a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    ea4e:	4640      	mov	r0, r8
    ea50:	f7ff fcc4 	bl	e3dc <ticker_dequeue>
    ea54:	60a8      	str	r0, [r5, #8]
		ticker_job_node_update(ticker, user_op, ticks_now,
    ea56:	f8d8 c014 	ldr.w	ip, [r8, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ea5a:	9b06      	ldr	r3, [sp, #24]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ea5c:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ea5e:	eba3 030c 	sub.w	r3, r3, ip
    ea62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ea66:	4413      	add	r3, r2
	if (ticks_to_expire > ticks_elapsed) {
    ea68:	4298      	cmp	r0, r3
    ea6a:	f240 815b 	bls.w	ed24 <ticker_job+0x470>
		ticks_to_expire -= ticks_elapsed;
    ea6e:	1ac0      	subs	r0, r0, r3
	if ((ticker->ticks_periodic != 0U) &&
    ea70:	686b      	ldr	r3, [r5, #4]
    ea72:	2b00      	cmp	r3, #0
    ea74:	d050      	beq.n	eb18 <ticker_job+0x264>
	    (user_op->params.update.lazy != 0U)) {
    ea76:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    ea78:	2b00      	cmp	r3, #0
    ea7a:	d04d      	beq.n	eb18 <ticker_job+0x264>
		user_op->params.update.lazy--;
    ea7c:	3b01      	subs	r3, #1
    ea7e:	b29a      	uxth	r2, r3
    ea80:	82a2      	strh	r2, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ea82:	6869      	ldr	r1, [r5, #4]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ea84:	8beb      	ldrh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ea86:	4288      	cmp	r0, r1
    ea88:	d923      	bls.n	ead2 <ticker_job+0x21e>
			ticks_to_expire += ticker->ticks_periodic +
    ea8a:	f101 0801 	add.w	r8, r1, #1
    ea8e:	9707      	str	r7, [sp, #28]
    ea90:	9609      	str	r6, [sp, #36]	; 0x24
    ea92:	e01a      	b.n	eaca <ticker_job+0x216>
	if ((ticker->remainder_current >= BIT(31)) ||
    ea94:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ea96:	f8df e298 	ldr.w	lr, [pc, #664]	; ed30 <ticker_job+0x47c>
    ea9a:	4ea6      	ldr	r6, [pc, #664]	; (ed34 <ticker_job+0x480>)
    ea9c:	4496      	add	lr, r2
    ea9e:	45b6      	cmp	lr, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    eaa0:	bf84      	itt	hi
    eaa2:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    eaa6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
    eaaa:	4647      	mov	r7, r8
	ticker->remainder_current -= ticker->remainder_periodic;
    eaac:	6a2e      	ldr	r6, [r5, #32]
    eaae:	bf94      	ite	ls
    eab0:	460f      	movls	r7, r1
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    eab2:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
    eab6:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    eab8:	1bc0      	subs	r0, r0, r7
	ticker->remainder_current -= ticker->remainder_periodic;
    eaba:	1b92      	subs	r2, r2, r6
			ticker->lazy_current--;
    eabc:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    eabe:	4288      	cmp	r0, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    eac0:	626a      	str	r2, [r5, #36]	; 0x24
			ticker->lazy_current--;
    eac2:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    eac4:	f240 818b 	bls.w	edde <ticker_job+0x52a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    eac8:	8aa2      	ldrh	r2, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    eaca:	4293      	cmp	r3, r2
    eacc:	d8e2      	bhi.n	ea94 <ticker_job+0x1e0>
    eace:	9f07      	ldr	r7, [sp, #28]
    ead0:	9e09      	ldr	r6, [sp, #36]	; 0x24
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ead2:	429a      	cmp	r2, r3
    ead4:	d91f      	bls.n	eb16 <ticker_job+0x262>
			ticks_to_expire += ticker->ticks_periodic +
    ead6:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    eada:	1c4a      	adds	r2, r1, #1
	ticker->remainder_current += ticker->remainder_periodic;
    eadc:	f8d5 e020 	ldr.w	lr, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    eae0:	9207      	str	r2, [sp, #28]
	ticker->remainder_current += ticker->remainder_periodic;
    eae2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    eae4:	f8df 8248 	ldr.w	r8, [pc, #584]	; ed30 <ticker_job+0x47c>
    eae8:	4e92      	ldr	r6, [pc, #584]	; (ed34 <ticker_job+0x480>)
	ticker->remainder_current += ticker->remainder_periodic;
    eaea:	4472      	add	r2, lr
	if ((ticker->remainder_current < BIT(31)) &&
    eaec:	4490      	add	r8, r2
    eaee:	45b0      	cmp	r8, r6
    eaf0:	460f      	mov	r7, r1
    eaf2:	d806      	bhi.n	eb02 <ticker_job+0x24e>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    eaf4:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
    eaf8:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
    eafc:	9f07      	ldr	r7, [sp, #28]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    eafe:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticker->lazy_current++;
    eb02:	3301      	adds	r3, #1
    eb04:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    eb06:	626a      	str	r2, [r5, #36]	; 0x24
			ticker->lazy_current++;
    eb08:	83eb      	strh	r3, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    eb0a:	8aa2      	ldrh	r2, [r4, #20]
    eb0c:	429a      	cmp	r2, r3
			ticks_to_expire += ticker->ticks_periodic +
    eb0e:	4438      	add	r0, r7
		while (ticker->lazy_current < user_op->params.update.lazy) {
    eb10:	d8e7      	bhi.n	eae2 <ticker_job+0x22e>
    eb12:	e9dd 7609 	ldrd	r7, r6, [sp, #36]	; 0x24
		ticker->lazy_periodic = user_op->params.update.lazy;
    eb16:	83aa      	strh	r2, [r5, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    eb18:	6863      	ldr	r3, [r4, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    eb1a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    eb1c:	4403      	add	r3, r0
    eb1e:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
    eb20:	68a2      	ldr	r2, [r4, #8]
    eb22:	696b      	ldr	r3, [r5, #20]
    eb24:	4413      	add	r3, r2
    eb26:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    eb28:	b129      	cbz	r1, eb36 <ticker_job+0x282>
    eb2a:	680b      	ldr	r3, [r1, #0]
    eb2c:	b11b      	cbz	r3, eb36 <ticker_job+0x282>
			user_op->params.update.ticks_drift_plus -
    eb2e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    eb32:	1a9b      	subs	r3, r3, r2
		ext_data->ticks_drift =
    eb34:	604b      	str	r3, [r1, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    eb36:	9a06      	ldr	r2, [sp, #24]
    eb38:	4661      	mov	r1, ip
    eb3a:	4628      	mov	r0, r5
    eb3c:	f7ff fc88 	bl	e450 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    eb40:	68e2      	ldr	r2, [r4, #12]
    eb42:	69ab      	ldr	r3, [r5, #24]
    eb44:	4413      	add	r3, r2
    eb46:	61ab      	str	r3, [r5, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    eb48:	6922      	ldr	r2, [r4, #16]
    eb4a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    eb4c:	bf8c      	ite	hi
    eb4e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    eb50:	2300      	movls	r3, #0
    eb52:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    eb54:	7da3      	ldrb	r3, [r4, #22]
    eb56:	b103      	cbz	r3, eb5a <ticker_job+0x2a6>
		ticker->force = user_op->params.update.force;
    eb58:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    eb5a:	7de3      	ldrb	r3, [r4, #23]
    eb5c:	b113      	cbz	r3, eb64 <ticker_job+0x2b0>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    eb5e:	3b01      	subs	r3, #1
    eb60:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    eb64:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    eb68:	9b05      	ldr	r3, [sp, #20]
    eb6a:	5453      	strb	r3, [r2, r1]
		ticker->req++;
    eb6c:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    eb6e:	7862      	ldrb	r2, [r4, #1]
    eb70:	9205      	str	r2, [sp, #20]
		ticker->req++;
    eb72:	3301      	adds	r3, #1
    eb74:	706b      	strb	r3, [r5, #1]
    eb76:	e716      	b.n	e9a6 <ticker_job+0xf2>
    eb78:	463d      	mov	r5, r7
	while (count_user--) {
    eb7a:	45a9      	cmp	r9, r5
    eb7c:	f1a9 0308 	sub.w	r3, r9, #8
    eb80:	f47f af56 	bne.w	ea30 <ticker_job+0x17c>
    eb84:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
    eb88:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (instance->ticker_id_head != ticker_id_old_head) {
    eb8c:	f89a 5018 	ldrb.w	r5, [sl, #24]
	if (flag_elapsed) {
    eb90:	2c00      	cmp	r4, #0
    eb92:	f000 813c 	beq.w	ee0e <ticker_job+0x55a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eb96:	9b06      	ldr	r3, [sp, #24]
    eb98:	9a08      	ldr	r2, [sp, #32]
    eb9a:	1a9b      	subs	r3, r3, r2
    eb9c:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    eba0:	2dff      	cmp	r5, #255	; 0xff
	node = &instance->nodes[0];
    eba2:	f8da 3000 	ldr.w	r3, [sl]
    eba6:	9301      	str	r3, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    eba8:	f000 8299 	beq.w	f0de <ticker_job+0x82a>
    ebac:	f8dd 9010 	ldr.w	r9, [sp, #16]
			instance->ticks_slot_previous = 0U;
    ebb0:	9409      	str	r4, [sp, #36]	; 0x24
    ebb2:	e9cd 6506 	strd	r6, r5, [sp, #24]
	while (instance->ticker_id_head != TICKER_NULL) {
    ebb6:	46ab      	mov	fp, r5
	ticks_expired = 0U;
    ebb8:	f04f 0800 	mov.w	r8, #0
			instance->ticks_slot_previous = 0U;
    ebbc:	464d      	mov	r5, r9
		ticker = &node[id_expired];
    ebbe:	9a01      	ldr	r2, [sp, #4]
    ebc0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    ebc4:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    ebc8:	ea4f 1903 	mov.w	r9, r3, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    ebcc:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    ebce:	42ab      	cmp	r3, r5
    ebd0:	f200 8260 	bhi.w	f094 <ticker_job+0x7e0>
		state = (ticker->req - ticker->ack) & 0xff;
    ebd4:	78a1      	ldrb	r1, [r4, #2]
    ebd6:	7862      	ldrb	r2, [r4, #1]
		skip_collision = (ticker->lazy_current != 0U);
    ebd8:	8be0      	ldrh	r0, [r4, #30]
		state = (ticker->req - ticker->ack) & 0xff;
    ebda:	1a52      	subs	r2, r2, r1
		if (instance->ticks_slot_previous > ticks_to_expire) {
    ebdc:	f8da 101c 	ldr.w	r1, [sl, #28]
    ebe0:	428b      	cmp	r3, r1
		ticks_elapsed -= ticks_to_expire;
    ebe2:	eba5 0503 	sub.w	r5, r5, r3
		ticks_expired += ticks_to_expire;
    ebe6:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
    ebe8:	eba7 0703 	sub.w	r7, r7, r3
			instance->ticks_slot_previous -= ticks_to_expire;
    ebec:	bf31      	iteee	cc
    ebee:	1ac9      	subcc	r1, r1, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    ebf0:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
			instance->ticks_slot_previous = 0U;
    ebf4:	2100      	movcs	r1, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
    ebf6:	f88a 301b 	strbcs.w	r3, [sl, #27]
    ebfa:	f8ca 101c 	str.w	r1, [sl, #28]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    ebfe:	69a3      	ldr	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    ec00:	b2d2      	uxtb	r2, r2
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    ec02:	b113      	cbz	r3, ec0a <ticker_job+0x356>
    ec04:	2a02      	cmp	r2, #2
    ec06:	f000 80ee 	beq.w	ede6 <ticker_job+0x532>
		ticker->ticks_to_expire = 0U;
    ec0a:	2300      	movs	r3, #0
    ec0c:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    ec0e:	9b01      	ldr	r3, [sp, #4]
    ec10:	f813 3009 	ldrb.w	r3, [r3, r9]
    ec14:	f88a 3018 	strb.w	r3, [sl, #24]
		if ((ticker->ticks_periodic != 0U) ||
    ec18:	6861      	ldr	r1, [r4, #4]
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    ec1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
    ec1c:	2900      	cmp	r1, #0
    ec1e:	f040 80a7 	bne.w	ed70 <ticker_job+0x4bc>
    ec22:	b11b      	cbz	r3, ec2c <ticker_job+0x378>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    ec24:	7a1b      	ldrb	r3, [r3, #8]
    ec26:	2b01      	cmp	r3, #1
    ec28:	f000 8086 	beq.w	ed38 <ticker_job+0x484>
			if (state && ((state == 1U) || skip_collision) &&
    ec2c:	b13a      	cbz	r2, ec3e <ticker_job+0x38a>
    ec2e:	2a01      	cmp	r2, #1
    ec30:	d000      	beq.n	ec34 <ticker_job+0x380>
    ec32:	b120      	cbz	r0, ec3e <ticker_job+0x38a>
			    ticker->fp_op_func) {
    ec34:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    ec36:	b113      	cbz	r3, ec3e <ticker_job+0x38a>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    ec38:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ec3a:	2001      	movs	r0, #1
    ec3c:	4798      	blx	r3
			ticker->req = ticker->ack;
    ec3e:	78a3      	ldrb	r3, [r4, #2]
    ec40:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    ec42:	f89a b018 	ldrb.w	fp, [sl, #24]
    ec46:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    ec4a:	d1b8      	bne.n	ebbe <ticker_job+0x30a>
    ec4c:	e9dd 6506 	ldrd	r6, r5, [sp, #24]
    ec50:	9c09      	ldr	r4, [sp, #36]	; 0x24
		if (instance->ticker_id_head != ticker_id_old_head) {
    ec52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec54:	455b      	cmp	r3, fp
    ec56:	d102      	bne.n	ec5e <ticker_job+0x3aa>
	if (instance->ticker_id_head != ticker_id_old_head) {
    ec58:	1aec      	subs	r4, r5, r3
    ec5a:	bf18      	it	ne
    ec5c:	2401      	movne	r4, #1
		ticker_job_list_insert(instance, insert_head);
    ec5e:	9905      	ldr	r1, [sp, #20]
    ec60:	4650      	mov	r0, sl
    ec62:	f7ff fc19 	bl	e498 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    ec66:	f89a 3018 	ldrb.w	r3, [sl, #24]
	nodes = &instance->nodes[0];
    ec6a:	f8da b000 	ldr.w	fp, [sl]
	while (rescheduling) {
    ec6e:	9403      	str	r4, [sp, #12]
		while (ticker_id_head != TICKER_NULL) {
    ec70:	2bff      	cmp	r3, #255	; 0xff
    ec72:	f000 81be 	beq.w	eff2 <ticker_job+0x73e>
		ticker_id_head = instance->ticker_id_head;
    ec76:	461c      	mov	r4, r3
			ticker = &nodes[ticker_id_head];
    ec78:	b222      	sxth	r2, r4
    ec7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ec7e:	eb0b 1002 	add.w	r0, fp, r2, lsl #4
    ec82:	0112      	lsls	r2, r2, #4
			ext_data = ticker->ext_data;
    ec84:	6a87      	ldr	r7, [r0, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    ec86:	b11f      	cbz	r7, ec90 <ticker_job+0x3dc>
    ec88:	7a39      	ldrb	r1, [r7, #8]
    ec8a:	2901      	cmp	r1, #1
    ec8c:	f000 8121 	beq.w	eed2 <ticker_job+0x61e>
			ticker_id_head = ticker->next;
    ec90:	f81b 4002 	ldrb.w	r4, [fp, r2]
		while (ticker_id_head != TICKER_NULL) {
    ec94:	2cff      	cmp	r4, #255	; 0xff
    ec96:	d1ef      	bne.n	ec78 <ticker_job+0x3c4>
	return rescheduled;
    ec98:	9c03      	ldr	r4, [sp, #12]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    ec9a:	2e00      	cmp	r6, #0
    ec9c:	f040 80d3 	bne.w	ee46 <ticker_job+0x592>
	if (instance->ticker_id_head != ticker_id_old_head) {
    eca0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eca2:	429a      	cmp	r2, r3
    eca4:	f040 80cf 	bne.w	ee46 <ticker_job+0x592>
	if (flag_compare_update) {
    eca8:	2c00      	cmp	r4, #0
    ecaa:	f000 80bb 	beq.w	ee24 <ticker_job+0x570>
    ecae:	e0ce      	b.n	ee4e <ticker_job+0x59a>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    ecb0:	2a06      	cmp	r2, #6
    ecb2:	f43f ae74 	beq.w	e99e <ticker_job+0xea>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    ecb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
    ecba:	4640      	mov	r0, r8
    ecbc:	f7ff fb8e 	bl	e3dc <ticker_dequeue>
			ticker->req = ticker->ack;
    ecc0:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    ecc2:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    ecc4:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    ecc6:	f898 201b 	ldrb.w	r2, [r8, #27]
    ecca:	7863      	ldrb	r3, [r4, #1]
    eccc:	429a      	cmp	r2, r3
    ecce:	f47f ae6a 	bne.w	e9a6 <ticker_job+0xf2>
			if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    ecd2:	f81b 3006 	ldrb.w	r3, [fp, r6]
    ecd6:	2b06      	cmp	r3, #6
    ecd8:	f43f aeb5 	beq.w	ea46 <ticker_job+0x192>
				instance->ticker_id_slot_previous = TICKER_NULL;
    ecdc:	9a03      	ldr	r2, [sp, #12]
    ecde:	23ff      	movs	r3, #255	; 0xff
    ece0:	76d3      	strb	r3, [r2, #27]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    ece2:	f81b 3006 	ldrb.w	r3, [fp, r6]
    ece6:	2b06      	cmp	r3, #6
    ece8:	f43f aead 	beq.w	ea46 <ticker_job+0x192>
    ecec:	2b08      	cmp	r3, #8
    ecee:	f43f aeaa 	beq.w	ea46 <ticker_job+0x192>
				ticks_at_yield = ticks_now;
    ecf2:	9906      	ldr	r1, [sp, #24]
			ticks_current = instance->ticks_current;
    ecf4:	9b03      	ldr	r3, [sp, #12]
    ecf6:	695a      	ldr	r2, [r3, #20]
			if (!((ticks_at_yield - ticks_current) &
    ecf8:	1a8b      	subs	r3, r1, r2
    ecfa:	021d      	lsls	r5, r3, #8
    ecfc:	d409      	bmi.n	ed12 <ticker_job+0x45e>
				ticks_used = ticks_elapsed +
    ecfe:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ed00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    ed04:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    ed06:	9903      	ldr	r1, [sp, #12]
    ed08:	69ca      	ldr	r2, [r1, #28]
    ed0a:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    ed0c:	bf88      	it	hi
    ed0e:	61cb      	strhi	r3, [r1, #28]
    ed10:	e649      	b.n	e9a6 <ticker_job+0xf2>
				if (ticks_elapsed > ticks_used) {
    ed12:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ed14:	1a52      	subs	r2, r2, r1
    ed16:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    ed1a:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    ed1c:	bf8c      	ite	hi
    ed1e:	1a9b      	subhi	r3, r3, r2
					ticks_used = 0;
    ed20:	2300      	movls	r3, #0
    ed22:	e7f0      	b.n	ed06 <ticker_job+0x452>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ed24:	696a      	ldr	r2, [r5, #20]
    ed26:	4413      	add	r3, r2
    ed28:	1a1b      	subs	r3, r3, r0
    ed2a:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    ed2c:	2000      	movs	r0, #0
    ed2e:	e69f      	b.n	ea70 <ticker_job+0x1bc>
    ed30:	ff172b5a 	.word	0xff172b5a
    ed34:	7f172b59 	.word	0x7f172b59
				ticker->req = ticker->ack;
    ed38:	78a3      	ldrb	r3, [r4, #2]
				ticker->ticks_to_expire = ticks_elapsed;
    ed3a:	60a5      	str	r5, [r4, #8]
				ticker->req = ticker->ack;
    ed3c:	7063      	strb	r3, [r4, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    ed3e:	9b08      	ldr	r3, [sp, #32]
    ed40:	f8da 1014 	ldr.w	r1, [sl, #20]
    ed44:	eb03 0208 	add.w	r2, r3, r8
    ed48:	4620      	mov	r0, r4
    ed4a:	f7ff fb81 	bl	e450 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    ed4e:	9a01      	ldr	r2, [sp, #4]
    ed50:	9b05      	ldr	r3, [sp, #20]
    ed52:	f802 3009 	strb.w	r3, [r2, r9]
			ticker->req++;
    ed56:	7863      	ldrb	r3, [r4, #1]
    ed58:	f8cd b014 	str.w	fp, [sp, #20]
    ed5c:	3301      	adds	r3, #1
    ed5e:	b2db      	uxtb	r3, r3
			ticker->req = ticker->ack;
    ed60:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    ed62:	f89a b018 	ldrb.w	fp, [sl, #24]
    ed66:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    ed6a:	f47f af28 	bne.w	ebbe <ticker_job+0x30a>
    ed6e:	e76d      	b.n	ec4c <ticker_job+0x398>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    ed70:	b113      	cbz	r3, ed78 <ticker_job+0x4c4>
    ed72:	7a1b      	ldrb	r3, [r3, #8]
    ed74:	2b01      	cmp	r3, #1
    ed76:	d0df      	beq.n	ed38 <ticker_job+0x484>
				if (!ticker->lazy_current) {
    ed78:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    ed7c:	f1bc 0f00 	cmp.w	ip, #0
    ed80:	d140      	bne.n	ee04 <ticker_job+0x550>
					lazy_periodic = ticker->lazy_periodic;
    ed82:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
				while (count--) {
    ed86:	46e6      	mov	lr, ip
    ed88:	1c48      	adds	r0, r1, #1
    ed8a:	e9cd 0402 	strd	r0, r4, [sp, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    ed8e:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
				ticks_to_expire = 0U;
    ed92:	2200      	movs	r2, #0
    ed94:	4670      	mov	r0, lr
    ed96:	e004      	b.n	eda2 <ticker_job+0x4ee>
				while (count--) {
    ed98:	3801      	subs	r0, #1
	if ((ticker->remainder_current < BIT(31)) &&
    ed9a:	468e      	mov	lr, r1
				while (count--) {
    ed9c:	1c44      	adds	r4, r0, #1
					ticks_to_expire +=
    ed9e:	4472      	add	r2, lr
				while (count--) {
    eda0:	d012      	beq.n	edc8 <ticker_job+0x514>
	if ((ticker->remainder_current < BIT(31)) &&
    eda2:	f8df e2dc 	ldr.w	lr, [pc, #732]	; f080 <ticker_job+0x7cc>
    eda6:	4cb7      	ldr	r4, [pc, #732]	; (f084 <ticker_job+0x7d0>)
	ticker->remainder_current += ticker->remainder_periodic;
    eda8:	4433      	add	r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
    edaa:	449e      	add	lr, r3
    edac:	45a6      	cmp	lr, r4
    edae:	d8f3      	bhi.n	ed98 <ticker_job+0x4e4>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    edb0:	f8dd e008 	ldr.w	lr, [sp, #8]
    edb4:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    edb8:	3801      	subs	r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    edba:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
				while (count--) {
    edbe:	1c44      	adds	r4, r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    edc0:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
					ticks_to_expire +=
    edc4:	4472      	add	r2, lr
				while (count--) {
    edc6:	d1ec      	bne.n	eda2 <ticker_job+0x4ee>
    edc8:	9c03      	ldr	r4, [sp, #12]
				} else if (!ticker->must_expire) {
    edca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    edce:	6263      	str	r3, [r4, #36]	; 0x24
    edd0:	2800      	cmp	r0, #0
    edd2:	f000 8127 	beq.w	f024 <ticker_job+0x770>
				ticker->ticks_to_expire = ticks_to_expire;
    edd6:	60a2      	str	r2, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    edd8:	f8a4 c01e 	strh.w	ip, [r4, #30]
    eddc:	e7af      	b.n	ed3e <ticker_job+0x48a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    edde:	9f07      	ldr	r7, [sp, #28]
    ede0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ede2:	8aa2      	ldrh	r2, [r4, #20]
    ede4:	e675      	b.n	ead2 <ticker_job+0x21e>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    ede6:	2800      	cmp	r0, #0
    ede8:	f47f af0f 	bne.w	ec0a <ticker_job+0x356>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    edec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    edee:	b11b      	cbz	r3, edf8 <ticker_job+0x544>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    edf0:	7a1b      	ldrb	r3, [r3, #8]
    edf2:	2b01      	cmp	r3, #1
    edf4:	f43f af09 	beq.w	ec0a <ticker_job+0x356>
			instance->ticker_id_slot_previous = id_expired;
    edf8:	f88a b01b 	strb.w	fp, [sl, #27]
			instance->ticks_slot_previous = ticker->ticks_slot;
    edfc:	69a3      	ldr	r3, [r4, #24]
    edfe:	f8ca 301c 	str.w	r3, [sl, #28]
    ee02:	e702      	b.n	ec0a <ticker_job+0x356>
					ticker->req = ticker->ack;
    ee04:	78a3      	ldrb	r3, [r4, #2]
    ee06:	7063      	strb	r3, [r4, #1]
				while (count--) {
    ee08:	f04f 0e00 	mov.w	lr, #0
    ee0c:	e7bc      	b.n	ed88 <ticker_job+0x4d4>
		ticker_job_list_insert(instance, insert_head);
    ee0e:	9905      	ldr	r1, [sp, #20]
    ee10:	4650      	mov	r0, sl
    ee12:	f7ff fb41 	bl	e498 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    ee16:	f89a 3018 	ldrb.w	r3, [sl, #24]
    ee1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ee1c:	429a      	cmp	r2, r3
    ee1e:	d10f      	bne.n	ee40 <ticker_job+0x58c>
	if (flag_compare_update) {
    ee20:	4295      	cmp	r5, r2
    ee22:	d10d      	bne.n	ee40 <ticker_job+0x58c>
	if (instance->worker_trigger || compare_trigger) {
    ee24:	f89a 301a 	ldrb.w	r3, [sl, #26]
	instance->job_guard = 0U;
    ee28:	2200      	movs	r2, #0
    ee2a:	f88a 2019 	strb.w	r2, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
    ee2e:	2b00      	cmp	r3, #0
    ee30:	f000 80f5 	beq.w	f01e <ticker_job+0x76a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ee34:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
    ee38:	4653      	mov	r3, sl
    ee3a:	2201      	movs	r2, #1
    ee3c:	2103      	movs	r1, #3
    ee3e:	e5c5      	b.n	e9cc <ticker_job+0x118>
	if (instance->ticker_id_head == TICKER_NULL) {
    ee40:	2bff      	cmp	r3, #255	; 0xff
    ee42:	f000 80d9 	beq.w	eff8 <ticker_job+0x744>
	if (ticker_id_old_head == TICKER_NULL) {
    ee46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ee48:	2aff      	cmp	r2, #255	; 0xff
    ee4a:	f000 8138 	beq.w	f0be <ticker_job+0x80a>
	ticks_to_expire = ticker->ticks_to_expire;
    ee4e:	f8da 2000 	ldr.w	r2, [sl]
	ticker = &instance->nodes[instance->ticker_id_head];
    ee52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    ee56:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    ee5a:	6896      	ldr	r6, [r2, #8]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) && !ticks_to_expire) {
    ee5c:	2e00      	cmp	r6, #0
    ee5e:	f000 8124 	beq.w	f0aa <ticker_job+0x7f6>
		LL_ASSERT(i);
    ee62:	f8df 9224 	ldr.w	r9, [pc, #548]	; f088 <ticker_job+0x7d4>
    ee66:	f8df 8224 	ldr.w	r8, [pc, #548]	; f08c <ticker_job+0x7d8>
    ee6a:	4f89      	ldr	r7, [pc, #548]	; (f090 <ticker_job+0x7dc>)
	i = 10U;
    ee6c:	250a      	movs	r5, #10
		ctr = cntr_cnt_get();
    ee6e:	f00b f895 	bl	19f9c <cntr_cnt_get>
		cc = instance->ticks_current;
    ee72:	f8da 4014 	ldr.w	r4, [sl, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ee76:	1b03      	subs	r3, r0, r4
    ee78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    ee7c:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    ee7e:	42b3      	cmp	r3, r6
    ee80:	bf2c      	ite	cs
    ee82:	18e4      	addcs	r4, r4, r3
    ee84:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    ee86:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    ee8a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
		ctr = cntr_cnt_get();
    ee8e:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    ee90:	4620      	mov	r0, r4
    ee92:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    ee94:	f00b f882 	bl	19f9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ee98:	eba0 030b 	sub.w	r3, r0, fp
    ee9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    eea0:	eba4 040b 	sub.w	r4, r4, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    eea4:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eea6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
    eeaa:	42a3      	cmp	r3, r4
		i--;
    eeac:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
    eeb0:	d9b8      	bls.n	ee24 <ticker_job+0x570>
		LL_ASSERT(i);
    eeb2:	2d00      	cmp	r5, #0
    eeb4:	d1db      	bne.n	ee6e <ticker_job+0x5ba>
    eeb6:	f640 13cc 	movw	r3, #2508	; 0x9cc
    eeba:	464a      	mov	r2, r9
    eebc:	4641      	mov	r1, r8
    eebe:	4638      	mov	r0, r7
    eec0:	f012 fc44 	bl	2174c <assert_print>
    eec4:	4040      	eors	r0, r0
    eec6:	f380 8811 	msr	BASEPRI, r0
    eeca:	f04f 0003 	mov.w	r0, #3
    eece:	df02      	svc	2
    eed0:	e7cd      	b.n	ee6e <ticker_job+0x5ba>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    eed2:	f8da 601c 	ldr.w	r6, [sl, #28]
    eed6:	9b04      	ldr	r3, [sp, #16]
    eed8:	42b3      	cmp	r3, r6
			window_start_ticks = instance->ticks_slot_previous -
    eeda:	bf38      	it	cc
    eedc:	1af6      	subcc	r6, r6, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    eede:	e9d7 3900 	ldrd	r3, r9, [r7]
		window_start_ticks = 0U;
    eee2:	bf28      	it	cs
    eee4:	2600      	movcs	r6, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    eee6:	4599      	cmp	r9, r3
		if (instance->ticks_slot_previous > ticks_elapsed) {
    eee8:	4611      	mov	r1, r2
		ticker_id_iter = nodes[ticker_id_head].next;
    eeea:	f81b 2002 	ldrb.w	r2, [fp, r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    eeee:	d26d      	bcs.n	efcc <ticker_job+0x718>
		while (ticker_id_iter != TICKER_NULL &&
    eef0:	2aff      	cmp	r2, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    eef2:	eba3 0e09 	sub.w	lr, r3, r9
		while (ticker_id_iter != TICKER_NULL &&
    eef6:	d069      	beq.n	efcc <ticker_job+0x718>
		       ticks_start_offset + ticker->ticks_slot <=
    eef8:	f8d0 c018 	ldr.w	ip, [r0, #24]
		while (ticker_id_iter != TICKER_NULL &&
    eefc:	45e6      	cmp	lr, ip
    eefe:	d365      	bcc.n	efcc <ticker_job+0x718>
    ef00:	2300      	movs	r3, #0
    ef02:	e9cd 0701 	strd	r0, r7, [sp, #4]
		       ticks_start_offset + ticker->ticks_slot <=
    ef06:	46e0      	mov	r8, ip
		while (ticker_id_iter != TICKER_NULL &&
    ef08:	461d      	mov	r5, r3
    ef0a:	e01b      	b.n	ef44 <ticker_job+0x690>
			if (node->ticks_to_expire >
    ef0c:	68b8      	ldr	r0, [r7, #8]
					MIN(ticks_slot_window,
    ef0e:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
    ef10:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
    ef12:	442b      	add	r3, r5
			if (node->ticks_to_expire >
    ef14:	d909      	bls.n	ef2a <ticker_job+0x676>
				window_end_ticks =
    ef16:	4573      	cmp	r3, lr
    ef18:	bf28      	it	cs
    ef1a:	4673      	movcs	r3, lr
			if (window_end_ticks > ticks_start_offset +
    ef1c:	4543      	cmp	r3, r8
    ef1e:	d904      	bls.n	ef2a <ticker_job+0x676>
			if (ticks_to_expire != 0U &&
    ef20:	ebb3 030c 	subs.w	r3, r3, ip
    ef24:	d001      	beq.n	ef2a <ticker_job+0x676>
    ef26:	42b3      	cmp	r3, r6
    ef28:	d21d      	bcs.n	ef66 <ticker_job+0x6b2>
			ticker_id_iter = node->next;
    ef2a:	f81b 2002 	ldrb.w	r2, [fp, r2]
			window_start_ticks  = node->ticks_to_expire +
    ef2e:	69be      	ldr	r6, [r7, #24]
			ticks_start_offset += node->ticks_to_expire;
    ef30:	4405      	add	r5, r0
		while (ticker_id_iter != TICKER_NULL &&
    ef32:	2aff      	cmp	r2, #255	; 0xff
			window_start_ticks  = node->ticks_to_expire +
    ef34:	4406      	add	r6, r0
			ticks_to_expire     = ticks_slot_window -
    ef36:	ebae 030c 	sub.w	r3, lr, ip
		       ticks_start_offset + ticker->ticks_slot <=
    ef3a:	eb05 080c 	add.w	r8, r5, ip
		while (ticker_id_iter != TICKER_NULL &&
    ef3e:	d012      	beq.n	ef66 <ticker_job+0x6b2>
    ef40:	45c6      	cmp	lr, r8
    ef42:	d310      	bcc.n	ef66 <ticker_job+0x6b2>
			node = &nodes[ticker_id_iter];
    ef44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ef48:	eb0b 1702 	add.w	r7, fp, r2, lsl #4
    ef4c:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    ef4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ef50:	2800      	cmp	r0, #0
    ef52:	d0db      	beq.n	ef0c <ticker_job+0x658>
    ef54:	7a00      	ldrb	r0, [r0, #8]
    ef56:	2801      	cmp	r0, #1
    ef58:	d1d8      	bne.n	ef0c <ticker_job+0x658>
				ticker_id_iter = node->next;
    ef5a:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL &&
    ef5e:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    ef60:	eb05 080c 	add.w	r8, r5, ip
		while (ticker_id_iter != TICKER_NULL &&
    ef64:	d1ec      	bne.n	ef40 <ticker_job+0x68c>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    ef66:	e9dd 0701 	ldrd	r0, r7, [sp, #4]
    ef6a:	6882      	ldr	r2, [r0, #8]
    ef6c:	eba9 0202 	sub.w	r2, r9, r2
    ef70:	441a      	add	r2, r3
    ef72:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    ef74:	6083      	str	r3, [r0, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    ef76:	f81b 5001 	ldrb.w	r5, [fp, r1]
		while (ticker_id_iter != TICKER_NULL) {
    ef7a:	2dff      	cmp	r5, #255	; 0xff
    ef7c:	d02c      	beq.n	efd8 <ticker_job+0x724>
		ticker_id_prev = TICKER_NULL;
    ef7e:	26ff      	movs	r6, #255	; 0xff
    ef80:	46b6      	mov	lr, r6
    ef82:	e000      	b.n	ef86 <ticker_job+0x6d2>
			ticker_id_iter = node->next;
    ef84:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
    ef86:	b22a      	sxth	r2, r5
    ef88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ef8c:	eb0b 1c02 	add.w	ip, fp, r2, lsl #4
    ef90:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    ef92:	f8dc 6008 	ldr.w	r6, [ip, #8]
    ef96:	429e      	cmp	r6, r3
    ef98:	f080 80a3 	bcs.w	f0e2 <ticker_job+0x82e>
				ticker->ticks_to_expire -=
    ef9c:	1b9b      	subs	r3, r3, r6
    ef9e:	6083      	str	r3, [r0, #8]
			ticker_id_iter = node->next;
    efa0:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL) {
    efa4:	2aff      	cmp	r2, #255	; 0xff
    efa6:	46ae      	mov	lr, r5
    efa8:	d1ec      	bne.n	ef84 <ticker_job+0x6d0>
		if (ticker_id_prev != TICKER_NULL) {
    efaa:	2dff      	cmp	r5, #255	; 0xff
    efac:	d014      	beq.n	efd8 <ticker_job+0x724>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    efae:	b22d      	sxth	r5, r5
    efb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
			instance->ticker_id_head = nodes[ticker_id_head].next;
    efb4:	f81b 2001 	ldrb.w	r2, [fp, r1]
    efb8:	f88a 2018 	strb.w	r2, [sl, #24]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    efbc:	012b      	lsls	r3, r5, #4
    efbe:	f81b 2003 	ldrb.w	r2, [fp, r3]
    efc2:	f80b 2001 	strb.w	r2, [fp, r1]
			nodes[ticker_id_prev].next = ticker_id_head;
    efc6:	f80b 4003 	strb.w	r4, [fp, r3]
    efca:	e005      	b.n	efd8 <ticker_job+0x724>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    efcc:	6883      	ldr	r3, [r0, #8]
    efce:	eba9 0303 	sub.w	r3, r9, r3
    efd2:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    efd4:	2300      	movs	r3, #0
    efd6:	6083      	str	r3, [r0, #8]
		ticker->lazy_current--;
    efd8:	8bc3      	ldrh	r3, [r0, #30]
    efda:	3b01      	subs	r3, #1
    efdc:	83c3      	strh	r3, [r0, #30]
		ext_data->reschedule_state =
    efde:	f04f 0302 	mov.w	r3, #2
    efe2:	723b      	strb	r3, [r7, #8]
		ticker_id_head = instance->ticker_id_head;
    efe4:	f89a 3018 	ldrb.w	r3, [sl, #24]
		while (ticker_id_head != TICKER_NULL) {
    efe8:	2bff      	cmp	r3, #255	; 0xff
		rescheduled  = 1U;
    efea:	f04f 0601 	mov.w	r6, #1
		while (ticker_id_head != TICKER_NULL) {
    efee:	f47f ae42 	bne.w	ec76 <ticker_job+0x3c2>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    eff2:	9c03      	ldr	r4, [sp, #12]
    eff4:	2e00      	cmp	r6, #0
    eff6:	d05b      	beq.n	f0b0 <ticker_job+0x7fc>
		if (cntr_stop() == 0) {
    eff8:	f00a ffaa 	bl	19f50 <cntr_stop>
    effc:	4604      	mov	r4, r0
    effe:	2800      	cmp	r0, #0
    f000:	f47f af10 	bne.w	ee24 <ticker_job+0x570>
			instance->ticks_slot_previous = 0U;
    f004:	f8ca 001c 	str.w	r0, [sl, #28]
			instance->ticks_current = cntr_cnt_get();
    f008:	f00a ffc8 	bl	19f9c <cntr_cnt_get>
	if (instance->worker_trigger || compare_trigger) {
    f00c:	f89a 301a 	ldrb.w	r3, [sl, #26]
			instance->ticks_current = cntr_cnt_get();
    f010:	f8ca 0014 	str.w	r0, [sl, #20]
	instance->job_guard = 0U;
    f014:	f88a 4019 	strb.w	r4, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
    f018:	2b00      	cmp	r3, #0
    f01a:	f47f af0b 	bne.w	ee34 <ticker_job+0x580>
}
    f01e:	b00f      	add	sp, #60	; 0x3c
    f020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					while (ticks_to_expire <
    f024:	4297      	cmp	r7, r2
    f026:	f67f aed6 	bls.w	edd6 <ticker_job+0x522>
				lazy = 0U;
    f02a:	4686      	mov	lr, r0
    f02c:	1c48      	adds	r0, r1, #1
    f02e:	9002      	str	r0, [sp, #8]
    f030:	9c02      	ldr	r4, [sp, #8]
    f032:	950a      	str	r5, [sp, #40]	; 0x28
    f034:	4670      	mov	r0, lr
    f036:	e005      	b.n	f044 <ticker_job+0x790>
	if ((ticker->remainder_current < BIT(31)) &&
    f038:	468e      	mov	lr, r1
						ticks_to_expire +=
    f03a:	4472      	add	r2, lr
						lazy++;
    f03c:	3001      	adds	r0, #1
					while (ticks_to_expire <
    f03e:	4297      	cmp	r7, r2
						lazy++;
    f040:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    f042:	d912      	bls.n	f06a <ticker_job+0x7b6>
	if ((ticker->remainder_current < BIT(31)) &&
    f044:	f8df e038 	ldr.w	lr, [pc, #56]	; f080 <ticker_job+0x7cc>
    f048:	4d0e      	ldr	r5, [pc, #56]	; (f084 <ticker_job+0x7d0>)
	ticker->remainder_current += ticker->remainder_periodic;
    f04a:	4433      	add	r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
    f04c:	449e      	add	lr, r3
    f04e:	45ae      	cmp	lr, r5
    f050:	d8f2      	bhi.n	f038 <ticker_job+0x784>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f052:	46a6      	mov	lr, r4
    f054:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    f058:	4472      	add	r2, lr
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f05a:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    f05e:	3001      	adds	r0, #1
					while (ticks_to_expire <
    f060:	4297      	cmp	r7, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f062:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    f066:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    f068:	d8ec      	bhi.n	f044 <ticker_job+0x790>
				ticker->lazy_current += (lazy_periodic + lazy);
    f06a:	9c03      	ldr	r4, [sp, #12]
    f06c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f06e:	6263      	str	r3, [r4, #36]	; 0x24
    f070:	4460      	add	r0, ip
    f072:	fa1f fc80 	uxth.w	ip, r0
    f076:	e6ae      	b.n	edd6 <ticker_job+0x522>
    f078:	4770      	bx	lr
		flag_elapsed = 0U;
    f07a:	4634      	mov	r4, r6
		ticks_elapsed = 0U;
    f07c:	9604      	str	r6, [sp, #16]
    f07e:	e43f      	b.n	e900 <ticker_job+0x4c>
    f080:	ff172b5a 	.word	0xff172b5a
    f084:	7f172b59 	.word	0x7f172b59
    f088:	0002862c 	.word	0x0002862c
    f08c:	0002872c 	.word	0x0002872c
    f090:	0002866c 	.word	0x0002866c
			ticker->ticks_to_expire -= ticks_elapsed;
    f094:	4622      	mov	r2, r4
    f096:	46a9      	mov	r9, r5
    f098:	eba3 0309 	sub.w	r3, r3, r9
    f09c:	6093      	str	r3, [r2, #8]
    f09e:	9e06      	ldr	r6, [sp, #24]
    f0a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f0a2:	9d07      	ldr	r5, [sp, #28]
		if (instance->ticker_id_head != ticker_id_old_head) {
    f0a4:	f89a b018 	ldrb.w	fp, [sl, #24]
			break;
    f0a8:	e5d3      	b.n	ec52 <ticker_job+0x39e>
	instance->job_guard = 0U;
    f0aa:	f88a 6019 	strb.w	r6, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
    f0ae:	e6c1      	b.n	ee34 <ticker_job+0x580>
	if (instance->ticker_id_head != ticker_id_old_head) {
    f0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0b2:	2bff      	cmp	r3, #255	; 0xff
    f0b4:	d1a0      	bne.n	eff8 <ticker_job+0x744>
	if (flag_compare_update) {
    f0b6:	2c00      	cmp	r4, #0
    f0b8:	f43f aeb4 	beq.w	ee24 <ticker_job+0x570>
    f0bc:	e79c      	b.n	eff8 <ticker_job+0x744>
		ticks_current = cntr_cnt_get();
    f0be:	f00a ff6d 	bl	19f9c <cntr_cnt_get>
    f0c2:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    f0c4:	f00a ff34 	bl	19f30 <cntr_start>
    f0c8:	f89a 3018 	ldrb.w	r3, [sl, #24]
    f0cc:	2800      	cmp	r0, #0
    f0ce:	f47f aebe 	bne.w	ee4e <ticker_job+0x59a>
			instance->ticks_current = ticks_current;
    f0d2:	f8ca 4014 	str.w	r4, [sl, #20]
    f0d6:	e6ba      	b.n	ee4e <ticker_job+0x59a>
	insert_head = TICKER_NULL;
    f0d8:	23ff      	movs	r3, #255	; 0xff
    f0da:	9305      	str	r3, [sp, #20]
    f0dc:	e556      	b.n	eb8c <ticker_job+0x2d8>
	while (instance->ticker_id_head != TICKER_NULL) {
    f0de:	46ab      	mov	fp, r5
    f0e0:	e5b7      	b.n	ec52 <ticker_job+0x39e>
				node->ticks_to_expire -=
    f0e2:	4672      	mov	r2, lr
    f0e4:	1af3      	subs	r3, r6, r3
    f0e6:	46b6      	mov	lr, r6
    f0e8:	f8cc 3008 	str.w	r3, [ip, #8]
				break;
    f0ec:	4615      	mov	r5, r2
    f0ee:	e75c      	b.n	efaa <ticker_job+0x6f6>

0000f0f0 <ticker_init>:
{
    f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0f2:	9e06      	ldr	r6, [sp, #24]
    f0f4:	f89d 501c 	ldrb.w	r5, [sp, #28]
    f0f8:	9c08      	ldr	r4, [sp, #32]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    f0fa:	b9b8      	cbnz	r0, f12c <ticker_init+0x3c>
	instance->count_node = count_node;
    f0fc:	4f14      	ldr	r7, [pc, #80]	; (f150 <ticker_init+0x60>)
	instance->nodes = node;
    f0fe:	603a      	str	r2, [r7, #0]
	while (count_user--) {
    f100:	1e5a      	subs	r2, r3, #1
	instance->count_node = count_node;
    f102:	7239      	strb	r1, [r7, #8]
	instance->count_user = count_user;
    f104:	727b      	strb	r3, [r7, #9]
	instance->users = user;
    f106:	607e      	str	r6, [r7, #4]
	while (count_user--) {
    f108:	b2d2      	uxtb	r2, r2
    f10a:	b173      	cbz	r3, f12a <ticker_init+0x3a>
    f10c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
		users[count_user].user_op = user_op_;
    f110:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    f112:	4611      	mov	r1, r2
    f114:	f812 3908 	ldrb.w	r3, [r2], #-8
	while (count_user--) {
    f118:	428e      	cmp	r6, r1
		user_op_ += users[count_user].count_user_op;
    f11a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    f11e:	eba5 0303 	sub.w	r3, r5, r3
		user_op_ += users[count_user].count_user_op;
    f122:	eb04 1400 	add.w	r4, r4, r0, lsl #4
		count_op -= users[count_user].count_user_op;
    f126:	b2dd      	uxtb	r5, r3
	while (count_user--) {
    f128:	d1f2      	bne.n	f110 <ticker_init+0x20>
	if (count_op) {
    f12a:	b10d      	cbz	r5, f130 <ticker_init+0x40>
		return TICKER_STATUS_FAILURE;
    f12c:	2001      	movs	r0, #1
}
    f12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	instance->caller_id_get_cb = caller_id_get_cb;
    f130:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f132:	623b      	str	r3, [r7, #32]
	instance->sched_cb = sched_cb;
    f134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f136:	627b      	str	r3, [r7, #36]	; 0x24
	instance->ticker_id_head = TICKER_NULL;
    f138:	24ff      	movs	r4, #255	; 0xff
	instance->trigger_set_cb = trigger_set_cb;
    f13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f13c:	62bb      	str	r3, [r7, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    f13e:	763c      	strb	r4, [r7, #24]
	instance->ticks_current = cntr_cnt_get();
    f140:	f00a ff2c 	bl	19f9c <cntr_cnt_get>
	instance->ticks_elapsed_first = 0U;
    f144:	817d      	strh	r5, [r7, #10]
	instance->ticks_current = cntr_cnt_get();
    f146:	6178      	str	r0, [r7, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    f148:	76fc      	strb	r4, [r7, #27]
	instance->ticks_slot_previous = 0U;
    f14a:	61fd      	str	r5, [r7, #28]
	return TICKER_STATUS_SUCCESS;
    f14c:	4628      	mov	r0, r5
}
    f14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f150:	200028b8 	.word	0x200028b8

0000f154 <ticker_trigger>:
{
    f154:	b410      	push	{r4}
	if (instance->sched_cb) {
    f156:	4b0a      	ldr	r3, [pc, #40]	; (f180 <ticker_trigger+0x2c>)
    f158:	222c      	movs	r2, #44	; 0x2c
    f15a:	fb02 3200 	mla	r2, r2, r0, r3
    f15e:	6a54      	ldr	r4, [r2, #36]	; 0x24
    f160:	b15c      	cbz	r4, f17a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    f162:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    f166:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    f16a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    f16e:	46a4      	mov	ip, r4
    f170:	2201      	movs	r2, #1
}
    f172:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    f174:	2103      	movs	r1, #3
    f176:	2002      	movs	r0, #2
    f178:	4760      	bx	ip
}
    f17a:	bc10      	pop	{r4}
    f17c:	4770      	bx	lr
    f17e:	bf00      	nop
    f180:	200028b8 	.word	0x200028b8

0000f184 <ticker_start_ext>:
{
    f184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f188:	4d28      	ldr	r5, [pc, #160]	; (f22c <ticker_start_ext+0xa8>)
{
    f18a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    f18e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    f190:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
    f194:	fb0e 5e04 	mla	lr, lr, r4, r5
{
    f198:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    f19a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    f19e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    f1a2:	f8de 1004 	ldr.w	r1, [lr, #4]
    f1a6:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    f1aa:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
    f1ae:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
    f1b0:	f811 8030 	ldrb.w	r8, [r1, r0, lsl #3]
	if (last == user->first) {
    f1b4:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
    f1b6:	f104 0c01 	add.w	ip, r4, #1
    f1ba:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    f1be:	45e0      	cmp	r8, ip
    f1c0:	bf98      	it	ls
    f1c2:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    f1c6:	4561      	cmp	r1, ip
    f1c8:	d02d      	beq.n	f226 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    f1ca:	6871      	ldr	r1, [r6, #4]
    f1cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f1d0:	ea4f 1904 	mov.w	r9, r4, lsl #4
    f1d4:	eb01 1404 	add.w	r4, r1, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_START;
    f1d8:	f04f 0804 	mov.w	r8, #4
    f1dc:	f801 8009 	strb.w	r8, [r1, r9]
	user_op->params.start.ticks_at_start = ticks_anchor;
    f1e0:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    f1e2:	9b08      	ldr	r3, [sp, #32]
    f1e4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    f1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1e8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    f1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1ec:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    f1ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1f0:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    f1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f1f4:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    f1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f1f8:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    f1fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1fc:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    f1fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f200:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    f202:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f204:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    f206:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    f208:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    f20a:	82a7      	strh	r7, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
    f20c:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    f20e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f212:	e9de 3608 	ldrd	r3, r6, [lr, #32]
    f216:	4798      	blx	r3
    f218:	462b      	mov	r3, r5
    f21a:	4641      	mov	r1, r8
    f21c:	2200      	movs	r2, #0
    f21e:	47b0      	blx	r6
	return user_op->status;
    f220:	78a0      	ldrb	r0, [r4, #2]
}
    f222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    f226:	2001      	movs	r0, #1
}
    f228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f22c:	200028b8 	.word	0x200028b8

0000f230 <ticker_start>:
{
    f230:	b510      	push	{r4, lr}
    f232:	b08a      	sub	sp, #40	; 0x28
    f234:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f236:	9400      	str	r4, [sp, #0]
{
    f238:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f23a:	9401      	str	r4, [sp, #4]
{
    f23c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f23e:	9402      	str	r4, [sp, #8]
{
    f240:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f244:	9403      	str	r4, [sp, #12]
{
    f246:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f248:	9404      	str	r4, [sp, #16]
{
    f24a:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f24c:	9405      	str	r4, [sp, #20]
{
    f24e:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f250:	9406      	str	r4, [sp, #24]
{
    f252:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f254:	9407      	str	r4, [sp, #28]
{
    f256:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f258:	9408      	str	r4, [sp, #32]
    f25a:	2400      	movs	r4, #0
    f25c:	9409      	str	r4, [sp, #36]	; 0x24
    f25e:	f7ff ff91 	bl	f184 <ticker_start_ext>
}
    f262:	b00a      	add	sp, #40	; 0x28
    f264:	bd10      	pop	{r4, pc}
    f266:	bf00      	nop

0000f268 <ticker_update_ext>:
{
    f268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f26c:	4d28      	ldr	r5, [pc, #160]	; (f310 <__kernel_ram_size+0x28>)
{
    f26e:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
    f272:	4604      	mov	r4, r0
    f274:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    f276:	212c      	movs	r1, #44	; 0x2c
    f278:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    f27c:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    f280:	eb04 0447 	add.w	r4, r4, r7, lsl #1
    f284:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    f288:	684c      	ldr	r4, [r1, #4]
{
    f28a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	if (last >= user->count_user_op) {
    f28e:	f814 8030 	ldrb.w	r8, [r4, r0, lsl #3]
	user = &instance->users[user_id];
    f292:	eb04 0ec0 	add.w	lr, r4, r0, lsl #3
	last = user->last + 1;
    f296:	f89e 4003 	ldrb.w	r4, [lr, #3]
	if (last == user->first) {
    f29a:	f89e 9001 	ldrb.w	r9, [lr, #1]
	last = user->last + 1;
    f29e:	f104 0c01 	add.w	ip, r4, #1
    f2a2:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    f2a6:	45e0      	cmp	r8, ip
    f2a8:	bf98      	it	ls
    f2aa:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    f2ae:	45e1      	cmp	r9, ip
{
    f2b0:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
	if (last == user->first) {
    f2b4:	d029      	beq.n	f30a <__kernel_ram_size+0x22>
	user_op = &user->user_op[user->last];
    f2b6:	f8de 9004 	ldr.w	r9, [lr, #4]
    f2ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f2be:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    f2c2:	eb09 1404 	add.w	r4, r9, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    f2c6:	f04f 0b05 	mov.w	fp, #5
    f2ca:	f809 b00a 	strb.w	fp, [r9, sl]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    f2ce:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    f2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2d2:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    f2d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f2d6:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    f2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f2da:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    f2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f2de:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    f2e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f2e2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    f2e4:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    f2e6:	7062      	strb	r2, [r4, #1]
	user_op->params.update.lazy = lazy;
    f2e8:	82a6      	strh	r6, [r4, #20]
	user_op->params.update.force = force;
    f2ea:	75a7      	strb	r7, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    f2ec:	f884 8017 	strb.w	r8, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    f2f0:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    f2f2:	f88e c003 	strb.w	ip, [lr, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f2f6:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    f2fa:	4798      	blx	r3
    f2fc:	462b      	mov	r3, r5
    f2fe:	2200      	movs	r2, #0
    f300:	2104      	movs	r1, #4
    f302:	47b0      	blx	r6
	return user_op->status;
    f304:	78a0      	ldrb	r0, [r4, #2]
}
    f306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    f30a:	2001      	movs	r0, #1
}
    f30c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f310:	200028b8 	.word	0x200028b8

0000f314 <ticker_update>:
{
    f314:	b510      	push	{r4, lr}
    f316:	b088      	sub	sp, #32
    f318:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f31a:	9400      	str	r4, [sp, #0]
{
    f31c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f31e:	9401      	str	r4, [sp, #4]
{
    f320:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f322:	9402      	str	r4, [sp, #8]
{
    f324:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f328:	9403      	str	r4, [sp, #12]
{
    f32a:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f32e:	9404      	str	r4, [sp, #16]
{
    f330:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f332:	9405      	str	r4, [sp, #20]
{
    f334:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f336:	9406      	str	r4, [sp, #24]
    f338:	2400      	movs	r4, #0
    f33a:	9407      	str	r4, [sp, #28]
    f33c:	f7ff ff94 	bl	f268 <ticker_update_ext>
}
    f340:	b008      	add	sp, #32
    f342:	bd10      	pop	{r4, pc}

0000f344 <ticker_stop>:
{
    f344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f348:	4d1e      	ldr	r5, [pc, #120]	; (f3c4 <ticker_stop+0x80>)
{
    f34a:	4607      	mov	r7, r0
    f34c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    f34e:	212c      	movs	r1, #44	; 0x2c
    f350:	fb01 5e07 	mla	lr, r1, r7, r5
	struct ticker_instance *instance = &_instance[instance_index];
    f354:	eb07 0487 	add.w	r4, r7, r7, lsl #2
    f358:	eb07 0444 	add.w	r4, r7, r4, lsl #1
    f35c:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
    f360:	f8de 5004 	ldr.w	r5, [lr, #4]
    f364:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    f368:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    f36c:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
    f36e:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
    f370:	f104 0c01 	add.w	ip, r4, #1
    f374:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    f378:	4567      	cmp	r7, ip
    f37a:	bf98      	it	ls
    f37c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    f380:	4565      	cmp	r5, ip
    f382:	d01b      	beq.n	f3bc <ticker_stop+0x78>
	user_op = &user->user_op[user->last];
    f384:	684d      	ldr	r5, [r1, #4]
    f386:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f38a:	0127      	lsls	r7, r4, #4
    f38c:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    f390:	f04f 0807 	mov.w	r8, #7
    f394:	f805 8007 	strb.w	r8, [r5, r7]
	user_op->fp_op_func = fp_op_func;
    f398:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    f39a:	9b06      	ldr	r3, [sp, #24]
    f39c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    f39e:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    f3a0:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    f3a2:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    f3a4:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f3a8:	e9de 3508 	ldrd	r3, r5, [lr, #32]
    f3ac:	4798      	blx	r3
    f3ae:	4633      	mov	r3, r6
    f3b0:	2200      	movs	r2, #0
    f3b2:	2104      	movs	r1, #4
    f3b4:	47a8      	blx	r5
	return user_op->status;
    f3b6:	78a0      	ldrb	r0, [r4, #2]
}
    f3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    f3bc:	2001      	movs	r0, #1
}
    f3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3c2:	bf00      	nop
    f3c4:	200028b8 	.word	0x200028b8

0000f3c8 <ticker_stop_abs>:
{
    f3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f3cc:	4d1f      	ldr	r5, [pc, #124]	; (f44c <ticker_stop_abs+0x84>)
{
    f3ce:	4607      	mov	r7, r0
    f3d0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    f3d2:	212c      	movs	r1, #44	; 0x2c
    f3d4:	fb01 5e07 	mla	lr, r1, r7, r5
	struct ticker_instance *instance = &_instance[instance_index];
    f3d8:	eb07 0487 	add.w	r4, r7, r7, lsl #2
    f3dc:	eb07 0444 	add.w	r4, r7, r4, lsl #1
    f3e0:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
    f3e4:	f8de 5004 	ldr.w	r5, [lr, #4]
    f3e8:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    f3ec:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    f3f0:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
    f3f2:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
    f3f4:	f104 0c01 	add.w	ip, r4, #1
    f3f8:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    f3fc:	4567      	cmp	r7, ip
    f3fe:	bf98      	it	ls
    f400:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    f404:	4565      	cmp	r5, ip
    f406:	d01d      	beq.n	f444 <ticker_stop_abs+0x7c>
	user_op = &user->user_op[user->last];
    f408:	684d      	ldr	r5, [r1, #4]
    f40a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f40e:	0127      	lsls	r7, r4, #4
    f410:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP_ABS;
    f414:	f04f 0808 	mov.w	r8, #8
    f418:	f805 8007 	strb.w	r8, [r5, r7]
	user_op->params.yield.ticks_at_yield = ticks_at_stop;
    f41c:	6063      	str	r3, [r4, #4]
	user_op->fp_op_func = fp_op_func;
    f41e:	9b06      	ldr	r3, [sp, #24]
    f420:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    f422:	9b07      	ldr	r3, [sp, #28]
    f424:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    f426:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    f428:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    f42a:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    f42c:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f430:	e9de 3508 	ldrd	r3, r5, [lr, #32]
    f434:	4798      	blx	r3
    f436:	4633      	mov	r3, r6
    f438:	2200      	movs	r2, #0
    f43a:	2104      	movs	r1, #4
    f43c:	47a8      	blx	r5
	return user_op->status;
    f43e:	78a0      	ldrb	r0, [r4, #2]
}
    f440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    f444:	2001      	movs	r0, #1
}
    f446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f44a:	bf00      	nop
    f44c:	200028b8 	.word	0x200028b8

0000f450 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    f450:	f00a bda4 	b.w	19f9c <cntr_cnt_get>

0000f454 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f454:	1a40      	subs	r0, r0, r1
}
    f456:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f45a:	4770      	bx	lr

0000f45c <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    f45c:	b538      	push	{r3, r4, r5, lr}
    f45e:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    f460:	2000      	movs	r0, #0
{
    f462:	460c      	mov	r4, r1
		if (ull_adv_is_enabled(0)) {
    f464:	f003 f9ba 	bl	127dc <ull_adv_is_enabled>
    f468:	b9a8      	cbnz	r0, f496 <ll_addr_set+0x3a>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    f46a:	b93d      	cbnz	r5, f47c <ll_addr_set+0x20>
		} else {
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
		}
	} else {
		if (bdaddr) {
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    f46c:	480b      	ldr	r0, [pc, #44]	; (f49c <ll_addr_set+0x40>)
    f46e:	2206      	movs	r2, #6
    f470:	4621      	mov	r1, r4
		if (bdaddr) {
    f472:	b16c      	cbz	r4, f490 <ll_addr_set+0x34>
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    f474:	f014 fbca 	bl	23c0c <memcpy>
		} else {
			(void)memset(pub_addr, 0, BDADDR_SIZE);
		}
	}

	return 0;
    f478:	2000      	movs	r0, #0
}
    f47a:	bd38      	pop	{r3, r4, r5, pc}
		if (bdaddr) {
    f47c:	b12c      	cbz	r4, f48a <ll_addr_set+0x2e>
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    f47e:	2206      	movs	r2, #6
    f480:	4621      	mov	r1, r4
    f482:	4807      	ldr	r0, [pc, #28]	; (f4a0 <ll_addr_set+0x44>)
    f484:	f014 fbc2 	bl	23c0c <memcpy>
    f488:	e7f6      	b.n	f478 <ll_addr_set+0x1c>
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
    f48a:	4805      	ldr	r0, [pc, #20]	; (f4a0 <ll_addr_set+0x44>)
    f48c:	2206      	movs	r2, #6
    f48e:	4621      	mov	r1, r4
    f490:	f014 fbc7 	bl	23c22 <memset>
    f494:	e7f0      	b.n	f478 <ll_addr_set+0x1c>
			return BT_HCI_ERR_CMD_DISALLOWED;
    f496:	200c      	movs	r0, #12
}
    f498:	bd38      	pop	{r3, r4, r5, pc}
    f49a:	bf00      	nop
    f49c:	200028ec 	.word	0x200028ec
    f4a0:	200028e4 	.word	0x200028e4

0000f4a4 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    f4a4:	2801      	cmp	r0, #1
{
    f4a6:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    f4a8:	d805      	bhi.n	f4b6 <ll_addr_get+0x12>

	if (addr_type) {
		return rnd_addr;
	}

	return pub_addr;
    f4aa:	4a04      	ldr	r2, [pc, #16]	; (f4bc <ll_addr_get+0x18>)
    f4ac:	4804      	ldr	r0, [pc, #16]	; (f4c0 <ll_addr_get+0x1c>)
    f4ae:	2b00      	cmp	r3, #0
    f4b0:	bf08      	it	eq
    f4b2:	4610      	moveq	r0, r2
    f4b4:	4770      	bx	lr
		return NULL;
    f4b6:	2000      	movs	r0, #0
}
    f4b8:	4770      	bx	lr
    f4ba:	bf00      	nop
    f4bc:	200028ec 	.word	0x200028ec
    f4c0:	200028e4 	.word	0x200028e4

0000f4c4 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    f4c4:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    f4c6:	b510      	push	{r4, lr}
    f4c8:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    f4ca:	d80b      	bhi.n	f4e4 <ll_addr_read+0x20>
	if (addr_type) {
    f4cc:	4608      	mov	r0, r1
		return rnd_addr;
    f4ce:	4c07      	ldr	r4, [pc, #28]	; (f4ec <ll_addr_read+0x28>)
    f4d0:	4907      	ldr	r1, [pc, #28]	; (f4f0 <ll_addr_read+0x2c>)
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	bf18      	it	ne
    f4d6:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    f4d8:	2206      	movs	r2, #6
    f4da:	4621      	mov	r1, r4
    f4dc:	f014 fb96 	bl	23c0c <memcpy>
	}

	return addr;
}
    f4e0:	4620      	mov	r0, r4
    f4e2:	bd10      	pop	{r4, pc}
		return NULL;
    f4e4:	2400      	movs	r4, #0
}
    f4e6:	4620      	mov	r0, r4
    f4e8:	bd10      	pop	{r4, pc}
    f4ea:	bf00      	nop
    f4ec:	200028ec 	.word	0x200028ec
    f4f0:	200028e4 	.word	0x200028e4

0000f4f4 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    f4f4:	2802      	cmp	r0, #2
    f4f6:	d001      	beq.n	f4fc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    f4f8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    f4fa:	4770      	bx	lr
{
    f4fc:	b538      	push	{r3, r4, r5, lr}
    f4fe:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    f500:	4608      	mov	r0, r1
    f502:	461d      	mov	r5, r3
    f504:	f003 fc48 	bl	12d98 <ll_connected_get>
			if (!conn) {
    f508:	b110      	cbz	r0, f510 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    f50a:	2000      	movs	r0, #0
    f50c:	7028      	strb	r0, [r5, #0]
}
    f50e:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f510:	4620      	mov	r0, r4
}
    f512:	bd38      	pop	{r3, r4, r5, pc}

0000f514 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    f514:	2300      	movs	r3, #0
    f516:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    f518:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    f51a:	4770      	bx	lr

0000f51c <hci_driver_init>:
	.close	= hci_driver_close,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    f51c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    f51e:	4802      	ldr	r0, [pc, #8]	; (f528 <hci_driver_init+0xc>)
    f520:	f7fa f812 	bl	9548 <bt_hci_driver_register>

	return 0;
}
    f524:	2000      	movs	r0, #0
    f526:	bd08      	pop	{r3, pc}
    f528:	00028778 	.word	0x00028778

0000f52c <hci_driver_send>:
{
    f52c:	b5b0      	push	{r4, r5, r7, lr}
    f52e:	b082      	sub	sp, #8
	if (!buf->len) {
    f530:	8a03      	ldrh	r3, [r0, #16]
{
    f532:	af00      	add	r7, sp, #0
	if (!buf->len) {
    f534:	2b00      	cmp	r3, #0
    f536:	d045      	beq.n	f5c4 <hci_driver_send+0x98>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    f538:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
    f53a:	4604      	mov	r4, r0
    f53c:	b1b3      	cbz	r3, f56c <hci_driver_send+0x40>
    f53e:	2b02      	cmp	r3, #2
    f540:	d006      	beq.n	f550 <hci_driver_send+0x24>
		LOG_ERR("Unknown HCI type %u", type);
    f542:	482b      	ldr	r0, [pc, #172]	; (f5f0 <hci_driver_send+0xc4>)
    f544:	6802      	ldr	r2, [r0, #0]
    f546:	0752      	lsls	r2, r2, #29
    f548:	d129      	bne.n	f59e <hci_driver_send+0x72>
		return -EINVAL;
    f54a:	f06f 0515 	mvn.w	r5, #21
    f54e:	e009      	b.n	f564 <hci_driver_send+0x38>
	err = hci_acl_handle(buf, &evt);
    f550:	1d39      	adds	r1, r7, #4
    f552:	f000 ff17 	bl	10384 <hci_acl_handle>
	if (evt) {
    f556:	687b      	ldr	r3, [r7, #4]
	err = hci_acl_handle(buf, &evt);
    f558:	4605      	mov	r5, r0
	if (evt) {
    f55a:	b113      	cbz	r3, f562 <hci_driver_send+0x36>
		bt_recv_prio(evt);
    f55c:	4618      	mov	r0, r3
    f55e:	f7f9 ffd5 	bl	950c <bt_recv_prio>
	if (!err) {
    f562:	b1a5      	cbz	r5, f58e <hci_driver_send+0x62>
}
    f564:	4628      	mov	r0, r5
    f566:	3708      	adds	r7, #8
    f568:	46bd      	mov	sp, r7
    f56a:	bdb0      	pop	{r4, r5, r7, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    f56c:	1d39      	adds	r1, r7, #4
	struct node_rx_pdu *node_rx = NULL;
    f56e:	607b      	str	r3, [r7, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    f570:	f000 fade 	bl	fb30 <hci_cmd_handle>
	if (evt) {
    f574:	b158      	cbz	r0, f58e <hci_driver_send+0x62>
		bt_recv_prio(evt);
    f576:	f7f9 ffc9 	bl	950c <bt_recv_prio>
		if (node_rx) {
    f57a:	687d      	ldr	r5, [r7, #4]
    f57c:	b13d      	cbz	r5, f58e <hci_driver_send+0x62>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f57e:	4628      	mov	r0, r5
    f580:	f001 fb10 	bl	10ba4 <hci_get_class>
    f584:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    f586:	6879      	ldr	r1, [r7, #4]
    f588:	481a      	ldr	r0, [pc, #104]	; (f5f4 <hci_driver_send+0xc8>)
    f58a:	f017 fb60 	bl	26c4e <k_queue_append>
		net_buf_unref(buf);
    f58e:	4620      	mov	r0, r4
    f590:	f00b fbfc 	bl	1ad8c <net_buf_unref>
    f594:	2500      	movs	r5, #0
}
    f596:	4628      	mov	r0, r5
    f598:	3708      	adds	r7, #8
    f59a:	46bd      	mov	sp, r7
    f59c:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Unknown HCI type %u", type);
    f59e:	466c      	mov	r4, sp
    f5a0:	b088      	sub	sp, #32
    f5a2:	4669      	mov	r1, sp
    f5a4:	4d14      	ldr	r5, [pc, #80]	; (f5f8 <hci_driver_send+0xcc>)
    f5a6:	614d      	str	r5, [r1, #20]
    f5a8:	460a      	mov	r2, r1
    f5aa:	4d14      	ldr	r5, [pc, #80]	; (f5fc <hci_driver_send+0xd0>)
    f5ac:	618d      	str	r5, [r1, #24]
    f5ae:	2504      	movs	r5, #4
	switch (type) {
    f5b0:	61cb      	str	r3, [r1, #28]
		LOG_ERR("Unknown HCI type %u", type);
    f5b2:	f842 5f10 	str.w	r5, [r2, #16]!
    f5b6:	2300      	movs	r3, #0
    f5b8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f5bc:	f7f4 fdc8 	bl	4150 <z_impl_z_log_msg_static_create>
    f5c0:	46a5      	mov	sp, r4
    f5c2:	e7c2      	b.n	f54a <hci_driver_send+0x1e>
		LOG_ERR("Empty HCI packet");
    f5c4:	480a      	ldr	r0, [pc, #40]	; (f5f0 <hci_driver_send+0xc4>)
    f5c6:	6802      	ldr	r2, [r0, #0]
    f5c8:	0751      	lsls	r1, r2, #29
    f5ca:	d0be      	beq.n	f54a <hci_driver_send+0x1e>
    f5cc:	466c      	mov	r4, sp
    f5ce:	b088      	sub	sp, #32
    f5d0:	4669      	mov	r1, sp
    f5d2:	4d0b      	ldr	r5, [pc, #44]	; (f600 <hci_driver_send+0xd4>)
    f5d4:	614d      	str	r5, [r1, #20]
    f5d6:	460a      	mov	r2, r1
    f5d8:	4d08      	ldr	r5, [pc, #32]	; (f5fc <hci_driver_send+0xd0>)
    f5da:	618d      	str	r5, [r1, #24]
    f5dc:	2103      	movs	r1, #3
    f5de:	f842 1f10 	str.w	r1, [r2, #16]!
    f5e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f5e6:	f7f4 fdb3 	bl	4150 <z_impl_z_log_msg_static_create>
    f5ea:	46a5      	mov	sp, r4
    f5ec:	e7ad      	b.n	f54a <hci_driver_send+0x1e>
    f5ee:	bf00      	nop
    f5f0:	20000af0 	.word	0x20000af0
    f5f4:	200028f4 	.word	0x200028f4
    f5f8:	000286a4 	.word	0x000286a4
    f5fc:	00028748 	.word	0x00028748
    f600:	0002868c 	.word	0x0002868c

0000f604 <hci_driver_close>:
{
    f604:	b508      	push	{r3, lr}
	ll_deinit();
    f606:	f002 fc8b 	bl	11f20 <ll_deinit>
	z_impl_k_thread_abort(thread);
    f60a:	4804      	ldr	r0, [pc, #16]	; (f61c <hci_driver_close+0x18>)
    f60c:	f7f8 fb48 	bl	7ca0 <z_impl_k_thread_abort>
    f610:	4803      	ldr	r0, [pc, #12]	; (f620 <hci_driver_close+0x1c>)
    f612:	f7f8 fb45 	bl	7ca0 <z_impl_k_thread_abort>
}
    f616:	2000      	movs	r0, #0
    f618:	bd08      	pop	{r3, pc}
    f61a:	bf00      	nop
    f61c:	20001c90 	.word	0x20001c90
    f620:	20001bd8 	.word	0x20001bd8

0000f624 <recv_thread>:
{
    f624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
    f628:	4e42      	ldr	r6, [pc, #264]	; (f734 <recv_thread+0x110>)
		LL_ASSERT(0);
    f62a:	f8df 810c 	ldr.w	r8, [pc, #268]	; f738 <recv_thread+0x114>
    f62e:	4f43      	ldr	r7, [pc, #268]	; (f73c <recv_thread+0x118>)
{
    f630:	b082      	sub	sp, #8
    f632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f63a:	4630      	mov	r0, r6
    f63c:	f010 fb42 	bl	1fcc4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    f640:	2800      	cmp	r0, #0
    f642:	d0f6      	beq.n	f632 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
    f644:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    f646:	9001      	str	r0, [sp, #4]
	switch (class) {
    f648:	2b04      	cmp	r3, #4
    f64a:	d821      	bhi.n	f690 <recv_thread+0x6c>
    f64c:	2b00      	cmp	r3, #0
    f64e:	d14b      	bne.n	f6e8 <recv_thread+0xc4>
		LL_ASSERT(0);
    f650:	483b      	ldr	r0, [pc, #236]	; (f740 <recv_thread+0x11c>)
    f652:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
    f656:	4642      	mov	r2, r8
    f658:	4639      	mov	r1, r7
    f65a:	f012 f877 	bl	2174c <assert_print>
    f65e:	4040      	eors	r0, r0
    f660:	f380 8811 	msr	BASEPRI, r0
    f664:	f04f 0003 	mov.w	r0, #3
    f668:	df02      	svc	2
	node_rx->hdr.next = NULL;
    f66a:	9b01      	ldr	r3, [sp, #4]
    f66c:	2200      	movs	r2, #0
    f66e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    f670:	a801      	add	r0, sp, #4
    f672:	f001 fec1 	bl	113f8 <ll_rx_mem_release>
    f676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f67a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f67e:	4630      	mov	r0, r6
    f680:	f010 fb20 	bl	1fcc4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    f684:	2800      	cmp	r0, #0
    f686:	d0d4      	beq.n	f632 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
    f688:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    f68a:	9001      	str	r0, [sp, #4]
	switch (class) {
    f68c:	2b04      	cmp	r3, #4
    f68e:	d9dd      	bls.n	f64c <recv_thread+0x28>
    f690:	2b05      	cmp	r3, #5
    f692:	d1dd      	bne.n	f650 <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    f694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f69c:	2003      	movs	r0, #3
    f69e:	f7f8 fd47 	bl	8130 <bt_buf_get_rx>
    f6a2:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    f6a4:	4621      	mov	r1, r4
    f6a6:	9801      	ldr	r0, [sp, #4]
    f6a8:	f000 ff5c 	bl	10564 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    f6ac:	9b01      	ldr	r3, [sp, #4]
    f6ae:	2200      	movs	r2, #0
    f6b0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    f6b2:	a801      	add	r0, sp, #4
    f6b4:	f001 fea0 	bl	113f8 <ll_rx_mem_release>
		while (buf) {
    f6b8:	2c00      	cmp	r4, #0
    f6ba:	d0ba      	beq.n	f632 <recv_thread+0xe>
			frag = net_buf_ref(buf);
    f6bc:	4620      	mov	r0, r4
    f6be:	f015 ff66 	bl	2558e <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    f6c2:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    f6c4:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    f6c6:	2000      	movs	r0, #0
    f6c8:	f015 ff87 	bl	255da <net_buf_frag_del>
			if (frag->len) {
    f6cc:	8a2b      	ldrh	r3, [r5, #16]
			buf = net_buf_frag_del(NULL, buf);
    f6ce:	4604      	mov	r4, r0
				bt_recv(frag);
    f6d0:	4628      	mov	r0, r5
			if (frag->len) {
    f6d2:	b133      	cbz	r3, f6e2 <recv_thread+0xbe>
				bt_recv(frag);
    f6d4:	f7f9 fe54 	bl	9380 <bt_recv>
	z_impl_k_yield();
    f6d8:	f010 ffb0 	bl	2063c <z_impl_k_yield>
		while (buf) {
    f6dc:	2c00      	cmp	r4, #0
    f6de:	d1ed      	bne.n	f6bc <recv_thread+0x98>
    f6e0:	e7a7      	b.n	f632 <recv_thread+0xe>
				net_buf_unref(frag);
    f6e2:	f00b fb53 	bl	1ad8c <net_buf_unref>
    f6e6:	e7f7      	b.n	f6d8 <recv_thread+0xb4>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    f6e8:	2b02      	cmp	r3, #2
    f6ea:	d013      	beq.n	f714 <recv_thread+0xf0>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f6ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f6f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f6f4:	2001      	movs	r0, #1
    f6f6:	f7f8 fd1b 	bl	8130 <bt_buf_get_rx>
    f6fa:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    f6fc:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    f6fe:	b19c      	cbz	r4, f728 <recv_thread+0x104>
			hci_evt_encode(node_rx, buf);
    f700:	4621      	mov	r1, r4
    f702:	f000 ff69 	bl	105d8 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    f706:	9b01      	ldr	r3, [sp, #4]
    f708:	2200      	movs	r2, #0
    f70a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    f70c:	a801      	add	r0, sp, #4
    f70e:	f001 fe73 	bl	113f8 <ll_rx_mem_release>
		while (buf) {
    f712:	e7d3      	b.n	f6bc <recv_thread+0x98>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    f714:	2200      	movs	r2, #0
    f716:	2300      	movs	r3, #0
    f718:	2101      	movs	r1, #1
    f71a:	2000      	movs	r0, #0
    f71c:	f7f8 fd32 	bl	8184 <bt_buf_get_evt>
    f720:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    f722:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    f724:	2c00      	cmp	r4, #0
    f726:	d1eb      	bne.n	f700 <recv_thread+0xdc>
	node_rx->hdr.next = NULL;
    f728:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    f72a:	a801      	add	r0, sp, #4
    f72c:	f001 fe64 	bl	113f8 <ll_rx_mem_release>
		while (buf) {
    f730:	e77f      	b.n	f632 <recv_thread+0xe>
    f732:	bf00      	nop
    f734:	200028f4 	.word	0x200028f4
    f738:	000286bc 	.word	0x000286bc
    f73c:	000286fc 	.word	0x000286fc
    f740:	0002866c 	.word	0x0002866c

0000f744 <prio_recv_thread>:
{
    f744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    f748:	4f2e      	ldr	r7, [pc, #184]	; (f804 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    f74a:	4e2f      	ldr	r6, [pc, #188]	; (f808 <prio_recv_thread+0xc4>)
{
    f74c:	b082      	sub	sp, #8
    f74e:	e00c      	b.n	f76a <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f750:	f7f8 fd18 	bl	8184 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f754:	4622      	mov	r2, r4
    f756:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f75a:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f75c:	f001 fa0a 	bl	10b74 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    f760:	4620      	mov	r0, r4
    f762:	f7f9 fed3 	bl	950c <bt_recv_prio>
	z_impl_k_yield();
    f766:	f010 ff69 	bl	2063c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    f76a:	f10d 0102 	add.w	r1, sp, #2
    f76e:	a801      	add	r0, sp, #4
    f770:	f001 fcfe 	bl	11170 <ll_rx_get>
    f774:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f77a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f77e:	2100      	movs	r1, #0
    f780:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    f782:	2c00      	cmp	r4, #0
    f784:	d1e4      	bne.n	f750 <prio_recv_thread+0xc>
		if (node_rx) {
    f786:	9b01      	ldr	r3, [sp, #4]
    f788:	b1b3      	cbz	r3, f7b8 <prio_recv_thread+0x74>
			ll_rx_dequeue();
    f78a:	f001 fd6b 	bl	11264 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f78e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    f792:	4640      	mov	r0, r8
    f794:	f001 fa06 	bl	10ba4 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    f798:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f79a:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    f79e:	796b      	ldrb	r3, [r5, #5]
    f7a0:	2b03      	cmp	r3, #3
    f7a2:	d102      	bne.n	f7aa <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    f7a4:	792b      	ldrb	r3, [r5, #4]
    f7a6:	2b18      	cmp	r3, #24
    f7a8:	d00e      	beq.n	f7c8 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    f7aa:	4629      	mov	r1, r5
    f7ac:	4630      	mov	r0, r6
    f7ae:	f017 fa4e 	bl	26c4e <k_queue_append>
		if (iso_received || node_rx) {
    f7b2:	9b01      	ldr	r3, [sp, #4]
    f7b4:	2b00      	cmp	r3, #0
    f7b6:	d1d8      	bne.n	f76a <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    f7b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f7bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f7c0:	4638      	mov	r0, r7
    f7c2:	f010 fad9 	bl	1fd78 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    f7c6:	e7d0      	b.n	f76a <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f7cc:	4621      	mov	r1, r4
    f7ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f7d2:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    f7d4:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f7d8:	f7f8 fcd4 	bl	8184 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    f7dc:	4641      	mov	r1, r8
    f7de:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f7e0:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    f7e2:	f105 001c 	add.w	r0, r5, #28
    f7e6:	f000 fe95 	bl	10514 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    f7ea:	4640      	mov	r0, r8
    f7ec:	f000 feb2 	bl	10554 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    f7f0:	4620      	mov	r0, r4
			if (buf) {
    f7f2:	b124      	cbz	r4, f7fe <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    f7f4:	f7f9 fe8a 	bl	950c <bt_recv_prio>
					net_buf_unref(buf);
    f7f8:	4620      	mov	r0, r4
    f7fa:	f00b fac7 	bl	1ad8c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    f7fe:	9d01      	ldr	r5, [sp, #4]
    f800:	e7d3      	b.n	f7aa <prio_recv_thread+0x66>
    f802:	bf00      	nop
    f804:	2000290c 	.word	0x2000290c
    f808:	200028f4 	.word	0x200028f4

0000f80c <hci_driver_open>:
{
    f80c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
    f810:	b089      	sub	sp, #36	; 0x24
    f812:	af08      	add	r7, sp, #32
	z_impl_k_queue_init(queue);
    f814:	4831      	ldr	r0, [pc, #196]	; (f8dc <hci_driver_open+0xd0>)
    f816:	f017 f9ed 	bl	26bf4 <z_impl_k_queue_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f81a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f81e:	2100      	movs	r1, #0
    f820:	482f      	ldr	r0, [pc, #188]	; (f8e0 <hci_driver_open+0xd4>)
    f822:	f017 fa2d 	bl	26c80 <z_impl_k_sem_init>
	err = ll_init(&sem_prio_recv);
    f826:	482e      	ldr	r0, [pc, #184]	; (f8e0 <hci_driver_open+0xd4>)
    f828:	f002 fa78 	bl	11d1c <ll_init>
	if (err) {
    f82c:	4604      	mov	r4, r0
    f82e:	b140      	cbz	r0, f842 <hci_driver_open+0x36>
		LOG_ERR("LL initialization failed: %d", err);
    f830:	482c      	ldr	r0, [pc, #176]	; (f8e4 <hci_driver_open+0xd8>)
    f832:	6803      	ldr	r3, [r0, #0]
    f834:	075b      	lsls	r3, r3, #29
    f836:	d137      	bne.n	f8a8 <hci_driver_open+0x9c>
}
    f838:	4620      	mov	r0, r4
    f83a:	3704      	adds	r7, #4
    f83c:	46bd      	mov	sp, r7
    f83e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
	hci_init(NULL);
    f842:	f001 f9c5 	bl	10bd0 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    f846:	f04f 0800 	mov.w	r8, #0
    f84a:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f84e:	f06f 0209 	mvn.w	r2, #9
    f852:	e9cd 2403 	strd	r2, r4, [sp, #12]
    f856:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f85a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    f85e:	4b22      	ldr	r3, [pc, #136]	; (f8e8 <hci_driver_open+0xdc>)
    f860:	4922      	ldr	r1, [pc, #136]	; (f8ec <hci_driver_open+0xe0>)
    f862:	9400      	str	r4, [sp, #0]
    f864:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    f868:	4821      	ldr	r0, [pc, #132]	; (f8f0 <hci_driver_open+0xe4>)
    f86a:	f010 f8cb 	bl	1fa04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f86e:	4921      	ldr	r1, [pc, #132]	; (f8f4 <hci_driver_open+0xe8>)
    f870:	481f      	ldr	r0, [pc, #124]	; (f8f0 <hci_driver_open+0xe4>)
    f872:	f010 f801 	bl	1f878 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f876:	f06f 0207 	mvn.w	r2, #7
    f87a:	e9cd 2403 	strd	r2, r4, [sp, #12]
    f87e:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f882:	e9cd 4401 	strd	r4, r4, [sp, #4]
    f886:	4b1c      	ldr	r3, [pc, #112]	; (f8f8 <hci_driver_open+0xec>)
    f888:	491c      	ldr	r1, [pc, #112]	; (f8fc <hci_driver_open+0xf0>)
    f88a:	9400      	str	r4, [sp, #0]
    f88c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    f890:	481b      	ldr	r0, [pc, #108]	; (f900 <hci_driver_open+0xf4>)
    f892:	f010 f8b7 	bl	1fa04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f896:	491b      	ldr	r1, [pc, #108]	; (f904 <hci_driver_open+0xf8>)
    f898:	4819      	ldr	r0, [pc, #100]	; (f900 <hci_driver_open+0xf4>)
    f89a:	f00f ffed 	bl	1f878 <z_impl_k_thread_name_set>
}
    f89e:	4620      	mov	r0, r4
    f8a0:	3704      	adds	r7, #4
    f8a2:	46bd      	mov	sp, r7
    f8a4:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
		LOG_ERR("LL initialization failed: %d", err);
    f8a8:	46e8      	mov	r8, sp
    f8aa:	b088      	sub	sp, #32
    f8ac:	4916      	ldr	r1, [pc, #88]	; (f908 <hci_driver_open+0xfc>)
    f8ae:	f8c8 1014 	str.w	r1, [r8, #20]
    f8b2:	4642      	mov	r2, r8
    f8b4:	4915      	ldr	r1, [pc, #84]	; (f90c <hci_driver_open+0x100>)
    f8b6:	f8c8 1018 	str.w	r1, [r8, #24]
    f8ba:	2104      	movs	r1, #4
    f8bc:	f8c8 401c 	str.w	r4, [r8, #28]
    f8c0:	f842 1f10 	str.w	r1, [r2, #16]!
    f8c4:	2300      	movs	r3, #0
    f8c6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f8ca:	f7f4 fc41 	bl	4150 <z_impl_z_log_msg_static_create>
}
    f8ce:	4620      	mov	r0, r4
    f8d0:	46c5      	mov	sp, r8
    f8d2:	3704      	adds	r7, #4
    f8d4:	46bd      	mov	sp, r7
    f8d6:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
    f8da:	bf00      	nop
    f8dc:	200028f4 	.word	0x200028f4
    f8e0:	2000290c 	.word	0x2000290c
    f8e4:	20000af0 	.word	0x20000af0
    f8e8:	0000f745 	.word	0x0000f745
    f8ec:	20005980 	.word	0x20005980
    f8f0:	20001c90 	.word	0x20001c90
    f8f4:	00028724 	.word	0x00028724
    f8f8:	0000f625 	.word	0x0000f625
    f8fc:	20005480 	.word	0x20005480
    f900:	20001bd8 	.word	0x20001bd8
    f904:	00028730 	.word	0x00028730
    f908:	00028700 	.word	0x00028700
    f90c:	00028738 	.word	0x00028738

0000f910 <hci_recv_fifo_reset>:
{
    f910:	b510      	push	{r4, lr}
	k_sched_lock();
    f912:	f010 fe57 	bl	205c4 <k_sched_lock>
	z_impl_k_queue_cancel_wait(queue);
    f916:	4c05      	ldr	r4, [pc, #20]	; (f92c <hci_recv_fifo_reset+0x1c>)
    f918:	4620      	mov	r0, r4
    f91a:	f017 f977 	bl	26c0c <z_impl_k_queue_cancel_wait>
	z_impl_k_queue_init(queue);
    f91e:	4620      	mov	r0, r4
    f920:	f017 f968 	bl	26bf4 <z_impl_k_queue_init>
}
    f924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_sched_unlock();
    f928:	f010 be60 	b.w	205ec <k_sched_unlock>
    f92c:	200028f4 	.word	0x200028f4

0000f930 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    f930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f932:	4c18      	ldr	r4, [pc, #96]	; (f994 <le_remote_feat_complete+0x64>)
    f934:	6864      	ldr	r4, [r4, #4]
    f936:	00a4      	lsls	r4, r4, #2
    f938:	d504      	bpl.n	f944 <le_remote_feat_complete+0x14>
    f93a:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    f93c:	4a16      	ldr	r2, [pc, #88]	; (f998 <le_remote_feat_complete+0x68>)
    f93e:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f940:	0712      	lsls	r2, r2, #28
    f942:	d400      	bmi.n	f946 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    f944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f946:	f103 040c 	add.w	r4, r3, #12
    f94a:	4607      	mov	r7, r0
    f94c:	460e      	mov	r6, r1
    f94e:	4620      	mov	r0, r4
    f950:	2102      	movs	r1, #2
    f952:	f015 fe4e 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
    f956:	f640 433e 	movw	r3, #3134	; 0xc3e
    f95a:	8003      	strh	r3, [r0, #0]
    f95c:	2101      	movs	r1, #1
    f95e:	4620      	mov	r0, r4
    f960:	f015 fe47 	bl	255f2 <net_buf_simple_add>
    f964:	4603      	mov	r3, r0
	me->subevent = subevt;
    f966:	2204      	movs	r2, #4
    f968:	701a      	strb	r2, [r3, #0]
    f96a:	4620      	mov	r0, r4
    f96c:	210b      	movs	r1, #11
    f96e:	f015 fe40 	bl	255f2 <net_buf_simple_add>
		memcpy(&sep->features[0],
    f972:	2208      	movs	r2, #8
	sep->status = status;
    f974:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    f976:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    f97a:	b92f      	cbnz	r7, f988 <le_remote_feat_complete+0x58>
		memcpy(&sep->features[0],
    f97c:	1d31      	adds	r1, r6, #4
    f97e:	3003      	adds	r0, #3
}
    f980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    f984:	f014 b942 	b.w	23c0c <memcpy>
}
    f988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    f98c:	2100      	movs	r1, #0
    f98e:	3003      	adds	r0, #3
    f990:	f014 b947 	b.w	23c22 <memset>
    f994:	20000168 	.word	0x20000168
    f998:	20000160 	.word	0x20000160

0000f99c <hci_vendor_cmd_handle_common>:
{
    f99c:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
    f99e:	3801      	subs	r0, #1
{
    f9a0:	b086      	sub	sp, #24
    f9a2:	4614      	mov	r4, r2
	switch (ocf) {
    f9a4:	2811      	cmp	r0, #17
    f9a6:	d80a      	bhi.n	f9be <hci_vendor_cmd_handle_common+0x22>
    f9a8:	e8df f000 	tbb	[pc, r0]
    f9ac:	09593f23 	.word	0x09593f23
    f9b0:	7c096a09 	.word	0x7c096a09
    f9b4:	0909ac99 	.word	0x0909ac99
    f9b8:	09090909 	.word	0x09090909
    f9bc:	0d09      	.short	0x0d09
    f9be:	f06f 0015 	mvn.w	r0, #21
}
    f9c2:	b006      	add	sp, #24
    f9c4:	bd70      	pop	{r4, r5, r6, pc}
	struct bt_hci_cp_vs_set_min_num_used_chans *cmd = (void *)buf->data;
    f9c6:	68cb      	ldr	r3, [r1, #12]
	status = ll_set_min_used_chans(handle, cmd->phys, cmd->min_used_chans);
    f9c8:	78da      	ldrb	r2, [r3, #3]
    f9ca:	7899      	ldrb	r1, [r3, #2]
    f9cc:	8818      	ldrh	r0, [r3, #0]
    f9ce:	f008 fa0d 	bl	17dec <ll_set_min_used_chans>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    f9d2:	4b55      	ldr	r3, [pc, #340]	; (fb28 <hci_vendor_cmd_handle_common+0x18c>)
	status = ll_set_min_used_chans(handle, cmd->phys, cmd->min_used_chans);
    f9d4:	4606      	mov	r6, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    f9d6:	2101      	movs	r1, #1
    f9d8:	8818      	ldrh	r0, [r3, #0]
    f9da:	f014 fa9c 	bl	23f16 <bt_hci_cmd_complete_create>
    f9de:	2101      	movs	r1, #1
    f9e0:	4605      	mov	r5, r0
    f9e2:	300c      	adds	r0, #12
    f9e4:	f015 fe05 	bl	255f2 <net_buf_simple_add>
	ccst->status = status;
    f9e8:	7006      	strb	r6, [r0, #0]
	*evt = cmd_complete_status(status);
    f9ea:	6025      	str	r5, [r4, #0]
	return 0;
    f9ec:	2000      	movs	r0, #0
}
    f9ee:	b006      	add	sp, #24
    f9f0:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    f9f2:	4b4d      	ldr	r3, [pc, #308]	; (fb28 <hci_vendor_cmd_handle_common+0x18c>)
    f9f4:	210d      	movs	r1, #13
    f9f6:	8818      	ldrh	r0, [r3, #0]
    f9f8:	f014 fa8d 	bl	23f16 <bt_hci_cmd_complete_create>
    f9fc:	210d      	movs	r1, #13
    f9fe:	6020      	str	r0, [r4, #0]
    fa00:	300c      	adds	r0, #12
    fa02:	f015 fdf6 	bl	255f2 <net_buf_simple_add>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    fa06:	f04f 1402 	mov.w	r4, #131074	; 0x20002
	rp->status = 0x00;
    fa0a:	2300      	movs	r3, #0
	rp->fw_variant = 0U;
    fa0c:	f44f 7140 	mov.w	r1, #768	; 0x300
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    fa10:	2203      	movs	r2, #3
	rp->status = 0x00;
    fa12:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    fa14:	f8c0 4001 	str.w	r4, [r0, #1]
	rp->fw_variant = 0U;
    fa18:	f8a0 1005 	strh.w	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    fa1c:	71c2      	strb	r2, [r0, #7]
    fa1e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    fa20:	7243      	strb	r3, [r0, #9]
    fa22:	7283      	strb	r3, [r0, #10]
    fa24:	72c3      	strb	r3, [r0, #11]
    fa26:	7303      	strb	r3, [r0, #12]
}
    fa28:	e7e0      	b.n	f9ec <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fa2a:	4b3f      	ldr	r3, [pc, #252]	; (fb28 <hci_vendor_cmd_handle_common+0x18c>)
    fa2c:	2141      	movs	r1, #65	; 0x41
    fa2e:	8818      	ldrh	r0, [r3, #0]
    fa30:	f014 fa71 	bl	23f16 <bt_hci_cmd_complete_create>
    fa34:	2141      	movs	r1, #65	; 0x41
    fa36:	6020      	str	r0, [r4, #0]
    fa38:	300c      	adds	r0, #12
    fa3a:	f015 fdda 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    fa3e:	2100      	movs	r1, #0
    fa40:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fa42:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    fa44:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fa48:	f014 f8eb 	bl	23c22 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    fa4c:	7862      	ldrb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    fa4e:	78a3      	ldrb	r3, [r4, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    fa50:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    fa54:	f043 0303 	orr.w	r3, r3, #3
	rp->commands[0] |= BIT(5) | BIT(7);
    fa58:	7062      	strb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    fa5a:	70a3      	strb	r3, [r4, #2]
}
    fa5c:	e7c6      	b.n	f9ec <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fa5e:	4b32      	ldr	r3, [pc, #200]	; (fb28 <hci_vendor_cmd_handle_common+0x18c>)
    fa60:	2109      	movs	r1, #9
    fa62:	8818      	ldrh	r0, [r3, #0]
    fa64:	f014 fa57 	bl	23f16 <bt_hci_cmd_complete_create>
    fa68:	2109      	movs	r1, #9
    fa6a:	6020      	str	r0, [r4, #0]
    fa6c:	300c      	adds	r0, #12
    fa6e:	f015 fdc0 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    fa72:	2100      	movs	r1, #0
    fa74:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    fa78:	2208      	movs	r2, #8
    fa7a:	f014 f8d2 	bl	23c22 <memset>
}
    fa7e:	e7b5      	b.n	f9ec <hci_vendor_cmd_handle_common+0x50>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    fa80:	68c9      	ldr	r1, [r1, #12]
    fa82:	2000      	movs	r0, #0
    fa84:	f7ff fcea 	bl	f45c <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    fa88:	4b27      	ldr	r3, [pc, #156]	; (fb28 <hci_vendor_cmd_handle_common+0x18c>)
    fa8a:	2101      	movs	r1, #1
    fa8c:	8818      	ldrh	r0, [r3, #0]
    fa8e:	f014 fa42 	bl	23f16 <bt_hci_cmd_complete_create>
    fa92:	2101      	movs	r1, #1
    fa94:	4605      	mov	r5, r0
    fa96:	300c      	adds	r0, #12
    fa98:	f015 fdab 	bl	255f2 <net_buf_simple_add>
	ccst->status = status;
    fa9c:	2300      	movs	r3, #0
    fa9e:	7003      	strb	r3, [r0, #0]
	*evt = cmd_complete_status(0x00);
    faa0:	6025      	str	r5, [r4, #0]
}
    faa2:	e7a3      	b.n	f9ec <hci_vendor_cmd_handle_common+0x50>
	const char build_info[] = HCI_VS_BUILD_INFO;
    faa4:	4d21      	ldr	r5, [pc, #132]	; (fb2c <hci_vendor_cmd_handle_common+0x190>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    faa6:	4e20      	ldr	r6, [pc, #128]	; (fb28 <hci_vendor_cmd_handle_common+0x18c>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    faa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    faaa:	46ec      	mov	ip, sp
    faac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fab0:	e895 0003 	ldmia.w	r5, {r0, r1}
    fab4:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fab8:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    faba:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fabe:	2116      	movs	r1, #22
    fac0:	f014 fa29 	bl	23f16 <bt_hci_cmd_complete_create>
    fac4:	2116      	movs	r1, #22
    fac6:	6020      	str	r0, [r4, #0]
    fac8:	300c      	adds	r0, #12
    faca:	f015 fd92 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    face:	2300      	movs	r3, #0
    fad0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    fad4:	2215      	movs	r2, #21
    fad6:	4669      	mov	r1, sp
    fad8:	f014 f898 	bl	23c0c <memcpy>
}
    fadc:	e786      	b.n	f9ec <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fade:	4b12      	ldr	r3, [pc, #72]	; (fb28 <hci_vendor_cmd_handle_common+0x18c>)
    fae0:	2118      	movs	r1, #24
    fae2:	8818      	ldrh	r0, [r3, #0]
    fae4:	f014 fa17 	bl	23f16 <bt_hci_cmd_complete_create>
    fae8:	2118      	movs	r1, #24
    faea:	6020      	str	r0, [r4, #0]
    faec:	300c      	adds	r0, #12
    faee:	f015 fd80 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    faf2:	2300      	movs	r3, #0
    faf4:	4604      	mov	r4, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    faf6:	2101      	movs	r1, #1
	rp->status = 0x00;
    faf8:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    fafc:	f00b f808 	bl	1ab10 <hci_vendor_read_static_addr>
    fb00:	7060      	strb	r0, [r4, #1]
}
    fb02:	e773      	b.n	f9ec <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fb04:	4b08      	ldr	r3, [pc, #32]	; (fb28 <hci_vendor_cmd_handle_common+0x18c>)
    fb06:	2121      	movs	r1, #33	; 0x21
    fb08:	8818      	ldrh	r0, [r3, #0]
    fb0a:	f014 fa04 	bl	23f16 <bt_hci_cmd_complete_create>
    fb0e:	2121      	movs	r1, #33	; 0x21
    fb10:	6020      	str	r0, [r4, #0]
    fb12:	300c      	adds	r0, #12
    fb14:	f015 fd6d 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    fb18:	4601      	mov	r1, r0
    fb1a:	2300      	movs	r3, #0
    fb1c:	f801 3b11 	strb.w	r3, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    fb20:	3001      	adds	r0, #1
    fb22:	f00b f845 	bl	1abb0 <hci_vendor_read_key_hierarchy_roots>
}
    fb26:	e761      	b.n	f9ec <hci_vendor_cmd_handle_common+0x50>
    fb28:	20003ae4 	.word	0x20003ae4
    fb2c:	00028790 	.word	0x00028790

0000fb30 <hci_cmd_handle>:
{
    fb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb34:	b08c      	sub	sp, #48	; 0x30
	if (cmd->len < sizeof(*chdr)) {
    fb36:	8a02      	ldrh	r2, [r0, #16]
{
    fb38:	af04      	add	r7, sp, #16
	struct net_buf *evt = NULL;
    fb3a:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    fb3c:	2a02      	cmp	r2, #2
	struct net_buf *evt = NULL;
    fb3e:	60fd      	str	r5, [r7, #12]
	if (cmd->len < sizeof(*chdr)) {
    fb40:	d932      	bls.n	fba8 <hci_cmd_handle+0x78>
	return net_buf_simple_pull_mem(&buf->b, len);
    fb42:	4604      	mov	r4, r0
    fb44:	2103      	movs	r1, #3
    fb46:	300c      	adds	r0, #12
    fb48:	f015 fd84 	bl	25654 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    fb4c:	8a21      	ldrh	r1, [r4, #16]
    fb4e:	7882      	ldrb	r2, [r0, #2]
    fb50:	4291      	cmp	r1, r2
    fb52:	f0c0 8115 	bcc.w	fd80 <hci_cmd_handle+0x250>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    fb56:	8802      	ldrh	r2, [r0, #0]
    fb58:	4ec0      	ldr	r6, [pc, #768]	; (fe5c <hci_cmd_handle+0x32c>)
	switch (BT_OGF(_opcode)) {
    fb5a:	f3c2 2385 	ubfx	r3, r2, #10, #6
    fb5e:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    fb60:	8032      	strh	r2, [r6, #0]
    fb62:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
    fb64:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    fb68:	d809      	bhi.n	fb7e <hci_cmd_handle+0x4e>
    fb6a:	b1a3      	cbz	r3, fb96 <hci_cmd_handle+0x66>
    fb6c:	3b01      	subs	r3, #1
    fb6e:	2b07      	cmp	r3, #7
    fb70:	d811      	bhi.n	fb96 <hci_cmd_handle+0x66>
    fb72:	e8df f003 	tbb	[pc, r3]
    fb76:	1020      	.short	0x1020
    fb78:	1010ebcb 	.word	0x1010ebcb
    fb7c:	2f10      	.short	0x2f10
    fb7e:	2b3f      	cmp	r3, #63	; 0x3f
    fb80:	d109      	bne.n	fb96 <hci_cmd_handle+0x66>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    fb82:	f107 020c 	add.w	r2, r7, #12
    fb86:	4621      	mov	r1, r4
    fb88:	4628      	mov	r0, r5
    fb8a:	f7ff ff07 	bl	f99c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    fb8e:	3016      	adds	r0, #22
    fb90:	f040 83e3 	bne.w	1035a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35b>
	return bt_hci_cmd_status_create(_opcode, status);
    fb94:	8830      	ldrh	r0, [r6, #0]
    fb96:	2101      	movs	r1, #1
    fb98:	f014 f9cf 	bl	23f3a <bt_hci_cmd_status_create>
    fb9c:	4604      	mov	r4, r0
}
    fb9e:	4620      	mov	r0, r4
    fba0:	3720      	adds	r7, #32
    fba2:	46bd      	mov	sp, r7
    fba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No HCI Command header");
    fba8:	48ad      	ldr	r0, [pc, #692]	; (fe60 <hci_cmd_handle+0x330>)
    fbaa:	6802      	ldr	r2, [r0, #0]
    fbac:	0756      	lsls	r6, r2, #29
    fbae:	f040 80f2 	bne.w	fd96 <hci_cmd_handle+0x266>
		return NULL;
    fbb2:	2400      	movs	r4, #0
    fbb4:	e7f3      	b.n	fb9e <hci_cmd_handle+0x6e>
	switch (ocf) {
    fbb6:	2d06      	cmp	r5, #6
    fbb8:	f000 8384 	beq.w	102c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c5>
    fbbc:	2d1d      	cmp	r5, #29
    fbbe:	d1ea      	bne.n	fb96 <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
    fbc0:	68e3      	ldr	r3, [r4, #12]
	status = ll_version_ind_send(handle);
    fbc2:	8818      	ldrh	r0, [r3, #0]
    fbc4:	f003 fa0e 	bl	12fe4 <ll_version_ind_send>
    fbc8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    fbca:	8830      	ldrh	r0, [r6, #0]
    fbcc:	f014 f9b5 	bl	23f3a <bt_hci_cmd_status_create>
    fbd0:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    fbd2:	e7e4      	b.n	fb9e <hci_cmd_handle+0x6e>
	switch (ocf) {
    fbd4:	1e6a      	subs	r2, r5, #1
    fbd6:	2a4a      	cmp	r2, #74	; 0x4a
    fbd8:	d8dd      	bhi.n	fb96 <hci_cmd_handle+0x66>
    fbda:	a301      	add	r3, pc, #4	; (adr r3, fbe0 <hci_cmd_handle+0xb0>)
    fbdc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    fbe0:	000102b7 	.word	0x000102b7
    fbe4:	00010297 	.word	0x00010297
    fbe8:	0001024f 	.word	0x0001024f
    fbec:	0000fb97 	.word	0x0000fb97
    fbf0:	00010245 	.word	0x00010245
    fbf4:	00010229 	.word	0x00010229
    fbf8:	00010211 	.word	0x00010211
    fbfc:	000101ef 	.word	0x000101ef
    fc00:	000101e3 	.word	0x000101e3
    fc04:	000101d9 	.word	0x000101d9
    fc08:	0000fb97 	.word	0x0000fb97
    fc0c:	0000fb97 	.word	0x0000fb97
    fc10:	0000fb97 	.word	0x0000fb97
    fc14:	0000fb97 	.word	0x0000fb97
    fc18:	0000fb97 	.word	0x0000fb97
    fc1c:	0000fb97 	.word	0x0000fb97
    fc20:	0000fb97 	.word	0x0000fb97
    fc24:	0000fb97 	.word	0x0000fb97
    fc28:	000101b1 	.word	0x000101b1
    fc2c:	0000fb97 	.word	0x0000fb97
    fc30:	0001018b 	.word	0x0001018b
    fc34:	00010177 	.word	0x00010177
    fc38:	00010145 	.word	0x00010145
    fc3c:	00010127 	.word	0x00010127
    fc40:	0000fb97 	.word	0x0000fb97
    fc44:	0001011d 	.word	0x0001011d
    fc48:	00010109 	.word	0x00010109
    fc4c:	000100eb 	.word	0x000100eb
    fc50:	0000fb97 	.word	0x0000fb97
    fc54:	0000fb97 	.word	0x0000fb97
    fc58:	0000fb97 	.word	0x0000fb97
    fc5c:	000100c7 	.word	0x000100c7
    fc60:	000100a9 	.word	0x000100a9
    fc64:	00010095 	.word	0x00010095
    fc68:	00010065 	.word	0x00010065
    fc6c:	00010059 	.word	0x00010059
    fc70:	0000fb97 	.word	0x0000fb97
    fc74:	0000fb97 	.word	0x0000fb97
    fc78:	0000fb97 	.word	0x0000fb97
    fc7c:	0000fb97 	.word	0x0000fb97
    fc80:	0000fb97 	.word	0x0000fb97
    fc84:	0000fb97 	.word	0x0000fb97
    fc88:	0000fb97 	.word	0x0000fb97
    fc8c:	0000fb97 	.word	0x0000fb97
    fc90:	0000fb97 	.word	0x0000fb97
    fc94:	0000fb97 	.word	0x0000fb97
    fc98:	00010017 	.word	0x00010017
    fc9c:	0000ffc3 	.word	0x0000ffc3
    fca0:	0000ff8d 	.word	0x0000ff8d
    fca4:	0000ff31 	.word	0x0000ff31
    fca8:	0000fb97 	.word	0x0000fb97
    fcac:	0000fb97 	.word	0x0000fb97
    fcb0:	0000fb97 	.word	0x0000fb97
    fcb4:	0000fb97 	.word	0x0000fb97
    fcb8:	0000fb97 	.word	0x0000fb97
    fcbc:	0000fb97 	.word	0x0000fb97
    fcc0:	0000fb97 	.word	0x0000fb97
    fcc4:	0000fb97 	.word	0x0000fb97
    fcc8:	0000fb97 	.word	0x0000fb97
    fccc:	0000fb97 	.word	0x0000fb97
    fcd0:	0000fb97 	.word	0x0000fb97
    fcd4:	0000fb97 	.word	0x0000fb97
    fcd8:	0000fb97 	.word	0x0000fb97
    fcdc:	0000fb97 	.word	0x0000fb97
    fce0:	0000fb97 	.word	0x0000fb97
    fce4:	0000fb97 	.word	0x0000fb97
    fce8:	0000fb97 	.word	0x0000fb97
    fcec:	0000fb97 	.word	0x0000fb97
    fcf0:	0000fb97 	.word	0x0000fb97
    fcf4:	0000fb97 	.word	0x0000fb97
    fcf8:	0000fb97 	.word	0x0000fb97
    fcfc:	0000fb97 	.word	0x0000fb97
    fd00:	0000fb97 	.word	0x0000fb97
    fd04:	0000fb97 	.word	0x0000fb97
    fd08:	0000ff11 	.word	0x0000ff11
	switch (ocf) {
    fd0c:	2d63      	cmp	r5, #99	; 0x63
    fd0e:	f000 82e4 	beq.w	102da <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2db>
    fd12:	d866      	bhi.n	fde2 <hci_cmd_handle+0x2b2>
    fd14:	2d03      	cmp	r5, #3
    fd16:	f000 82e3 	beq.w	102e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e1>
    fd1a:	2d2d      	cmp	r5, #45	; 0x2d
    fd1c:	d14d      	bne.n	fdba <hci_cmd_handle+0x28a>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    fd1e:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fd20:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    fd22:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    fd24:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fd28:	f014 f8f5 	bl	23f16 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    fd2c:	2104      	movs	r1, #4
    fd2e:	4604      	mov	r4, r0
    fd30:	300c      	adds	r0, #12
    fd32:	f015 fc5e 	bl	255f2 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    fd36:	b2b1      	uxth	r1, r6
    fd38:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    fd3a:	1cc3      	adds	r3, r0, #3
    fd3c:	4642      	mov	r2, r8
    fd3e:	2002      	movs	r0, #2
    fd40:	f7ff fbd8 	bl	f4f4 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
    fd44:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
    fd48:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
    fd4a:	e728      	b.n	fb9e <hci_cmd_handle+0x6e>
	switch (ocf) {
    fd4c:	1e6a      	subs	r2, r5, #1
    fd4e:	2a08      	cmp	r2, #8
    fd50:	f63f af21 	bhi.w	fb96 <hci_cmd_handle+0x66>
    fd54:	a301      	add	r3, pc, #4	; (adr r3, fd5c <hci_cmd_handle+0x22c>)
    fd56:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    fd5a:	bf00      	nop
    fd5c:	0000fee9 	.word	0x0000fee9
    fd60:	0000fe75 	.word	0x0000fe75
    fd64:	0000fe39 	.word	0x0000fe39
    fd68:	0000fb97 	.word	0x0000fb97
    fd6c:	0000fb97 	.word	0x0000fb97
    fd70:	0000fb97 	.word	0x0000fb97
    fd74:	0000fb97 	.word	0x0000fb97
    fd78:	0000fb97 	.word	0x0000fb97
    fd7c:	0000fe1b 	.word	0x0000fe1b
		LOG_ERR("Invalid HCI CMD packet length");
    fd80:	4837      	ldr	r0, [pc, #220]	; (fe60 <hci_cmd_handle+0x330>)
    fd82:	6803      	ldr	r3, [r0, #0]
    fd84:	075c      	lsls	r4, r3, #29
    fd86:	f43f af14 	beq.w	fbb2 <hci_cmd_handle+0x82>
    fd8a:	466c      	mov	r4, sp
    fd8c:	b088      	sub	sp, #32
    fd8e:	ab04      	add	r3, sp, #16
    fd90:	4934      	ldr	r1, [pc, #208]	; (fe64 <hci_cmd_handle+0x334>)
    fd92:	461a      	mov	r2, r3
    fd94:	e004      	b.n	fda0 <hci_cmd_handle+0x270>
		LOG_ERR("No HCI Command header");
    fd96:	466c      	mov	r4, sp
    fd98:	b088      	sub	sp, #32
    fd9a:	ab04      	add	r3, sp, #16
    fd9c:	4932      	ldr	r1, [pc, #200]	; (fe68 <hci_cmd_handle+0x338>)
    fd9e:	461a      	mov	r2, r3
    fda0:	6159      	str	r1, [r3, #20]
    fda2:	4932      	ldr	r1, [pc, #200]	; (fe6c <hci_cmd_handle+0x33c>)
    fda4:	6199      	str	r1, [r3, #24]
    fda6:	2303      	movs	r3, #3
    fda8:	f842 3f10 	str.w	r3, [r2, #16]!
    fdac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fdb0:	462b      	mov	r3, r5
    fdb2:	f7f4 f9cd 	bl	4150 <z_impl_z_log_msg_static_create>
    fdb6:	46a5      	mov	sp, r4
    fdb8:	e6fb      	b.n	fbb2 <hci_cmd_handle+0x82>
	switch (ocf) {
    fdba:	2d01      	cmp	r5, #1
    fdbc:	f47f aeeb 	bne.w	fb96 <hci_cmd_handle+0x66>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    fdc0:	68e2      	ldr	r2, [r4, #12]
	event_mask = sys_get_le64(cmd->events);
    fdc2:	4b2b      	ldr	r3, [pc, #172]	; (fe70 <hci_cmd_handle+0x340>)
    fdc4:	6811      	ldr	r1, [r2, #0]
    fdc6:	6852      	ldr	r2, [r2, #4]
    fdc8:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    fdca:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    fdcc:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    fdce:	f014 f8a2 	bl	23f16 <bt_hci_cmd_complete_create>
    fdd2:	2101      	movs	r1, #1
    fdd4:	4604      	mov	r4, r0
    fdd6:	300c      	adds	r0, #12
    fdd8:	f015 fc0b 	bl	255f2 <net_buf_simple_add>
	ccst->status = status;
    fddc:	2300      	movs	r3, #0
    fdde:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
    fde0:	e6dd      	b.n	fb9e <hci_cmd_handle+0x6e>
	switch (ocf) {
    fde2:	2d7b      	cmp	r5, #123	; 0x7b
    fde4:	f000 829f 	beq.w	10326 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x327>
    fde8:	2d7c      	cmp	r5, #124	; 0x7c
    fdea:	f47f aed4 	bne.w	fb96 <hci_cmd_handle+0x66>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    fdee:	68e3      	ldr	r3, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
    fdf0:	f8b3 8000 	ldrh.w	r8, [r3]
	status = ll_apto_set(handle, auth_payload_timeout);
    fdf4:	8859      	ldrh	r1, [r3, #2]
    fdf6:	fa1f f088 	uxth.w	r0, r8
    fdfa:	f003 f9dd 	bl	131b8 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    fdfe:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fe00:	2103      	movs	r1, #3
    fe02:	8830      	ldrh	r0, [r6, #0]
    fe04:	f014 f887 	bl	23f16 <bt_hci_cmd_complete_create>
    fe08:	2103      	movs	r1, #3
    fe0a:	4604      	mov	r4, r0
    fe0c:	300c      	adds	r0, #12
    fe0e:	f015 fbf0 	bl	255f2 <net_buf_simple_add>
	rp->status = status;
    fe12:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    fe14:	f8a0 8001 	strh.w	r8, [r0, #1]
	if (err == -EINVAL) {
    fe18:	e6c1      	b.n	fb9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fe1a:	2107      	movs	r1, #7
    fe1c:	f014 f87b 	bl	23f16 <bt_hci_cmd_complete_create>
    fe20:	2107      	movs	r1, #7
    fe22:	4604      	mov	r4, r0
    fe24:	300c      	adds	r0, #12
    fe26:	f015 fbe4 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    fe2a:	4601      	mov	r1, r0
    fe2c:	2000      	movs	r0, #0
    fe2e:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    fe32:	f7ff fb47 	bl	f4c4 <ll_addr_read>
	if (err == -EINVAL) {
    fe36:	e6b2      	b.n	fb9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fe38:	2109      	movs	r1, #9
    fe3a:	f014 f86c 	bl	23f16 <bt_hci_cmd_complete_create>
    fe3e:	2109      	movs	r1, #9
    fe40:	4604      	mov	r4, r0
    fe42:	300c      	adds	r0, #12
    fe44:	f015 fbd5 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    fe48:	2100      	movs	r1, #0
    fe4a:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    fe4c:	2208      	movs	r2, #8
	rp->status = 0x00;
    fe4e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    fe52:	f013 fee6 	bl	23c22 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    fe56:	2360      	movs	r3, #96	; 0x60
    fe58:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
    fe5a:	e6a0      	b.n	fb9e <hci_cmd_handle+0x6e>
    fe5c:	20003ae4 	.word	0x20003ae4
    fe60:	20000aec 	.word	0x20000aec
    fe64:	000287c4 	.word	0x000287c4
    fe68:	000287a8 	.word	0x000287a8
    fe6c:	000289d0 	.word	0x000289d0
    fe70:	20000168 	.word	0x20000168
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fe74:	2141      	movs	r1, #65	; 0x41
    fe76:	f014 f84e 	bl	23f16 <bt_hci_cmd_complete_create>
    fe7a:	2141      	movs	r1, #65	; 0x41
    fe7c:	4604      	mov	r4, r0
    fe7e:	300c      	adds	r0, #12
    fe80:	f015 fbb7 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    fe84:	2100      	movs	r1, #0
    fe86:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fe88:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    fe8a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fe8e:	f013 fec8 	bl	23c22 <memset>
	rp->commands[10] |= BIT(2);
    fe92:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
    fe94:	79a8      	ldrb	r0, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    fe96:	7be9      	ldrb	r1, [r5, #15]
	rp->commands[15] |= BIT(1);
    fe98:	7c2a      	ldrb	r2, [r5, #16]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    fe9a:	f8d5 601a 	ldr.w	r6, [r5, #26]
	rp->commands[10] |= BIT(2);
    fe9e:	f043 0304 	orr.w	r3, r3, #4
    fea2:	72eb      	strb	r3, [r5, #11]
	rp->commands[22] |= BIT(2);
    fea4:	7deb      	ldrb	r3, [r5, #23]
    fea6:	f043 0304 	orr.w	r3, r3, #4
    feaa:	75eb      	strb	r3, [r5, #23]
	rp->commands[0] |= BIT(5);
    feac:	786b      	ldrb	r3, [r5, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
    feae:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
    feb2:	f041 0128 	orr.w	r1, r1, #40	; 0x28
	rp->commands[15] |= BIT(1);
    feb6:	f042 0202 	orr.w	r2, r2, #2
	rp->commands[0] |= BIT(5);
    feba:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[5] |= BIT(6) | BIT(7);
    febe:	71a8      	strb	r0, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    fec0:	73e9      	strb	r1, [r5, #15]
	rp->commands[32] |= BIT(4) | BIT(5);
    fec2:	f8d5 0021 	ldr.w	r0, [r5, #33]	; 0x21
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    fec6:	49cd      	ldr	r1, [pc, #820]	; (101fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1fd>)
	rp->commands[15] |= BIT(1);
    fec8:	742a      	strb	r2, [r5, #16]
	rp->commands[0] |= BIT(5);
    feca:	706b      	strb	r3, [r5, #1]
	rp->commands[32] |= BIT(4) | BIT(5);
    fecc:	4acc      	ldr	r2, [pc, #816]	; (10200 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x201>)
	rp->commands[38] |= BIT(7);
    fece:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    fed2:	4331      	orrs	r1, r6
	rp->commands[38] |= BIT(7);
    fed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    fed8:	4302      	orrs	r2, r0
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    feda:	f8c5 101a 	str.w	r1, [r5, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
    fede:	f8c5 2021 	str.w	r2, [r5, #33]	; 0x21
	rp->commands[38] |= BIT(7);
    fee2:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	if (err == -EINVAL) {
    fee6:	e65a      	b.n	fb9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fee8:	2109      	movs	r1, #9
    feea:	f014 f814 	bl	23f16 <bt_hci_cmd_complete_create>
    feee:	2109      	movs	r1, #9
    fef0:	4604      	mov	r4, r0
    fef2:	300c      	adds	r0, #12
    fef4:	f015 fb7d 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    fef8:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	rp->hci_revision = sys_cpu_to_le16(0);
    fefc:	2300      	movs	r3, #0
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    fefe:	4ac1      	ldr	r2, [pc, #772]	; (10204 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x205>)
	rp->status = 0x00;
    ff00:	8005      	strh	r5, [r0, #0]
	rp->lmp_version = LL_VERSION_NUMBER;
    ff02:	210c      	movs	r1, #12
	rp->hci_revision = sys_cpu_to_le16(0);
    ff04:	7083      	strb	r3, [r0, #2]
    ff06:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
    ff08:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    ff0a:	f8c0 2005 	str.w	r2, [r0, #5]
	if (err == -EINVAL) {
    ff0e:	e646      	b.n	fb9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ff10:	2103      	movs	r1, #3
    ff12:	f014 f800 	bl	23f16 <bt_hci_cmd_complete_create>
    ff16:	2103      	movs	r1, #3
    ff18:	4604      	mov	r4, r0
    ff1a:	300c      	adds	r0, #12
    ff1c:	f015 fb69 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
    ff20:	4601      	mov	r1, r0
    ff22:	2300      	movs	r3, #0
    ff24:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    ff28:	3001      	adds	r0, #1
    ff2a:	f7ff faf3 	bl	f514 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    ff2e:	e636      	b.n	fb9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    ff30:	68e2      	ldr	r2, [r4, #12]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ff32:	7894      	ldrb	r4, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
    ff34:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    ff36:	f8b2 c000 	ldrh.w	ip, [r2]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    ff3a:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ff3e:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    ff40:	bf48      	it	mi
    ff42:	f041 0103 	orrmi.w	r1, r1, #3
		cmd->rx_phys |= mask_phys;
    ff46:	7913      	ldrb	r3, [r2, #4]
		cmd->tx_phys |= mask_phys;
    ff48:	bf48      	it	mi
    ff4a:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ff4c:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    ff4e:	bf44      	itt	mi
    ff50:	f043 0303 	orrmi.w	r3, r3, #3
    ff54:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    ff56:	ea43 0201 	orr.w	r2, r3, r1
    ff5a:	2a03      	cmp	r2, #3
    ff5c:	f200 8204 	bhi.w	10368 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x369>
	if (!(cmd->tx_phys & 0x07) ||
    ff60:	074c      	lsls	r4, r1, #29
    ff62:	f000 81fc 	beq.w	1035e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35f>
    ff66:	075a      	lsls	r2, r3, #29
    ff68:	f000 81f9 	beq.w	1035e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35f>
	if (phy_opts & 0x03) {
    ff6c:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
    ff70:	bf1c      	itt	ne
    ff72:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
		phy_opts &= 1;
    ff76:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    ff7a:	4660      	mov	r0, ip
    ff7c:	f003 f8c6 	bl	1310c <ll_phy_req_send>
    ff80:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ff82:	8830      	ldrh	r0, [r6, #0]
    ff84:	f013 ffd9 	bl	23f3a <bt_hci_cmd_status_create>
    ff88:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    ff8a:	e608      	b.n	fb9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    ff8c:	68e3      	ldr	r3, [r4, #12]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ff8e:	781a      	ldrb	r2, [r3, #0]
    ff90:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    ff92:	bf44      	itt	mi
    ff94:	2107      	movmi	r1, #7
    ff96:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ff98:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    ff9a:	bf4c      	ite	mi
    ff9c:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ff9e:	7899      	ldrbpl	r1, [r3, #2]
    ffa0:	7858      	ldrb	r0, [r3, #1]
		cmd->rx_phys = 0x07;
    ffa2:	bf48      	it	mi
    ffa4:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ffa6:	f003 f8a7 	bl	130f8 <ll_phy_default_set>
	status = ll_adv_params_set(min_interval, cmd->type,
    ffaa:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ffac:	2101      	movs	r1, #1
    ffae:	8830      	ldrh	r0, [r6, #0]
    ffb0:	f013 ffb1 	bl	23f16 <bt_hci_cmd_complete_create>
    ffb4:	2101      	movs	r1, #1
    ffb6:	4604      	mov	r4, r0
    ffb8:	300c      	adds	r0, #12
    ffba:	f015 fb1a 	bl	255f2 <net_buf_simple_add>
	ccst->status = status;
    ffbe:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    ffc0:	e5ed      	b.n	fb9e <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    ffc2:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ffc4:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    ffc6:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ffc8:	f013 ffa5 	bl	23f16 <bt_hci_cmd_complete_create>
    ffcc:	2105      	movs	r1, #5
    ffce:	4604      	mov	r4, r0
    ffd0:	300c      	adds	r0, #12
    ffd2:	f015 fb0e 	bl	255f2 <net_buf_simple_add>
    ffd6:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ffd8:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    ffda:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ffdc:	1ce9      	adds	r1, r5, #3
    ffde:	f003 f86d 	bl	130bc <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    ffe2:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
    ffe4:	7028      	strb	r0, [r5, #0]
    ffe6:	2b00      	cmp	r3, #0
    ffe8:	fa93 f2a3 	rbit	r2, r3
    ffec:	792b      	ldrb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
    ffee:	f8a5 6001 	strh.w	r6, [r5, #1]
    fff2:	fab2 f282 	clz	r2, r2
    fff6:	bf08      	it	eq
    fff8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    fffc:	2b00      	cmp	r3, #0
    fffe:	fa93 f3a3 	rbit	r3, r3
   10002:	fab3 f383 	clz	r3, r3
   10006:	bf08      	it	eq
   10008:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1000c:	3201      	adds	r2, #1
   1000e:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   10010:	712b      	strb	r3, [r5, #4]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   10012:	70ea      	strb	r2, [r5, #3]
	if (err == -EINVAL) {
   10014:	e5c3      	b.n	fb9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10016:	2109      	movs	r1, #9
   10018:	f013 ff7d 	bl	23f16 <bt_hci_cmd_complete_create>
   1001c:	2109      	movs	r1, #9
   1001e:	4604      	mov	r4, r0
   10020:	300c      	adds	r0, #12
   10022:	f015 fae6 	bl	255f2 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   10026:	f107 0310 	add.w	r3, r7, #16
   1002a:	4605      	mov	r5, r0
   1002c:	f107 020a 	add.w	r2, r7, #10
   10030:	f107 0108 	add.w	r1, r7, #8
   10034:	1db8      	adds	r0, r7, #6
   10036:	f003 f835 	bl	130a4 <ll_length_max_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1003a:	88fb      	ldrh	r3, [r7, #6]
   1003c:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   10040:	893b      	ldrh	r3, [r7, #8]
   10042:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   10046:	897b      	ldrh	r3, [r7, #10]
   10048:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1004c:	8a3a      	ldrh	r2, [r7, #16]
   1004e:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
   10052:	2300      	movs	r3, #0
   10054:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   10056:	e5a2      	b.n	fb9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   10058:	68e3      	ldr	r3, [r4, #12]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   1005a:	8859      	ldrh	r1, [r3, #2]
   1005c:	8818      	ldrh	r0, [r3, #0]
   1005e:	f003 f817 	bl	13090 <ll_length_default_set>
   10062:	e7a2      	b.n	ffaa <hci_cmd_handle+0x47a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10064:	2105      	movs	r1, #5
   10066:	f013 ff56 	bl	23f16 <bt_hci_cmd_complete_create>
   1006a:	2105      	movs	r1, #5
   1006c:	4604      	mov	r4, r0
   1006e:	300c      	adds	r0, #12
   10070:	f015 fabf 	bl	255f2 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   10074:	f107 0110 	add.w	r1, r7, #16
   10078:	4605      	mov	r5, r0
   1007a:	f107 000a 	add.w	r0, r7, #10
   1007e:	f002 fffb 	bl	13078 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   10082:	897b      	ldrh	r3, [r7, #10]
   10084:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   10088:	8a3a      	ldrh	r2, [r7, #16]
   1008a:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
   1008e:	2300      	movs	r3, #0
   10090:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   10092:	e584      	b.n	fb9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   10094:	68e3      	ldr	r3, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
   10096:	f8b3 8000 	ldrh.w	r8, [r3]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1009a:	889a      	ldrh	r2, [r3, #4]
   1009c:	8859      	ldrh	r1, [r3, #2]
   1009e:	fa1f f088 	uxth.w	r0, r8
   100a2:	f002 ffbf 	bl	13024 <ll_length_req_send>
   100a6:	e6aa      	b.n	fdfe <hci_cmd_handle+0x2ce>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   100a8:	68e2      	ldr	r2, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
   100aa:	f8b2 8000 	ldrh.w	r8, [r2]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0, NULL);
   100ae:	7892      	ldrb	r2, [r2, #2]
   100b0:	2300      	movs	r3, #0
   100b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   100b6:	e9cd 3300 	strd	r3, r3, [sp]
   100ba:	2102      	movs	r1, #2
   100bc:	fa1f f088 	uxth.w	r0, r8
   100c0:	f002 fed4 	bl	12e6c <ll_conn_update>
   100c4:	e69b      	b.n	fdfe <hci_cmd_handle+0x2ce>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   100c6:	68e1      	ldr	r1, [r4, #12]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   100c8:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
   100ca:	f8b1 8000 	ldrh.w	r8, [r1]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   100ce:	884b      	ldrh	r3, [r1, #2]
   100d0:	9203      	str	r2, [sp, #12]
   100d2:	8908      	ldrh	r0, [r1, #8]
   100d4:	9002      	str	r0, [sp, #8]
   100d6:	88c8      	ldrh	r0, [r1, #6]
   100d8:	9001      	str	r0, [sp, #4]
   100da:	8888      	ldrh	r0, [r1, #4]
   100dc:	9000      	str	r0, [sp, #0]
   100de:	2102      	movs	r1, #2
   100e0:	fa1f f088 	uxth.w	r0, r8
   100e4:	f002 fec2 	bl	12e6c <ll_conn_update>
   100e8:	e689      	b.n	fdfe <hci_cmd_handle+0x2ce>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   100ea:	2109      	movs	r1, #9
   100ec:	f013 ff13 	bl	23f16 <bt_hci_cmd_complete_create>
   100f0:	2109      	movs	r1, #9
   100f2:	4604      	mov	r4, r0
   100f4:	300c      	adds	r0, #12
   100f6:	f015 fa7c 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
   100fa:	4943      	ldr	r1, [pc, #268]	; (10208 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x209>)
   100fc:	4a43      	ldr	r2, [pc, #268]	; (1020c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x20d>)
   100fe:	6001      	str	r1, [r0, #0]
	dst[1] = val >> 8;
   10100:	2300      	movs	r3, #0
   10102:	6042      	str	r2, [r0, #4]
   10104:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   10106:	e54a      	b.n	fb9e <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   10108:	68e3      	ldr	r3, [r4, #12]
   1010a:	f8b3 8000 	ldrh.w	r8, [r3]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1010e:	2200      	movs	r2, #0
   10110:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   10112:	fa1f f088 	uxth.w	r0, r8
   10116:	f007 fe57 	bl	17dc8 <ll_start_enc_req_send>
   1011a:	e670      	b.n	fdfe <hci_cmd_handle+0x2ce>
	handle = sys_le16_to_cpu(cmd->handle);
   1011c:	68e2      	ldr	r2, [r4, #12]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1011e:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   10120:	f832 8b02 	ldrh.w	r8, [r2], #2
   10124:	e7f5      	b.n	10112 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x113>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10126:	2109      	movs	r1, #9
   10128:	f013 fef5 	bl	23f16 <bt_hci_cmd_complete_create>
   1012c:	2109      	movs	r1, #9
   1012e:	4604      	mov	r4, r0
   10130:	300c      	adds	r0, #12
   10132:	f015 fa5e 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
   10136:	2300      	movs	r3, #0
   10138:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1013c:	2108      	movs	r1, #8
   1013e:	f008 f9b3 	bl	184a8 <lll_csrand_get>
	if (err == -EINVAL) {
   10142:	e52c      	b.n	fb9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   10144:	68e0      	ldr	r0, [r4, #12]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   10146:	f107 0210 	add.w	r2, r7, #16
   1014a:	2300      	movs	r3, #0
   1014c:	f100 0110 	add.w	r1, r0, #16
   10150:	f009 ff5a 	bl	1a008 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10154:	8830      	ldrh	r0, [r6, #0]
   10156:	2111      	movs	r1, #17
   10158:	f013 fedd 	bl	23f16 <bt_hci_cmd_complete_create>
   1015c:	2111      	movs	r1, #17
   1015e:	4604      	mov	r4, r0
   10160:	300c      	adds	r0, #12
   10162:	f015 fa46 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
   10166:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
   10168:	2210      	movs	r2, #16
	rp->status = 0x00;
   1016a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   1016e:	18b9      	adds	r1, r7, r2
   10170:	f013 fd4c 	bl	23c0c <memcpy>
	if (err == -EINVAL) {
   10174:	e513      	b.n	fb9e <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   10176:	68e3      	ldr	r3, [r4, #12]
	status = ll_feature_req_send(handle);
   10178:	8818      	ldrh	r0, [r3, #0]
   1017a:	f002 ff13 	bl	12fa4 <ll_feature_req_send>
   1017e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   10180:	8830      	ldrh	r0, [r6, #0]
   10182:	f013 feda 	bl	23f3a <bt_hci_cmd_status_create>
   10186:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   10188:	e509      	b.n	fb9e <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   1018a:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1018c:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   1018e:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10190:	f013 fec1 	bl	23f16 <bt_hci_cmd_complete_create>
   10194:	2108      	movs	r1, #8
   10196:	4604      	mov	r4, r0
   10198:	300c      	adds	r0, #12
   1019a:	f015 fa2a 	bl	255f2 <net_buf_simple_add>
   1019e:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   101a0:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   101a2:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   101a4:	f002 fea6 	bl	12ef4 <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
   101a8:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   101ac:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   101ae:	e4f6      	b.n	fb9e <hci_cmd_handle+0x6e>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   101b0:	68e1      	ldr	r1, [r4, #12]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   101b2:	2200      	movs	r2, #0
   101b4:	884b      	ldrh	r3, [r1, #2]
   101b6:	8808      	ldrh	r0, [r1, #0]
   101b8:	9203      	str	r2, [sp, #12]
   101ba:	890c      	ldrh	r4, [r1, #8]
   101bc:	9402      	str	r4, [sp, #8]
   101be:	88cc      	ldrh	r4, [r1, #6]
   101c0:	9401      	str	r4, [sp, #4]
   101c2:	8889      	ldrh	r1, [r1, #4]
   101c4:	9100      	str	r1, [sp, #0]
   101c6:	4611      	mov	r1, r2
   101c8:	f002 fe50 	bl	12e6c <ll_conn_update>
   101cc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   101ce:	8830      	ldrh	r0, [r6, #0]
   101d0:	f013 feb3 	bl	23f3a <bt_hci_cmd_status_create>
   101d4:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   101d6:	e4e2      	b.n	fb9e <hci_cmd_handle+0x6e>
	status = ll_adv_enable(cmd->enable);
   101d8:	68e3      	ldr	r3, [r4, #12]
   101da:	7818      	ldrb	r0, [r3, #0]
   101dc:	f7f0 fdf0 	bl	dc0 <ll_adv_enable>
   101e0:	e6e3      	b.n	ffaa <hci_cmd_handle+0x47a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   101e2:	68e1      	ldr	r1, [r4, #12]
   101e4:	f811 0b01 	ldrb.w	r0, [r1], #1
   101e8:	f002 fbd6 	bl	12998 <ll_adv_scan_rsp_set>
   101ec:	e6dd      	b.n	ffaa <hci_cmd_handle+0x47a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   101ee:	68e1      	ldr	r1, [r4, #12]
   101f0:	f811 0b01 	ldrb.w	r0, [r1], #1
   101f4:	f002 fb62 	bl	128bc <ll_adv_data_set>
   101f8:	e6d7      	b.n	ffaa <hci_cmd_handle+0x47a>
   101fa:	bf00      	nop
   101fc:	0ef403f7 	.word	0x0ef403f7
   10200:	7801f030 	.word	0x7801f030
   10204:	ffff05f1 	.word	0xffff05f1
   10208:	30cc8f00 	.word	0x30cc8f00
   1020c:	0001c0ec 	.word	0x0001c0ec
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10210:	2102      	movs	r1, #2
   10212:	f013 fe80 	bl	23f16 <bt_hci_cmd_complete_create>
   10216:	2102      	movs	r1, #2
   10218:	4604      	mov	r4, r0
   1021a:	300c      	adds	r0, #12
   1021c:	f015 f9e9 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
   10220:	2300      	movs	r3, #0
   10222:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   10224:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   10226:	e4ba      	b.n	fb9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   10228:	68e4      	ldr	r4, [r4, #12]
	status = ll_adv_params_set(min_interval, cmd->type,
   1022a:	7ba5      	ldrb	r5, [r4, #14]
   1022c:	79a3      	ldrb	r3, [r4, #6]
   1022e:	7962      	ldrb	r2, [r4, #5]
   10230:	7921      	ldrb	r1, [r4, #4]
   10232:	8820      	ldrh	r0, [r4, #0]
   10234:	9502      	str	r5, [sp, #8]
   10236:	7b65      	ldrb	r5, [r4, #13]
   10238:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1023a:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   1023c:	9400      	str	r4, [sp, #0]
   1023e:	f002 f99d 	bl	1257c <ll_adv_params_set>
   10242:	e6b2      	b.n	ffaa <hci_cmd_handle+0x47a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   10244:	68e1      	ldr	r1, [r4, #12]
   10246:	2001      	movs	r0, #1
   10248:	f7ff f908 	bl	f45c <ll_addr_set>
   1024c:	e6ad      	b.n	ffaa <hci_cmd_handle+0x47a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1024e:	2109      	movs	r1, #9
   10250:	f013 fe61 	bl	23f16 <bt_hci_cmd_complete_create>
   10254:	2109      	movs	r1, #9
   10256:	4604      	mov	r4, r0
   10258:	300c      	adds	r0, #12
   1025a:	f015 f9ca 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
   1025e:	2500      	movs	r5, #0
   10260:	4606      	mov	r6, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10262:	2208      	movs	r2, #8
   10264:	4629      	mov	r1, r5
	rp->status = 0x00;
   10266:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1026a:	f013 fcda 	bl	23c22 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   1026e:	f000 fcd1 	bl	10c14 <ll_feat_get>
	dst[0] = val;
   10272:	462b      	mov	r3, r5
	sys_put_le16(val >> 16, &dst[2]);
   10274:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   10276:	f361 0307 	bfi	r3, r1, #0, #8
	dst[1] = val >> 8;
   1027a:	f3c1 2107 	ubfx	r1, r1, #8, #8
	dst[0] = val;
   1027e:	f361 230f 	bfi	r3, r1, #8, #8
   10282:	f362 4317 	bfi	r3, r2, #16, #8
	dst[1] = val >> 8;
   10286:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   10288:	f362 631f 	bfi	r3, r2, #24, #8
   1028c:	f8c6 0001 	str.w	r0, [r6, #1]
   10290:	f8c6 3005 	str.w	r3, [r6, #5]
	if (err == -EINVAL) {
   10294:	e483      	b.n	fb9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10296:	2104      	movs	r1, #4
   10298:	f013 fe3d 	bl	23f16 <bt_hci_cmd_complete_create>
   1029c:	2104      	movs	r1, #4
   1029e:	4604      	mov	r4, r0
   102a0:	300c      	adds	r0, #12
   102a2:	f015 f9a6 	bl	255f2 <net_buf_simple_add>
	rp->status = 0x00;
   102a6:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   102a8:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   102aa:	2203      	movs	r2, #3
	rp->status = 0x00;
   102ac:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   102ae:	7041      	strb	r1, [r0, #1]
   102b0:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   102b2:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
   102b4:	e473      	b.n	fb9e <hci_cmd_handle+0x6e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   102b6:	68e2      	ldr	r2, [r4, #12]
	le_event_mask = sys_get_le64(cmd->events);
   102b8:	4b2e      	ldr	r3, [pc, #184]	; (10374 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x375>)
   102ba:	6814      	ldr	r4, [r2, #0]
   102bc:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   102be:	601c      	str	r4, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   102c0:	2101      	movs	r1, #1
   102c2:	e583      	b.n	fdcc <hci_cmd_handle+0x29c>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   102c4:	68e3      	ldr	r3, [r4, #12]
	status = ll_terminate_ind_send(handle, cmd->reason);
   102c6:	7899      	ldrb	r1, [r3, #2]
   102c8:	8818      	ldrh	r0, [r3, #0]
   102ca:	f002 fe35 	bl	12f38 <ll_terminate_ind_send>
   102ce:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   102d0:	8830      	ldrh	r0, [r6, #0]
   102d2:	f013 fe32 	bl	23f3a <bt_hci_cmd_status_create>
   102d6:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   102d8:	e461      	b.n	fb9e <hci_cmd_handle+0x6e>
   102da:	68e2      	ldr	r2, [r4, #12]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   102dc:	4b26      	ldr	r3, [pc, #152]	; (10378 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x379>)
   102de:	e7ec      	b.n	102ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2bb>
	event_mask = DEFAULT_EVENT_MASK;
   102e0:	4926      	ldr	r1, [pc, #152]	; (1037c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x37d>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   102e2:	4a25      	ldr	r2, [pc, #148]	; (10378 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x379>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   102e4:	4b23      	ldr	r3, [pc, #140]	; (10374 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x375>)
	event_mask = DEFAULT_EVENT_MASK;
   102e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   102ea:	f641 75ff 	movw	r5, #8191	; 0x1fff
   102ee:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   102f2:	2000      	movs	r0, #0
   102f4:	2100      	movs	r1, #0
   102f6:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   102fa:	201f      	movs	r0, #31
   102fc:	2100      	movs	r1, #0
   102fe:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   10302:	f001 fd7b 	bl	11dfc <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   10306:	8830      	ldrh	r0, [r6, #0]
   10308:	2101      	movs	r1, #1
   1030a:	f013 fe04 	bl	23f16 <bt_hci_cmd_complete_create>
   1030e:	2101      	movs	r1, #1
   10310:	4604      	mov	r4, r0
   10312:	300c      	adds	r0, #12
   10314:	f015 f96d 	bl	255f2 <net_buf_simple_add>
	ccst->status = status;
   10318:	2300      	movs	r3, #0
	conn_count = 0U;
   1031a:	4a19      	ldr	r2, [pc, #100]	; (10380 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x381>)
	ccst->status = status;
   1031c:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   1031e:	6013      	str	r3, [r2, #0]
	hci_recv_fifo_reset();
   10320:	f7ff faf6 	bl	f910 <hci_recv_fifo_reset>
	if (err == -EINVAL) {
   10324:	e43b      	b.n	fb9e <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   10326:	68e3      	ldr	r3, [r4, #12]
   10328:	f8b3 8000 	ldrh.w	r8, [r3]
	status = ll_apto_get(handle, &auth_payload_timeout);
   1032c:	f107 0110 	add.w	r1, r7, #16
   10330:	fa1f f088 	uxth.w	r0, r8
   10334:	f002 ff1c 	bl	13170 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10338:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1033a:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1033c:	8830      	ldrh	r0, [r6, #0]
   1033e:	f013 fdea 	bl	23f16 <bt_hci_cmd_complete_create>
   10342:	2105      	movs	r1, #5
   10344:	4604      	mov	r4, r0
   10346:	300c      	adds	r0, #12
   10348:	f015 f953 	bl	255f2 <net_buf_simple_add>
	rp->status = status;
   1034c:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1034e:	f8a0 8001 	strh.w	r8, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   10352:	8a3b      	ldrh	r3, [r7, #16]
   10354:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
   10358:	e421      	b.n	fb9e <hci_cmd_handle+0x6e>
	return evt;
   1035a:	68fc      	ldr	r4, [r7, #12]
   1035c:	e41f      	b.n	fb9e <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
   1035e:	2112      	movs	r1, #18
   10360:	f013 fdeb 	bl	23f3a <bt_hci_cmd_status_create>
   10364:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   10366:	e41a      	b.n	fb9e <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
   10368:	2111      	movs	r1, #17
   1036a:	f013 fde6 	bl	23f3a <bt_hci_cmd_status_create>
   1036e:	4604      	mov	r4, r0
	if (err == -EINVAL) {
   10370:	e415      	b.n	fb9e <hci_cmd_handle+0x6e>
   10372:	bf00      	nop
   10374:	20000160 	.word	0x20000160
   10378:	20001d48 	.word	0x20001d48
   1037c:	20000168 	.word	0x20000168
   10380:	20002924 	.word	0x20002924

00010384 <hci_acl_handle>:
{
   10384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*evt = NULL;
   10388:	2400      	movs	r4, #0
   1038a:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1038c:	8a03      	ldrh	r3, [r0, #16]
   1038e:	2b03      	cmp	r3, #3
{
   10390:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*acl)) {
   10392:	d934      	bls.n	103fe <hci_acl_handle+0x7a>
	return net_buf_simple_pull_mem(&buf->b, len);
   10394:	4605      	mov	r5, r0
   10396:	4689      	mov	r9, r1
   10398:	300c      	adds	r0, #12
   1039a:	2104      	movs	r1, #4
   1039c:	f015 f95a 	bl	25654 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   103a0:	8a2b      	ldrh	r3, [r5, #16]
	len = sys_le16_to_cpu(acl->len);
   103a2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   103a6:	f8b0 a000 	ldrh.w	sl, [r0]
	if (buf->len < len) {
   103aa:	4543      	cmp	r3, r8
   103ac:	d349      	bcc.n	10442 <hci_acl_handle+0xbe>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   103ae:	f1b8 0f1b 	cmp.w	r8, #27
   103b2:	d83c      	bhi.n	1042e <hci_acl_handle+0xaa>
	node_tx = ll_tx_mem_acquire();
   103b4:	f002 fd02 	bl	12dbc <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   103b8:	ea4f 361a 	mov.w	r6, sl, lsr #12
   103bc:	46b3      	mov	fp, r6
	if (!node_tx) {
   103be:	4604      	mov	r4, r0
   103c0:	2800      	cmp	r0, #0
   103c2:	d050      	beq.n	10466 <hci_acl_handle+0xe2>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   103c4:	ea5f 0b9b 	movs.w	fp, fp, lsr #2
   103c8:	d12e      	bne.n	10428 <hci_acl_handle+0xa4>
	switch (bt_acl_flags_pb(flags)) {
   103ca:	b1b6      	cbz	r6, 103fa <hci_acl_handle+0x76>
   103cc:	2e01      	cmp	r6, #1
   103ce:	d12b      	bne.n	10428 <hci_acl_handle+0xa4>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   103d0:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   103d2:	f884 8005 	strb.w	r8, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   103d6:	f366 0301 	bfi	r3, r6, #0, #2
   103da:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   103dc:	68e9      	ldr	r1, [r5, #12]
   103de:	4642      	mov	r2, r8
   103e0:	1de0      	adds	r0, r4, #7
   103e2:	f013 fc13 	bl	23c0c <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   103e6:	4621      	mov	r1, r4
   103e8:	f3ca 000b 	ubfx	r0, sl, #0, #12
   103ec:	f002 fcf2 	bl	12dd4 <ll_tx_mem_enqueue>
   103f0:	2800      	cmp	r0, #0
   103f2:	d130      	bne.n	10456 <hci_acl_handle+0xd2>
}
   103f4:	46bd      	mov	sp, r7
   103f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bt_acl_flags_pb(flags)) {
   103fa:	2602      	movs	r6, #2
   103fc:	e7e8      	b.n	103d0 <hci_acl_handle+0x4c>
		LOG_ERR("No HCI ACL header");
   103fe:	483d      	ldr	r0, [pc, #244]	; (104f4 <hci_acl_handle+0x170>)
   10400:	6803      	ldr	r3, [r0, #0]
   10402:	075b      	lsls	r3, r3, #29
   10404:	d010      	beq.n	10428 <hci_acl_handle+0xa4>
   10406:	466d      	mov	r5, sp
   10408:	b088      	sub	sp, #32
   1040a:	466b      	mov	r3, sp
   1040c:	493a      	ldr	r1, [pc, #232]	; (104f8 <hci_acl_handle+0x174>)
   1040e:	461a      	mov	r2, r3
   10410:	6159      	str	r1, [r3, #20]
   10412:	493a      	ldr	r1, [pc, #232]	; (104fc <hci_acl_handle+0x178>)
   10414:	6199      	str	r1, [r3, #24]
   10416:	2303      	movs	r3, #3
   10418:	f842 3f10 	str.w	r3, [r2, #16]!
   1041c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10420:	4623      	mov	r3, r4
   10422:	f7f3 fe95 	bl	4150 <z_impl_z_log_msg_static_create>
   10426:	46ad      	mov	sp, r5
		return -EINVAL;
   10428:	f06f 0015 	mvn.w	r0, #21
   1042c:	e7e2      	b.n	103f4 <hci_acl_handle+0x70>
		LOG_ERR("Invalid HCI ACL Data length");
   1042e:	4831      	ldr	r0, [pc, #196]	; (104f4 <hci_acl_handle+0x170>)
   10430:	6803      	ldr	r3, [r0, #0]
   10432:	075d      	lsls	r5, r3, #29
   10434:	d0f8      	beq.n	10428 <hci_acl_handle+0xa4>
   10436:	466d      	mov	r5, sp
   10438:	b088      	sub	sp, #32
   1043a:	466b      	mov	r3, sp
   1043c:	4930      	ldr	r1, [pc, #192]	; (10500 <hci_acl_handle+0x17c>)
   1043e:	461a      	mov	r2, r3
   10440:	e7e6      	b.n	10410 <hci_acl_handle+0x8c>
		LOG_ERR("Invalid HCI ACL packet length");
   10442:	482c      	ldr	r0, [pc, #176]	; (104f4 <hci_acl_handle+0x170>)
   10444:	6803      	ldr	r3, [r0, #0]
   10446:	075e      	lsls	r6, r3, #29
   10448:	d0ee      	beq.n	10428 <hci_acl_handle+0xa4>
   1044a:	466d      	mov	r5, sp
   1044c:	b088      	sub	sp, #32
   1044e:	466b      	mov	r3, sp
   10450:	492c      	ldr	r1, [pc, #176]	; (10504 <hci_acl_handle+0x180>)
   10452:	461a      	mov	r2, r3
   10454:	e7dc      	b.n	10410 <hci_acl_handle+0x8c>
		LOG_ERR("Invalid Tx Enqueue");
   10456:	4827      	ldr	r0, [pc, #156]	; (104f4 <hci_acl_handle+0x170>)
   10458:	6803      	ldr	r3, [r0, #0]
   1045a:	075b      	lsls	r3, r3, #29
   1045c:	d126      	bne.n	104ac <hci_acl_handle+0x128>
		ll_tx_mem_release(node_tx);
   1045e:	4620      	mov	r0, r4
   10460:	f002 fcb2 	bl	12dc8 <ll_tx_mem_release>
		return -EINVAL;
   10464:	e7e0      	b.n	10428 <hci_acl_handle+0xa4>
		LOG_ERR("Tx Buffer Overflow");
   10466:	4823      	ldr	r0, [pc, #140]	; (104f4 <hci_acl_handle+0x170>)
   10468:	6803      	ldr	r3, [r0, #0]
   1046a:	0759      	lsls	r1, r3, #29
   1046c:	d130      	bne.n	104d0 <hci_acl_handle+0x14c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1046e:	4b26      	ldr	r3, [pc, #152]	; (10508 <hci_acl_handle+0x184>)
   10470:	681b      	ldr	r3, [r3, #0]
   10472:	019a      	lsls	r2, r3, #6
   10474:	d517      	bpl.n	104a6 <hci_acl_handle+0x122>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1047a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1047e:	2001      	movs	r0, #1
   10480:	f7f7 fe56 	bl	8130 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   10484:	2102      	movs	r1, #2
   10486:	f8c9 0000 	str.w	r0, [r9]
   1048a:	300c      	adds	r0, #12
   1048c:	f015 f8b1 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10490:	f44f 738d 	mov.w	r3, #282	; 0x11a
   10494:	8003      	strh	r3, [r0, #0]
   10496:	f8d9 0000 	ldr.w	r0, [r9]
   1049a:	2101      	movs	r1, #1
   1049c:	300c      	adds	r0, #12
   1049e:	f015 f8a8 	bl	255f2 <net_buf_simple_add>
	ep->link_type = link_type;
   104a2:	2301      	movs	r3, #1
   104a4:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   104a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   104aa:	e7a3      	b.n	103f4 <hci_acl_handle+0x70>
		LOG_ERR("Invalid Tx Enqueue");
   104ac:	466d      	mov	r5, sp
   104ae:	b088      	sub	sp, #32
   104b0:	466b      	mov	r3, sp
   104b2:	4916      	ldr	r1, [pc, #88]	; (1050c <hci_acl_handle+0x188>)
   104b4:	6159      	str	r1, [r3, #20]
   104b6:	461a      	mov	r2, r3
   104b8:	4910      	ldr	r1, [pc, #64]	; (104fc <hci_acl_handle+0x178>)
   104ba:	6199      	str	r1, [r3, #24]
   104bc:	2303      	movs	r3, #3
   104be:	f842 3f10 	str.w	r3, [r2, #16]!
   104c2:	2300      	movs	r3, #0
   104c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   104c8:	f7f3 fe42 	bl	4150 <z_impl_z_log_msg_static_create>
   104cc:	46ad      	mov	sp, r5
   104ce:	e7c6      	b.n	1045e <hci_acl_handle+0xda>
		LOG_ERR("Tx Buffer Overflow");
   104d0:	466d      	mov	r5, sp
   104d2:	b088      	sub	sp, #32
   104d4:	466a      	mov	r2, sp
   104d6:	4b0e      	ldr	r3, [pc, #56]	; (10510 <hci_acl_handle+0x18c>)
   104d8:	6153      	str	r3, [r2, #20]
   104da:	4b08      	ldr	r3, [pc, #32]	; (104fc <hci_acl_handle+0x178>)
   104dc:	6193      	str	r3, [r2, #24]
   104de:	2303      	movs	r3, #3
   104e0:	f842 3f10 	str.w	r3, [r2, #16]!
   104e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   104e8:	4623      	mov	r3, r4
   104ea:	f7f3 fe31 	bl	4150 <z_impl_z_log_msg_static_create>
   104ee:	46ad      	mov	sp, r5
   104f0:	e7bd      	b.n	1046e <hci_acl_handle+0xea>
   104f2:	bf00      	nop
   104f4:	20000aec 	.word	0x20000aec
   104f8:	000287e8 	.word	0x000287e8
   104fc:	000289c0 	.word	0x000289c0
   10500:	00028824 	.word	0x00028824
   10504:	00028800 	.word	0x00028800
   10508:	20000168 	.word	0x20000168
   1050c:	0002885c 	.word	0x0002885c
   10510:	00028844 	.word	0x00028844

00010514 <hci_disconn_complete_encode>:
{
   10514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   10516:	4b0e      	ldr	r3, [pc, #56]	; (10550 <hci_disconn_complete_encode+0x3c>)
   10518:	681b      	ldr	r3, [r3, #0]
   1051a:	06db      	lsls	r3, r3, #27
   1051c:	d400      	bmi.n	10520 <hci_disconn_complete_encode+0xc>
}
   1051e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10520:	f102 040c 	add.w	r4, r2, #12
   10524:	4606      	mov	r6, r0
   10526:	460d      	mov	r5, r1
   10528:	4620      	mov	r0, r4
   1052a:	2102      	movs	r1, #2
   1052c:	f015 f861 	bl	255f2 <net_buf_simple_add>
   10530:	4603      	mov	r3, r0
	hdr->evt = evt;
   10532:	f240 4205 	movw	r2, #1029	; 0x405
   10536:	801a      	strh	r2, [r3, #0]
   10538:	4620      	mov	r0, r4
   1053a:	2104      	movs	r1, #4
   1053c:	f015 f859 	bl	255f2 <net_buf_simple_add>
	ep->status = 0x00;
   10540:	2700      	movs	r7, #0
   10542:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10544:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   10548:	7832      	ldrb	r2, [r6, #0]
   1054a:	70c2      	strb	r2, [r0, #3]
}
   1054c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1054e:	bf00      	nop
   10550:	20000168 	.word	0x20000168

00010554 <hci_disconn_complete_process>:
	conn_count--;
   10554:	4a02      	ldr	r2, [pc, #8]	; (10560 <hci_disconn_complete_process+0xc>)
   10556:	6813      	ldr	r3, [r2, #0]
   10558:	3b01      	subs	r3, #1
   1055a:	6013      	str	r3, [r2, #0]
}
   1055c:	4770      	bx	lr
   1055e:	bf00      	nop
   10560:	20002924 	.word	0x20002924

00010564 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BT_CONN)
void hci_acl_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   10564:	b570      	push	{r4, r5, r6, lr}
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   10566:	7f03      	ldrb	r3, [r0, #28]
	handle = node_rx->hdr.handle;
   10568:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   1056a:	f003 0303 	and.w	r3, r3, #3
   1056e:	3b01      	subs	r3, #1
   10570:	2b01      	cmp	r3, #1
   10572:	d90d      	bls.n	10590 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   10574:	4a15      	ldr	r2, [pc, #84]	; (105cc <hci_acl_encode+0x68>)
   10576:	4916      	ldr	r1, [pc, #88]	; (105d0 <hci_acl_encode+0x6c>)
   10578:	4816      	ldr	r0, [pc, #88]	; (105d4 <hci_acl_encode+0x70>)
   1057a:	f242 13a4 	movw	r3, #8612	; 0x21a4
   1057e:	f011 f8e5 	bl	2174c <assert_print>
   10582:	4040      	eors	r0, r0
   10584:	f380 8811 	msr	BASEPRI, r0
   10588:	f04f 0003 	mov.w	r0, #3
   1058c:	df02      	svc	2
		break;
	}
}
   1058e:	bd70      	pop	{r4, r5, r6, pc}
   10590:	4604      	mov	r4, r0
   10592:	f101 050c 	add.w	r5, r1, #12
   10596:	4628      	mov	r0, r5
   10598:	2104      	movs	r1, #4
   1059a:	f015 f82a 	bl	255f2 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1059e:	7f23      	ldrb	r3, [r4, #28]
   105a0:	f003 0303 	and.w	r3, r3, #3
   105a4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   105a6:	bf0c      	ite	eq
   105a8:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   105ac:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   105b0:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   105b2:	7f63      	ldrb	r3, [r4, #29]
   105b4:	8043      	strh	r3, [r0, #2]
   105b6:	7f61      	ldrb	r1, [r4, #29]
   105b8:	4628      	mov	r0, r5
   105ba:	f015 f81a 	bl	255f2 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   105be:	7f62      	ldrb	r2, [r4, #29]
   105c0:	f104 011f 	add.w	r1, r4, #31
}
   105c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   105c8:	f013 bb20 	b.w	23c0c <memcpy>
   105cc:	00028874 	.word	0x00028874
   105d0:	000286fc 	.word	0x000286fc
   105d4:	0002866c 	.word	0x0002866c

000105d8 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   105d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105dc:	b084      	sub	sp, #16
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   105de:	f890 c004 	ldrb.w	ip, [r0, #4]
   105e2:	88c6      	ldrh	r6, [r0, #6]
   105e4:	f1bc 0f03 	cmp.w	ip, #3
{
   105e8:	af04      	add	r7, sp, #16
   105ea:	4604      	mov	r4, r0
   105ec:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   105ee:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   105f2:	d00b      	beq.n	1060c <hci_evt_encode+0x34>
	switch (node_rx->hdr.type) {
   105f4:	f1ac 0c17 	sub.w	ip, ip, #23
   105f8:	f1bc 0f06 	cmp.w	ip, #6
   105fc:	f200 8292 	bhi.w	10b24 <hci_evt_encode+0x54c>
   10600:	e8df f00c 	tbb	[pc, ip]
   10604:	7f524a1e 	.word	0x7f524a1e
   10608:	a795      	.short	0xa795
   1060a:	c5          	.byte	0xc5
   1060b:	00          	.byte	0x00
	switch (pdu_data->llctrl.opcode) {
   1060c:	7fc3      	ldrb	r3, [r0, #31]
   1060e:	3b03      	subs	r3, #3
   10610:	2b12      	cmp	r3, #18
   10612:	f200 80f5 	bhi.w	10800 <hci_evt_encode+0x228>
   10616:	e8df f013 	tbh	[pc, r3, lsl #1]
   1061a:	0154      	.short	0x0154
   1061c:	00f300f3 	.word	0x00f300f3
   10620:	01ee020b 	.word	0x01ee020b
   10624:	020400f3 	.word	0x020400f3
   10628:	00f300f3 	.word	0x00f300f3
   1062c:	018000f3 	.word	0x018000f3
   10630:	01ad00f3 	.word	0x01ad00f3
   10634:	01d300f3 	.word	0x01d300f3
   10638:	00f300f3 	.word	0x00f300f3
   1063c:	01010101 	.word	0x01010101
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   10640:	f018 0f01 	tst.w	r8, #1
   10644:	f040 820d 	bne.w	10a62 <hci_evt_encode+0x48a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10648:	4bc1      	ldr	r3, [pc, #772]	; (10950 <hci_evt_encode+0x378>)
	status = cc->status;
   1064a:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1064e:	685b      	ldr	r3, [r3, #4]
   10650:	009b      	lsls	r3, r3, #2
   10652:	d526      	bpl.n	106a2 <hci_evt_encode+0xca>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   10654:	4bbf      	ldr	r3, [pc, #764]	; (10954 <hci_evt_encode+0x37c>)
   10656:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10658:	07d8      	lsls	r0, r3, #31
   1065a:	d522      	bpl.n	106a2 <hci_evt_encode+0xca>
   1065c:	350c      	adds	r5, #12
	if (!status) {
   1065e:	f1b8 0f00 	cmp.w	r8, #0
   10662:	f000 820c 	beq.w	10a7e <hci_evt_encode+0x4a6>
   10666:	2102      	movs	r1, #2
   10668:	4628      	mov	r0, r5
   1066a:	f014 ffc2 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   1066e:	f241 333e 	movw	r3, #4926	; 0x133e
   10672:	8003      	strh	r3, [r0, #0]
   10674:	2101      	movs	r1, #1
   10676:	4628      	mov	r0, r5
   10678:	f014 ffbb 	bl	255f2 <net_buf_simple_add>
	me->subevent = subevt;
   1067c:	2301      	movs	r3, #1
   1067e:	7003      	strb	r3, [r0, #0]
   10680:	2112      	movs	r1, #18
   10682:	4628      	mov	r0, r5
   10684:	f014 ffb5 	bl	255f2 <net_buf_simple_add>
   10688:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1068a:	2212      	movs	r2, #18
   1068c:	2100      	movs	r1, #0
   1068e:	f013 fac8 	bl	23c22 <memset>
		lecc->status = status;
   10692:	f884 8000 	strb.w	r8, [r4]
		return;
   10696:	e004      	b.n	106a2 <hci_evt_encode+0xca>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   10698:	460a      	mov	r2, r1
   1069a:	4640      	mov	r0, r8
   1069c:	4631      	mov	r1, r6
   1069e:	f7ff ff39 	bl	10514 <hci_disconn_complete_encode>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   106a2:	46bd      	mov	sp, r7
   106a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   106a8:	4ba9      	ldr	r3, [pc, #676]	; (10950 <hci_evt_encode+0x378>)
   106aa:	685b      	ldr	r3, [r3, #4]
   106ac:	0099      	lsls	r1, r3, #2
   106ae:	d5f8      	bpl.n	106a2 <hci_evt_encode+0xca>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   106b0:	4ba8      	ldr	r3, [pc, #672]	; (10954 <hci_evt_encode+0x37c>)
   106b2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   106b4:	075a      	lsls	r2, r3, #29
   106b6:	d5f4      	bpl.n	106a2 <hci_evt_encode+0xca>
   106b8:	350c      	adds	r5, #12
   106ba:	2102      	movs	r1, #2
   106bc:	4628      	mov	r0, r5
   106be:	f014 ff98 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   106c2:	f640 233e 	movw	r3, #2622	; 0xa3e
   106c6:	8003      	strh	r3, [r0, #0]
   106c8:	2101      	movs	r1, #1
   106ca:	4628      	mov	r0, r5
   106cc:	f014 ff91 	bl	255f2 <net_buf_simple_add>
	me->subevent = subevt;
   106d0:	2303      	movs	r3, #3
   106d2:	7003      	strb	r3, [r0, #0]
   106d4:	2109      	movs	r1, #9
   106d6:	4628      	mov	r0, r5
   106d8:	f014 ff8b 	bl	255f2 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   106dc:	f018 0f01 	tst.w	r8, #1
   106e0:	4605      	mov	r5, r0
   106e2:	f040 820a 	bne.w	10afa <hci_evt_encode+0x522>
	sep->status = cu->status;
   106e6:	7f23      	ldrb	r3, [r4, #28]
   106e8:	702b      	strb	r3, [r5, #0]
	sep->handle = sys_cpu_to_le16(handle);
   106ea:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   106ee:	8be3      	ldrh	r3, [r4, #30]
   106f0:	f8a5 3003 	strh.w	r3, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   106f4:	8c23      	ldrh	r3, [r4, #32]
   106f6:	f8a5 3005 	strh.w	r3, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   106fa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   106fc:	f8a5 3007 	strh.w	r3, [r5, #7]
   10700:	e7cf      	b.n	106a2 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   10702:	4b93      	ldr	r3, [pc, #588]	; (10950 <hci_evt_encode+0x378>)
   10704:	685b      	ldr	r3, [r3, #4]
   10706:	041b      	lsls	r3, r3, #16
   10708:	f04f 0400 	mov.w	r4, #0
   1070c:	d5c9      	bpl.n	106a2 <hci_evt_encode+0xca>
   1070e:	350c      	adds	r5, #12
   10710:	2102      	movs	r1, #2
   10712:	4628      	mov	r0, r5
   10714:	f014 ff6d 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10718:	f44f 734c 	mov.w	r3, #816	; 0x330
   1071c:	8003      	strh	r3, [r0, #0]
   1071e:	2103      	movs	r1, #3
   10720:	4628      	mov	r0, r5
   10722:	f014 ff66 	bl	255f2 <net_buf_simple_add>
	ep->status = 0x00;
   10726:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10728:	f8a0 6001 	strh.w	r6, [r0, #1]
   1072c:	e7b9      	b.n	106a2 <hci_evt_encode+0xca>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   1072e:	4b8a      	ldr	r3, [pc, #552]	; (10958 <hci_evt_encode+0x380>)
   10730:	681b      	ldr	r3, [r3, #0]
   10732:	021c      	lsls	r4, r3, #8
   10734:	d5b5      	bpl.n	106a2 <hci_evt_encode+0xca>
   10736:	350c      	adds	r5, #12
   10738:	2102      	movs	r1, #2
   1073a:	4628      	mov	r0, r5
   1073c:	f014 ff59 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10740:	f240 2357 	movw	r3, #599	; 0x257
   10744:	8003      	strh	r3, [r0, #0]
   10746:	2102      	movs	r1, #2
   10748:	4628      	mov	r0, r5
   1074a:	f014 ff52 	bl	255f2 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   1074e:	8006      	strh	r6, [r0, #0]
   10750:	e7a7      	b.n	106a2 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10752:	4b7f      	ldr	r3, [pc, #508]	; (10950 <hci_evt_encode+0x378>)
   10754:	685b      	ldr	r3, [r3, #4]
   10756:	0098      	lsls	r0, r3, #2
   10758:	d5a3      	bpl.n	106a2 <hci_evt_encode+0xca>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   1075a:	4b7e      	ldr	r3, [pc, #504]	; (10954 <hci_evt_encode+0x37c>)
   1075c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1075e:	0319      	lsls	r1, r3, #12
   10760:	d59f      	bpl.n	106a2 <hci_evt_encode+0xca>
   10762:	350c      	adds	r5, #12
   10764:	2102      	movs	r1, #2
   10766:	4628      	mov	r0, r5
   10768:	f014 ff43 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   1076c:	f240 433e 	movw	r3, #1086	; 0x43e
   10770:	8003      	strh	r3, [r0, #0]
   10772:	2101      	movs	r1, #1
   10774:	4628      	mov	r0, r5
   10776:	f014 ff3c 	bl	255f2 <net_buf_simple_add>
	me->subevent = subevt;
   1077a:	2314      	movs	r3, #20
   1077c:	7003      	strb	r3, [r0, #0]
   1077e:	2103      	movs	r1, #3
   10780:	4628      	mov	r0, r5
   10782:	f014 ff36 	bl	255f2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   10786:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   10788:	7f23      	ldrb	r3, [r4, #28]
   1078a:	7083      	strb	r3, [r0, #2]
   1078c:	e789      	b.n	106a2 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1078e:	4b70      	ldr	r3, [pc, #448]	; (10950 <hci_evt_encode+0x378>)
   10790:	685b      	ldr	r3, [r3, #4]
   10792:	009a      	lsls	r2, r3, #2
   10794:	d503      	bpl.n	1079e <hci_evt_encode+0x1c6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   10796:	4b6f      	ldr	r3, [pc, #444]	; (10954 <hci_evt_encode+0x37c>)
   10798:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1079a:	051b      	lsls	r3, r3, #20
   1079c:	d464      	bmi.n	10868 <hci_evt_encode+0x290>
		LOG_WRN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle, pu->status,
   1079e:	486f      	ldr	r0, [pc, #444]	; (1095c <hci_evt_encode+0x384>)
   107a0:	6803      	ldr	r3, [r0, #0]
   107a2:	f013 0f06 	tst.w	r3, #6
   107a6:	f43f af7c 	beq.w	106a2 <hci_evt_encode+0xca>
   107aa:	7f62      	ldrb	r2, [r4, #29]
   107ac:	7fa3      	ldrb	r3, [r4, #30]
   107ae:	2a00      	cmp	r2, #0
   107b0:	fa92 f2a2 	rbit	r2, r2
   107b4:	fab2 f282 	clz	r2, r2
   107b8:	bf08      	it	eq
   107ba:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   107be:	2b00      	cmp	r3, #0
   107c0:	fa93 f3a3 	rbit	r3, r3
   107c4:	fab3 f383 	clz	r3, r3
   107c8:	466d      	mov	r5, sp
   107ca:	bf08      	it	eq
   107cc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   107d0:	b08c      	sub	sp, #48	; 0x30
   107d2:	1c51      	adds	r1, r2, #1
   107d4:	3301      	adds	r3, #1
   107d6:	7f22      	ldrb	r2, [r4, #28]
   107d8:	ac04      	add	r4, sp, #16
   107da:	e9c4 6207 	strd	r6, r2, [r4, #28]
   107de:	e9c4 1309 	strd	r1, r3, [r4, #36]	; 0x24
   107e2:	4622      	mov	r2, r4
   107e4:	4b5e      	ldr	r3, [pc, #376]	; (10960 <hci_evt_encode+0x388>)
   107e6:	6163      	str	r3, [r4, #20]
   107e8:	2607      	movs	r6, #7
   107ea:	4b5e      	ldr	r3, [pc, #376]	; (10964 <hci_evt_encode+0x38c>)
   107ec:	61a3      	str	r3, [r4, #24]
   107ee:	f842 6f10 	str.w	r6, [r2, #16]!
   107f2:	2300      	movs	r3, #0
   107f4:	f44f 5162 	mov.w	r1, #14464	; 0x3880
   107f8:	f7f3 fcaa 	bl	4150 <z_impl_z_log_msg_static_create>
   107fc:	46ad      	mov	sp, r5
   107fe:	e750      	b.n	106a2 <hci_evt_encode+0xca>
		LL_ASSERT(0);
   10800:	4a59      	ldr	r2, [pc, #356]	; (10968 <hci_evt_encode+0x390>)
   10802:	495a      	ldr	r1, [pc, #360]	; (1096c <hci_evt_encode+0x394>)
   10804:	485a      	ldr	r0, [pc, #360]	; (10970 <hci_evt_encode+0x398>)
   10806:	f242 1378 	movw	r3, #8568	; 0x2178
   1080a:	f010 ff9f 	bl	2174c <assert_print>
   1080e:	4040      	eors	r0, r0
   10810:	f380 8811 	msr	BASEPRI, r0
   10814:	f04f 0003 	mov.w	r0, #3
   10818:	df02      	svc	2
}
   1081a:	e742      	b.n	106a2 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1081c:	4b4c      	ldr	r3, [pc, #304]	; (10950 <hci_evt_encode+0x378>)
   1081e:	685b      	ldr	r3, [r3, #4]
   10820:	009a      	lsls	r2, r3, #2
   10822:	f57f af3e 	bpl.w	106a2 <hci_evt_encode+0xca>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   10826:	4b4b      	ldr	r3, [pc, #300]	; (10954 <hci_evt_encode+0x37c>)
   10828:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1082a:	065b      	lsls	r3, r3, #25
   1082c:	f57f af39 	bpl.w	106a2 <hci_evt_encode+0xca>
   10830:	350c      	adds	r5, #12
   10832:	2102      	movs	r1, #2
   10834:	4628      	mov	r0, r5
   10836:	f014 fedc 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   1083a:	f640 333e 	movw	r3, #2878	; 0xb3e
   1083e:	8003      	strh	r3, [r0, #0]
   10840:	2101      	movs	r1, #1
   10842:	4628      	mov	r0, r5
   10844:	f014 fed5 	bl	255f2 <net_buf_simple_add>
	me->subevent = subevt;
   10848:	2307      	movs	r3, #7
   1084a:	7003      	strb	r3, [r0, #0]
   1084c:	210a      	movs	r1, #10
   1084e:	4628      	mov	r0, r5
   10850:	f014 fecf 	bl	255f2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   10854:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   10856:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   10858:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   1085a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1085c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   1085e:	8c23      	ldrh	r3, [r4, #32]
   10860:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   10862:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   10864:	8103      	strh	r3, [r0, #8]
   10866:	e71c      	b.n	106a2 <hci_evt_encode+0xca>
   10868:	350c      	adds	r5, #12
   1086a:	2102      	movs	r1, #2
   1086c:	4628      	mov	r0, r5
   1086e:	f014 fec0 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10872:	f240 633e 	movw	r3, #1598	; 0x63e
   10876:	8003      	strh	r3, [r0, #0]
   10878:	2101      	movs	r1, #1
   1087a:	4628      	mov	r0, r5
   1087c:	f014 feb9 	bl	255f2 <net_buf_simple_add>
	me->subevent = subevt;
   10880:	230c      	movs	r3, #12
   10882:	7003      	strb	r3, [r0, #0]
   10884:	2105      	movs	r1, #5
   10886:	4628      	mov	r0, r5
   10888:	f014 feb3 	bl	255f2 <net_buf_simple_add>
	sep->status = pu->status;
   1088c:	7f23      	ldrb	r3, [r4, #28]
   1088e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   10890:	f8a0 6001 	strh.w	r6, [r0, #1]
   10894:	7f62      	ldrb	r2, [r4, #29]
   10896:	2a00      	cmp	r2, #0
   10898:	fa92 f3a2 	rbit	r3, r2
   1089c:	fab3 f383 	clz	r3, r3
   108a0:	bf08      	it	eq
   108a2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   108a6:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   108a8:	70c3      	strb	r3, [r0, #3]
   108aa:	7fa2      	ldrb	r2, [r4, #30]
   108ac:	fa92 f3a2 	rbit	r3, r2
   108b0:	2a00      	cmp	r2, #0
   108b2:	fab3 f383 	clz	r3, r3
   108b6:	bf08      	it	eq
   108b8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   108bc:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   108be:	7103      	strb	r3, [r0, #4]
   108c0:	e6ef      	b.n	106a2 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   108c2:	4b23      	ldr	r3, [pc, #140]	; (10950 <hci_evt_encode+0x378>)
   108c4:	685b      	ldr	r3, [r3, #4]
   108c6:	0098      	lsls	r0, r3, #2
   108c8:	f57f aeeb 	bpl.w	106a2 <hci_evt_encode+0xca>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   108cc:	4b21      	ldr	r3, [pc, #132]	; (10954 <hci_evt_encode+0x37c>)
   108ce:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   108d0:	06d9      	lsls	r1, r3, #27
   108d2:	f57f aee6 	bpl.w	106a2 <hci_evt_encode+0xca>
   108d6:	350c      	adds	r5, #12
   108d8:	2102      	movs	r1, #2
   108da:	4628      	mov	r0, r5
   108dc:	f014 fe89 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   108e0:	f640 533e 	movw	r3, #3390	; 0xd3e
   108e4:	8003      	strh	r3, [r0, #0]
   108e6:	2101      	movs	r1, #1
   108e8:	4628      	mov	r0, r5
   108ea:	f014 fe82 	bl	255f2 <net_buf_simple_add>
	me->subevent = subevt;
   108ee:	2305      	movs	r3, #5
   108f0:	7003      	strb	r3, [r0, #0]
   108f2:	210c      	movs	r1, #12
   108f4:	4628      	mov	r0, r5
   108f6:	f014 fe7c 	bl	255f2 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   108fa:	f104 0120 	add.w	r1, r4, #32
   108fe:	4605      	mov	r5, r0
   10900:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   10902:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   10906:	f013 f981 	bl	23c0c <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   1090a:	2202      	movs	r2, #2
   1090c:	f104 0128 	add.w	r1, r4, #40	; 0x28
   10910:	f105 000a 	add.w	r0, r5, #10
   10914:	f013 f97a 	bl	23c0c <memcpy>
   10918:	e6c3      	b.n	106a2 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1091a:	4b0d      	ldr	r3, [pc, #52]	; (10950 <hci_evt_encode+0x378>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1091c:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   10920:	681b      	ldr	r3, [r3, #0]
   10922:	061b      	lsls	r3, r3, #24
   10924:	f57f aebd 	bpl.w	106a2 <hci_evt_encode+0xca>
   10928:	350c      	adds	r5, #12
   1092a:	2102      	movs	r1, #2
   1092c:	4628      	mov	r0, r5
   1092e:	f014 fe60 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10932:	f44f 6381 	mov.w	r3, #1032	; 0x408
   10936:	8003      	strh	r3, [r0, #0]
   10938:	2104      	movs	r1, #4
   1093a:	4628      	mov	r0, r5
   1093c:	f014 fe59 	bl	255f2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   10940:	fab4 f384 	clz	r3, r4
   10944:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   10946:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10948:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1094c:	70c3      	strb	r3, [r0, #3]
   1094e:	e6a8      	b.n	106a2 <hci_evt_encode+0xca>
   10950:	20000168 	.word	0x20000168
   10954:	20000160 	.word	0x20000160
   10958:	20001d48 	.word	0x20001d48
   1095c:	20000aec 	.word	0x20000aec
   10960:	00028928 	.word	0x00028928
   10964:	000289ac 	.word	0x000289ac
   10968:	00028874 	.word	0x00028874
   1096c:	000286fc 	.word	0x000286fc
   10970:	0002866c 	.word	0x0002866c
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10974:	4b72      	ldr	r3, [pc, #456]	; (10b40 <hci_evt_encode+0x568>)
   10976:	685b      	ldr	r3, [r3, #4]
   10978:	0098      	lsls	r0, r3, #2
   1097a:	f140 80b3 	bpl.w	10ae4 <hci_evt_encode+0x50c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1097e:	4b71      	ldr	r3, [pc, #452]	; (10b44 <hci_evt_encode+0x56c>)
   10980:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10982:	0699      	lsls	r1, r3, #26
   10984:	f140 80ae 	bpl.w	10ae4 <hci_evt_encode+0x50c>
   10988:	350c      	adds	r5, #12
   1098a:	2102      	movs	r1, #2
   1098c:	4628      	mov	r0, r5
   1098e:	f014 fe30 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10992:	f640 333e 	movw	r3, #2878	; 0xb3e
   10996:	8003      	strh	r3, [r0, #0]
   10998:	2101      	movs	r1, #1
   1099a:	4628      	mov	r0, r5
   1099c:	f014 fe29 	bl	255f2 <net_buf_simple_add>
	me->subevent = subevt;
   109a0:	2306      	movs	r3, #6
   109a2:	7003      	strb	r3, [r0, #0]
   109a4:	210a      	movs	r1, #10
   109a6:	4628      	mov	r0, r5
   109a8:	f014 fe23 	bl	255f2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   109ac:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   109ae:	8c23      	ldrh	r3, [r4, #32]
   109b0:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   109b2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   109b4:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   109b6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   109b8:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   109ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   109bc:	8103      	strh	r3, [r0, #8]
   109be:	e670      	b.n	106a2 <hci_evt_encode+0xca>
		LOG_WRN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   109c0:	4861      	ldr	r0, [pc, #388]	; (10b48 <hci_evt_encode+0x570>)
   109c2:	f894 1020 	ldrb.w	r1, [r4, #32]
   109c6:	6803      	ldr	r3, [r0, #0]
   109c8:	f013 0f06 	tst.w	r3, #6
   109cc:	f43f ae69 	beq.w	106a2 <hci_evt_encode+0xca>
   109d0:	466c      	mov	r4, sp
   109d2:	b088      	sub	sp, #32
   109d4:	ab04      	add	r3, sp, #16
   109d6:	4d5d      	ldr	r5, [pc, #372]	; (10b4c <hci_evt_encode+0x574>)
   109d8:	615d      	str	r5, [r3, #20]
   109da:	4d5d      	ldr	r5, [pc, #372]	; (10b50 <hci_evt_encode+0x578>)
   109dc:	619d      	str	r5, [r3, #24]
   109de:	461a      	mov	r2, r3
   109e0:	2504      	movs	r5, #4
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   109e2:	61d9      	str	r1, [r3, #28]
		LOG_WRN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   109e4:	f842 5f10 	str.w	r5, [r2, #16]!
   109e8:	2300      	movs	r3, #0
   109ea:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   109ee:	f7f3 fbaf 	bl	4150 <z_impl_z_log_msg_static_create>
   109f2:	46a5      	mov	sp, r4
   109f4:	e655      	b.n	106a2 <hci_evt_encode+0xca>
		le_unknown_rsp(pdu_data, handle, buf);
   109f6:	f890 3020 	ldrb.w	r3, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   109fa:	2b0e      	cmp	r3, #14
   109fc:	f000 808b 	beq.w	10b16 <hci_evt_encode+0x53e>
		LOG_WRN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   10a00:	4851      	ldr	r0, [pc, #324]	; (10b48 <hci_evt_encode+0x570>)
   10a02:	6802      	ldr	r2, [r0, #0]
   10a04:	f012 0f06 	tst.w	r2, #6
   10a08:	f43f ae4b 	beq.w	106a2 <hci_evt_encode+0xca>
   10a0c:	466c      	mov	r4, sp
   10a0e:	b088      	sub	sp, #32
   10a10:	a904      	add	r1, sp, #16
   10a12:	4d50      	ldr	r5, [pc, #320]	; (10b54 <hci_evt_encode+0x57c>)
   10a14:	614d      	str	r5, [r1, #20]
   10a16:	4d50      	ldr	r5, [pc, #320]	; (10b58 <hci_evt_encode+0x580>)
   10a18:	618d      	str	r5, [r1, #24]
   10a1a:	460a      	mov	r2, r1
   10a1c:	2504      	movs	r5, #4
	switch (pdu_data->llctrl.unknown_rsp.type) {
   10a1e:	61cb      	str	r3, [r1, #28]
		LOG_WRN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   10a20:	e7e0      	b.n	109e4 <hci_evt_encode+0x40c>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   10a22:	460b      	mov	r3, r1
   10a24:	4632      	mov	r2, r6
   10a26:	4641      	mov	r1, r8
   10a28:	2000      	movs	r0, #0
   10a2a:	f7fe ff81 	bl	f930 <le_remote_feat_complete>
		break;
   10a2e:	e638      	b.n	106a2 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   10a30:	4b43      	ldr	r3, [pc, #268]	; (10b40 <hci_evt_encode+0x568>)
   10a32:	681b      	ldr	r3, [r3, #0]
   10a34:	061a      	lsls	r2, r3, #24
   10a36:	f04f 0400 	mov.w	r4, #0
   10a3a:	f57f ae32 	bpl.w	106a2 <hci_evt_encode+0xca>
   10a3e:	350c      	adds	r5, #12
   10a40:	2102      	movs	r1, #2
   10a42:	4628      	mov	r0, r5
   10a44:	f014 fdd5 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10a48:	f44f 6381 	mov.w	r3, #1032	; 0x408
   10a4c:	8003      	strh	r3, [r0, #0]
   10a4e:	2104      	movs	r1, #4
   10a50:	4628      	mov	r0, r5
   10a52:	f014 fdce 	bl	255f2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   10a56:	2301      	movs	r3, #1
	ep->status = err;
   10a58:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10a5a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   10a5e:	70c3      	strb	r3, [r0, #3]
   10a60:	e61f      	b.n	106a2 <hci_evt_encode+0xca>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   10a62:	4a3e      	ldr	r2, [pc, #248]	; (10b5c <hci_evt_encode+0x584>)
   10a64:	493e      	ldr	r1, [pc, #248]	; (10b60 <hci_evt_encode+0x588>)
   10a66:	483f      	ldr	r0, [pc, #252]	; (10b64 <hci_evt_encode+0x58c>)
   10a68:	f641 63b2 	movw	r3, #7858	; 0x1eb2
   10a6c:	f010 fe6e 	bl	2174c <assert_print>
   10a70:	4040      	eors	r0, r0
   10a72:	f380 8811 	msr	BASEPRI, r0
   10a76:	f04f 0003 	mov.w	r0, #3
   10a7a:	df02      	svc	2
   10a7c:	e5e4      	b.n	10648 <hci_evt_encode+0x70>
		conn_count++;
   10a7e:	4a3a      	ldr	r2, [pc, #232]	; (10b68 <hci_evt_encode+0x590>)
   10a80:	6813      	ldr	r3, [r2, #0]
   10a82:	2102      	movs	r1, #2
   10a84:	3301      	adds	r3, #1
   10a86:	4628      	mov	r0, r5
   10a88:	6013      	str	r3, [r2, #0]
   10a8a:	f014 fdb2 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10a8e:	f241 333e 	movw	r3, #4926	; 0x133e
   10a92:	8003      	strh	r3, [r0, #0]
   10a94:	2101      	movs	r1, #1
   10a96:	4628      	mov	r0, r5
   10a98:	f014 fdab 	bl	255f2 <net_buf_simple_add>
	me->subevent = subevt;
   10a9c:	2301      	movs	r3, #1
   10a9e:	7003      	strb	r3, [r0, #0]
   10aa0:	2112      	movs	r1, #18
   10aa2:	4628      	mov	r0, r5
   10aa4:	f014 fda5 	bl	255f2 <net_buf_simple_add>
	lecc->status = 0x00;
   10aa8:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   10aac:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   10ab0:	7f63      	ldrb	r3, [r4, #29]
   10ab2:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   10ab4:	7fa3      	ldrb	r3, [r4, #30]
   10ab6:	f003 0301 	and.w	r3, r3, #1
   10aba:	4605      	mov	r5, r0
   10abc:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   10abe:	2206      	movs	r2, #6
   10ac0:	f104 011f 	add.w	r1, r4, #31
   10ac4:	3005      	adds	r0, #5
   10ac6:	f013 f8a1 	bl	23c0c <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   10aca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10acc:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   10ad0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   10ad2:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   10ad6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   10ad8:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   10adc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   10ae0:	746b      	strb	r3, [r5, #17]
   10ae2:	e5de      	b.n	106a2 <hci_evt_encode+0xca>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   10ae4:	2300      	movs	r3, #0
   10ae6:	e9cd 3302 	strd	r3, r3, [sp, #8]
   10aea:	e9cd 3300 	strd	r3, r3, [sp]
   10aee:	221a      	movs	r2, #26
   10af0:	2102      	movs	r1, #2
   10af2:	4630      	mov	r0, r6
   10af4:	f002 f9ba 	bl	12e6c <ll_conn_update>
		return;
   10af8:	e5d3      	b.n	106a2 <hci_evt_encode+0xca>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   10afa:	4a18      	ldr	r2, [pc, #96]	; (10b5c <hci_evt_encode+0x584>)
   10afc:	491b      	ldr	r1, [pc, #108]	; (10b6c <hci_evt_encode+0x594>)
   10afe:	4819      	ldr	r0, [pc, #100]	; (10b64 <hci_evt_encode+0x58c>)
   10b00:	f641 733b 	movw	r3, #7995	; 0x1f3b
   10b04:	f010 fe22 	bl	2174c <assert_print>
   10b08:	4040      	eors	r0, r0
   10b0a:	f380 8811 	msr	BASEPRI, r0
   10b0e:	f04f 0003 	mov.w	r0, #3
   10b12:	df02      	svc	2
   10b14:	e5e7      	b.n	106e6 <hci_evt_encode+0x10e>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   10b16:	460b      	mov	r3, r1
   10b18:	4632      	mov	r2, r6
   10b1a:	2100      	movs	r1, #0
   10b1c:	201a      	movs	r0, #26
   10b1e:	f7fe ff07 	bl	f930 <le_remote_feat_complete>
		break;
   10b22:	e5be      	b.n	106a2 <hci_evt_encode+0xca>
		LL_ASSERT(0);
   10b24:	4a0d      	ldr	r2, [pc, #52]	; (10b5c <hci_evt_encode+0x584>)
   10b26:	4912      	ldr	r1, [pc, #72]	; (10b70 <hci_evt_encode+0x598>)
   10b28:	480e      	ldr	r0, [pc, #56]	; (10b64 <hci_evt_encode+0x58c>)
   10b2a:	f242 0394 	movw	r3, #8340	; 0x2094
   10b2e:	f010 fe0d 	bl	2174c <assert_print>
   10b32:	4040      	eors	r0, r0
   10b34:	f380 8811 	msr	BASEPRI, r0
   10b38:	f04f 0003 	mov.w	r0, #3
   10b3c:	df02      	svc	2
		return;
   10b3e:	e5b0      	b.n	106a2 <hci_evt_encode+0xca>
   10b40:	20000168 	.word	0x20000168
   10b44:	20000160 	.word	0x20000160
   10b48:	20000aec 	.word	0x20000aec
   10b4c:	0002896c 	.word	0x0002896c
   10b50:	00028988 	.word	0x00028988
   10b54:	00028958 	.word	0x00028958
   10b58:	0002899c 	.word	0x0002899c
   10b5c:	00028874 	.word	0x00028874
   10b60:	000288b0 	.word	0x000288b0
   10b64:	0002866c 	.word	0x0002866c
   10b68:	20002924 	.word	0x20002924
   10b6c:	000288ec 	.word	0x000288ec
   10b70:	000286fc 	.word	0x000286fc

00010b74 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   10b74:	b570      	push	{r4, r5, r6, lr}
   10b76:	f100 040c 	add.w	r4, r0, #12
   10b7a:	460e      	mov	r6, r1
   10b7c:	4620      	mov	r0, r4
   10b7e:	2102      	movs	r1, #2
   10b80:	4615      	mov	r5, r2
   10b82:	f014 fd36 	bl	255f2 <net_buf_simple_add>
	hdr->evt = evt;
   10b86:	f240 5313 	movw	r3, #1299	; 0x513
   10b8a:	8003      	strh	r3, [r0, #0]
   10b8c:	2105      	movs	r1, #5
   10b8e:	4620      	mov	r0, r4
   10b90:	f014 fd2f 	bl	255f2 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   10b94:	2301      	movs	r3, #1
   10b96:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   10b98:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   10b9c:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   10ba0:	bd70      	pop	{r4, r5, r6, pc}
   10ba2:	bf00      	nop

00010ba4 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10ba4:	7903      	ldrb	r3, [r0, #4]
   10ba6:	2b03      	cmp	r3, #3
   10ba8:	d009      	beq.n	10bbe <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   10baa:	2b17      	cmp	r3, #23
   10bac:	d005      	beq.n	10bba <hci_get_class+0x16>
   10bae:	3b18      	subs	r3, #24
   10bb0:	2b05      	cmp	r3, #5
   10bb2:	bf8c      	ite	hi
   10bb4:	2000      	movhi	r0, #0
   10bb6:	2003      	movls	r0, #3
   10bb8:	4770      	bx	lr

#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
		case NODE_RX_TYPE_CONN_IQ_SAMPLE_REPORT:
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

			return HCI_CLASS_EVT_REQUIRED;
   10bba:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   10bbc:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   10bbe:	7f03      	ldrb	r3, [r0, #28]
   10bc0:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
   10bc4:	2b03      	cmp	r3, #3
   10bc6:	bf14      	ite	ne
   10bc8:	2005      	movne	r0, #5
   10bca:	2004      	moveq	r0, #4
   10bcc:	4770      	bx	lr
   10bce:	bf00      	nop

00010bd0 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   10bd0:	4b0b      	ldr	r3, [pc, #44]	; (10c00 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   10bd2:	4a0c      	ldr	r2, [pc, #48]	; (10c04 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10bd4:	490c      	ldr	r1, [pc, #48]	; (10c08 <hci_init+0x38>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   10bd6:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   10bd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10bdc:	f641 75ff 	movw	r5, #8191	; 0x1fff
   10be0:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   10be4:	2400      	movs	r4, #0
   10be6:	2500      	movs	r5, #0
   10be8:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10bec:	241f      	movs	r4, #31
   10bee:	2500      	movs	r5, #0
   10bf0:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   10bf4:	4b05      	ldr	r3, [pc, #20]	; (10c0c <hci_init+0x3c>)
   10bf6:	2200      	movs	r2, #0
   10bf8:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   10bfa:	bc30      	pop	{r4, r5}
	hci_recv_fifo_reset();
   10bfc:	f7fe be88 	b.w	f910 <hci_recv_fifo_reset>
   10c00:	20000168 	.word	0x20000168
   10c04:	20001d48 	.word	0x20001d48
   10c08:	20000160 	.word	0x20000160
   10c0c:	20002924 	.word	0x20002924

00010c10 <bt_rand>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_ctlr_crypto);

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   10c10:	f007 bc4a 	b.w	184a8 <lll_csrand_get>

00010c14 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   10c14:	4801      	ldr	r0, [pc, #4]	; (10c1c <ll_feat_get+0x8>)
   10c16:	2100      	movs	r1, #0
   10c18:	4770      	bx	lr
   10c1a:	bf00      	nop
   10c1c:	0001413f 	.word	0x0001413f

00010c20 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   10c20:	b510      	push	{r4, lr}
   10c22:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   10c24:	f007 fc6e 	bl	18504 <lll_reset>
	LL_ASSERT(!err);
   10c28:	b950      	cbnz	r0, 10c40 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   10c2a:	f008 f867 	bl	18cfc <lll_adv_reset>
	LL_ASSERT(!err);
   10c2e:	b9c0      	cbnz	r0, 10c62 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   10c30:	f008 fc74 	bl	1951c <lll_conn_reset>
	LL_ASSERT(!err);
   10c34:	bb30      	cbnz	r0, 10c84 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   10c36:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   10c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10c3c:	f00f b876 	b.w	1fd2c <z_impl_k_sem_give>
	LL_ASSERT(!err);
   10c40:	4a19      	ldr	r2, [pc, #100]	; (10ca8 <perform_lll_reset+0x88>)
   10c42:	491a      	ldr	r1, [pc, #104]	; (10cac <perform_lll_reset+0x8c>)
   10c44:	481a      	ldr	r0, [pc, #104]	; (10cb0 <perform_lll_reset+0x90>)
   10c46:	f640 03e7 	movw	r3, #2279	; 0x8e7
   10c4a:	f010 fd7f 	bl	2174c <assert_print>
   10c4e:	4040      	eors	r0, r0
   10c50:	f380 8811 	msr	BASEPRI, r0
   10c54:	f04f 0003 	mov.w	r0, #3
   10c58:	df02      	svc	2
	err = lll_adv_reset();
   10c5a:	f008 f84f 	bl	18cfc <lll_adv_reset>
	LL_ASSERT(!err);
   10c5e:	2800      	cmp	r0, #0
   10c60:	d0e6      	beq.n	10c30 <perform_lll_reset+0x10>
   10c62:	4a11      	ldr	r2, [pc, #68]	; (10ca8 <perform_lll_reset+0x88>)
   10c64:	4911      	ldr	r1, [pc, #68]	; (10cac <perform_lll_reset+0x8c>)
   10c66:	4812      	ldr	r0, [pc, #72]	; (10cb0 <perform_lll_reset+0x90>)
   10c68:	f640 03ec 	movw	r3, #2284	; 0x8ec
   10c6c:	f010 fd6e 	bl	2174c <assert_print>
   10c70:	4040      	eors	r0, r0
   10c72:	f380 8811 	msr	BASEPRI, r0
   10c76:	f04f 0003 	mov.w	r0, #3
   10c7a:	df02      	svc	2
	err = lll_conn_reset();
   10c7c:	f008 fc4e 	bl	1951c <lll_conn_reset>
	LL_ASSERT(!err);
   10c80:	2800      	cmp	r0, #0
   10c82:	d0d8      	beq.n	10c36 <perform_lll_reset+0x16>
   10c84:	4a08      	ldr	r2, [pc, #32]	; (10ca8 <perform_lll_reset+0x88>)
   10c86:	4909      	ldr	r1, [pc, #36]	; (10cac <perform_lll_reset+0x8c>)
   10c88:	4809      	ldr	r0, [pc, #36]	; (10cb0 <perform_lll_reset+0x90>)
   10c8a:	f640 03f8 	movw	r3, #2296	; 0x8f8
   10c8e:	f010 fd5d 	bl	2174c <assert_print>
   10c92:	4040      	eors	r0, r0
   10c94:	f380 8811 	msr	BASEPRI, r0
   10c98:	f04f 0003 	mov.w	r0, #3
   10c9c:	df02      	svc	2
   10c9e:	4620      	mov	r0, r4
}
   10ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ca4:	f00f b842 	b.w	1fd2c <z_impl_k_sem_give>
   10ca8:	000289fc 	.word	0x000289fc
   10cac:	00028a38 	.word	0x00028a38
   10cb0:	0002866c 	.word	0x0002866c

00010cb4 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   10cb4:	6008      	str	r0, [r1, #0]
   10cb6:	4801      	ldr	r0, [pc, #4]	; (10cbc <ull_ticker_status_give+0x8>)
   10cb8:	f00f b838 	b.w	1fd2c <z_impl_k_sem_give>
   10cbc:	20002c1c 	.word	0x20002c1c

00010cc0 <disabled_cb>:
   10cc0:	f00f b834 	b.w	1fd2c <z_impl_k_sem_give>

00010cc4 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   10cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;
	uint8_t next;

	next = *first;
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10cc8:	4d2a      	ldr	r5, [pc, #168]	; (10d74 <tx_cmplt_get+0xb0>)
	next = *first;
   10cca:	780c      	ldrb	r4, [r1, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10ccc:	78ab      	ldrb	r3, [r5, #2]
{
   10cce:	468a      	mov	sl, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10cd0:	7929      	ldrb	r1, [r5, #4]
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
		*idx = first;
   10cd2:	429c      	cmp	r4, r3
   10cd4:	bf28      	it	cs
   10cd6:	460c      	movcs	r4, r1
	}

	if (*idx == last) {
   10cd8:	42a2      	cmp	r2, r4
   10cda:	7829      	ldrb	r1, [r5, #0]
   10cdc:	d042      	beq.n	10d64 <tx_cmplt_get+0xa0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   10cde:	fb14 f101 	smulbb	r1, r4, r1
   10ce2:	f105 0708 	add.w	r7, r5, #8
	i = *idx + 1;
   10ce6:	3401      	adds	r4, #1
   10ce8:	b2e4      	uxtb	r4, r4
		i = 0U;
   10cea:	42a3      	cmp	r3, r4
   10cec:	bf08      	it	eq
   10cee:	2400      	moveq	r4, #0
	p = (void *)(fifo + (*idx) * size);
   10cf0:	187b      	adds	r3, r7, r1
				    &next);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   10cf2:	5a79      	ldrh	r1, [r7, r1]
   10cf4:	8001      	strh	r1, [r0, #0]
	cmplt = 0U;
   10cf6:	4693      	mov	fp, r2
   10cf8:	4681      	mov	r9, r0
   10cfa:	2600      	movs	r6, #0
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
			      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE)) ||
			    (!IS_NODE_TX_PTR(tx_node) &&
			     IS_NODE_TX_DATA(tx_node))) {
				/* data packet, hence count num cmplt */
				NODE_TX_DATA_SET(tx->node);
   10cfc:	f04f 0801 	mov.w	r8, #1
   10d00:	e01c      	b.n	10d3c <tx_cmplt_get+0x78>
			    (!IS_NODE_TX_PTR(tx_node) &&
   10d02:	2801      	cmp	r0, #1
   10d04:	d02b      	beq.n	10d5e <tx_cmplt_get+0x9a>
   10d06:	2212      	movs	r2, #18
   10d08:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
next_ack:
#endif /* CONFIG_BT_CTLR_ADV_ISO || CONFIG_BT_CTLR_CONN_ISO */

		*first = next;
   10d0a:	f88a 4000 	strb.w	r4, [sl]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10d0e:	78a8      	ldrb	r0, [r5, #2]
   10d10:	792b      	ldrb	r3, [r5, #4]
   10d12:	7829      	ldrb	r1, [r5, #0]
	if (*idx >= count) {
   10d14:	42a0      	cmp	r0, r4
   10d16:	bf88      	it	hi
   10d18:	4623      	movhi	r3, r4
	if (*idx == last) {
   10d1a:	459b      	cmp	fp, r3
   10d1c:	d023      	beq.n	10d66 <tx_cmplt_get+0xa2>
	p = (void *)(fifo + (*idx) * size);
   10d1e:	fb13 f101 	smulbb	r1, r3, r1
	i = *idx + 1;
   10d22:	3301      	adds	r3, #1
   10d24:	b2dc      	uxtb	r4, r3
		i = 0U;
   10d26:	42a0      	cmp	r0, r4
   10d28:	bf08      	it	eq
   10d2a:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, &next);
	} while (tx && tx->handle == *handle);
   10d2c:	f837 c001 	ldrh.w	ip, [r7, r1]
   10d30:	f8b9 0000 	ldrh.w	r0, [r9]
   10d34:	4584      	cmp	ip, r0
	p = (void *)(fifo + (*idx) * size);
   10d36:	eb07 0301 	add.w	r3, r7, r1
   10d3a:	d114      	bne.n	10d66 <tx_cmplt_get+0xa2>
			tx_node = tx->node;
   10d3c:	6858      	ldr	r0, [r3, #4]
			if (!tx_node ||
   10d3e:	b160      	cbz	r0, 10d5a <tx_cmplt_get+0x96>
   10d40:	28ff      	cmp	r0, #255	; 0xff
   10d42:	d9de      	bls.n	10d02 <tx_cmplt_get+0x3e>
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   10d44:	7901      	ldrb	r1, [r0, #4]
   10d46:	f001 0103 	and.w	r1, r1, #3
			    (IS_NODE_TX_PTR(tx_node) &&
   10d4a:	3901      	subs	r1, #1
   10d4c:	2901      	cmp	r1, #1
   10d4e:	d90d      	bls.n	10d6c <tx_cmplt_get+0xa8>
				NODE_TX_CTRL_SET(tx->node);
   10d50:	2112      	movs	r1, #18
   10d52:	6059      	str	r1, [r3, #4]
				ll_tx_mem_release(tx_node);
   10d54:	f002 f838 	bl	12dc8 <ll_tx_mem_release>
   10d58:	e7d7      	b.n	10d0a <tx_cmplt_get+0x46>
				NODE_TX_DATA_SET(tx->node);
   10d5a:	f8c3 8004 	str.w	r8, [r3, #4]
				cmplt++;
   10d5e:	3601      	adds	r6, #1
   10d60:	b2f6      	uxtb	r6, r6
			if (IS_NODE_TX_PTR(tx_node)) {
   10d62:	e7d2      	b.n	10d0a <tx_cmplt_get+0x46>
		return 0;
   10d64:	2600      	movs	r6, #0

	return cmplt;
}
   10d66:	4630      	mov	r0, r6
   10d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cmplt++;
   10d6c:	3601      	adds	r6, #1
   10d6e:	b2f6      	uxtb	r6, r6
				NODE_TX_DATA_SET(tx->node);
   10d70:	2101      	movs	r1, #1
				cmplt++;
   10d72:	e7ee      	b.n	10d52 <tx_cmplt_get+0x8e>
   10d74:	20000348 	.word	0x20000348

00010d78 <rx_replenish>:
{
   10d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max > mem_link_rx.quota_pdu) {
   10d7c:	4f3d      	ldr	r7, [pc, #244]	; (10e74 <rx_replenish+0xfc>)
   10d7e:	883b      	ldrh	r3, [r7, #0]
   10d80:	4298      	cmp	r0, r3
   10d82:	d968      	bls.n	10e56 <rx_replenish+0xde>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10d84:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
   10d88:	d02c      	beq.n	10de4 <rx_replenish+0x6c>
   10d8a:	4d3b      	ldr	r5, [pc, #236]	; (10e78 <rx_replenish+0x100>)
		link = mem_acquire(&mem_link_rx.free);
   10d8c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 10e7c <rx_replenish+0x104>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10d90:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   10d92:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 10e80 <rx_replenish+0x108>
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10d96:	f105 0a08 	add.w	sl, r5, #8
	if (last == count) {
   10d9a:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10d9c:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
   10d9e:	3401      	adds	r4, #1
   10da0:	b2e4      	uxtb	r4, r4
		last = 0U;
   10da2:	42a2      	cmp	r2, r4
   10da4:	bf08      	it	eq
   10da6:	2400      	moveq	r4, #0
	if (last == first) {
   10da8:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   10daa:	4640      	mov	r0, r8
   10dac:	d01c      	beq.n	10de8 <rx_replenish+0x70>
   10dae:	f7fd f91f 	bl	dff0 <mem_acquire>
   10db2:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10db4:	4648      	mov	r0, r9
		if (!link) {
   10db6:	f1bb 0f00 	cmp.w	fp, #0
   10dba:	d013      	beq.n	10de4 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
   10dbc:	f7fd f918 	bl	dff0 <mem_acquire>
		if (!rx) {
   10dc0:	2800      	cmp	r0, #0
   10dc2:	d04a      	beq.n	10e5a <rx_replenish+0xe2>
		rx->link = link;
   10dc4:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10dc8:	796b      	ldrb	r3, [r5, #5]
   10dca:	782a      	ldrb	r2, [r5, #0]
   10dcc:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10dd0:	f84a 0003 	str.w	r0, [sl, r3]
	mem_link_rx.quota_pdu += delta;
   10dd4:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   10dd6:	716c      	strb	r4, [r5, #5]
		max--;
   10dd8:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   10dda:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10ddc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   10de0:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10de2:	d1da      	bne.n	10d9a <rx_replenish+0x22>
}
   10de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
   10de8:	883b      	ldrh	r3, [r7, #0]
   10dea:	2b00      	cmp	r3, #0
   10dec:	d0fa      	beq.n	10de4 <rx_replenish+0x6c>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10dee:	f8df 9094 	ldr.w	r9, [pc, #148]	; 10e84 <rx_replenish+0x10c>
		link = mem_acquire(&mem_link_rx.free);
   10df2:	4d22      	ldr	r5, [pc, #136]	; (10e7c <rx_replenish+0x104>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10df4:	f899 4005 	ldrb.w	r4, [r9, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   10df8:	4e21      	ldr	r6, [pc, #132]	; (10e80 <rx_replenish+0x108>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10dfa:	f109 0808 	add.w	r8, r9, #8
	if (last == count) {
   10dfe:	f899 2002 	ldrb.w	r2, [r9, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10e02:	f899 3004 	ldrb.w	r3, [r9, #4]
	last = last + 1;
   10e06:	3401      	adds	r4, #1
   10e08:	b2e4      	uxtb	r4, r4
		last = 0U;
   10e0a:	42a2      	cmp	r2, r4
   10e0c:	bf08      	it	eq
   10e0e:	2400      	moveq	r4, #0
	if (last == first) {
   10e10:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   10e12:	4628      	mov	r0, r5
   10e14:	d0e6      	beq.n	10de4 <rx_replenish+0x6c>
   10e16:	f7fd f8eb 	bl	dff0 <mem_acquire>
   10e1a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10e1c:	4630      	mov	r0, r6
		if (!link) {
   10e1e:	f1ba 0f00 	cmp.w	sl, #0
   10e22:	d0df      	beq.n	10de4 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
   10e24:	f7fd f8e4 	bl	dff0 <mem_acquire>
		link->mem = NULL;
   10e28:	2300      	movs	r3, #0
		if (!rx) {
   10e2a:	b1e0      	cbz	r0, 10e66 <rx_replenish+0xee>
		link->mem = NULL;
   10e2c:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   10e30:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10e34:	f899 3005 	ldrb.w	r3, [r9, #5]
   10e38:	f899 2000 	ldrb.w	r2, [r9]
   10e3c:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10e40:	f848 0003 	str.w	r0, [r8, r3]
	mem_link_rx.quota_pdu += delta;
   10e44:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   10e46:	f889 4005 	strb.w	r4, [r9, #5]
   10e4a:	3b01      	subs	r3, #1
   10e4c:	b29b      	uxth	r3, r3
   10e4e:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   10e50:	2b00      	cmp	r3, #0
   10e52:	d1d4      	bne.n	10dfe <rx_replenish+0x86>
   10e54:	e7c6      	b.n	10de4 <rx_replenish+0x6c>
   10e56:	4606      	mov	r6, r0
   10e58:	e797      	b.n	10d8a <rx_replenish+0x12>
	mem_release(link, &mem_link_rx.free);
   10e5a:	4658      	mov	r0, fp
   10e5c:	4907      	ldr	r1, [pc, #28]	; (10e7c <rx_replenish+0x104>)
}
   10e5e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
   10e62:	f7fd b8e1 	b.w	e028 <mem_release>
   10e66:	4650      	mov	r0, sl
   10e68:	4904      	ldr	r1, [pc, #16]	; (10e7c <rx_replenish+0x104>)
}
   10e6a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
   10e6e:	f7fd b8db 	b.w	e028 <mem_release>
   10e72:	bf00      	nop
   10e74:	20002970 	.word	0x20002970
   10e78:	20000384 	.word	0x20000384
   10e7c:	20002974 	.word	0x20002974
   10e80:	200029c8 	.word	0x200029c8
   10e84:	20000370 	.word	0x20000370

00010e88 <ull_done>:
}
#endif /* CONFIG_BT_CONN || CONFIG_BT_CTLR_ADV_ISO */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   10e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e8c:	4e3c      	ldr	r6, [pc, #240]	; (10f80 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   10e8e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 10f84 <ull_done+0xfc>
   10e92:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 10f88 <ull_done+0x100>
{
   10e96:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   10e98:	e9d6 0100 	ldrd	r0, r1, [r6]
   10e9c:	aa01      	add	r2, sp, #4
   10e9e:	f7fd f917 	bl	e0d0 <memq_peek>
		if (link) {
   10ea2:	4604      	mov	r4, r0
   10ea4:	2800      	cmp	r0, #0
   10ea6:	d03e      	beq.n	10f26 <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   10ea8:	6870      	ldr	r0, [r6, #4]
   10eaa:	2200      	movs	r2, #0
   10eac:	4631      	mov	r1, r6
   10eae:	f7fd f917 	bl	e0e0 <memq_dequeue>
			rx_demux_event_done(link, done);
   10eb2:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   10eb4:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   10eb6:	b135      	cbz	r5, 10ec6 <ull_done+0x3e>
   10eb8:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   10eba:	2b00      	cmp	r3, #0
   10ebc:	d052      	beq.n	10f64 <ull_done+0xdc>
	return hdr->ref--;
   10ebe:	782b      	ldrb	r3, [r5, #0]
   10ec0:	3b01      	subs	r3, #1
   10ec2:	b2db      	uxtb	r3, r3
   10ec4:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   10ec6:	f897 3020 	ldrb.w	r3, [r7, #32]
   10eca:	b123      	cbz	r3, 10ed6 <ull_done+0x4e>
   10ecc:	2b01      	cmp	r3, #1
   10ece:	d13b      	bne.n	10f48 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   10ed0:	4638      	mov	r0, r7
   10ed2:	f7f0 fa05 	bl	12e0 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   10ed6:	4a2d      	ldr	r2, [pc, #180]	; (10f8c <ull_done+0x104>)
	last = last + 1;
   10ed8:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
   10eda:	f892 c002 	ldrb.w	ip, [r2, #2]
   10ede:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
   10ee0:	3301      	adds	r3, #1
	done->extra.type = 0U;
   10ee2:	2100      	movs	r1, #0
   10ee4:	b2db      	uxtb	r3, r3
		last = 0U;
   10ee6:	459c      	cmp	ip, r3
   10ee8:	bf08      	it	eq
   10eea:	460b      	moveq	r3, r1
	if (last == first) {
   10eec:	4298      	cmp	r0, r3
   10eee:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   10ef2:	7811      	ldrb	r1, [r2, #0]
   10ef4:	d01a      	beq.n	10f2c <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   10ef6:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10ef8:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10efa:	fb00 2101 	mla	r1, r0, r1, r2
   10efe:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
   10f00:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   10f02:	2d00      	cmp	r5, #0
   10f04:	d0c8      	beq.n	10e98 <ull_done+0x10>
	return hdr->ref;
   10f06:	782b      	ldrb	r3, [r5, #0]
   10f08:	2b00      	cmp	r3, #0
   10f0a:	d1c5      	bne.n	10e98 <ull_done+0x10>
   10f0c:	696b      	ldr	r3, [r5, #20]
   10f0e:	2b00      	cmp	r3, #0
   10f10:	d0c2      	beq.n	10e98 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   10f12:	69a8      	ldr	r0, [r5, #24]
   10f14:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   10f16:	e9d6 0100 	ldrd	r0, r1, [r6]
   10f1a:	aa01      	add	r2, sp, #4
   10f1c:	f7fd f8d8 	bl	e0d0 <memq_peek>
		if (link) {
   10f20:	4604      	mov	r4, r0
   10f22:	2800      	cmp	r0, #0
   10f24:	d1c0      	bne.n	10ea8 <ull_done+0x20>
}
   10f26:	b003      	add	sp, #12
   10f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   10f2c:	4918      	ldr	r1, [pc, #96]	; (10f90 <ull_done+0x108>)
   10f2e:	4819      	ldr	r0, [pc, #100]	; (10f94 <ull_done+0x10c>)
   10f30:	f640 33c7 	movw	r3, #3015	; 0xbc7
   10f34:	4642      	mov	r2, r8
   10f36:	f010 fc09 	bl	2174c <assert_print>
   10f3a:	4040      	eors	r0, r0
   10f3c:	f380 8811 	msr	BASEPRI, r0
   10f40:	f04f 0003 	mov.w	r0, #3
   10f44:	df02      	svc	2
   10f46:	e7dc      	b.n	10f02 <ull_done+0x7a>
		LL_ASSERT(0);
   10f48:	4913      	ldr	r1, [pc, #76]	; (10f98 <ull_done+0x110>)
   10f4a:	4812      	ldr	r0, [pc, #72]	; (10f94 <ull_done+0x10c>)
   10f4c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
   10f50:	4642      	mov	r2, r8
   10f52:	f010 fbfb 	bl	2174c <assert_print>
   10f56:	4040      	eors	r0, r0
   10f58:	f380 8811 	msr	BASEPRI, r0
   10f5c:	f04f 0003 	mov.w	r0, #3
   10f60:	df02      	svc	2
		break;
   10f62:	e7b8      	b.n	10ed6 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   10f64:	480b      	ldr	r0, [pc, #44]	; (10f94 <ull_done+0x10c>)
   10f66:	f640 3369 	movw	r3, #2921	; 0xb69
   10f6a:	4642      	mov	r2, r8
   10f6c:	4649      	mov	r1, r9
   10f6e:	f010 fbed 	bl	2174c <assert_print>
   10f72:	4040      	eors	r0, r0
   10f74:	f380 8811 	msr	BASEPRI, r0
   10f78:	f04f 0003 	mov.w	r0, #3
   10f7c:	df02      	svc	2
   10f7e:	e79e      	b.n	10ebe <ull_done+0x36>
   10f80:	20002958 	.word	0x20002958
   10f84:	000289fc 	.word	0x000289fc
   10f88:	00028a40 	.word	0x00028a40
   10f8c:	20000488 	.word	0x20000488
   10f90:	00028a58 	.word	0x00028a58
   10f94:	0002866c 	.word	0x0002866c
   10f98:	000286fc 	.word	0x000286fc

00010f9c <rx_demux>:
{
   10f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 11150 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   10fa4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 11154 <rx_demux+0x1b8>
			LL_ASSERT(rx);
   10fa8:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 11158 <rx_demux+0x1bc>
   10fac:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 1115c <rx_demux+0x1c0>
{
   10fb0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   10fb2:	e9d8 0100 	ldrd	r0, r1, [r8]
   10fb6:	aa03      	add	r2, sp, #12
   10fb8:	f7fd f88a 	bl	e0d0 <memq_peek>
		if (link) {
   10fbc:	4605      	mov	r5, r0
   10fbe:	2800      	cmp	r0, #0
   10fc0:	d035      	beq.n	1102e <rx_demux+0x92>
			LL_ASSERT(rx);
   10fc2:	9b03      	ldr	r3, [sp, #12]
   10fc4:	2b00      	cmp	r3, #0
   10fc6:	f000 80a6 	beq.w	11116 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   10fca:	7818      	ldrb	r0, [r3, #0]
   10fcc:	aa04      	add	r2, sp, #16
   10fce:	a902      	add	r1, sp, #8
   10fd0:	f002 fb26 	bl	13620 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   10fd4:	4604      	mov	r4, r0
   10fd6:	2800      	cmp	r0, #0
   10fd8:	d055      	beq.n	11086 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   10fda:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   10fde:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   10fe2:	780f      	ldrb	r7, [r1, #0]
   10fe4:	f8ad 200a 	strh.w	r2, [sp, #10]
   10fe8:	ae05      	add	r6, sp, #20
   10fea:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   10fec:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   10ff0:	f002 fb30 	bl	13654 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   10ff4:	4621      	mov	r1, r4
   10ff6:	9a05      	ldr	r2, [sp, #20]
   10ff8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   10ffc:	f002 fb72 	bl	136e4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   11000:	4620      	mov	r0, r4
   11002:	f002 fae5 	bl	135d0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   11006:	4632      	mov	r2, r6
   11008:	4629      	mov	r1, r5
   1100a:	4638      	mov	r0, r7
   1100c:	f002 fb08 	bl	13620 <ull_conn_ack_by_last_peek>
	} while (link);
   11010:	4604      	mov	r4, r0
   11012:	2800      	cmp	r0, #0
   11014:	d1ec      	bne.n	10ff0 <rx_demux+0x54>
	k_sem_give(sem_recv);
   11016:	f8d9 0000 	ldr.w	r0, [r9]
   1101a:	f00e fe87 	bl	1fd2c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1101e:	e9d8 0100 	ldrd	r0, r1, [r8]
   11022:	aa03      	add	r2, sp, #12
   11024:	f7fd f854 	bl	e0d0 <memq_peek>
		if (link) {
   11028:	4605      	mov	r5, r0
   1102a:	2800      	cmp	r0, #0
   1102c:	d1c9      	bne.n	10fc2 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1102e:	aa04      	add	r2, sp, #16
   11030:	a902      	add	r1, sp, #8
   11032:	f10d 0007 	add.w	r0, sp, #7
   11036:	f002 fad7 	bl	135e8 <ull_conn_ack_peek>
			if (link) {
   1103a:	4604      	mov	r4, r0
   1103c:	2800      	cmp	r0, #0
   1103e:	d067      	beq.n	11110 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   11040:	9b04      	ldr	r3, [sp, #16]
   11042:	9305      	str	r3, [sp, #20]
   11044:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   11048:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1104c:	f8ad 300a 	strh.w	r3, [sp, #10]
   11050:	ae05      	add	r6, sp, #20
   11052:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   11056:	f002 fafd 	bl	13654 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1105a:	4621      	mov	r1, r4
   1105c:	9a05      	ldr	r2, [sp, #20]
   1105e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   11062:	f002 fb3f 	bl	136e4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   11066:	4620      	mov	r0, r4
   11068:	f002 fab2 	bl	135d0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1106c:	4632      	mov	r2, r6
   1106e:	4629      	mov	r1, r5
   11070:	4638      	mov	r0, r7
   11072:	f002 fad5 	bl	13620 <ull_conn_ack_by_last_peek>
	} while (link);
   11076:	4604      	mov	r4, r0
   11078:	2800      	cmp	r0, #0
   1107a:	d1ec      	bne.n	11056 <rx_demux+0xba>
	k_sem_give(sem_recv);
   1107c:	f8d9 0000 	ldr.w	r0, [r9]
   11080:	f00e fe54 	bl	1fd2c <z_impl_k_sem_give>
	} while (link);
   11084:	e7cb      	b.n	1101e <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   11086:	9b03      	ldr	r3, [sp, #12]
   11088:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1108a:	791b      	ldrb	r3, [r3, #4]
   1108c:	3b01      	subs	r3, #1
   1108e:	2b17      	cmp	r3, #23
   11090:	d80d      	bhi.n	110ae <rx_demux+0x112>
   11092:	e8df f003 	tbb	[pc, r3]
   11096:	0c1a      	.short	0x0c1a
   11098:	0c0c0c38 	.word	0x0c0c0c38
   1109c:	0c0c0c0c 	.word	0x0c0c0c0c
   110a0:	0c0c0c0c 	.word	0x0c0c0c0c
   110a4:	0c0c0c0c 	.word	0x0c0c0c0c
   110a8:	0c0c0c0c 	.word	0x0c0c0c0c
   110ac:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
   110ae:	4a2a      	ldr	r2, [pc, #168]	; (11158 <rx_demux+0x1bc>)
   110b0:	492b      	ldr	r1, [pc, #172]	; (11160 <rx_demux+0x1c4>)
   110b2:	482c      	ldr	r0, [pc, #176]	; (11164 <rx_demux+0x1c8>)
   110b4:	f640 3356 	movw	r3, #2902	; 0xb56
   110b8:	f010 fb48 	bl	2174c <assert_print>
   110bc:	4040      	eors	r0, r0
   110be:	f380 8811 	msr	BASEPRI, r0
   110c2:	f04f 0003 	mov.w	r0, #3
   110c6:	df02      	svc	2
			if (nack) {
   110c8:	e773      	b.n	10fb2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   110ca:	4921      	ldr	r1, [pc, #132]	; (11150 <rx_demux+0x1b4>)
   110cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   110d0:	2200      	movs	r2, #0
   110d2:	f7fd f805 	bl	e0e0 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   110d6:	4b24      	ldr	r3, [pc, #144]	; (11168 <rx_demux+0x1cc>)
		ll_rx_put_sched(link, rx);
   110d8:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   110da:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   110dc:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   110de:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   110e0:	4a22      	ldr	r2, [pc, #136]	; (1116c <rx_demux+0x1d0>)
   110e2:	f7fc ffeb 	bl	e0bc <memq_enqueue>
	k_sem_give(sem_recv);
   110e6:	4b1b      	ldr	r3, [pc, #108]	; (11154 <rx_demux+0x1b8>)
   110e8:	6818      	ldr	r0, [r3, #0]
   110ea:	f00e fe1f 	bl	1fd2c <z_impl_k_sem_give>
			if (nack) {
   110ee:	e760      	b.n	10fb2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   110f0:	4917      	ldr	r1, [pc, #92]	; (11150 <rx_demux+0x1b4>)
   110f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   110f6:	2200      	movs	r2, #0
   110f8:	f7fc fff2 	bl	e0e0 <memq_dequeue>
		ull_conn_setup(link, rx);
   110fc:	9905      	ldr	r1, [sp, #20]
   110fe:	4628      	mov	r0, r5
   11100:	f002 f8c4 	bl	1328c <ull_conn_setup>
			if (nack) {
   11104:	e755      	b.n	10fb2 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   11106:	a905      	add	r1, sp, #20
   11108:	4628      	mov	r0, r5
   1110a:	f002 f8e7 	bl	132dc <ull_conn_rx>
		if (nack) {
   1110e:	b188      	cbz	r0, 11134 <rx_demux+0x198>
}
   11110:	b007      	add	sp, #28
   11112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   11116:	4813      	ldr	r0, [pc, #76]	; (11164 <rx_demux+0x1c8>)
   11118:	f640 1395 	movw	r3, #2453	; 0x995
   1111c:	465a      	mov	r2, fp
   1111e:	4651      	mov	r1, sl
   11120:	f010 fb14 	bl	2174c <assert_print>
   11124:	4040      	eors	r0, r0
   11126:	f380 8811 	msr	BASEPRI, r0
   1112a:	f04f 0003 	mov.w	r0, #3
   1112e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   11130:	9b03      	ldr	r3, [sp, #12]
   11132:	e74a      	b.n	10fca <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11134:	4906      	ldr	r1, [pc, #24]	; (11150 <rx_demux+0x1b4>)
   11136:	4602      	mov	r2, r0
   11138:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1113c:	f7fc ffd0 	bl	e0e0 <memq_dequeue>
		if (rx) {
   11140:	9905      	ldr	r1, [sp, #20]
   11142:	2900      	cmp	r1, #0
   11144:	f43f af35 	beq.w	10fb2 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11148:	4b07      	ldr	r3, [pc, #28]	; (11168 <rx_demux+0x1cc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1114a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1114c:	795b      	ldrb	r3, [r3, #5]
   1114e:	e7c6      	b.n	110de <rx_demux+0x142>
   11150:	20002968 	.word	0x20002968
   11154:	20002c18 	.word	0x20002c18
   11158:	000289fc 	.word	0x000289fc
   1115c:	00028a68 	.word	0x00028a68
   11160:	000286fc 	.word	0x000286fc
   11164:	0002866c 	.word	0x0002866c
   11168:	20000348 	.word	0x20000348
   1116c:	20002964 	.word	0x20002964

00011170 <ll_rx_get>:
{
   11170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   11174:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 11244 <ll_rx_get+0xd4>
   11178:	4f33      	ldr	r7, [pc, #204]	; (11248 <ll_rx_get+0xd8>)
{
   1117a:	b082      	sub	sp, #8
   1117c:	4680      	mov	r8, r0
   1117e:	4689      	mov	r9, r1
			f = mfifo_tx_ack.f;
   11180:	f1aa 0504 	sub.w	r5, sl, #4
	*node_rx = NULL;
   11184:	2300      	movs	r3, #0
   11186:	f8c8 3000 	str.w	r3, [r8]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1118a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1118e:	aa01      	add	r2, sp, #4
   11190:	f7fc ff9e 	bl	e0d0 <memq_peek>
	if (link) {
   11194:	4606      	mov	r6, r0
   11196:	2800      	cmp	r0, #0
   11198:	d042      	beq.n	11220 <ll_rx_get+0xb0>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1119a:	9b01      	ldr	r3, [sp, #4]
   1119c:	4651      	mov	r1, sl
   1119e:	781a      	ldrb	r2, [r3, #0]
   111a0:	4648      	mov	r0, r9
   111a2:	f7ff fd8f 	bl	10cc4 <tx_cmplt_get>
		if (!cmplt) {
   111a6:	4603      	mov	r3, r0
   111a8:	2800      	cmp	r0, #0
   111aa:	d140      	bne.n	1122e <ll_rx_get+0xbe>
			f = mfifo_tx_ack.f;
   111ac:	792a      	ldrb	r2, [r5, #4]
   111ae:	f88d 2001 	strb.w	r2, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   111b2:	796a      	ldrb	r2, [r5, #5]
   111b4:	f10d 0101 	add.w	r1, sp, #1
   111b8:	f10d 0002 	add.w	r0, sp, #2
   111bc:	461c      	mov	r4, r3
   111be:	f7ff fd81 	bl	10cc4 <tx_cmplt_get>
   111c2:	ea44 0200 	orr.w	r2, r4, r0
			} while ((cmplt_prev != 0U) ||
   111c6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   111ca:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   111cc:	d1f1      	bne.n	111b2 <ll_rx_get+0x42>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   111ce:	9b01      	ldr	r3, [sp, #4]
   111d0:	7919      	ldrb	r1, [r3, #4]
   111d2:	2901      	cmp	r1, #1
   111d4:	d12f      	bne.n	11236 <ll_rx_get+0xc6>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   111d6:	4c1d      	ldr	r4, [pc, #116]	; (1124c <ll_rx_get+0xdc>)
	(void)memq_dequeue(memq_ll_rx.tail,
   111d8:	6878      	ldr	r0, [r7, #4]
   111da:	4639      	mov	r1, r7
   111dc:	f7fc ff80 	bl	e0e0 <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
   111e0:	1d21      	adds	r1, r4, #4
   111e2:	4630      	mov	r0, r6
   111e4:	f7fc ff20 	bl	e028 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   111e8:	8823      	ldrh	r3, [r4, #0]
   111ea:	2b05      	cmp	r3, #5
   111ec:	d809      	bhi.n	11202 <ll_rx_get+0x92>
	mem_release(node_rx, &mem_pdu_rx.free);
   111ee:	9801      	ldr	r0, [sp, #4]
   111f0:	4917      	ldr	r1, [pc, #92]	; (11250 <ll_rx_get+0xe0>)
	mem_link_rx.quota_pdu += delta;
   111f2:	3301      	adds	r3, #1
   111f4:	8023      	strh	r3, [r4, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
   111f6:	f7fc ff17 	bl	e028 <mem_release>
	rx_replenish(1U);
   111fa:	2001      	movs	r0, #1
   111fc:	f7ff fdbc 	bl	10d78 <rx_replenish>
				goto ll_rx_get_again;
   11200:	e7c0      	b.n	11184 <ll_rx_get+0x14>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   11202:	4a14      	ldr	r2, [pc, #80]	; (11254 <ll_rx_get+0xe4>)
   11204:	4914      	ldr	r1, [pc, #80]	; (11258 <ll_rx_get+0xe8>)
   11206:	4815      	ldr	r0, [pc, #84]	; (1125c <ll_rx_get+0xec>)
   11208:	f44f 63d1 	mov.w	r3, #1672	; 0x688
   1120c:	f010 fa9e 	bl	2174c <assert_print>
   11210:	4040      	eors	r0, r0
   11212:	f380 8811 	msr	BASEPRI, r0
   11216:	f04f 0003 	mov.w	r0, #3
   1121a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1121c:	8823      	ldrh	r3, [r4, #0]
   1121e:	e7e6      	b.n	111ee <ll_rx_get+0x7e>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   11220:	490f      	ldr	r1, [pc, #60]	; (11260 <ll_rx_get+0xf0>)
   11222:	4648      	mov	r0, r9
   11224:	794a      	ldrb	r2, [r1, #5]
   11226:	3104      	adds	r1, #4
   11228:	f7ff fd4c 	bl	10cc4 <tx_cmplt_get>
   1122c:	4603      	mov	r3, r0
}
   1122e:	4618      	mov	r0, r3
   11230:	b002      	add	sp, #8
   11232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*node_rx = rx;
   11236:	f8c8 3000 	str.w	r3, [r8]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1123a:	4613      	mov	r3, r2
}
   1123c:	4618      	mov	r0, r3
   1123e:	b002      	add	sp, #8
   11240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11244:	2000034c 	.word	0x2000034c
   11248:	20002960 	.word	0x20002960
   1124c:	20002970 	.word	0x20002970
   11250:	200029c8 	.word	0x200029c8
   11254:	000289fc 	.word	0x000289fc
   11258:	00028a6c 	.word	0x00028a6c
   1125c:	0002866c 	.word	0x0002866c
   11260:	20000348 	.word	0x20000348

00011264 <ll_rx_dequeue>:
{
   11264:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11266:	495a      	ldr	r1, [pc, #360]	; (113d0 <ll_rx_dequeue+0x16c>)
{
   11268:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   1126a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1126c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1126e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11270:	aa01      	add	r2, sp, #4
   11272:	f7fc ff35 	bl	e0e0 <memq_dequeue>
	LL_ASSERT(link);
   11276:	4604      	mov	r4, r0
   11278:	2800      	cmp	r0, #0
   1127a:	d05c      	beq.n	11336 <ll_rx_dequeue+0xd2>
	mem_release(link, &mem_link_rx.free);
   1127c:	4955      	ldr	r1, [pc, #340]	; (113d4 <ll_rx_dequeue+0x170>)
   1127e:	4620      	mov	r0, r4
   11280:	f7fc fed2 	bl	e028 <mem_release>
	switch (rx->type) {
   11284:	9a01      	ldr	r2, [sp, #4]
   11286:	7913      	ldrb	r3, [r2, #4]
   11288:	2b1d      	cmp	r3, #29
   1128a:	d810      	bhi.n	112ae <ll_rx_dequeue+0x4a>
   1128c:	e8df f003 	tbb	[pc, r3]
   11290:	1e0f0f1e 	.word	0x1e0f0f1e
   11294:	0f0f0f0f 	.word	0x0f0f0f0f
   11298:	0f0f0f0f 	.word	0x0f0f0f0f
   1129c:	0f0f0f0f 	.word	0x0f0f0f0f
   112a0:	0f0f0f0f 	.word	0x0f0f0f0f
   112a4:	2f0f0f0f 	.word	0x2f0f0f0f
   112a8:	1e1e1e1e 	.word	0x1e1e1e1e
   112ac:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
   112ae:	4a4a      	ldr	r2, [pc, #296]	; (113d8 <ll_rx_dequeue+0x174>)
   112b0:	494a      	ldr	r1, [pc, #296]	; (113dc <ll_rx_dequeue+0x178>)
   112b2:	484b      	ldr	r0, [pc, #300]	; (113e0 <ll_rx_dequeue+0x17c>)
   112b4:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   112b8:	f010 fa48 	bl	2174c <assert_print>
   112bc:	4040      	eors	r0, r0
   112be:	f380 8811 	msr	BASEPRI, r0
   112c2:	f04f 0003 	mov.w	r0, #3
   112c6:	df02      	svc	2
}
   112c8:	b002      	add	sp, #8
   112ca:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   112cc:	2b00      	cmp	r3, #0
   112ce:	d1fb      	bne.n	112c8 <ll_rx_dequeue+0x64>
   112d0:	4a41      	ldr	r2, [pc, #260]	; (113d8 <ll_rx_dequeue+0x174>)
   112d2:	4944      	ldr	r1, [pc, #272]	; (113e4 <ll_rx_dequeue+0x180>)
   112d4:	4842      	ldr	r0, [pc, #264]	; (113e0 <ll_rx_dequeue+0x17c>)
   112d6:	f240 533c 	movw	r3, #1340	; 0x53c
   112da:	f010 fa37 	bl	2174c <assert_print>
   112de:	4040      	eors	r0, r0
   112e0:	f380 8811 	msr	BASEPRI, r0
   112e4:	f04f 0003 	mov.w	r0, #3
   112e8:	df02      	svc	2
}
   112ea:	b002      	add	sp, #8
   112ec:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   112ee:	7f13      	ldrb	r3, [r2, #28]
   112f0:	2b3c      	cmp	r3, #60	; 0x3c
   112f2:	d02e      	beq.n	11352 <ll_rx_dequeue+0xee>
   112f4:	7f53      	ldrb	r3, [r2, #29]
   112f6:	b183      	cbz	r3, 1131a <ll_rx_dequeue+0xb6>
			adv = HDR_LLL2ULL(lll);
   112f8:	6893      	ldr	r3, [r2, #8]
   112fa:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   112fc:	6e60      	ldr	r0, [r4, #100]	; 0x64
   112fe:	b120      	cbz	r0, 1130a <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   11300:	2300      	movs	r3, #0
	mem_release(node_rx, &mem_pdu_rx.free);
   11302:	4939      	ldr	r1, [pc, #228]	; (113e8 <ll_rx_dequeue+0x184>)
					adv->node_rx_cc_free = NULL;
   11304:	6663      	str	r3, [r4, #100]	; 0x64
	mem_release(node_rx, &mem_pdu_rx.free);
   11306:	f7fc fe8f 	bl	e028 <mem_release>
			adv->is_enabled = 0U;
   1130a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1130e:	f36f 0300 	bfc	r3, #0, #1
   11312:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
   11316:	b002      	add	sp, #8
   11318:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   1131a:	4a2f      	ldr	r2, [pc, #188]	; (113d8 <ll_rx_dequeue+0x174>)
   1131c:	492f      	ldr	r1, [pc, #188]	; (113dc <ll_rx_dequeue+0x178>)
   1131e:	4830      	ldr	r0, [pc, #192]	; (113e0 <ll_rx_dequeue+0x17c>)
   11320:	f240 43c5 	movw	r3, #1221	; 0x4c5
   11324:	f010 fa12 	bl	2174c <assert_print>
   11328:	4040      	eors	r0, r0
   1132a:	f380 8811 	msr	BASEPRI, r0
   1132e:	f04f 0003 	mov.w	r0, #3
   11332:	df02      	svc	2
   11334:	e7c8      	b.n	112c8 <ll_rx_dequeue+0x64>
	LL_ASSERT(link);
   11336:	4a28      	ldr	r2, [pc, #160]	; (113d8 <ll_rx_dequeue+0x174>)
   11338:	492c      	ldr	r1, [pc, #176]	; (113ec <ll_rx_dequeue+0x188>)
   1133a:	4829      	ldr	r0, [pc, #164]	; (113e0 <ll_rx_dequeue+0x17c>)
   1133c:	f44f 6381 	mov.w	r3, #1032	; 0x408
   11340:	f010 fa04 	bl	2174c <assert_print>
   11344:	4040      	eors	r0, r0
   11346:	f380 8811 	msr	BASEPRI, r0
   1134a:	f04f 0003 	mov.w	r0, #3
   1134e:	df02      	svc	2
   11350:	e794      	b.n	1127c <ll_rx_dequeue+0x18>
			lll = ftr->param;
   11352:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   11354:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   11358:	b1ed      	cbz	r5, 11396 <ll_rx_dequeue+0x132>
				lll->conn = NULL;
   1135a:	2300      	movs	r3, #0
   1135c:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   1135e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   11360:	b163      	cbz	r3, 1137c <ll_rx_dequeue+0x118>
   11362:	4a1d      	ldr	r2, [pc, #116]	; (113d8 <ll_rx_dequeue+0x174>)
   11364:	4922      	ldr	r1, [pc, #136]	; (113f0 <ll_rx_dequeue+0x18c>)
   11366:	481e      	ldr	r0, [pc, #120]	; (113e0 <ll_rx_dequeue+0x17c>)
   11368:	f240 4381 	movw	r3, #1153	; 0x481
   1136c:	f010 f9ee 	bl	2174c <assert_print>
   11370:	4040      	eors	r0, r0
   11372:	f380 8811 	msr	BASEPRI, r0
   11376:	f04f 0003 	mov.w	r0, #3
   1137a:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1137c:	f105 0160 	add.w	r1, r5, #96	; 0x60
   11380:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   11384:	f7fc fe90 	bl	e0a8 <memq_deinit>
				LL_ASSERT(link);
   11388:	4606      	mov	r6, r0
   1138a:	b190      	cbz	r0, 113b2 <ll_rx_dequeue+0x14e>
				ll_conn_release(conn);
   1138c:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   1138e:	66ee      	str	r6, [r5, #108]	; 0x6c
				ll_conn_release(conn);
   11390:	f001 fcec 	bl	12d6c <ll_conn_release>
   11394:	e7b9      	b.n	1130a <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   11396:	4a10      	ldr	r2, [pc, #64]	; (113d8 <ll_rx_dequeue+0x174>)
   11398:	4916      	ldr	r1, [pc, #88]	; (113f4 <ll_rx_dequeue+0x190>)
   1139a:	4811      	ldr	r0, [pc, #68]	; (113e0 <ll_rx_dequeue+0x17c>)
   1139c:	f240 437e 	movw	r3, #1150	; 0x47e
   113a0:	f010 f9d4 	bl	2174c <assert_print>
   113a4:	4040      	eors	r0, r0
   113a6:	f380 8811 	msr	BASEPRI, r0
   113aa:	f04f 0003 	mov.w	r0, #3
   113ae:	df02      	svc	2
   113b0:	e7d3      	b.n	1135a <ll_rx_dequeue+0xf6>
				LL_ASSERT(link);
   113b2:	4a09      	ldr	r2, [pc, #36]	; (113d8 <ll_rx_dequeue+0x174>)
   113b4:	490d      	ldr	r1, [pc, #52]	; (113ec <ll_rx_dequeue+0x188>)
   113b6:	480a      	ldr	r0, [pc, #40]	; (113e0 <ll_rx_dequeue+0x17c>)
   113b8:	f240 4384 	movw	r3, #1156	; 0x484
   113bc:	f010 f9c6 	bl	2174c <assert_print>
   113c0:	4040      	eors	r0, r0
   113c2:	f380 8811 	msr	BASEPRI, r0
   113c6:	f04f 0003 	mov.w	r0, #3
   113ca:	df02      	svc	2
   113cc:	e7de      	b.n	1138c <ll_rx_dequeue+0x128>
   113ce:	bf00      	nop
   113d0:	20002960 	.word	0x20002960
   113d4:	20002974 	.word	0x20002974
   113d8:	000289fc 	.word	0x000289fc
   113dc:	000286fc 	.word	0x000286fc
   113e0:	0002866c 	.word	0x0002866c
   113e4:	00028ad0 	.word	0x00028ad0
   113e8:	200029c8 	.word	0x200029c8
   113ec:	00028d9c 	.word	0x00028d9c
   113f0:	00028ab8 	.word	0x00028ab8
   113f4:	00028aac 	.word	0x00028aac

000113f8 <ll_rx_mem_release>:
{
   113f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   113fc:	6804      	ldr	r4, [r0, #0]
{
   113fe:	4680      	mov	r8, r0
	while (rx) {
   11400:	b344      	cbz	r4, 11454 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   11402:	4f57      	ldr	r7, [pc, #348]	; (11560 <ll_rx_mem_release+0x168>)
   11404:	f8df 915c 	ldr.w	r9, [pc, #348]	; 11564 <ll_rx_mem_release+0x16c>
   11408:	4e57      	ldr	r6, [pc, #348]	; (11568 <ll_rx_mem_release+0x170>)
		rx = rx->next;
   1140a:	4625      	mov	r5, r4
   1140c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   1140e:	792b      	ldrb	r3, [r5, #4]
   11410:	2b1d      	cmp	r3, #29
   11412:	d810      	bhi.n	11436 <ll_rx_mem_release+0x3e>
   11414:	e8df f003 	tbb	[pc, r3]
   11418:	380f0f38 	.word	0x380f0f38
   1141c:	0f0f0f0f 	.word	0x0f0f0f0f
   11420:	0f0f0f0f 	.word	0x0f0f0f0f
   11424:	0f0f0f0f 	.word	0x0f0f0f0f
   11428:	0f0f0f0f 	.word	0x0f0f0f0f
   1142c:	260f0f0f 	.word	0x260f0f0f
   11430:	38383856 	.word	0x38383856
   11434:	3838      	.short	0x3838
			LL_ASSERT(0);
   11436:	f240 637c 	movw	r3, #1660	; 0x67c
   1143a:	463a      	mov	r2, r7
   1143c:	4649      	mov	r1, r9
   1143e:	4630      	mov	r0, r6
   11440:	f010 f984 	bl	2174c <assert_print>
   11444:	4040      	eors	r0, r0
   11446:	f380 8811 	msr	BASEPRI, r0
   1144a:	f04f 0003 	mov.w	r0, #3
   1144e:	df02      	svc	2
	while (rx) {
   11450:	2c00      	cmp	r4, #0
   11452:	d1da      	bne.n	1140a <ll_rx_mem_release+0x12>
	*node_rx = rx;
   11454:	2300      	movs	r3, #0
   11456:	f8c8 3000 	str.w	r3, [r8]
}
   1145a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
   1145e:	20ff      	movs	r0, #255	; 0xff
   11460:	f7ff bc8a 	b.w	10d78 <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   11464:	7f2b      	ldrb	r3, [r5, #28]
   11466:	2b3c      	cmp	r3, #60	; 0x3c
   11468:	d063      	beq.n	11532 <ll_rx_mem_release+0x13a>
				LL_ASSERT(!cc->status);
   1146a:	b1db      	cbz	r3, 114a4 <ll_rx_mem_release+0xac>
   1146c:	4a3c      	ldr	r2, [pc, #240]	; (11560 <ll_rx_mem_release+0x168>)
   1146e:	493f      	ldr	r1, [pc, #252]	; (1156c <ll_rx_mem_release+0x174>)
   11470:	483d      	ldr	r0, [pc, #244]	; (11568 <ll_rx_mem_release+0x170>)
   11472:	f240 53a4 	movw	r3, #1444	; 0x5a4
   11476:	f010 f969 	bl	2174c <assert_print>
   1147a:	4040      	eors	r0, r0
   1147c:	f380 8811 	msr	BASEPRI, r0
   11480:	f04f 0003 	mov.w	r0, #3
   11484:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   11486:	792b      	ldrb	r3, [r5, #4]
   11488:	b963      	cbnz	r3, 114a4 <ll_rx_mem_release+0xac>
   1148a:	4939      	ldr	r1, [pc, #228]	; (11570 <ll_rx_mem_release+0x178>)
   1148c:	f240 53fa 	movw	r3, #1530	; 0x5fa
   11490:	463a      	mov	r2, r7
   11492:	4630      	mov	r0, r6
   11494:	f010 f95a 	bl	2174c <assert_print>
   11498:	4040      	eors	r0, r0
   1149a:	f380 8811 	msr	BASEPRI, r0
   1149e:	f04f 0003 	mov.w	r0, #3
   114a2:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   114a4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 11574 <ll_rx_mem_release+0x17c>
   114a8:	f8ba 3000 	ldrh.w	r3, [sl]
   114ac:	2b05      	cmp	r3, #5
   114ae:	d830      	bhi.n	11512 <ll_rx_mem_release+0x11a>
	mem_link_rx.quota_pdu += delta;
   114b0:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
   114b2:	4931      	ldr	r1, [pc, #196]	; (11578 <ll_rx_mem_release+0x180>)
	mem_link_rx.quota_pdu += delta;
   114b4:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
   114b8:	4628      	mov	r0, r5
   114ba:	f7fc fdb5 	bl	e028 <mem_release>
	while (rx) {
   114be:	2c00      	cmp	r4, #0
   114c0:	d1a3      	bne.n	1140a <ll_rx_mem_release+0x12>
   114c2:	e7c7      	b.n	11454 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   114c4:	88e8      	ldrh	r0, [r5, #6]
   114c6:	2800      	cmp	r0, #0
   114c8:	d1c2      	bne.n	11450 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   114ca:	f001 fc5d 	bl	12d88 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   114ce:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
				conn = ll_conn_get(rx_free->handle);
   114d2:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   114d4:	b163      	cbz	r3, 114f0 <ll_rx_mem_release+0xf8>
   114d6:	4a22      	ldr	r2, [pc, #136]	; (11560 <ll_rx_mem_release+0x168>)
   114d8:	4928      	ldr	r1, [pc, #160]	; (1157c <ll_rx_mem_release+0x184>)
   114da:	4823      	ldr	r0, [pc, #140]	; (11568 <ll_rx_mem_release+0x170>)
   114dc:	f240 636b 	movw	r3, #1643	; 0x66b
   114e0:	f010 f934 	bl	2174c <assert_print>
   114e4:	4040      	eors	r0, r0
   114e6:	f380 8811 	msr	BASEPRI, r0
   114ea:	f04f 0003 	mov.w	r0, #3
   114ee:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   114f0:	f105 017c 	add.w	r1, r5, #124	; 0x7c
   114f4:	f105 0078 	add.w	r0, r5, #120	; 0x78
   114f8:	f7fc fdd6 	bl	e0a8 <memq_deinit>
				LL_ASSERT(link);
   114fc:	4682      	mov	sl, r0
   114fe:	b300      	cbz	r0, 11542 <ll_rx_mem_release+0x14a>
				conn->lll.link_tx_free = link;
   11500:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
				ll_conn_release(conn);
   11504:	4628      	mov	r0, r5
   11506:	f001 fc31 	bl	12d6c <ll_conn_release>
	while (rx) {
   1150a:	2c00      	cmp	r4, #0
   1150c:	f47f af7d 	bne.w	1140a <ll_rx_mem_release+0x12>
   11510:	e7a0      	b.n	11454 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   11512:	491b      	ldr	r1, [pc, #108]	; (11580 <ll_rx_mem_release+0x188>)
   11514:	f44f 63d1 	mov.w	r3, #1672	; 0x688
   11518:	463a      	mov	r2, r7
   1151a:	4630      	mov	r0, r6
   1151c:	f010 f916 	bl	2174c <assert_print>
   11520:	4040      	eors	r0, r0
   11522:	f380 8811 	msr	BASEPRI, r0
   11526:	f04f 0003 	mov.w	r0, #3
   1152a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1152c:	f8ba 3000 	ldrh.w	r3, [sl]
   11530:	e7be      	b.n	114b0 <ll_rx_mem_release+0xb8>
	mem_release(node_rx, &mem_pdu_rx.free);
   11532:	4911      	ldr	r1, [pc, #68]	; (11578 <ll_rx_mem_release+0x180>)
   11534:	4628      	mov	r0, r5
   11536:	f7fc fd77 	bl	e028 <mem_release>
	while (rx) {
   1153a:	2c00      	cmp	r4, #0
   1153c:	f47f af65 	bne.w	1140a <ll_rx_mem_release+0x12>
   11540:	e788      	b.n	11454 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   11542:	4a07      	ldr	r2, [pc, #28]	; (11560 <ll_rx_mem_release+0x168>)
   11544:	490f      	ldr	r1, [pc, #60]	; (11584 <ll_rx_mem_release+0x18c>)
   11546:	4808      	ldr	r0, [pc, #32]	; (11568 <ll_rx_mem_release+0x170>)
   11548:	f240 636e 	movw	r3, #1646	; 0x66e
   1154c:	f010 f8fe 	bl	2174c <assert_print>
   11550:	4040      	eors	r0, r0
   11552:	f380 8811 	msr	BASEPRI, r0
   11556:	f04f 0003 	mov.w	r0, #3
   1155a:	df02      	svc	2
   1155c:	e7d0      	b.n	11500 <ll_rx_mem_release+0x108>
   1155e:	bf00      	nop
   11560:	000289fc 	.word	0x000289fc
   11564:	000286fc 	.word	0x000286fc
   11568:	0002866c 	.word	0x0002866c
   1156c:	00028af0 	.word	0x00028af0
   11570:	00028afc 	.word	0x00028afc
   11574:	20002970 	.word	0x20002970
   11578:	200029c8 	.word	0x200029c8
   1157c:	00028b20 	.word	0x00028b20
   11580:	00028a6c 	.word	0x00028a6c
   11584:	00028d9c 	.word	0x00028d9c

00011588 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   11588:	4801      	ldr	r0, [pc, #4]	; (11590 <ll_rx_link_alloc+0x8>)
   1158a:	f7fc bd31 	b.w	dff0 <mem_acquire>
   1158e:	bf00      	nop
   11590:	20002974 	.word	0x20002974

00011594 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   11594:	4901      	ldr	r1, [pc, #4]	; (1159c <ll_rx_link_release+0x8>)
   11596:	f7fc bd47 	b.w	e028 <mem_release>
   1159a:	bf00      	nop
   1159c:	20002974 	.word	0x20002974

000115a0 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   115a0:	4801      	ldr	r0, [pc, #4]	; (115a8 <ll_rx_alloc+0x8>)
   115a2:	f7fc bd25 	b.w	dff0 <mem_acquire>
   115a6:	bf00      	nop
   115a8:	200029c8 	.word	0x200029c8

000115ac <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   115ac:	4901      	ldr	r1, [pc, #4]	; (115b4 <ll_rx_release+0x8>)
   115ae:	f7fc bd3b 	b.w	e028 <mem_release>
   115b2:	bf00      	nop
   115b4:	200029c8 	.word	0x200029c8

000115b8 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   115b8:	4b02      	ldr	r3, [pc, #8]	; (115c4 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   115ba:	4a03      	ldr	r2, [pc, #12]	; (115c8 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   115bc:	795b      	ldrb	r3, [r3, #5]
   115be:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   115c0:	f7fc bd7c 	b.w	e0bc <memq_enqueue>
   115c4:	20000348 	.word	0x20000348
   115c8:	20002964 	.word	0x20002964

000115cc <ll_rx_put_sched>:
{
   115cc:	b508      	push	{r3, lr}
	rx_hdr->ack_last = mfifo_tx_ack.l;
   115ce:	4b06      	ldr	r3, [pc, #24]	; (115e8 <ll_rx_put_sched+0x1c>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   115d0:	4a06      	ldr	r2, [pc, #24]	; (115ec <ll_rx_put_sched+0x20>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   115d2:	795b      	ldrb	r3, [r3, #5]
   115d4:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   115d6:	f7fc fd71 	bl	e0bc <memq_enqueue>
	k_sem_give(sem_recv);
   115da:	4b05      	ldr	r3, [pc, #20]	; (115f0 <ll_rx_put_sched+0x24>)
   115dc:	6818      	ldr	r0, [r3, #0]
}
   115de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   115e2:	f00e bba3 	b.w	1fd2c <z_impl_k_sem_give>
   115e6:	bf00      	nop
   115e8:	20000348 	.word	0x20000348
   115ec:	20002964 	.word	0x20002964
   115f0:	20002c18 	.word	0x20002c18

000115f4 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   115f4:	490e      	ldr	r1, [pc, #56]	; (11630 <ll_pdu_rx_alloc_peek+0x3c>)
   115f6:	790b      	ldrb	r3, [r1, #4]
   115f8:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
   115fa:	4293      	cmp	r3, r2
   115fc:	d80d      	bhi.n	1161a <ll_pdu_rx_alloc_peek+0x26>
		return last - first;
   115fe:	eba2 0c03 	sub.w	ip, r2, r3
   11602:	fa5f fc8c 	uxtb.w	ip, ip
   11606:	4560      	cmp	r0, ip
   11608:	d80f      	bhi.n	1162a <ll_pdu_rx_alloc_peek+0x36>
	if (first == last) {
   1160a:	4293      	cmp	r3, r2
   1160c:	d00d      	beq.n	1162a <ll_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1160e:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   11610:	4a08      	ldr	r2, [pc, #32]	; (11634 <ll_pdu_rx_alloc_peek+0x40>)
   11612:	fb13 f301 	smulbb	r3, r3, r1
   11616:	58d0      	ldr	r0, [r2, r3]
   11618:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1161a:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
   1161e:	ebac 0c03 	sub.w	ip, ip, r3
   11622:	4462      	add	r2, ip
   11624:	b2d2      	uxtb	r2, r2
   11626:	4290      	cmp	r0, r2
   11628:	d9f1      	bls.n	1160e <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
   1162a:	2000      	movs	r0, #0
}
   1162c:	4770      	bx	lr
   1162e:	bf00      	nop
   11630:	20000370 	.word	0x20000370
   11634:	20000378 	.word	0x20000378

00011638 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   11638:	4b09      	ldr	r3, [pc, #36]	; (11660 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   1163a:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   1163c:	795a      	ldrb	r2, [r3, #5]
   1163e:	7818      	ldrb	r0, [r3, #0]
   11640:	f893 c002 	ldrb.w	ip, [r3, #2]
   11644:	428a      	cmp	r2, r1
   11646:	d009      	beq.n	1165c <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   11648:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   1164a:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   1164e:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
   11650:	4594      	cmp	ip, r2
   11652:	bf08      	it	eq
   11654:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   11656:	6880      	ldr	r0, [r0, #8]
	}

	*first = _first; /* Write back read-index */
   11658:	711a      	strb	r2, [r3, #4]

	return mem;
   1165a:	4770      	bx	lr
		return NULL;
   1165c:	2000      	movs	r0, #0
}
   1165e:	4770      	bx	lr
   11660:	20000370 	.word	0x20000370

00011664 <ll_tx_ack_put>:
{
   11664:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   11666:	4c14      	ldr	r4, [pc, #80]	; (116b8 <ll_tx_ack_put+0x54>)
   11668:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   1166a:	f894 e002 	ldrb.w	lr, [r4, #2]
   1166e:	f894 c004 	ldrb.w	ip, [r4, #4]
   11672:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   11674:	1c53      	adds	r3, r2, #1
   11676:	b2db      	uxtb	r3, r3
		last = 0U;
   11678:	459e      	cmp	lr, r3
   1167a:	bf08      	it	eq
   1167c:	2300      	moveq	r3, #0
	if (last == first) {
   1167e:	459c      	cmp	ip, r3
   11680:	d009      	beq.n	11696 <ll_tx_ack_put+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11682:	fb12 f205 	smulbb	r2, r2, r5
   11686:	f104 0c08 	add.w	ip, r4, #8
	tx->handle = handle;
   1168a:	f82c 0002 	strh.w	r0, [ip, r2]
   1168e:	4462      	add	r2, ip
	tx->node = node_tx;
   11690:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   11692:	7163      	strb	r3, [r4, #5]
}
   11694:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   11696:	4a09      	ldr	r2, [pc, #36]	; (116bc <ll_tx_ack_put+0x58>)
   11698:	4909      	ldr	r1, [pc, #36]	; (116c0 <ll_tx_ack_put+0x5c>)
   1169a:	480a      	ldr	r0, [pc, #40]	; (116c4 <ll_tx_ack_put+0x60>)
   1169c:	f240 63e2 	movw	r3, #1762	; 0x6e2
   116a0:	f010 f854 	bl	2174c <assert_print>
   116a4:	4040      	eors	r0, r0
   116a6:	f380 8811 	msr	BASEPRI, r0
   116aa:	f04f 0003 	mov.w	r0, #3
   116ae:	df02      	svc	2
	tx->handle = handle;
   116b0:	2300      	movs	r3, #0
   116b2:	801b      	strh	r3, [r3, #0]
   116b4:	deff      	udf	#255	; 0xff
   116b6:	bf00      	nop
   116b8:	20000348 	.word	0x20000348
   116bc:	000289fc 	.word	0x000289fc
   116c0:	00028d90 	.word	0x00028d90
   116c4:	0002866c 	.word	0x0002866c

000116c8 <ull_ticker_status_take>:
	if (ret == TICKER_STATUS_BUSY) {
   116c8:	f030 0302 	bics.w	r3, r0, #2
{
   116cc:	b510      	push	{r4, lr}
   116ce:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
   116d0:	d002      	beq.n	116d8 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   116d2:	680b      	ldr	r3, [r1, #0]
   116d4:	2b02      	cmp	r3, #2
   116d6:	d008      	beq.n	116ea <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   116d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   116dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116e0:	4809      	ldr	r0, [pc, #36]	; (11708 <ull_ticker_status_take+0x40>)
   116e2:	f00e fb49 	bl	1fd78 <z_impl_k_sem_take>
	return *ret_cb;
   116e6:	6820      	ldr	r0, [r4, #0]
}
   116e8:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   116ea:	4a08      	ldr	r2, [pc, #32]	; (1170c <ull_ticker_status_take+0x44>)
   116ec:	4908      	ldr	r1, [pc, #32]	; (11710 <ull_ticker_status_take+0x48>)
   116ee:	4809      	ldr	r0, [pc, #36]	; (11714 <ull_ticker_status_take+0x4c>)
   116f0:	f240 7316 	movw	r3, #1814	; 0x716
   116f4:	f010 f82a 	bl	2174c <assert_print>
   116f8:	4040      	eors	r0, r0
   116fa:	f380 8811 	msr	BASEPRI, r0
   116fe:	f04f 0003 	mov.w	r0, #3
   11702:	df02      	svc	2
   11704:	e7e8      	b.n	116d8 <ull_ticker_status_take+0x10>
   11706:	bf00      	nop
   11708:	20002c1c 	.word	0x20002c1c
   1170c:	000289fc 	.word	0x000289fc
   11710:	00028b40 	.word	0x00028b40
   11714:	0002866c 	.word	0x0002866c

00011718 <ull_disable_mark>:
	if (!*m) {
   11718:	4904      	ldr	r1, [pc, #16]	; (1172c <ull_disable_mark+0x14>)
   1171a:	680a      	ldr	r2, [r1, #0]
   1171c:	b10a      	cbz	r2, 11722 <ull_disable_mark+0xa>
}
   1171e:	4610      	mov	r0, r2
   11720:	4770      	bx	lr
		*m = param;
   11722:	4602      	mov	r2, r0
   11724:	6008      	str	r0, [r1, #0]
}
   11726:	4610      	mov	r0, r2
   11728:	4770      	bx	lr
   1172a:	bf00      	nop
   1172c:	20002950 	.word	0x20002950

00011730 <ull_disable_unmark>:
	if (*m && *m == param) {
   11730:	4a04      	ldr	r2, [pc, #16]	; (11744 <ull_disable_unmark+0x14>)
   11732:	6813      	ldr	r3, [r2, #0]
   11734:	b123      	cbz	r3, 11740 <ull_disable_unmark+0x10>
   11736:	4298      	cmp	r0, r3
		*m = NULL;
   11738:	bf06      	itte	eq
   1173a:	2100      	moveq	r1, #0
   1173c:	6011      	streq	r1, [r2, #0]
	return NULL;
   1173e:	2300      	movne	r3, #0
}
   11740:	4618      	mov	r0, r3
   11742:	4770      	bx	lr
   11744:	20002950 	.word	0x20002950

00011748 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   11748:	4b01      	ldr	r3, [pc, #4]	; (11750 <ull_disable_mark_get+0x8>)
}
   1174a:	6818      	ldr	r0, [r3, #0]
   1174c:	4770      	bx	lr
   1174e:	bf00      	nop
   11750:	20002950 	.word	0x20002950

00011754 <ull_update_mark>:
	if (!*m) {
   11754:	4904      	ldr	r1, [pc, #16]	; (11768 <ull_update_mark+0x14>)
   11756:	680a      	ldr	r2, [r1, #0]
   11758:	b10a      	cbz	r2, 1175e <ull_update_mark+0xa>
}
   1175a:	4610      	mov	r0, r2
   1175c:	4770      	bx	lr
		*m = param;
   1175e:	4602      	mov	r2, r0
   11760:	6008      	str	r0, [r1, #0]
}
   11762:	4610      	mov	r0, r2
   11764:	4770      	bx	lr
   11766:	bf00      	nop
   11768:	20002954 	.word	0x20002954

0001176c <ull_update_unmark>:
	if (*m && *m == param) {
   1176c:	4a04      	ldr	r2, [pc, #16]	; (11780 <ull_update_unmark+0x14>)
   1176e:	6813      	ldr	r3, [r2, #0]
   11770:	b123      	cbz	r3, 1177c <ull_update_unmark+0x10>
   11772:	4298      	cmp	r0, r3
		*m = NULL;
   11774:	bf06      	itte	eq
   11776:	2100      	moveq	r1, #0
   11778:	6011      	streq	r1, [r2, #0]
	return NULL;
   1177a:	2300      	movne	r3, #0
}
   1177c:	4618      	mov	r0, r3
   1177e:	4770      	bx	lr
   11780:	20002954 	.word	0x20002954

00011784 <ull_update_mark_get>:
	return mark_get(mark_update);
   11784:	4b01      	ldr	r3, [pc, #4]	; (1178c <ull_update_mark_get+0x8>)
}
   11786:	6818      	ldr	r0, [r3, #0]
   11788:	4770      	bx	lr
   1178a:	bf00      	nop
   1178c:	20002954 	.word	0x20002954

00011790 <ull_disable>:
{
   11790:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   11792:	6805      	ldr	r5, [r0, #0]
   11794:	782b      	ldrb	r3, [r5, #0]
{
   11796:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   11798:	b353      	cbz	r3, 117f0 <ull_disable+0x60>
	compiler_barrier();
   1179a:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   1179c:	2201      	movs	r2, #1
   1179e:	2100      	movs	r1, #0
   117a0:	4668      	mov	r0, sp
   117a2:	f015 fa6d 	bl	26c80 <z_impl_k_sem_init>
   117a6:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   117a8:	4a13      	ldr	r2, [pc, #76]	; (117f8 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   117aa:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   117ae:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   117b0:	b1f3      	cbz	r3, 117f0 <ull_disable+0x60>
	mfy.param = lll;
   117b2:	4b12      	ldr	r3, [pc, #72]	; (117fc <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   117b4:	2200      	movs	r2, #0
   117b6:	4611      	mov	r1, r2
   117b8:	2003      	movs	r0, #3
	mfy.param = lll;
   117ba:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   117bc:	f7fc fcf4 	bl	e1a8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   117c0:	b940      	cbnz	r0, 117d4 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   117c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   117c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   117ca:	4668      	mov	r0, sp
   117cc:	f00e fad4 	bl	1fd78 <z_impl_k_sem_take>
}
   117d0:	b007      	add	sp, #28
   117d2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   117d4:	4a0a      	ldr	r2, [pc, #40]	; (11800 <ull_disable+0x70>)
   117d6:	490b      	ldr	r1, [pc, #44]	; (11804 <ull_disable+0x74>)
   117d8:	480b      	ldr	r0, [pc, #44]	; (11808 <ull_disable+0x78>)
   117da:	f240 7393 	movw	r3, #1939	; 0x793
   117de:	f00f ffb5 	bl	2174c <assert_print>
   117e2:	4040      	eors	r0, r0
   117e4:	f380 8811 	msr	BASEPRI, r0
   117e8:	f04f 0003 	mov.w	r0, #3
   117ec:	df02      	svc	2
   117ee:	e7e8      	b.n	117c2 <ull_disable+0x32>
		return -EALREADY;
   117f0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   117f4:	e7ec      	b.n	117d0 <ull_disable+0x40>
   117f6:	bf00      	nop
   117f8:	00010cc1 	.word	0x00010cc1
   117fc:	20000328 	.word	0x20000328
   11800:	000289fc 	.word	0x000289fc
   11804:	00028b38 	.word	0x00028b38
   11808:	0002866c 	.word	0x0002866c

0001180c <ull_ticker_stop_with_mark>:
{
   1180c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   1180e:	4e1e      	ldr	r6, [pc, #120]	; (11888 <ull_ticker_stop_with_mark+0x7c>)
   11810:	6833      	ldr	r3, [r6, #0]
{
   11812:	b085      	sub	sp, #20
   11814:	460c      	mov	r4, r1
   11816:	4617      	mov	r7, r2
	if (!*m) {
   11818:	b353      	cbz	r3, 11870 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   1181a:	4299      	cmp	r1, r3
   1181c:	d113      	bne.n	11846 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1181e:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   11820:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11822:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   11824:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11826:	9500      	str	r5, [sp, #0]
   11828:	4b18      	ldr	r3, [pc, #96]	; (1188c <ull_ticker_stop_with_mark+0x80>)
   1182a:	2103      	movs	r1, #3
   1182c:	2000      	movs	r0, #0
   1182e:	f7fd fd89 	bl	f344 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   11832:	4629      	mov	r1, r5
   11834:	f7ff ff48 	bl	116c8 <ull_ticker_status_take>
	if (ret) {
   11838:	4605      	mov	r5, r0
   1183a:	b140      	cbz	r0, 1184e <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   1183c:	6833      	ldr	r3, [r6, #0]
   1183e:	b10b      	cbz	r3, 11844 <ull_ticker_stop_with_mark+0x38>
   11840:	429c      	cmp	r4, r3
   11842:	d017      	beq.n	11874 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   11844:	b1c4      	cbz	r4, 11878 <ull_ticker_stop_with_mark+0x6c>
		return -ENOLCK;
   11846:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   1184a:	b005      	add	sp, #20
   1184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   1184e:	4638      	mov	r0, r7
   11850:	f7ff ff9e 	bl	11790 <ull_disable>
	if (*m && *m == param) {
   11854:	6833      	ldr	r3, [r6, #0]
   11856:	b10b      	cbz	r3, 1185c <ull_ticker_stop_with_mark+0x50>
   11858:	429c      	cmp	r4, r3
   1185a:	d011      	beq.n	11880 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   1185c:	2c00      	cmp	r4, #0
   1185e:	d1f2      	bne.n	11846 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   11860:	2800      	cmp	r0, #0
   11862:	d0f2      	beq.n	1184a <ull_ticker_stop_with_mark+0x3e>
	return 0;
   11864:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11868:	bf08      	it	eq
   1186a:	2000      	moveq	r0, #0
}
   1186c:	b005      	add	sp, #20
   1186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   11870:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   11872:	e7d4      	b.n	1181e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   11874:	2300      	movs	r3, #0
   11876:	6033      	str	r3, [r6, #0]
		return -EALREADY;
   11878:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1187c:	b005      	add	sp, #20
   1187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   11880:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   11882:	2800      	cmp	r0, #0
   11884:	d0e1      	beq.n	1184a <ull_ticker_stop_with_mark+0x3e>
   11886:	e7ed      	b.n	11864 <ull_ticker_stop_with_mark+0x58>
   11888:	20002950 	.word	0x20002950
   1188c:	00010cb5 	.word	0x00010cb5

00011890 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   11890:	490e      	ldr	r1, [pc, #56]	; (118cc <ull_pdu_rx_alloc_peek+0x3c>)
   11892:	790b      	ldrb	r3, [r1, #4]
   11894:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
   11896:	4293      	cmp	r3, r2
   11898:	d80d      	bhi.n	118b6 <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
   1189a:	eba2 0c03 	sub.w	ip, r2, r3
   1189e:	fa5f fc8c 	uxtb.w	ip, ip
   118a2:	4560      	cmp	r0, ip
   118a4:	d80f      	bhi.n	118c6 <ull_pdu_rx_alloc_peek+0x36>
	if (first == last) {
   118a6:	4293      	cmp	r3, r2
   118a8:	d00d      	beq.n	118c6 <ull_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   118aa:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   118ac:	4a08      	ldr	r2, [pc, #32]	; (118d0 <ull_pdu_rx_alloc_peek+0x40>)
   118ae:	fb13 f301 	smulbb	r3, r3, r1
   118b2:	58d0      	ldr	r0, [r2, r3]
   118b4:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   118b6:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
   118ba:	ebac 0c03 	sub.w	ip, ip, r3
   118be:	4462      	add	r2, ip
   118c0:	b2d2      	uxtb	r2, r2
   118c2:	4290      	cmp	r0, r2
   118c4:	d9f1      	bls.n	118aa <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
   118c6:	2000      	movs	r0, #0
}
   118c8:	4770      	bx	lr
   118ca:	bf00      	nop
   118cc:	20000384 	.word	0x20000384
   118d0:	2000038c 	.word	0x2000038c

000118d4 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   118d4:	4b09      	ldr	r3, [pc, #36]	; (118fc <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   118d6:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   118d8:	795a      	ldrb	r2, [r3, #5]
   118da:	7818      	ldrb	r0, [r3, #0]
   118dc:	f893 c002 	ldrb.w	ip, [r3, #2]
   118e0:	428a      	cmp	r2, r1
   118e2:	d009      	beq.n	118f8 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   118e4:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   118e6:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   118ea:	b2d2      	uxtb	r2, r2
		_first = 0U;
   118ec:	4594      	cmp	ip, r2
   118ee:	bf08      	it	eq
   118f0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   118f2:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
   118f4:	711a      	strb	r2, [r3, #4]
	return mem;
   118f6:	4770      	bx	lr
		return NULL;
   118f8:	2000      	movs	r0, #0
}
   118fa:	4770      	bx	lr
   118fc:	20000384 	.word	0x20000384

00011900 <ull_rx_put>:
{
   11900:	b538      	push	{r3, r4, r5, lr}
   11902:	460c      	mov	r4, r1
   11904:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   11906:	f001 fe69 	bl	135dc <ull_conn_ack_last_idx_get>
   1190a:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1190c:	4621      	mov	r1, r4
   1190e:	4628      	mov	r0, r5
   11910:	4a02      	ldr	r2, [pc, #8]	; (1191c <ull_rx_put+0x1c>)
}
   11912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   11916:	f7fc bbd1 	b.w	e0bc <memq_enqueue>
   1191a:	bf00      	nop
   1191c:	2000296c 	.word	0x2000296c

00011920 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   11920:	2201      	movs	r2, #1
   11922:	4b02      	ldr	r3, [pc, #8]	; (1192c <ull_rx_sched+0xc>)
   11924:	4611      	mov	r1, r2
   11926:	2000      	movs	r0, #0
   11928:	f7fc bc3e 	b.w	e1a8 <mayfly_enqueue>
   1192c:	20000318 	.word	0x20000318

00011930 <ull_rx_put_sched>:
{
   11930:	b570      	push	{r4, r5, r6, lr}
   11932:	460c      	mov	r4, r1
   11934:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   11936:	f001 fe51 	bl	135dc <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1193a:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1193c:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1193e:	4a06      	ldr	r2, [pc, #24]	; (11958 <ull_rx_put_sched+0x28>)
   11940:	4628      	mov	r0, r5
   11942:	f7fc fbbb 	bl	e0bc <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   11946:	2201      	movs	r2, #1
}
   11948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1194c:	4b03      	ldr	r3, [pc, #12]	; (1195c <ull_rx_put_sched+0x2c>)
   1194e:	4611      	mov	r1, r2
   11950:	2000      	movs	r0, #0
   11952:	f7fc bc29 	b.w	e1a8 <mayfly_enqueue>
   11956:	bf00      	nop
   11958:	2000296c 	.word	0x2000296c
   1195c:	20000318 	.word	0x20000318

00011960 <ull_prepare_enqueue>:
{
   11960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   11964:	4e16      	ldr	r6, [pc, #88]	; (119c0 <ull_prepare_enqueue+0x60>)
{
   11966:	f89d a020 	ldrb.w	sl, [sp, #32]
   1196a:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1196c:	7973      	ldrb	r3, [r6, #5]
{
   1196e:	460f      	mov	r7, r1
	last = last + 1;
   11970:	1c5d      	adds	r5, r3, #1
   11972:	4611      	mov	r1, r2
	if (last == count) {
   11974:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   11976:	b2ed      	uxtb	r5, r5
		last = 0U;
   11978:	42aa      	cmp	r2, r5
   1197a:	bf08      	it	eq
   1197c:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1197e:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
   11980:	42aa      	cmp	r2, r5
{
   11982:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   11984:	7830      	ldrb	r0, [r6, #0]
   11986:	d016      	beq.n	119b6 <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11988:	f106 0408 	add.w	r4, r6, #8
   1198c:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   11990:	2210      	movs	r2, #16
   11992:	4620      	mov	r0, r4
   11994:	f012 f93a 	bl	23c0c <memcpy>
	e->is_resume = is_resume;
   11998:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   1199a:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   1199c:	f00a 0a01 	and.w	sl, sl, #1
   119a0:	f023 0303 	bic.w	r3, r3, #3
   119a4:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   119a8:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   119ac:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   119ae:	7175      	strb	r5, [r6, #5]
}
   119b0:	4620      	mov	r0, r4
   119b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   119b6:	2400      	movs	r4, #0
}
   119b8:	4620      	mov	r0, r4
   119ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   119be:	bf00      	nop
   119c0:	200004a4 	.word	0x200004a4

000119c4 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   119c4:	4805      	ldr	r0, [pc, #20]	; (119dc <ull_prepare_dequeue_get+0x18>)
   119c6:	7902      	ldrb	r2, [r0, #4]
	if (first == last) {
   119c8:	7941      	ldrb	r1, [r0, #5]
   119ca:	f890 c000 	ldrb.w	ip, [r0]
   119ce:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   119d0:	bf1a      	itte	ne
   119d2:	3008      	addne	r0, #8
   119d4:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
   119d8:	2000      	moveq	r0, #0
}
   119da:	4770      	bx	lr
   119dc:	200004a4 	.word	0x200004a4

000119e0 <ull_prepare_dequeue_iter>:
{
   119e0:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   119e2:	4b0d      	ldr	r3, [pc, #52]	; (11a18 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   119e4:	7802      	ldrb	r2, [r0, #0]
   119e6:	7899      	ldrb	r1, [r3, #2]
   119e8:	f893 c005 	ldrb.w	ip, [r3, #5]
   119ec:	f893 e000 	ldrb.w	lr, [r3]
   119f0:	4291      	cmp	r1, r2
   119f2:	bf9c      	itt	ls
   119f4:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
   119f6:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   119f8:	4594      	cmp	ip, r2
   119fa:	d00a      	beq.n	11a12 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   119fc:	1c53      	adds	r3, r2, #1
   119fe:	b2db      	uxtb	r3, r3
		i = 0U;
   11a00:	4299      	cmp	r1, r3
   11a02:	bf08      	it	eq
   11a04:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   11a06:	4905      	ldr	r1, [pc, #20]	; (11a1c <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   11a08:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   11a0a:	fb02 100e 	mla	r0, r2, lr, r1
}
   11a0e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   11a12:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   11a14:	e7fb      	b.n	11a0e <ull_prepare_dequeue_iter+0x2e>
   11a16:	bf00      	nop
   11a18:	200004a4 	.word	0x200004a4
   11a1c:	200004ac 	.word	0x200004ac

00011a20 <ull_prepare_dequeue>:
{
   11a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   11a24:	4c2b      	ldr	r4, [pc, #172]	; (11ad4 <ull_prepare_dequeue+0xb4>)
   11a26:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
   11a28:	7961      	ldrb	r1, [r4, #5]
   11a2a:	7823      	ldrb	r3, [r4, #0]
{
   11a2c:	b083      	sub	sp, #12
   11a2e:	4291      	cmp	r1, r2
   11a30:	9001      	str	r0, [sp, #4]
   11a32:	d032      	beq.n	11a9a <ull_prepare_dequeue+0x7a>
	return (void *)(fifo + first * size);
   11a34:	f104 0908 	add.w	r9, r4, #8
   11a38:	f04f 0800 	mov.w	r8, #0
			mfy.param = next;
   11a3c:	f8df b098 	ldr.w	fp, [pc, #152]	; 11ad8 <ull_prepare_dequeue+0xb8>
   11a40:	fb02 9303 	mla	r3, r2, r3, r9
   11a44:	46c2      	mov	sl, r8
		uint8_t is_aborted = next->is_aborted;
   11a46:	7f1a      	ldrb	r2, [r3, #28]
		void *param = next->prepare_param.param;
   11a48:	68df      	ldr	r7, [r3, #12]
		if (!is_aborted) {
   11a4a:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
   11a4c:	f3c2 0540 	ubfx	r5, r2, #1, #1
		uint8_t is_resume = next->is_resume;
   11a50:	f002 0601 	and.w	r6, r2, #1
		if (!is_aborted) {
   11a54:	d524      	bpl.n	11aa0 <ull_prepare_dequeue+0x80>
		MFIFO_DEQUEUE(prep);
   11a56:	7961      	ldrb	r1, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
   11a58:	7923      	ldrb	r3, [r4, #4]
   11a5a:	7822      	ldrb	r2, [r4, #0]
   11a5c:	78a0      	ldrb	r0, [r4, #2]
	if (_first == last) {
   11a5e:	4299      	cmp	r1, r3
   11a60:	d01b      	beq.n	11a9a <ull_prepare_dequeue+0x7a>
	_first += 1U;
   11a62:	3301      	adds	r3, #1
   11a64:	b2db      	uxtb	r3, r3
		_first = 0U;
   11a66:	4298      	cmp	r0, r3
   11a68:	bf08      	it	eq
   11a6a:	2300      	moveq	r3, #0
	if (first == last) {
   11a6c:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   11a6e:	7123      	strb	r3, [r4, #4]
	if (first == last) {
   11a70:	d013      	beq.n	11a9a <ull_prepare_dequeue+0x7a>
	return (void *)(fifo + first * size);
   11a72:	fb03 9302 	mla	r3, r3, r2, r9
		if (!is_aborted) {
   11a76:	2d00      	cmp	r5, #0
   11a78:	d1e5      	bne.n	11a46 <ull_prepare_dequeue+0x26>
			if (!is_resume) {
   11a7a:	b176      	cbz	r6, 11a9a <ull_prepare_dequeue+0x7a>
			if (!param_resume_head) {
   11a7c:	f1ba 0f00 	cmp.w	sl, #0
   11a80:	d026      	beq.n	11ad0 <ull_prepare_dequeue+0xb0>
				param_resume_next = param;
   11a82:	f1b8 0f00 	cmp.w	r8, #0
   11a86:	bf08      	it	eq
   11a88:	46b8      	moveq	r8, r7
			if (next->is_resume &&
   11a8a:	7f1a      	ldrb	r2, [r3, #28]
   11a8c:	07d2      	lsls	r2, r2, #31
   11a8e:	d5da      	bpl.n	11a46 <ull_prepare_dequeue+0x26>
			    ((next->prepare_param.param ==
   11a90:	68da      	ldr	r2, [r3, #12]
			if (next->is_resume &&
   11a92:	4592      	cmp	sl, r2
   11a94:	d001      	beq.n	11a9a <ull_prepare_dequeue+0x7a>
			      param_resume_head) ||
   11a96:	4590      	cmp	r8, r2
   11a98:	d1d5      	bne.n	11a46 <ull_prepare_dequeue+0x26>
}
   11a9a:	b003      	add	sp, #12
   11a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   11aa0:	f8cb 3008 	str.w	r3, [fp, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   11aa4:	9801      	ldr	r0, [sp, #4]
   11aa6:	4b0c      	ldr	r3, [pc, #48]	; (11ad8 <ull_prepare_dequeue+0xb8>)
   11aa8:	462a      	mov	r2, r5
   11aaa:	4629      	mov	r1, r5
   11aac:	f7fc fb7c 	bl	e1a8 <mayfly_enqueue>
			LL_ASSERT(!ret);
   11ab0:	2800      	cmp	r0, #0
   11ab2:	d0d0      	beq.n	11a56 <ull_prepare_dequeue+0x36>
   11ab4:	4a09      	ldr	r2, [pc, #36]	; (11adc <ull_prepare_dequeue+0xbc>)
   11ab6:	490a      	ldr	r1, [pc, #40]	; (11ae0 <ull_prepare_dequeue+0xc0>)
   11ab8:	480a      	ldr	r0, [pc, #40]	; (11ae4 <ull_prepare_dequeue+0xc4>)
   11aba:	f640 0316 	movw	r3, #2070	; 0x816
   11abe:	f00f fe45 	bl	2174c <assert_print>
   11ac2:	4040      	eors	r0, r0
   11ac4:	f380 8811 	msr	BASEPRI, r0
   11ac8:	f04f 0003 	mov.w	r0, #3
   11acc:	df02      	svc	2
   11ace:	e7c2      	b.n	11a56 <ull_prepare_dequeue+0x36>
				param_resume_head = param;
   11ad0:	46ba      	mov	sl, r7
   11ad2:	e7da      	b.n	11a8a <ull_prepare_dequeue+0x6a>
   11ad4:	200004a4 	.word	0x200004a4
   11ad8:	200002f8 	.word	0x200002f8
   11adc:	000289fc 	.word	0x000289fc
   11ae0:	00028b38 	.word	0x00028b38
   11ae4:	0002866c 	.word	0x0002866c

00011ae8 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   11ae8:	4b06      	ldr	r3, [pc, #24]	; (11b04 <ull_event_done_extra_get+0x1c>)
   11aea:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
   11aec:	7959      	ldrb	r1, [r3, #5]
   11aee:	7818      	ldrb	r0, [r3, #0]
   11af0:	4291      	cmp	r1, r2
   11af2:	d005      	beq.n	11b00 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   11af4:	fb02 3300 	mla	r3, r2, r0, r3
   11af8:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
   11afa:	b110      	cbz	r0, 11b02 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   11afc:	3020      	adds	r0, #32
   11afe:	4770      	bx	lr
		return NULL;
   11b00:	2000      	movs	r0, #0
}
   11b02:	4770      	bx	lr
   11b04:	20000488 	.word	0x20000488

00011b08 <ull_event_done>:
{
   11b08:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   11b0a:	4a13      	ldr	r2, [pc, #76]	; (11b58 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   11b0c:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
   11b0e:	7955      	ldrb	r5, [r2, #5]
   11b10:	7814      	ldrb	r4, [r2, #0]
   11b12:	429d      	cmp	r5, r3
{
   11b14:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   11b16:	7890      	ldrb	r0, [r2, #2]
   11b18:	d01b      	beq.n	11b52 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   11b1a:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   11b1e:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   11b20:	68a4      	ldr	r4, [r4, #8]
	_first += 1U;
   11b22:	b2db      	uxtb	r3, r3
		_first = 0U;
   11b24:	4298      	cmp	r0, r3
   11b26:	bf08      	it	eq
   11b28:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   11b2a:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
   11b2c:	b18c      	cbz	r4, 11b52 <ull_event_done+0x4a>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   11b2e:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   11b30:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   11b32:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   11b34:	4a09      	ldr	r2, [pc, #36]	; (11b5c <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   11b36:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   11b38:	61e1      	str	r1, [r4, #28]
	evdone->hdr.link = NULL;
   11b3a:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   11b3c:	4621      	mov	r1, r4
   11b3e:	f7fc fabd 	bl	e0bc <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   11b42:	2201      	movs	r2, #1
   11b44:	4b06      	ldr	r3, [pc, #24]	; (11b60 <ull_event_done+0x58>)
   11b46:	4611      	mov	r1, r2
   11b48:	4628      	mov	r0, r5
   11b4a:	f7fc fb2d 	bl	e1a8 <mayfly_enqueue>
}
   11b4e:	4620      	mov	r0, r4
   11b50:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   11b52:	2400      	movs	r4, #0
   11b54:	e7fb      	b.n	11b4e <ull_event_done+0x46>
   11b56:	bf00      	nop
   11b58:	20000488 	.word	0x20000488
   11b5c:	2000295c 	.word	0x2000295c
   11b60:	20000308 	.word	0x20000308

00011b64 <ull_rxfifo_alloc>:
{
   11b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b68:	b083      	sub	sp, #12
   11b6a:	461d      	mov	r5, r3
   11b6c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   11b70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   11b72:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   11b76:	9401      	str	r4, [sp, #4]
   11b78:	4617      	mov	r7, r2
   11b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11b7c:	9200      	str	r2, [sp, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   11b7e:	b353      	cbz	r3, 11bd6 <ull_rxfifo_alloc+0x72>
   11b80:	1e5c      	subs	r4, r3, #1
   11b82:	f895 a000 	ldrb.w	sl, [r5]
   11b86:	4680      	mov	r8, r0
   11b88:	460e      	mov	r6, r1
   11b8a:	b2e4      	uxtb	r4, r4
	last = last + 1;
   11b8c:	f10a 0301 	add.w	r3, sl, #1
   11b90:	fa5f fa83 	uxtb.w	sl, r3
		last = 0U;
   11b94:	4556      	cmp	r6, sl
   11b96:	bf08      	it	eq
   11b98:	f04f 0a00 	moveq.w	sl, #0
	if (last == first) {
   11b9c:	4557      	cmp	r7, sl
		link = mem_acquire(link_free);
   11b9e:	4648      	mov	r0, r9
   11ba0:	d019      	beq.n	11bd6 <ull_rxfifo_alloc+0x72>
   11ba2:	f7fc fa25 	bl	dff0 <mem_acquire>
   11ba6:	4683      	mov	fp, r0
		rx = mem_acquire(mem_free);
   11ba8:	9800      	ldr	r0, [sp, #0]
		if (!link) {
   11baa:	f1bb 0f00 	cmp.w	fp, #0
   11bae:	d012      	beq.n	11bd6 <ull_rxfifo_alloc+0x72>
		rx = mem_acquire(mem_free);
   11bb0:	f7fc fa1e 	bl	dff0 <mem_acquire>
		if (!rx) {
   11bb4:	b190      	cbz	r0, 11bdc <ull_rxfifo_alloc+0x78>
		link->mem = NULL;
   11bb6:	2300      	movs	r3, #0
   11bb8:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   11bbc:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11bc0:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11bc2:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11bc4:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11bc8:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   11bca:	3c01      	subs	r4, #1
   11bcc:	b2e4      	uxtb	r4, r4
   11bce:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   11bd0:	f885 a000 	strb.w	sl, [r5]
   11bd4:	d1da      	bne.n	11b8c <ull_rxfifo_alloc+0x28>
}
   11bd6:	b003      	add	sp, #12
   11bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   11bdc:	4649      	mov	r1, r9
   11bde:	4658      	mov	r0, fp
}
   11be0:	b003      	add	sp, #12
   11be2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   11be6:	f7fc ba1f 	b.w	e028 <mem_release>
   11bea:	bf00      	nop

00011bec <init_reset>:
{
   11bec:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   11bee:	4c3f      	ldr	r4, [pc, #252]	; (11cec <init_reset+0x100>)
   11bf0:	4d3f      	ldr	r5, [pc, #252]	; (11cf0 <init_reset+0x104>)
   11bf2:	79a2      	ldrb	r2, [r4, #6]
   11bf4:	88a1      	ldrh	r1, [r4, #4]
   11bf6:	4e3f      	ldr	r6, [pc, #252]	; (11cf4 <init_reset+0x108>)
   11bf8:	2000      	movs	r0, #0
{
   11bfa:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   11bfc:	4623      	mov	r3, r4
   11bfe:	80a8      	strh	r0, [r5, #4]
   11c00:	f104 0008 	add.w	r0, r4, #8
   11c04:	f7fc f9c4 	bl	df90 <mem_init>
   11c08:	79e3      	ldrb	r3, [r4, #7]
   11c0a:	79a2      	ldrb	r2, [r4, #6]
   11c0c:	1d30      	adds	r0, r6, #4
   11c0e:	441a      	add	r2, r3
   11c10:	2108      	movs	r1, #8
   11c12:	4633      	mov	r3, r6
   11c14:	f7fc f9bc 	bl	df90 <mem_init>
   11c18:	9602      	str	r6, [sp, #8]
   11c1a:	462e      	mov	r6, r5
   11c1c:	79a3      	ldrb	r3, [r4, #6]
   11c1e:	f816 0b08 	ldrb.w	r0, [r6], #8
   11c22:	9303      	str	r3, [sp, #12]
   11c24:	792a      	ldrb	r2, [r5, #4]
   11c26:	78a9      	ldrb	r1, [r5, #2]
   11c28:	1d6b      	adds	r3, r5, #5
   11c2a:	e9cd 6400 	strd	r6, r4, [sp]
   11c2e:	f7ff ff99 	bl	11b64 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   11c32:	4b31      	ldr	r3, [pc, #196]	; (11cf8 <init_reset+0x10c>)
   11c34:	2208      	movs	r2, #8
   11c36:	1d18      	adds	r0, r3, #4
   11c38:	2144      	movs	r1, #68	; 0x44
   11c3a:	f7fc f9a9 	bl	df90 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   11c3e:	4b2f      	ldr	r3, [pc, #188]	; (11cfc <init_reset+0x110>)
   11c40:	220a      	movs	r2, #10
   11c42:	1d18      	adds	r0, r3, #4
   11c44:	2108      	movs	r1, #8
   11c46:	f7fc f9a3 	bl	df90 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   11c4a:	482c      	ldr	r0, [pc, #176]	; (11cfc <init_reset+0x110>)
   11c4c:	f7fc f9d0 	bl	dff0 <mem_acquire>
	LL_ASSERT(link);
   11c50:	4604      	mov	r4, r0
   11c52:	b308      	cbz	r0, 11c98 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   11c54:	4a2a      	ldr	r2, [pc, #168]	; (11d00 <init_reset+0x114>)
   11c56:	4620      	mov	r0, r4
   11c58:	1f11      	subs	r1, r2, #4
   11c5a:	f7fc fa21 	bl	e0a0 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   11c5e:	4825      	ldr	r0, [pc, #148]	; (11cf4 <init_reset+0x108>)
   11c60:	f7fc f9c6 	bl	dff0 <mem_acquire>
	LL_ASSERT(link);
   11c64:	4604      	mov	r4, r0
   11c66:	b328      	cbz	r0, 11cb4 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   11c68:	4a26      	ldr	r2, [pc, #152]	; (11d04 <init_reset+0x118>)
   11c6a:	4620      	mov	r0, r4
   11c6c:	1f11      	subs	r1, r2, #4
   11c6e:	f7fc fa17 	bl	e0a0 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   11c72:	4822      	ldr	r0, [pc, #136]	; (11cfc <init_reset+0x110>)
   11c74:	f7fc f9bc 	bl	dff0 <mem_acquire>
	LL_ASSERT(link);
   11c78:	4604      	mov	r4, r0
   11c7a:	b348      	cbz	r0, 11cd0 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   11c7c:	4a22      	ldr	r2, [pc, #136]	; (11d08 <init_reset+0x11c>)
   11c7e:	4620      	mov	r0, r4
   11c80:	1f11      	subs	r1, r2, #4
   11c82:	f7fc fa0d 	bl	e0a0 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   11c86:	4b21      	ldr	r3, [pc, #132]	; (11d0c <init_reset+0x120>)
   11c88:	2206      	movs	r2, #6
	rx_replenish(UINT8_MAX);
   11c8a:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   11c8c:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
   11c8e:	f7ff f873 	bl	10d78 <rx_replenish>
}
   11c92:	2000      	movs	r0, #0
   11c94:	b004      	add	sp, #16
   11c96:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   11c98:	4a1d      	ldr	r2, [pc, #116]	; (11d10 <init_reset+0x124>)
   11c9a:	491e      	ldr	r1, [pc, #120]	; (11d14 <init_reset+0x128>)
   11c9c:	481e      	ldr	r0, [pc, #120]	; (11d18 <init_reset+0x12c>)
   11c9e:	f640 03c5 	movw	r3, #2245	; 0x8c5
   11ca2:	f00f fd53 	bl	2174c <assert_print>
   11ca6:	4040      	eors	r0, r0
   11ca8:	f380 8811 	msr	BASEPRI, r0
   11cac:	f04f 0003 	mov.w	r0, #3
   11cb0:	df02      	svc	2
   11cb2:	e7cf      	b.n	11c54 <init_reset+0x68>
	LL_ASSERT(link);
   11cb4:	4a16      	ldr	r2, [pc, #88]	; (11d10 <init_reset+0x124>)
   11cb6:	4917      	ldr	r1, [pc, #92]	; (11d14 <init_reset+0x128>)
   11cb8:	4817      	ldr	r0, [pc, #92]	; (11d18 <init_reset+0x12c>)
   11cba:	f640 03cd 	movw	r3, #2253	; 0x8cd
   11cbe:	f00f fd45 	bl	2174c <assert_print>
   11cc2:	4040      	eors	r0, r0
   11cc4:	f380 8811 	msr	BASEPRI, r0
   11cc8:	f04f 0003 	mov.w	r0, #3
   11ccc:	df02      	svc	2
   11cce:	e7cb      	b.n	11c68 <init_reset+0x7c>
	LL_ASSERT(link);
   11cd0:	4a0f      	ldr	r2, [pc, #60]	; (11d10 <init_reset+0x124>)
   11cd2:	4910      	ldr	r1, [pc, #64]	; (11d14 <init_reset+0x128>)
   11cd4:	4810      	ldr	r0, [pc, #64]	; (11d18 <init_reset+0x12c>)
   11cd6:	f640 03d5 	movw	r3, #2261	; 0x8d5
   11cda:	f00f fd37 	bl	2174c <assert_print>
   11cde:	4040      	eors	r0, r0
   11ce0:	f380 8811 	msr	BASEPRI, r0
   11ce4:	f04f 0003 	mov.w	r0, #3
   11ce8:	df02      	svc	2
   11cea:	e7c7      	b.n	11c7c <init_reset+0x90>
   11cec:	200003a0 	.word	0x200003a0
   11cf0:	20000488 	.word	0x20000488
   11cf4:	20002bec 	.word	0x20002bec
   11cf8:	200029c8 	.word	0x200029c8
   11cfc:	20002974 	.word	0x20002974
   11d00:	2000296c 	.word	0x2000296c
   11d04:	2000295c 	.word	0x2000295c
   11d08:	20002964 	.word	0x20002964
   11d0c:	20002970 	.word	0x20002970
   11d10:	000289fc 	.word	0x000289fc
   11d14:	00028d9c 	.word	0x00028d9c
   11d18:	0002866c 	.word	0x0002866c

00011d1c <ll_init>:
{
   11d1c:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   11d1e:	4b2b      	ldr	r3, [pc, #172]	; (11dcc <ll_init+0xb0>)
	if (!mayfly_initialized) {
   11d20:	4c2b      	ldr	r4, [pc, #172]	; (11dd0 <ll_init+0xb4>)
	sem_recv = sem_rx;
   11d22:	6018      	str	r0, [r3, #0]
{
   11d24:	b086      	sub	sp, #24
	cntr_init();
   11d26:	f008 f8f5 	bl	19f14 <cntr_init>
	if (!mayfly_initialized) {
   11d2a:	7823      	ldrb	r3, [r4, #0]
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d047      	beq.n	11dc0 <ll_init+0xa4>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d30:	4a28      	ldr	r2, [pc, #160]	; (11dd4 <ll_init+0xb8>)
   11d32:	4c29      	ldr	r4, [pc, #164]	; (11dd8 <ll_init+0xbc>)
   11d34:	4929      	ldr	r1, [pc, #164]	; (11ddc <ll_init+0xc0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   11d36:	482a      	ldr	r0, [pc, #168]	; (11de0 <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d38:	e9cd 2404 	strd	r2, r4, [sp, #16]
   11d3c:	4a29      	ldr	r2, [pc, #164]	; (11de4 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   11d3e:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d40:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   11d44:	f04f 0c02 	mov.w	ip, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d48:	210c      	movs	r1, #12
   11d4a:	e9cd 0100 	strd	r0, r1, [sp]
   11d4e:	4a26      	ldr	r2, [pc, #152]	; (11de8 <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   11d50:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   11d52:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   11d54:	f880 c010 	strb.w	ip, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   11d58:	f880 c018 	strb.w	ip, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d5c:	4619      	mov	r1, r3
   11d5e:	2000      	movs	r0, #0
   11d60:	f7fd f9c6 	bl	f0f0 <ticker_init>
	LL_ASSERT(!err);
   11d64:	b9f0      	cbnz	r0, 11da4 <ll_init+0x88>
	return z_impl_k_sem_init(sem, initial_count, limit);
   11d66:	2201      	movs	r2, #1
   11d68:	2100      	movs	r1, #0
   11d6a:	4820      	ldr	r0, [pc, #128]	; (11dec <ll_init+0xd0>)
   11d6c:	f014 ff88 	bl	26c80 <z_impl_k_sem_init>
	err = lll_init();
   11d70:	f006 fb5a 	bl	18428 <lll_init>
	if (err) {
   11d74:	b108      	cbz	r0, 11d7a <ll_init+0x5e>
}
   11d76:	b006      	add	sp, #24
   11d78:	bd10      	pop	{r4, pc}
	err = init_reset();
   11d7a:	f7ff ff37 	bl	11bec <init_reset>
	if (err) {
   11d7e:	2800      	cmp	r0, #0
   11d80:	d1f9      	bne.n	11d76 <ll_init+0x5a>
	err = lll_adv_init();
   11d82:	f006 ffa3 	bl	18ccc <lll_adv_init>
	if (err) {
   11d86:	2800      	cmp	r0, #0
   11d88:	d1f5      	bne.n	11d76 <ll_init+0x5a>
	err = ull_adv_init();
   11d8a:	f000 fcdf 	bl	1274c <ull_adv_init>
	if (err) {
   11d8e:	2800      	cmp	r0, #0
   11d90:	d1f1      	bne.n	11d76 <ll_init+0x5a>
	err = lll_conn_init();
   11d92:	f007 fbb7 	bl	19504 <lll_conn_init>
	if (err) {
   11d96:	2800      	cmp	r0, #0
   11d98:	d1ed      	bne.n	11d76 <ll_init+0x5a>
}
   11d9a:	b006      	add	sp, #24
   11d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = ull_conn_init();
   11da0:	f001 ba2c 	b.w	131fc <ull_conn_init>
	LL_ASSERT(!err);
   11da4:	4a12      	ldr	r2, [pc, #72]	; (11df0 <ll_init+0xd4>)
   11da6:	4913      	ldr	r1, [pc, #76]	; (11df4 <ll_init+0xd8>)
   11da8:	4813      	ldr	r0, [pc, #76]	; (11df8 <ll_init+0xdc>)
   11daa:	f240 235a 	movw	r3, #602	; 0x25a
   11dae:	f00f fccd 	bl	2174c <assert_print>
   11db2:	4040      	eors	r0, r0
   11db4:	f380 8811 	msr	BASEPRI, r0
   11db8:	f04f 0003 	mov.w	r0, #3
   11dbc:	df02      	svc	2
   11dbe:	e7d2      	b.n	11d66 <ll_init+0x4a>
		mayfly_init();
   11dc0:	f7fc f99e 	bl	e100 <mayfly_init>
		mayfly_initialized = true;
   11dc4:	2301      	movs	r3, #1
   11dc6:	7023      	strb	r3, [r4, #0]
   11dc8:	e7b2      	b.n	11d30 <ll_init+0x14>
   11dca:	bf00      	nop
   11dcc:	20002c18 	.word	0x20002c18
   11dd0:	20003bcf 	.word	0x20003bcf
   11dd4:	0001a9b9 	.word	0x0001a9b9
   11dd8:	0001ab09 	.word	0x0001ab09
   11ddc:	0001a955 	.word	0x0001a955
   11de0:	20002e74 	.word	0x20002e74
   11de4:	20002c34 	.word	0x20002c34
   11de8:	20002e94 	.word	0x20002e94
   11dec:	20002c1c 	.word	0x20002c1c
   11df0:	000289fc 	.word	0x000289fc
   11df4:	00028a38 	.word	0x00028a38
   11df8:	0002866c 	.word	0x0002866c

00011dfc <ll_reset>:
{
   11dfc:	b510      	push	{r4, lr}
   11dfe:	b086      	sub	sp, #24
	err = ull_adv_reset();
   11e00:	f000 fcb4 	bl	1276c <ull_adv_reset>
	LL_ASSERT(!err);
   11e04:	2800      	cmp	r0, #0
   11e06:	d130      	bne.n	11e6a <ll_reset+0x6e>
	err = ull_conn_reset();
   11e08:	f001 f9fa 	bl	13200 <ull_conn_reset>
	LL_ASSERT(!err);
   11e0c:	2800      	cmp	r0, #0
   11e0e:	d13d      	bne.n	11e8c <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
   11e10:	483a      	ldr	r0, [pc, #232]	; (11efc <ll_reset+0x100>)
	MFIFO_INIT(prep);
   11e12:	493b      	ldr	r1, [pc, #236]	; (11f00 <ll_reset+0x104>)
	MFIFO_INIT(pdu_rx_free);
   11e14:	4a3b      	ldr	r2, [pc, #236]	; (11f04 <ll_reset+0x108>)
	MFIFO_INIT(ll_pdu_rx_free);
   11e16:	4b3c      	ldr	r3, [pc, #240]	; (11f08 <ll_reset+0x10c>)
	MFIFO_INIT(tx_ack);
   11e18:	2400      	movs	r4, #0
   11e1a:	8084      	strh	r4, [r0, #4]
	MFIFO_INIT(prep);
   11e1c:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
   11e1e:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
   11e20:	809c      	strh	r4, [r3, #4]
   11e22:	2201      	movs	r2, #1
   11e24:	4621      	mov	r1, r4
   11e26:	4668      	mov	r0, sp
   11e28:	f014 ff2a 	bl	26c80 <z_impl_k_sem_init>
		mfy.param = &sem;
   11e2c:	4b37      	ldr	r3, [pc, #220]	; (11f0c <ll_reset+0x110>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   11e2e:	4622      	mov	r2, r4
   11e30:	4621      	mov	r1, r4
   11e32:	2003      	movs	r0, #3
		mfy.param = &sem;
   11e34:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   11e38:	f7fc f9b6 	bl	e1a8 <mayfly_enqueue>
		LL_ASSERT(!retval);
   11e3c:	2800      	cmp	r0, #0
   11e3e:	d14f      	bne.n	11ee0 <ll_reset+0xe4>
	return z_impl_k_sem_take(sem, timeout);
   11e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e48:	4668      	mov	r0, sp
   11e4a:	f00d ff95 	bl	1fd78 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   11e4e:	f000 fc93 	bl	12778 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   11e52:	2800      	cmp	r0, #0
   11e54:	d136      	bne.n	11ec4 <ll_reset+0xc8>
	err = init_reset();
   11e56:	f7ff fec9 	bl	11bec <init_reset>
	LL_ASSERT(!err);
   11e5a:	bb28      	cbnz	r0, 11ea8 <ll_reset+0xac>
	(void)ll_addr_set(1U, NULL);
   11e5c:	2100      	movs	r1, #0
   11e5e:	2001      	movs	r0, #1
}
   11e60:	b006      	add	sp, #24
   11e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ll_addr_set(1U, NULL);
   11e66:	f7fd baf9 	b.w	f45c <ll_addr_set>
	LL_ASSERT(!err);
   11e6a:	4a29      	ldr	r2, [pc, #164]	; (11f10 <ll_reset+0x114>)
   11e6c:	4929      	ldr	r1, [pc, #164]	; (11f14 <ll_reset+0x118>)
   11e6e:	482a      	ldr	r0, [pc, #168]	; (11f18 <ll_reset+0x11c>)
   11e70:	f44f 7340 	mov.w	r3, #768	; 0x300
   11e74:	f00f fc6a 	bl	2174c <assert_print>
   11e78:	4040      	eors	r0, r0
   11e7a:	f380 8811 	msr	BASEPRI, r0
   11e7e:	f04f 0003 	mov.w	r0, #3
   11e82:	df02      	svc	2
	err = ull_conn_reset();
   11e84:	f001 f9bc 	bl	13200 <ull_conn_reset>
	LL_ASSERT(!err);
   11e88:	2800      	cmp	r0, #0
   11e8a:	d0c1      	beq.n	11e10 <ll_reset+0x14>
   11e8c:	4a20      	ldr	r2, [pc, #128]	; (11f10 <ll_reset+0x114>)
   11e8e:	4921      	ldr	r1, [pc, #132]	; (11f14 <ll_reset+0x118>)
   11e90:	4821      	ldr	r0, [pc, #132]	; (11f18 <ll_reset+0x11c>)
   11e92:	f240 3332 	movw	r3, #818	; 0x332
   11e96:	f00f fc59 	bl	2174c <assert_print>
   11e9a:	4040      	eors	r0, r0
   11e9c:	f380 8811 	msr	BASEPRI, r0
   11ea0:	f04f 0003 	mov.w	r0, #3
   11ea4:	df02      	svc	2
   11ea6:	e7b3      	b.n	11e10 <ll_reset+0x14>
	LL_ASSERT(!err);
   11ea8:	4a19      	ldr	r2, [pc, #100]	; (11f10 <ll_reset+0x114>)
   11eaa:	491a      	ldr	r1, [pc, #104]	; (11f14 <ll_reset+0x118>)
   11eac:	481a      	ldr	r0, [pc, #104]	; (11f18 <ll_reset+0x11c>)
   11eae:	f240 337b 	movw	r3, #891	; 0x37b
   11eb2:	f00f fc4b 	bl	2174c <assert_print>
   11eb6:	4040      	eors	r0, r0
   11eb8:	f380 8811 	msr	BASEPRI, r0
   11ebc:	f04f 0003 	mov.w	r0, #3
   11ec0:	df02      	svc	2
   11ec2:	e7cb      	b.n	11e5c <ll_reset+0x60>
	LL_ASSERT(!err);
   11ec4:	4a12      	ldr	r2, [pc, #72]	; (11f10 <ll_reset+0x114>)
   11ec6:	4913      	ldr	r1, [pc, #76]	; (11f14 <ll_reset+0x118>)
   11ec8:	4813      	ldr	r0, [pc, #76]	; (11f18 <ll_reset+0x11c>)
   11eca:	f240 336e 	movw	r3, #878	; 0x36e
   11ece:	f00f fc3d 	bl	2174c <assert_print>
   11ed2:	4040      	eors	r0, r0
   11ed4:	f380 8811 	msr	BASEPRI, r0
   11ed8:	f04f 0003 	mov.w	r0, #3
   11edc:	df02      	svc	2
   11ede:	e7ba      	b.n	11e56 <ll_reset+0x5a>
		LL_ASSERT(!retval);
   11ee0:	4a0b      	ldr	r2, [pc, #44]	; (11f10 <ll_reset+0x114>)
   11ee2:	490e      	ldr	r1, [pc, #56]	; (11f1c <ll_reset+0x120>)
   11ee4:	480c      	ldr	r0, [pc, #48]	; (11f18 <ll_reset+0x11c>)
   11ee6:	f240 3361 	movw	r3, #865	; 0x361
   11eea:	f00f fc2f 	bl	2174c <assert_print>
   11eee:	4040      	eors	r0, r0
   11ef0:	f380 8811 	msr	BASEPRI, r0
   11ef4:	f04f 0003 	mov.w	r0, #3
   11ef8:	df02      	svc	2
   11efa:	e7a1      	b.n	11e40 <ll_reset+0x44>
   11efc:	20000348 	.word	0x20000348
   11f00:	200004a4 	.word	0x200004a4
   11f04:	20000384 	.word	0x20000384
   11f08:	20000370 	.word	0x20000370
   11f0c:	20000338 	.word	0x20000338
   11f10:	000289fc 	.word	0x000289fc
   11f14:	00028a38 	.word	0x00028a38
   11f18:	0002866c 	.word	0x0002866c
   11f1c:	00028b60 	.word	0x00028b60

00011f20 <ll_deinit>:
{
   11f20:	b508      	push	{r3, lr}
	ll_reset();
   11f22:	f7ff ff6b 	bl	11dfc <ll_reset>
}
   11f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return lll_deinit();
   11f2a:	f006 baad 	b.w	18488 <lll_deinit>
   11f2e:	bf00      	nop

00011f30 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   11f30:	b510      	push	{r4, lr}
   11f32:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   11f34:	2400      	movs	r4, #0
   11f36:	e9cd 4400 	strd	r4, r4, [sp]
   11f3a:	9b04      	ldr	r3, [sp, #16]
   11f3c:	f006 fc7e 	bl	1883c <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   11f40:	b002      	add	sp, #8
   11f42:	bd10      	pop	{r4, pc}

00011f44 <lll_resume>:

void lll_resume(void *param)
{
   11f44:	b510      	push	{r4, lr}
   11f46:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   11f48:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   11f4a:	691a      	ldr	r2, [r3, #16]
   11f4c:	6999      	ldr	r1, [r3, #24]
   11f4e:	2401      	movs	r4, #1
{
   11f50:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   11f52:	4020      	ands	r0, r4
   11f54:	e9cd 0400 	strd	r0, r4, [sp]
   11f58:	6958      	ldr	r0, [r3, #20]
   11f5a:	f006 fc6f 	bl	1883c <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   11f5e:	b108      	cbz	r0, 11f64 <lll_resume+0x20>
   11f60:	3077      	adds	r0, #119	; 0x77
   11f62:	d101      	bne.n	11f68 <lll_resume+0x24>
}
   11f64:	b002      	add	sp, #8
   11f66:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   11f68:	4a06      	ldr	r2, [pc, #24]	; (11f84 <lll_resume+0x40>)
   11f6a:	4907      	ldr	r1, [pc, #28]	; (11f88 <lll_resume+0x44>)
   11f6c:	4807      	ldr	r0, [pc, #28]	; (11f8c <lll_resume+0x48>)
   11f6e:	234c      	movs	r3, #76	; 0x4c
   11f70:	f00f fbec 	bl	2174c <assert_print>
   11f74:	4040      	eors	r0, r0
   11f76:	f380 8811 	msr	BASEPRI, r0
   11f7a:	f04f 0003 	mov.w	r0, #3
   11f7e:	df02      	svc	2
}
   11f80:	b002      	add	sp, #8
   11f82:	bd10      	pop	{r4, pc}
   11f84:	00028b68 	.word	0x00028b68
   11f88:	00028bac 	.word	0x00028bac
   11f8c:	0002866c 	.word	0x0002866c

00011f90 <ticker_stop_cb>:
{
   11f90:	b530      	push	{r4, r5, lr}
   11f92:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11f94:	4c18      	ldr	r4, [pc, #96]	; (11ff8 <ticker_stop_cb+0x68>)
{
   11f96:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11f98:	4b18      	ldr	r3, [pc, #96]	; (11ffc <ticker_stop_cb+0x6c>)
   11f9a:	1b2c      	subs	r4, r5, r4
   11f9c:	08a4      	lsrs	r4, r4, #2
   11f9e:	fba3 3404 	umull	r3, r4, r3, r4
	handle = ull_adv_handle_get(adv);
   11fa2:	f3c4 04c7 	ubfx	r4, r4, #3, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   11fa6:	b9cc      	cbnz	r4, 11fdc <ticker_stop_cb+0x4c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   11fa8:	1ca2      	adds	r2, r4, #2
   11faa:	4b15      	ldr	r3, [pc, #84]	; (12000 <ticker_stop_cb+0x70>)
   11fac:	9500      	str	r5, [sp, #0]
   11fae:	b2d2      	uxtb	r2, r2
   11fb0:	2101      	movs	r1, #1
   11fb2:	2000      	movs	r0, #0
   11fb4:	f7fd f9c6 	bl	f344 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11fb8:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   11fbc:	d00c      	beq.n	11fd8 <ticker_stop_cb+0x48>
   11fbe:	4a11      	ldr	r2, [pc, #68]	; (12004 <ticker_stop_cb+0x74>)
   11fc0:	4911      	ldr	r1, [pc, #68]	; (12008 <ticker_stop_cb+0x78>)
   11fc2:	4812      	ldr	r0, [pc, #72]	; (1200c <ticker_stop_cb+0x7c>)
   11fc4:	f640 138f 	movw	r3, #2447	; 0x98f
   11fc8:	f00f fbc0 	bl	2174c <assert_print>
   11fcc:	4040      	eors	r0, r0
   11fce:	f380 8811 	msr	BASEPRI, r0
   11fd2:	f04f 0003 	mov.w	r0, #3
   11fd6:	df02      	svc	2
}
   11fd8:	b003      	add	sp, #12
   11fda:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   11fdc:	4a09      	ldr	r2, [pc, #36]	; (12004 <ticker_stop_cb+0x74>)
   11fde:	490c      	ldr	r1, [pc, #48]	; (12010 <ticker_stop_cb+0x80>)
   11fe0:	480a      	ldr	r0, [pc, #40]	; (1200c <ticker_stop_cb+0x7c>)
   11fe2:	f640 138a 	movw	r3, #2442	; 0x98a
   11fe6:	f00f fbb1 	bl	2174c <assert_print>
   11fea:	4040      	eors	r0, r0
   11fec:	f380 8811 	msr	BASEPRI, r0
   11ff0:	f04f 0003 	mov.w	r0, #3
   11ff4:	df02      	svc	2
   11ff6:	e7d7      	b.n	11fa8 <ticker_stop_cb+0x18>
   11ff8:	20002f88 	.word	0x20002f88
   11ffc:	4bda12f7 	.word	0x4bda12f7
   12000:	000120a5 	.word	0x000120a5
   12004:	00028bc0 	.word	0x00028bc0
   12008:	00028c0c 	.word	0x00028c0c
   1200c:	0002866c 	.word	0x0002866c
   12010:	00028c00 	.word	0x00028c00

00012014 <disabled_cb>:
{
   12014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   12016:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   12018:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   1201a:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   1201c:	b1c7      	cbz	r7, 12050 <disabled_cb+0x3c>
	LL_ASSERT(adv->node_rx_cc_free);
   1201e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   12020:	2300      	movs	r3, #0
   12022:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   12024:	b33c      	cbz	r4, 12076 <disabled_cb+0x62>
	adv->node_rx_cc_free = NULL;
   12026:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12028:	2317      	movs	r3, #23
	adv->node_rx_cc_free = NULL;
   1202a:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1202c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1202e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12032:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   12034:	f104 001c 	add.w	r0, r4, #28
   12038:	2212      	movs	r2, #18
   1203a:	f011 fdf2 	bl	23c22 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1203e:	233c      	movs	r3, #60	; 0x3c
   12040:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   12042:	60a6      	str	r6, [r4, #8]
	ll_rx_put_sched(link, rx);
   12044:	4621      	mov	r1, r4
   12046:	4638      	mov	r0, r7
}
   12048:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_put_sched(link, rx);
   1204c:	f7ff babe 	b.w	115cc <ll_rx_put_sched>
	LL_ASSERT(adv->link_cc_free);
   12050:	4a10      	ldr	r2, [pc, #64]	; (12094 <disabled_cb+0x80>)
   12052:	4911      	ldr	r1, [pc, #68]	; (12098 <disabled_cb+0x84>)
   12054:	4811      	ldr	r0, [pc, #68]	; (1209c <disabled_cb+0x88>)
   12056:	f640 13d7 	movw	r3, #2519	; 0x9d7
   1205a:	f00f fb77 	bl	2174c <assert_print>
   1205e:	4040      	eors	r0, r0
   12060:	f380 8811 	msr	BASEPRI, r0
   12064:	f04f 0003 	mov.w	r0, #3
   12068:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   1206a:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   1206c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   1206e:	2300      	movs	r3, #0
   12070:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   12072:	2c00      	cmp	r4, #0
   12074:	d1d7      	bne.n	12026 <disabled_cb+0x12>
   12076:	4a07      	ldr	r2, [pc, #28]	; (12094 <disabled_cb+0x80>)
   12078:	4909      	ldr	r1, [pc, #36]	; (120a0 <disabled_cb+0x8c>)
   1207a:	4808      	ldr	r0, [pc, #32]	; (1209c <disabled_cb+0x88>)
   1207c:	f640 13db 	movw	r3, #2523	; 0x9db
   12080:	f00f fb64 	bl	2174c <assert_print>
   12084:	4040      	eors	r0, r0
   12086:	f380 8811 	msr	BASEPRI, r0
   1208a:	f04f 0003 	mov.w	r0, #3
   1208e:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   12090:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   12092:	e7c8      	b.n	12026 <disabled_cb+0x12>
   12094:	00028bc0 	.word	0x00028bc0
   12098:	00028c28 	.word	0x00028c28
   1209c:	0002866c 	.word	0x0002866c
   120a0:	00028c3c 	.word	0x00028c3c

000120a4 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   120a4:	b100      	cbz	r0, 120a8 <ticker_stop_op_cb+0x4>
   120a6:	4770      	bx	lr
	mfy.param = param;
   120a8:	4b0c      	ldr	r3, [pc, #48]	; (120dc <ticker_stop_op_cb+0x38>)
{
   120aa:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   120ac:	4602      	mov	r2, r0
   120ae:	460c      	mov	r4, r1
   120b0:	2002      	movs	r0, #2
   120b2:	2101      	movs	r1, #1
	mfy.param = param;
   120b4:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   120b6:	f7fc f877 	bl	e1a8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   120ba:	b900      	cbnz	r0, 120be <ticker_stop_op_cb+0x1a>
}
   120bc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   120be:	4a08      	ldr	r2, [pc, #32]	; (120e0 <ticker_stop_op_cb+0x3c>)
   120c0:	4908      	ldr	r1, [pc, #32]	; (120e4 <ticker_stop_op_cb+0x40>)
   120c2:	4809      	ldr	r0, [pc, #36]	; (120e8 <ticker_stop_op_cb+0x44>)
   120c4:	f640 13ab 	movw	r3, #2475	; 0x9ab
   120c8:	f00f fb40 	bl	2174c <assert_print>
   120cc:	4040      	eors	r0, r0
   120ce:	f380 8811 	msr	BASEPRI, r0
   120d2:	f04f 0003 	mov.w	r0, #3
   120d6:	df02      	svc	2
}
   120d8:	bd10      	pop	{r4, pc}
   120da:	bf00      	nop
   120dc:	200005cc 	.word	0x200005cc
   120e0:	00028bc0 	.word	0x00028bc0
   120e4:	00028b38 	.word	0x00028b38
   120e8:	0002866c 	.word	0x0002866c

000120ec <adv_disable>:
{
   120ec:	b538      	push	{r3, r4, r5, lr}
   120ee:	4604      	mov	r4, r0
   120f0:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   120f4:	b353      	cbz	r3, 1214c <adv_disable+0x60>
		mfy.param = &adv->lll;
   120f6:	4d17      	ldr	r5, [pc, #92]	; (12154 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   120f8:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   120fa:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   120fc:	b16b      	cbz	r3, 1211a <adv_disable+0x2e>
   120fe:	4a16      	ldr	r2, [pc, #88]	; (12158 <adv_disable+0x6c>)
   12100:	4916      	ldr	r1, [pc, #88]	; (1215c <adv_disable+0x70>)
   12102:	4817      	ldr	r0, [pc, #92]	; (12160 <adv_disable+0x74>)
   12104:	f44f 631c 	mov.w	r3, #2496	; 0x9c0
   12108:	f00f fb20 	bl	2174c <assert_print>
   1210c:	4040      	eors	r0, r0
   1210e:	f380 8811 	msr	BASEPRI, r0
   12112:	f04f 0003 	mov.w	r0, #3
   12116:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   12118:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   1211a:	4912      	ldr	r1, [pc, #72]	; (12164 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1211c:	4b0d      	ldr	r3, [pc, #52]	; (12154 <adv_disable+0x68>)
   1211e:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   12120:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12124:	4611      	mov	r1, r2
   12126:	2001      	movs	r0, #1
   12128:	f7fc f83e 	bl	e1a8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1212c:	b900      	cbnz	r0, 12130 <adv_disable+0x44>
}
   1212e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   12130:	4a09      	ldr	r2, [pc, #36]	; (12158 <adv_disable+0x6c>)
   12132:	490d      	ldr	r1, [pc, #52]	; (12168 <adv_disable+0x7c>)
   12134:	480a      	ldr	r0, [pc, #40]	; (12160 <adv_disable+0x74>)
   12136:	f640 13c7 	movw	r3, #2503	; 0x9c7
   1213a:	f00f fb07 	bl	2174c <assert_print>
   1213e:	4040      	eors	r0, r0
   12140:	f380 8811 	msr	BASEPRI, r0
   12144:	f04f 0003 	mov.w	r0, #3
   12148:	df02      	svc	2
}
   1214a:	bd38      	pop	{r3, r4, r5, pc}
   1214c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   12150:	f7ff bf60 	b.w	12014 <disabled_cb>
   12154:	200005bc 	.word	0x200005bc
   12158:	00028bc0 	.word	0x00028bc0
   1215c:	00028c54 	.word	0x00028c54
   12160:	0002866c 	.word	0x0002866c
   12164:	00012015 	.word	0x00012015
   12168:	00028b38 	.word	0x00028b38

0001216c <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1216c:	b900      	cbnz	r0, 12170 <ticker_update_op_cb+0x4>
   1216e:	4770      	bx	lr
{
   12170:	b510      	push	{r4, lr}
   12172:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12174:	f7ff fae8 	bl	11748 <ull_disable_mark_get>
   12178:	4284      	cmp	r4, r0
   1217a:	d00c      	beq.n	12196 <ticker_update_op_cb+0x2a>
   1217c:	4a06      	ldr	r2, [pc, #24]	; (12198 <ticker_update_op_cb+0x2c>)
   1217e:	4907      	ldr	r1, [pc, #28]	; (1219c <ticker_update_op_cb+0x30>)
   12180:	4807      	ldr	r0, [pc, #28]	; (121a0 <ticker_update_op_cb+0x34>)
   12182:	f640 137c 	movw	r3, #2428	; 0x97c
   12186:	f00f fae1 	bl	2174c <assert_print>
   1218a:	4040      	eors	r0, r0
   1218c:	f380 8811 	msr	BASEPRI, r0
   12190:	f04f 0003 	mov.w	r0, #3
   12194:	df02      	svc	2
}
   12196:	bd10      	pop	{r4, pc}
   12198:	00028bc0 	.word	0x00028bc0
   1219c:	00028c68 	.word	0x00028c68
   121a0:	0002866c 	.word	0x0002866c

000121a4 <init_set.constprop.0>:
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   121a4:	4b0f      	ldr	r3, [pc, #60]	; (121e4 <init_set.constprop.0+0x40>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   121a6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   121a8:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
   121ac:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   121b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   121b4:	f022 0202 	bic.w	r2, r2, #2
   121b8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   121ba:	f042 020e 	orr.w	r2, r2, #14
   121be:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   121c0:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   121c2:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   121c4:	f44f 6c00 	mov.w	ip, #2048	; 0x800
   121c8:	f8a3 c068 	strh.w	ip, [r3, #104]	; 0x68
	pdu->type = pdu_type;
   121cc:	700a      	strb	r2, [r1, #0]
	pdu->len = BDADDR_SIZE;
   121ce:	7048      	strb	r0, [r1, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   121d0:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   121d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	pdu->type = pdu_type;
   121d8:	2204      	movs	r2, #4
   121da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   121dc:	701a      	strb	r2, [r3, #0]
	pdu->len = BDADDR_SIZE;
   121de:	7058      	strb	r0, [r3, #1]
	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);

#if !defined(CONFIG_BT_CTLR_ADV_EXT)
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
   121e0:	4770      	bx	lr
   121e2:	bf00      	nop
   121e4:	20002f88 	.word	0x20002f88

000121e8 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   121e8:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   121ea:	4c1b      	ldr	r4, [pc, #108]	; (12258 <conn_release.constprop.0+0x70>)
   121ec:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   121ee:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   121f0:	b163      	cbz	r3, 1220c <conn_release.constprop.0+0x24>
   121f2:	4a1a      	ldr	r2, [pc, #104]	; (1225c <conn_release.constprop.0+0x74>)
   121f4:	491a      	ldr	r1, [pc, #104]	; (12260 <conn_release.constprop.0+0x78>)
   121f6:	481b      	ldr	r0, [pc, #108]	; (12264 <conn_release.constprop.0+0x7c>)
   121f8:	f640 2304 	movw	r3, #2564	; 0xa04
   121fc:	f00f faa6 	bl	2174c <assert_print>
   12200:	4040      	eors	r0, r0
   12202:	f380 8811 	msr	BASEPRI, r0
   12206:	f04f 0003 	mov.w	r0, #3
   1220a:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1220c:	f105 0160 	add.w	r1, r5, #96	; 0x60
   12210:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   12214:	f7fb ff48 	bl	e0a8 <memq_deinit>
	LL_ASSERT(link);
   12218:	4606      	mov	r6, r0
   1221a:	b170      	cbz	r0, 1223a <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   1221c:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1221e:	66ee      	str	r6, [r5, #108]	; 0x6c
	adv->lll.conn = NULL;
   12220:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   12222:	f000 fda3 	bl	12d6c <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   12226:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   12228:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   1222a:	f7ff f9bf 	bl	115ac <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   1222e:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   12230:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   12232:	f7ff f9af 	bl	11594 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   12236:	6625      	str	r5, [r4, #96]	; 0x60
}
   12238:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   1223a:	4a08      	ldr	r2, [pc, #32]	; (1225c <conn_release.constprop.0+0x74>)
   1223c:	490a      	ldr	r1, [pc, #40]	; (12268 <conn_release.constprop.0+0x80>)
   1223e:	4809      	ldr	r0, [pc, #36]	; (12264 <conn_release.constprop.0+0x7c>)
   12240:	f640 2306 	movw	r3, #2566	; 0xa06
   12244:	f00f fa82 	bl	2174c <assert_print>
   12248:	4040      	eors	r0, r0
   1224a:	f380 8811 	msr	BASEPRI, r0
   1224e:	f04f 0003 	mov.w	r0, #3
   12252:	df02      	svc	2
   12254:	e7e2      	b.n	1221c <conn_release.constprop.0+0x34>
   12256:	bf00      	nop
   12258:	20002f88 	.word	0x20002f88
   1225c:	00028bc0 	.word	0x00028bc0
   12260:	00028c98 	.word	0x00028c98
   12264:	0002866c 	.word	0x0002866c
   12268:	00028d9c 	.word	0x00028d9c

0001226c <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   1226c:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   1226e:	4c4f      	ldr	r4, [pc, #316]	; (123ac <disable.constprop.0+0x140>)
   12270:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   12274:	07d9      	lsls	r1, r3, #31
static inline uint8_t disable(uint8_t handle)
   12276:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   12278:	d55f      	bpl.n	1233a <disable.constprop.0+0xce>
	if (adv->lll.conn) {
   1227a:	6a23      	ldr	r3, [r4, #32]
   1227c:	b153      	cbz	r3, 12294 <disable.constprop.0+0x28>
		adv->lll.conn->periph.cancelled = 1U;
   1227e:	f893 2020 	ldrb.w	r2, [r3, #32]
   12282:	f042 0202 	orr.w	r2, r2, #2
   12286:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   1228a:	6a23      	ldr	r3, [r4, #32]
   1228c:	f893 3020 	ldrb.w	r3, [r3, #32]
   12290:	07da      	lsls	r2, r3, #31
   12292:	d467      	bmi.n	12364 <disable.constprop.0+0xf8>
	mark = ull_disable_mark(adv);
   12294:	4845      	ldr	r0, [pc, #276]	; (123ac <disable.constprop.0+0x140>)
   12296:	f7ff fa3f 	bl	11718 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   1229a:	4284      	cmp	r4, r0
   1229c:	d00c      	beq.n	122b8 <disable.constprop.0+0x4c>
   1229e:	4a44      	ldr	r2, [pc, #272]	; (123b0 <disable.constprop.0+0x144>)
   122a0:	4944      	ldr	r1, [pc, #272]	; (123b4 <disable.constprop.0+0x148>)
   122a2:	4845      	ldr	r0, [pc, #276]	; (123b8 <disable.constprop.0+0x14c>)
   122a4:	f640 23cf 	movw	r3, #2767	; 0xacf
   122a8:	f00f fa50 	bl	2174c <assert_print>
   122ac:	4040      	eors	r0, r0
   122ae:	f380 8811 	msr	BASEPRI, r0
   122b2:	f04f 0003 	mov.w	r0, #3
   122b6:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   122b8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   122bc:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   122be:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   122c0:	d50d      	bpl.n	122de <disable.constprop.0+0x72>
		ret_cb = TICKER_STATUS_BUSY;
   122c2:	2102      	movs	r1, #2
   122c4:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   122c6:	4b3d      	ldr	r3, [pc, #244]	; (123bc <disable.constprop.0+0x150>)
   122c8:	9500      	str	r5, [sp, #0]
   122ca:	2103      	movs	r1, #3
   122cc:	2201      	movs	r2, #1
   122ce:	2000      	movs	r0, #0
   122d0:	f7fd f838 	bl	f344 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   122d4:	4629      	mov	r1, r5
   122d6:	f7ff f9f7 	bl	116c8 <ull_ticker_status_take>
		if (ret) {
   122da:	2800      	cmp	r0, #0
   122dc:	d152      	bne.n	12384 <disable.constprop.0+0x118>
	ret_cb = TICKER_STATUS_BUSY;
   122de:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   122e0:	2103      	movs	r1, #3
   122e2:	4b36      	ldr	r3, [pc, #216]	; (123bc <disable.constprop.0+0x150>)
   122e4:	9500      	str	r5, [sp, #0]
   122e6:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   122e8:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   122ea:	f7fd f82b 	bl	f344 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   122ee:	4629      	mov	r1, r5
   122f0:	f7ff f9ea 	bl	116c8 <ull_ticker_status_take>
	if (ret) {
   122f4:	bb20      	cbnz	r0, 12340 <disable.constprop.0+0xd4>
	err = ull_disable(&adv->lll);
   122f6:	4832      	ldr	r0, [pc, #200]	; (123c0 <disable.constprop.0+0x154>)
   122f8:	f7ff fa4a 	bl	11790 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   122fc:	b108      	cbz	r0, 12302 <disable.constprop.0+0x96>
   122fe:	3078      	adds	r0, #120	; 0x78
   12300:	d132      	bne.n	12368 <disable.constprop.0+0xfc>
	mark = ull_disable_unmark(adv);
   12302:	482a      	ldr	r0, [pc, #168]	; (123ac <disable.constprop.0+0x140>)
   12304:	f7ff fa14 	bl	11730 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   12308:	4284      	cmp	r4, r0
   1230a:	d00c      	beq.n	12326 <disable.constprop.0+0xba>
   1230c:	4a28      	ldr	r2, [pc, #160]	; (123b0 <disable.constprop.0+0x144>)
   1230e:	4929      	ldr	r1, [pc, #164]	; (123b4 <disable.constprop.0+0x148>)
   12310:	4829      	ldr	r0, [pc, #164]	; (123b8 <disable.constprop.0+0x14c>)
   12312:	f640 23f1 	movw	r3, #2801	; 0xaf1
   12316:	f00f fa19 	bl	2174c <assert_print>
   1231a:	4040      	eors	r0, r0
   1231c:	f380 8811 	msr	BASEPRI, r0
   12320:	f04f 0003 	mov.w	r0, #3
   12324:	df02      	svc	2
	if (adv->lll.conn) {
   12326:	6a23      	ldr	r3, [r4, #32]
   12328:	b10b      	cbz	r3, 1232e <disable.constprop.0+0xc2>
		conn_release(adv);
   1232a:	f7ff ff5d 	bl	121e8 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   1232e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   12332:	f36f 0300 	bfc	r3, #0, #1
   12336:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
   1233a:	2000      	movs	r0, #0
}
   1233c:	b005      	add	sp, #20
   1233e:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   12340:	481a      	ldr	r0, [pc, #104]	; (123ac <disable.constprop.0+0x140>)
   12342:	f7ff f9f5 	bl	11730 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   12346:	4284      	cmp	r4, r0
   12348:	d00c      	beq.n	12364 <disable.constprop.0+0xf8>
   1234a:	4a19      	ldr	r2, [pc, #100]	; (123b0 <disable.constprop.0+0x144>)
   1234c:	4919      	ldr	r1, [pc, #100]	; (123b4 <disable.constprop.0+0x148>)
   1234e:	481a      	ldr	r0, [pc, #104]	; (123b8 <disable.constprop.0+0x14c>)
   12350:	f640 23e8 	movw	r3, #2792	; 0xae8
   12354:	f00f f9fa 	bl	2174c <assert_print>
   12358:	4040      	eors	r0, r0
   1235a:	f380 8811 	msr	BASEPRI, r0
   1235e:	f04f 0003 	mov.w	r0, #3
   12362:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   12364:	200c      	movs	r0, #12
   12366:	e7e9      	b.n	1233c <disable.constprop.0+0xd0>
	LL_ASSERT(!err || (err == -EALREADY));
   12368:	4a11      	ldr	r2, [pc, #68]	; (123b0 <disable.constprop.0+0x144>)
   1236a:	4916      	ldr	r1, [pc, #88]	; (123c4 <disable.constprop.0+0x158>)
   1236c:	4812      	ldr	r0, [pc, #72]	; (123b8 <disable.constprop.0+0x14c>)
   1236e:	f640 23ee 	movw	r3, #2798	; 0xaee
   12372:	f00f f9eb 	bl	2174c <assert_print>
   12376:	4040      	eors	r0, r0
   12378:	f380 8811 	msr	BASEPRI, r0
   1237c:	f04f 0003 	mov.w	r0, #3
   12380:	df02      	svc	2
   12382:	e7be      	b.n	12302 <disable.constprop.0+0x96>
			mark = ull_disable_unmark(adv);
   12384:	4809      	ldr	r0, [pc, #36]	; (123ac <disable.constprop.0+0x140>)
   12386:	f7ff f9d3 	bl	11730 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   1238a:	4284      	cmp	r4, r0
   1238c:	d0ea      	beq.n	12364 <disable.constprop.0+0xf8>
   1238e:	4a08      	ldr	r2, [pc, #32]	; (123b0 <disable.constprop.0+0x144>)
   12390:	4908      	ldr	r1, [pc, #32]	; (123b4 <disable.constprop.0+0x148>)
   12392:	4809      	ldr	r0, [pc, #36]	; (123b8 <disable.constprop.0+0x14c>)
   12394:	f640 23da 	movw	r3, #2778	; 0xada
   12398:	f00f f9d8 	bl	2174c <assert_print>
   1239c:	4040      	eors	r0, r0
   1239e:	f380 8811 	msr	BASEPRI, r0
   123a2:	f04f 0003 	mov.w	r0, #3
   123a6:	df02      	svc	2
   123a8:	e7dc      	b.n	12364 <disable.constprop.0+0xf8>
   123aa:	bf00      	nop
   123ac:	20002f88 	.word	0x20002f88
   123b0:	00028bc0 	.word	0x00028bc0
   123b4:	00028cac 	.word	0x00028cac
   123b8:	0002866c 	.word	0x0002866c
   123bc:	00010cb5 	.word	0x00010cb5
   123c0:	20002fa4 	.word	0x20002fa4
   123c4:	00028cb8 	.word	0x00028cb8

000123c8 <adv_time_get.constprop.0.isra.0>:
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   123c8:	7803      	ldrb	r3, [r0, #0]
   123ca:	f003 030f 	and.w	r3, r3, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   123ce:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   123d2:	2b02      	cmp	r3, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   123d4:	fa1f fc8c 	uxth.w	ip, ip
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   123d8:	d025      	beq.n	12426 <adv_time_get.constprop.0.isra.0+0x5e>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   123da:	2b01      	cmp	r3, #1
   123dc:	d00d      	beq.n	123fa <adv_time_get.constprop.0.isra.0+0x32>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   123de:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   123e0:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   123e2:	b19b      	cbz	r3, 1240c <adv_time_get.constprop.0.isra.0+0x44>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   123e4:	2b06      	cmp	r3, #6
   123e6:	d011      	beq.n	1240c <adv_time_get.constprop.0.isra.0+0x44>
   123e8:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   123ec:	fb13 f30c 	smulbb	r3, r3, ip
   123f0:	f240 208f 	movw	r0, #655	; 0x28f
			time_us += (BYTES2US(adv_size, PHY_1M) +
   123f4:	4418      	add	r0, r3
   123f6:	b280      	uxth	r0, r0
}
   123f8:	4770      	bx	lr
   123fa:	f240 2316 	movw	r3, #534	; 0x216
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   123fe:	fb13 f30c 	smulbb	r3, r3, ip
   12402:	f240 401f 	movw	r0, #1055	; 0x41f
			time_us += (BYTES2US(adv_size, PHY_1M) +
   12406:	4418      	add	r0, r3
   12408:	b280      	uxth	r0, r0
}
   1240a:	4770      	bx	lr
				adv_size += pdu->len;
   1240c:	7840      	ldrb	r0, [r0, #1]
   1240e:	3010      	adds	r0, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   12410:	00c0      	lsls	r0, r0, #3
   12412:	f201 3157 	addw	r1, r1, #855	; 0x357
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   12416:	f500 73b3 	add.w	r3, r0, #358	; 0x166
   1241a:	fb13 f30c 	smulbb	r3, r3, ip
   1241e:	4408      	add	r0, r1
			time_us += (BYTES2US(adv_size, PHY_1M) +
   12420:	4418      	add	r0, r3
   12422:	b280      	uxth	r0, r0
}
   12424:	4770      	bx	lr
			adv_size += pdu->len;
   12426:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   12428:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   1242c:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   12430:	0040      	lsls	r0, r0, #1
   12432:	f101 0310 	add.w	r3, r1, #16
   12436:	00db      	lsls	r3, r3, #3
   12438:	f200 1077 	addw	r0, r0, #375	; 0x177
   1243c:	fb03 0202 	mla	r2, r3, r2, r0
   12440:	b290      	uxth	r0, r2
   12442:	4770      	bx	lr

00012444 <ticker_cb>:
{
   12444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12448:	461d      	mov	r5, r3
   1244a:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   1244c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12450:	429d      	cmp	r5, r3
{
   12452:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   12456:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   12458:	d018      	beq.n	1248c <ticker_cb+0x48>
	return ++hdr->ref;
   1245a:	7823      	ldrb	r3, [r4, #0]
   1245c:	3301      	adds	r3, #1
   1245e:	b2db      	uxtb	r3, r3
   12460:	4607      	mov	r7, r0
   12462:	4616      	mov	r6, r2
   12464:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   12466:	2b00      	cmp	r3, #0
   12468:	d064      	beq.n	12534 <ticker_cb+0xf0>
		p.ticks_at_expire = ticks_at_expire;
   1246a:	4939      	ldr	r1, [pc, #228]	; (12550 <ticker_cb+0x10c>)
		mfy.param = &p;
   1246c:	4b39      	ldr	r3, [pc, #228]	; (12554 <ticker_cb+0x110>)
		p.lazy = lazy;
   1246e:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   12470:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12474:	2200      	movs	r2, #0
		p.param = lll;
   12476:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   12478:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   1247c:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   12480:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12482:	2001      	movs	r0, #1
   12484:	4611      	mov	r1, r2
   12486:	f7fb fe8f 	bl	e1a8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1248a:	b938      	cbnz	r0, 1249c <ticker_cb+0x58>
	if (!lll->is_hdcd)
   1248c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   12490:	f010 0501 	ands.w	r5, r0, #1
   12494:	d014      	beq.n	124c0 <ticker_cb+0x7c>
}
   12496:	b00a      	add	sp, #40	; 0x28
   12498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   1249c:	4a2e      	ldr	r2, [pc, #184]	; (12558 <ticker_cb+0x114>)
   1249e:	492f      	ldr	r1, [pc, #188]	; (1255c <ticker_cb+0x118>)
   124a0:	482f      	ldr	r0, [pc, #188]	; (12560 <ticker_cb+0x11c>)
   124a2:	f640 1349 	movw	r3, #2377	; 0x949
   124a6:	f00f f951 	bl	2174c <assert_print>
   124aa:	4040      	eors	r0, r0
   124ac:	f380 8811 	msr	BASEPRI, r0
   124b0:	f04f 0003 	mov.w	r0, #3
   124b4:	df02      	svc	2
	if (!lll->is_hdcd)
   124b6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   124ba:	f010 0501 	ands.w	r5, r0, #1
   124be:	d1ea      	bne.n	12496 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   124c0:	2104      	movs	r1, #4
   124c2:	a809      	add	r0, sp, #36	; 0x24
   124c4:	f006 f80c 	bl	184e0 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   124c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   124ca:	4a26      	ldr	r2, [pc, #152]	; (12564 <ticker_cb+0x120>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   124cc:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   124ce:	fba2 1203 	umull	r1, r2, r2, r3
   124d2:	1a99      	subs	r1, r3, r2
   124d4:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   124d8:	0a12      	lsrs	r2, r2, #8
   124da:	f240 1147 	movw	r1, #327	; 0x147
   124de:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   124e2:	4a21      	ldr	r2, [pc, #132]	; (12568 <ticker_cb+0x124>)
   124e4:	4921      	ldr	r1, [pc, #132]	; (1256c <ticker_cb+0x128>)
   124e6:	1aa2      	subs	r2, r4, r2
   124e8:	0892      	lsrs	r2, r2, #2
   124ea:	fba1 1202 	umull	r1, r2, r1, r2
   124ee:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   124f0:	491f      	ldr	r1, [pc, #124]	; (12570 <ticker_cb+0x12c>)
   124f2:	3202      	adds	r2, #2
   124f4:	e9cd 5104 	strd	r5, r1, [sp, #16]
	random_delay += (ticks_delay_window_offset + 1);
   124f8:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   124fa:	e9cd 5502 	strd	r5, r5, [sp, #8]
   124fe:	e9cd 5500 	strd	r5, r5, [sp]
   12502:	b2d2      	uxtb	r2, r2
   12504:	2101      	movs	r1, #1
   12506:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   12508:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1250a:	f7fc ff03 	bl	f314 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1250e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   12512:	d0c0      	beq.n	12496 <ticker_cb+0x52>
   12514:	4a10      	ldr	r2, [pc, #64]	; (12558 <ticker_cb+0x114>)
   12516:	4917      	ldr	r1, [pc, #92]	; (12574 <ticker_cb+0x130>)
   12518:	4811      	ldr	r0, [pc, #68]	; (12560 <ticker_cb+0x11c>)
   1251a:	f240 73b6 	movw	r3, #1974	; 0x7b6
   1251e:	f00f f915 	bl	2174c <assert_print>
   12522:	4040      	eors	r0, r0
   12524:	f380 8811 	msr	BASEPRI, r0
   12528:	f04f 0003 	mov.w	r0, #3
   1252c:	df02      	svc	2
}
   1252e:	b00a      	add	sp, #40	; 0x28
   12530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(ref);
   12534:	4a08      	ldr	r2, [pc, #32]	; (12558 <ticker_cb+0x114>)
   12536:	4910      	ldr	r1, [pc, #64]	; (12578 <ticker_cb+0x134>)
   12538:	4809      	ldr	r0, [pc, #36]	; (12560 <ticker_cb+0x11c>)
   1253a:	f640 133c 	movw	r3, #2364	; 0x93c
   1253e:	f00f f905 	bl	2174c <assert_print>
   12542:	4040      	eors	r0, r0
   12544:	f380 8811 	msr	BASEPRI, r0
   12548:	f04f 0003 	mov.w	r0, #3
   1254c:	df02      	svc	2
   1254e:	e78c      	b.n	1246a <ticker_cb+0x26>
   12550:	20002f5c 	.word	0x20002f5c
   12554:	200005ac 	.word	0x200005ac
   12558:	00028bc0 	.word	0x00028bc0
   1255c:	00028b38 	.word	0x00028b38
   12560:	0002866c 	.word	0x0002866c
   12564:	90d4f121 	.word	0x90d4f121
   12568:	20002f88 	.word	0x20002f88
   1256c:	4bda12f7 	.word	0x4bda12f7
   12570:	0001216d 	.word	0x0001216d
   12574:	00028cd4 	.word	0x00028cd4
   12578:	00028cd0 	.word	0x00028cd0

0001257c <ll_adv_params_set>:
{
   1257c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
   12580:	4c6c      	ldr	r4, [pc, #432]	; (12734 <ll_adv_params_set+0x1b8>)
{
   12582:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   12584:	4b6c      	ldr	r3, [pc, #432]	; (12738 <ll_adv_params_set+0x1bc>)
	if (!adv || adv->is_enabled) {
   12586:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   1258a:	4686      	mov	lr, r0
   1258c:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1258e:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   12592:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   12594:	f016 0601 	ands.w	r6, r6, #1
{
   12598:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   1259c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   125a0:	9000      	str	r0, [sp, #0]
   125a2:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   125a6:	f040 809c 	bne.w	126e2 <ll_adv_params_set+0x166>
	adv->lll.chan_map = chan_map;
   125aa:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   125ac:	4615      	mov	r5, r2
   125ae:	f008 0207 	and.w	r2, r8, #7
   125b2:	f003 0303 	and.w	r3, r3, #3
   125b6:	0052      	lsls	r2, r2, #1
   125b8:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
   125bc:	f021 0102 	bic.w	r1, r1, #2
   125c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   125c4:	430a      	orrs	r2, r1
   125c6:	84a2      	strh	r2, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   125c8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   125cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		adv->interval = 0;
   125d0:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
   125d4:	f10c 0308 	add.w	r3, ip, #8
   125d8:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
		adv->interval = 0;
   125dc:	bf08      	it	eq
   125de:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   125e2:	eb0d 0c03 	add.w	ip, sp, r3
   125e6:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
	pdu_type_prev = pdu->type;
   125ea:	f898 2000 	ldrb.w	r2, [r8]
	pdu->type = pdu_adv_type[adv_type];
   125ee:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
   125f2:	f022 001f 	bic.w	r0, r2, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   125f6:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   125fa:	f003 030f 	and.w	r3, r3, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   125fe:	bf0c      	ite	eq
   12600:	2101      	moveq	r1, #1
   12602:	2100      	movne	r1, #0
   12604:	4303      	orrs	r3, r0
   12606:	f361 1345 	bfi	r3, r1, #5, #1
   1260a:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1260e:	f003 030f 	and.w	r3, r3, #15
   12612:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   12614:	f002 020f 	and.w	r2, r2, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   12618:	d02e      	beq.n	12678 <ll_adv_params_set+0xfc>
	} else if (pdu->len == 0) {
   1261a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1261e:	b9f3      	cbnz	r3, 1265e <ll_adv_params_set+0xe2>
		pdu->tx_addr = own_addr_type & 0x1;
   12620:	f898 3000 	ldrb.w	r3, [r8]
   12624:	f005 0501 	and.w	r5, r5, #1
   12628:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
   1262c:	f36f 13c7 	bfc	r3, #7, #1
   12630:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   12634:	2306      	movs	r3, #6
   12636:	f888 3001 	strb.w	r3, [r8, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1263a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1263e:	61e4      	str	r4, [r4, #28]
   12640:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12644:	01ad      	lsls	r5, r5, #6
   12646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
   12648:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1264a:	f045 0504 	orr.w	r5, r5, #4
   1264e:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   12650:	b90a      	cbnz	r2, 12656 <ll_adv_params_set+0xda>
			pdu->len = BDADDR_SIZE;
   12652:	2206      	movs	r2, #6
   12654:	705a      	strb	r2, [r3, #1]
}
   12656:	4630      	mov	r0, r6
   12658:	b003      	add	sp, #12
   1265a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   1265e:	2a01      	cmp	r2, #1
   12660:	d031      	beq.n	126c6 <ll_adv_params_set+0x14a>
		pdu->tx_addr = own_addr_type & 0x1;
   12662:	f898 3000 	ldrb.w	r3, [r8]
   12666:	f005 0501 	and.w	r5, r5, #1
   1266a:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
   1266e:	f36f 13c7 	bfc	r3, #7, #1
   12672:	f888 3000 	strb.w	r3, [r8]
   12676:	e7e0      	b.n	1263a <ll_adv_params_set+0xbe>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   12678:	2a01      	cmp	r2, #1
   1267a:	d00f      	beq.n	1269c <ll_adv_params_set+0x120>
		if (pdu->len == 0U) {
   1267c:	f898 2001 	ldrb.w	r2, [r8, #1]
   12680:	bba2      	cbnz	r2, 126ec <ll_adv_params_set+0x170>
			adv->ad_data_backup.len = 0U;
   12682:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12686:	f898 3000 	ldrb.w	r3, [r8]
   1268a:	f003 030f 	and.w	r3, r3, #15
   1268e:	2b01      	cmp	r3, #1
   12690:	d004      	beq.n	1269c <ll_adv_params_set+0x120>
	} else if (pdu->len == 0) {
   12692:	f898 3001 	ldrb.w	r3, [r8, #1]
   12696:	2b00      	cmp	r3, #0
   12698:	d0c2      	beq.n	12620 <ll_adv_params_set+0xa4>
   1269a:	e7e2      	b.n	12662 <ll_adv_params_set+0xe6>
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   1269c:	f108 0908 	add.w	r9, r8, #8
		pdu->tx_addr = own_addr_type & 0x1;
   126a0:	f898 3000 	ldrb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   126a4:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu->tx_addr = own_addr_type & 0x1;
   126a6:	f005 0501 	and.w	r5, r5, #1
   126aa:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   126ae:	f367 13c7 	bfi	r3, r7, #7, #1
   126b2:	f888 3000 	strb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   126b6:	4648      	mov	r0, r9
   126b8:	2206      	movs	r2, #6
   126ba:	f011 faa7 	bl	23c0c <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   126be:	230c      	movs	r3, #12
   126c0:	f888 3001 	strb.w	r3, [r8, #1]
   126c4:	e7b9      	b.n	1263a <ll_adv_params_set+0xbe>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   126c6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   126ca:	f104 0141 	add.w	r1, r4, #65	; 0x41
   126ce:	f108 0008 	add.w	r0, r8, #8
   126d2:	f011 fa9b 	bl	23c0c <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   126d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   126da:	3306      	adds	r3, #6
   126dc:	f888 3001 	strb.w	r3, [r8, #1]
   126e0:	e7bf      	b.n	12662 <ll_adv_params_set+0xe6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   126e2:	260c      	movs	r6, #12
}
   126e4:	4630      	mov	r0, r6
   126e6:	b003      	add	sp, #12
   126e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LL_ASSERT(pdu->len >=
   126ec:	2a05      	cmp	r2, #5
   126ee:	d910      	bls.n	12712 <ll_adv_params_set+0x196>
			adv->ad_data_backup.len = pdu->len -
   126f0:	3a06      	subs	r2, #6
   126f2:	b2d2      	uxtb	r2, r2
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   126f4:	f108 0908 	add.w	r9, r8, #8
   126f8:	4810      	ldr	r0, [pc, #64]	; (1273c <ll_adv_params_set+0x1c0>)
			adv->ad_data_backup.len = pdu->len -
   126fa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   126fe:	4649      	mov	r1, r9
   12700:	f011 fa84 	bl	23c0c <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12704:	f898 3000 	ldrb.w	r3, [r8]
   12708:	f003 030f 	and.w	r3, r3, #15
   1270c:	2b01      	cmp	r3, #1
   1270e:	d1c0      	bne.n	12692 <ll_adv_params_set+0x116>
   12710:	e7c6      	b.n	126a0 <ll_adv_params_set+0x124>
			LL_ASSERT(pdu->len >=
   12712:	4a0b      	ldr	r2, [pc, #44]	; (12740 <ll_adv_params_set+0x1c4>)
   12714:	490b      	ldr	r1, [pc, #44]	; (12744 <ll_adv_params_set+0x1c8>)
   12716:	480c      	ldr	r0, [pc, #48]	; (12748 <ll_adv_params_set+0x1cc>)
   12718:	f240 13b1 	movw	r3, #433	; 0x1b1
   1271c:	f00f f816 	bl	2174c <assert_print>
   12720:	4040      	eors	r0, r0
   12722:	f380 8811 	msr	BASEPRI, r0
   12726:	f04f 0003 	mov.w	r0, #3
   1272a:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   1272c:	f898 2001 	ldrb.w	r2, [r8, #1]
   12730:	e7de      	b.n	126f0 <ll_adv_params_set+0x174>
   12732:	bf00      	nop
   12734:	20002f88 	.word	0x20002f88
   12738:	00027b98 	.word	0x00027b98
   1273c:	20002fc9 	.word	0x20002fc9
   12740:	00028bc0 	.word	0x00028bc0
   12744:	00028d0c 	.word	0x00028d0c
   12748:	0002866c 	.word	0x0002866c

0001274c <ull_adv_init>:
{
   1274c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1274e:	4c06      	ldr	r4, [pc, #24]	; (12768 <ull_adv_init+0x1c>)
   12750:	4620      	mov	r0, r4
   12752:	f006 faeb 	bl	18d2c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   12756:	f104 000c 	add.w	r0, r4, #12
   1275a:	f006 fae7 	bl	18d2c <lll_adv_data_init>
	init_set(&ll_adv[0]);
   1275e:	f7ff fd21 	bl	121a4 <init_set.constprop.0>
}
   12762:	2000      	movs	r0, #0
   12764:	bd10      	pop	{r4, pc}
   12766:	bf00      	nop
   12768:	20002fb0 	.word	0x20002fb0

0001276c <ull_adv_reset>:
{
   1276c:	b508      	push	{r3, lr}
		(void)disable(handle);
   1276e:	f7ff fd7d 	bl	1226c <disable.constprop.0>
}
   12772:	2000      	movs	r0, #0
   12774:	bd08      	pop	{r3, pc}
   12776:	bf00      	nop

00012778 <ull_adv_reset_finalize>:
{
   12778:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   1277a:	4c09      	ldr	r4, [pc, #36]	; (127a0 <ull_adv_reset_finalize+0x28>)
		lll_adv_data_reset(&lll->scan_rsp);
   1277c:	f104 050c 	add.w	r5, r4, #12
		lll_adv_data_reset(&lll->adv_data);
   12780:	4620      	mov	r0, r4
   12782:	f006 fae3 	bl	18d4c <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   12786:	4628      	mov	r0, r5
   12788:	f006 fae0 	bl	18d4c <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1278c:	4620      	mov	r0, r4
   1278e:	f006 facd 	bl	18d2c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   12792:	4628      	mov	r0, r5
   12794:	f006 faca 	bl	18d2c <lll_adv_data_init>
	init_set(&ll_adv[0]);
   12798:	f7ff fd04 	bl	121a4 <init_set.constprop.0>
}
   1279c:	2000      	movs	r0, #0
   1279e:	bd38      	pop	{r3, r4, r5, pc}
   127a0:	20002fb0 	.word	0x20002fb0

000127a4 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   127a4:	4a04      	ldr	r2, [pc, #16]	; (127b8 <ull_adv_handle_get+0x14>)
   127a6:	4b05      	ldr	r3, [pc, #20]	; (127bc <ull_adv_handle_get+0x18>)
   127a8:	1a80      	subs	r0, r0, r2
   127aa:	0880      	lsrs	r0, r0, #2
   127ac:	fba3 3000 	umull	r3, r0, r3, r0
}
   127b0:	f3c0 00cf 	ubfx	r0, r0, #3, #16
   127b4:	4770      	bx	lr
   127b6:	bf00      	nop
   127b8:	20002f88 	.word	0x20002f88
   127bc:	4bda12f7 	.word	0x4bda12f7

000127c0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   127c0:	4a04      	ldr	r2, [pc, #16]	; (127d4 <ull_adv_lll_handle_get+0x14>)
   127c2:	6800      	ldr	r0, [r0, #0]
   127c4:	4b04      	ldr	r3, [pc, #16]	; (127d8 <ull_adv_lll_handle_get+0x18>)
   127c6:	1a80      	subs	r0, r0, r2
   127c8:	0880      	lsrs	r0, r0, #2
   127ca:	fba3 3000 	umull	r3, r0, r3, r0
}
   127ce:	f3c0 00cf 	ubfx	r0, r0, #3, #16
   127d2:	4770      	bx	lr
   127d4:	20002f88 	.word	0x20002f88
   127d8:	4bda12f7 	.word	0x4bda12f7

000127dc <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   127dc:	b928      	cbnz	r0, 127ea <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   127de:	4b04      	ldr	r3, [pc, #16]	; (127f0 <ull_adv_is_enabled+0x14>)
   127e0:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   127e4:	f000 0001 	and.w	r0, r0, #1
   127e8:	4770      	bx	lr
   127ea:	2000      	movs	r0, #0
}
   127ec:	4770      	bx	lr
   127ee:	bf00      	nop
   127f0:	20002f88 	.word	0x20002f88

000127f4 <ull_adv_data_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
   127f4:	291f      	cmp	r1, #31
   127f6:	d857      	bhi.n	128a8 <ull_adv_data_set+0xb4>
{
   127f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   127fc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   12800:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   12804:	b082      	sub	sp, #8
   12806:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   12808:	783b      	ldrb	r3, [r7, #0]
   1280a:	f003 030f 	and.w	r3, r3, #15
   1280e:	2b01      	cmp	r3, #1
   12810:	460e      	mov	r6, r1
   12812:	4605      	mov	r5, r0
   12814:	4690      	mov	r8, r2
   12816:	d049      	beq.n	128ac <ull_adv_data_set+0xb8>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   12818:	f10d 0107 	add.w	r1, sp, #7
   1281c:	3028      	adds	r0, #40	; 0x28
   1281e:	f006 fb07 	bl	18e30 <lll_adv_pdu_alloc>
	pdu->type = prev->type;
   12822:	783a      	ldrb	r2, [r7, #0]
   12824:	7803      	ldrb	r3, [r0, #0]
   12826:	f002 020f 	and.w	r2, r2, #15
   1282a:	f023 031f 	bic.w	r3, r3, #31
   1282e:	4313      	orrs	r3, r2
   12830:	7003      	strb	r3, [r0, #0]
		pdu->chan_sel = prev->chan_sel;
   12832:	783b      	ldrb	r3, [r7, #0]
   12834:	7802      	ldrb	r2, [r0, #0]
   12836:	f3c3 1340 	ubfx	r3, r3, #5, #1
   1283a:	f363 1245 	bfi	r2, r3, #5, #1
   1283e:	7002      	strb	r2, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   12840:	783b      	ldrb	r3, [r7, #0]
   12842:	b2d2      	uxtb	r2, r2
   12844:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->rx_addr = prev->rx_addr;
   12848:	4639      	mov	r1, r7
	pdu->tx_addr = prev->tx_addr;
   1284a:	f363 1286 	bfi	r2, r3, #6, #1
   1284e:	7002      	strb	r2, [r0, #0]
	pdu->rx_addr = prev->rx_addr;
   12850:	f811 3b02 	ldrb.w	r3, [r1], #2
   12854:	b2d2      	uxtb	r2, r2
   12856:	09db      	lsrs	r3, r3, #7
   12858:	f363 12c7 	bfi	r2, r3, #7, #1
   1285c:	4604      	mov	r4, r0
   1285e:	f800 2b02 	strb.w	r2, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   12862:	2206      	movs	r2, #6
   12864:	f011 f9d2 	bl	23c0c <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   12868:	4632      	mov	r2, r6
   1286a:	4641      	mov	r1, r8
   1286c:	f104 0008 	add.w	r0, r4, #8
	pdu->len = BDADDR_SIZE + len;
   12870:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   12872:	f011 f9cb 	bl	23c0c <memcpy>
	pdu->len = BDADDR_SIZE + len;
   12876:	7066      	strb	r6, [r4, #1]
	if (adv->is_enabled) {
   12878:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   1287c:	07db      	lsls	r3, r3, #31
   1287e:	d407      	bmi.n	12890 <ull_adv_data_set+0x9c>
	pdu->last = idx;
   12880:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12884:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
		return 0;
   12888:	2000      	movs	r0, #0
}
   1288a:	b002      	add	sp, #8
   1288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12890:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   12894:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   12898:	4621      	mov	r1, r4
   1289a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1289c:	4628      	mov	r0, r5
   1289e:	f7ee fc2f 	bl	1100 <ull_adv_time_update>
		if (err) {
   128a2:	2800      	cmp	r0, #0
   128a4:	d0ec      	beq.n	12880 <ull_adv_data_set+0x8c>
   128a6:	e7f0      	b.n	1288a <ull_adv_data_set+0x96>
		return BT_HCI_ERR_INVALID_PARAM;
   128a8:	2012      	movs	r0, #18
}
   128aa:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   128ac:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   128b0:	460a      	mov	r2, r1
   128b2:	3041      	adds	r0, #65	; 0x41
   128b4:	4641      	mov	r1, r8
   128b6:	f011 f9a9 	bl	23c0c <memcpy>
		return 0;
   128ba:	e7e5      	b.n	12888 <ull_adv_data_set+0x94>

000128bc <ll_adv_data_set>:
{
   128bc:	4603      	mov	r3, r0
   128be:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   128c0:	4801      	ldr	r0, [pc, #4]	; (128c8 <ll_adv_data_set+0xc>)
   128c2:	4619      	mov	r1, r3
   128c4:	f7ff bf96 	b.w	127f4 <ull_adv_data_set>
   128c8:	20002f88 	.word	0x20002f88

000128cc <ull_scan_rsp_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
   128cc:	291f      	cmp	r1, #31
   128ce:	d860      	bhi.n	12992 <ull_scan_rsp_set+0xc6>
{
   128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128d4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   128d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   128dc:	b082      	sub	sp, #8
   128de:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	if (!prev) {
   128e0:	460f      	mov	r7, r1
   128e2:	4604      	mov	r4, r0
   128e4:	4690      	mov	r8, r2
		err = lll_adv_data_init(&adv->lll.scan_rsp);
   128e6:	f100 0534 	add.w	r5, r0, #52	; 0x34
	if (!prev) {
   128ea:	2e00      	cmp	r6, #0
   128ec:	d041      	beq.n	12972 <ull_scan_rsp_set+0xa6>
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   128ee:	4628      	mov	r0, r5
   128f0:	f10d 0107 	add.w	r1, sp, #7
   128f4:	f006 fa9c 	bl	18e30 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   128f8:	7803      	ldrb	r3, [r0, #0]
   128fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	pdu->tx_addr = prev->tx_addr;
   128fe:	4631      	mov	r1, r6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12900:	f043 0304 	orr.w	r3, r3, #4
   12904:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   12906:	f811 2b02 	ldrb.w	r2, [r1], #2
   1290a:	b2db      	uxtb	r3, r3
   1290c:	f3c2 1280 	ubfx	r2, r2, #6, #1
   12910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12914:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   12918:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   1291a:	1dbb      	adds	r3, r7, #6
   1291c:	7043      	strb	r3, [r0, #1]
   1291e:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   12920:	2206      	movs	r2, #6
   12922:	3002      	adds	r0, #2
   12924:	f011 f972 	bl	23c0c <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   12928:	463a      	mov	r2, r7
   1292a:	4641      	mov	r1, r8
   1292c:	f105 0008 	add.w	r0, r5, #8
   12930:	f011 f96c 	bl	23c0c <memcpy>
	if (adv->is_enabled) {
   12934:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   12938:	07da      	lsls	r2, r3, #31
   1293a:	d407      	bmi.n	1294c <ull_scan_rsp_set+0x80>
	pdu->last = idx;
   1293c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   12944:	2000      	movs	r0, #0
}
   12946:	b002      	add	sp, #8
   12948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1294c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   12950:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   12954:	2341      	movs	r3, #65	; 0x41
   12956:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   12958:	780a      	ldrb	r2, [r1, #0]
   1295a:	f002 020f 	and.w	r2, r2, #15
   1295e:	40d3      	lsrs	r3, r2
   12960:	07db      	lsls	r3, r3, #31
   12962:	d5eb      	bpl.n	1293c <ull_scan_rsp_set+0x70>
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   12964:	462a      	mov	r2, r5
   12966:	4620      	mov	r0, r4
   12968:	f7ee fbca 	bl	1100 <ull_adv_time_update>
			if (err) {
   1296c:	2800      	cmp	r0, #0
   1296e:	d0e5      	beq.n	1293c <ull_scan_rsp_set+0x70>
   12970:	e7e9      	b.n	12946 <ull_scan_rsp_set+0x7a>
		err = lll_adv_data_init(&adv->lll.scan_rsp);
   12972:	4628      	mov	r0, r5
   12974:	f006 f9da 	bl	18d2c <lll_adv_data_init>
		if (err) {
   12978:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   1297c:	d1e3      	bne.n	12946 <ull_scan_rsp_set+0x7a>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1297e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   12982:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   12986:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	pdu->type = pdu_type;
   12988:	2304      	movs	r3, #4
   1298a:	7033      	strb	r3, [r6, #0]
	pdu->len = BDADDR_SIZE;
   1298c:	2306      	movs	r3, #6
   1298e:	7073      	strb	r3, [r6, #1]
}
   12990:	e7ad      	b.n	128ee <ull_scan_rsp_set+0x22>
		return BT_HCI_ERR_INVALID_PARAM;
   12992:	2012      	movs	r0, #18
}
   12994:	4770      	bx	lr
   12996:	bf00      	nop

00012998 <ll_adv_scan_rsp_set>:
{
   12998:	4603      	mov	r3, r0
   1299a:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   1299c:	4801      	ldr	r0, [pc, #4]	; (129a4 <ll_adv_scan_rsp_set+0xc>)
   1299e:	4619      	mov	r1, r3
   129a0:	f7ff bf94 	b.w	128cc <ull_scan_rsp_set>
   129a4:	20002f88 	.word	0x20002f88

000129a8 <init_reset>:
{
   129a8:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   129aa:	4b13      	ldr	r3, [pc, #76]	; (129f8 <init_reset+0x50>)
   129ac:	4813      	ldr	r0, [pc, #76]	; (129fc <init_reset+0x54>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   129ae:	4c14      	ldr	r4, [pc, #80]	; (12a00 <init_reset+0x58>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   129b0:	2201      	movs	r2, #1
   129b2:	f44f 71cc 	mov.w	r1, #408	; 0x198
   129b6:	f7fb faeb 	bl	df90 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONN_DATA_BUFFERS,
   129ba:	4b12      	ldr	r3, [pc, #72]	; (12a04 <init_reset+0x5c>)
   129bc:	2203      	movs	r2, #3
   129be:	1d18      	adds	r0, r3, #4
   129c0:	2124      	movs	r1, #36	; 0x24
   129c2:	f7fb fae5 	bl	df90 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   129c6:	4b10      	ldr	r3, [pc, #64]	; (12a08 <init_reset+0x60>)
   129c8:	2207      	movs	r2, #7
   129ca:	1d18      	adds	r0, r3, #4
   129cc:	2108      	movs	r1, #8
   129ce:	f7fb fadf 	bl	df90 <mem_init>
	ull_cp_init();
   129d2:	f002 fa95 	bl	14f00 <ull_cp_init>
	}
}

static inline void cpr_active_reset(void)
{
	conn_upd_curr = NULL;
   129d6:	4a0d      	ldr	r2, [pc, #52]	; (12a0c <init_reset+0x64>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   129d8:	4b0d      	ldr	r3, [pc, #52]	; (12a10 <init_reset+0x68>)
	default_phy_tx |= PHY_2M;
   129da:	490e      	ldr	r1, [pc, #56]	; (12a14 <init_reset+0x6c>)
   129dc:	2000      	movs	r0, #0
   129de:	6010      	str	r0, [r2, #0]
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   129e0:	221b      	movs	r2, #27
   129e2:	801a      	strh	r2, [r3, #0]
	default_phy_rx |= PHY_2M;
   129e4:	4a0c      	ldr	r2, [pc, #48]	; (12a18 <init_reset+0x70>)
	default_phy_tx |= PHY_2M;
   129e6:	2303      	movs	r3, #3
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   129e8:	f44f 7ca4 	mov.w	ip, #328	; 0x148
   129ec:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   129f0:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   129f2:	7013      	strb	r3, [r2, #0]
}
   129f4:	bd10      	pop	{r4, pc}
   129f6:	bf00      	nop
   129f8:	20003014 	.word	0x20003014
   129fc:	20001d50 	.word	0x20001d50
   12a00:	20003ae6 	.word	0x20003ae6
   12a04:	20003054 	.word	0x20003054
   12a08:	20003018 	.word	0x20003018
   12a0c:	200030c4 	.word	0x200030c4
   12a10:	20003ae8 	.word	0x20003ae8
   12a14:	20003bd1 	.word	0x20003bd1
   12a18:	20003bd0 	.word	0x20003bd0

00012a1c <tx_lll_flush>:
{
   12a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   12a20:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   12a24:	4933      	ldr	r1, [pc, #204]	; (12af4 <tx_lll_flush+0xd8>)
{
   12a26:	b083      	sub	sp, #12
   12a28:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   12a2a:	f44f 72cc 	mov.w	r2, #408	; 0x198
   12a2e:	4640      	mov	r0, r8
   12a30:	f7fb fb16 	bl	e060 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   12a34:	f105 065c 	add.w	r6, r5, #92	; 0x5c
	lll_conn_flush(handle, lll);
   12a38:	4629      	mov	r1, r5
   12a3a:	f006 fd71 	bl	19520 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   12a3e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   12a40:	aa01      	add	r2, sp, #4
   12a42:	4631      	mov	r1, r6
   12a44:	f7fb fb4c 	bl	e0e0 <memq_dequeue>
	while (link) {
   12a48:	b328      	cbz	r0, 12a96 <tx_lll_flush+0x7a>
   12a4a:	4c2b      	ldr	r4, [pc, #172]	; (12af8 <tx_lll_flush+0xdc>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   12a4c:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12a50:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   12a54:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   12a56:	f894 c002 	ldrb.w	ip, [r4, #2]
   12a5a:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
   12a5c:	1c53      	adds	r3, r2, #1
   12a5e:	b2db      	uxtb	r3, r3
		last = 0U;
   12a60:	459c      	cmp	ip, r3
   12a62:	bf08      	it	eq
   12a64:	2300      	moveq	r3, #0
	if (last == first) {
   12a66:	4299      	cmp	r1, r3
   12a68:	f894 c000 	ldrb.w	ip, [r4]
   12a6c:	d031      	beq.n	12ad2 <tx_lll_flush+0xb6>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12a6e:	fb12 f20c 	smulbb	r2, r2, ip
   12a72:	eb02 0109 	add.w	r1, r2, r9
		lll_tx->handle = LLL_HANDLE_INVALID;
   12a76:	f829 7002 	strh.w	r7, [r9, r2]
		lll_tx->node = tx;
   12a7a:	9a01      	ldr	r2, [sp, #4]
   12a7c:	604a      	str	r2, [r1, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   12a7e:	6812      	ldr	r2, [r2, #0]
   12a80:	6002      	str	r2, [r0, #0]
		tx->next = link;
   12a82:	9a01      	ldr	r2, [sp, #4]
   12a84:	6010      	str	r0, [r2, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   12a86:	6e28      	ldr	r0, [r5, #96]	; 0x60
	*last = idx; /* Commit: Update write index */
   12a88:	7163      	strb	r3, [r4, #5]
   12a8a:	aa01      	add	r2, sp, #4
   12a8c:	4631      	mov	r1, r6
   12a8e:	f7fb fb27 	bl	e0e0 <memq_dequeue>
	while (link) {
   12a92:	2800      	cmp	r0, #0
   12a94:	d1de      	bne.n	12a54 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   12a96:	f8d8 014c 	ldr.w	r0, [r8, #332]	; 0x14c
	rx = (void *)&conn->llcp_terminate.node_rx;
   12a9a:	f508 74a6 	add.w	r4, r8, #332	; 0x14c
	LL_ASSERT(rx->hdr.link);
   12a9e:	b140      	cbz	r0, 12ab2 <tx_lll_flush+0x96>
	rx->hdr.link = NULL;
   12aa0:	2300      	movs	r3, #0
   12aa2:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
	ull_rx_put_sched(link, rx);
   12aa6:	4621      	mov	r1, r4
   12aa8:	f7fe ff42 	bl	11930 <ull_rx_put_sched>
}
   12aac:	b003      	add	sp, #12
   12aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   12ab2:	4a12      	ldr	r2, [pc, #72]	; (12afc <tx_lll_flush+0xe0>)
   12ab4:	4912      	ldr	r1, [pc, #72]	; (12b00 <tx_lll_flush+0xe4>)
   12ab6:	4813      	ldr	r0, [pc, #76]	; (12b04 <tx_lll_flush+0xe8>)
   12ab8:	f640 3341 	movw	r3, #2881	; 0xb41
   12abc:	f00e fe46 	bl	2174c <assert_print>
   12ac0:	4040      	eors	r0, r0
   12ac2:	f380 8811 	msr	BASEPRI, r0
   12ac6:	f04f 0003 	mov.w	r0, #3
   12aca:	df02      	svc	2
	link = rx->hdr.link;
   12acc:	f8d8 014c 	ldr.w	r0, [r8, #332]	; 0x14c
   12ad0:	e7e6      	b.n	12aa0 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   12ad2:	4a0a      	ldr	r2, [pc, #40]	; (12afc <tx_lll_flush+0xe0>)
   12ad4:	490c      	ldr	r1, [pc, #48]	; (12b08 <tx_lll_flush+0xec>)
   12ad6:	480b      	ldr	r0, [pc, #44]	; (12b04 <tx_lll_flush+0xe8>)
   12ad8:	f640 332d 	movw	r3, #2861	; 0xb2d
   12adc:	f00e fe36 	bl	2174c <assert_print>
   12ae0:	4040      	eors	r0, r0
   12ae2:	f380 8811 	msr	BASEPRI, r0
   12ae6:	f04f 0003 	mov.w	r0, #3
   12aea:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   12aec:	2300      	movs	r3, #0
   12aee:	801b      	strh	r3, [r3, #0]
   12af0:	deff      	udf	#255	; 0xff
   12af2:	bf00      	nop
   12af4:	20001d50 	.word	0x20001d50
   12af8:	2000061c 	.word	0x2000061c
   12afc:	00028d4c 	.word	0x00028d4c
   12b00:	00028d94 	.word	0x00028d94
   12b04:	0002866c 	.word	0x0002866c
   12b08:	00028d8c 	.word	0x00028d8c

00012b0c <ticker_stop_op_cb>:
{
   12b0c:	b510      	push	{r4, lr}
   12b0e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12b10:	b9b0      	cbnz	r0, 12b40 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   12b12:	4b12      	ldr	r3, [pc, #72]	; (12b5c <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12b14:	2200      	movs	r2, #0
   12b16:	2101      	movs	r1, #1
   12b18:	2002      	movs	r0, #2
	mfy.param = param;
   12b1a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12b1c:	f7fb fb44 	bl	e1a8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   12b20:	b900      	cbnz	r0, 12b24 <ticker_stop_op_cb+0x18>
}
   12b22:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   12b24:	4a0e      	ldr	r2, [pc, #56]	; (12b60 <ticker_stop_op_cb+0x54>)
   12b26:	490f      	ldr	r1, [pc, #60]	; (12b64 <ticker_stop_op_cb+0x58>)
   12b28:	480f      	ldr	r0, [pc, #60]	; (12b68 <ticker_stop_op_cb+0x5c>)
   12b2a:	f640 23e7 	movw	r3, #2791	; 0xae7
   12b2e:	f00e fe0d 	bl	2174c <assert_print>
   12b32:	4040      	eors	r0, r0
   12b34:	f380 8811 	msr	BASEPRI, r0
   12b38:	f04f 0003 	mov.w	r0, #3
   12b3c:	df02      	svc	2
}
   12b3e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12b40:	4a07      	ldr	r2, [pc, #28]	; (12b60 <ticker_stop_op_cb+0x54>)
   12b42:	490a      	ldr	r1, [pc, #40]	; (12b6c <ticker_stop_op_cb+0x60>)
   12b44:	4808      	ldr	r0, [pc, #32]	; (12b68 <ticker_stop_op_cb+0x5c>)
   12b46:	f640 23e1 	movw	r3, #2785	; 0xae1
   12b4a:	f00e fdff 	bl	2174c <assert_print>
   12b4e:	4040      	eors	r0, r0
   12b50:	f380 8811 	msr	BASEPRI, r0
   12b54:	f04f 0003 	mov.w	r0, #3
   12b58:	df02      	svc	2
   12b5a:	e7da      	b.n	12b12 <ticker_stop_op_cb+0x6>
   12b5c:	200005fc 	.word	0x200005fc
   12b60:	00028d4c 	.word	0x00028d4c
   12b64:	00028b38 	.word	0x00028b38
   12b68:	0002866c 	.word	0x0002866c
   12b6c:	00028da4 	.word	0x00028da4

00012b70 <disabled_cb>:
{
   12b70:	b508      	push	{r3, lr}
	mfy.param = param;
   12b72:	4b0b      	ldr	r3, [pc, #44]	; (12ba0 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12b74:	2200      	movs	r2, #0
	mfy.param = param;
   12b76:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12b78:	4611      	mov	r1, r2
   12b7a:	2001      	movs	r0, #1
   12b7c:	f7fb fb14 	bl	e1a8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   12b80:	b900      	cbnz	r0, 12b84 <disabled_cb+0x14>
}
   12b82:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   12b84:	4a07      	ldr	r2, [pc, #28]	; (12ba4 <disabled_cb+0x34>)
   12b86:	4908      	ldr	r1, [pc, #32]	; (12ba8 <disabled_cb+0x38>)
   12b88:	4808      	ldr	r0, [pc, #32]	; (12bac <disabled_cb+0x3c>)
   12b8a:	f640 3313 	movw	r3, #2835	; 0xb13
   12b8e:	f00e fddd 	bl	2174c <assert_print>
   12b92:	4040      	eors	r0, r0
   12b94:	f380 8811 	msr	BASEPRI, r0
   12b98:	f04f 0003 	mov.w	r0, #3
   12b9c:	df02      	svc	2
}
   12b9e:	bd08      	pop	{r3, pc}
   12ba0:	200005dc 	.word	0x200005dc
   12ba4:	00028d4c 	.word	0x00028d4c
   12ba8:	00028b38 	.word	0x00028b38
   12bac:	0002866c 	.word	0x0002866c

00012bb0 <conn_disable>:
{
   12bb0:	b538      	push	{r3, r4, r5, lr}
   12bb2:	4604      	mov	r4, r0
	return hdr->ref;
   12bb4:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   12bb8:	b353      	cbz	r3, 12c10 <conn_disable+0x60>
		mfy.param = &conn->lll;
   12bba:	4d17      	ldr	r5, [pc, #92]	; (12c18 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   12bbc:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   12bbe:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   12bc0:	b16b      	cbz	r3, 12bde <conn_disable+0x2e>
   12bc2:	4a16      	ldr	r2, [pc, #88]	; (12c1c <conn_disable+0x6c>)
   12bc4:	4916      	ldr	r1, [pc, #88]	; (12c20 <conn_disable+0x70>)
   12bc6:	4817      	ldr	r0, [pc, #92]	; (12c24 <conn_disable+0x74>)
   12bc8:	f640 23fc 	movw	r3, #2812	; 0xafc
   12bcc:	f00e fdbe 	bl	2174c <assert_print>
   12bd0:	4040      	eors	r0, r0
   12bd2:	f380 8811 	msr	BASEPRI, r0
   12bd6:	f04f 0003 	mov.w	r0, #3
   12bda:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   12bdc:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   12bde:	4912      	ldr	r1, [pc, #72]	; (12c28 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12be0:	4b0d      	ldr	r3, [pc, #52]	; (12c18 <conn_disable+0x68>)
   12be2:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   12be4:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12be8:	4611      	mov	r1, r2
   12bea:	2001      	movs	r0, #1
   12bec:	f7fb fadc 	bl	e1a8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   12bf0:	b900      	cbnz	r0, 12bf4 <conn_disable+0x44>
}
   12bf2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   12bf4:	4a09      	ldr	r2, [pc, #36]	; (12c1c <conn_disable+0x6c>)
   12bf6:	490d      	ldr	r1, [pc, #52]	; (12c2c <conn_disable+0x7c>)
   12bf8:	480a      	ldr	r0, [pc, #40]	; (12c24 <conn_disable+0x74>)
   12bfa:	f640 3303 	movw	r3, #2819	; 0xb03
   12bfe:	f00e fda5 	bl	2174c <assert_print>
   12c02:	4040      	eors	r0, r0
   12c04:	f380 8811 	msr	BASEPRI, r0
   12c08:	f04f 0003 	mov.w	r0, #3
   12c0c:	df02      	svc	2
}
   12c0e:	bd38      	pop	{r3, r4, r5, pc}
   12c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   12c14:	f7ff bfac 	b.w	12b70 <disabled_cb>
   12c18:	200005ec 	.word	0x200005ec
   12c1c:	00028d4c 	.word	0x00028d4c
   12c20:	00028c54 	.word	0x00028c54
   12c24:	0002866c 	.word	0x0002866c
   12c28:	00012b71 	.word	0x00012b71
   12c2c:	00028b38 	.word	0x00028b38

00012c30 <conn_setup_adv_scan_disabled_cb>:
{
   12c30:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   12c32:	6883      	ldr	r3, [r0, #8]
   12c34:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   12c36:	7f53      	ldrb	r3, [r2, #29]
   12c38:	09db      	lsrs	r3, r3, #7
   12c3a:	d10d      	bne.n	12c58 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   12c3c:	4a09      	ldr	r2, [pc, #36]	; (12c64 <conn_setup_adv_scan_disabled_cb+0x34>)
   12c3e:	490a      	ldr	r1, [pc, #40]	; (12c68 <conn_setup_adv_scan_disabled_cb+0x38>)
   12c40:	480a      	ldr	r0, [pc, #40]	; (12c6c <conn_setup_adv_scan_disabled_cb+0x3c>)
   12c42:	f640 2335 	movw	r3, #2613	; 0xa35
   12c46:	f00e fd81 	bl	2174c <assert_print>
   12c4a:	4040      	eors	r0, r0
   12c4c:	f380 8811 	msr	BASEPRI, r0
   12c50:	f04f 0003 	mov.w	r0, #3
   12c54:	df02      	svc	2
}
   12c56:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
   12c58:	4601      	mov	r1, r0
}
   12c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   12c5e:	3108      	adds	r1, #8
   12c60:	f7ee be26 	b.w	18b0 <ull_periph_setup>
   12c64:	00028d4c 	.word	0x00028d4c
   12c68:	000286fc 	.word	0x000286fc
   12c6c:	0002866c 	.word	0x0002866c

00012c70 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12c70:	b900      	cbnz	r0, 12c74 <ticker_update_conn_op_cb+0x4>
   12c72:	4770      	bx	lr
{
   12c74:	b510      	push	{r4, lr}
   12c76:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12c78:	f7fe fd84 	bl	11784 <ull_update_mark_get>
   12c7c:	4284      	cmp	r4, r0
   12c7e:	d010      	beq.n	12ca2 <ticker_update_conn_op_cb+0x32>
   12c80:	f7fe fd62 	bl	11748 <ull_disable_mark_get>
   12c84:	4284      	cmp	r4, r0
   12c86:	d00c      	beq.n	12ca2 <ticker_update_conn_op_cb+0x32>
   12c88:	4a06      	ldr	r2, [pc, #24]	; (12ca4 <ticker_update_conn_op_cb+0x34>)
   12c8a:	4907      	ldr	r1, [pc, #28]	; (12ca8 <ticker_update_conn_op_cb+0x38>)
   12c8c:	4807      	ldr	r0, [pc, #28]	; (12cac <ticker_update_conn_op_cb+0x3c>)
   12c8e:	f640 13f8 	movw	r3, #2552	; 0x9f8
   12c92:	f00e fd5b 	bl	2174c <assert_print>
   12c96:	4040      	eors	r0, r0
   12c98:	f380 8811 	msr	BASEPRI, r0
   12c9c:	f04f 0003 	mov.w	r0, #3
   12ca0:	df02      	svc	2
}
   12ca2:	bd10      	pop	{r4, pc}
   12ca4:	00028d4c 	.word	0x00028d4c
   12ca8:	00028db0 	.word	0x00028db0
   12cac:	0002866c 	.word	0x0002866c

00012cb0 <ticker_start_conn_op_cb>:
{
   12cb0:	b510      	push	{r4, lr}
   12cb2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12cb4:	b990      	cbnz	r0, 12cdc <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   12cb6:	4620      	mov	r0, r4
   12cb8:	f7fe fd58 	bl	1176c <ull_update_unmark>
	LL_ASSERT(p == param);
   12cbc:	4284      	cmp	r4, r0
   12cbe:	d00c      	beq.n	12cda <ticker_start_conn_op_cb+0x2a>
   12cc0:	4a0d      	ldr	r2, [pc, #52]	; (12cf8 <ticker_start_conn_op_cb+0x48>)
   12cc2:	490e      	ldr	r1, [pc, #56]	; (12cfc <ticker_start_conn_op_cb+0x4c>)
   12cc4:	480e      	ldr	r0, [pc, #56]	; (12d00 <ticker_start_conn_op_cb+0x50>)
   12cc6:	f640 230e 	movw	r3, #2574	; 0xa0e
   12cca:	f00e fd3f 	bl	2174c <assert_print>
   12cce:	4040      	eors	r0, r0
   12cd0:	f380 8811 	msr	BASEPRI, r0
   12cd4:	f04f 0003 	mov.w	r0, #3
   12cd8:	df02      	svc	2
}
   12cda:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12cdc:	4a06      	ldr	r2, [pc, #24]	; (12cf8 <ticker_start_conn_op_cb+0x48>)
   12cde:	4909      	ldr	r1, [pc, #36]	; (12d04 <ticker_start_conn_op_cb+0x54>)
   12ce0:	4807      	ldr	r0, [pc, #28]	; (12d00 <ticker_start_conn_op_cb+0x50>)
   12ce2:	f640 230b 	movw	r3, #2571	; 0xa0b
   12ce6:	f00e fd31 	bl	2174c <assert_print>
   12cea:	4040      	eors	r0, r0
   12cec:	f380 8811 	msr	BASEPRI, r0
   12cf0:	f04f 0003 	mov.w	r0, #3
   12cf4:	df02      	svc	2
   12cf6:	e7de      	b.n	12cb6 <ticker_start_conn_op_cb+0x6>
   12cf8:	00028d4c 	.word	0x00028d4c
   12cfc:	00028e04 	.word	0x00028e04
   12d00:	0002866c 	.word	0x0002866c
   12d04:	00028da4 	.word	0x00028da4

00012d08 <ticker_stop_conn_op_cb>:
{
   12d08:	b510      	push	{r4, lr}
   12d0a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12d0c:	b990      	cbnz	r0, 12d34 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   12d0e:	4620      	mov	r0, r4
   12d10:	f7fe fd20 	bl	11754 <ull_update_mark>
	LL_ASSERT(p == param);
   12d14:	4284      	cmp	r4, r0
   12d16:	d00c      	beq.n	12d32 <ticker_stop_conn_op_cb+0x2a>
   12d18:	4a0d      	ldr	r2, [pc, #52]	; (12d50 <ticker_stop_conn_op_cb+0x48>)
   12d1a:	490e      	ldr	r1, [pc, #56]	; (12d54 <ticker_stop_conn_op_cb+0x4c>)
   12d1c:	480e      	ldr	r0, [pc, #56]	; (12d58 <ticker_stop_conn_op_cb+0x50>)
   12d1e:	f640 2304 	movw	r3, #2564	; 0xa04
   12d22:	f00e fd13 	bl	2174c <assert_print>
   12d26:	4040      	eors	r0, r0
   12d28:	f380 8811 	msr	BASEPRI, r0
   12d2c:	f04f 0003 	mov.w	r0, #3
   12d30:	df02      	svc	2
}
   12d32:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12d34:	4a06      	ldr	r2, [pc, #24]	; (12d50 <ticker_stop_conn_op_cb+0x48>)
   12d36:	4909      	ldr	r1, [pc, #36]	; (12d5c <ticker_stop_conn_op_cb+0x54>)
   12d38:	4807      	ldr	r0, [pc, #28]	; (12d58 <ticker_stop_conn_op_cb+0x50>)
   12d3a:	f640 2301 	movw	r3, #2561	; 0xa01
   12d3e:	f00e fd05 	bl	2174c <assert_print>
   12d42:	4040      	eors	r0, r0
   12d44:	f380 8811 	msr	BASEPRI, r0
   12d48:	f04f 0003 	mov.w	r0, #3
   12d4c:	df02      	svc	2
   12d4e:	e7de      	b.n	12d0e <ticker_stop_conn_op_cb+0x6>
   12d50:	00028d4c 	.word	0x00028d4c
   12d54:	00028e04 	.word	0x00028e04
   12d58:	0002866c 	.word	0x0002866c
   12d5c:	00028da4 	.word	0x00028da4

00012d60 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   12d60:	4801      	ldr	r0, [pc, #4]	; (12d68 <ll_conn_acquire+0x8>)
   12d62:	f7fb b945 	b.w	dff0 <mem_acquire>
   12d66:	bf00      	nop
   12d68:	20003014 	.word	0x20003014

00012d6c <ll_conn_release>:
	mem_release(conn, &conn_free);
   12d6c:	4901      	ldr	r1, [pc, #4]	; (12d74 <ll_conn_release+0x8>)
   12d6e:	f7fb b95b 	b.w	e028 <mem_release>
   12d72:	bf00      	nop
   12d74:	20003014 	.word	0x20003014

00012d78 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   12d78:	4902      	ldr	r1, [pc, #8]	; (12d84 <ll_conn_handle_get+0xc>)
   12d7a:	f44f 72cc 	mov.w	r2, #408	; 0x198
   12d7e:	f7fb b96f 	b.w	e060 <mem_index_get>
   12d82:	bf00      	nop
   12d84:	20001d50 	.word	0x20001d50

00012d88 <ll_conn_get>:
{
   12d88:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12d8a:	f44f 71cc 	mov.w	r1, #408	; 0x198
   12d8e:	4801      	ldr	r0, [pc, #4]	; (12d94 <ll_conn_get+0xc>)
   12d90:	f7fb b962 	b.w	e058 <mem_get>
   12d94:	20001d50 	.word	0x20001d50

00012d98 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12d98:	b958      	cbnz	r0, 12db2 <ll_connected_get+0x1a>
{
   12d9a:	b508      	push	{r3, lr}
   12d9c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12d9e:	f44f 71cc 	mov.w	r1, #408	; 0x198
   12da2:	4805      	ldr	r0, [pc, #20]	; (12db8 <ll_connected_get+0x20>)
   12da4:	f7fb f958 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   12da8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   12daa:	b903      	cbnz	r3, 12dae <ll_connected_get+0x16>
}
   12dac:	bd08      	pop	{r3, pc}
		return NULL;
   12dae:	2000      	movs	r0, #0
}
   12db0:	bd08      	pop	{r3, pc}
		return NULL;
   12db2:	2000      	movs	r0, #0
}
   12db4:	4770      	bx	lr
   12db6:	bf00      	nop
   12db8:	20001d50 	.word	0x20001d50

00012dbc <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   12dbc:	4801      	ldr	r0, [pc, #4]	; (12dc4 <ll_tx_mem_acquire+0x8>)
   12dbe:	f7fb b917 	b.w	dff0 <mem_acquire>
   12dc2:	bf00      	nop
   12dc4:	20003054 	.word	0x20003054

00012dc8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   12dc8:	4901      	ldr	r1, [pc, #4]	; (12dd0 <ll_tx_mem_release+0x8>)
   12dca:	f7fb b92d 	b.w	e028 <mem_release>
   12dce:	bf00      	nop
   12dd0:	20003054 	.word	0x20003054

00012dd4 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12dd4:	2800      	cmp	r0, #0
   12dd6:	d13f      	bne.n	12e58 <ll_tx_mem_enqueue+0x84>
{
   12dd8:	b570      	push	{r4, r5, r6, lr}
   12dda:	4602      	mov	r2, r0
   12ddc:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12dde:	4820      	ldr	r0, [pc, #128]	; (12e60 <ll_tx_mem_enqueue+0x8c>)
   12de0:	f44f 71cc 	mov.w	r1, #408	; 0x198
   12de4:	f7fb f938 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   12de8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12dea:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   12dec:	b9fa      	cbnz	r2, 12e2e <ll_tx_mem_enqueue+0x5a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   12dee:	4c1d      	ldr	r4, [pc, #116]	; (12e64 <ll_tx_mem_enqueue+0x90>)
   12df0:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
   12df4:	78a1      	ldrb	r1, [r4, #2]
   12df6:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   12df8:	f10c 0301 	add.w	r3, ip, #1
   12dfc:	b2db      	uxtb	r3, r3
		last = 0U;
   12dfe:	4299      	cmp	r1, r3
   12e00:	bf08      	it	eq
   12e02:	2300      	moveq	r3, #0
   12e04:	7921      	ldrb	r1, [r4, #4]
	if (last == first) {
   12e06:	4299      	cmp	r1, r3
   12e08:	d023      	beq.n	12e52 <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12e0a:	fb1c fc00 	smulbb	ip, ip, r0
   12e0e:	f104 0108 	add.w	r1, r4, #8
	lll_tx->handle = handle;
   12e12:	f821 200c 	strh.w	r2, [r1, ip]
   12e16:	448c      	add	ip, r1
	lll_tx->node = tx;
   12e18:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   12e1c:	7163      	strb	r3, [r4, #5]
   12e1e:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   12e20:	b943      	cbnz	r3, 12e34 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12e22:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   12e26:	2b00      	cmp	r3, #0
   12e28:	db0e      	blt.n	12e48 <ll_tx_mem_enqueue+0x74>
	return 0;
   12e2a:	2000      	movs	r0, #0
}
   12e2c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   12e2e:	f06f 0015 	mvn.w	r0, #21
}
   12e32:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
   12e34:	4b0c      	ldr	r3, [pc, #48]	; (12e68 <ll_tx_mem_enqueue+0x94>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   12e36:	2101      	movs	r1, #1
   12e38:	2003      	movs	r0, #3
	mfy.param = conn;
   12e3a:	609d      	str	r5, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   12e3c:	f7fb f9b4 	bl	e1a8 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12e40:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   12e44:	2b00      	cmp	r3, #0
   12e46:	daf0      	bge.n	12e2a <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
   12e48:	2100      	movs	r1, #0
   12e4a:	4628      	mov	r0, r5
   12e4c:	f004 ff84 	bl	17d58 <ull_periph_latency_cancel>
   12e50:	e7eb      	b.n	12e2a <ll_tx_mem_enqueue+0x56>
		return -ENOBUFS;
   12e52:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   12e56:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   12e58:	f06f 0015 	mvn.w	r0, #21
}
   12e5c:	4770      	bx	lr
   12e5e:	bf00      	nop
   12e60:	20001d50 	.word	0x20001d50
   12e64:	20000664 	.word	0x20000664
   12e68:	2000060c 	.word	0x2000060c

00012e6c <ll_conn_update>:
{
   12e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12e70:	b082      	sub	sp, #8
   12e72:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
   12e76:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   12e7a:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (handle >= CONFIG_BT_MAX_CONN) {
   12e7e:	b9b0      	cbnz	r0, 12eae <ll_conn_update+0x42>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12e80:	460c      	mov	r4, r1
   12e82:	4615      	mov	r5, r2
   12e84:	f44f 71cc 	mov.w	r1, #408	; 0x198
   12e88:	4602      	mov	r2, r0
   12e8a:	4819      	ldr	r0, [pc, #100]	; (12ef0 <ll_conn_update+0x84>)
   12e8c:	461e      	mov	r6, r3
   12e8e:	f7fb f8e3 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   12e92:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12e94:	4682      	mov	sl, r0
	if (conn->lll.handle != handle) {
   12e96:	b953      	cbnz	r3, 12eae <ll_conn_update+0x42>
	if (cmd == 0U) {
   12e98:	b16c      	cbz	r4, 12eb6 <ll_conn_update+0x4a>
	} else if (cmd == 2U) {
   12e9a:	2c02      	cmp	r4, #2
   12e9c:	d003      	beq.n	12ea6 <ll_conn_update+0x3a>
		return BT_HCI_ERR_UNKNOWN_CMD;
   12e9e:	2001      	movs	r0, #1
}
   12ea0:	b002      	add	sp, #8
   12ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (status == 0U) {
   12ea6:	b9cd      	cbnz	r5, 12edc <ll_conn_update+0x70>
			ull_cp_conn_param_req_reply(conn);
   12ea8:	f002 fa3a 	bl	15320 <ull_cp_conn_param_req_reply>
   12eac:	e012      	b.n	12ed4 <ll_conn_update+0x68>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12eae:	2002      	movs	r0, #2
}
   12eb0:	b002      	add	sp, #8
   12eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		err = ull_cp_conn_update(conn, interval_min, interval_max, latency, timeout,
   12eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12eb8:	9301      	str	r3, [sp, #4]
   12eba:	f8cd 9000 	str.w	r9, [sp]
   12ebe:	4643      	mov	r3, r8
   12ec0:	463a      	mov	r2, r7
   12ec2:	4631      	mov	r1, r6
   12ec4:	f002 f9ac 	bl	15220 <ull_cp_conn_update>
		if (err) {
   12ec8:	2800      	cmp	r0, #0
   12eca:	d1e9      	bne.n	12ea0 <ll_conn_update+0x34>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12ecc:	f99a 3039 	ldrsb.w	r3, [sl, #57]	; 0x39
   12ed0:	2b00      	cmp	r3, #0
   12ed2:	db07      	blt.n	12ee4 <ll_conn_update+0x78>
		return BT_HCI_ERR_SUCCESS;
   12ed4:	2000      	movs	r0, #0
}
   12ed6:	b002      	add	sp, #8
   12ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ull_cp_conn_param_req_neg_reply(conn, status);
   12edc:	4629      	mov	r1, r5
   12ede:	f002 fa2f 	bl	15340 <ull_cp_conn_param_req_neg_reply>
   12ee2:	e7f7      	b.n	12ed4 <ll_conn_update+0x68>
			ull_periph_latency_cancel(conn, handle);
   12ee4:	4601      	mov	r1, r0
   12ee6:	4650      	mov	r0, sl
   12ee8:	f004 ff36 	bl	17d58 <ull_periph_latency_cancel>
   12eec:	e7f2      	b.n	12ed4 <ll_conn_update+0x68>
   12eee:	bf00      	nop
   12ef0:	20001d50 	.word	0x20001d50

00012ef4 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12ef4:	b9e0      	cbnz	r0, 12f30 <ll_chm_get+0x3c>
{
   12ef6:	b538      	push	{r3, r4, r5, lr}
   12ef8:	4602      	mov	r2, r0
   12efa:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12efc:	480d      	ldr	r0, [pc, #52]	; (12f34 <ll_chm_get+0x40>)
   12efe:	f44f 71cc 	mov.w	r1, #408	; 0x198
   12f02:	f7fb f8a9 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   12f06:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12f08:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   12f0a:	b94b      	cbnz	r3, 12f20 <ll_chm_get+0x2c>
	pending_chm = ull_cp_chan_map_update_pending(conn);
   12f0c:	f002 f928 	bl	15160 <ull_cp_chan_map_update_pending>
		memcpy(chm, pending_chm, sizeof(conn->lll.data_chan_map));
   12f10:	2205      	movs	r2, #5
	if (pending_chm) {
   12f12:	4601      	mov	r1, r0
   12f14:	b130      	cbz	r0, 12f24 <ll_chm_get+0x30>
		memcpy(chm, pending_chm, sizeof(conn->lll.data_chan_map));
   12f16:	4620      	mov	r0, r4
   12f18:	f010 fe78 	bl	23c0c <memcpy>
	return 0;
   12f1c:	2000      	movs	r0, #0
}
   12f1e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12f20:	2002      	movs	r0, #2
}
   12f22:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(chm, conn->lll.data_chan_map, sizeof(conn->lll.data_chan_map));
   12f24:	f105 0134 	add.w	r1, r5, #52	; 0x34
   12f28:	4620      	mov	r0, r4
   12f2a:	f010 fe6f 	bl	23c0c <memcpy>
   12f2e:	e7f5      	b.n	12f1c <ll_chm_get+0x28>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12f30:	2002      	movs	r0, #2
}
   12f32:	4770      	bx	lr
   12f34:	20001d50 	.word	0x20001d50

00012f38 <ll_terminate_ind_send>:
{
   12f38:	b538      	push	{r3, r4, r5, lr}
	if (IS_ACL_HANDLE(handle)) {
   12f3a:	b110      	cbz	r0, 12f42 <ll_terminate_ind_send+0xa>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12f3c:	2402      	movs	r4, #2
}
   12f3e:	4620      	mov	r0, r4
   12f40:	bd38      	pop	{r3, r4, r5, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12f42:	4602      	mov	r2, r0
   12f44:	460c      	mov	r4, r1
   12f46:	4815      	ldr	r0, [pc, #84]	; (12f9c <ll_terminate_ind_send+0x64>)
   12f48:	f44f 71cc 	mov.w	r1, #408	; 0x198
   12f4c:	f7fb f884 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   12f50:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12f52:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   12f54:	b9fb      	cbnz	r3, 12f96 <ll_terminate_ind_send+0x5e>
	switch (reason) {
   12f56:	2c1a      	cmp	r4, #26
   12f58:	d804      	bhi.n	12f64 <ll_terminate_ind_send+0x2c>
   12f5a:	2c04      	cmp	r4, #4
   12f5c:	d816      	bhi.n	12f8c <ll_terminate_ind_send+0x54>
   12f5e:	2412      	movs	r4, #18
}
   12f60:	4620      	mov	r0, r4
   12f62:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
   12f64:	2c29      	cmp	r4, #41	; 0x29
   12f66:	d001      	beq.n	12f6c <ll_terminate_ind_send+0x34>
   12f68:	2c3b      	cmp	r4, #59	; 0x3b
   12f6a:	d1f8      	bne.n	12f5e <ll_terminate_ind_send+0x26>
		err = ull_cp_terminate(conn, reason);
   12f6c:	4621      	mov	r1, r4
   12f6e:	4628      	mov	r0, r5
   12f70:	f002 f8e4 	bl	1513c <ull_cp_terminate>
		if (err) {
   12f74:	4604      	mov	r4, r0
   12f76:	2800      	cmp	r0, #0
   12f78:	d1e1      	bne.n	12f3e <ll_terminate_ind_send+0x6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12f7a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   12f7e:	2b00      	cmp	r3, #0
   12f80:	dadd      	bge.n	12f3e <ll_terminate_ind_send+0x6>
			ull_periph_latency_cancel(conn, handle);
   12f82:	4601      	mov	r1, r0
   12f84:	4628      	mov	r0, r5
   12f86:	f004 fee7 	bl	17d58 <ull_periph_latency_cancel>
   12f8a:	e7d8      	b.n	12f3e <ll_terminate_ind_send+0x6>
	switch (reason) {
   12f8c:	4b04      	ldr	r3, [pc, #16]	; (12fa0 <ll_terminate_ind_send+0x68>)
   12f8e:	40e3      	lsrs	r3, r4
   12f90:	07db      	lsls	r3, r3, #31
   12f92:	d4eb      	bmi.n	12f6c <ll_terminate_ind_send+0x34>
   12f94:	e7e3      	b.n	12f5e <ll_terminate_ind_send+0x26>
			return BT_HCI_ERR_CMD_DISALLOWED;
   12f96:	240c      	movs	r4, #12
   12f98:	e7d1      	b.n	12f3e <ll_terminate_ind_send+0x6>
   12f9a:	bf00      	nop
   12f9c:	20001d50 	.word	0x20001d50
   12fa0:	04380020 	.word	0x04380020

00012fa4 <ll_feature_req_send>:
{
   12fa4:	b538      	push	{r3, r4, r5, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   12fa6:	b990      	cbnz	r0, 12fce <ll_feature_req_send+0x2a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12fa8:	4602      	mov	r2, r0
   12faa:	f44f 71cc 	mov.w	r1, #408	; 0x198
   12fae:	480c      	ldr	r0, [pc, #48]	; (12fe0 <ll_feature_req_send+0x3c>)
   12fb0:	f7fb f852 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   12fb4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12fb6:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   12fb8:	b94b      	cbnz	r3, 12fce <ll_feature_req_send+0x2a>
	err = ull_cp_feature_exchange(conn);
   12fba:	f002 f87f 	bl	150bc <ull_cp_feature_exchange>
	if (err) {
   12fbe:	4604      	mov	r4, r0
   12fc0:	b918      	cbnz	r0, 12fca <ll_feature_req_send+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12fc2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   12fc6:	2b00      	cmp	r3, #0
   12fc8:	db04      	blt.n	12fd4 <ll_feature_req_send+0x30>
}
   12fca:	4620      	mov	r0, r4
   12fcc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12fce:	2402      	movs	r4, #2
}
   12fd0:	4620      	mov	r0, r4
   12fd2:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   12fd4:	4601      	mov	r1, r0
   12fd6:	4628      	mov	r0, r5
   12fd8:	f004 febe 	bl	17d58 <ull_periph_latency_cancel>
}
   12fdc:	4620      	mov	r0, r4
   12fde:	bd38      	pop	{r3, r4, r5, pc}
   12fe0:	20001d50 	.word	0x20001d50

00012fe4 <ll_version_ind_send>:
{
   12fe4:	b538      	push	{r3, r4, r5, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   12fe6:	b990      	cbnz	r0, 1300e <ll_version_ind_send+0x2a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12fe8:	4602      	mov	r2, r0
   12fea:	f44f 71cc 	mov.w	r1, #408	; 0x198
   12fee:	480c      	ldr	r0, [pc, #48]	; (13020 <ll_version_ind_send+0x3c>)
   12ff0:	f7fb f832 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   12ff4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12ff6:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   12ff8:	b94b      	cbnz	r3, 1300e <ll_version_ind_send+0x2a>
	err = ull_cp_version_exchange(conn);
   12ffa:	f002 f86d 	bl	150d8 <ull_cp_version_exchange>
	if (err) {
   12ffe:	4604      	mov	r4, r0
   13000:	b918      	cbnz	r0, 1300a <ll_version_ind_send+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13002:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   13006:	2b00      	cmp	r3, #0
   13008:	db04      	blt.n	13014 <ll_version_ind_send+0x30>
}
   1300a:	4620      	mov	r0, r4
   1300c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1300e:	2402      	movs	r4, #2
}
   13010:	4620      	mov	r0, r4
   13012:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   13014:	4601      	mov	r1, r0
   13016:	4628      	mov	r0, r5
   13018:	f004 fe9e 	bl	17d58 <ull_periph_latency_cancel>
}
   1301c:	4620      	mov	r0, r4
   1301e:	bd38      	pop	{r3, r4, r5, pc}
   13020:	20001d50 	.word	0x20001d50

00013024 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13024:	b9f0      	cbnz	r0, 13064 <ll_length_req_send+0x40>
{
   13026:	b570      	push	{r4, r5, r6, lr}
   13028:	460d      	mov	r5, r1
   1302a:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1302c:	f44f 71cc 	mov.w	r1, #408	; 0x198
   13030:	4602      	mov	r2, r0
   13032:	4810      	ldr	r0, [pc, #64]	; (13074 <ll_length_req_send+0x50>)
   13034:	f7fb f810 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   13038:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1303a:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1303c:	b983      	cbnz	r3, 13060 <ll_length_req_send+0x3c>
}

static inline bool feature_dle(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_DLE) != 0;
   1303e:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	if (!feature_dle(conn)) {
   13042:	069b      	lsls	r3, r3, #26
   13044:	d50a      	bpl.n	1305c <ll_length_req_send+0x38>
	err = ull_cp_data_length_update(conn, tx_octets, tx_time);
   13046:	4632      	mov	r2, r6
   13048:	4629      	mov	r1, r5
   1304a:	f002 f89b 	bl	15184 <ull_cp_data_length_update>
	if (err) {
   1304e:	b920      	cbnz	r0, 1305a <ll_length_req_send+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13050:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13054:	2b00      	cmp	r3, #0
   13056:	db07      	blt.n	13068 <ll_length_req_send+0x44>
	return 0;
   13058:	2000      	movs	r0, #0
}
   1305a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1305c:	201a      	movs	r0, #26
}
   1305e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13060:	2002      	movs	r0, #2
}
   13062:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13064:	2002      	movs	r0, #2
}
   13066:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   13068:	4601      	mov	r1, r0
   1306a:	4620      	mov	r0, r4
   1306c:	f004 fe74 	bl	17d58 <ull_periph_latency_cancel>
   13070:	e7f2      	b.n	13058 <ll_length_req_send+0x34>
   13072:	bf00      	nop
   13074:	20001d50 	.word	0x20001d50

00013078 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   13078:	4a03      	ldr	r2, [pc, #12]	; (13088 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1307a:	4b04      	ldr	r3, [pc, #16]	; (1308c <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   1307c:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1307e:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   13080:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   13082:	800b      	strh	r3, [r1, #0]
}
   13084:	4770      	bx	lr
   13086:	bf00      	nop
   13088:	20003ae8 	.word	0x20003ae8
   1308c:	20003ae6 	.word	0x20003ae6

00013090 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   13090:	4a02      	ldr	r2, [pc, #8]	; (1309c <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   13092:	4b03      	ldr	r3, [pc, #12]	; (130a0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   13094:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   13096:	8019      	strh	r1, [r3, #0]
}
   13098:	2000      	movs	r0, #0
   1309a:	4770      	bx	lr
   1309c:	20003ae8 	.word	0x20003ae8
   130a0:	20003ae6 	.word	0x20003ae6

000130a4 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   130a4:	f04f 0c1b 	mov.w	ip, #27
   130a8:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   130ac:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   130b0:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   130b4:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   130b6:	8018      	strh	r0, [r3, #0]
}
   130b8:	4770      	bx	lr
   130ba:	bf00      	nop

000130bc <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   130bc:	b9c0      	cbnz	r0, 130f0 <ll_phy_get+0x34>
{
   130be:	b538      	push	{r3, r4, r5, lr}
   130c0:	460d      	mov	r5, r1
   130c2:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   130c4:	f44f 71cc 	mov.w	r1, #408	; 0x198
   130c8:	4602      	mov	r2, r0
   130ca:	480a      	ldr	r0, [pc, #40]	; (130f4 <ll_phy_get+0x38>)
   130cc:	f7fa ffc4 	bl	e058 <mem_get>
   130d0:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   130d2:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   130d4:	b950      	cbnz	r0, 130ec <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   130d6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   130da:	f3c2 0202 	ubfx	r2, r2, #0, #3
   130de:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   130e0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   130e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   130e8:	7023      	strb	r3, [r4, #0]
}
   130ea:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   130ec:	2002      	movs	r0, #2
}
   130ee:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   130f0:	2002      	movs	r0, #2
}
   130f2:	4770      	bx	lr
   130f4:	20001d50 	.word	0x20001d50

000130f8 <ll_phy_default_set>:
	default_phy_tx = tx;
   130f8:	4a02      	ldr	r2, [pc, #8]	; (13104 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   130fa:	4b03      	ldr	r3, [pc, #12]	; (13108 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   130fc:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   130fe:	7019      	strb	r1, [r3, #0]
}
   13100:	2000      	movs	r0, #0
   13102:	4770      	bx	lr
   13104:	20003bd1 	.word	0x20003bd1
   13108:	20003bd0 	.word	0x20003bd0

0001310c <ll_phy_req_send>:
{
   1310c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1310e:	b083      	sub	sp, #12
	if (handle >= CONFIG_BT_MAX_CONN) {
   13110:	b9f8      	cbnz	r0, 13152 <ll_phy_req_send+0x46>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13112:	460f      	mov	r7, r1
   13114:	4616      	mov	r6, r2
   13116:	f44f 71cc 	mov.w	r1, #408	; 0x198
   1311a:	4602      	mov	r2, r0
   1311c:	4813      	ldr	r0, [pc, #76]	; (1316c <ll_phy_req_send+0x60>)
   1311e:	461d      	mov	r5, r3
   13120:	f7fa ff9a 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   13124:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13126:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   13128:	b99b      	cbnz	r3, 13152 <ll_phy_req_send+0x46>
}

static inline bool feature_phy_2m(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_PHY_2M)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_PHY_2M) != 0;
   1312a:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	if (!feature_phy_2m(conn) && !feature_phy_coded(conn)) {
   1312e:	05db      	lsls	r3, r3, #23
   13130:	d513      	bpl.n	1315a <ll_phy_req_send+0x4e>
	err = ull_cp_phy_update(conn, tx, flags, rx, 1U);
   13132:	462b      	mov	r3, r5
   13134:	2501      	movs	r5, #1
   13136:	9500      	str	r5, [sp, #0]
   13138:	4632      	mov	r2, r6
   1313a:	4639      	mov	r1, r7
   1313c:	f001 ffda 	bl	150f4 <ull_cp_phy_update>
	if (err) {
   13140:	4605      	mov	r5, r0
   13142:	b918      	cbnz	r0, 1314c <ll_phy_req_send+0x40>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13144:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13148:	2b00      	cmp	r3, #0
   1314a:	db0a      	blt.n	13162 <ll_phy_req_send+0x56>
}
   1314c:	4628      	mov	r0, r5
   1314e:	b003      	add	sp, #12
   13150:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13152:	2502      	movs	r5, #2
}
   13154:	4628      	mov	r0, r5
   13156:	b003      	add	sp, #12
   13158:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1315a:	251a      	movs	r5, #26
}
   1315c:	4628      	mov	r0, r5
   1315e:	b003      	add	sp, #12
   13160:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   13162:	4601      	mov	r1, r0
   13164:	4620      	mov	r0, r4
   13166:	f004 fdf7 	bl	17d58 <ull_periph_latency_cancel>
   1316a:	e7ef      	b.n	1314c <ll_phy_req_send+0x40>
   1316c:	20001d50 	.word	0x20001d50

00013170 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13170:	b9d8      	cbnz	r0, 131aa <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13172:	4602      	mov	r2, r0
{
   13174:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13176:	480e      	ldr	r0, [pc, #56]	; (131b0 <ll_apto_get+0x40>)
   13178:	460c      	mov	r4, r1
   1317a:	f44f 71cc 	mov.w	r1, #408	; 0x198
   1317e:	f7fa ff6b 	bl	e058 <mem_get>
   13182:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   13184:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   13186:	b970      	cbnz	r0, 131a6 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   13188:	f8b2 317e 	ldrh.w	r3, [r2, #382]	; 0x17e
   1318c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1318e:	fb02 f303 	mul.w	r3, r2, r3
   13192:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   13196:	4a07      	ldr	r2, [pc, #28]	; (131b4 <ll_apto_get+0x44>)
   13198:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1319c:	fba2 2303 	umull	r2, r3, r2, r3
   131a0:	099b      	lsrs	r3, r3, #6
   131a2:	8023      	strh	r3, [r4, #0]
}
   131a4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   131a6:	2002      	movs	r0, #2
}
   131a8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   131aa:	2002      	movs	r0, #2
}
   131ac:	4770      	bx	lr
   131ae:	bf00      	nop
   131b0:	20001d50 	.word	0x20001d50
   131b4:	10624dd3 	.word	0x10624dd3

000131b8 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   131b8:	b9d8      	cbnz	r0, 131f2 <ll_apto_set+0x3a>
{
   131ba:	b510      	push	{r4, lr}
   131bc:	4602      	mov	r2, r0
   131be:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   131c0:	480d      	ldr	r0, [pc, #52]	; (131f8 <ll_apto_set+0x40>)
   131c2:	f44f 71cc 	mov.w	r1, #408	; 0x198
   131c6:	f7fa ff47 	bl	e058 <mem_get>
   131ca:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   131cc:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   131ce:	b970      	cbnz	r0, 131ee <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   131d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   131d2:	f240 41e2 	movw	r1, #1250	; 0x4e2
   131d6:	fb01 f202 	mul.w	r2, r1, r2
   131da:	f242 7110 	movw	r1, #10000	; 0x2710
   131de:	fb01 2104 	mla	r1, r1, r4, r2
   131e2:	3901      	subs	r1, #1
   131e4:	fbb1 f1f2 	udiv	r1, r1, r2
   131e8:	f8a3 117e 	strh.w	r1, [r3, #382]	; 0x17e
}
   131ec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   131ee:	2002      	movs	r0, #2
}
   131f0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   131f2:	2002      	movs	r0, #2
}
   131f4:	4770      	bx	lr
   131f6:	bf00      	nop
   131f8:	20001d50 	.word	0x20001d50

000131fc <ull_conn_init>:
	err = init_reset();
   131fc:	f7ff bbd4 	b.w	129a8 <init_reset>

00013200 <ull_conn_reset>:
{
   13200:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13202:	2200      	movs	r2, #0
   13204:	f44f 71cc 	mov.w	r1, #408	; 0x198
   13208:	4814      	ldr	r0, [pc, #80]	; (1325c <ull_conn_reset+0x5c>)
   1320a:	f7fa ff25 	bl	e058 <mem_get>
   1320e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   13210:	f100 021c 	add.w	r2, r0, #28
   13214:	4601      	mov	r1, r0
   13216:	2003      	movs	r0, #3
   13218:	f7fe faf8 	bl	1180c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1321c:	b108      	cbz	r0, 13222 <ull_conn_reset+0x22>
   1321e:	3078      	adds	r0, #120	; 0x78
   13220:	d10d      	bne.n	1323e <ull_conn_reset+0x3e>
	MFIFO_INIT(conn_tx);
   13222:	490f      	ldr	r1, [pc, #60]	; (13260 <ull_conn_reset+0x60>)
	MFIFO_INIT(conn_ack);
   13224:	4a0f      	ldr	r2, [pc, #60]	; (13264 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   13226:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   13228:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1322c:	8520      	strh	r0, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   1322e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	MFIFO_INIT(conn_tx);
   13232:	808b      	strh	r3, [r1, #4]
	MFIFO_INIT(conn_ack);
   13234:	8093      	strh	r3, [r2, #4]
}
   13236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   1323a:	f7ff bbb5 	b.w	129a8 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1323e:	4a0a      	ldr	r2, [pc, #40]	; (13268 <ull_conn_reset+0x68>)
   13240:	490a      	ldr	r1, [pc, #40]	; (1326c <ull_conn_reset+0x6c>)
   13242:	480b      	ldr	r0, [pc, #44]	; (13270 <ull_conn_reset+0x70>)
   13244:	f640 2343 	movw	r3, #2627	; 0xa43
   13248:	f00e fa80 	bl	2174c <assert_print>
   1324c:	4040      	eors	r0, r0
   1324e:	f380 8811 	msr	BASEPRI, r0
   13252:	f04f 0003 	mov.w	r0, #3
   13256:	df02      	svc	2
   13258:	e7e3      	b.n	13222 <ull_conn_reset+0x22>
   1325a:	bf00      	nop
   1325c:	20001d50 	.word	0x20001d50
   13260:	20000664 	.word	0x20000664
   13264:	2000061c 	.word	0x2000061c
   13268:	00028d4c 	.word	0x00028d4c
   1326c:	00028e40 	.word	0x00028e40
   13270:	0002866c 	.word	0x0002866c

00013274 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   13274:	4b01      	ldr	r3, [pc, #4]	; (1327c <ull_conn_default_phy_tx_get+0x8>)
}
   13276:	7818      	ldrb	r0, [r3, #0]
   13278:	4770      	bx	lr
   1327a:	bf00      	nop
   1327c:	20003bd1 	.word	0x20003bd1

00013280 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   13280:	4b01      	ldr	r3, [pc, #4]	; (13288 <ull_conn_default_phy_rx_get+0x8>)
}
   13282:	7818      	ldrb	r0, [r3, #0]
   13284:	4770      	bx	lr
   13286:	bf00      	nop
   13288:	20003bd0 	.word	0x20003bd0

0001328c <ull_conn_setup>:
{
   1328c:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   1328e:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   13290:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   13292:	681d      	ldr	r5, [r3, #0]
   13294:	782b      	ldrb	r3, [r5, #0]
{
   13296:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   13298:	b193      	cbz	r3, 132c0 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   1329a:	696b      	ldr	r3, [r5, #20]
   1329c:	b163      	cbz	r3, 132b8 <ull_conn_setup+0x2c>
   1329e:	4a0b      	ldr	r2, [pc, #44]	; (132cc <ull_conn_setup+0x40>)
   132a0:	490b      	ldr	r1, [pc, #44]	; (132d0 <ull_conn_setup+0x44>)
   132a2:	480c      	ldr	r0, [pc, #48]	; (132d4 <ull_conn_setup+0x48>)
   132a4:	f240 435f 	movw	r3, #1119	; 0x45f
   132a8:	f00e fa50 	bl	2174c <assert_print>
   132ac:	4040      	eors	r0, r0
   132ae:	f380 8811 	msr	BASEPRI, r0
   132b2:	f04f 0003 	mov.w	r0, #3
   132b6:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   132b8:	4b07      	ldr	r3, [pc, #28]	; (132d8 <ull_conn_setup+0x4c>)
   132ba:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   132be:	bd38      	pop	{r3, r4, r5, pc}
   132c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   132c4:	4608      	mov	r0, r1
   132c6:	f7ff bcb3 	b.w	12c30 <conn_setup_adv_scan_disabled_cb>
   132ca:	bf00      	nop
   132cc:	00028d4c 	.word	0x00028d4c
   132d0:	00028c54 	.word	0x00028c54
   132d4:	0002866c 	.word	0x0002866c
   132d8:	00012c31 	.word	0x00012c31

000132dc <ull_conn_rx>:
{
   132dc:	b538      	push	{r3, r4, r5, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   132de:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   132e0:	88da      	ldrh	r2, [r3, #6]
   132e2:	b9a2      	cbnz	r2, 1330e <ull_conn_rx+0x32>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   132e4:	4818      	ldr	r0, [pc, #96]	; (13348 <ull_conn_rx+0x6c>)
   132e6:	460c      	mov	r4, r1
   132e8:	f44f 71cc 	mov.w	r1, #408	; 0x198
   132ec:	f7fa feb4 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   132f0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   132f2:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   132f4:	b953      	cbnz	r3, 1330c <ull_conn_rx+0x30>
	ull_cp_tx_ntf(conn);
   132f6:	f002 f85f 	bl	153b8 <ull_cp_tx_ntf>
	pdu_rx = (void *)(*rx)->pdu;
   132fa:	6821      	ldr	r1, [r4, #0]
	switch (pdu_rx->ll_id) {
   132fc:	7f0b      	ldrb	r3, [r1, #28]
   132fe:	f003 0303 	and.w	r3, r3, #3
   13302:	2b03      	cmp	r3, #3
   13304:	d107      	bne.n	13316 <ull_conn_rx+0x3a>
		ull_cp_rx(conn, *rx);
   13306:	4628      	mov	r0, r5
   13308:	f002 f86a 	bl	153e0 <ull_cp_rx>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1330c:	6823      	ldr	r3, [r4, #0]
   1330e:	2201      	movs	r2, #1
   13310:	711a      	strb	r2, [r3, #4]
}
   13312:	2000      	movs	r0, #0
   13314:	bd38      	pop	{r3, r4, r5, pc}
	switch (pdu_rx->ll_id) {
   13316:	b95b      	cbnz	r3, 13330 <ull_conn_rx+0x54>
		if (conn->pause_rx_data) {
   13318:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
   1331c:	079b      	lsls	r3, r3, #30
   1331e:	d503      	bpl.n	13328 <ull_conn_rx+0x4c>
			conn->llcp_terminate.reason_final =
   13320:	233d      	movs	r3, #61	; 0x3d
   13322:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13326:	6821      	ldr	r1, [r4, #0]
   13328:	2301      	movs	r3, #1
   1332a:	710b      	strb	r3, [r1, #4]
}
   1332c:	2000      	movs	r0, #0
   1332e:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->pause_rx_data) {
   13330:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
   13334:	079a      	lsls	r2, r3, #30
   13336:	d5ec      	bpl.n	13312 <ull_conn_rx+0x36>
			conn->llcp_terminate.reason_final =
   13338:	233d      	movs	r3, #61	; 0x3d
   1333a:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1333e:	6823      	ldr	r3, [r4, #0]
   13340:	2201      	movs	r2, #1
   13342:	711a      	strb	r2, [r3, #4]
}
   13344:	2000      	movs	r0, #0
   13346:	bd38      	pop	{r3, r4, r5, pc}
   13348:	20001d50 	.word	0x20001d50

0001334c <ull_conn_llcp>:
{
   1334c:	b570      	push	{r4, r5, r6, lr}
   1334e:	4604      	mov	r4, r0
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
   13350:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   13352:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13356:	4298      	cmp	r0, r3
{
   13358:	460e      	mov	r6, r1
   1335a:	4615      	mov	r5, r2
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
   1335c:	d00c      	beq.n	13378 <ull_conn_llcp+0x2c>
	ull_cp_run(conn);
   1335e:	4620      	mov	r0, r4
	conn->llcp.prep.ticks_at_expire = ticks_at_expire;
   13360:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
	conn->llcp.prep.lazy = lazy;
   13364:	f8a4 5110 	strh.w	r5, [r4, #272]	; 0x110
	ull_cp_run(conn);
   13368:	f001 fe64 	bl	15034 <ull_cp_run>
	if (conn->cancel_prepare) {
   1336c:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
   13370:	f013 0001 	ands.w	r0, r3, #1
   13374:	d10e      	bne.n	13394 <ull_conn_llcp+0x48>
}
   13376:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
   13378:	4a0a      	ldr	r2, [pc, #40]	; (133a4 <ull_conn_llcp+0x58>)
   1337a:	490b      	ldr	r1, [pc, #44]	; (133a8 <ull_conn_llcp+0x5c>)
   1337c:	480b      	ldr	r0, [pc, #44]	; (133ac <ull_conn_llcp+0x60>)
   1337e:	f240 53dd 	movw	r3, #1501	; 0x5dd
   13382:	f00e f9e3 	bl	2174c <assert_print>
   13386:	4040      	eors	r0, r0
   13388:	f380 8811 	msr	BASEPRI, r0
   1338c:	f04f 0003 	mov.w	r0, #3
   13390:	df02      	svc	2
   13392:	e7e4      	b.n	1335e <ull_conn_llcp+0x12>
		conn->cancel_prepare = 0U;
   13394:	f36f 0300 	bfc	r3, #0, #1
   13398:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		return -ECANCELED;
   1339c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   133a0:	bd70      	pop	{r4, r5, r6, pc}
   133a2:	bf00      	nop
   133a4:	00028d4c 	.word	0x00028d4c
   133a8:	00028e58 	.word	0x00028e58
   133ac:	0002866c 	.word	0x0002866c

000133b0 <ull_conn_tx_demux>:
{
   133b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   133b4:	4f1c      	ldr	r7, [pc, #112]	; (13428 <ull_conn_tx_demux+0x78>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   133b6:	4e1d      	ldr	r6, [pc, #116]	; (1342c <ull_conn_tx_demux+0x7c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   133b8:	797a      	ldrb	r2, [r7, #5]
{
   133ba:	4680      	mov	r8, r0
	return (void *)(fifo + first * size);
   133bc:	f107 0508 	add.w	r5, r7, #8
   133c0:	e019      	b.n	133f6 <ull_conn_tx_demux+0x46>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   133c2:	f7fa fe49 	bl	e058 <mem_get>
   133c6:	4603      	mov	r3, r0
			ull_tx_q_enqueue_data(&conn->tx_q, tx);
   133c8:	30d4      	adds	r0, #212	; 0xd4
	if (conn->lll.handle != handle) {
   133ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   133cc:	bb03      	cbnz	r3, 13410 <ull_conn_tx_demux+0x60>
			ull_tx_q_enqueue_data(&conn->tx_q, tx);
   133ce:	6861      	ldr	r1, [r4, #4]
   133d0:	f001 fbc0 	bl	14b54 <ull_tx_q_enqueue_data>
	uint8_t _first = *first; /* Copy read-index */
   133d4:	793b      	ldrb	r3, [r7, #4]
		MFIFO_DEQUEUE(conn_tx);
   133d6:	797a      	ldrb	r2, [r7, #5]
   133d8:	78b9      	ldrb	r1, [r7, #2]
	if (_first == last) {
   133da:	429a      	cmp	r2, r3
	} while (--count);
   133dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	_first += 1U;
   133e0:	f103 0301 	add.w	r3, r3, #1
	if (_first == last) {
   133e4:	d004      	beq.n	133f0 <ull_conn_tx_demux+0x40>
	_first += 1U;
   133e6:	b2db      	uxtb	r3, r3
		_first = 0U;
   133e8:	4299      	cmp	r1, r3
   133ea:	bf08      	it	eq
   133ec:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   133ee:	713b      	strb	r3, [r7, #4]
   133f0:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   133f4:	d016      	beq.n	13424 <ull_conn_tx_demux+0x74>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   133f6:	793b      	ldrb	r3, [r7, #4]
   133f8:	783c      	ldrb	r4, [r7, #0]
	if (first == last) {
   133fa:	4293      	cmp	r3, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   133fc:	f44f 71cc 	mov.w	r1, #408	; 0x198
   13400:	4630      	mov	r0, r6
	return (void *)(fifo + first * size);
   13402:	fb13 f304 	smulbb	r3, r3, r4
	if (first == last) {
   13406:	d00d      	beq.n	13424 <ull_conn_tx_demux+0x74>
	if (handle >= CONFIG_BT_MAX_CONN) {
   13408:	5aea      	ldrh	r2, [r5, r3]
	return (void *)(fifo + first * size);
   1340a:	195c      	adds	r4, r3, r5
   1340c:	2a00      	cmp	r2, #0
   1340e:	d0d8      	beq.n	133c2 <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
   13410:	6861      	ldr	r1, [r4, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   13412:	790b      	ldrb	r3, [r1, #4]
   13414:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   13418:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   1341c:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1341e:	f7fe f921 	bl	11664 <ll_tx_ack_put>
   13422:	e7d7      	b.n	133d4 <ull_conn_tx_demux+0x24>
}
   13424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13428:	20000664 	.word	0x20000664
   1342c:	20001d50 	.word	0x20001d50

00013430 <conn_cleanup_finalize>:
{
   13430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_cp_state_set(conn, ULL_CP_DISCONNECTED);
   13434:	2101      	movs	r1, #1
{
   13436:	b083      	sub	sp, #12
	ull_tx_q_resume_data(&conn->tx_q);
   13438:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
{
   1343c:	4681      	mov	r9, r0
	ull_cp_state_set(conn, ULL_CP_DISCONNECTED);
   1343e:	f001 fe03 	bl	15048 <ull_cp_state_set>
	ull_tx_q_resume_data(&conn->tx_q);
   13442:	4630      	mov	r0, r6
   13444:	f001 fb6e 	bl	14b24 <ull_tx_q_resume_data>
	tx = ull_tx_q_dequeue(&conn->tx_q);
   13448:	4630      	mov	r0, r6
   1344a:	f001 fba3 	bl	14b94 <ull_tx_q_dequeue>
	if (tx) {
   1344e:	2800      	cmp	r0, #0
   13450:	d03b      	beq.n	134ca <conn_cleanup_finalize+0x9a>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   13452:	7903      	ldrb	r3, [r0, #4]
		link = mem_acquire(&mem_link_tx.free);
   13454:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 13514 <conn_cleanup_finalize+0xe4>
		LL_ASSERT(link);
   13458:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 13518 <conn_cleanup_finalize+0xe8>
   1345c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 1351c <conn_cleanup_finalize+0xec>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   13460:	f003 0303 	and.w	r3, r3, #3
   13464:	2b03      	cmp	r3, #3
   13466:	bf0c      	ite	eq
   13468:	4603      	moveq	r3, r0
   1346a:	2300      	movne	r3, #0
			tx->next = NULL;
   1346c:	6003      	str	r3, [r0, #0]
   1346e:	4604      	mov	r4, r0
		link = mem_acquire(&mem_link_tx.free);
   13470:	4640      	mov	r0, r8
   13472:	f7fa fdbd 	bl	dff0 <mem_acquire>
		LL_ASSERT(link);
   13476:	f109 077c 	add.w	r7, r9, #124	; 0x7c
   1347a:	4605      	mov	r5, r0
   1347c:	b1b8      	cbz	r0, 134ae <conn_cleanup_finalize+0x7e>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1347e:	4621      	mov	r1, r4
   13480:	463a      	mov	r2, r7
   13482:	4628      	mov	r0, r5
   13484:	f7fa fe1a 	bl	e0bc <memq_enqueue>
	tx = ull_tx_q_dequeue(&conn->tx_q);
   13488:	4630      	mov	r0, r6
   1348a:	f001 fb83 	bl	14b94 <ull_tx_q_dequeue>
	if (tx) {
   1348e:	4604      	mov	r4, r0
   13490:	b1d8      	cbz	r0, 134ca <conn_cleanup_finalize+0x9a>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   13492:	7903      	ldrb	r3, [r0, #4]
   13494:	f003 0303 	and.w	r3, r3, #3
   13498:	2b03      	cmp	r3, #3
   1349a:	bf0c      	ite	eq
   1349c:	4603      	moveq	r3, r0
   1349e:	2300      	movne	r3, #0
			tx->next = NULL;
   134a0:	6003      	str	r3, [r0, #0]
		link = mem_acquire(&mem_link_tx.free);
   134a2:	4640      	mov	r0, r8
   134a4:	f7fa fda4 	bl	dff0 <mem_acquire>
		LL_ASSERT(link);
   134a8:	4605      	mov	r5, r0
   134aa:	2800      	cmp	r0, #0
   134ac:	d1e7      	bne.n	1347e <conn_cleanup_finalize+0x4e>
   134ae:	481c      	ldr	r0, [pc, #112]	; (13520 <conn_cleanup_finalize+0xf0>)
   134b0:	f640 23d1 	movw	r3, #2769	; 0xad1
   134b4:	465a      	mov	r2, fp
   134b6:	4651      	mov	r1, sl
   134b8:	f00e f948 	bl	2174c <assert_print>
   134bc:	4040      	eors	r0, r0
   134be:	f380 8811 	msr	BASEPRI, r0
   134c2:	f04f 0003 	mov.w	r0, #3
   134c6:	df02      	svc	2
   134c8:	e7d9      	b.n	1347e <conn_cleanup_finalize+0x4e>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   134ca:	f8b9 2028 	ldrh.w	r2, [r9, #40]	; 0x28
   134ce:	4b15      	ldr	r3, [pc, #84]	; (13524 <conn_cleanup_finalize+0xf4>)
   134d0:	f8cd 9000 	str.w	r9, [sp]
   134d4:	3203      	adds	r2, #3
   134d6:	b2d2      	uxtb	r2, r2
   134d8:	2101      	movs	r1, #1
   134da:	2000      	movs	r0, #0
   134dc:	f7fb ff32 	bl	f344 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   134e0:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   134e4:	d00c      	beq.n	13500 <conn_cleanup_finalize+0xd0>
   134e6:	4a0c      	ldr	r2, [pc, #48]	; (13518 <conn_cleanup_finalize+0xe8>)
   134e8:	490f      	ldr	r1, [pc, #60]	; (13528 <conn_cleanup_finalize+0xf8>)
   134ea:	480d      	ldr	r0, [pc, #52]	; (13520 <conn_cleanup_finalize+0xf0>)
   134ec:	f640 2388 	movw	r3, #2696	; 0xa88
   134f0:	f00e f92c 	bl	2174c <assert_print>
   134f4:	4040      	eors	r0, r0
   134f6:	f380 8811 	msr	BASEPRI, r0
   134fa:	f04f 0003 	mov.w	r0, #3
   134fe:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   13500:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   13504:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   13506:	f8a9 3028 	strh.w	r3, [r9, #40]	; 0x28
}
   1350a:	b003      	add	sp, #12
   1350c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   13510:	f7ff bf4e 	b.w	133b0 <ull_conn_tx_demux>
   13514:	20003018 	.word	0x20003018
   13518:	00028d4c 	.word	0x00028d4c
   1351c:	00028d9c 	.word	0x00028d9c
   13520:	0002866c 	.word	0x0002866c
   13524:	00012b0d 	.word	0x00012b0d
   13528:	00028e10 	.word	0x00028e10

0001352c <ull_conn_tx_lll_enqueue>:
	while (count--) {
   1352c:	2900      	cmp	r1, #0
   1352e:	d03a      	beq.n	135a6 <ull_conn_tx_lll_enqueue+0x7a>
{
   13530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13534:	1e4d      	subs	r5, r1, #1
		link = mem_acquire(&mem_link_tx.free);
   13536:	f8df 9070 	ldr.w	r9, [pc, #112]	; 135a8 <ull_conn_tx_lll_enqueue+0x7c>
		LL_ASSERT(link);
   1353a:	f8df b070 	ldr.w	fp, [pc, #112]	; 135ac <ull_conn_tx_lll_enqueue+0x80>
   1353e:	f8df a070 	ldr.w	sl, [pc, #112]	; 135b0 <ull_conn_tx_lll_enqueue+0x84>
   13542:	4607      	mov	r7, r0
   13544:	b2ed      	uxtb	r5, r5
	tx = ull_tx_q_dequeue(&conn->tx_q);
   13546:	f100 08d4 	add.w	r8, r0, #212	; 0xd4
   1354a:	e015      	b.n	13578 <ull_conn_tx_lll_enqueue+0x4c>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1354c:	7923      	ldrb	r3, [r4, #4]
   1354e:	f003 0303 	and.w	r3, r3, #3
			tx->next = tx;
   13552:	2b03      	cmp	r3, #3
   13554:	bf0c      	ite	eq
   13556:	4623      	moveq	r3, r4
   13558:	2300      	movne	r3, #0
   1355a:	6023      	str	r3, [r4, #0]
		link = mem_acquire(&mem_link_tx.free);
   1355c:	f7fa fd48 	bl	dff0 <mem_acquire>
		LL_ASSERT(link);
   13560:	4606      	mov	r6, r0
   13562:	b190      	cbz	r0, 1358a <ull_conn_tx_lll_enqueue+0x5e>
	while (count--) {
   13564:	3d01      	subs	r5, #1
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13566:	f107 027c 	add.w	r2, r7, #124	; 0x7c
   1356a:	4621      	mov	r1, r4
   1356c:	4630      	mov	r0, r6
	while (count--) {
   1356e:	b2ed      	uxtb	r5, r5
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13570:	f7fa fda4 	bl	e0bc <memq_enqueue>
	while (count--) {
   13574:	2dff      	cmp	r5, #255	; 0xff
   13576:	d006      	beq.n	13586 <ull_conn_tx_lll_enqueue+0x5a>
	tx = ull_tx_q_dequeue(&conn->tx_q);
   13578:	4640      	mov	r0, r8
   1357a:	f001 fb0b 	bl	14b94 <ull_tx_q_dequeue>
   1357e:	4604      	mov	r4, r0
		link = mem_acquire(&mem_link_tx.free);
   13580:	4648      	mov	r0, r9
	if (tx) {
   13582:	2c00      	cmp	r4, #0
   13584:	d1e2      	bne.n	1354c <ull_conn_tx_lll_enqueue+0x20>
}
   13586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_ASSERT(link);
   1358a:	480a      	ldr	r0, [pc, #40]	; (135b4 <ull_conn_tx_lll_enqueue+0x88>)
   1358c:	f640 0332 	movw	r3, #2098	; 0x832
   13590:	465a      	mov	r2, fp
   13592:	4651      	mov	r1, sl
   13594:	f00e f8da 	bl	2174c <assert_print>
   13598:	4040      	eors	r0, r0
   1359a:	f380 8811 	msr	BASEPRI, r0
   1359e:	f04f 0003 	mov.w	r0, #3
   135a2:	df02      	svc	2
   135a4:	e7de      	b.n	13564 <ull_conn_tx_lll_enqueue+0x38>
   135a6:	4770      	bx	lr
   135a8:	20003018 	.word	0x20003018
   135ac:	00028d4c 	.word	0x00028d4c
   135b0:	00028d9c 	.word	0x00028d9c
   135b4:	0002866c 	.word	0x0002866c

000135b8 <tx_demux>:
{
   135b8:	b510      	push	{r4, lr}
   135ba:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   135bc:	2001      	movs	r0, #1
   135be:	f7ff fef7 	bl	133b0 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   135c2:	4620      	mov	r0, r4
   135c4:	2101      	movs	r1, #1
}
   135c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   135ca:	f7ff bfaf 	b.w	1352c <ull_conn_tx_lll_enqueue>
   135ce:	bf00      	nop

000135d0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   135d0:	4901      	ldr	r1, [pc, #4]	; (135d8 <ull_conn_link_tx_release+0x8>)
   135d2:	f7fa bd29 	b.w	e028 <mem_release>
   135d6:	bf00      	nop
   135d8:	20003018 	.word	0x20003018

000135dc <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   135dc:	4b01      	ldr	r3, [pc, #4]	; (135e4 <ull_conn_ack_last_idx_get+0x8>)
}
   135de:	7958      	ldrb	r0, [r3, #5]
   135e0:	4770      	bx	lr
   135e2:	bf00      	nop
   135e4:	2000061c 	.word	0x2000061c

000135e8 <ull_conn_ack_peek>:
{
   135e8:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   135ea:	4b0c      	ldr	r3, [pc, #48]	; (1361c <ull_conn_ack_peek+0x34>)
   135ec:	f893 c004 	ldrb.w	ip, [r3, #4]
   135f0:	f893 e005 	ldrb.w	lr, [r3, #5]
   135f4:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   135f6:	45f4      	cmp	ip, lr
   135f8:	d00d      	beq.n	13616 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   135fa:	fb1c fc04 	smulbb	ip, ip, r4
   135fe:	3308      	adds	r3, #8
	*ack_last = mfifo_conn_ack.l;
   13600:	f880 e000 	strb.w	lr, [r0]
   13604:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
   13608:	f833 300c 	ldrh.w	r3, [r3, ip]
   1360c:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1360e:	6843      	ldr	r3, [r0, #4]
   13610:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   13612:	6818      	ldr	r0, [r3, #0]
}
   13614:	bd10      	pop	{r4, pc}
		return NULL;
   13616:	2000      	movs	r0, #0
}
   13618:	bd10      	pop	{r4, pc}
   1361a:	bf00      	nop
   1361c:	2000061c 	.word	0x2000061c

00013620 <ull_conn_ack_by_last_peek>:
{
   13620:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   13622:	4b0b      	ldr	r3, [pc, #44]	; (13650 <ull_conn_ack_by_last_peek+0x30>)
   13624:	f893 c004 	ldrb.w	ip, [r3, #4]
   13628:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   1362c:	4584      	cmp	ip, r0
   1362e:	d00c      	beq.n	1364a <ull_conn_ack_by_last_peek+0x2a>
	return (void *)(fifo + first * size);
   13630:	fb1c fc0e 	smulbb	ip, ip, lr
   13634:	3308      	adds	r3, #8
   13636:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
   1363a:	f833 300c 	ldrh.w	r3, [r3, ip]
   1363e:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   13640:	6843      	ldr	r3, [r0, #4]
   13642:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   13644:	6818      	ldr	r0, [r3, #0]
}
   13646:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1364a:	2000      	movs	r0, #0
   1364c:	e7fb      	b.n	13646 <ull_conn_ack_by_last_peek+0x26>
   1364e:	bf00      	nop
   13650:	2000061c 	.word	0x2000061c

00013654 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   13654:	4b09      	ldr	r3, [pc, #36]	; (1367c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   13656:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   13658:	795a      	ldrb	r2, [r3, #5]
   1365a:	7818      	ldrb	r0, [r3, #0]
   1365c:	f893 c002 	ldrb.w	ip, [r3, #2]
   13660:	428a      	cmp	r2, r1
   13662:	d009      	beq.n	13678 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   13664:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   13666:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   1366a:	b2d2      	uxtb	r2, r2
		_first = 0U;
   1366c:	4594      	cmp	ip, r2
   1366e:	bf08      	it	eq
   13670:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   13672:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
   13674:	711a      	strb	r2, [r3, #4]
	return mem;
   13676:	4770      	bx	lr
		return NULL;
   13678:	2000      	movs	r0, #0
}
   1367a:	4770      	bx	lr
   1367c:	2000061c 	.word	0x2000061c

00013680 <ull_conn_lll_ack_enqueue>:
{
   13680:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   13682:	4c14      	ldr	r4, [pc, #80]	; (136d4 <ull_conn_lll_ack_enqueue+0x54>)
   13684:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   13686:	f894 e002 	ldrb.w	lr, [r4, #2]
   1368a:	f894 c004 	ldrb.w	ip, [r4, #4]
   1368e:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   13690:	1c53      	adds	r3, r2, #1
   13692:	b2db      	uxtb	r3, r3
		last = 0U;
   13694:	459e      	cmp	lr, r3
   13696:	bf08      	it	eq
   13698:	2300      	moveq	r3, #0
	if (last == first) {
   1369a:	459c      	cmp	ip, r3
   1369c:	d009      	beq.n	136b2 <ull_conn_lll_ack_enqueue+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1369e:	fb12 f205 	smulbb	r2, r2, r5
   136a2:	f104 0c08 	add.w	ip, r4, #8
	lll_tx->handle = handle;
   136a6:	f82c 0002 	strh.w	r0, [ip, r2]
   136aa:	4462      	add	r2, ip
	lll_tx->node = tx;
   136ac:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   136ae:	7163      	strb	r3, [r4, #5]
}
   136b0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   136b2:	4a09      	ldr	r2, [pc, #36]	; (136d8 <ull_conn_lll_ack_enqueue+0x58>)
   136b4:	4909      	ldr	r1, [pc, #36]	; (136dc <ull_conn_lll_ack_enqueue+0x5c>)
   136b6:	480a      	ldr	r0, [pc, #40]	; (136e0 <ull_conn_lll_ack_enqueue+0x60>)
   136b8:	f640 0372 	movw	r3, #2162	; 0x872
   136bc:	f00e f846 	bl	2174c <assert_print>
   136c0:	4040      	eors	r0, r0
   136c2:	f380 8811 	msr	BASEPRI, r0
   136c6:	f04f 0003 	mov.w	r0, #3
   136ca:	df02      	svc	2
	lll_tx->handle = handle;
   136cc:	2300      	movs	r3, #0
   136ce:	801b      	strh	r3, [r3, #0]
   136d0:	deff      	udf	#255	; 0xff
   136d2:	bf00      	nop
   136d4:	2000061c 	.word	0x2000061c
   136d8:	00028d4c 	.word	0x00028d4c
   136dc:	00028d8c 	.word	0x00028d8c
   136e0:	0002866c 	.word	0x0002866c

000136e4 <ull_conn_tx_ack>:
{
   136e4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   136e6:	7953      	ldrb	r3, [r2, #5]
{
   136e8:	4614      	mov	r4, r2
   136ea:	4605      	mov	r5, r0
   136ec:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   136ee:	b36b      	cbz	r3, 1374c <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   136f0:	7923      	ldrb	r3, [r4, #4]
   136f2:	f003 0203 	and.w	r2, r3, #3
   136f6:	2a03      	cmp	r2, #3
   136f8:	d00c      	beq.n	13714 <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
   136fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   136fe:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   13700:	bf04      	itt	eq
   13702:	f36f 0301 	bfceq	r3, #0, #2
   13706:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   13708:	4621      	mov	r1, r4
   1370a:	4628      	mov	r0, r5
}
   1370c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   13710:	f7fd bfa8 	b.w	11664 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   13714:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13718:	429d      	cmp	r5, r3
   1371a:	d125      	bne.n	13768 <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
   1371c:	6833      	ldr	r3, [r6, #0]
   1371e:	429c      	cmp	r4, r3
   13720:	d037      	beq.n	13792 <ull_conn_tx_ack+0xae>
		LL_ASSERT(!link->next);
   13722:	2b00      	cmp	r3, #0
   13724:	d0f0      	beq.n	13708 <ull_conn_tx_ack+0x24>
   13726:	4a1e      	ldr	r2, [pc, #120]	; (137a0 <ull_conn_tx_ack+0xbc>)
   13728:	491e      	ldr	r1, [pc, #120]	; (137a4 <ull_conn_tx_ack+0xc0>)
   1372a:	481f      	ldr	r0, [pc, #124]	; (137a8 <ull_conn_tx_ack+0xc4>)
   1372c:	f640 03a2 	movw	r3, #2210	; 0x8a2
   13730:	f00e f80c 	bl	2174c <assert_print>
   13734:	4040      	eors	r0, r0
   13736:	f380 8811 	msr	BASEPRI, r0
   1373a:	f04f 0003 	mov.w	r0, #3
   1373e:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   13740:	4621      	mov	r1, r4
   13742:	4628      	mov	r0, r5
}
   13744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   13748:	f7fd bf8c 	b.w	11664 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1374c:	4a14      	ldr	r2, [pc, #80]	; (137a0 <ull_conn_tx_ack+0xbc>)
   1374e:	4917      	ldr	r1, [pc, #92]	; (137ac <ull_conn_tx_ack+0xc8>)
   13750:	4815      	ldr	r0, [pc, #84]	; (137a8 <ull_conn_tx_ack+0xc4>)
   13752:	f640 037f 	movw	r3, #2175	; 0x87f
   13756:	f00d fff9 	bl	2174c <assert_print>
   1375a:	4040      	eors	r0, r0
   1375c:	f380 8811 	msr	BASEPRI, r0
   13760:	f04f 0003 	mov.w	r0, #3
   13764:	df02      	svc	2
   13766:	e7c3      	b.n	136f0 <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13768:	462a      	mov	r2, r5
   1376a:	f44f 71cc 	mov.w	r1, #408	; 0x198
   1376e:	4810      	ldr	r0, [pc, #64]	; (137b0 <ull_conn_tx_ack+0xcc>)
   13770:	f7fa fc72 	bl	e058 <mem_get>
			ull_cp_tx_ack(conn, tx);
   13774:	4621      	mov	r1, r4
   13776:	f001 fe01 	bl	1537c <ull_cp_tx_ack>
		if (link->next == (void *)tx) {
   1377a:	6833      	ldr	r3, [r6, #0]
   1377c:	42a3      	cmp	r3, r4
   1377e:	d1d0      	bne.n	13722 <ull_conn_tx_ack+0x3e>
	if (handle >= CONFIG_BT_MAX_CONN) {
   13780:	b93d      	cbnz	r5, 13792 <ull_conn_tx_ack+0xae>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13782:	480b      	ldr	r0, [pc, #44]	; (137b0 <ull_conn_tx_ack+0xcc>)
   13784:	462a      	mov	r2, r5
   13786:	f44f 71cc 	mov.w	r1, #408	; 0x198
   1378a:	f7fa fc65 	bl	e058 <mem_get>
	if (conn->lll.handle != handle) {
   1378e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   13790:	b103      	cbz	r3, 13794 <ull_conn_tx_ack+0xb0>
		return NULL;
   13792:	2000      	movs	r0, #0
			ull_cp_release_tx(conn, tx);
   13794:	4621      	mov	r1, r4
}
   13796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ull_cp_release_tx(conn, tx);
   1379a:	f001 bc01 	b.w	14fa0 <ull_cp_release_tx>
   1379e:	bf00      	nop
   137a0:	00028d4c 	.word	0x00028d4c
   137a4:	00028edc 	.word	0x00028edc
   137a8:	0002866c 	.word	0x0002866c
   137ac:	00028ed0 	.word	0x00028ed0
   137b0:	20001d50 	.word	0x20001d50

000137b4 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   137b4:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
   137b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
	switch (lll->phy_tx_time) {
   137bc:	f3c2 1202 	ubfx	r2, r2, #4, #3
   137c0:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
   137c2:	bf14      	ite	ne
   137c4:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->dle.eff.max_tx_time >> 2) - 11;
   137c6:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   137c8:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
	return max_tx_octets;
   137cc:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
   137d0:	bf14      	ite	ne
   137d2:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->dle.eff.max_tx_time >> 2) - 11;
   137d4:	3b0b      	subeq	r3, #11
   137d6:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   137d8:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   137da:	bf44      	itt	mi
   137dc:	3b04      	submi	r3, #4
   137de:	b29b      	uxthmi	r3, r3
}
   137e0:	4298      	cmp	r0, r3
   137e2:	bf28      	it	cs
   137e4:	4618      	movcs	r0, r3
   137e6:	4770      	bx	lr

000137e8 <ull_pdu_data_init>:
}
   137e8:	4770      	bx	lr
   137ea:	bf00      	nop

000137ec <ull_conn_pause_rx_data>:
	conn->pause_rx_data = 1U;
   137ec:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
   137f0:	f043 0302 	orr.w	r3, r3, #2
   137f4:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
}
   137f8:	4770      	bx	lr
   137fa:	bf00      	nop

000137fc <ull_conn_resume_rx_data>:
	conn->pause_rx_data = 0U;
   137fc:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
   13800:	f36f 0341 	bfc	r3, #1, #1
   13804:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
}
   13808:	4770      	bx	lr
   1380a:	bf00      	nop

0001380c <ull_conn_event_counter>:
   1380c:	7802      	ldrb	r2, [r0, #0]
		event_counter = lll->event_counter - 1;
   1380e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
	if (ull_ref_get(&conn->ull)) {
   13810:	b112      	cbz	r2, 13818 <ull_conn_event_counter+0xc>
		event_counter = lll->event_counter - 1;
   13812:	1e58      	subs	r0, r3, #1
   13814:	b280      	uxth	r0, r0
   13816:	4770      	bx	lr
		event_counter = lll->event_counter + lll->latency_prepare +
   13818:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
   1381a:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
   1381e:	1858      	adds	r0, r3, r1
   13820:	4410      	add	r0, r2
   13822:	b280      	uxth	r0, r0
}
   13824:	4770      	bx	lr
   13826:	bf00      	nop

00013828 <ull_conn_chan_map_set>:

}
#endif /* CONFIG_BT_PERIPHERAL */

void ull_conn_chan_map_set(struct ll_conn *conn, const uint8_t chm[5])
{
   13828:	b538      	push	{r3, r4, r5, lr}
	struct lll_conn *lll = &conn->lll;

	memcpy(lll->data_chan_map, chm, sizeof(lll->data_chan_map));
   1382a:	f100 0534 	add.w	r5, r0, #52	; 0x34
{
   1382e:	4604      	mov	r4, r0
	memcpy(lll->data_chan_map, chm, sizeof(lll->data_chan_map));
   13830:	2205      	movs	r2, #5
   13832:	4628      	mov	r0, r5
   13834:	f010 f9ea 	bl	23c0c <memcpy>
	lll->data_chan_count = util_ones_count_get(lll->data_chan_map, sizeof(lll->data_chan_map));
   13838:	2105      	movs	r1, #5
   1383a:	4628      	mov	r0, r5
   1383c:	f7fa fdba 	bl	e3b4 <util_ones_count_get>
   13840:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   13844:	f360 0305 	bfi	r3, r0, #0, #6
   13848:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
   1384c:	bd38      	pop	{r3, r4, r5, pc}
   1384e:	bf00      	nop

00013850 <ull_dle_max_time_get>:
	 * minimum value for time is 328 us
	 */
	rx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, rx_time);
	tx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, tx_time);

	*max_rx_time = rx_time;
   13850:	f44f 73a4 	mov.w	r3, #328	; 0x148
   13854:	800b      	strh	r3, [r1, #0]
	*max_tx_time = tx_time;
   13856:	8013      	strh	r3, [r2, #0]

void ull_dle_max_time_get(struct ll_conn *conn, uint16_t *max_rx_time,
				    uint16_t *max_tx_time)
{
	return dle_max_time_get(conn, max_rx_time, max_tx_time);
}
   13858:	4770      	bx	lr
   1385a:	bf00      	nop

0001385c <ull_dle_update_eff>:
/*
 * TODO: this probably can be optimised for ex. by creating a macro for the
 * ull_dle_update_eff function
 */
uint8_t ull_dle_update_eff(struct ll_conn *conn)
{
   1385c:	b500      	push	{lr}
uint8_t ull_dle_update_eff_rx(struct ll_conn *conn)
{
	uint8_t dle_changed = 0U;

	const uint16_t eff_rx_octets =
		MAX(MIN(conn->lll.dle.local.max_rx_octets, conn->lll.dle.remote.max_tx_octets),
   1385e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
   13862:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
{
   13866:	4603      	mov	r3, r0
	const uint16_t eff_rx_octets =
   13868:	428a      	cmp	r2, r1
		    PDU_DC_PAYLOAD_SIZE_MIN);

#if defined(CONFIG_BT_CTLR_PHY)
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
   1386a:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;

	const uint16_t eff_rx_time =
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   1386e:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	const uint16_t eff_rx_octets =
   13872:	bf28      	it	cs
   13874:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   13876:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   1387a:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
	const uint16_t eff_rx_octets =
   1387e:	2a1b      	cmp	r2, #27
   13880:	bf38      	it	cc
   13882:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   13884:	2804      	cmp	r0, #4
   13886:	bf14      	ite	ne
   13888:	f44f 70a4 	movne.w	r0, #328	; 0x148
   1388c:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   13890:	4561      	cmp	r1, ip
   13892:	bf28      	it	cs
   13894:	4661      	movcs	r1, ip
	const uint16_t eff_rx_time =
   13896:	4281      	cmp	r1, r0
		    min_eff_rx_time);

	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   13898:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	; 0x6e
	const uint16_t eff_rx_time =
   1389c:	bf38      	it	cc
   1389e:	4601      	movcc	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   138a0:	458c      	cmp	ip, r1
	}
#else
	conn->lll.dle.eff.max_rx_time = PDU_DC_MAX_US(eff_rx_octets, PHY_1M);
#endif

	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   138a2:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   138a6:	d044      	beq.n	13932 <ull_dle_update_eff+0xd6>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   138a8:	4290      	cmp	r0, r2
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
   138aa:	f8a3 106e 	strh.w	r1, [r3, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   138ae:	d001      	beq.n	138b4 <ull_dle_update_eff+0x58>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
   138b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		dle_changed = 1U;
	}
#if defined(CONFIG_BT_CTLR_SLOT_RESERVATION_UPDATE)
	/* we delay the update of event length to after the DLE procedure is finishede */
	if (dle_changed) {
		conn->lll.evt_len_upd_delayed = 1;
   138b4:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
   138b8:	f042 0202 	orr.w	r2, r2, #2
   138bc:	2001      	movs	r0, #1
   138be:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1

{
	uint8_t dle_changed = 0U;

	const uint16_t eff_tx_octets =
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
   138c2:	f8b3 c058 	ldrh.w	ip, [r3, #88]	; 0x58
   138c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
		    PDU_DC_PAYLOAD_SIZE_MIN);

#if defined(CONFIG_BT_CTLR_PHY)
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
   138ca:	f893 1076 	ldrb.w	r1, [r3, #118]	; 0x76
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;

	const uint16_t eff_tx_time =
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   138ce:	f8b3 e05c 	ldrh.w	lr, [r3, #92]	; 0x5c
	const uint16_t eff_tx_octets =
   138d2:	4562      	cmp	r2, ip
   138d4:	bf28      	it	cs
   138d6:	4662      	movcs	r2, ip
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   138d8:	f001 0107 	and.w	r1, r1, #7
	const uint16_t eff_tx_octets =
   138dc:	2a1b      	cmp	r2, #27
   138de:	bf38      	it	cc
   138e0:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   138e2:	2904      	cmp	r1, #4
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   138e4:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   138e8:	bf14      	ite	ne
   138ea:	f44f 7ca4 	movne.w	ip, #328	; 0x148
   138ee:	f44f 6c29 	moveq.w	ip, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   138f2:	4571      	cmp	r1, lr
   138f4:	bf28      	it	cs
   138f6:	4671      	movcs	r1, lr
	const uint16_t eff_tx_time =
   138f8:	4561      	cmp	r1, ip
		    min_eff_tx_time);

	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   138fa:	f8b3 e06c 	ldrh.w	lr, [r3, #108]	; 0x6c
	const uint16_t eff_tx_time =
   138fe:	bf38      	it	cc
   13900:	4661      	movcc	r1, ip
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   13902:	458e      	cmp	lr, r1
	}
#else
	conn->lll.dle.eff.max_tx_time = PDU_DC_MAX_US(eff_tx_octets, PHY_1M);
#endif

	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   13904:	f8b3 c068 	ldrh.w	ip, [r3, #104]	; 0x68
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   13908:	d017      	beq.n	1393a <ull_dle_update_eff+0xde>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   1390a:	4562      	cmp	r2, ip
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
   1390c:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   13910:	d001      	beq.n	13916 <ull_dle_update_eff+0xba>
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
   13912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#if defined(CONFIG_BT_CTLR_SLOT_RESERVATION_UPDATE)
	if (dle_changed) {
		conn->lll.evt_len_upd = 1U;
	}
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
	conn->lll.evt_len_upd_delayed = 0;
   13916:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
   1391a:	f36f 0241 	bfc	r2, #1, #1
   1391e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
		conn->lll.evt_len_upd = 1U;
   13922:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
   13926:	2001      	movs	r0, #1
   13928:	4302      	orrs	r2, r0
   1392a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
   1392e:	f85d fb04 	ldr.w	pc, [sp], #4
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   13932:	4290      	cmp	r0, r2
   13934:	d1bc      	bne.n	138b0 <ull_dle_update_eff+0x54>
   13936:	2000      	movs	r0, #0
   13938:	e7c3      	b.n	138c2 <ull_dle_update_eff+0x66>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   1393a:	4562      	cmp	r2, ip
   1393c:	d1e9      	bne.n	13912 <ull_dle_update_eff+0xb6>
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
   1393e:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
   13942:	ea41 0251 	orr.w	r2, r1, r1, lsr #1
   13946:	f002 0201 	and.w	r2, r2, #1
   1394a:	f021 0103 	bic.w	r1, r1, #3
   1394e:	430a      	orrs	r2, r1
   13950:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	if (dle_changed) {
   13954:	2800      	cmp	r0, #0
   13956:	d1e4      	bne.n	13922 <ull_dle_update_eff+0xc6>
}
   13958:	f85d fb04 	ldr.w	pc, [sp], #4

0001395c <ull_dle_update_eff_rx>:
		MAX(MIN(conn->lll.dle.local.max_rx_octets, conn->lll.dle.remote.max_tx_octets),
   1395c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
   13960:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
{
   13964:	4603      	mov	r3, r0
	const uint16_t eff_rx_octets =
   13966:	428a      	cmp	r2, r1
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
   13968:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   1396c:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	const uint16_t eff_rx_octets =
   13970:	bf28      	it	cs
   13972:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   13974:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   13978:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
	const uint16_t eff_rx_octets =
   1397c:	2a1b      	cmp	r2, #27
   1397e:	bf38      	it	cc
   13980:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   13982:	2804      	cmp	r0, #4
   13984:	bf14      	ite	ne
   13986:	f44f 70a4 	movne.w	r0, #328	; 0x148
   1398a:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   1398e:	4561      	cmp	r1, ip
   13990:	bf28      	it	cs
   13992:	4661      	movcs	r1, ip
	const uint16_t eff_rx_time =
   13994:	4281      	cmp	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   13996:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	; 0x6e
	const uint16_t eff_rx_time =
   1399a:	bf38      	it	cc
   1399c:	4601      	movcc	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   1399e:	458c      	cmp	ip, r1
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   139a0:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   139a4:	d00d      	beq.n	139c2 <ull_dle_update_eff_rx+0x66>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   139a6:	4290      	cmp	r0, r2
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
   139a8:	f8a3 106e 	strh.w	r1, [r3, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   139ac:	d001      	beq.n	139b2 <ull_dle_update_eff_rx+0x56>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
   139ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		conn->lll.evt_len_upd_delayed = 1;
   139b2:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
   139b6:	f042 0202 	orr.w	r2, r2, #2
   139ba:	2001      	movs	r0, #1
   139bc:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
   139c0:	4770      	bx	lr
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   139c2:	4290      	cmp	r0, r2
   139c4:	d1f3      	bne.n	139ae <ull_dle_update_eff_rx+0x52>
   139c6:	2000      	movs	r0, #0
}
   139c8:	4770      	bx	lr
   139ca:	bf00      	nop

000139cc <ull_dle_update_eff_tx>:
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
   139cc:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
   139d0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
{
   139d4:	4603      	mov	r3, r0
	const uint16_t eff_tx_octets =
   139d6:	428a      	cmp	r2, r1
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
   139d8:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   139dc:	f8b3 c05c 	ldrh.w	ip, [r3, #92]	; 0x5c
	const uint16_t eff_tx_octets =
   139e0:	bf28      	it	cs
   139e2:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   139e4:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   139e8:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
	const uint16_t eff_tx_octets =
   139ec:	2a1b      	cmp	r2, #27
   139ee:	bf38      	it	cc
   139f0:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   139f2:	2804      	cmp	r0, #4
   139f4:	bf14      	ite	ne
   139f6:	f44f 70a4 	movne.w	r0, #328	; 0x148
   139fa:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   139fe:	4561      	cmp	r1, ip
   13a00:	bf28      	it	cs
   13a02:	4661      	movcs	r1, ip
	const uint16_t eff_tx_time =
   13a04:	4281      	cmp	r1, r0
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   13a06:	f8b3 c06c 	ldrh.w	ip, [r3, #108]	; 0x6c
	const uint16_t eff_tx_time =
   13a0a:	bf38      	it	cc
   13a0c:	4601      	movcc	r1, r0
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   13a0e:	458c      	cmp	ip, r1
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   13a10:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   13a14:	d014      	beq.n	13a40 <ull_dle_update_eff_tx+0x74>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   13a16:	4282      	cmp	r2, r0
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
   13a18:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   13a1c:	d001      	beq.n	13a22 <ull_dle_update_eff_tx+0x56>
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
   13a1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
   13a22:	f04f 0c01 	mov.w	ip, #1
   13a26:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
   13a2a:	4660      	mov	r0, ip
   13a2c:	f3c1 0240 	ubfx	r2, r1, #1, #1
   13a30:	ea42 020c 	orr.w	r2, r2, ip
   13a34:	f021 0103 	bic.w	r1, r1, #3
   13a38:	430a      	orrs	r2, r1
   13a3a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
#endif

	return dle_changed;
}
   13a3e:	4770      	bx	lr
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   13a40:	4282      	cmp	r2, r0
   13a42:	d1ec      	bne.n	13a1e <ull_dle_update_eff_tx+0x52>
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
   13a44:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
   13a48:	2000      	movs	r0, #0
   13a4a:	f001 0c01 	and.w	ip, r1, #1
   13a4e:	e7ed      	b.n	13a2c <ull_dle_update_eff_tx+0x60>

00013a50 <ull_dle_local_tx_update>:
	uint16_t tx_time_max =
			PDU_DC_MAX_US(LL_LENGTH_OCTETS_TX_MAX, PHY_1M);
#endif /* !CONFIG_BT_CTLR_PHY_CODED */

	/* trim to supported values */
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
   13a50:	291b      	cmp	r1, #27
   13a52:	bf28      	it	cs
   13a54:	211b      	movcs	r1, #27
		*tx_octets = LL_LENGTH_OCTETS_TX_MAX;
	}

	if (*tx_time > tx_time_max) {
   13a56:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
	*max_tx_time = tx_time;
   13a5a:	4b06      	ldr	r3, [pc, #24]	; (13a74 <ull_dle_local_tx_update+0x24>)
void ull_dle_local_tx_update(struct ll_conn *conn, uint16_t tx_octets, uint16_t tx_time)
{
	/* Trim to supported values */
	ull_len_data_length_trim(&tx_octets, &tx_time);

	conn->lll.dle.default_tx_octets = tx_octets;
   13a5c:	f8a0 1072 	strh.w	r1, [r0, #114]	; 0x72
	if (*tx_time > tx_time_max) {
   13a60:	bf28      	it	cs
   13a62:	f44f 72a4 	movcs.w	r2, #328	; 0x148

#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.default_tx_time = tx_time;
   13a66:	f8a0 2070 	strh.w	r2, [r0, #112]	; 0x70
	*max_tx_time = tx_time;
   13a6a:	65c3      	str	r3, [r0, #92]	; 0x5c
#endif /* CONFIG_BT_CTLR_PHY */

	dle_max_time_get(conn, &conn->lll.dle.local.max_rx_time, &conn->lll.dle.local.max_tx_time);
	conn->lll.dle.local.max_tx_octets = conn->lll.dle.default_tx_octets;
   13a6c:	f8a0 1058 	strh.w	r1, [r0, #88]	; 0x58
}
   13a70:	4770      	bx	lr
   13a72:	bf00      	nop
   13a74:	01480148 	.word	0x01480148

00013a78 <ull_dle_init>:

void ull_dle_init(struct ll_conn *conn, uint8_t phy)
{
   13a78:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_CTLR_PHY)
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   13a7a:	f001 0503 	and.w	r5, r1, #3
   13a7e:	3528      	adds	r5, #40	; 0x28
{
   13a80:	4604      	mov	r4, r0
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   13a82:	f3c1 0340 	ubfx	r3, r1, #1, #1
	const uint16_t max_time_max = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, phy);
#endif

	/* Clear DLE data set */
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
   13a86:	221e      	movs	r2, #30
   13a88:	2100      	movs	r1, #0
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   13a8a:	00ed      	lsls	r5, r5, #3
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
   13a8c:	3058      	adds	r0, #88	; 0x58
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   13a8e:	40dd      	lsrs	r5, r3
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
   13a90:	f010 f8c7 	bl	23c22 <memset>
	/* See BT. 5.2 Spec - Vol 6, Part B, Sect 4.5.10
	 * Default to locally max supported rx/tx length/time
	 */
	ull_dle_local_tx_update(conn, default_tx_octets, default_tx_time);
   13a94:	4a31      	ldr	r2, [pc, #196]	; (13b5c <ull_dle_init+0xe4>)
   13a96:	4b32      	ldr	r3, [pc, #200]	; (13b60 <ull_dle_init+0xe8>)
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
   13a98:	8812      	ldrh	r2, [r2, #0]
	if (*tx_time > tx_time_max) {
   13a9a:	881b      	ldrh	r3, [r3, #0]
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
   13a9c:	2a1b      	cmp	r2, #27
   13a9e:	bf28      	it	cs
   13aa0:	221b      	movcs	r2, #27
	if (*tx_time > tx_time_max) {
   13aa2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13aa6:	bf28      	it	cs
   13aa8:	f44f 73a4 	movcs.w	r3, #328	; 0x148
	conn->lll.dle.default_tx_time = tx_time;
   13aac:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	*max_tx_time = tx_time;
   13ab0:	f44f 73a4 	mov.w	r3, #328	; 0x148
   13ab4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
   13ab8:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
	conn->lll.dle.default_tx_octets = tx_octets;
   13abc:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   13ac0:	f003 0307 	and.w	r3, r3, #7
   13ac4:	2b04      	cmp	r3, #4
   13ac6:	bf14      	ite	ne
   13ac8:	f44f 73a4 	movne.w	r3, #328	; 0x148
   13acc:	f44f 6329 	moveq.w	r3, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   13ad0:	42ab      	cmp	r3, r5

	conn->lll.dle.local.max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13ad2:	f04f 011b 	mov.w	r1, #27
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   13ad6:	bf38      	it	cc
   13ad8:	462b      	movcc	r3, r5
	conn->lll.dle.local.max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13ada:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   13ade:	f8b4 106e 	ldrh.w	r1, [r4, #110]	; 0x6e
	conn->lll.dle.local.max_tx_octets = conn->lll.dle.default_tx_octets;
   13ae2:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
	const uint16_t eff_rx_time =
   13ae6:	b29b      	uxth	r3, r3
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   13ae8:	b2ae      	uxth	r6, r5
#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.local.max_rx_time = max_time_max;
#endif /* CONFIG_BT_CTLR_PHY */

	/* Default to minimum rx/tx data length/time */
	conn->lll.dle.remote.max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   13aea:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   13aee:	4299      	cmp	r1, r3
	conn->lll.dle.remote.max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   13af0:	6622      	str	r2, [r4, #96]	; 0x60
	conn->lll.dle.local.max_rx_time = max_time_max;
   13af2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   13af6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
	conn->lll.dle.remote.max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;

#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.remote.max_tx_time = max_time_min;
   13afa:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
	conn->lll.dle.remote.max_rx_time = max_time_min;
   13afe:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   13b02:	d01c      	beq.n	13b3e <ull_dle_init+0xc6>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   13b04:	2a1b      	cmp	r2, #27
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
   13b06:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   13b0a:	d002      	beq.n	13b12 <ull_dle_init+0x9a>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
   13b0c:	231b      	movs	r3, #27
   13b0e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		conn->lll.evt_len_upd_delayed = 1;
   13b12:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
   13b16:	f043 0302 	orr.w	r3, r3, #2
	dle_changed |= ull_dle_update_eff_tx(conn);
   13b1a:	4620      	mov	r0, r4
		conn->lll.evt_len_upd_delayed = 1;
   13b1c:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
	dle_changed |= ull_dle_update_eff_tx(conn);
   13b20:	f7ff ff54 	bl	139cc <ull_dle_update_eff_tx>
		conn->lll.evt_len_upd = 1U;
   13b24:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1

	/* Check whether the controller should perform a data length update after
	 * connection is established
	 */
#if defined(CONFIG_BT_CTLR_PHY)
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
   13b28:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
		conn->lll.evt_len_upd = 1U;
   13b2c:	f043 0301 	orr.w	r3, r3, #1
   13b30:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
   13b34:	d00d      	beq.n	13b52 <ull_dle_init+0xda>
	     conn->lll.dle.local.max_tx_time != max_time_min)) {
		conn->lll.dle.update = 1;
   13b36:	2301      	movs	r3, #1
   13b38:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		if (conn->lll.dle.local.max_tx_octets != PDU_DC_PAYLOAD_SIZE_MIN ||
		    conn->lll.dle.local.max_rx_octets != PDU_DC_PAYLOAD_SIZE_MIN) {
			conn->lll.dle.update = 1;
		}
	}
}
   13b3c:	bd70      	pop	{r4, r5, r6, pc}
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   13b3e:	2a1b      	cmp	r2, #27
   13b40:	d1e4      	bne.n	13b0c <ull_dle_init+0x94>
	dle_changed |= ull_dle_update_eff_tx(conn);
   13b42:	4620      	mov	r0, r4
   13b44:	f7ff ff42 	bl	139cc <ull_dle_update_eff_tx>
	if (dle_changed) {
   13b48:	2800      	cmp	r0, #0
   13b4a:	d1eb      	bne.n	13b24 <ull_dle_init+0xac>
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
   13b4c:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
   13b50:	d1f1      	bne.n	13b36 <ull_dle_init+0xbe>
		if (conn->lll.dle.local.max_tx_octets != PDU_DC_PAYLOAD_SIZE_MIN ||
   13b52:	6da3      	ldr	r3, [r4, #88]	; 0x58
   13b54:	f1b3 1f1b 	cmp.w	r3, #1769499	; 0x1b001b
   13b58:	d1ed      	bne.n	13b36 <ull_dle_init+0xbe>
}
   13b5a:	bd70      	pop	{r4, r5, r6, pc}
   13b5c:	20003ae8 	.word	0x20003ae8
   13b60:	20003ae6 	.word	0x20003ae6

00013b64 <pu_check_update_ind>:
	 */
	return (phy < 5 && phy != 3);
}

static uint8_t pu_check_update_ind(struct ll_conn *conn, struct proc_ctx *ctx)
{
   13b64:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret = 0;

	/* Check if either phy selected is invalid */
	if (!phy_valid(ctx->data.pu.c_to_p_phy) || !phy_valid(ctx->data.pu.p_to_c_phy)) {
   13b66:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
   13b6a:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
	return (phy < 5 && phy != 3);
   13b6e:	2b04      	cmp	r3, #4
{
   13b70:	460c      	mov	r4, r1
	return (phy < 5 && phy != 3);
   13b72:	d803      	bhi.n	13b7c <pu_check_update_ind+0x18>
   13b74:	2b03      	cmp	r3, #3
   13b76:	d001      	beq.n	13b7c <pu_check_update_ind+0x18>
   13b78:	2a04      	cmp	r2, #4
   13b7a:	d90b      	bls.n	13b94 <pu_check_update_ind+0x30>
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
		ret = 1;
	}

	/* Both tx and rx PHY unchanged */
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   13b7c:	4313      	orrs	r3, r2
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
   13b7e:	2111      	movs	r1, #17
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   13b80:	f013 0307 	ands.w	r3, r3, #7
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
   13b84:	77a1      	strb	r1, [r4, #30]
		ret = 1;
   13b86:	f04f 0501 	mov.w	r5, #1
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   13b8a:	d10b      	bne.n	13ba4 <pu_check_update_ind+0x40>
		ret = 1;
	} else {
		/* if instant already passed, quit procedure with error */
		if (is_instant_reached_or_passed(ctx->data.pu.instant,
						 ull_conn_event_counter(conn))) {
			ctx->data.pu.error = BT_HCI_ERR_INSTANT_PASSED;
   13b8c:	77a3      	strb	r3, [r4, #30]
		ret = 1;
   13b8e:	2501      	movs	r5, #1
			ret = 1;
		}
	}
	return ret;
}
   13b90:	4628      	mov	r0, r5
   13b92:	bd70      	pop	{r4, r5, r6, pc}
	return (phy < 5 && phy != 3);
   13b94:	2a03      	cmp	r2, #3
   13b96:	d00d      	beq.n	13bb4 <pu_check_update_ind+0x50>
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   13b98:	4313      	orrs	r3, r2
   13b9a:	f013 0307 	ands.w	r3, r3, #7
	uint8_t ret = 0;
   13b9e:	f04f 0500 	mov.w	r5, #0
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   13ba2:	d0f3      	beq.n	13b8c <pu_check_update_ind+0x28>
		if (is_instant_reached_or_passed(ctx->data.pu.instant,
   13ba4:	8c26      	ldrh	r6, [r4, #32]
   13ba6:	f7ff fe31 	bl	1380c <ull_conn_event_counter>
   13baa:	1b80      	subs	r0, r0, r6
   13bac:	0403      	lsls	r3, r0, #16
   13bae:	d4ef      	bmi.n	13b90 <pu_check_update_ind+0x2c>
   13bb0:	2328      	movs	r3, #40	; 0x28
   13bb2:	e7eb      	b.n	13b8c <pu_check_update_ind+0x28>
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
   13bb4:	2311      	movs	r3, #17
   13bb6:	778b      	strb	r3, [r1, #30]
		ret = 1;
   13bb8:	2501      	movs	r5, #1
   13bba:	e7f3      	b.n	13ba4 <pu_check_update_ind+0x40>

00013bbc <pu_ntf>:
	/* Restart procedure response timeout timer */
	llcp_lr_prt_restart(conn);
}

static void pu_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   13bbc:	b570      	push	{r4, r5, r6, lr}
   13bbe:	4606      	mov	r6, r0
   13bc0:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct node_rx_pu *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   13bc2:	f001 f8df 	bl	14d84 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   13bc6:	4604      	mov	r4, r0
   13bc8:	b1c0      	cbz	r0, 13bfc <pu_ntf+0x40>

	ntf->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13bca:	231d      	movs	r3, #29
   13bcc:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   13bce:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   13bd0:	80e3      	strh	r3, [r4, #6]
	pdu = (struct node_rx_pu *)ntf->pdu;

	pdu->status = ctx->data.pu.error;
   13bd2:	7fab      	ldrb	r3, [r5, #30]
   13bd4:	7723      	strb	r3, [r4, #28]
	pdu->rx = conn->lll.phy_rx;
   13bd6:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
	pdu->tx = conn->lll.phy_tx;

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   13bda:	6820      	ldr	r0, [r4, #0]
	pdu->rx = conn->lll.phy_rx;
   13bdc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13be0:	77a3      	strb	r3, [r4, #30]
	pdu->tx = conn->lll.phy_tx;
   13be2:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   13be6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13bea:	7763      	strb	r3, [r4, #29]
	ll_rx_put_sched(ntf->hdr.link, ntf);
   13bec:	4621      	mov	r1, r4
   13bee:	f7fd fced 	bl	115cc <ll_rx_put_sched>
	ctx->data.pu.ntf_pu = 0;
   13bf2:	7f6b      	ldrb	r3, [r5, #29]
   13bf4:	f36f 0300 	bfc	r3, #0, #1
   13bf8:	776b      	strb	r3, [r5, #29]
}
   13bfa:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ntf);
   13bfc:	4a06      	ldr	r2, [pc, #24]	; (13c18 <pu_ntf+0x5c>)
   13bfe:	4907      	ldr	r1, [pc, #28]	; (13c1c <pu_ntf+0x60>)
   13c00:	4807      	ldr	r0, [pc, #28]	; (13c20 <pu_ntf+0x64>)
   13c02:	f240 13a5 	movw	r3, #421	; 0x1a5
   13c06:	f00d fda1 	bl	2174c <assert_print>
   13c0a:	4040      	eors	r0, r0
   13c0c:	f380 8811 	msr	BASEPRI, r0
   13c10:	f04f 0003 	mov.w	r0, #3
   13c14:	df02      	svc	2
   13c16:	e7d8      	b.n	13bca <pu_ntf+0xe>
   13c18:	00028efc 	.word	0x00028efc
   13c1c:	00028f40 	.word	0x00028f40
   13c20:	0002866c 	.word	0x0002866c

00013c24 <pu_update_eff_times>:
{
   13c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c26:	460e      	mov	r6, r1
   13c28:	b083      	sub	sp, #12
	ull_dle_max_time_get(conn, &max_rx_time, &max_tx_time);
   13c2a:	f10d 0206 	add.w	r2, sp, #6
   13c2e:	a901      	add	r1, sp, #4
	uint16_t eff_tx_time = lll->dle.eff.max_tx_time;
   13c30:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
	uint16_t eff_rx_time = lll->dle.eff.max_rx_time;
   13c34:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
{
   13c38:	4604      	mov	r4, r0
	ull_dle_max_time_get(conn, &max_rx_time, &max_tx_time);
   13c3a:	f7ff fe09 	bl	13850 <ull_dle_max_time_get>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL)) ||
   13c3e:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   13c42:	2a00      	cmp	r2, #0
   13c44:	d15c      	bne.n	13d00 <pu_update_eff_times+0xdc>
   13c46:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   13c4a:	b9fb      	cbnz	r3, 13c8c <pu_update_eff_times+0x68>
	if ((eff_tx_time > lll->dle.eff.max_tx_time) ||
   13c4c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   13c50:	42ab      	cmp	r3, r5
   13c52:	d30e      	bcc.n	13c72 <pu_update_eff_times+0x4e>
   13c54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   13c58:	429a      	cmp	r2, r3
   13c5a:	d30a      	bcc.n	13c72 <pu_update_eff_times+0x4e>
	    (eff_rx_time > lll->dle.eff.max_rx_time) ||
   13c5c:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
	    (lll->dle.eff.max_tx_time > max_tx_time) ||
   13c60:	42bb      	cmp	r3, r7
   13c62:	d306      	bcc.n	13c72 <pu_update_eff_times+0x4e>
	    (eff_rx_time > lll->dle.eff.max_rx_time) ||
   13c64:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   13c68:	429a      	cmp	r2, r3
   13c6a:	d302      	bcc.n	13c72 <pu_update_eff_times+0x4e>
	return 0U;
   13c6c:	2000      	movs	r0, #0
}
   13c6e:	b003      	add	sp, #12
   13c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->evt_len_upd = 1U;
   13c72:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
		lll->dle.eff.max_tx_time = eff_tx_time;
   13c76:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
		lll->evt_len_upd = 1U;
   13c7a:	f043 0301 	orr.w	r3, r3, #1
		return 1U;
   13c7e:	2001      	movs	r0, #1
		lll->dle.eff.max_rx_time = eff_rx_time;
   13c80:	f8a4 706e 	strh.w	r7, [r4, #110]	; 0x6e
		lll->evt_len_upd = 1U;
   13c84:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
}
   13c88:	b003      	add	sp, #12
   13c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_CENTRAL))) {
   13c8c:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   13c90:	2800      	cmp	r0, #0
   13c92:	db1d      	blt.n	13cd0 <pu_update_eff_times+0xac>
			pu_calc_eff_time(lll->dle.eff.max_tx_octets, lll->phy_tx, max_tx_time);
   13c94:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
   13c98:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   13c9c:	f001 0303 	and.w	r3, r1, #3
   13ca0:	442b      	add	r3, r5
   13ca2:	330d      	adds	r3, #13
   13ca4:	00db      	lsls	r3, r3, #3
   13ca6:	f3c1 0140 	ubfx	r1, r1, #1, #1
   13caa:	40cb      	lsrs	r3, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
   13cac:	b29b      	uxth	r3, r3
	eff_time = MIN(eff_time, default_time);
   13cae:	f8bd 5006 	ldrh.w	r5, [sp, #6]
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
   13cb2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13cb6:	bf38      	it	cc
   13cb8:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
   13cbc:	429d      	cmp	r5, r3
   13cbe:	bf28      	it	cs
   13cc0:	461d      	movcs	r5, r3
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_CENTRAL)) ||
   13cc2:	b332      	cbz	r2, 13d12 <pu_update_eff_times+0xee>
   13cc4:	2800      	cmp	r0, #0
   13cc6:	da03      	bge.n	13cd0 <pu_update_eff_times+0xac>
   13cc8:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d0bd      	beq.n	13c4c <pu_update_eff_times+0x28>
			pu_calc_eff_time(lll->dle.eff.max_rx_octets, lll->phy_rx, max_rx_time);
   13cd0:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
   13cd4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	eff_time = MIN(eff_time, default_time);
   13cd8:	f8bd 7004 	ldrh.w	r7, [sp, #4]
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
   13cdc:	f002 0303 	and.w	r3, r2, #3
   13ce0:	440b      	add	r3, r1
   13ce2:	330d      	adds	r3, #13
   13ce4:	00db      	lsls	r3, r3, #3
   13ce6:	f3c2 0240 	ubfx	r2, r2, #1, #1
   13cea:	40d3      	lsrs	r3, r2
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
   13cec:	b29b      	uxth	r3, r3
   13cee:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13cf2:	bf38      	it	cc
   13cf4:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
   13cf8:	429f      	cmp	r7, r3
   13cfa:	bf28      	it	cs
   13cfc:	461f      	movcs	r7, r3
	return eff_time;
   13cfe:	e7a5      	b.n	13c4c <pu_update_eff_times+0x28>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL)) ||
   13d00:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   13d04:	2800      	cmp	r0, #0
   13d06:	dbc5      	blt.n	13c94 <pu_update_eff_times+0x70>
   13d08:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   13d0c:	2b00      	cmp	r3, #0
   13d0e:	d0df      	beq.n	13cd0 <pu_update_eff_times+0xac>
   13d10:	e7c0      	b.n	13c94 <pu_update_eff_times+0x70>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_CENTRAL)) ||
   13d12:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   13d16:	2b00      	cmp	r3, #0
   13d18:	d098      	beq.n	13c4c <pu_update_eff_times+0x28>
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL))) {
   13d1a:	2800      	cmp	r0, #0
   13d1c:	da96      	bge.n	13c4c <pu_update_eff_times+0x28>
   13d1e:	e7d7      	b.n	13cd0 <pu_update_eff_times+0xac>

00013d20 <rp_pu_send_phy_rsp.constprop.0>:
	}
}
#endif /* CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_PERIPHERAL)
static void rp_pu_send_phy_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   13d20:	b570      	push	{r4, r5, r6, lr}
   13d22:	4605      	mov	r5, r0
   13d24:	460c      	mov	r4, r1
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
   13d26:	f003 fe6b 	bl	17a00 <llcp_rr_ispaused>
   13d2a:	b110      	cbz	r0, 13d32 <rp_pu_send_phy_rsp.constprop.0+0x12>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
		ctx->state = RP_PU_STATE_WAIT_TX_PHY_RSP;
   13d2c:	2302      	movs	r3, #2
   13d2e:	72a3      	strb	r3, [r4, #10]
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
		rp_pu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_PHY_RSP);
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
		ctx->state = RP_PU_STATE_WAIT_TX_ACK_PHY_RSP;
	}
}
   13d30:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
   13d32:	4621      	mov	r1, r4
   13d34:	4628      	mov	r0, r5
   13d36:	f001 f801 	bl	14d3c <llcp_tx_alloc_peek>
   13d3a:	2800      	cmp	r0, #0
   13d3c:	d0f6      	beq.n	13d2c <rp_pu_send_phy_rsp.constprop.0+0xc>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
   13d3e:	4628      	mov	r0, r5
   13d40:	f003 fe52 	bl	179e8 <llcp_rr_get_paused_cmd>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
   13d44:	2807      	cmp	r0, #7
   13d46:	d0f1      	beq.n	13d2c <rp_pu_send_phy_rsp.constprop.0+0xc>
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
   13d48:	210d      	movs	r1, #13
   13d4a:	4628      	mov	r0, r5
   13d4c:	f003 fe4a 	bl	179e4 <llcp_rr_set_paused_cmd>
	tx = llcp_tx_alloc(conn, ctx);
   13d50:	4621      	mov	r1, r4
   13d52:	4628      	mov	r0, r5
   13d54:	f000 fffa 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   13d58:	4606      	mov	r6, r0
   13d5a:	b188      	cbz	r0, 13d80 <rp_pu_send_phy_rsp.constprop.0+0x60>
		llcp_pdu_encode_phy_rsp(conn, pdu);
   13d5c:	1d31      	adds	r1, r6, #4
   13d5e:	4628      	mov	r0, r5
   13d60:	f002 fd44 	bl	167ec <llcp_pdu_encode_phy_rsp>
	ctx->tx_ack = tx;
   13d64:	6166      	str	r6, [r4, #20]
	ctx->tx_opcode = pdu->llctrl.opcode;
   13d66:	79f3      	ldrb	r3, [r6, #7]
   13d68:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   13d6a:	4631      	mov	r1, r6
   13d6c:	4628      	mov	r0, r5
   13d6e:	f001 f80b 	bl	14d88 <llcp_tx_enqueue>
	llcp_rr_prt_restart(conn);
   13d72:	4628      	mov	r0, r5
   13d74:	f003 fe4c 	bl	17a10 <llcp_rr_prt_restart>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
   13d78:	2318      	movs	r3, #24
   13d7a:	72e3      	strb	r3, [r4, #11]
   13d7c:	2303      	movs	r3, #3
   13d7e:	e7d6      	b.n	13d2e <rp_pu_send_phy_rsp.constprop.0+0xe>
	LL_ASSERT(tx);
   13d80:	4a06      	ldr	r2, [pc, #24]	; (13d9c <rp_pu_send_phy_rsp.constprop.0+0x7c>)
   13d82:	4907      	ldr	r1, [pc, #28]	; (13da0 <rp_pu_send_phy_rsp.constprop.0+0x80>)
   13d84:	4807      	ldr	r0, [pc, #28]	; (13da4 <rp_pu_send_phy_rsp.constprop.0+0x84>)
   13d86:	f240 3392 	movw	r3, #914	; 0x392
   13d8a:	f00d fcdf 	bl	2174c <assert_print>
   13d8e:	4040      	eors	r0, r0
   13d90:	f380 8811 	msr	BASEPRI, r0
   13d94:	f04f 0003 	mov.w	r0, #3
   13d98:	df02      	svc	2
   13d9a:	e7df      	b.n	13d5c <rp_pu_send_phy_rsp.constprop.0+0x3c>
   13d9c:	00028efc 	.word	0x00028efc
   13da0:	00028d90 	.word	0x00028d90
   13da4:	0002866c 	.word	0x0002866c

00013da8 <pu_dle_ntf.constprop.0>:
static void pu_dle_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
   13da8:	b538      	push	{r3, r4, r5, lr}
   13daa:	4605      	mov	r5, r0
	ntf = llcp_ntf_alloc();
   13dac:	f000 ffea 	bl	14d84 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   13db0:	4604      	mov	r4, r0
   13db2:	b170      	cbz	r0, 13dd2 <pu_dle_ntf.constprop.0+0x2a>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   13db4:	2303      	movs	r3, #3
   13db6:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   13db8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   13dba:	80e3      	strh	r3, [r4, #6]
	llcp_ntf_encode_length_change(conn, pdu);
   13dbc:	4628      	mov	r0, r5
   13dbe:	f104 011c 	add.w	r1, r4, #28
   13dc2:	f002 fe23 	bl	16a0c <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
   13dc6:	6820      	ldr	r0, [r4, #0]
   13dc8:	4621      	mov	r1, r4
}
   13dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   13dce:	f7fd bbfd 	b.w	115cc <ll_rx_put_sched>
	LL_ASSERT(ntf);
   13dd2:	4a07      	ldr	r2, [pc, #28]	; (13df0 <pu_dle_ntf.constprop.0+0x48>)
   13dd4:	4907      	ldr	r1, [pc, #28]	; (13df4 <pu_dle_ntf.constprop.0+0x4c>)
   13dd6:	4808      	ldr	r0, [pc, #32]	; (13df8 <pu_dle_ntf.constprop.0+0x50>)
   13dd8:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   13ddc:	f00d fcb6 	bl	2174c <assert_print>
   13de0:	4040      	eors	r0, r0
   13de2:	f380 8811 	msr	BASEPRI, r0
   13de6:	f04f 0003 	mov.w	r0, #3
   13dea:	df02      	svc	2
   13dec:	e7e2      	b.n	13db4 <pu_dle_ntf.constprop.0+0xc>
   13dee:	bf00      	nop
   13df0:	00028efc 	.word	0x00028efc
   13df4:	00028f40 	.word	0x00028f40
   13df8:	0002866c 	.word	0x0002866c

00013dfc <lp_pu_tx_ntf.constprop.0>:
static void lp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt)
   13dfc:	b570      	push	{r4, r5, r6, lr}
	uint8_t ntf_count = ctx->data.pu.ntf_pu + NTF_DLE;
   13dfe:	7f4a      	ldrb	r2, [r1, #29]
   13e00:	f3c2 0300 	ubfx	r3, r2, #0, #1
   13e04:	f3c2 0c40 	ubfx	ip, r2, #1, #1
   13e08:	4463      	add	r3, ip
   13e0a:	b2db      	uxtb	r3, r3
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   13e0c:	2b02      	cmp	r3, #2
static void lp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt)
   13e0e:	460c      	mov	r4, r1
   13e10:	4605      	mov	r5, r0
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   13e12:	d025      	beq.n	13e60 <lp_pu_tx_ntf.constprop.0+0x64>
	if (ntf_count && !llcp_ntf_alloc_num_available(ntf_count)) {
   13e14:	b983      	cbnz	r3, 13e38 <lp_pu_tx_ntf.constprop.0+0x3c>
		if (ctx->data.pu.ntf_pu) {
   13e16:	07d6      	lsls	r6, r2, #31
   13e18:	d428      	bmi.n	13e6c <lp_pu_tx_ntf.constprop.0+0x70>
		if (ctx->data.pu.ntf_dle) {
   13e1a:	0793      	lsls	r3, r2, #30
   13e1c:	d502      	bpl.n	13e24 <lp_pu_tx_ntf.constprop.0+0x28>
			pu_dle_ntf(conn, ctx);
   13e1e:	4628      	mov	r0, r5
   13e20:	f7ff ffc2 	bl	13da8 <pu_dle_ntf.constprop.0>
		llcp_lr_complete(conn);
   13e24:	4628      	mov	r0, r5
   13e26:	f002 facd 	bl	163c4 <llcp_lr_complete>
		ctx->state = LP_PU_STATE_IDLE;
   13e2a:	2100      	movs	r1, #0
   13e2c:	72a1      	strb	r1, [r4, #10]
		llcp_rr_set_paused_cmd(conn, PROC_NONE);
   13e2e:	4628      	mov	r0, r5
}
   13e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_set_paused_cmd(conn, PROC_NONE);
   13e34:	f003 bdd6 	b.w	179e4 <llcp_rr_set_paused_cmd>
   13e38:	2601      	movs	r6, #1
	if (ntf_count && !llcp_ntf_alloc_num_available(ntf_count)) {
   13e3a:	4630      	mov	r0, r6
   13e3c:	f000 ff9a 	bl	14d74 <llcp_ntf_alloc_num_available>
   13e40:	b158      	cbz	r0, 13e5a <lp_pu_tx_ntf.constprop.0+0x5e>
		if (ctx->data.pu.ntf_pu) {
   13e42:	7f62      	ldrb	r2, [r4, #29]
   13e44:	07d1      	lsls	r1, r2, #31
   13e46:	d5e8      	bpl.n	13e1a <lp_pu_tx_ntf.constprop.0+0x1e>
			pu_ntf(conn, ctx);
   13e48:	4621      	mov	r1, r4
   13e4a:	4628      	mov	r0, r5
   13e4c:	f7ff feb6 	bl	13bbc <pu_ntf>
			if (ntf_count == 1 && NTF_DLE == 1) {
   13e50:	2e01      	cmp	r6, #1
   13e52:	d10f      	bne.n	13e74 <lp_pu_tx_ntf.constprop.0+0x78>
   13e54:	7f63      	ldrb	r3, [r4, #29]
   13e56:	079a      	lsls	r2, r3, #30
   13e58:	d5e4      	bpl.n	13e24 <lp_pu_tx_ntf.constprop.0+0x28>
		ctx->state = LP_PU_STATE_WAIT_NTF;
   13e5a:	2309      	movs	r3, #9
   13e5c:	72a3      	strb	r3, [r4, #10]
}
   13e5e:	bd70      	pop	{r4, r5, r6, pc}
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   13e60:	4618      	mov	r0, r3
   13e62:	f000 ff87 	bl	14d74 <llcp_ntf_alloc_num_available>
   13e66:	1c46      	adds	r6, r0, #1
   13e68:	b2f6      	uxtb	r6, r6
   13e6a:	e7e6      	b.n	13e3a <lp_pu_tx_ntf.constprop.0+0x3e>
			pu_ntf(conn, ctx);
   13e6c:	f7ff fea6 	bl	13bbc <pu_ntf>
		if (ctx->data.pu.ntf_dle) {
   13e70:	7f62      	ldrb	r2, [r4, #29]
   13e72:	e7d2      	b.n	13e1a <lp_pu_tx_ntf.constprop.0+0x1e>
			if (ntf_count == 1 && NTF_DLE == 1) {
   13e74:	7f62      	ldrb	r2, [r4, #29]
   13e76:	e7d0      	b.n	13e1a <lp_pu_tx_ntf.constprop.0+0x1e>

00013e78 <lp_pu_send_phy_req.constprop.0>:
static void lp_pu_send_phy_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   13e78:	b570      	push	{r4, r5, r6, lr}
   13e7a:	4605      	mov	r5, r0
   13e7c:	460c      	mov	r4, r1
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
   13e7e:	f002 fa0d 	bl	1629c <llcp_lr_ispaused>
   13e82:	b110      	cbz	r0, 13e8a <lp_pu_send_phy_req.constprop.0+0x12>
		ctx->state = LP_PU_STATE_WAIT_TX_PHY_REQ;
   13e84:	2301      	movs	r3, #1
   13e86:	72a3      	strb	r3, [r4, #10]
}
   13e88:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
   13e8a:	4628      	mov	r0, r5
   13e8c:	f003 fdae 	bl	179ec <llcp_rr_get_collision>
   13e90:	2800      	cmp	r0, #0
   13e92:	d1f7      	bne.n	13e84 <lp_pu_send_phy_req.constprop.0+0xc>
	    !llcp_tx_alloc_peek(conn, ctx) ||
   13e94:	4621      	mov	r1, r4
   13e96:	4628      	mov	r0, r5
   13e98:	f000 ff50 	bl	14d3c <llcp_tx_alloc_peek>
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
   13e9c:	2800      	cmp	r0, #0
   13e9e:	d0f1      	beq.n	13e84 <lp_pu_send_phy_req.constprop.0+0xc>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
   13ea0:	4628      	mov	r0, r5
   13ea2:	f003 fda1 	bl	179e8 <llcp_rr_get_paused_cmd>
	    !llcp_tx_alloc_peek(conn, ctx) ||
   13ea6:	2807      	cmp	r0, #7
   13ea8:	d0ec      	beq.n	13e84 <lp_pu_send_phy_req.constprop.0+0xc>
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
   13eaa:	2101      	movs	r1, #1
   13eac:	4628      	mov	r0, r5
   13eae:	f003 fd95 	bl	179dc <llcp_rr_set_incompat>
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
   13eb2:	210d      	movs	r1, #13
   13eb4:	4628      	mov	r0, r5
   13eb6:	f003 fd95 	bl	179e4 <llcp_rr_set_paused_cmd>
	tx = llcp_tx_alloc(conn, ctx);
   13eba:	4621      	mov	r1, r4
   13ebc:	4628      	mov	r0, r5
   13ebe:	f000 ff45 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   13ec2:	4606      	mov	r6, r0
   13ec4:	b360      	cbz	r0, 13f20 <lp_pu_send_phy_req.constprop.0+0xa8>
	conn->phy_pref_rx = ctx->data.pu.rx;
   13ec6:	7f23      	ldrb	r3, [r4, #28]
   13ec8:	f895 218c 	ldrb.w	r2, [r5, #396]	; 0x18c
   13ecc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13ed0:	f363 02c5 	bfi	r2, r3, #3, #3
   13ed4:	f885 218c 	strb.w	r2, [r5, #396]	; 0x18c
	conn->phy_pref_tx = ctx->data.pu.tx;
   13ed8:	7f22      	ldrb	r2, [r4, #28]
   13eda:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
   13ede:	f362 0302 	bfi	r3, r2, #0, #3
   13ee2:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
	conn->lll.phy_flags = ctx->data.pu.flags;
   13ee6:	7f23      	ldrb	r3, [r4, #28]
   13ee8:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   13eec:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13ef0:	f363 02c3 	bfi	r2, r3, #3, #1
   13ef4:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
		llcp_pdu_encode_phy_req(ctx, pdu);
   13ef8:	1d31      	adds	r1, r6, #4
   13efa:	4620      	mov	r0, r4
   13efc:	f002 fc58 	bl	167b0 <llcp_pdu_encode_phy_req>
	ctx->tx_ack = tx;
   13f00:	6166      	str	r6, [r4, #20]
	ctx->tx_opcode = pdu->llctrl.opcode;
   13f02:	79f3      	ldrb	r3, [r6, #7]
   13f04:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   13f06:	4631      	mov	r1, r6
   13f08:	4628      	mov	r0, r5
   13f0a:	f000 ff3d 	bl	14d88 <llcp_tx_enqueue>
	llcp_lr_prt_restart(conn);
   13f0e:	4628      	mov	r0, r5
   13f10:	f002 f9d4 	bl	162bc <llcp_lr_prt_restart>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   13f14:	2102      	movs	r1, #2
   13f16:	4628      	mov	r0, r5
   13f18:	f000 ff3a 	bl	14d90 <llcp_tx_pause_data>
   13f1c:	2302      	movs	r3, #2
   13f1e:	e7b2      	b.n	13e86 <lp_pu_send_phy_req.constprop.0+0xe>
	LL_ASSERT(tx);
   13f20:	4a06      	ldr	r2, [pc, #24]	; (13f3c <lp_pu_send_phy_req.constprop.0+0xc4>)
   13f22:	4907      	ldr	r1, [pc, #28]	; (13f40 <lp_pu_send_phy_req.constprop.0+0xc8>)
   13f24:	4807      	ldr	r0, [pc, #28]	; (13f44 <lp_pu_send_phy_req.constprop.0+0xcc>)
   13f26:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   13f2a:	f00d fc0f 	bl	2174c <assert_print>
   13f2e:	4040      	eors	r0, r0
   13f30:	f380 8811 	msr	BASEPRI, r0
   13f34:	f04f 0003 	mov.w	r0, #3
   13f38:	df02      	svc	2
   13f3a:	e7c4      	b.n	13ec6 <lp_pu_send_phy_req.constprop.0+0x4e>
   13f3c:	00028efc 	.word	0x00028efc
   13f40:	00028d90 	.word	0x00028d90
   13f44:	0002866c 	.word	0x0002866c

00013f48 <lp_pu_execute_fsm>:
{
   13f48:	b570      	push	{r4, r5, r6, lr}
   13f4a:	460c      	mov	r4, r1
	switch (ctx->state) {
   13f4c:	7a89      	ldrb	r1, [r1, #10]
{
   13f4e:	b082      	sub	sp, #8
   13f50:	4606      	mov	r6, r0
   13f52:	461d      	mov	r5, r3
	switch (ctx->state) {
   13f54:	2909      	cmp	r1, #9
   13f56:	d80b      	bhi.n	13f70 <lp_pu_execute_fsm+0x28>
   13f58:	e8df f001 	tbb	[pc, r1]
   13f5c:	0a190505 	.word	0x0a190505
   13f60:	662e0a0a 	.word	0x662e0a0a
   13f64:	a096      	.short	0xa096
	switch (evt) {
   13f66:	2a00      	cmp	r2, #0
   13f68:	f000 809c 	beq.w	140a4 <lp_pu_execute_fsm+0x15c>
}
   13f6c:	b002      	add	sp, #8
   13f6e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   13f70:	4a94      	ldr	r2, [pc, #592]	; (141c4 <lp_pu_execute_fsm+0x27c>)
   13f72:	4995      	ldr	r1, [pc, #596]	; (141c8 <lp_pu_execute_fsm+0x280>)
   13f74:	4895      	ldr	r0, [pc, #596]	; (141cc <lp_pu_execute_fsm+0x284>)
   13f76:	f44f 7353 	mov.w	r3, #844	; 0x34c
   13f7a:	f00d fbe7 	bl	2174c <assert_print>
   13f7e:	4040      	eors	r0, r0
   13f80:	f380 8811 	msr	BASEPRI, r0
   13f84:	f04f 0003 	mov.w	r0, #3
   13f88:	df02      	svc	2
}
   13f8a:	b002      	add	sp, #8
   13f8c:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   13f8e:	2a03      	cmp	r2, #3
   13f90:	d1ec      	bne.n	13f6c <lp_pu_execute_fsm+0x24>
		switch (conn->lll.role) {
   13f92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   13f96:	09db      	lsrs	r3, r3, #7
   13f98:	f040 80b4 	bne.w	14104 <lp_pu_execute_fsm+0x1bc>
			LL_ASSERT(0);
   13f9c:	4a89      	ldr	r2, [pc, #548]	; (141c4 <lp_pu_execute_fsm+0x27c>)
   13f9e:	498a      	ldr	r1, [pc, #552]	; (141c8 <lp_pu_execute_fsm+0x280>)
   13fa0:	488a      	ldr	r0, [pc, #552]	; (141cc <lp_pu_execute_fsm+0x284>)
   13fa2:	f240 2379 	movw	r3, #633	; 0x279
   13fa6:	f00d fbd1 	bl	2174c <assert_print>
   13faa:	4040      	eors	r0, r0
   13fac:	f380 8811 	msr	BASEPRI, r0
   13fb0:	f04f 0003 	mov.w	r0, #3
   13fb4:	df02      	svc	2
   13fb6:	e7d9      	b.n	13f6c <lp_pu_execute_fsm+0x24>
	switch (evt) {
   13fb8:	2a05      	cmp	r2, #5
   13fba:	f000 8095 	beq.w	140e8 <lp_pu_execute_fsm+0x1a0>
   13fbe:	2a06      	cmp	r2, #6
   13fc0:	d076      	beq.n	140b0 <lp_pu_execute_fsm+0x168>
   13fc2:	2a02      	cmp	r2, #2
   13fc4:	d1d2      	bne.n	13f6c <lp_pu_execute_fsm+0x24>
		LL_ASSERT(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
   13fc6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   13fca:	2b00      	cmp	r3, #0
   13fcc:	db0c      	blt.n	13fe8 <lp_pu_execute_fsm+0xa0>
   13fce:	4a7d      	ldr	r2, [pc, #500]	; (141c4 <lp_pu_execute_fsm+0x27c>)
   13fd0:	497f      	ldr	r1, [pc, #508]	; (141d0 <lp_pu_execute_fsm+0x288>)
   13fd2:	487e      	ldr	r0, [pc, #504]	; (141cc <lp_pu_execute_fsm+0x284>)
   13fd4:	f240 23ba 	movw	r3, #698	; 0x2ba
   13fd8:	f00d fbb8 	bl	2174c <assert_print>
   13fdc:	4040      	eors	r0, r0
   13fde:	f380 8811 	msr	BASEPRI, r0
   13fe2:	f04f 0003 	mov.w	r0, #3
   13fe6:	df02      	svc	2
		llcp_pdu_decode_phy_update_ind(ctx, (struct pdu_data *)param);
   13fe8:	4629      	mov	r1, r5
   13fea:	4620      	mov	r0, r4
   13fec:	f002 fc14 	bl	16818 <llcp_pdu_decode_phy_update_ind>
		const uint8_t end_procedure = pu_check_update_ind(conn, ctx);
   13ff0:	4621      	mov	r1, r4
   13ff2:	4630      	mov	r0, r6
   13ff4:	f7ff fdb6 	bl	13b64 <pu_check_update_ind>
		if (!end_procedure) {
   13ff8:	2800      	cmp	r0, #0
   13ffa:	f040 809c 	bne.w	14136 <lp_pu_execute_fsm+0x1ee>
			if (ctx->data.pu.p_to_c_phy) {
   13ffe:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   14002:	b12b      	cbz	r3, 14010 <lp_pu_execute_fsm+0xc8>
	lll->phy_tx_time = phy_tx;
   14004:	f896 2076 	ldrb.w	r2, [r6, #118]	; 0x76
   14008:	f363 1206 	bfi	r2, r3, #4, #3
   1400c:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			llcp_lr_prt_stop(conn);
   14010:	4630      	mov	r0, r6
   14012:	f002 f95d 	bl	162d0 <llcp_lr_prt_stop>
			ctx->state = LP_PU_STATE_WAIT_INSTANT;
   14016:	2307      	movs	r3, #7
   14018:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   1401a:	2102      	movs	r1, #2
   1401c:	4630      	mov	r0, r6
}
   1401e:	b002      	add	sp, #8
   14020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   14024:	f000 bec8 	b.w	14db8 <llcp_tx_resume_data>
	switch (evt) {
   14028:	2a00      	cmp	r2, #0
   1402a:	d19f      	bne.n	13f6c <lp_pu_execute_fsm+0x24>
	if (is_instant_reached_or_passed(ctx->data.pu.instant, ull_conn_event_counter(conn))) {
   1402c:	8c25      	ldrh	r5, [r4, #32]
   1402e:	f7ff fbed 	bl	1380c <ull_conn_event_counter>
   14032:	1b40      	subs	r0, r0, r5
   14034:	0403      	lsls	r3, r0, #16
   14036:	d499      	bmi.n	13f6c <lp_pu_execute_fsm+0x24>
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   14038:	f996 5039 	ldrsb.w	r5, [r6, #57]	; 0x39
	const uint8_t old_tx = lll->phy_tx;
   1403c:	f896 0076 	ldrb.w	r0, [r6, #118]	; 0x76
	const uint8_t old_rx = lll->phy_rx;
   14040:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
   14044:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   14048:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   1404c:	2d00      	cmp	r5, #0
	const uint8_t old_tx = lll->phy_tx;
   1404e:	f000 0e07 	and.w	lr, r0, #7
	const uint8_t old_rx = lll->phy_rx;
   14052:	f003 0c07 	and.w	ip, r3, #7
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   14056:	f2c0 8087 	blt.w	14168 <lp_pu_execute_fsm+0x220>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   1405a:	2100      	movs	r1, #0
   1405c:	4630      	mov	r0, r6
   1405e:	f003 fcbd 	bl	179dc <llcp_rr_set_incompat>
		ctx->data.pu.ntf_pu = (phy_changed || ctx->data.pu.host_initiated);
   14062:	7f23      	ldrb	r3, [r4, #28]
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
   14064:	2200      	movs	r2, #0
   14066:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = (phy_changed || ctx->data.pu.host_initiated);
   14068:	09db      	lsrs	r3, r3, #7
   1406a:	7f62      	ldrb	r2, [r4, #29]
   1406c:	f363 0200 	bfi	r2, r3, #0, #1
   14070:	7762      	strb	r2, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
   14072:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   14076:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
   1407a:	f362 1306 	bfi	r3, r2, #4, #3
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
   1407e:	2208      	movs	r2, #8
	lll->phy_tx_time = phy_tx;
   14080:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
   14084:	72a2      	strb	r2, [r4, #10]
}
   14086:	e771      	b.n	13f6c <lp_pu_execute_fsm+0x24>
	switch (evt) {
   14088:	2a04      	cmp	r2, #4
   1408a:	f47f af6f 	bne.w	13f6c <lp_pu_execute_fsm+0x24>
		lp_pu_tx_ntf(conn, ctx, evt);
   1408e:	4621      	mov	r1, r4
   14090:	4630      	mov	r0, r6
}
   14092:	b002      	add	sp, #8
   14094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lp_pu_tx_ntf(conn, ctx, evt);
   14098:	f7ff beb0 	b.w	13dfc <lp_pu_tx_ntf.constprop.0>
	switch (evt) {
   1409c:	2a00      	cmp	r2, #0
   1409e:	f47f af65 	bne.w	13f6c <lp_pu_execute_fsm+0x24>
   140a2:	e7f4      	b.n	1408e <lp_pu_execute_fsm+0x146>
		lp_pu_send_phy_req(conn, ctx, evt, param);
   140a4:	4621      	mov	r1, r4
}
   140a6:	b002      	add	sp, #8
   140a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lp_pu_send_phy_req(conn, ctx, evt, param);
   140ac:	f7ff bee4 	b.w	13e78 <lp_pu_send_phy_req.constprop.0>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   140b0:	2100      	movs	r1, #0
   140b2:	f003 fc93 	bl	179dc <llcp_rr_set_incompat>
	conn->llcp.fex.features_used &= ~ll_feat_mask;
   140b6:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   140ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   140be:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		ctx->data.pu.ntf_pu = 1;
   140c2:	7f63      	ldrb	r3, [r4, #29]
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   140c4:	221a      	movs	r2, #26
   140c6:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = 1;
   140c8:	f043 0301 	orr.w	r3, r3, #1
   140cc:	7763      	strb	r3, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
   140ce:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   140d2:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
   140d6:	f362 1306 	bfi	r3, r2, #4, #3
	lp_pu_tx_ntf(conn, ctx, evt);
   140da:	4621      	mov	r1, r4
   140dc:	4630      	mov	r0, r6
	lll->phy_tx_time = phy_tx;
   140de:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	lp_pu_tx_ntf(conn, ctx, evt);
   140e2:	f7ff fe8b 	bl	13dfc <lp_pu_tx_ntf.constprop.0>
}
   140e6:	e798      	b.n	1401a <lp_pu_execute_fsm+0xd2>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   140e8:	2100      	movs	r1, #0
   140ea:	f003 fc77 	bl	179dc <llcp_rr_set_incompat>
		llcp_pdu_decode_reject_ext_ind(ctx, (struct pdu_data *) param);
   140ee:	4629      	mov	r1, r5
   140f0:	4620      	mov	r0, r4
   140f2:	f002 fb55 	bl	167a0 <llcp_pdu_decode_reject_ext_ind>
		ctx->data.pu.ntf_pu = 1;
   140f6:	7f63      	ldrb	r3, [r4, #29]
		ctx->data.pu.error = ctx->reject_ext_ind.error_code;
   140f8:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   140fc:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = 1;
   140fe:	f043 0301 	orr.w	r3, r3, #1
   14102:	e7e3      	b.n	140cc <lp_pu_execute_fsm+0x184>
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   14104:	4b33      	ldr	r3, [pc, #204]	; (141d4 <lp_pu_execute_fsm+0x28c>)
	const uint8_t phys = phy_tx | lll->phy_tx;
   14106:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   1410a:	e893 0003 	ldmia.w	r3, {r0, r1}
				conn, pu_select_phy_timing_restrict(conn, ctx->data.pu.tx));
   1410e:	7f23      	ldrb	r3, [r4, #28]
	return phy_tx_time[phys];
   14110:	4313      	orrs	r3, r2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   14112:	ad02      	add	r5, sp, #8
	return phy_tx_time[phys];
   14114:	f003 0307 	and.w	r3, r3, #7
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   14118:	e905 0003 	stmdb	r5, {r0, r1}
	return phy_tx_time[phys];
   1411c:	3308      	adds	r3, #8
   1411e:	446b      	add	r3, sp
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   14120:	2102      	movs	r1, #2
	return phy_tx_time[phys];
   14122:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	lll->phy_tx_time = phy_tx;
   14126:	f363 1206 	bfi	r2, r3, #4, #3
			ctx->state = LP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
   1412a:	f641 0306 	movw	r3, #6150	; 0x1806
	lll->phy_tx_time = phy_tx;
   1412e:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			ctx->state = LP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
   14132:	8163      	strh	r3, [r4, #10]
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   14134:	e772      	b.n	1401c <lp_pu_execute_fsm+0xd4>
			llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   14136:	2100      	movs	r1, #0
   14138:	4630      	mov	r0, r6
   1413a:	f003 fc4f 	bl	179dc <llcp_rr_set_incompat>
			if (ctx->data.pu.error != BT_HCI_ERR_SUCCESS) {
   1413e:	7fa3      	ldrb	r3, [r4, #30]
   14140:	b10b      	cbz	r3, 14146 <lp_pu_execute_fsm+0x1fe>
				conn->llcp_terminate.reason_final = ctx->data.pu.error;
   14142:	f886 3148 	strb.w	r3, [r6, #328]	; 0x148
			ctx->data.pu.ntf_pu = ctx->data.pu.host_initiated;
   14146:	7f23      	ldrb	r3, [r4, #28]
   14148:	7f62      	ldrb	r2, [r4, #29]
   1414a:	09db      	lsrs	r3, r3, #7
   1414c:	f363 0200 	bfi	r2, r3, #0, #1
   14150:	7762      	strb	r2, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
   14152:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   14156:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
   1415a:	f362 1306 	bfi	r3, r2, #4, #3
	lp_pu_tx_ntf(conn, ctx, evt);
   1415e:	4621      	mov	r1, r4
	lll->phy_tx_time = phy_tx;
   14160:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	lp_pu_tx_ntf(conn, ctx, evt);
   14164:	4630      	mov	r0, r6
   14166:	e7bc      	b.n	140e2 <lp_pu_execute_fsm+0x19a>
		if (p_to_c_phy) {
   14168:	f011 0103 	ands.w	r1, r1, #3
   1416c:	d01c      	beq.n	141a8 <lp_pu_execute_fsm+0x260>
			lll->phy_tx = p_to_c_phy;
   1416e:	f361 0002 	bfi	r0, r1, #0, #3
		if (c_to_p_phy) {
   14172:	f012 0203 	ands.w	r2, r2, #3
			lll->phy_tx = p_to_c_phy;
   14176:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		if (c_to_p_phy) {
   1417a:	d020      	beq.n	141be <lp_pu_execute_fsm+0x276>
			lll->phy_rx = c_to_p_phy;
   1417c:	f362 0302 	bfi	r3, r2, #0, #3
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   14180:	458e      	cmp	lr, r1
			lll->phy_rx = c_to_p_phy;
   14182:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   14186:	d017      	beq.n	141b8 <lp_pu_execute_fsm+0x270>
			ctx->data.pu.ntf_dle = pu_update_eff_times(conn, ctx);
   14188:	4621      	mov	r1, r4
   1418a:	4630      	mov	r0, r6
   1418c:	f7ff fd4a 	bl	13c24 <pu_update_eff_times>
   14190:	7f63      	ldrb	r3, [r4, #29]
   14192:	f360 0341 	bfi	r3, r0, #1, #1
   14196:	7763      	strb	r3, [r4, #29]
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   14198:	2100      	movs	r1, #0
   1419a:	4630      	mov	r0, r6
   1419c:	f003 fc1e 	bl	179dc <llcp_rr_set_incompat>
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
   141a0:	2300      	movs	r3, #0
   141a2:	77a3      	strb	r3, [r4, #30]
   141a4:	2301      	movs	r3, #1
   141a6:	e760      	b.n	1406a <lp_pu_execute_fsm+0x122>
		if (c_to_p_phy) {
   141a8:	f012 0203 	ands.w	r2, r2, #3
   141ac:	f43f af55 	beq.w	1405a <lp_pu_execute_fsm+0x112>
			lll->phy_rx = c_to_p_phy;
   141b0:	f362 0302 	bfi	r3, r2, #0, #3
   141b4:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   141b8:	4594      	cmp	ip, r2
   141ba:	d1e5      	bne.n	14188 <lp_pu_execute_fsm+0x240>
   141bc:	e74d      	b.n	1405a <lp_pu_execute_fsm+0x112>
   141be:	458e      	cmp	lr, r1
   141c0:	d1e2      	bne.n	14188 <lp_pu_execute_fsm+0x240>
   141c2:	e74a      	b.n	1405a <lp_pu_execute_fsm+0x112>
   141c4:	00028efc 	.word	0x00028efc
   141c8:	000286fc 	.word	0x000286fc
   141cc:	0002866c 	.word	0x0002866c
   141d0:	00028f44 	.word	0x00028f44
   141d4:	00027ba0 	.word	0x00027ba0

000141d8 <llcp_lp_pu_rx>:
	switch (pdu->llctrl.opcode) {
   141d8:	f892 c01f 	ldrb.w	ip, [r2, #31]
   141dc:	f1bc 0f11 	cmp.w	ip, #17
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   141e0:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   141e4:	d00f      	beq.n	14206 <llcp_lp_pu_rx+0x2e>
   141e6:	f1bc 0f18 	cmp.w	ip, #24
   141ea:	d012      	beq.n	14212 <llcp_lp_pu_rx+0x3a>
   141ec:	f1bc 0f07 	cmp.w	ip, #7
   141f0:	d00c      	beq.n	1420c <llcp_lp_pu_rx+0x34>
{
   141f2:	b510      	push	{r4, lr}
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   141f4:	2324      	movs	r3, #36	; 0x24
   141f6:	460c      	mov	r4, r1
   141f8:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_lr_complete(conn);
   141fc:	f002 f8e2 	bl	163c4 <llcp_lr_complete>
		ctx->state = LP_PU_STATE_IDLE;
   14200:	2300      	movs	r3, #0
   14202:	72a3      	strb	r3, [r4, #10]
}
   14204:	bd10      	pop	{r4, pc}
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_REJECT, pdu);
   14206:	2205      	movs	r2, #5
   14208:	f7ff be9e 	b.w	13f48 <lp_pu_execute_fsm>
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_UNKNOWN, pdu);
   1420c:	2206      	movs	r2, #6
   1420e:	f7ff be9b 	b.w	13f48 <lp_pu_execute_fsm>
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_PHY_UPDATE_IND, pdu);
   14212:	2202      	movs	r2, #2
   14214:	f7ff be98 	b.w	13f48 <lp_pu_execute_fsm>

00014218 <llcp_lp_pu_init_proc>:
	ctx->state = LP_PU_STATE_IDLE;
   14218:	2300      	movs	r3, #0
   1421a:	7283      	strb	r3, [r0, #10]
}
   1421c:	4770      	bx	lr
   1421e:	bf00      	nop

00014220 <llcp_lp_pu_run>:
{
   14220:	4613      	mov	r3, r2
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_RUN, param);
   14222:	2200      	movs	r2, #0
   14224:	f7ff be90 	b.w	13f48 <lp_pu_execute_fsm>

00014228 <llcp_lp_pu_tx_ack>:
{
   14228:	4613      	mov	r3, r2
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_ACK, param);
   1422a:	2203      	movs	r2, #3
   1422c:	f7ff be8c 	b.w	13f48 <lp_pu_execute_fsm>

00014230 <llcp_lp_pu_tx_ntf>:
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_NTF, NULL);
   14230:	2300      	movs	r3, #0
   14232:	2204      	movs	r2, #4
   14234:	f7ff be88 	b.w	13f48 <lp_pu_execute_fsm>

00014238 <rp_pu_tx_ntf>:
{
   14238:	b570      	push	{r4, r5, r6, lr}
	uint8_t ntf_count = ctx->data.pu.ntf_pu + NTF_DLE;
   1423a:	7f4a      	ldrb	r2, [r1, #29]
   1423c:	f3c2 0300 	ubfx	r3, r2, #0, #1
   14240:	f3c2 0c40 	ubfx	ip, r2, #1, #1
   14244:	4463      	add	r3, ip
   14246:	b2db      	uxtb	r3, r3
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   14248:	2b02      	cmp	r3, #2
{
   1424a:	460c      	mov	r4, r1
   1424c:	4605      	mov	r5, r0
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   1424e:	d025      	beq.n	1429c <rp_pu_tx_ntf+0x64>
	if ((ntf_count > 0) && !llcp_ntf_alloc_num_available(ntf_count)) {
   14250:	b983      	cbnz	r3, 14274 <rp_pu_tx_ntf+0x3c>
		if (ctx->data.pu.ntf_pu) {
   14252:	07d6      	lsls	r6, r2, #31
   14254:	d428      	bmi.n	142a8 <rp_pu_tx_ntf+0x70>
		if (ctx->data.pu.ntf_dle) {
   14256:	0793      	lsls	r3, r2, #30
   14258:	d502      	bpl.n	14260 <rp_pu_tx_ntf+0x28>
			pu_dle_ntf(conn, ctx);
   1425a:	4628      	mov	r0, r5
   1425c:	f7ff fda4 	bl	13da8 <pu_dle_ntf.constprop.0>
	llcp_rr_set_paused_cmd(conn, PROC_NONE);
   14260:	2100      	movs	r1, #0
   14262:	4628      	mov	r0, r5
   14264:	f003 fbbe 	bl	179e4 <llcp_rr_set_paused_cmd>
	llcp_rr_complete(conn);
   14268:	4628      	mov	r0, r5
   1426a:	f003 fc4f 	bl	17b0c <llcp_rr_complete>
}
   1426e:	2300      	movs	r3, #0
		ctx->state = RP_PU_STATE_WAIT_NTF;
   14270:	72a3      	strb	r3, [r4, #10]
}
   14272:	bd70      	pop	{r4, r5, r6, pc}
   14274:	2601      	movs	r6, #1
	if ((ntf_count > 0) && !llcp_ntf_alloc_num_available(ntf_count)) {
   14276:	4630      	mov	r0, r6
   14278:	f000 fd7c 	bl	14d74 <llcp_ntf_alloc_num_available>
   1427c:	b158      	cbz	r0, 14296 <rp_pu_tx_ntf+0x5e>
		if (ctx->data.pu.ntf_pu) {
   1427e:	7f62      	ldrb	r2, [r4, #29]
   14280:	07d1      	lsls	r1, r2, #31
   14282:	d5e8      	bpl.n	14256 <rp_pu_tx_ntf+0x1e>
			pu_ntf(conn, ctx);
   14284:	4621      	mov	r1, r4
   14286:	4628      	mov	r0, r5
   14288:	f7ff fc98 	bl	13bbc <pu_ntf>
			if (ntf_count == 1 && NTF_DLE == 1) {
   1428c:	2e01      	cmp	r6, #1
   1428e:	d10f      	bne.n	142b0 <rp_pu_tx_ntf+0x78>
   14290:	7f63      	ldrb	r3, [r4, #29]
   14292:	079a      	lsls	r2, r3, #30
   14294:	d5e4      	bpl.n	14260 <rp_pu_tx_ntf+0x28>
		ctx->state = RP_PU_STATE_WAIT_NTF;
   14296:	2309      	movs	r3, #9
   14298:	72a3      	strb	r3, [r4, #10]
}
   1429a:	bd70      	pop	{r4, r5, r6, pc}
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   1429c:	4618      	mov	r0, r3
   1429e:	f000 fd69 	bl	14d74 <llcp_ntf_alloc_num_available>
   142a2:	1c46      	adds	r6, r0, #1
   142a4:	b2f6      	uxtb	r6, r6
   142a6:	e7e6      	b.n	14276 <rp_pu_tx_ntf+0x3e>
			pu_ntf(conn, ctx);
   142a8:	f7ff fc88 	bl	13bbc <pu_ntf>
		if (ctx->data.pu.ntf_dle) {
   142ac:	7f62      	ldrb	r2, [r4, #29]
   142ae:	e7d2      	b.n	14256 <rp_pu_tx_ntf+0x1e>
			if (ntf_count == 1 && NTF_DLE == 1) {
   142b0:	7f62      	ldrb	r2, [r4, #29]
   142b2:	e7d0      	b.n	14256 <rp_pu_tx_ntf+0x1e>

000142b4 <rp_pu_execute_fsm>:
		break;
	}
}

static void rp_pu_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
   142b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   142b6:	460c      	mov	r4, r1
	switch (ctx->state) {
   142b8:	7a89      	ldrb	r1, [r1, #10]
{
   142ba:	b083      	sub	sp, #12
   142bc:	4606      	mov	r6, r0
   142be:	4615      	mov	r5, r2
	switch (ctx->state) {
   142c0:	2909      	cmp	r1, #9
   142c2:	d810      	bhi.n	142e6 <rp_pu_execute_fsm+0x32>
   142c4:	e8df f011 	tbh	[pc, r1, lsl #1]
   142c8:	009800de 	.word	0x009800de
   142cc:	001e00d4 	.word	0x001e00d4
   142d0:	000f000f 	.word	0x000f000f
   142d4:	0061004e 	.word	0x0061004e
   142d8:	000a008d 	.word	0x000a008d
	switch (evt) {
   142dc:	2d00      	cmp	r5, #0
   142de:	f000 8083 	beq.w	143e8 <rp_pu_execute_fsm+0x134>
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   142e2:	b003      	add	sp, #12
   142e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   142e6:	4a88      	ldr	r2, [pc, #544]	; (14508 <rp_pu_execute_fsm+0x254>)
   142e8:	4988      	ldr	r1, [pc, #544]	; (1450c <rp_pu_execute_fsm+0x258>)
   142ea:	4889      	ldr	r0, [pc, #548]	; (14510 <rp_pu_execute_fsm+0x25c>)
   142ec:	f240 5304 	movw	r3, #1284	; 0x504
   142f0:	f00d fa2c 	bl	2174c <assert_print>
   142f4:	4040      	eors	r0, r0
   142f6:	f380 8811 	msr	BASEPRI, r0
   142fa:	f04f 0003 	mov.w	r0, #3
   142fe:	df02      	svc	2
}
   14300:	b003      	add	sp, #12
   14302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (evt) {
   14304:	2d02      	cmp	r5, #2
   14306:	d1ec      	bne.n	142e2 <rp_pu_execute_fsm+0x2e>
			LL_ASSERT(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
   14308:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1430c:	2b00      	cmp	r3, #0
   1430e:	db0c      	blt.n	1432a <rp_pu_execute_fsm+0x76>
   14310:	4a7d      	ldr	r2, [pc, #500]	; (14508 <rp_pu_execute_fsm+0x254>)
   14312:	4980      	ldr	r1, [pc, #512]	; (14514 <rp_pu_execute_fsm+0x260>)
   14314:	487e      	ldr	r0, [pc, #504]	; (14510 <rp_pu_execute_fsm+0x25c>)
   14316:	f240 4355 	movw	r3, #1109	; 0x455
   1431a:	f00d fa17 	bl	2174c <assert_print>
   1431e:	4040      	eors	r0, r0
   14320:	f380 8811 	msr	BASEPRI, r0
   14324:	f04f 0003 	mov.w	r0, #3
   14328:	df02      	svc	2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   1432a:	4b7b      	ldr	r3, [pc, #492]	; (14518 <rp_pu_execute_fsm+0x264>)
	const uint8_t phys = phy_tx | lll->phy_tx;
   1432c:	f896 2076 	ldrb.w	r2, [r6, #118]	; 0x76
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   14330:	e893 0003 	ldmia.w	r3, {r0, r1}
				conn, pu_select_phy_timing_restrict(conn, ctx->data.pu.tx));
   14334:	7f23      	ldrb	r3, [r4, #28]
	return phy_tx_time[phys];
   14336:	4313      	orrs	r3, r2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   14338:	ad02      	add	r5, sp, #8
	return phy_tx_time[phys];
   1433a:	f003 0307 	and.w	r3, r3, #7
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   1433e:	e905 0003 	stmdb	r5, {r0, r1}
	return phy_tx_time[phys];
   14342:	3308      	adds	r3, #8
   14344:	446b      	add	r3, sp
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   14346:	2102      	movs	r1, #2
	return phy_tx_time[phys];
   14348:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   1434c:	4630      	mov	r0, r6
	lll->phy_tx_time = phy_tx;
   1434e:	f363 1206 	bfi	r2, r3, #4, #3
			ctx->state = RP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
   14352:	2306      	movs	r3, #6
	lll->phy_tx_time = phy_tx;
   14354:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			ctx->state = RP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
   14358:	72a3      	strb	r3, [r4, #10]
}
   1435a:	b003      	add	sp, #12
   1435c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   14360:	f000 bd2a 	b.w	14db8 <llcp_tx_resume_data>
	switch (evt) {
   14364:	2d03      	cmp	r5, #3
   14366:	d1bc      	bne.n	142e2 <rp_pu_execute_fsm+0x2e>
		llcp_pdu_decode_phy_update_ind(ctx, (struct pdu_data *)param);
   14368:	4619      	mov	r1, r3
   1436a:	4620      	mov	r0, r4
   1436c:	f002 fa54 	bl	16818 <llcp_pdu_decode_phy_update_ind>
		const uint8_t end_procedure = pu_check_update_ind(conn, ctx);
   14370:	4621      	mov	r1, r4
   14372:	4630      	mov	r0, r6
   14374:	f7ff fbf6 	bl	13b64 <pu_check_update_ind>
		if (!end_procedure) {
   14378:	2800      	cmp	r0, #0
   1437a:	f000 8096 	beq.w	144aa <rp_pu_execute_fsm+0x1f6>
			if (ctx->data.pu.error == BT_HCI_ERR_INSTANT_PASSED) {
   1437e:	7fa3      	ldrb	r3, [r4, #30]
   14380:	2b28      	cmp	r3, #40	; 0x28
				conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
   14382:	bf08      	it	eq
   14384:	f886 3148 	strbeq.w	r3, [r6, #328]	; 0x148
   14388:	e01d      	b.n	143c6 <rp_pu_execute_fsm+0x112>
	switch (evt) {
   1438a:	2d00      	cmp	r5, #0
   1438c:	d1a9      	bne.n	142e2 <rp_pu_execute_fsm+0x2e>
	if (is_instant_reached_or_passed(ctx->data.pu.instant, ull_conn_event_counter(conn))) {
   1438e:	8c27      	ldrh	r7, [r4, #32]
   14390:	f7ff fa3c 	bl	1380c <ull_conn_event_counter>
   14394:	1bc0      	subs	r0, r0, r7
   14396:	0403      	lsls	r3, r0, #16
   14398:	d4a3      	bmi.n	142e2 <rp_pu_execute_fsm+0x2e>
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
   1439a:	77a5      	strb	r5, [r4, #30]
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   1439c:	f996 5039 	ldrsb.w	r5, [r6, #57]	; 0x39
	const uint8_t old_tx = lll->phy_tx;
   143a0:	f896 0076 	ldrb.w	r0, [r6, #118]	; 0x76
	const uint8_t old_rx = lll->phy_rx;
   143a4:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
   143a8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   143ac:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   143b0:	2d00      	cmp	r5, #0
	const uint8_t old_tx = lll->phy_tx;
   143b2:	f000 0c07 	and.w	ip, r0, #7
	const uint8_t old_rx = lll->phy_rx;
   143b6:	f003 0707 	and.w	r7, r3, #7
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   143ba:	db7c      	blt.n	144b6 <rp_pu_execute_fsm+0x202>
{
   143bc:	2200      	movs	r2, #0
		ctx->data.pu.ntf_pu = phy_changed;
   143be:	7f63      	ldrb	r3, [r4, #29]
   143c0:	f362 0300 	bfi	r3, r2, #0, #1
   143c4:	7763      	strb	r3, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
   143c6:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   143ca:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
   143ce:	f362 1306 	bfi	r3, r2, #4, #3
   143d2:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	if (ctx->data.pu.ntf_pu) {
   143d6:	7f63      	ldrb	r3, [r4, #29]
   143d8:	07da      	lsls	r2, r3, #31
   143da:	d55c      	bpl.n	14496 <rp_pu_execute_fsm+0x1e2>
		ctx->state = RP_PU_STATE_WAIT_INSTANT_ON_AIR;
   143dc:	2308      	movs	r3, #8
   143de:	72a3      	strb	r3, [r4, #10]
   143e0:	e77f      	b.n	142e2 <rp_pu_execute_fsm+0x2e>
	switch (evt) {
   143e2:	2d04      	cmp	r5, #4
   143e4:	f47f af7d 	bne.w	142e2 <rp_pu_execute_fsm+0x2e>
		rp_pu_tx_ntf(conn, ctx, evt, param);
   143e8:	462a      	mov	r2, r5
   143ea:	4621      	mov	r1, r4
   143ec:	4630      	mov	r0, r6
}
   143ee:	b003      	add	sp, #12
   143f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		rp_pu_tx_ntf(conn, ctx, evt, param);
   143f4:	f7ff bf20 	b.w	14238 <rp_pu_tx_ntf>
	llcp_pdu_decode_phy_req(ctx, (struct pdu_data *)param);
   143f8:	4619      	mov	r1, r3
   143fa:	4620      	mov	r0, r4
   143fc:	f002 f9ec 	bl	167d8 <llcp_pdu_decode_phy_req>
	ctx->data.pu.rx &= rx;
   14400:	7f22      	ldrb	r2, [r4, #28]
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
   14402:	f896 318c 	ldrb.w	r3, [r6, #396]	; 0x18c
	ctx->data.pu.rx &= rx;
   14406:	f3c2 00c2 	ubfx	r0, r2, #3, #3
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
   1440a:	f3c3 01c2 	ubfx	r1, r3, #3, #3
	ctx->data.pu.tx &= tx;
   1440e:	4001      	ands	r1, r0
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
   14410:	f3c3 0302 	ubfx	r3, r3, #0, #3
	ctx->data.pu.tx &= tx;
   14414:	f3c2 0002 	ubfx	r0, r2, #0, #3
   14418:	4003      	ands	r3, r0
   1441a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
   1441e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   14422:	4313      	orrs	r3, r2
   14424:	7723      	strb	r3, [r4, #28]
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL && (!ctx->data.pu.rx || !ctx->data.pu.tx)) {
   14426:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
   1442a:	2b00      	cmp	r3, #0
   1442c:	db07      	blt.n	1443e <rp_pu_execute_fsm+0x18a>
   1442e:	7f23      	ldrb	r3, [r4, #28]
   14430:	f013 0f38 	tst.w	r3, #56	; 0x38
   14434:	d12c      	bne.n	14490 <rp_pu_execute_fsm+0x1dc>
		ctx->data.pu.tx = 0;
   14436:	7f23      	ldrb	r3, [r4, #28]
   14438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1443c:	7723      	strb	r3, [r4, #28]
	llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   1443e:	2102      	movs	r1, #2
   14440:	4630      	mov	r0, r6
   14442:	f000 fca5 	bl	14d90 <llcp_tx_pause_data>
	switch (evt) {
   14446:	2d01      	cmp	r5, #1
   14448:	f47f af4b 	bne.w	142e2 <rp_pu_execute_fsm+0x2e>
		switch (conn->lll.role) {
   1444c:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   14450:	09db      	lsrs	r3, r3, #7
   14452:	d110      	bne.n	14476 <rp_pu_execute_fsm+0x1c2>
			LL_ASSERT(0);
   14454:	4a2c      	ldr	r2, [pc, #176]	; (14508 <rp_pu_execute_fsm+0x254>)
   14456:	492d      	ldr	r1, [pc, #180]	; (1450c <rp_pu_execute_fsm+0x258>)
   14458:	482d      	ldr	r0, [pc, #180]	; (14510 <rp_pu_execute_fsm+0x25c>)
   1445a:	f240 4335 	movw	r3, #1077	; 0x435
   1445e:	f00d f975 	bl	2174c <assert_print>
   14462:	4040      	eors	r0, r0
   14464:	f380 8811 	msr	BASEPRI, r0
   14468:	f04f 0003 	mov.w	r0, #3
   1446c:	df02      	svc	2
   1446e:	e738      	b.n	142e2 <rp_pu_execute_fsm+0x2e>
	switch (evt) {
   14470:	2d00      	cmp	r5, #0
   14472:	f47f af36 	bne.w	142e2 <rp_pu_execute_fsm+0x2e>
			rp_pu_send_phy_rsp(conn, ctx, evt, param);
   14476:	4621      	mov	r1, r4
   14478:	4630      	mov	r0, r6
}
   1447a:	b003      	add	sp, #12
   1447c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			rp_pu_send_phy_rsp(conn, ctx, evt, param);
   14480:	f7ff bc4e 	b.w	13d20 <rp_pu_send_phy_rsp.constprop.0>
	switch (evt) {
   14484:	2d00      	cmp	r5, #0
   14486:	f47f af2c 	bne.w	142e2 <rp_pu_execute_fsm+0x2e>
		ctx->state = RP_PU_STATE_WAIT_RX_PHY_REQ;
   1448a:	2301      	movs	r3, #1
   1448c:	72a3      	strb	r3, [r4, #10]
		break;
   1448e:	e728      	b.n	142e2 <rp_pu_execute_fsm+0x2e>
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL && (!ctx->data.pu.rx || !ctx->data.pu.tx)) {
   14490:	0759      	lsls	r1, r3, #29
   14492:	d1d4      	bne.n	1443e <rp_pu_execute_fsm+0x18a>
   14494:	e7cf      	b.n	14436 <rp_pu_execute_fsm+0x182>
	llcp_rr_set_paused_cmd(conn, PROC_NONE);
   14496:	2100      	movs	r1, #0
   14498:	4630      	mov	r0, r6
   1449a:	f003 faa3 	bl	179e4 <llcp_rr_set_paused_cmd>
	llcp_rr_complete(conn);
   1449e:	4630      	mov	r0, r6
   144a0:	f003 fb34 	bl	17b0c <llcp_rr_complete>
	ctx->state = RP_PU_STATE_IDLE;
   144a4:	2300      	movs	r3, #0
   144a6:	72a3      	strb	r3, [r4, #10]
}
   144a8:	e71b      	b.n	142e2 <rp_pu_execute_fsm+0x2e>
			llcp_rr_prt_stop(conn);
   144aa:	4630      	mov	r0, r6
   144ac:	f003 fab6 	bl	17a1c <llcp_rr_prt_stop>
			ctx->state = RP_PU_STATE_WAIT_INSTANT;
   144b0:	2307      	movs	r3, #7
   144b2:	72a3      	strb	r3, [r4, #10]
   144b4:	e715      	b.n	142e2 <rp_pu_execute_fsm+0x2e>
		if (p_to_c_phy) {
   144b6:	f011 0103 	ands.w	r1, r1, #3
   144ba:	d016      	beq.n	144ea <rp_pu_execute_fsm+0x236>
			lll->phy_tx = p_to_c_phy;
   144bc:	f361 0002 	bfi	r0, r1, #0, #3
		if (c_to_p_phy) {
   144c0:	f012 0203 	ands.w	r2, r2, #3
			lll->phy_tx = p_to_c_phy;
   144c4:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		if (c_to_p_phy) {
   144c8:	d01a      	beq.n	14500 <rp_pu_execute_fsm+0x24c>
			lll->phy_rx = c_to_p_phy;
   144ca:	f362 0302 	bfi	r3, r2, #0, #3
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   144ce:	458c      	cmp	ip, r1
			lll->phy_rx = c_to_p_phy;
   144d0:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   144d4:	d011      	beq.n	144fa <rp_pu_execute_fsm+0x246>
			ctx->data.pu.ntf_dle = pu_update_eff_times(conn, ctx);
   144d6:	4621      	mov	r1, r4
   144d8:	4630      	mov	r0, r6
   144da:	f7ff fba3 	bl	13c24 <pu_update_eff_times>
   144de:	7f63      	ldrb	r3, [r4, #29]
   144e0:	f360 0341 	bfi	r3, r0, #1, #1
   144e4:	2201      	movs	r2, #1
   144e6:	7763      	strb	r3, [r4, #29]
   144e8:	e769      	b.n	143be <rp_pu_execute_fsm+0x10a>
		if (c_to_p_phy) {
   144ea:	f012 0203 	ands.w	r2, r2, #3
   144ee:	f43f af65 	beq.w	143bc <rp_pu_execute_fsm+0x108>
			lll->phy_rx = c_to_p_phy;
   144f2:	f362 0302 	bfi	r3, r2, #0, #3
   144f6:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   144fa:	4297      	cmp	r7, r2
   144fc:	d1eb      	bne.n	144d6 <rp_pu_execute_fsm+0x222>
   144fe:	e75d      	b.n	143bc <rp_pu_execute_fsm+0x108>
   14500:	458c      	cmp	ip, r1
   14502:	d1e8      	bne.n	144d6 <rp_pu_execute_fsm+0x222>
   14504:	e75a      	b.n	143bc <rp_pu_execute_fsm+0x108>
   14506:	bf00      	nop
   14508:	00028efc 	.word	0x00028efc
   1450c:	000286fc 	.word	0x000286fc
   14510:	0002866c 	.word	0x0002866c
   14514:	00028f44 	.word	0x00028f44
   14518:	00027ba0 	.word	0x00027ba0

0001451c <llcp_rp_pu_rx>:

void llcp_rp_pu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
   1451c:	b510      	push	{r4, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   1451e:	f892 e01f 	ldrb.w	lr, [r2, #31]
   14522:	f1be 0f16 	cmp.w	lr, #22
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   14526:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   1452a:	d00b      	beq.n	14544 <llcp_rp_pu_rx+0x28>
   1452c:	f1be 0f18 	cmp.w	lr, #24
   14530:	d00d      	beq.n	1454e <llcp_rp_pu_rx+0x32>
		break;
#endif /* CONFIG_BT_PERIPHERAL */
	default:
		/* Invalid behaviour */
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   14532:	2324      	movs	r3, #36	; 0x24
   14534:	460c      	mov	r4, r1
   14536:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_rr_complete(conn);
   1453a:	f003 fae7 	bl	17b0c <llcp_rr_complete>
		ctx->state = RP_PU_STATE_IDLE;
   1453e:	2300      	movs	r3, #0
   14540:	72a3      	strb	r3, [r4, #10]
		break;
	}
}
   14542:	bd10      	pop	{r4, pc}
   14544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_PHY_REQ, pdu);
   14548:	2201      	movs	r2, #1
   1454a:	f7ff beb3 	b.w	142b4 <rp_pu_execute_fsm>
}
   1454e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_PHY_UPDATE_IND, pdu);
   14552:	2203      	movs	r2, #3
   14554:	f7ff beae 	b.w	142b4 <rp_pu_execute_fsm>

00014558 <llcp_rp_pu_init_proc>:

void llcp_rp_pu_init_proc(struct proc_ctx *ctx)
   14558:	2300      	movs	r3, #0
   1455a:	7283      	strb	r3, [r0, #10]
   1455c:	4770      	bx	lr
   1455e:	bf00      	nop

00014560 <llcp_rp_pu_run>:
{
	ctx->state = RP_PU_STATE_IDLE;
}

void llcp_rp_pu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   14560:	4613      	mov	r3, r2
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_RUN, param);
   14562:	2200      	movs	r2, #0
   14564:	f7ff bea6 	b.w	142b4 <rp_pu_execute_fsm>

00014568 <llcp_rp_pu_tx_ack>:
}

void llcp_rp_pu_tx_ack(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   14568:	4613      	mov	r3, r2
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_ACK, param);
   1456a:	2202      	movs	r2, #2
   1456c:	f7ff bea2 	b.w	142b4 <rp_pu_execute_fsm>

00014570 <llcp_rp_pu_tx_ntf>:
}

void llcp_rp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_NTF, NULL);
   14570:	2300      	movs	r3, #0
   14572:	2204      	movs	r2, #4
   14574:	f7ff be9e 	b.w	142b4 <rp_pu_execute_fsm>

00014578 <llcp_rp_enc_tx>:
/*
 * LLCP Remote Procedure Encryption FSM
 */

static struct node_tx *llcp_rp_enc_tx(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t opcode)
{
   14578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1457a:	4606      	mov	r6, r0
   1457c:	460f      	mov	r7, r1
   1457e:	4615      	mov	r5, r2
	struct node_tx *tx;
	struct pdu_data *pdu;

	/* Allocate tx node */
	tx = llcp_tx_alloc(conn, ctx);
   14580:	f000 fbe4 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   14584:	4604      	mov	r4, r0
   14586:	2800      	cmp	r0, #0
   14588:	d039      	beq.n	145fe <llcp_rp_enc_tx+0x86>

	pdu = (struct pdu_data *)tx->pdu;

	/* Encode LL Control PDU */
	switch (opcode) {
   1458a:	1f2a      	subs	r2, r5, #4
	pdu = (struct pdu_data *)tx->pdu;
   1458c:	1d20      	adds	r0, r4, #4
	switch (opcode) {
   1458e:	2a09      	cmp	r2, #9
   14590:	d806      	bhi.n	145a0 <llcp_rp_enc_tx+0x28>
   14592:	e8df f002 	tbb	[pc, r2]
   14596:	201d      	.short	0x201d
   14598:	05050523 	.word	0x05050523
   1459c:	29052605 	.word	0x29052605
		} else {
			llcp_pdu_encode_reject_ind(pdu, BT_HCI_ERR_PIN_OR_KEY_MISSING);
		}
		break;
	default:
		LL_ASSERT(0);
   145a0:	4a20      	ldr	r2, [pc, #128]	; (14624 <llcp_rp_enc_tx+0xac>)
   145a2:	4921      	ldr	r1, [pc, #132]	; (14628 <llcp_rp_enc_tx+0xb0>)
   145a4:	4821      	ldr	r0, [pc, #132]	; (1462c <llcp_rp_enc_tx+0xb4>)
   145a6:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   145aa:	f00d f8cf 	bl	2174c <assert_print>
   145ae:	4040      	eors	r0, r0
   145b0:	f380 8811 	msr	BASEPRI, r0
   145b4:	f04f 0003 	mov.w	r0, #3
   145b8:	df02      	svc	2
	}

	ctx->tx_opcode = pdu->llctrl.opcode;
   145ba:	79e3      	ldrb	r3, [r4, #7]
   145bc:	737b      	strb	r3, [r7, #13]

	/* Enqueue LL Control PDU towards LLL */
	llcp_tx_enqueue(conn, tx);
   145be:	4621      	mov	r1, r4
   145c0:	4630      	mov	r0, r6
   145c2:	f000 fbe1 	bl	14d88 <llcp_tx_enqueue>

	/* Restart procedure response timeout timer */
	llcp_rr_prt_restart(conn);
   145c6:	4630      	mov	r0, r6
   145c8:	f003 fa22 	bl	17a10 <llcp_rr_prt_restart>

	return tx;
}
   145cc:	4620      	mov	r0, r4
   145ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		llcp_pdu_encode_enc_rsp(pdu);
   145d0:	f002 f896 	bl	16700 <llcp_pdu_encode_enc_rsp>
		break;
   145d4:	e7f1      	b.n	145ba <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_start_enc_req(pdu);
   145d6:	f002 f8ab 	bl	16730 <llcp_pdu_encode_start_enc_req>
		break;
   145da:	e7ee      	b.n	145ba <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_start_enc_rsp(pdu);
   145dc:	f002 f8b2 	bl	16744 <llcp_pdu_encode_start_enc_rsp>
		break;
   145e0:	e7eb      	b.n	145ba <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_pause_enc_rsp(pdu);
   145e2:	f002 f8b9 	bl	16758 <llcp_pdu_encode_pause_enc_rsp>
		break;
   145e6:	e7e8      	b.n	145ba <llcp_rp_enc_tx+0x42>
		if (conn->llcp.fex.valid && feature_ext_rej_ind(conn)) {
   145e8:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
   145ec:	b11b      	cbz	r3, 145f6 <llcp_rp_enc_tx+0x7e>
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_EXT_REJ_IND) != 0;
   145ee:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   145f2:	075b      	lsls	r3, r3, #29
   145f4:	d411      	bmi.n	1461a <llcp_rp_enc_tx+0xa2>
			llcp_pdu_encode_reject_ind(pdu, BT_HCI_ERR_PIN_OR_KEY_MISSING);
   145f6:	2106      	movs	r1, #6
   145f8:	f002 f8b8 	bl	1676c <llcp_pdu_encode_reject_ind>
   145fc:	e7dd      	b.n	145ba <llcp_rp_enc_tx+0x42>
	LL_ASSERT(tx);
   145fe:	4a09      	ldr	r2, [pc, #36]	; (14624 <llcp_rp_enc_tx+0xac>)
   14600:	490b      	ldr	r1, [pc, #44]	; (14630 <llcp_rp_enc_tx+0xb8>)
   14602:	480a      	ldr	r0, [pc, #40]	; (1462c <llcp_rp_enc_tx+0xb4>)
   14604:	f240 23c9 	movw	r3, #713	; 0x2c9
   14608:	f00d f8a0 	bl	2174c <assert_print>
   1460c:	4040      	eors	r0, r0
   1460e:	f380 8811 	msr	BASEPRI, r0
   14612:	f04f 0003 	mov.w	r0, #3
   14616:	df02      	svc	2
   14618:	e7b7      	b.n	1458a <llcp_rp_enc_tx+0x12>
			llcp_pdu_encode_reject_ext_ind(pdu, PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   1461a:	2206      	movs	r2, #6
   1461c:	2103      	movs	r1, #3
   1461e:	f002 f8b1 	bl	16784 <llcp_pdu_encode_reject_ext_ind>
   14622:	e7ca      	b.n	145ba <llcp_rp_enc_tx+0x42>
   14624:	00028f5c 	.word	0x00028f5c
   14628:	000286fc 	.word	0x000286fc
   1462c:	0002866c 	.word	0x0002866c
   14630:	00028d90 	.word	0x00028d90

00014634 <rp_enc_ntf_ltk>:

static void rp_enc_ntf_ltk(struct ll_conn *conn, struct proc_ctx *ctx)
{
   14634:	b570      	push	{r4, r5, r6, lr}
   14636:	4606      	mov	r6, r0
   14638:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   1463a:	f000 fba3 	bl	14d84 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   1463e:	4604      	mov	r4, r0
   14640:	b170      	cbz	r0, 14660 <rp_enc_ntf_ltk+0x2c>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   14642:	2303      	movs	r3, #3
   14644:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   14646:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   14648:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;

	llcp_ntf_encode_enc_req(ctx, pdu);
   1464a:	4628      	mov	r0, r5
   1464c:	f104 011c 	add.w	r1, r4, #28
   14650:	f002 f83e 	bl	166d0 <llcp_ntf_encode_enc_req>

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   14654:	6820      	ldr	r0, [r4, #0]
   14656:	4621      	mov	r1, r4
}
   14658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   1465c:	f7fc bfb6 	b.w	115cc <ll_rx_put_sched>
	LL_ASSERT(ntf);
   14660:	4a06      	ldr	r2, [pc, #24]	; (1467c <rp_enc_ntf_ltk+0x48>)
   14662:	4907      	ldr	r1, [pc, #28]	; (14680 <rp_enc_ntf_ltk+0x4c>)
   14664:	4807      	ldr	r0, [pc, #28]	; (14684 <rp_enc_ntf_ltk+0x50>)
   14666:	f240 23f9 	movw	r3, #761	; 0x2f9
   1466a:	f00d f86f 	bl	2174c <assert_print>
   1466e:	4040      	eors	r0, r0
   14670:	f380 8811 	msr	BASEPRI, r0
   14674:	f04f 0003 	mov.w	r0, #3
   14678:	df02      	svc	2
   1467a:	e7e2      	b.n	14642 <rp_enc_ntf_ltk+0xe>
   1467c:	00028f5c 	.word	0x00028f5c
   14680:	00028f40 	.word	0x00028f40
   14684:	0002866c 	.word	0x0002866c

00014688 <rp_enc_send_start_enc_req.part.0>:
		rp_enc_store_s(conn, ctx, (struct pdu_data *)tx->pdu);
		rp_enc_send_ltk_ntf(conn, ctx, evt, param);
	}
}

static void rp_enc_send_start_enc_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   14688:	b570      	push	{r4, r5, r6, lr}
   1468a:	460d      	mov	r5, r1
	ecb_encrypt(&ctx->data.enc.ltk[0], &ctx->data.enc.skd[0], NULL, &conn->lll.ccm_rx.key[0]);
   1468c:	f100 068f 	add.w	r6, r0, #143	; 0x8f
static void rp_enc_send_start_enc_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   14690:	4604      	mov	r4, r0
	ecb_encrypt(&ctx->data.enc.ltk[0], &ctx->data.enc.skd[0], NULL, &conn->lll.ccm_rx.key[0]);
   14692:	4633      	mov	r3, r6
   14694:	2200      	movs	r2, #0
   14696:	3137      	adds	r1, #55	; 0x37
   14698:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1469c:	f005 fcb4 	bl	1a008 <ecb_encrypt>
	memcpy(&conn->lll.ccm_tx.key[0], &conn->lll.ccm_rx.key[0], sizeof(conn->lll.ccm_tx.key));
   146a0:	2210      	movs	r2, #16
   146a2:	4631      	mov	r1, r6
   146a4:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   146a8:	f00f fab0 	bl	23c0c <memcpy>
	memcpy(&conn->lll.ccm_tx.iv[0], &conn->lll.ccm_rx.iv[0], sizeof(conn->lll.ccm_tx.iv));
   146ac:	2208      	movs	r2, #8
   146ae:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
   146b2:	f104 00c9 	add.w	r0, r4, #201	; 0xc9
   146b6:	f00f faa9 	bl	23c0c <memcpy>
	conn->lll.ccm_tx.counter = 0U;
   146ba:	2000      	movs	r0, #0
   146bc:	2100      	movs	r1, #0
		conn->lll.ccm_rx.direction = 1U;
   146be:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
	conn->lll.ccm_tx.counter = 0U;
   146c2:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->lll.ccm_tx.direction = 0U;
   146c6:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
	conn->lll.ccm_rx.counter = 0U;
   146ca:	2300      	movs	r3, #0
		conn->lll.ccm_tx.direction = 0U;
   146cc:	f363 0100 	bfi	r1, r3, #0, #1
	conn->lll.ccm_rx.counter = 0U;
   146d0:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
   146d4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
   146d8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
   146dc:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
   146e0:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
   146e4:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   146e8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
   146ec:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		conn->lll.ccm_rx.direction = 1U;
   146f0:	f042 0301 	orr.w	r3, r2, #1
		conn->lll.ccm_tx.direction = 0U;
   146f4:	f884 10c8 	strb.w	r1, [r4, #200]	; 0xc8
		conn->lll.ccm_rx.direction = 1U;
   146f8:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
{
	if (!llcp_tx_alloc_peek(conn, ctx)) {
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_REQ;
	} else {
		enc_setup_lll(conn, ctx, BT_HCI_ROLE_PERIPHERAL);
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_REQ);
   146fc:	2205      	movs	r2, #5
   146fe:	4629      	mov	r1, r5
   14700:	4620      	mov	r0, r4
   14702:	f7ff ff39 	bl	14578 <llcp_rp_enc_tx>
		/* Wait for the LL_START_ENC_RSP */
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
		ctx->state = RP_ENC_STATE_WAIT_RX_START_ENC_RSP;
   14706:	f240 6307 	movw	r3, #1543	; 0x607
   1470a:	816b      	strh	r3, [r5, #10]

		/* Rx Decryption enabled */
		conn->lll.enc_rx = 1U;
   1470c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   14710:	f043 0308 	orr.w	r3, r3, #8
   14714:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	}
}
   14718:	bd70      	pop	{r4, r5, r6, pc}
   1471a:	bf00      	nop

0001471c <rp_enc_send_enc_rsp.part.0.isra.0>:
static void rp_enc_send_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   1471c:	b570      	push	{r4, r5, r6, lr}
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
   1471e:	2204      	movs	r2, #4
static void rp_enc_send_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   14720:	460c      	mov	r4, r1
   14722:	4606      	mov	r6, r0
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
   14724:	f7ff ff28 	bl	14578 <llcp_rp_enc_tx>
	memcpy(&ctx->data.enc.skds, pdu->llctrl.enc_rsp.skds, sizeof(pdu->llctrl.enc_rsp.skds));
   14728:	2208      	movs	r2, #8
   1472a:	1881      	adds	r1, r0, r2
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
   1472c:	4605      	mov	r5, r0
	memcpy(&ctx->data.enc.skds, pdu->llctrl.enc_rsp.skds, sizeof(pdu->llctrl.enc_rsp.skds));
   1472e:	f104 003f 	add.w	r0, r4, #63	; 0x3f
   14732:	f00f fa6b 	bl	23c0c <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4], pdu->llctrl.enc_rsp.ivs, sizeof(pdu->llctrl.enc_rsp.ivs));
   14736:	2204      	movs	r2, #4
   14738:	f105 0110 	add.w	r1, r5, #16
   1473c:	f106 00ac 	add.w	r0, r6, #172	; 0xac
   14740:	f00f fa64 	bl	23c0c <memcpy>
	if (!llcp_ntf_alloc_is_available()) {
   14744:	f000 fb0e 	bl	14d64 <llcp_ntf_alloc_is_available>
   14748:	b910      	cbnz	r0, 14750 <rp_enc_send_enc_rsp.part.0.isra.0+0x34>
   1474a:	2303      	movs	r3, #3
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
   1474c:	72a3      	strb	r3, [r4, #10]
}
   1474e:	bd70      	pop	{r4, r5, r6, pc}
		rp_enc_ntf_ltk(conn, ctx);
   14750:	4621      	mov	r1, r4
   14752:	4630      	mov	r0, r6
   14754:	f7ff ff6e 	bl	14634 <rp_enc_ntf_ltk>
}
   14758:	2304      	movs	r3, #4
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
   1475a:	72a3      	strb	r3, [r4, #10]
}
   1475c:	bd70      	pop	{r4, r5, r6, pc}
   1475e:	bf00      	nop

00014760 <rp_enc_complete.isra.0>:
static void rp_enc_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   14760:	b570      	push	{r4, r5, r6, lr}
   14762:	4605      	mov	r5, r0
   14764:	460c      	mov	r4, r1
	if (!llcp_ntf_alloc_is_available()) {
   14766:	f000 fafd 	bl	14d64 <llcp_ntf_alloc_is_available>
   1476a:	b910      	cbnz	r0, 14772 <rp_enc_complete.isra.0+0x12>
		ctx->state = RP_ENC_STATE_WAIT_NTF;
   1476c:	2308      	movs	r3, #8
   1476e:	72a3      	strb	r3, [r4, #10]
}
   14770:	bd70      	pop	{r4, r5, r6, pc}
	ntf = llcp_ntf_alloc();
   14772:	f000 fb07 	bl	14d84 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   14776:	4606      	mov	r6, r0
   14778:	2800      	cmp	r0, #0
   1477a:	d044      	beq.n	14806 <rp_enc_complete.isra.0+0xa6>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   1477c:	2303      	movs	r3, #3
   1477e:	7133      	strb	r3, [r6, #4]
	ntf->hdr.handle = conn->lll.handle;
   14780:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   14782:	80f3      	strh	r3, [r6, #6]
	if (ctx->proc == PROC_ENCRYPTION_START) {
   14784:	7a23      	ldrb	r3, [r4, #8]
   14786:	2b05      	cmp	r3, #5
   14788:	d038      	beq.n	147fc <rp_enc_complete.isra.0+0x9c>
	} else if (ctx->proc == PROC_ENCRYPTION_PAUSE) {
   1478a:	2b06      	cmp	r3, #6
   1478c:	d10d      	bne.n	147aa <rp_enc_complete.isra.0+0x4a>
		ntf->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1478e:	231a      	movs	r3, #26
   14790:	7133      	strb	r3, [r6, #4]
	ll_rx_put_sched(ntf->hdr.link, ntf);
   14792:	6830      	ldr	r0, [r6, #0]
   14794:	4631      	mov	r1, r6
   14796:	f7fc ff19 	bl	115cc <ll_rx_put_sched>
}

static void rp_enc_send_start_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
				      void *param)
{
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   1479a:	4621      	mov	r1, r4
   1479c:	4628      	mov	r0, r5
   1479e:	f000 facd 	bl	14d3c <llcp_tx_alloc_peek>
   147a2:	b980      	cbnz	r0, 147c6 <rp_enc_complete.isra.0+0x66>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_RSP;
   147a4:	2309      	movs	r3, #9
   147a6:	72a3      	strb	r3, [r4, #10]
}
   147a8:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   147aa:	4a1e      	ldr	r2, [pc, #120]	; (14824 <rp_enc_complete.isra.0+0xc4>)
   147ac:	491e      	ldr	r1, [pc, #120]	; (14828 <rp_enc_complete.isra.0+0xc8>)
   147ae:	481f      	ldr	r0, [pc, #124]	; (1482c <rp_enc_complete.isra.0+0xcc>)
   147b0:	f240 331b 	movw	r3, #795	; 0x31b
   147b4:	f00c ffca 	bl	2174c <assert_print>
   147b8:	4040      	eors	r0, r0
   147ba:	f380 8811 	msr	BASEPRI, r0
   147be:	f04f 0003 	mov.w	r0, #3
   147c2:	df02      	svc	2
   147c4:	e7e5      	b.n	14792 <rp_enc_complete.isra.0+0x32>
	} else {
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_RSP);
   147c6:	2206      	movs	r2, #6
   147c8:	4621      	mov	r1, r4
   147ca:	4628      	mov	r0, r5
   147cc:	f7ff fed4 	bl	14578 <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
   147d0:	4628      	mov	r0, r5
   147d2:	f003 f99b 	bl	17b0c <llcp_rr_complete>
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   147d6:	2300      	movs	r3, #0
   147d8:	72a3      	strb	r3, [r4, #10]

		/* Resume Tx data */
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   147da:	2101      	movs	r1, #1
   147dc:	4628      	mov	r0, r5
   147de:	f000 faeb 	bl	14db8 <llcp_tx_resume_data>
		/* Resume Rx data */
		ull_conn_resume_rx_data(conn);
   147e2:	4628      	mov	r0, r5
   147e4:	f7ff f80a 	bl	137fc <ull_conn_resume_rx_data>

		/* Resume possibly paused local procedure */
		llcp_lr_resume(conn);
   147e8:	4628      	mov	r0, r5
   147ea:	f001 fd63 	bl	162b4 <llcp_lr_resume>

		/* Tx Encryption enabled */
		conn->lll.enc_tx = 1U;
   147ee:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   147f2:	f043 0310 	orr.w	r3, r3, #16
   147f6:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
}
   147fa:	bd70      	pop	{r4, r5, r6, pc}
		llcp_pdu_encode_start_enc_rsp(pdu);
   147fc:	f106 001c 	add.w	r0, r6, #28
   14800:	f001 ffa0 	bl	16744 <llcp_pdu_encode_start_enc_rsp>
   14804:	e7c5      	b.n	14792 <rp_enc_complete.isra.0+0x32>
	LL_ASSERT(ntf);
   14806:	4a07      	ldr	r2, [pc, #28]	; (14824 <rp_enc_complete.isra.0+0xc4>)
   14808:	4909      	ldr	r1, [pc, #36]	; (14830 <rp_enc_complete.isra.0+0xd0>)
   1480a:	4808      	ldr	r0, [pc, #32]	; (1482c <rp_enc_complete.isra.0+0xcc>)
   1480c:	f44f 7343 	mov.w	r3, #780	; 0x30c
   14810:	f00c ff9c 	bl	2174c <assert_print>
   14814:	4040      	eors	r0, r0
   14816:	f380 8811 	msr	BASEPRI, r0
   1481a:	f04f 0003 	mov.w	r0, #3
   1481e:	df02      	svc	2
   14820:	e7ac      	b.n	1477c <rp_enc_complete.isra.0+0x1c>
   14822:	bf00      	nop
   14824:	00028f5c 	.word	0x00028f5c
   14828:	000286fc 	.word	0x000286fc
   1482c:	0002866c 	.word	0x0002866c
   14830:	00028f40 	.word	0x00028f40

00014834 <rp_enc_execute_fsm>:
		break;
	}
}

static void rp_enc_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
   14834:	b570      	push	{r4, r5, r6, lr}
   14836:	460c      	mov	r4, r1
	switch (ctx->state) {
   14838:	7a89      	ldrb	r1, [r1, #10]
{
   1483a:	b082      	sub	sp, #8
   1483c:	4606      	mov	r6, r0
   1483e:	4615      	mov	r5, r2
	switch (ctx->state) {
   14840:	290d      	cmp	r1, #13
   14842:	f200 80fa 	bhi.w	14a3a <rp_enc_execute_fsm+0x206>
   14846:	e8df f001 	tbb	[pc, r1]
   1484a:	1713      	.short	0x1713
   1484c:	3e251b32 	.word	0x3e251b32
   14850:	58554c49 	.word	0x58554c49
   14854:	07786762 	.word	0x07786762
	switch (evt) {
   14858:	2d08      	cmp	r5, #8
   1485a:	d10f      	bne.n	1487c <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_ENC_REQ;
   1485c:	f240 3301 	movw	r3, #769	; 0x301
   14860:	8163      	strh	r3, [r4, #10]
		conn->lll.enc_tx = 0U;
   14862:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
   14866:	f36f 1304 	bfc	r3, #4, #1
   1486a:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
		break;
   1486e:	e005      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   14870:	b925      	cbnz	r5, 1487c <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_ENC_REQ;
   14872:	2301      	movs	r3, #1
   14874:	72a3      	strb	r3, [r4, #10]
		break;
   14876:	e001      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   14878:	2d01      	cmp	r5, #1
   1487a:	d07f      	beq.n	1497c <rp_enc_execute_fsm+0x148>
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   1487c:	b002      	add	sp, #8
   1487e:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   14880:	2d00      	cmp	r5, #0
   14882:	d1fb      	bne.n	1487c <rp_enc_execute_fsm+0x48>
	if (!llcp_ntf_alloc_is_available()) {
   14884:	f000 fa6e 	bl	14d64 <llcp_ntf_alloc_is_available>
   14888:	2800      	cmp	r0, #0
   1488a:	f040 80b5 	bne.w	149f8 <rp_enc_execute_fsm+0x1c4>
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
   1488e:	2303      	movs	r3, #3
   14890:	72a3      	strb	r3, [r4, #10]
   14892:	e7f3      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   14894:	2d03      	cmp	r5, #3
   14896:	d018      	beq.n	148ca <rp_enc_execute_fsm+0x96>
   14898:	2d04      	cmp	r5, #4
   1489a:	d1ef      	bne.n	1487c <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   1489c:	4621      	mov	r1, r4
   1489e:	4630      	mov	r0, r6
   148a0:	f000 fa4c 	bl	14d3c <llcp_tx_alloc_peek>
   148a4:	2800      	cmp	r0, #0
   148a6:	d152      	bne.n	1494e <rp_enc_execute_fsm+0x11a>
		ctx->state = RP_ENC_STATE_WAIT_TX_REJECT_IND;
   148a8:	2306      	movs	r3, #6
   148aa:	72a3      	strb	r3, [r4, #10]
   148ac:	e7e6      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   148ae:	2d00      	cmp	r5, #0
   148b0:	d1e4      	bne.n	1487c <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   148b2:	4621      	mov	r1, r4
   148b4:	4630      	mov	r0, r6
   148b6:	f000 fa41 	bl	14d3c <llcp_tx_alloc_peek>
   148ba:	2800      	cmp	r0, #0
   148bc:	f040 8095 	bne.w	149ea <rp_enc_execute_fsm+0x1b6>
		ctx->state = RP_ENC_STATE_WAIT_TX_ENC_RSP;
   148c0:	2302      	movs	r3, #2
   148c2:	72a3      	strb	r3, [r4, #10]
   148c4:	e7da      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   148c6:	2d00      	cmp	r5, #0
   148c8:	d1d8      	bne.n	1487c <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   148ca:	4621      	mov	r1, r4
   148cc:	4630      	mov	r0, r6
   148ce:	f000 fa35 	bl	14d3c <llcp_tx_alloc_peek>
   148d2:	2800      	cmp	r0, #0
   148d4:	d134      	bne.n	14940 <rp_enc_execute_fsm+0x10c>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_REQ;
   148d6:	2305      	movs	r3, #5
   148d8:	72a3      	strb	r3, [r4, #10]
   148da:	e7cf      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   148dc:	2d00      	cmp	r5, #0
   148de:	d1cd      	bne.n	1487c <rp_enc_execute_fsm+0x48>
   148e0:	e7dc      	b.n	1489c <rp_enc_execute_fsm+0x68>
	switch (evt) {
   148e2:	2d02      	cmp	r5, #2
   148e4:	d1ca      	bne.n	1487c <rp_enc_execute_fsm+0x48>
		rp_enc_complete(conn, ctx, evt, param);
   148e6:	4621      	mov	r1, r4
   148e8:	4630      	mov	r0, r6
}
   148ea:	b002      	add	sp, #8
   148ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_enc_complete(conn, ctx, evt, param);
   148f0:	f7ff bf36 	b.w	14760 <rp_enc_complete.isra.0>
	switch (evt) {
   148f4:	2d00      	cmp	r5, #0
   148f6:	d1c1      	bne.n	1487c <rp_enc_execute_fsm+0x48>
   148f8:	e7f5      	b.n	148e6 <rp_enc_execute_fsm+0xb2>
	switch (evt) {
   148fa:	2d00      	cmp	r5, #0
   148fc:	d1be      	bne.n	1487c <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   148fe:	4621      	mov	r1, r4
   14900:	f000 fa1c 	bl	14d3c <llcp_tx_alloc_peek>
   14904:	2800      	cmp	r0, #0
   14906:	d17e      	bne.n	14a06 <rp_enc_execute_fsm+0x1d2>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_RSP;
   14908:	2309      	movs	r3, #9
   1490a:	72a3      	strb	r3, [r4, #10]
   1490c:	e7b6      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   1490e:	2d00      	cmp	r5, #0
   14910:	d1b4      	bne.n	1487c <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_PAUSE_ENC_REQ;
   14912:	230b      	movs	r3, #11
   14914:	72a3      	strb	r3, [r4, #10]
		break;
   14916:	e7b1      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   14918:	2d07      	cmp	r5, #7
   1491a:	d1af      	bne.n	1487c <rp_enc_execute_fsm+0x48>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   1491c:	2101      	movs	r1, #1
   1491e:	f000 fa37 	bl	14d90 <llcp_tx_pause_data>
		ull_conn_pause_rx_data(conn);
   14922:	4630      	mov	r0, r6
   14924:	f7fe ff62 	bl	137ec <ull_conn_pause_rx_data>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   14928:	4621      	mov	r1, r4
   1492a:	4630      	mov	r0, r6
   1492c:	f000 fa06 	bl	14d3c <llcp_tx_alloc_peek>
   14930:	2800      	cmp	r0, #0
   14932:	d14b      	bne.n	149cc <rp_enc_execute_fsm+0x198>
		ctx->state = RP_ENC_STATE_WAIT_TX_PAUSE_ENC_RSP;
   14934:	230c      	movs	r3, #12
   14936:	72a3      	strb	r3, [r4, #10]
   14938:	e7a0      	b.n	1487c <rp_enc_execute_fsm+0x48>
	switch (evt) {
   1493a:	2d00      	cmp	r5, #0
   1493c:	d19e      	bne.n	1487c <rp_enc_execute_fsm+0x48>
   1493e:	e7f3      	b.n	14928 <rp_enc_execute_fsm+0xf4>
   14940:	4621      	mov	r1, r4
   14942:	4630      	mov	r0, r6
}
   14944:	b002      	add	sp, #8
   14946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1494a:	f7ff be9d 	b.w	14688 <rp_enc_send_start_enc_req.part.0>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_IND);
   1494e:	220d      	movs	r2, #13
   14950:	4621      	mov	r1, r4
   14952:	4630      	mov	r0, r6
   14954:	f7ff fe10 	bl	14578 <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
   14958:	4630      	mov	r0, r6
   1495a:	f003 f8d7 	bl	17b0c <llcp_rr_complete>
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   1495e:	2300      	movs	r3, #0
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   14960:	2101      	movs	r1, #1
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   14962:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   14964:	4630      	mov	r0, r6
   14966:	f000 fa27 	bl	14db8 <llcp_tx_resume_data>
		ull_conn_resume_rx_data(conn);
   1496a:	4630      	mov	r0, r6
   1496c:	f7fe ff46 	bl	137fc <ull_conn_resume_rx_data>
		llcp_lr_resume(conn);
   14970:	4630      	mov	r0, r6
}
   14972:	b002      	add	sp, #8
   14974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_resume(conn);
   14978:	f001 bc9c 	b.w	162b4 <llcp_lr_resume>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   1497c:	4629      	mov	r1, r5
   1497e:	9301      	str	r3, [sp, #4]
   14980:	f000 fa06 	bl	14d90 <llcp_tx_pause_data>
		ull_conn_pause_rx_data(conn);
   14984:	4630      	mov	r0, r6
   14986:	f7fe ff31 	bl	137ec <ull_conn_pause_rx_data>
		llcp_lr_pause(conn);
   1498a:	4630      	mov	r0, r6
   1498c:	f001 fc8e 	bl	162ac <llcp_lr_pause>
	memcpy(ctx->data.enc.rand, pdu->llctrl.enc_req.rand, sizeof(ctx->data.enc.rand));
   14990:	9b01      	ldr	r3, [sp, #4]
   14992:	2208      	movs	r2, #8
   14994:	1d19      	adds	r1, r3, #4
   14996:	f104 001d 	add.w	r0, r4, #29
   1499a:	f00f f937 	bl	23c0c <memcpy>
	ctx->data.enc.ediv[0] = pdu->llctrl.enc_req.ediv[0];
   1499e:	9b01      	ldr	r3, [sp, #4]
   149a0:	7b1a      	ldrb	r2, [r3, #12]
   149a2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	ctx->data.enc.ediv[1] = pdu->llctrl.enc_req.ediv[1];
   149a6:	7b59      	ldrb	r1, [r3, #13]
   149a8:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	memcpy(&ctx->data.enc.skdm, pdu->llctrl.enc_req.skdm, sizeof(ctx->data.enc.skdm));
   149ac:	2208      	movs	r2, #8
   149ae:	f103 010e 	add.w	r1, r3, #14
   149b2:	f104 0037 	add.w	r0, r4, #55	; 0x37
   149b6:	f00f f929 	bl	23c0c <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[0], pdu->llctrl.enc_req.ivm, sizeof(pdu->llctrl.enc_req.ivm));
   149ba:	9b01      	ldr	r3, [sp, #4]
   149bc:	2204      	movs	r2, #4
   149be:	f103 0116 	add.w	r1, r3, #22
   149c2:	f106 00a8 	add.w	r0, r6, #168	; 0xa8
   149c6:	f00f f921 	bl	23c0c <memcpy>
   149ca:	e772      	b.n	148b2 <rp_enc_execute_fsm+0x7e>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP);
   149cc:	220b      	movs	r2, #11
   149ce:	4621      	mov	r1, r4
   149d0:	4630      	mov	r0, r6
   149d2:	f7ff fdd1 	bl	14578 <llcp_rp_enc_tx>
		ctx->state = RP_ENC_STATE_WAIT_RX_PAUSE_ENC_RSP;
   149d6:	f640 330d 	movw	r3, #2829	; 0xb0d
   149da:	8163      	strh	r3, [r4, #10]
		conn->lll.enc_rx = 0U;
   149dc:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
   149e0:	f36f 03c3 	bfc	r3, #3, #1
   149e4:	f886 308e 	strb.w	r3, [r6, #142]	; 0x8e
}
   149e8:	e748      	b.n	1487c <rp_enc_execute_fsm+0x48>
   149ea:	4621      	mov	r1, r4
   149ec:	4630      	mov	r0, r6
}
   149ee:	b002      	add	sp, #8
   149f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   149f4:	f7ff be92 	b.w	1471c <rp_enc_send_enc_rsp.part.0.isra.0>
		rp_enc_ntf_ltk(conn, ctx);
   149f8:	4621      	mov	r1, r4
   149fa:	4630      	mov	r0, r6
   149fc:	f7ff fe1a 	bl	14634 <rp_enc_ntf_ltk>
		ctx->state = RP_ENC_STATE_WAIT_LTK_REPLY;
   14a00:	2304      	movs	r3, #4
   14a02:	72a3      	strb	r3, [r4, #10]
}
   14a04:	e73a      	b.n	1487c <rp_enc_execute_fsm+0x48>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_RSP);
   14a06:	2206      	movs	r2, #6
   14a08:	4621      	mov	r1, r4
   14a0a:	4630      	mov	r0, r6
   14a0c:	f7ff fdb4 	bl	14578 <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
   14a10:	4630      	mov	r0, r6
   14a12:	f003 f87b 	bl	17b0c <llcp_rr_complete>
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   14a16:	2101      	movs	r1, #1
   14a18:	4630      	mov	r0, r6
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   14a1a:	72a5      	strb	r5, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   14a1c:	f000 f9cc 	bl	14db8 <llcp_tx_resume_data>
		ull_conn_resume_rx_data(conn);
   14a20:	4630      	mov	r0, r6
   14a22:	f7fe feeb 	bl	137fc <ull_conn_resume_rx_data>
		llcp_lr_resume(conn);
   14a26:	4630      	mov	r0, r6
   14a28:	f001 fc44 	bl	162b4 <llcp_lr_resume>
		conn->lll.enc_tx = 1U;
   14a2c:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
   14a30:	f043 0310 	orr.w	r3, r3, #16
   14a34:	f886 308e 	strb.w	r3, [r6, #142]	; 0x8e
}
   14a38:	e720      	b.n	1487c <rp_enc_execute_fsm+0x48>
		LL_ASSERT(0);
   14a3a:	4a07      	ldr	r2, [pc, #28]	; (14a58 <rp_enc_execute_fsm+0x224>)
   14a3c:	4907      	ldr	r1, [pc, #28]	; (14a5c <rp_enc_execute_fsm+0x228>)
   14a3e:	4808      	ldr	r0, [pc, #32]	; (14a60 <rp_enc_execute_fsm+0x22c>)
   14a40:	f240 43b1 	movw	r3, #1201	; 0x4b1
   14a44:	f00c fe82 	bl	2174c <assert_print>
   14a48:	4040      	eors	r0, r0
   14a4a:	f380 8811 	msr	BASEPRI, r0
   14a4e:	f04f 0003 	mov.w	r0, #3
   14a52:	df02      	svc	2
}
   14a54:	e712      	b.n	1487c <rp_enc_execute_fsm+0x48>
   14a56:	bf00      	nop
   14a58:	00028f5c 	.word	0x00028f5c
   14a5c:	000286fc 	.word	0x000286fc
   14a60:	0002866c 	.word	0x0002866c

00014a64 <llcp_rp_enc_rx>:

void llcp_rp_enc_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   14a64:	f892 c01f 	ldrb.w	ip, [r2, #31]
   14a68:	f1ac 0c03 	sub.w	ip, ip, #3
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   14a6c:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   14a70:	f1bc 0f08 	cmp.w	ip, #8
   14a74:	d806      	bhi.n	14a84 <llcp_rp_enc_rx+0x20>
   14a76:	e8df f00c 	tbb	[pc, ip]
   14a7a:	0512      	.short	0x0512
   14a7c:	05050f05 	.word	0x05050f05
   14a80:	0c05      	.short	0x0c05
   14a82:	09          	.byte	0x09
   14a83:	00          	.byte	0x00
		 * immediately exit the Connection state, and shall transition to the Standby state.
		 * The Host shall be notified that the link has been disconnected with the error
		 * code Connection Terminated Due to MIC Failure (0x3D).
		 */

		conn->llcp_terminate.reason_final = BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;
   14a84:	233d      	movs	r3, #61	; 0x3d
   14a86:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	}
}
   14a8a:	4770      	bx	lr
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_PAUSE_ENC_RSP, pdu);
   14a8c:	2208      	movs	r2, #8
   14a8e:	f7ff bed1 	b.w	14834 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_PAUSE_ENC_REQ, pdu);
   14a92:	2207      	movs	r2, #7
   14a94:	f7ff bece 	b.w	14834 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_START_ENC_RSP, pdu);
   14a98:	2202      	movs	r2, #2
   14a9a:	f7ff becb 	b.w	14834 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_ENC_REQ, pdu);
   14a9e:	2201      	movs	r2, #1
   14aa0:	f7ff bec8 	b.w	14834 <rp_enc_execute_fsm>

00014aa4 <llcp_rp_enc_init_proc>:

void llcp_rp_enc_init_proc(struct proc_ctx *ctx)
{
   14aa4:	b508      	push	{r3, lr}
	switch (ctx->proc) {
   14aa6:	7a03      	ldrb	r3, [r0, #8]
   14aa8:	2b05      	cmp	r3, #5
   14aaa:	d00f      	beq.n	14acc <llcp_rp_enc_init_proc+0x28>
   14aac:	2b06      	cmp	r3, #6
   14aae:	d010      	beq.n	14ad2 <llcp_rp_enc_init_proc+0x2e>
		break;
	case PROC_ENCRYPTION_PAUSE:
		ctx->state = RP_ENC_STATE_ENCRYPTED;
		break;
	default:
		LL_ASSERT(0);
   14ab0:	4a09      	ldr	r2, [pc, #36]	; (14ad8 <llcp_rp_enc_init_proc+0x34>)
   14ab2:	490a      	ldr	r1, [pc, #40]	; (14adc <llcp_rp_enc_init_proc+0x38>)
   14ab4:	480a      	ldr	r0, [pc, #40]	; (14ae0 <llcp_rp_enc_init_proc+0x3c>)
   14ab6:	f240 43e6 	movw	r3, #1254	; 0x4e6
   14aba:	f00c fe47 	bl	2174c <assert_print>
   14abe:	4040      	eors	r0, r0
   14ac0:	f380 8811 	msr	BASEPRI, r0
   14ac4:	f04f 0003 	mov.w	r0, #3
   14ac8:	df02      	svc	2
	}
}
   14aca:	bd08      	pop	{r3, pc}
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   14acc:	2300      	movs	r3, #0
   14ace:	7283      	strb	r3, [r0, #10]
}
   14ad0:	bd08      	pop	{r3, pc}
		ctx->state = RP_ENC_STATE_ENCRYPTED;
   14ad2:	230a      	movs	r3, #10
   14ad4:	7283      	strb	r3, [r0, #10]
}
   14ad6:	bd08      	pop	{r3, pc}
   14ad8:	00028f5c 	.word	0x00028f5c
   14adc:	000286fc 	.word	0x000286fc
   14ae0:	0002866c 	.word	0x0002866c

00014ae4 <llcp_rp_enc_ltk_req_reply>:

void llcp_rp_enc_ltk_req_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_LTK_REQ_REPLY, NULL);
   14ae4:	2300      	movs	r3, #0
   14ae6:	2203      	movs	r2, #3
   14ae8:	f7ff bea4 	b.w	14834 <rp_enc_execute_fsm>

00014aec <llcp_rp_enc_ltk_req_neg_reply>:
}

void llcp_rp_enc_ltk_req_neg_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_LTK_REQ_NEG_REPLY, NULL);
   14aec:	2300      	movs	r3, #0
   14aee:	2204      	movs	r2, #4
   14af0:	f7ff bea0 	b.w	14834 <rp_enc_execute_fsm>

00014af4 <llcp_rp_enc_ltk_req_reply_allowed>:
}

bool llcp_rp_enc_ltk_req_reply_allowed(struct ll_conn *conn, struct proc_ctx *ctx)
{
	return (ctx->state == RP_ENC_STATE_WAIT_LTK_REPLY);
   14af4:	7a88      	ldrb	r0, [r1, #10]
}
   14af6:	f1a0 0004 	sub.w	r0, r0, #4
   14afa:	fab0 f080 	clz	r0, r0
   14afe:	0940      	lsrs	r0, r0, #5
   14b00:	4770      	bx	lr
   14b02:	bf00      	nop

00014b04 <llcp_rp_enc_run>:

void llcp_rp_enc_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   14b04:	4613      	mov	r3, r2
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_RUN, param);
   14b06:	2200      	movs	r2, #0
   14b08:	f7ff be94 	b.w	14834 <rp_enc_execute_fsm>

00014b0c <ull_tx_q_init>:

#include "ull_tx_queue.h"

void ull_tx_q_init(struct ull_tx_q *queue)
{
	queue->pause_data = 0U;
   14b0c:	2300      	movs	r3, #0
   14b0e:	7003      	strb	r3, [r0, #0]
	list->head = NULL;
   14b10:	6043      	str	r3, [r0, #4]
   14b12:	6083      	str	r3, [r0, #8]
   14b14:	60c3      	str	r3, [r0, #12]
   14b16:	6103      	str	r3, [r0, #16]
	sys_slist_init(&queue->tx_list);
	sys_slist_init(&queue->data_list);
}
   14b18:	4770      	bx	lr
   14b1a:	bf00      	nop

00014b1c <ull_tx_q_pause_data>:

void ull_tx_q_pause_data(struct ull_tx_q *queue)
{
	queue->pause_data++;
   14b1c:	7803      	ldrb	r3, [r0, #0]
   14b1e:	3301      	adds	r3, #1
   14b20:	7003      	strb	r3, [r0, #0]
}
   14b22:	4770      	bx	lr

00014b24 <ull_tx_q_resume_data>:

void ull_tx_q_resume_data(struct ull_tx_q *queue)
{
	if (queue->pause_data > 0) {
   14b24:	7803      	ldrb	r3, [r0, #0]
   14b26:	b95b      	cbnz	r3, 14b40 <ull_tx_q_resume_data+0x1c>
	return list->head;
   14b28:	68c3      	ldr	r3, [r0, #12]
		queue->pause_data--;
	}

	/* move all paused data to the tail of tx list, only if not empty and no longer paused */
	if (!queue->pause_data &&  !sys_slist_is_empty(&queue->data_list)) {
   14b2a:	b17b      	cbz	r3, 14b4c <ull_tx_q_resume_data+0x28>
	return list->tail;
   14b2c:	6902      	ldr	r2, [r0, #16]
Z_GENLIST_APPEND_LIST(slist, snode)
   14b2e:	b11a      	cbz	r2, 14b38 <ull_tx_q_resume_data+0x14>
	return list->tail;
   14b30:	6881      	ldr	r1, [r0, #8]
Z_GENLIST_APPEND_LIST(slist, snode)
   14b32:	b161      	cbz	r1, 14b4e <ull_tx_q_resume_data+0x2a>
	parent->next = child;
   14b34:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14b36:	6082      	str	r2, [r0, #8]
	list->head = NULL;
   14b38:	2300      	movs	r3, #0
   14b3a:	60c3      	str	r3, [r0, #12]
   14b3c:	6103      	str	r3, [r0, #16]
		sys_slist_merge_slist(&queue->tx_list, &queue->data_list);
	}
}
   14b3e:	4770      	bx	lr
		queue->pause_data--;
   14b40:	3b01      	subs	r3, #1
   14b42:	b2db      	uxtb	r3, r3
   14b44:	7003      	strb	r3, [r0, #0]
	if (!queue->pause_data &&  !sys_slist_is_empty(&queue->data_list)) {
   14b46:	2b00      	cmp	r3, #0
   14b48:	d0ee      	beq.n	14b28 <ull_tx_q_resume_data+0x4>
}
   14b4a:	4770      	bx	lr
   14b4c:	4770      	bx	lr
	list->head = node;
   14b4e:	6043      	str	r3, [r0, #4]
}
   14b50:	e7f1      	b.n	14b36 <ull_tx_q_resume_data+0x12>
   14b52:	bf00      	nop

00014b54 <ull_tx_q_enqueue_data>:

void ull_tx_q_enqueue_data(struct ull_tx_q *queue, struct node_tx *tx)
{
	sys_slist_t *list;

	if (queue->pause_data) {
   14b54:	7803      	ldrb	r3, [r0, #0]
   14b56:	b13b      	cbz	r3, 14b68 <ull_tx_q_enqueue_data+0x14>
	parent->next = child;
   14b58:	2300      	movs	r3, #0
		/* enqueue data pdu into paused data wait list */
		list = &queue->data_list;
   14b5a:	300c      	adds	r0, #12
   14b5c:	600b      	str	r3, [r1, #0]
	return list->tail;
   14b5e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   14b60:	b143      	cbz	r3, 14b74 <ull_tx_q_enqueue_data+0x20>
	parent->next = child;
   14b62:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14b64:	6041      	str	r1, [r0, #4]
		/* enqueue data pdu into tx list */
		list = &queue->tx_list;
	}

	sys_slist_append(list, (sys_snode_t *)tx);
}
   14b66:	4770      	bx	lr
	parent->next = child;
   14b68:	2300      	movs	r3, #0
		list = &queue->tx_list;
   14b6a:	3004      	adds	r0, #4
   14b6c:	600b      	str	r3, [r1, #0]
	return list->tail;
   14b6e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   14b70:	2b00      	cmp	r3, #0
   14b72:	d1f6      	bne.n	14b62 <ull_tx_q_enqueue_data+0xe>
	list->head = node;
   14b74:	6001      	str	r1, [r0, #0]
   14b76:	6041      	str	r1, [r0, #4]
}
   14b78:	4770      	bx	lr
   14b7a:	bf00      	nop

00014b7c <ull_tx_q_enqueue_ctrl>:
	parent->next = child;
   14b7c:	2300      	movs	r3, #0
   14b7e:	600b      	str	r3, [r1, #0]
	return list->tail;
   14b80:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   14b82:	b113      	cbz	r3, 14b8a <ull_tx_q_enqueue_ctrl+0xe>
	parent->next = child;
   14b84:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14b86:	6081      	str	r1, [r0, #8]

void ull_tx_q_enqueue_ctrl(struct ull_tx_q *queue, struct node_tx *tx)
{
	/* enqueue ctrl pdu into tx list */
	sys_slist_append(&queue->tx_list, (sys_snode_t *)tx);
}
   14b88:	4770      	bx	lr
	list->head = node;
   14b8a:	6041      	str	r1, [r0, #4]
   14b8c:	6081      	str	r1, [r0, #8]
}
   14b8e:	4770      	bx	lr

00014b90 <ull_tx_q_peek>:
	struct node_tx *tx;

	tx = (struct node_tx *)sys_slist_peek_head(&queue->tx_list);

	return tx;
}
   14b90:	6840      	ldr	r0, [r0, #4]
   14b92:	4770      	bx	lr

00014b94 <ull_tx_q_dequeue>:

struct node_tx *ull_tx_q_dequeue(struct ull_tx_q *queue)
{
   14b94:	4603      	mov	r3, r0
	return list->head;
   14b96:	6840      	ldr	r0, [r0, #4]
Z_GENLIST_GET(slist, snode)
   14b98:	b128      	cbz	r0, 14ba6 <ull_tx_q_dequeue+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14b9a:	6899      	ldr	r1, [r3, #8]
	return node->next;
   14b9c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   14b9e:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14ba0:	4288      	cmp	r0, r1
	list->tail = node;
   14ba2:	bf08      	it	eq
   14ba4:	609a      	streq	r2, [r3, #8]
	struct node_tx *tx;

	tx = (struct node_tx *)sys_slist_get(&queue->tx_list);

	return tx;
}
   14ba6:	4770      	bx	lr

00014ba8 <pdu_validate_conn_update_ind>:
#define VALIDATE_PDU_LEN(pdu, type) (pdu->len == PDU_DATA_LLCTRL_LEN(type))

#if defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_conn_update_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, conn_update_ind);
   14ba8:	7840      	ldrb	r0, [r0, #1]
}
   14baa:	f1a0 000c 	sub.w	r0, r0, #12
   14bae:	fab0 f080 	clz	r0, r0
   14bb2:	0940      	lsrs	r0, r0, #5
   14bb4:	4770      	bx	lr
   14bb6:	bf00      	nop

00014bb8 <pdu_validate_chan_map_ind>:

static bool pdu_validate_chan_map_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, chan_map_ind);
   14bb8:	7840      	ldrb	r0, [r0, #1]
}
   14bba:	f1a0 0008 	sub.w	r0, r0, #8
   14bbe:	fab0 f080 	clz	r0, r0
   14bc2:	0940      	lsrs	r0, r0, #5
   14bc4:	4770      	bx	lr
   14bc6:	bf00      	nop

00014bc8 <pdu_validate_terminate_ind>:
#endif /* CONFIG_BT_PERIPHERAL */

static bool pdu_validate_terminate_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, terminate_ind);
   14bc8:	7840      	ldrb	r0, [r0, #1]
}
   14bca:	f1a0 0002 	sub.w	r0, r0, #2
   14bce:	fab0 f080 	clz	r0, r0
   14bd2:	0940      	lsrs	r0, r0, #5
   14bd4:	4770      	bx	lr
   14bd6:	bf00      	nop

00014bd8 <pdu_validate_enc_req>:

#if defined(CONFIG_BT_CTLR_LE_ENC) && defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_enc_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, enc_req);
   14bd8:	7840      	ldrb	r0, [r0, #1]
}
   14bda:	f1a0 0017 	sub.w	r0, r0, #23
   14bde:	fab0 f080 	clz	r0, r0
   14be2:	0940      	lsrs	r0, r0, #5
   14be4:	4770      	bx	lr
   14be6:	bf00      	nop

00014be8 <pdu_validate_start_enc_rsp>:
#endif /* CONFIG_BT_CTLR_LE_ENC && CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_CTLR_LE_ENC) && defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_start_enc_rsp(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, start_enc_rsp);
   14be8:	7840      	ldrb	r0, [r0, #1]
}
   14bea:	f1a0 0001 	sub.w	r0, r0, #1
   14bee:	fab0 f080 	clz	r0, r0
   14bf2:	0940      	lsrs	r0, r0, #5
   14bf4:	4770      	bx	lr
   14bf6:	bf00      	nop

00014bf8 <pdu_validate_feature_req>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_feature_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, feature_req);
   14bf8:	7840      	ldrb	r0, [r0, #1]
}
   14bfa:	f1a0 0009 	sub.w	r0, r0, #9
   14bfe:	fab0 f080 	clz	r0, r0
   14c02:	0940      	lsrs	r0, r0, #5
   14c04:	4770      	bx	lr
   14c06:	bf00      	nop

00014c08 <pdu_validate_version_ind>:
}
#endif

static bool pdu_validate_version_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, version_ind);
   14c08:	7840      	ldrb	r0, [r0, #1]
}
   14c0a:	f1a0 0006 	sub.w	r0, r0, #6
   14c0e:	fab0 f080 	clz	r0, r0
   14c12:	0940      	lsrs	r0, r0, #5
   14c14:	4770      	bx	lr
   14c16:	bf00      	nop

00014c18 <pdu_validate_conn_param_req>:
#endif /* CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG && CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static bool pdu_validate_conn_param_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, conn_param_req);
   14c18:	7840      	ldrb	r0, [r0, #1]
}
   14c1a:	f1a0 0018 	sub.w	r0, r0, #24
   14c1e:	fab0 f080 	clz	r0, r0
   14c22:	0940      	lsrs	r0, r0, #5
   14c24:	4770      	bx	lr
   14c26:	bf00      	nop

00014c28 <pdu_validate_reject_ext_ind>:
	return VALIDATE_PDU_LEN(pdu, conn_param_rsp);
}

static bool pdu_validate_reject_ext_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, reject_ext_ind);
   14c28:	7840      	ldrb	r0, [r0, #1]
}
   14c2a:	f1a0 0003 	sub.w	r0, r0, #3
   14c2e:	fab0 f080 	clz	r0, r0
   14c32:	0940      	lsrs	r0, r0, #5
   14c34:	4770      	bx	lr
   14c36:	bf00      	nop

00014c38 <pdu_validate_phy_upd_ind>:
	return VALIDATE_PDU_LEN(pdu, phy_rsp);
}

static bool pdu_validate_phy_upd_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, phy_upd_ind);
   14c38:	7840      	ldrb	r0, [r0, #1]
}
   14c3a:	f1a0 0005 	sub.w	r0, r0, #5
   14c3e:	fab0 f080 	clz	r0, r0
   14c42:	0940      	lsrs	r0, r0, #5
   14c44:	4770      	bx	lr
   14c46:	bf00      	nop

00014c48 <pdu_validate_clock_accuracy_rsp>:
{
	return VALIDATE_PDU_LEN(pdu, clock_accuracy_req);
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static bool pdu_validate_clock_accuracy_rsp(struct pdu_data *pdu)
   14c48:	7840      	ldrb	r0, [r0, #1]
   14c4a:	f1a0 0002 	sub.w	r0, r0, #2
   14c4e:	fab0 f080 	clz	r0, r0
   14c52:	0940      	lsrs	r0, r0, #5
   14c54:	4770      	bx	lr
   14c56:	bf00      	nop

00014c58 <pdu_validate_unknown_rsp>:
static bool pdu_validate_unknown_rsp(struct pdu_data *pdu)
   14c58:	7840      	ldrb	r0, [r0, #1]
   14c5a:	f1a0 0002 	sub.w	r0, r0, #2
   14c5e:	fab0 f080 	clz	r0, r0
   14c62:	0940      	lsrs	r0, r0, #5
   14c64:	4770      	bx	lr
   14c66:	bf00      	nop

00014c68 <pdu_validate_pause_enc_req>:
static bool pdu_validate_pause_enc_req(struct pdu_data *pdu)
   14c68:	7840      	ldrb	r0, [r0, #1]
   14c6a:	f1a0 0001 	sub.w	r0, r0, #1
   14c6e:	fab0 f080 	clz	r0, r0
   14c72:	0940      	lsrs	r0, r0, #5
   14c74:	4770      	bx	lr
   14c76:	bf00      	nop

00014c78 <pdu_validate_reject_ind>:
static bool pdu_validate_reject_ind(struct pdu_data *pdu)
   14c78:	7840      	ldrb	r0, [r0, #1]
   14c7a:	f1a0 0002 	sub.w	r0, r0, #2
   14c7e:	fab0 f080 	clz	r0, r0
   14c82:	0940      	lsrs	r0, r0, #5
   14c84:	4770      	bx	lr
   14c86:	bf00      	nop

00014c88 <pdu_validate_conn_param_rsp>:
static bool pdu_validate_conn_param_rsp(struct pdu_data *pdu)
   14c88:	7840      	ldrb	r0, [r0, #1]
   14c8a:	f1a0 0018 	sub.w	r0, r0, #24
   14c8e:	fab0 f080 	clz	r0, r0
   14c92:	0940      	lsrs	r0, r0, #5
   14c94:	4770      	bx	lr
   14c96:	bf00      	nop

00014c98 <pdu_validate_ping_req>:
static bool pdu_validate_ping_req(struct pdu_data *pdu)
   14c98:	7840      	ldrb	r0, [r0, #1]
   14c9a:	f1a0 0001 	sub.w	r0, r0, #1
   14c9e:	fab0 f080 	clz	r0, r0
   14ca2:	0940      	lsrs	r0, r0, #5
   14ca4:	4770      	bx	lr
   14ca6:	bf00      	nop

00014ca8 <pdu_validate_ping_rsp>:
static bool pdu_validate_ping_rsp(struct pdu_data *pdu)
   14ca8:	7840      	ldrb	r0, [r0, #1]
   14caa:	f1a0 0001 	sub.w	r0, r0, #1
   14cae:	fab0 f080 	clz	r0, r0
   14cb2:	0940      	lsrs	r0, r0, #5
   14cb4:	4770      	bx	lr
   14cb6:	bf00      	nop

00014cb8 <pdu_validate_length_req>:
static bool pdu_validate_length_req(struct pdu_data *pdu)
   14cb8:	7840      	ldrb	r0, [r0, #1]
   14cba:	f1a0 0009 	sub.w	r0, r0, #9
   14cbe:	fab0 f080 	clz	r0, r0
   14cc2:	0940      	lsrs	r0, r0, #5
   14cc4:	4770      	bx	lr
   14cc6:	bf00      	nop

00014cc8 <pdu_validate_length_rsp>:
static bool pdu_validate_length_rsp(struct pdu_data *pdu)
   14cc8:	7840      	ldrb	r0, [r0, #1]
   14cca:	f1a0 0009 	sub.w	r0, r0, #9
   14cce:	fab0 f080 	clz	r0, r0
   14cd2:	0940      	lsrs	r0, r0, #5
   14cd4:	4770      	bx	lr
   14cd6:	bf00      	nop

00014cd8 <pdu_validate_phy_req>:
static bool pdu_validate_phy_req(struct pdu_data *pdu)
   14cd8:	7840      	ldrb	r0, [r0, #1]
   14cda:	f1a0 0003 	sub.w	r0, r0, #3
   14cde:	fab0 f080 	clz	r0, r0
   14ce2:	0940      	lsrs	r0, r0, #5
   14ce4:	4770      	bx	lr
   14ce6:	bf00      	nop

00014ce8 <pdu_validate_phy_rsp>:
static bool pdu_validate_phy_rsp(struct pdu_data *pdu)
   14ce8:	7840      	ldrb	r0, [r0, #1]
   14cea:	f1a0 0003 	sub.w	r0, r0, #3
   14cee:	fab0 f080 	clz	r0, r0
   14cf2:	0940      	lsrs	r0, r0, #5
   14cf4:	4770      	bx	lr
   14cf6:	bf00      	nop

00014cf8 <llcp_proc_ctx_release>:
{
   14cf8:	b510      	push	{r4, lr}
	LL_ASSERT(ctx->owner);
   14cfa:	6841      	ldr	r1, [r0, #4]
{
   14cfc:	4604      	mov	r4, r0
	LL_ASSERT(ctx->owner);
   14cfe:	b121      	cbz	r1, 14d0a <llcp_proc_ctx_release+0x12>
	mem_release(ctx, &ctx->owner->free);
   14d00:	4620      	mov	r0, r4
}
   14d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_release(ctx, &ctx->owner->free);
   14d06:	f7f9 b98f 	b.w	e028 <mem_release>
	LL_ASSERT(ctx->owner);
   14d0a:	4a09      	ldr	r2, [pc, #36]	; (14d30 <llcp_proc_ctx_release+0x38>)
   14d0c:	4909      	ldr	r1, [pc, #36]	; (14d34 <llcp_proc_ctx_release+0x3c>)
   14d0e:	480a      	ldr	r0, [pc, #40]	; (14d38 <llcp_proc_ctx_release+0x40>)
   14d10:	2360      	movs	r3, #96	; 0x60
   14d12:	f00c fd1b 	bl	2174c <assert_print>
   14d16:	4040      	eors	r0, r0
   14d18:	f380 8811 	msr	BASEPRI, r0
   14d1c:	f04f 0003 	mov.w	r0, #3
   14d20:	df02      	svc	2
	mem_release(ctx, &ctx->owner->free);
   14d22:	6861      	ldr	r1, [r4, #4]
   14d24:	4620      	mov	r0, r4
}
   14d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_release(ctx, &ctx->owner->free);
   14d2a:	f7f9 b97d 	b.w	e028 <mem_release>
   14d2e:	bf00      	nop
   14d30:	00028fa0 	.word	0x00028fa0
   14d34:	00028fe0 	.word	0x00028fe0
   14d38:	0002866c 	.word	0x0002866c

00014d3c <llcp_tx_alloc_peek>:
	return mem_tx.free != NULL;
   14d3c:	4b02      	ldr	r3, [pc, #8]	; (14d48 <llcp_tx_alloc_peek+0xc>)
   14d3e:	6818      	ldr	r0, [r3, #0]
}
   14d40:	3800      	subs	r0, #0
   14d42:	bf18      	it	ne
   14d44:	2001      	movne	r0, #1
   14d46:	4770      	bx	lr
   14d48:	2000069c 	.word	0x2000069c

00014d4c <llcp_tx_alloc>:
{
   14d4c:	b510      	push	{r4, lr}
	tx = (struct node_tx *)mem_acquire(&mem_tx.free);
   14d4e:	4804      	ldr	r0, [pc, #16]	; (14d60 <llcp_tx_alloc+0x14>)
   14d50:	f7f9 f94e 	bl	dff0 <mem_acquire>
   14d54:	4604      	mov	r4, r0
	ull_pdu_data_init(pdu);
   14d56:	3004      	adds	r0, #4
   14d58:	f7fe fd46 	bl	137e8 <ull_pdu_data_init>
}
   14d5c:	4620      	mov	r0, r4
   14d5e:	bd10      	pop	{r4, pc}
   14d60:	2000069c 	.word	0x2000069c

00014d64 <llcp_ntf_alloc_is_available>:
{
   14d64:	b508      	push	{r3, lr}
	return ll_pdu_rx_alloc_peek(1) != NULL;
   14d66:	2001      	movs	r0, #1
   14d68:	f7fc fc44 	bl	115f4 <ll_pdu_rx_alloc_peek>
}
   14d6c:	3800      	subs	r0, #0
   14d6e:	bf18      	it	ne
   14d70:	2001      	movne	r0, #1
   14d72:	bd08      	pop	{r3, pc}

00014d74 <llcp_ntf_alloc_num_available>:
{
   14d74:	b508      	push	{r3, lr}
	return ll_pdu_rx_alloc_peek(count) != NULL;
   14d76:	f7fc fc3d 	bl	115f4 <ll_pdu_rx_alloc_peek>
}
   14d7a:	3800      	subs	r0, #0
   14d7c:	bf18      	it	ne
   14d7e:	2001      	movne	r0, #1
   14d80:	bd08      	pop	{r3, pc}
   14d82:	bf00      	nop

00014d84 <llcp_ntf_alloc>:
	return ll_pdu_rx_alloc();
   14d84:	f7fc bc58 	b.w	11638 <ll_pdu_rx_alloc>

00014d88 <llcp_tx_enqueue>:
	ull_tx_q_enqueue_ctrl(&conn->tx_q, tx);
   14d88:	30d4      	adds	r0, #212	; 0xd4
   14d8a:	f7ff bef7 	b.w	14b7c <ull_tx_q_enqueue_ctrl>
   14d8e:	bf00      	nop

00014d90 <llcp_tx_pause_data>:
{
   14d90:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp.tx_q_pause_data_mask == 0) {
   14d92:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
{
   14d96:	4605      	mov	r5, r0
   14d98:	460c      	mov	r4, r1
	if (conn->llcp.tx_q_pause_data_mask == 0) {
   14d9a:	b11b      	cbz	r3, 14da4 <llcp_tx_pause_data+0x14>
	conn->llcp.tx_q_pause_data_mask |= pause_mask;
   14d9c:	431c      	orrs	r4, r3
   14d9e:	f885 4146 	strb.w	r4, [r5, #326]	; 0x146
}
   14da2:	bd38      	pop	{r3, r4, r5, pc}
		ull_tx_q_pause_data(&conn->tx_q);
   14da4:	30d4      	adds	r0, #212	; 0xd4
   14da6:	f7ff feb9 	bl	14b1c <ull_tx_q_pause_data>
	conn->llcp.tx_q_pause_data_mask |= pause_mask;
   14daa:	f895 3146 	ldrb.w	r3, [r5, #326]	; 0x146
   14dae:	431c      	orrs	r4, r3
   14db0:	f885 4146 	strb.w	r4, [r5, #326]	; 0x146
}
   14db4:	bd38      	pop	{r3, r4, r5, pc}
   14db6:	bf00      	nop

00014db8 <llcp_tx_resume_data>:
	conn->llcp.tx_q_pause_data_mask &= ~resume_mask;
   14db8:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
   14dbc:	ea23 0101 	bic.w	r1, r3, r1
   14dc0:	f880 1146 	strb.w	r1, [r0, #326]	; 0x146
	if (conn->llcp.tx_q_pause_data_mask == 0) {
   14dc4:	b101      	cbz	r1, 14dc8 <llcp_tx_resume_data+0x10>
}
   14dc6:	4770      	bx	lr
		ull_tx_q_resume_data(&conn->tx_q);
   14dc8:	30d4      	adds	r0, #212	; 0xd4
   14dca:	f7ff beab 	b.w	14b24 <ull_tx_q_resume_data>
   14dce:	bf00      	nop

00014dd0 <llcp_create_local_procedure>:
{
   14dd0:	b570      	push	{r4, r5, r6, lr}
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
   14dd2:	4e20      	ldr	r6, [pc, #128]	; (14e54 <llcp_create_local_procedure+0x84>)
{
   14dd4:	4605      	mov	r5, r0
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
   14dd6:	4630      	mov	r0, r6
   14dd8:	f7f9 f90a 	bl	dff0 <mem_acquire>
	if (ctx) {
   14ddc:	4604      	mov	r4, r0
   14dde:	b1e8      	cbz	r0, 14e1c <llcp_create_local_procedure+0x4c>
	ctx->collision = 0U;
   14de0:	2100      	movs	r1, #0
		ctx->owner = owner;
   14de2:	6046      	str	r6, [r0, #4]
	ctx->proc = proc;
   14de4:	7205      	strb	r5, [r0, #8]
	ctx->collision = 0U;
   14de6:	6101      	str	r1, [r0, #16]
	ctx->done = 0U;
   14de8:	6181      	str	r1, [r0, #24]
	ctx->rx_greedy = 0U;
   14dea:	7301      	strb	r1, [r0, #12]
	ctx->tx_ack = NULL;
   14dec:	6141      	str	r1, [r0, #20]
	memset((void *)&ctx->data, 0, sizeof(ctx->data));
   14dee:	222c      	movs	r2, #44	; 0x2c
   14df0:	301c      	adds	r0, #28
   14df2:	f00e ff16 	bl	23c22 <memset>
	switch (ctx->proc) {
   14df6:	7a23      	ldrb	r3, [r4, #8]
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
   14df8:	22ff      	movs	r2, #255	; 0xff
	switch (ctx->proc) {
   14dfa:	3b01      	subs	r3, #1
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
   14dfc:	72e2      	strb	r2, [r4, #11]
	ctx->tx_opcode = ULL_LLCP_INVALID_OPCODE;
   14dfe:	7362      	strb	r2, [r4, #13]
	ctx->response_opcode = ULL_LLCP_INVALID_OPCODE;
   14e00:	7262      	strb	r2, [r4, #9]
	switch (ctx->proc) {
   14e02:	2b0b      	cmp	r3, #11
   14e04:	d811      	bhi.n	14e2a <llcp_create_local_procedure+0x5a>
   14e06:	e8df f003 	tbb	[pc, r3]
   14e0a:	0606      	.short	0x0606
   14e0c:	10100606 	.word	0x10100606
   14e10:	060b0b1f 	.word	0x060b0b1f
   14e14:	0610      	.short	0x0610
		llcp_lp_comm_init_proc(ctx);
   14e16:	4620      	mov	r0, r4
   14e18:	f001 f87e 	bl	15f18 <llcp_lp_comm_init_proc>
}
   14e1c:	4620      	mov	r0, r4
   14e1e:	bd70      	pop	{r4, r5, r6, pc}
		llcp_lp_cu_init_proc(ctx);
   14e20:	4620      	mov	r0, r4
   14e22:	f002 faf3 	bl	1740c <llcp_lp_cu_init_proc>
}
   14e26:	4620      	mov	r0, r4
   14e28:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   14e2a:	4a0b      	ldr	r2, [pc, #44]	; (14e58 <llcp_create_local_procedure+0x88>)
   14e2c:	490b      	ldr	r1, [pc, #44]	; (14e5c <llcp_create_local_procedure+0x8c>)
   14e2e:	480c      	ldr	r0, [pc, #48]	; (14e60 <llcp_create_local_procedure+0x90>)
   14e30:	f44f 73c2 	mov.w	r3, #388	; 0x184
   14e34:	f00c fc8a 	bl	2174c <assert_print>
   14e38:	4040      	eors	r0, r0
   14e3a:	f380 8811 	msr	BASEPRI, r0
   14e3e:	f04f 0003 	mov.w	r0, #3
   14e42:	df02      	svc	2
}
   14e44:	4620      	mov	r0, r4
   14e46:	bd70      	pop	{r4, r5, r6, pc}
		llcp_lp_pu_init_proc(ctx);
   14e48:	4620      	mov	r0, r4
   14e4a:	f7ff f9e5 	bl	14218 <llcp_lp_pu_init_proc>
}
   14e4e:	4620      	mov	r0, r4
   14e50:	bd70      	pop	{r4, r5, r6, pc}
   14e52:	bf00      	nop
   14e54:	20000694 	.word	0x20000694
   14e58:	00028fa0 	.word	0x00028fa0
   14e5c:	000286fc 	.word	0x000286fc
   14e60:	0002866c 	.word	0x0002866c

00014e64 <llcp_create_remote_procedure>:
{
   14e64:	b570      	push	{r4, r5, r6, lr}
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
   14e66:	4e22      	ldr	r6, [pc, #136]	; (14ef0 <llcp_create_remote_procedure+0x8c>)
{
   14e68:	4605      	mov	r5, r0
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
   14e6a:	4630      	mov	r0, r6
   14e6c:	f7f9 f8c0 	bl	dff0 <mem_acquire>
	if (ctx) {
   14e70:	4604      	mov	r4, r0
   14e72:	b1e8      	cbz	r0, 14eb0 <llcp_create_remote_procedure+0x4c>
	ctx->collision = 0U;
   14e74:	2100      	movs	r1, #0
		ctx->owner = owner;
   14e76:	6046      	str	r6, [r0, #4]
	ctx->proc = proc;
   14e78:	7205      	strb	r5, [r0, #8]
	ctx->collision = 0U;
   14e7a:	6101      	str	r1, [r0, #16]
	ctx->done = 0U;
   14e7c:	6181      	str	r1, [r0, #24]
	ctx->rx_greedy = 0U;
   14e7e:	7301      	strb	r1, [r0, #12]
	ctx->tx_ack = NULL;
   14e80:	6141      	str	r1, [r0, #20]
	memset((void *)&ctx->data, 0, sizeof(ctx->data));
   14e82:	222c      	movs	r2, #44	; 0x2c
   14e84:	301c      	adds	r0, #28
   14e86:	f00e fecc 	bl	23c22 <memset>
	switch (ctx->proc) {
   14e8a:	7a22      	ldrb	r2, [r4, #8]
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
   14e8c:	23ff      	movs	r3, #255	; 0xff
   14e8e:	72e3      	strb	r3, [r4, #11]
	ctx->tx_opcode = ULL_LLCP_INVALID_OPCODE;
   14e90:	7363      	strb	r3, [r4, #13]
	ctx->response_opcode = ULL_LLCP_INVALID_OPCODE;
   14e92:	7263      	strb	r3, [r4, #9]
	switch (ctx->proc) {
   14e94:	2a0c      	cmp	r2, #12
   14e96:	d81d      	bhi.n	14ed4 <llcp_create_remote_procedure+0x70>
   14e98:	e8df f002 	tbb	[pc, r2]
   14e9c:	0707070a 	.word	0x0707070a
   14ea0:	180c0c07 	.word	0x180c0c07
   14ea4:	14071010 	.word	0x14071010
   14ea8:	07          	.byte	0x07
   14ea9:	00          	.byte	0x00
		llcp_rp_comm_init_proc(ctx);
   14eaa:	4620      	mov	r0, r4
   14eac:	f001 f846 	bl	15f3c <llcp_rp_comm_init_proc>
}
   14eb0:	4620      	mov	r0, r4
   14eb2:	bd70      	pop	{r4, r5, r6, pc}
		llcp_rp_enc_init_proc(ctx);
   14eb4:	4620      	mov	r0, r4
   14eb6:	f7ff fdf5 	bl	14aa4 <llcp_rp_enc_init_proc>
		break;
   14eba:	e7f9      	b.n	14eb0 <llcp_create_remote_procedure+0x4c>
		llcp_rp_cu_init_proc(ctx);
   14ebc:	4620      	mov	r0, r4
   14ebe:	f002 fad3 	bl	17468 <llcp_rp_cu_init_proc>
		break;
   14ec2:	e7f5      	b.n	14eb0 <llcp_create_remote_procedure+0x4c>
		llcp_rp_chmu_init_proc(ctx);
   14ec4:	4620      	mov	r0, r4
   14ec6:	f002 fb23 	bl	17510 <llcp_rp_chmu_init_proc>
		break;
   14eca:	e7f1      	b.n	14eb0 <llcp_create_remote_procedure+0x4c>
		llcp_rp_pu_init_proc(ctx);
   14ecc:	4620      	mov	r0, r4
   14ece:	f7ff fb43 	bl	14558 <llcp_rp_pu_init_proc>
		break;
   14ed2:	e7ed      	b.n	14eb0 <llcp_create_remote_procedure+0x4c>
		LL_ASSERT(0);
   14ed4:	4a07      	ldr	r2, [pc, #28]	; (14ef4 <llcp_create_remote_procedure+0x90>)
   14ed6:	4908      	ldr	r1, [pc, #32]	; (14ef8 <llcp_create_remote_procedure+0x94>)
   14ed8:	4808      	ldr	r0, [pc, #32]	; (14efc <llcp_create_remote_procedure+0x98>)
   14eda:	f240 13db 	movw	r3, #475	; 0x1db
   14ede:	f00c fc35 	bl	2174c <assert_print>
   14ee2:	4040      	eors	r0, r0
   14ee4:	f380 8811 	msr	BASEPRI, r0
   14ee8:	f04f 0003 	mov.w	r0, #3
   14eec:	df02      	svc	2
		break;
   14eee:	e7df      	b.n	14eb0 <llcp_create_remote_procedure+0x4c>
   14ef0:	2000068c 	.word	0x2000068c
   14ef4:	00028fa0 	.word	0x00028fa0
   14ef8:	000286fc 	.word	0x000286fc
   14efc:	0002866c 	.word	0x0002866c

00014f00 <ull_cp_init>:
{
   14f00:	b510      	push	{r4, lr}
	mem_init(mem_local_ctx.pool, PROC_CTX_BUF_SIZE,
   14f02:	4b0a      	ldr	r3, [pc, #40]	; (14f2c <ull_cp_init+0x2c>)
   14f04:	2206      	movs	r2, #6
   14f06:	6858      	ldr	r0, [r3, #4]
   14f08:	214c      	movs	r1, #76	; 0x4c
   14f0a:	f7f9 f841 	bl	df90 <mem_init>
	mem_init(mem_remote_ctx.pool, PROC_CTX_BUF_SIZE,
   14f0e:	4b08      	ldr	r3, [pc, #32]	; (14f30 <ull_cp_init+0x30>)
   14f10:	2201      	movs	r2, #1
   14f12:	6858      	ldr	r0, [r3, #4]
   14f14:	214c      	movs	r1, #76	; 0x4c
   14f16:	f7f9 f83b 	bl	df90 <mem_init>
	mem_init(mem_tx.pool, TX_CTRL_BUF_SIZE, LLCP_TX_CTRL_BUF_COUNT, &mem_tx.free);
   14f1a:	4b06      	ldr	r3, [pc, #24]	; (14f34 <ull_cp_init+0x34>)
}
   14f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_init(mem_tx.pool, TX_CTRL_BUF_SIZE, LLCP_TX_CTRL_BUF_COUNT, &mem_tx.free);
   14f20:	6858      	ldr	r0, [r3, #4]
   14f22:	2204      	movs	r2, #4
   14f24:	212c      	movs	r1, #44	; 0x2c
   14f26:	f7f9 b833 	b.w	df90 <mem_init>
   14f2a:	bf00      	nop
   14f2c:	20000694 	.word	0x20000694
   14f30:	2000068c 	.word	0x2000068c
   14f34:	2000069c 	.word	0x2000069c

00014f38 <ull_llcp_init>:
{
   14f38:	b538      	push	{r3, r4, r5, lr}
   14f3a:	4604      	mov	r4, r0
	list->head = NULL;
   14f3c:	2500      	movs	r5, #0
	llcp_lr_init(conn);
   14f3e:	f001 fa35 	bl	163ac <llcp_lr_init>
	llcp_rr_init(conn);
   14f42:	4620      	mov	r0, r4
	list->tail = NULL;
   14f44:	e9c4 553a 	strd	r5, r5, [r4, #232]	; 0xe8
	conn->llcp.local.pause = 0U;
   14f48:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
	llcp_rr_init(conn);
   14f4c:	f002 fdd2 	bl	17af4 <llcp_rr_init>
	memset(&conn->llcp.vex, 0, sizeof(conn->llcp.vex));
   14f50:	2207      	movs	r2, #7
   14f52:	4629      	mov	r1, r5
   14f54:	e9c4 553e 	strd	r5, r5, [r4, #248]	; 0xf8
	conn->llcp.remote.incompat = INCOMPAT_NO_COLLISION;
   14f58:	f884 5106 	strb.w	r5, [r4, #262]	; 0x106
	conn->llcp.remote.pause = 0U;
   14f5c:	f8a4 5104 	strh.w	r5, [r4, #260]	; 0x104
	conn->llcp.prt_reload = 0U;
   14f60:	f8a4 5108 	strh.w	r5, [r4, #264]	; 0x108
	memset(&conn->llcp.vex, 0, sizeof(conn->llcp.vex));
   14f64:	f504 708a 	add.w	r0, r4, #276	; 0x114
   14f68:	f00e fe5b 	bl	23c22 <memset>
	memset(&conn->llcp.muc, 0, sizeof(conn->llcp.muc));
   14f6c:	2202      	movs	r2, #2
   14f6e:	4629      	mov	r1, r5
   14f70:	f504 709c 	add.w	r0, r4, #312	; 0x138
   14f74:	f00e fe55 	bl	23c22 <memset>
	memset(&conn->llcp.fex, 0, sizeof(conn->llcp.fex));
   14f78:	2218      	movs	r2, #24
   14f7a:	4629      	mov	r1, r5
   14f7c:	f504 7090 	add.w	r0, r4, #288	; 0x120
   14f80:	f00e fe4f 	bl	23c22 <memset>
	conn->llcp.fex.features_used = ll_feat_get();
   14f84:	f7fb fe46 	bl	10c14 <ll_feat_get>
	conn->lll.enc_rx = 0U;
   14f88:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	conn->llcp.tx_q_pause_data_mask = 0;
   14f8c:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
	conn->llcp.fex.features_used = ll_feat_get();
   14f90:	e9c4 014c 	strd	r0, r1, [r4, #304]	; 0x130
	conn->lll.enc_rx = 0U;
   14f94:	f023 0318 	bic.w	r3, r3, #24
   14f98:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->lll.event_counter = 0;
   14f9c:	8665      	strh	r5, [r4, #50]	; 0x32
}
   14f9e:	bd38      	pop	{r3, r4, r5, pc}

00014fa0 <ull_cp_release_tx>:
	mem_release(tx, &mem_tx.free);
   14fa0:	4608      	mov	r0, r1
   14fa2:	4901      	ldr	r1, [pc, #4]	; (14fa8 <ull_cp_release_tx+0x8>)
   14fa4:	f7f9 b840 	b.w	e028 <mem_release>
   14fa8:	2000069c 	.word	0x2000069c

00014fac <ull_cp_prt_elapse>:
{
   14fac:	b538      	push	{r3, r4, r5, lr}
	if (*expire != 0U) {
   14fae:	f8b0 50f2 	ldrh.w	r5, [r0, #242]	; 0xf2
{
   14fb2:	4603      	mov	r3, r0
   14fb4:	4614      	mov	r4, r2
	if (*expire != 0U) {
   14fb6:	b125      	cbz	r5, 14fc2 <ull_cp_prt_elapse+0x16>
		if (*expire > elapsed_event) {
   14fb8:	42a9      	cmp	r1, r5
   14fba:	d20e      	bcs.n	14fda <ull_cp_prt_elapse+0x2e>
			*expire -= elapsed_event;
   14fbc:	1a6d      	subs	r5, r5, r1
   14fbe:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	if (*expire != 0U) {
   14fc2:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
   14fc6:	b122      	cbz	r2, 14fd2 <ull_cp_prt_elapse+0x26>
		if (*expire > elapsed_event) {
   14fc8:	4291      	cmp	r1, r2
   14fca:	d20d      	bcs.n	14fe8 <ull_cp_prt_elapse+0x3c>
			*expire -= elapsed_event;
   14fcc:	1a52      	subs	r2, r2, r1
   14fce:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	return 0;
   14fd2:	2300      	movs	r3, #0
   14fd4:	4618      	mov	r0, r3
			*error_code = ctx->data.term.error_code;
   14fd6:	7023      	strb	r3, [r4, #0]
}
   14fd8:	bd38      	pop	{r3, r4, r5, pc}
		ctx = llcp_lr_peek(conn);
   14fda:	f001 f891 	bl	16100 <llcp_lr_peek>
		LL_ASSERT(ctx);
   14fde:	4605      	mov	r5, r0
   14fe0:	b150      	cbz	r0, 14ff8 <ull_cp_prt_elapse+0x4c>
		if (ctx->proc == PROC_TERMINATE) {
   14fe2:	7a2b      	ldrb	r3, [r5, #8]
   14fe4:	2b0a      	cmp	r3, #10
   14fe6:	d003      	beq.n	14ff0 <ull_cp_prt_elapse+0x44>
	return 0;
   14fe8:	2322      	movs	r3, #34	; 0x22
		return -ETIMEDOUT;
   14fea:	f06f 0073 	mvn.w	r0, #115	; 0x73
   14fee:	e7f2      	b.n	14fd6 <ull_cp_prt_elapse+0x2a>
			*error_code = ctx->data.term.error_code;
   14ff0:	7f2b      	ldrb	r3, [r5, #28]
		return -ETIMEDOUT;
   14ff2:	f06f 0073 	mvn.w	r0, #115	; 0x73
   14ff6:	e7ee      	b.n	14fd6 <ull_cp_prt_elapse+0x2a>
		LL_ASSERT(ctx);
   14ff8:	4a06      	ldr	r2, [pc, #24]	; (15014 <ull_cp_prt_elapse+0x68>)
   14ffa:	4907      	ldr	r1, [pc, #28]	; (15018 <ull_cp_prt_elapse+0x6c>)
   14ffc:	4807      	ldr	r0, [pc, #28]	; (1501c <ull_cp_prt_elapse+0x70>)
   14ffe:	f240 2363 	movw	r3, #611	; 0x263
   15002:	f00c fba3 	bl	2174c <assert_print>
   15006:	4040      	eors	r0, r0
   15008:	f380 8811 	msr	BASEPRI, r0
   1500c:	f04f 0003 	mov.w	r0, #3
   15010:	df02      	svc	2
   15012:	e7e6      	b.n	14fe2 <ull_cp_prt_elapse+0x36>
   15014:	00028fa0 	.word	0x00028fa0
   15018:	00028fec 	.word	0x00028fec
   1501c:	0002866c 	.word	0x0002866c

00015020 <ull_cp_prt_reload_set>:
	conn->llcp.prt_reload = RADIO_CONN_EVENTS((40U * 1000U * 1000U), conn_intv_us);
   15020:	4b03      	ldr	r3, [pc, #12]	; (15030 <ull_cp_prt_reload_set+0x10>)
   15022:	440b      	add	r3, r1
   15024:	fbb3 f3f1 	udiv	r3, r3, r1
   15028:	f8a0 3108 	strh.w	r3, [r0, #264]	; 0x108
}
   1502c:	4770      	bx	lr
   1502e:	bf00      	nop
   15030:	026259ff 	.word	0x026259ff

00015034 <ull_cp_run>:
{
   15034:	b510      	push	{r4, lr}
   15036:	4604      	mov	r4, r0
	llcp_rr_run(conn);
   15038:	f002 fd64 	bl	17b04 <llcp_rr_run>
	llcp_lr_run(conn);
   1503c:	4620      	mov	r0, r4
}
   1503e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	llcp_lr_run(conn);
   15042:	f001 b9bb 	b.w	163bc <llcp_lr_run>
   15046:	bf00      	nop

00015048 <ull_cp_state_set>:
{
   15048:	b510      	push	{r4, lr}
   1504a:	4604      	mov	r4, r0
	switch (state) {
   1504c:	b111      	cbz	r1, 15054 <ull_cp_state_set+0xc>
   1504e:	2901      	cmp	r1, #1
   15050:	d007      	beq.n	15062 <ull_cp_state_set+0x1a>
}
   15052:	bd10      	pop	{r4, pc}
		llcp_rr_connect(conn);
   15054:	f002 fd5e 	bl	17b14 <llcp_rr_connect>
		llcp_lr_connect(conn);
   15058:	4620      	mov	r0, r4
}
   1505a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_lr_connect(conn);
   1505e:	f001 b9d9 	b.w	16414 <llcp_lr_connect>
		llcp_rr_disconnect(conn);
   15062:	f002 fd5b 	bl	17b1c <llcp_rr_disconnect>
		llcp_lr_disconnect(conn);
   15066:	4620      	mov	r0, r4
}
   15068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_lr_disconnect(conn);
   1506c:	f001 b9f4 	b.w	16458 <llcp_lr_disconnect>

00015070 <ull_cp_min_used_chans>:
	if (conn->lll.role != BT_HCI_ROLE_PERIPHERAL) {
   15070:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   15074:	2b00      	cmp	r3, #0
   15076:	da11      	bge.n	1509c <ull_cp_min_used_chans+0x2c>
{
   15078:	b570      	push	{r4, r5, r6, lr}
   1507a:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_MIN_USED_CHANS);
   1507c:	2003      	movs	r0, #3
   1507e:	460e      	mov	r6, r1
   15080:	4615      	mov	r5, r2
   15082:	f7ff fea5 	bl	14dd0 <llcp_create_local_procedure>
	if (!ctx) {
   15086:	4601      	mov	r1, r0
   15088:	b130      	cbz	r0, 15098 <ull_cp_min_used_chans+0x28>
	ctx->data.muc.phys = phys;
   1508a:	7706      	strb	r6, [r0, #28]
	ctx->data.muc.min_used_chans = min_used_chans;
   1508c:	7745      	strb	r5, [r0, #29]
	llcp_lr_enqueue(conn, ctx);
   1508e:	4620      	mov	r0, r4
   15090:	f001 f802 	bl	16098 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   15094:	2000      	movs	r0, #0
}
   15096:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15098:	200c      	movs	r0, #12
}
   1509a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1509c:	200c      	movs	r0, #12
}
   1509e:	4770      	bx	lr

000150a0 <ull_cp_le_ping>:
{
   150a0:	b510      	push	{r4, lr}
   150a2:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_LE_PING);
   150a4:	2001      	movs	r0, #1
   150a6:	f7ff fe93 	bl	14dd0 <llcp_create_local_procedure>
	if (!ctx) {
   150aa:	b128      	cbz	r0, 150b8 <ull_cp_le_ping+0x18>
   150ac:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
   150ae:	4620      	mov	r0, r4
   150b0:	f000 fff2 	bl	16098 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   150b4:	2000      	movs	r0, #0
}
   150b6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   150b8:	200c      	movs	r0, #12
}
   150ba:	bd10      	pop	{r4, pc}

000150bc <ull_cp_feature_exchange>:
{
   150bc:	b510      	push	{r4, lr}
   150be:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_FEATURE_EXCHANGE);
   150c0:	2002      	movs	r0, #2
   150c2:	f7ff fe85 	bl	14dd0 <llcp_create_local_procedure>
	if (!ctx) {
   150c6:	b128      	cbz	r0, 150d4 <ull_cp_feature_exchange+0x18>
   150c8:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
   150ca:	4620      	mov	r0, r4
   150cc:	f000 ffe4 	bl	16098 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   150d0:	2000      	movs	r0, #0
}
   150d2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   150d4:	200c      	movs	r0, #12
}
   150d6:	bd10      	pop	{r4, pc}

000150d8 <ull_cp_version_exchange>:
{
   150d8:	b510      	push	{r4, lr}
   150da:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_VERSION_EXCHANGE);
   150dc:	2004      	movs	r0, #4
   150de:	f7ff fe77 	bl	14dd0 <llcp_create_local_procedure>
	if (!ctx) {
   150e2:	b128      	cbz	r0, 150f0 <ull_cp_version_exchange+0x18>
   150e4:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
   150e6:	4620      	mov	r0, r4
   150e8:	f000 ffd6 	bl	16098 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   150ec:	2000      	movs	r0, #0
}
   150ee:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   150f0:	200c      	movs	r0, #12
}
   150f2:	bd10      	pop	{r4, pc}

000150f4 <ull_cp_phy_update>:
{
   150f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150f8:	4605      	mov	r5, r0
	ctx = llcp_create_local_procedure(PROC_PHY_UPDATE);
   150fa:	2007      	movs	r0, #7
{
   150fc:	f89d 6018 	ldrb.w	r6, [sp, #24]
   15100:	4688      	mov	r8, r1
   15102:	4617      	mov	r7, r2
   15104:	461c      	mov	r4, r3
	ctx = llcp_create_local_procedure(PROC_PHY_UPDATE);
   15106:	f7ff fe63 	bl	14dd0 <llcp_create_local_procedure>
	if (!ctx) {
   1510a:	b1a0      	cbz	r0, 15136 <ull_cp_phy_update+0x42>
	ctx->data.pu.tx = tx;
   1510c:	00e3      	lsls	r3, r4, #3
   1510e:	f008 0807 	and.w	r8, r8, #7
   15112:	f003 0338 	and.w	r3, r3, #56	; 0x38
   15116:	01bf      	lsls	r7, r7, #6
   15118:	ea43 0308 	orr.w	r3, r3, r8
   1511c:	f007 0740 	and.w	r7, r7, #64	; 0x40
   15120:	433b      	orrs	r3, r7
   15122:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
   15126:	4601      	mov	r1, r0
   15128:	7703      	strb	r3, [r0, #28]
	llcp_lr_enqueue(conn, ctx);
   1512a:	4628      	mov	r0, r5
   1512c:	f000 ffb4 	bl	16098 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   15130:	2000      	movs	r0, #0
}
   15132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15136:	200c      	movs	r0, #12
}
   15138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001513c <ull_cp_terminate>:
{
   1513c:	b538      	push	{r3, r4, r5, lr}
   1513e:	4604      	mov	r4, r0
   15140:	460d      	mov	r5, r1
	llcp_lr_abort(conn);
   15142:	f001 f98d 	bl	16460 <llcp_lr_abort>
	ctx = llcp_create_local_procedure(PROC_TERMINATE);
   15146:	200a      	movs	r0, #10
   15148:	f7ff fe42 	bl	14dd0 <llcp_create_local_procedure>
	if (!ctx) {
   1514c:	b130      	cbz	r0, 1515c <ull_cp_terminate+0x20>
   1514e:	4601      	mov	r1, r0
	ctx->data.term.error_code = error_code;
   15150:	7705      	strb	r5, [r0, #28]
	llcp_lr_enqueue(conn, ctx);
   15152:	4620      	mov	r0, r4
   15154:	f000 ffa0 	bl	16098 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   15158:	2000      	movs	r0, #0
}
   1515a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1515c:	200c      	movs	r0, #12
}
   1515e:	bd38      	pop	{r3, r4, r5, pc}

00015160 <ull_cp_chan_map_update_pending>:
{
   15160:	b508      	push	{r3, lr}
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
   15162:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   15166:	2b00      	cmp	r3, #0
   15168:	db08      	blt.n	1517c <ull_cp_chan_map_update_pending+0x1c>
		ctx = llcp_lr_peek(conn);
   1516a:	f000 ffc9 	bl	16100 <llcp_lr_peek>
	if (ctx && ctx->proc == PROC_CHAN_MAP_UPDATE) {
   1516e:	b120      	cbz	r0, 1517a <ull_cp_chan_map_update_pending+0x1a>
   15170:	7a03      	ldrb	r3, [r0, #8]
   15172:	2b0b      	cmp	r3, #11
		return ctx->data.chmu.chm;
   15174:	bf0c      	ite	eq
   15176:	301e      	addeq	r0, #30
	return NULL;
   15178:	2000      	movne	r0, #0
}
   1517a:	bd08      	pop	{r3, pc}
		ctx = llcp_rr_peek(conn);
   1517c:	f002 fc3c 	bl	179f8 <llcp_rr_peek>
   15180:	e7f5      	b.n	1516e <ull_cp_chan_map_update_pending+0xe>
   15182:	bf00      	nop

00015184 <ull_cp_data_length_update>:
{
   15184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15186:	4605      	mov	r5, r0
	ctx = llcp_create_local_procedure(PROC_DATA_LENGTH_UPDATE);
   15188:	200c      	movs	r0, #12
{
   1518a:	460e      	mov	r6, r1
   1518c:	4617      	mov	r7, r2
	ctx = llcp_create_local_procedure(PROC_DATA_LENGTH_UPDATE);
   1518e:	f7ff fe1f 	bl	14dd0 <llcp_create_local_procedure>
	if (!ctx) {
   15192:	b158      	cbz	r0, 151ac <ull_cp_data_length_update+0x28>
   15194:	4604      	mov	r4, r0
	ull_dle_local_tx_update(conn, max_tx_octets, max_tx_time);
   15196:	463a      	mov	r2, r7
   15198:	4631      	mov	r1, r6
   1519a:	4628      	mov	r0, r5
   1519c:	f7fe fc58 	bl	13a50 <ull_dle_local_tx_update>
	llcp_lr_enqueue(conn, ctx);
   151a0:	4628      	mov	r0, r5
   151a2:	4621      	mov	r1, r4
   151a4:	f000 ff78 	bl	16098 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   151a8:	2000      	movs	r0, #0
}
   151aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   151ac:	200c      	movs	r0, #12
}
   151ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000151b0 <ull_cp_ltk_req_reply>:
{
   151b0:	b570      	push	{r4, r5, r6, lr}
   151b2:	4605      	mov	r5, r0
   151b4:	460e      	mov	r6, r1
	ctx = llcp_rr_peek(conn);
   151b6:	f002 fc1f 	bl	179f8 <llcp_rr_peek>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
   151ba:	b120      	cbz	r0, 151c6 <ull_cp_ltk_req_reply+0x16>
   151bc:	7a03      	ldrb	r3, [r0, #8]
   151be:	3b05      	subs	r3, #5
   151c0:	2b01      	cmp	r3, #1
   151c2:	4604      	mov	r4, r0
   151c4:	d901      	bls.n	151ca <ull_cp_ltk_req_reply+0x1a>
	return BT_HCI_ERR_CMD_DISALLOWED;
   151c6:	200c      	movs	r0, #12
}
   151c8:	bd70      	pop	{r4, r5, r6, pc}
	    llcp_rp_enc_ltk_req_reply_allowed(conn, ctx)) {
   151ca:	4601      	mov	r1, r0
   151cc:	4628      	mov	r0, r5
   151ce:	f7ff fc91 	bl	14af4 <llcp_rp_enc_ltk_req_reply_allowed>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
   151d2:	2800      	cmp	r0, #0
   151d4:	d0f7      	beq.n	151c6 <ull_cp_ltk_req_reply+0x16>
		memcpy(ctx->data.enc.ltk, ltk, sizeof(ctx->data.enc.ltk));
   151d6:	2210      	movs	r2, #16
   151d8:	4631      	mov	r1, r6
   151da:	f104 0027 	add.w	r0, r4, #39	; 0x27
   151de:	f00e fd15 	bl	23c0c <memcpy>
		llcp_rp_enc_ltk_req_reply(conn, ctx);
   151e2:	4628      	mov	r0, r5
   151e4:	4621      	mov	r1, r4
   151e6:	f7ff fc7d 	bl	14ae4 <llcp_rp_enc_ltk_req_reply>
		return BT_HCI_ERR_SUCCESS;
   151ea:	2000      	movs	r0, #0
}
   151ec:	bd70      	pop	{r4, r5, r6, pc}
   151ee:	bf00      	nop

000151f0 <ull_cp_ltk_req_neq_reply>:
{
   151f0:	b538      	push	{r3, r4, r5, lr}
   151f2:	4605      	mov	r5, r0
	ctx = llcp_rr_peek(conn);
   151f4:	f002 fc00 	bl	179f8 <llcp_rr_peek>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
   151f8:	b120      	cbz	r0, 15204 <ull_cp_ltk_req_neq_reply+0x14>
   151fa:	7a03      	ldrb	r3, [r0, #8]
   151fc:	3b05      	subs	r3, #5
   151fe:	2b01      	cmp	r3, #1
   15200:	4604      	mov	r4, r0
   15202:	d901      	bls.n	15208 <ull_cp_ltk_req_neq_reply+0x18>
	return BT_HCI_ERR_CMD_DISALLOWED;
   15204:	200c      	movs	r0, #12
}
   15206:	bd38      	pop	{r3, r4, r5, pc}
	    llcp_rp_enc_ltk_req_reply_allowed(conn, ctx)) {
   15208:	4601      	mov	r1, r0
   1520a:	4628      	mov	r0, r5
   1520c:	f7ff fc72 	bl	14af4 <llcp_rp_enc_ltk_req_reply_allowed>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
   15210:	2800      	cmp	r0, #0
   15212:	d0f7      	beq.n	15204 <ull_cp_ltk_req_neq_reply+0x14>
		llcp_rp_enc_ltk_req_neg_reply(conn, ctx);
   15214:	4628      	mov	r0, r5
   15216:	4621      	mov	r1, r4
   15218:	f7ff fc68 	bl	14aec <llcp_rp_enc_ltk_req_neg_reply>
		return BT_HCI_ERR_SUCCESS;
   1521c:	2000      	movs	r0, #0
}
   1521e:	bd38      	pop	{r3, r4, r5, pc}

00015220 <ull_cp_conn_update>:
{
   15220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15224:	4605      	mov	r5, r0
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_CONN_PARAM_REQ) != 0;
   15226:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1522a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1522e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   15230:	469a      	mov	sl, r3
	if (feature_conn_param_req(conn)) {
   15232:	0783      	lsls	r3, r0, #30
{
   15234:	4688      	mov	r8, r1
   15236:	4617      	mov	r7, r2
	if (feature_conn_param_req(conn)) {
   15238:	d42f      	bmi.n	1529a <ull_cp_conn_update+0x7a>
	} else if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
   1523a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1523e:	2b00      	cmp	r3, #0
   15240:	db4a      	blt.n	152d8 <ull_cp_conn_update+0xb8>
		ctx = llcp_create_local_procedure(PROC_CONN_UPDATE);
   15242:	2008      	movs	r0, #8
   15244:	f7ff fdc4 	bl	14dd0 <llcp_create_local_procedure>
   15248:	4604      	mov	r4, r0
	if (!ctx) {
   1524a:	2c00      	cmp	r4, #0
   1524c:	d052      	beq.n	152f4 <ull_cp_conn_update+0xd4>
	if (ctx->proc == PROC_CONN_UPDATE) {
   1524e:	7a23      	ldrb	r3, [r4, #8]
   15250:	2b08      	cmp	r3, #8
   15252:	d027      	beq.n	152a4 <ull_cp_conn_update+0x84>
	} else if (ctx->proc == PROC_CONN_PARAM_REQ) {
   15254:	2b09      	cmp	r3, #9
   15256:	d131      	bne.n	152bc <ull_cp_conn_update+0x9c>
		ctx->data.cu.interval_min = interval_min;
   15258:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
		ctx->data.cu.interval_max = interval_max;
   1525c:	8527      	strh	r7, [r4, #40]	; 0x28
		ctx->data.cu.latency = latency;
   1525e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
		ctx->data.cu.timeout = timeout;
   15262:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
   15266:	2e00      	cmp	r6, #0
   15268:	d039      	beq.n	152de <ull_cp_conn_update+0xbe>
   1526a:	8833      	ldrh	r3, [r6, #0]
   1526c:	8663      	strh	r3, [r4, #50]	; 0x32
		ctx->data.cu.offsets[1] = offsets ? offsets[1] : 0xffff;
   1526e:	8873      	ldrh	r3, [r6, #2]
   15270:	86a3      	strh	r3, [r4, #52]	; 0x34
		ctx->data.cu.offsets[2] = offsets ? offsets[2] : 0xffff;
   15272:	88b3      	ldrh	r3, [r6, #4]
   15274:	86e3      	strh	r3, [r4, #54]	; 0x36
		ctx->data.cu.offsets[3] = offsets ? offsets[3] : 0xffff;
   15276:	88f3      	ldrh	r3, [r6, #6]
   15278:	8723      	strh	r3, [r4, #56]	; 0x38
		ctx->data.cu.offsets[4] = offsets ? offsets[4] : 0xffff;
   1527a:	8933      	ldrh	r3, [r6, #8]
   1527c:	8763      	strh	r3, [r4, #58]	; 0x3a
		ctx->data.cu.offsets[5] = offsets ? offsets[5] : 0xffff;
   1527e:	8973      	ldrh	r3, [r6, #10]
   15280:	87a3      	strh	r3, [r4, #60]	; 0x3c
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15282:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   15286:	2b00      	cmp	r3, #0
   15288:	da11      	bge.n	152ae <ull_cp_conn_update+0x8e>
			uint16_t handle = ll_conn_handle_get(conn);
   1528a:	4628      	mov	r0, r5
   1528c:	f7fd fd74 	bl	12d78 <ll_conn_handle_get>
   15290:	4601      	mov	r1, r0
			ull_periph_latency_cancel(conn, handle);
   15292:	4628      	mov	r0, r5
   15294:	f002 fd60 	bl	17d58 <ull_periph_latency_cancel>
   15298:	e009      	b.n	152ae <ull_cp_conn_update+0x8e>
		ctx = llcp_create_local_procedure(PROC_CONN_PARAM_REQ);
   1529a:	2009      	movs	r0, #9
   1529c:	f7ff fd98 	bl	14dd0 <llcp_create_local_procedure>
   152a0:	4604      	mov	r4, r0
   152a2:	e7d2      	b.n	1524a <ull_cp_conn_update+0x2a>
		ctx->data.cu.interval_max = interval_max;
   152a4:	8527      	strh	r7, [r4, #40]	; 0x28
		ctx->data.cu.latency = latency;
   152a6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
		ctx->data.cu.timeout = timeout;
   152aa:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
	llcp_lr_enqueue(conn, ctx);
   152ae:	4628      	mov	r0, r5
   152b0:	4621      	mov	r1, r4
   152b2:	f000 fef1 	bl	16098 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   152b6:	2000      	movs	r0, #0
}
   152b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT(0); /* Unknown procedure */
   152bc:	4a0e      	ldr	r2, [pc, #56]	; (152f8 <ull_cp_conn_update+0xd8>)
   152be:	490f      	ldr	r1, [pc, #60]	; (152fc <ull_cp_conn_update+0xdc>)
   152c0:	480f      	ldr	r0, [pc, #60]	; (15300 <ull_cp_conn_update+0xe0>)
   152c2:	f240 4337 	movw	r3, #1079	; 0x437
   152c6:	f00c fa41 	bl	2174c <assert_print>
   152ca:	4040      	eors	r0, r0
   152cc:	f380 8811 	msr	BASEPRI, r0
   152d0:	f04f 0003 	mov.w	r0, #3
   152d4:	df02      	svc	2
   152d6:	e7ea      	b.n	152ae <ull_cp_conn_update+0x8e>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   152d8:	201a      	movs	r0, #26
}
   152da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
   152de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   152e2:	4a08      	ldr	r2, [pc, #32]	; (15304 <ull_cp_conn_update+0xe4>)
   152e4:	f8c4 3036 	str.w	r3, [r4, #54]	; 0x36
		ctx->data.cu.offsets[4] = offsets ? offsets[4] : 0xffff;
   152e8:	8763      	strh	r3, [r4, #58]	; 0x3a
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
   152ea:	f8c4 2032 	str.w	r2, [r4, #50]	; 0x32
		ctx->data.cu.offsets[5] = offsets ? offsets[5] : 0xffff;
   152ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   152f2:	e7c5      	b.n	15280 <ull_cp_conn_update+0x60>
		return BT_HCI_ERR_CMD_DISALLOWED;
   152f4:	200c      	movs	r0, #12
   152f6:	e7df      	b.n	152b8 <ull_cp_conn_update+0x98>
   152f8:	00028fa0 	.word	0x00028fa0
   152fc:	000286fc 	.word	0x000286fc
   15300:	0002866c 	.word	0x0002866c
   15304:	ffff0000 	.word	0xffff0000

00015308 <ull_cp_remote_dle_pending>:
{
   15308:	b508      	push	{r3, lr}
	ctx = llcp_rr_peek(conn);
   1530a:	f002 fb75 	bl	179f8 <llcp_rr_peek>
	return (ctx && ctx->proc == PROC_DATA_LENGTH_UPDATE);
   1530e:	b128      	cbz	r0, 1531c <ull_cp_remote_dle_pending+0x14>
   15310:	7a00      	ldrb	r0, [r0, #8]
   15312:	f1a0 000c 	sub.w	r0, r0, #12
   15316:	fab0 f080 	clz	r0, r0
   1531a:	0940      	lsrs	r0, r0, #5
}
   1531c:	bd08      	pop	{r3, pc}
   1531e:	bf00      	nop

00015320 <ull_cp_conn_param_req_reply>:
{
   15320:	b510      	push	{r4, lr}
   15322:	4604      	mov	r4, r0
	ctx = llcp_rr_peek(conn);
   15324:	f002 fb68 	bl	179f8 <llcp_rr_peek>
	if (ctx && ctx->proc == PROC_CONN_PARAM_REQ) {
   15328:	b110      	cbz	r0, 15330 <ull_cp_conn_param_req_reply+0x10>
   1532a:	7a03      	ldrb	r3, [r0, #8]
   1532c:	2b09      	cmp	r3, #9
   1532e:	d000      	beq.n	15332 <ull_cp_conn_param_req_reply+0x12>
}
   15330:	bd10      	pop	{r4, pc}
		llcp_rp_conn_param_req_reply(conn, ctx);
   15332:	4601      	mov	r1, r0
   15334:	4620      	mov	r0, r4
}
   15336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_rp_conn_param_req_reply(conn, ctx);
   1533a:	f002 b89d 	b.w	17478 <llcp_rp_conn_param_req_reply>
   1533e:	bf00      	nop

00015340 <ull_cp_conn_param_req_neg_reply>:
{
   15340:	b538      	push	{r3, r4, r5, lr}
   15342:	4604      	mov	r4, r0
   15344:	460d      	mov	r5, r1
	ctx = llcp_rr_peek(conn);
   15346:	f002 fb57 	bl	179f8 <llcp_rr_peek>
	if (ctx && ctx->proc == PROC_CONN_PARAM_REQ) {
   1534a:	b110      	cbz	r0, 15352 <ull_cp_conn_param_req_neg_reply+0x12>
   1534c:	7a03      	ldrb	r3, [r0, #8]
   1534e:	2b09      	cmp	r3, #9
   15350:	d000      	beq.n	15354 <ull_cp_conn_param_req_neg_reply+0x14>
}
   15352:	bd38      	pop	{r3, r4, r5, pc}
		ctx->data.cu.error = error_code;
   15354:	7705      	strb	r5, [r0, #28]
		llcp_rp_conn_param_req_neg_reply(conn, ctx);
   15356:	4601      	mov	r1, r0
   15358:	4620      	mov	r0, r4
}
   1535a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_rp_conn_param_req_neg_reply(conn, ctx);
   1535e:	f002 b88f 	b.w	17480 <llcp_rp_conn_param_req_neg_reply>
   15362:	bf00      	nop

00015364 <ull_cp_remote_cpr_pending>:
{
   15364:	b508      	push	{r3, lr}
	ctx = llcp_rr_peek(conn);
   15366:	f002 fb47 	bl	179f8 <llcp_rr_peek>
	return (ctx && ctx->proc == PROC_CONN_PARAM_REQ);
   1536a:	b128      	cbz	r0, 15378 <ull_cp_remote_cpr_pending+0x14>
   1536c:	7a00      	ldrb	r0, [r0, #8]
   1536e:	f1a0 0009 	sub.w	r0, r0, #9
   15372:	fab0 f080 	clz	r0, r0
   15376:	0940      	lsrs	r0, r0, #5
}
   15378:	bd08      	pop	{r3, pc}
   1537a:	bf00      	nop

0001537c <ull_cp_tx_ack>:
	/* consider unsupported and unknows PDUs as valid */
	return true;
}

void ull_cp_tx_ack(struct ll_conn *conn, struct node_tx *tx)
{
   1537c:	b538      	push	{r3, r4, r5, lr}
   1537e:	4605      	mov	r5, r0
   15380:	460c      	mov	r4, r1
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
   15382:	f000 febd 	bl	16100 <llcp_lr_peek>
	if (ctx && ctx->tx_ack == tx) {
   15386:	b110      	cbz	r0, 1538e <ull_cp_tx_ack+0x12>
   15388:	6943      	ldr	r3, [r0, #20]
   1538a:	42a3      	cmp	r3, r4
   1538c:	d00e      	beq.n	153ac <ull_cp_tx_ack+0x30>
		/* TX ack re. local request */
		llcp_lr_tx_ack(conn, ctx, tx);
	}

	ctx = llcp_rr_peek(conn);
   1538e:	4628      	mov	r0, r5
   15390:	f002 fb32 	bl	179f8 <llcp_rr_peek>
	if (ctx && ctx->tx_ack == tx) {
   15394:	b110      	cbz	r0, 1539c <ull_cp_tx_ack+0x20>
   15396:	6943      	ldr	r3, [r0, #20]
   15398:	42a3      	cmp	r3, r4
   1539a:	d000      	beq.n	1539e <ull_cp_tx_ack+0x22>
		/* TX ack re. remote response */
		llcp_rr_tx_ack(conn, ctx, tx);
	}
}
   1539c:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rr_tx_ack(conn, ctx, tx);
   1539e:	4622      	mov	r2, r4
   153a0:	4601      	mov	r1, r0
   153a2:	4628      	mov	r0, r5
}
   153a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_rr_tx_ack(conn, ctx, tx);
   153a8:	f002 bb7c 	b.w	17aa4 <llcp_rr_tx_ack>
		llcp_lr_tx_ack(conn, ctx, tx);
   153ac:	4601      	mov	r1, r0
   153ae:	4622      	mov	r2, r4
   153b0:	4628      	mov	r0, r5
   153b2:	f000 ffc9 	bl	16348 <llcp_lr_tx_ack>
   153b6:	e7ea      	b.n	1538e <ull_cp_tx_ack+0x12>

000153b8 <ull_cp_tx_ntf>:

void ull_cp_tx_ntf(struct ll_conn *conn)
{
   153b8:	b510      	push	{r4, lr}
   153ba:	4604      	mov	r4, r0
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
   153bc:	f000 fea0 	bl	16100 <llcp_lr_peek>
	if (ctx) {
   153c0:	b118      	cbz	r0, 153ca <ull_cp_tx_ntf+0x12>
   153c2:	4601      	mov	r1, r0
		/* TX notifications towards Host */
		llcp_lr_tx_ntf(conn, ctx);
   153c4:	4620      	mov	r0, r4
   153c6:	f000 ffdf 	bl	16388 <llcp_lr_tx_ntf>
	}

	ctx = llcp_rr_peek(conn);
   153ca:	4620      	mov	r0, r4
   153cc:	f002 fb14 	bl	179f8 <llcp_rr_peek>
	if (ctx) {
   153d0:	4601      	mov	r1, r0
   153d2:	b120      	cbz	r0, 153de <ull_cp_tx_ntf+0x26>
		/* TX notifications towards Host */
		llcp_rr_tx_ntf(conn, ctx);
   153d4:	4620      	mov	r0, r4
	}
}
   153d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_rr_tx_ntf(conn, ctx);
   153da:	f002 bb79 	b.w	17ad0 <llcp_rr_tx_ntf>
}
   153de:	bd10      	pop	{r4, pc}

000153e0 <ull_cp_rx>:

void ull_cp_rx(struct ll_conn *conn, struct node_rx_pdu *rx)
{
   153e0:	b570      	push	{r4, r5, r6, lr}
	if (pdu->len < 1) {
   153e2:	7f4b      	ldrb	r3, [r1, #29]
{
   153e4:	460c      	mov	r4, r1
   153e6:	4605      	mov	r5, r0
	if (pdu->len < 1) {
   153e8:	2b00      	cmp	r3, #0
   153ea:	d03e      	beq.n	1546a <ull_cp_rx+0x8a>
	if (pdu->llctrl.opcode < ARRAY_SIZE(pdu_validate)) {
   153ec:	7fcb      	ldrb	r3, [r1, #31]
   153ee:	2b1e      	cmp	r3, #30
   153f0:	d929      	bls.n	15446 <ull_cp_rx+0x66>
		/*  Process LL_TERMINATE_IND PDU's as new procedure */
		ctx_l = NULL;
		ctx_r = NULL;
	} else {
		/* Query local and remote activity */
		ctx_l = llcp_lr_peek(conn);
   153f2:	4628      	mov	r0, r5
   153f4:	f000 fe84 	bl	16100 <llcp_lr_peek>
   153f8:	4606      	mov	r6, r0
		ctx_r = llcp_rr_peek(conn);
   153fa:	4628      	mov	r0, r5
   153fc:	f002 fafc 	bl	179f8 <llcp_rr_peek>
   15400:	4601      	mov	r1, r0
	}

	if (ctx_l) {
   15402:	2e00      	cmp	r6, #0
   15404:	d05c      	beq.n	154c0 <ull_cp_rx+0xe0>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   15406:	7af2      	ldrb	r2, [r6, #11]
   15408:	7fe3      	ldrb	r3, [r4, #31]
		/* Local active procedure */

		if (ctx_r) {
   1540a:	2800      	cmp	r0, #0
   1540c:	d046      	beq.n	1549c <ull_cp_rx+0xbc>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   1540e:	4293      	cmp	r3, r2
   15410:	7ac0      	ldrb	r0, [r0, #11]
   15412:	d06f      	beq.n	154f4 <ull_cp_rx+0x114>
   15414:	7b32      	ldrb	r2, [r6, #12]
   15416:	2a00      	cmp	r2, #0
   15418:	d05a      	beq.n	154d0 <ull_cp_rx+0xf0>
   1541a:	4298      	cmp	r0, r3
   1541c:	d077      	beq.n	1550e <ull_cp_rx+0x12e>
   1541e:	7b0a      	ldrb	r2, [r1, #12]
   15420:	2a00      	cmp	r2, #0
   15422:	d174      	bne.n	1550e <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   15424:	2b07      	cmp	r3, #7
   15426:	f000 80a3 	beq.w	15570 <ull_cp_rx+0x190>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   1542a:	2b11      	cmp	r3, #17
   1542c:	d104      	bne.n	15438 <ull_cp_rx+0x58>
   1542e:	f894 2020 	ldrb.w	r2, [r4, #32]
   15432:	7b4b      	ldrb	r3, [r1, #13]
   15434:	429a      	cmp	r2, r3
   15436:	d06a      	beq.n	1550e <ull_cp_rx+0x12e>
				 * Expected local procedure PDU
				 * No remote active procedure
				 */

				/* Process PDU in local procedure */
				llcp_lr_rx(conn, ctx_l, rx);
   15438:	4622      	mov	r2, r4
   1543a:	4631      	mov	r1, r6
   1543c:	4628      	mov	r0, r5
		 */

		/* Process PDU as a new remote request */
		llcp_rr_new(conn, rx, pdu_valid);
	}
}
   1543e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				llcp_lr_rx(conn, ctx_l, rx);
   15442:	f000 bf49 	b.w	162d8 <llcp_lr_rx>
		cb = pdu_validate[pdu->llctrl.opcode].validate_cb;
   15446:	4a4e      	ldr	r2, [pc, #312]	; (15580 <ull_cp_rx+0x1a0>)
   15448:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		if (cb) {
   1544c:	b122      	cbz	r2, 15458 <ull_cp_rx+0x78>
			return cb(pdu);
   1544e:	f101 001c 	add.w	r0, r1, #28
   15452:	4790      	blx	r2
	if (!pdu_valid) {
   15454:	b158      	cbz	r0, 1546e <ull_cp_rx+0x8e>
	return pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
   15456:	7fe3      	ldrb	r3, [r4, #31]
	} else if (pdu_is_terminate(pdu)) {
   15458:	2b02      	cmp	r3, #2
   1545a:	d1ca      	bne.n	153f2 <ull_cp_rx+0x12>
{
   1545c:	2201      	movs	r2, #1
		llcp_rr_new(conn, rx, pdu_valid);
   1545e:	4621      	mov	r1, r4
   15460:	4628      	mov	r0, r5
}
   15462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_new(conn, rx, pdu_valid);
   15466:	f002 bb5d 	b.w	17b24 <llcp_rr_new>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   1546a:	23ff      	movs	r3, #255	; 0xff
   1546c:	77cb      	strb	r3, [r1, #31]
		ctx = llcp_lr_peek(conn);
   1546e:	4628      	mov	r0, r5
   15470:	f000 fe46 	bl	16100 <llcp_lr_peek>
		if (ctx && pdu_is_expected(pdu, ctx)) {
   15474:	b128      	cbz	r0, 15482 <ull_cp_rx+0xa2>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   15476:	7fe2      	ldrb	r2, [r4, #31]
   15478:	7ac3      	ldrb	r3, [r0, #11]
   1547a:	429a      	cmp	r2, r3
   1547c:	d00d      	beq.n	1549a <ull_cp_rx+0xba>
   1547e:	7b03      	ldrb	r3, [r0, #12]
   15480:	b95b      	cbnz	r3, 1549a <ull_cp_rx+0xba>
		ctx = llcp_rr_peek(conn);
   15482:	4628      	mov	r0, r5
   15484:	f002 fab8 	bl	179f8 <llcp_rr_peek>
		if (ctx && pdu_is_expected(pdu, ctx)) {
   15488:	2800      	cmp	r0, #0
   1548a:	d05e      	beq.n	1554a <ull_cp_rx+0x16a>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   1548c:	7fe2      	ldrb	r2, [r4, #31]
   1548e:	7ac3      	ldrb	r3, [r0, #11]
   15490:	429a      	cmp	r2, r3
   15492:	d002      	beq.n	1549a <ull_cp_rx+0xba>
   15494:	7b02      	ldrb	r2, [r0, #12]
   15496:	2a00      	cmp	r2, #0
   15498:	d0e1      	beq.n	1545e <ull_cp_rx+0x7e>
}
   1549a:	bd70      	pop	{r4, r5, r6, pc}
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   1549c:	4293      	cmp	r3, r2
   1549e:	d0cb      	beq.n	15438 <ull_cp_rx+0x58>
   154a0:	7b32      	ldrb	r2, [r6, #12]
   154a2:	2a00      	cmp	r2, #0
   154a4:	d1c8      	bne.n	15438 <ull_cp_rx+0x58>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   154a6:	2b07      	cmp	r3, #7
   154a8:	d05c      	beq.n	15564 <ull_cp_rx+0x184>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   154aa:	2b11      	cmp	r3, #17
   154ac:	d05a      	beq.n	15564 <ull_cp_rx+0x184>
	return (pdu_is_reject_ext(pdu, ctx) || pdu_is_reject(pdu, ctx));
   154ae:	2b0d      	cmp	r3, #13
   154b0:	d0c2      	beq.n	15438 <ull_cp_rx+0x58>
				llcp_rr_new(conn, rx, true);
   154b2:	4621      	mov	r1, r4
   154b4:	4628      	mov	r0, r5
   154b6:	2201      	movs	r2, #1
}
   154b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				llcp_rr_new(conn, rx, true);
   154bc:	f002 bb32 	b.w	17b24 <llcp_rr_new>
	} else if (ctx_r) {
   154c0:	2800      	cmp	r0, #0
   154c2:	d0cb      	beq.n	1545c <ull_cp_rx+0x7c>
		llcp_rr_rx(conn, ctx_r, rx);
   154c4:	4622      	mov	r2, r4
   154c6:	4628      	mov	r0, r5
}
   154c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_rx(conn, ctx_r, rx);
   154cc:	f002 baaa 	b.w	17a24 <llcp_rr_rx>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   154d0:	2b07      	cmp	r3, #7
   154d2:	d03c      	beq.n	1554e <ull_cp_rx+0x16e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   154d4:	2b11      	cmp	r3, #17
   154d6:	d028      	beq.n	1552a <ull_cp_rx+0x14a>
	return (pdu_is_reject_ext(pdu, ctx) || pdu_is_reject(pdu, ctx));
   154d8:	f1b3 020d 	subs.w	r2, r3, #13
   154dc:	bf18      	it	ne
   154de:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   154e0:	4298      	cmp	r0, r3
   154e2:	d02f      	beq.n	15544 <ull_cp_rx+0x164>
   154e4:	7b0b      	ldrb	r3, [r1, #12]
   154e6:	bb6b      	cbnz	r3, 15544 <ull_cp_rx+0x164>
			if (unexpected_l && unexpected_r) {
   154e8:	2a00      	cmp	r2, #0
   154ea:	d0a5      	beq.n	15438 <ull_cp_rx+0x58>
				conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   154ec:	2316      	movs	r3, #22
   154ee:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
   154f2:	bd70      	pop	{r4, r5, r6, pc}
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   154f4:	4298      	cmp	r0, r3
   154f6:	d00a      	beq.n	1550e <ull_cp_rx+0x12e>
   154f8:	7b0a      	ldrb	r2, [r1, #12]
   154fa:	b942      	cbnz	r2, 1550e <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   154fc:	2b07      	cmp	r3, #7
   154fe:	d037      	beq.n	15570 <ull_cp_rx+0x190>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   15500:	2b11      	cmp	r3, #17
   15502:	d199      	bne.n	15438 <ull_cp_rx+0x58>
   15504:	7b4a      	ldrb	r2, [r1, #13]
   15506:	f894 3020 	ldrb.w	r3, [r4, #32]
   1550a:	429a      	cmp	r2, r3
   1550c:	d194      	bne.n	15438 <ull_cp_rx+0x58>
				LL_ASSERT(0);
   1550e:	4a1d      	ldr	r2, [pc, #116]	; (15584 <ull_cp_rx+0x1a4>)
   15510:	491d      	ldr	r1, [pc, #116]	; (15588 <ull_cp_rx+0x1a8>)
   15512:	481e      	ldr	r0, [pc, #120]	; (1558c <ull_cp_rx+0x1ac>)
   15514:	f240 63f5 	movw	r3, #1781	; 0x6f5
   15518:	f00c f918 	bl	2174c <assert_print>
   1551c:	4040      	eors	r0, r0
   1551e:	f380 8811 	msr	BASEPRI, r0
   15522:	f04f 0003 	mov.w	r0, #3
   15526:	df02      	svc	2
}
   15528:	bd70      	pop	{r4, r5, r6, pc}
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   1552a:	7b72      	ldrb	r2, [r6, #13]
   1552c:	f894 3020 	ldrb.w	r3, [r4, #32]
   15530:	1ad2      	subs	r2, r2, r3
   15532:	bf18      	it	ne
   15534:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   15536:	2811      	cmp	r0, #17
   15538:	d004      	beq.n	15544 <ull_cp_rx+0x164>
   1553a:	7b08      	ldrb	r0, [r1, #12]
   1553c:	b910      	cbnz	r0, 15544 <ull_cp_rx+0x164>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   1553e:	7b48      	ldrb	r0, [r1, #13]
   15540:	4298      	cmp	r0, r3
   15542:	d1d1      	bne.n	154e8 <ull_cp_rx+0x108>
			if (unexpected_l && unexpected_r) {
   15544:	2a00      	cmp	r2, #0
   15546:	d1bd      	bne.n	154c4 <ull_cp_rx+0xe4>
   15548:	e7e1      	b.n	1550e <ull_cp_rx+0x12e>
   1554a:	4602      	mov	r2, r0
   1554c:	e787      	b.n	1545e <ull_cp_rx+0x7e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1554e:	7b72      	ldrb	r2, [r6, #13]
   15550:	f894 3020 	ldrb.w	r3, [r4, #32]
   15554:	1ad2      	subs	r2, r2, r3
   15556:	bf18      	it	ne
   15558:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   1555a:	2807      	cmp	r0, #7
   1555c:	d1ed      	bne.n	1553a <ull_cp_rx+0x15a>
			if (unexpected_l && unexpected_r) {
   1555e:	2a00      	cmp	r2, #0
   15560:	d1b0      	bne.n	154c4 <ull_cp_rx+0xe4>
   15562:	e7d4      	b.n	1550e <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   15564:	7b72      	ldrb	r2, [r6, #13]
   15566:	f894 3020 	ldrb.w	r3, [r4, #32]
   1556a:	429a      	cmp	r2, r3
   1556c:	d1a1      	bne.n	154b2 <ull_cp_rx+0xd2>
   1556e:	e763      	b.n	15438 <ull_cp_rx+0x58>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   15570:	7b4a      	ldrb	r2, [r1, #13]
   15572:	f894 3020 	ldrb.w	r3, [r4, #32]
   15576:	429a      	cmp	r2, r3
   15578:	f47f af5e 	bne.w	15438 <ull_cp_rx+0x58>
   1557c:	e7c7      	b.n	1550e <ull_cp_rx+0x12e>
   1557e:	bf00      	nop
   15580:	00028ff0 	.word	0x00028ff0
   15584:	00028fa0 	.word	0x00028fa0
   15588:	000286fc 	.word	0x000286fc
   1558c:	0002866c 	.word	0x0002866c

00015590 <rp_comm_ntf>:
{
	llcp_ntf_encode_length_change(conn, pdu);
}

static void rp_comm_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   15590:	b570      	push	{r4, r5, r6, lr}
   15592:	4605      	mov	r5, r0
   15594:	460e      	mov	r6, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	ARG_UNUSED(pdu);
	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   15596:	f7ff fbf5 	bl	14d84 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   1559a:	4604      	mov	r4, r0
   1559c:	b320      	cbz	r0, 155e8 <rp_comm_ntf+0x58>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   1559e:	2303      	movs	r3, #3
   155a0:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   155a2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   155a4:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;
	switch (ctx->proc) {
   155a6:	7a33      	ldrb	r3, [r6, #8]
   155a8:	2b0c      	cmp	r3, #12
   155aa:	d012      	beq.n	155d2 <rp_comm_ntf+0x42>
	case PROC_DATA_LENGTH_UPDATE:
		rp_comm_ntf_length_change(conn, ctx, pdu);
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
	default:
		LL_ASSERT(0);
   155ac:	4a15      	ldr	r2, [pc, #84]	; (15604 <rp_comm_ntf+0x74>)
   155ae:	4916      	ldr	r1, [pc, #88]	; (15608 <rp_comm_ntf+0x78>)
   155b0:	4816      	ldr	r0, [pc, #88]	; (1560c <rp_comm_ntf+0x7c>)
   155b2:	f240 4383 	movw	r3, #1155	; 0x483
   155b6:	f00c f8c9 	bl	2174c <assert_print>
   155ba:	4040      	eors	r0, r0
   155bc:	f380 8811 	msr	BASEPRI, r0
   155c0:	f04f 0003 	mov.w	r0, #3
   155c4:	df02      	svc	2
		break;
	}

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   155c6:	6820      	ldr	r0, [r4, #0]
   155c8:	4621      	mov	r1, r4
}
   155ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   155ce:	f7fb bffd 	b.w	115cc <ll_rx_put_sched>
	llcp_ntf_encode_length_change(conn, pdu);
   155d2:	f104 011c 	add.w	r1, r4, #28
   155d6:	4628      	mov	r0, r5
   155d8:	f001 fa18 	bl	16a0c <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
   155dc:	6820      	ldr	r0, [r4, #0]
   155de:	4621      	mov	r1, r4
}
   155e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   155e4:	f7fb bff2 	b.w	115cc <ll_rx_put_sched>
	LL_ASSERT(ntf);
   155e8:	4a06      	ldr	r2, [pc, #24]	; (15604 <rp_comm_ntf+0x74>)
   155ea:	4909      	ldr	r1, [pc, #36]	; (15610 <rp_comm_ntf+0x80>)
   155ec:	4807      	ldr	r0, [pc, #28]	; (1560c <rp_comm_ntf+0x7c>)
   155ee:	f240 4374 	movw	r3, #1140	; 0x474
   155f2:	f00c f8ab 	bl	2174c <assert_print>
   155f6:	4040      	eors	r0, r0
   155f8:	f380 8811 	msr	BASEPRI, r0
   155fc:	f04f 0003 	mov.w	r0, #3
   15600:	df02      	svc	2
   15602:	e7cc      	b.n	1559e <rp_comm_ntf+0xe>
   15604:	0002906c 	.word	0x0002906c
   15608:	000286fc 	.word	0x000286fc
   1560c:	0002866c 	.word	0x0002866c
   15610:	00028f40 	.word	0x00028f40

00015614 <lp_comm_tx>:
{
   15614:	b570      	push	{r4, r5, r6, lr}
   15616:	4606      	mov	r6, r0
   15618:	460c      	mov	r4, r1
	tx = llcp_tx_alloc(conn, ctx);
   1561a:	f7ff fb97 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   1561e:	4605      	mov	r5, r0
   15620:	2800      	cmp	r0, #0
   15622:	d060      	beq.n	156e6 <lp_comm_tx+0xd2>
	switch (ctx->proc) {
   15624:	7a23      	ldrb	r3, [r4, #8]
   15626:	3b01      	subs	r3, #1
	pdu = (struct pdu_data *)tx->pdu;
   15628:	1d29      	adds	r1, r5, #4
	switch (ctx->proc) {
   1562a:	2b0b      	cmp	r3, #11
   1562c:	d807      	bhi.n	1563e <lp_comm_tx+0x2a>
   1562e:	e8df f003 	tbb	[pc, r3]
   15632:	2620      	.short	0x2620
   15634:	0606332c 	.word	0x0606332c
   15638:	39060606 	.word	0x39060606
   1563c:	4006      	.short	0x4006
		LL_ASSERT(0);
   1563e:	4a30      	ldr	r2, [pc, #192]	; (15700 <lp_comm_tx+0xec>)
   15640:	4930      	ldr	r1, [pc, #192]	; (15704 <lp_comm_tx+0xf0>)
   15642:	4831      	ldr	r0, [pc, #196]	; (15708 <lp_comm_tx+0xf4>)
   15644:	23d1      	movs	r3, #209	; 0xd1
   15646:	f00c f881 	bl	2174c <assert_print>
   1564a:	4040      	eors	r0, r0
   1564c:	f380 8811 	msr	BASEPRI, r0
   15650:	f04f 0003 	mov.w	r0, #3
   15654:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
   15656:	79eb      	ldrb	r3, [r5, #7]
   15658:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   1565a:	4629      	mov	r1, r5
   1565c:	4630      	mov	r0, r6
   1565e:	f7ff fb93 	bl	14d88 <llcp_tx_enqueue>
	if (ctx->proc != PROC_TERMINATE) {
   15662:	7a23      	ldrb	r3, [r4, #8]
   15664:	2b0a      	cmp	r3, #10
   15666:	d02a      	beq.n	156be <lp_comm_tx+0xaa>
		llcp_lr_prt_restart(conn);
   15668:	4630      	mov	r0, r6
}
   1566a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_prt_restart(conn);
   1566e:	f000 be25 	b.w	162bc <llcp_lr_prt_restart>
		llcp_pdu_encode_ping_req(pdu);
   15672:	4608      	mov	r0, r1
   15674:	f000 ff0a 	bl	1648c <llcp_pdu_encode_ping_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   15678:	2313      	movs	r3, #19
   1567a:	72e3      	strb	r3, [r4, #11]
		break;
   1567c:	e7eb      	b.n	15656 <lp_comm_tx+0x42>
		llcp_pdu_encode_feature_req(conn, pdu);
   1567e:	4630      	mov	r0, r6
   15680:	f000 ff38 	bl	164f4 <llcp_pdu_encode_feature_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   15684:	2309      	movs	r3, #9
   15686:	72e3      	strb	r3, [r4, #11]
		break;
   15688:	e7e5      	b.n	15656 <lp_comm_tx+0x42>
		llcp_pdu_encode_min_used_chans_ind(ctx, pdu);
   1568a:	4620      	mov	r0, r4
   1568c:	f000 ffca 	bl	16624 <llcp_pdu_encode_min_used_chans_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   15690:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
   15692:	6165      	str	r5, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   15694:	72e3      	strb	r3, [r4, #11]
		break;
   15696:	e7de      	b.n	15656 <lp_comm_tx+0x42>
		llcp_pdu_encode_version_ind(pdu);
   15698:	4608      	mov	r0, r1
   1569a:	f000 ffe1 	bl	16660 <llcp_pdu_encode_version_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1569e:	230c      	movs	r3, #12
   156a0:	72e3      	strb	r3, [r4, #11]
		break;
   156a2:	e7d8      	b.n	15656 <lp_comm_tx+0x42>
		llcp_pdu_encode_terminate_ind(ctx, pdu);
   156a4:	4620      	mov	r0, r4
   156a6:	f000 ffcd 	bl	16644 <llcp_pdu_encode_terminate_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   156aa:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
   156ac:	6165      	str	r5, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   156ae:	72e3      	strb	r3, [r4, #11]
		break;
   156b0:	e7d1      	b.n	15656 <lp_comm_tx+0x42>
		llcp_pdu_encode_length_req(conn, pdu);
   156b2:	4630      	mov	r0, r6
   156b4:	f001 f97a 	bl	169ac <llcp_pdu_encode_length_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   156b8:	2315      	movs	r3, #21
   156ba:	72e3      	strb	r3, [r4, #11]
		break;
   156bc:	e7cb      	b.n	15656 <lp_comm_tx+0x42>
		const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
   156be:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
   156c0:	f8b6 1184 	ldrh.w	r1, [r6, #388]	; 0x184
		const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
   156c4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   156c8:	fb02 f303 	mul.w	r3, r2, r3
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
   156cc:	f242 7210 	movw	r2, #10000	; 0x2710
   156d0:	fb02 3101 	mla	r1, r2, r1, r3
   156d4:	3901      	subs	r1, #1
		llcp_lr_prt_restart_with_value(conn, sto_reload);
   156d6:	4630      	mov	r0, r6
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
   156d8:	fbb1 f1f3 	udiv	r1, r1, r3
}
   156dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_prt_restart_with_value(conn, sto_reload);
   156e0:	b289      	uxth	r1, r1
   156e2:	f000 bdf1 	b.w	162c8 <llcp_lr_prt_restart_with_value>
	LL_ASSERT(tx);
   156e6:	4a06      	ldr	r2, [pc, #24]	; (15700 <lp_comm_tx+0xec>)
   156e8:	4908      	ldr	r1, [pc, #32]	; (1570c <lp_comm_tx+0xf8>)
   156ea:	4807      	ldr	r0, [pc, #28]	; (15708 <lp_comm_tx+0xf4>)
   156ec:	2396      	movs	r3, #150	; 0x96
   156ee:	f00c f82d 	bl	2174c <assert_print>
   156f2:	4040      	eors	r0, r0
   156f4:	f380 8811 	msr	BASEPRI, r0
   156f8:	f04f 0003 	mov.w	r0, #3
   156fc:	df02      	svc	2
   156fe:	e791      	b.n	15624 <lp_comm_tx+0x10>
   15700:	0002906c 	.word	0x0002906c
   15704:	000286fc 	.word	0x000286fc
   15708:	0002866c 	.word	0x0002866c
   1570c:	00028d90 	.word	0x00028d90

00015710 <rp_comm_tx_proxy>:
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static bool rp_comm_tx_proxy(struct ll_conn *conn, struct proc_ctx *ctx, const bool complete)
{
   15710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15714:	4607      	mov	r7, r0
   15716:	460c      	mov	r4, r1
   15718:	4616      	mov	r6, r2
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   1571a:	f002 f971 	bl	17a00 <llcp_rr_ispaused>
   1571e:	b128      	cbz	r0, 1572c <rp_comm_tx_proxy+0x1c>
		ctx->state = RP_COMMON_STATE_WAIT_TX;
   15720:	2303      	movs	r3, #3
   15722:	72a3      	strb	r3, [r4, #10]
		return false;
   15724:	2500      	movs	r5, #0
		llcp_rr_complete(conn);
		ctx->state = RP_COMMON_STATE_IDLE;
	}

	return true;
}
   15726:	4628      	mov	r0, r5
   15728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   1572c:	4621      	mov	r1, r4
   1572e:	4638      	mov	r0, r7
   15730:	f7ff fb04 	bl	14d3c <llcp_tx_alloc_peek>
   15734:	4605      	mov	r5, r0
   15736:	2800      	cmp	r0, #0
   15738:	d0f2      	beq.n	15720 <rp_comm_tx_proxy+0x10>
	tx = llcp_tx_alloc(conn, ctx);
   1573a:	4621      	mov	r1, r4
   1573c:	4638      	mov	r0, r7
   1573e:	f7ff fb05 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   15742:	4680      	mov	r8, r0
   15744:	b370      	cbz	r0, 157a4 <rp_comm_tx_proxy+0x94>
	switch (ctx->proc) {
   15746:	7a23      	ldrb	r3, [r4, #8]
   15748:	3b01      	subs	r3, #1
	pdu = (struct pdu_data *)tx->pdu;
   1574a:	f108 0104 	add.w	r1, r8, #4
	switch (ctx->proc) {
   1574e:	2b0b      	cmp	r3, #11
   15750:	d807      	bhi.n	15762 <rp_comm_tx_proxy+0x52>
   15752:	e8df f003 	tbb	[pc, r3]
   15756:	4335      	.short	0x4335
   15758:	06064906 	.word	0x06064906
   1575c:	06060606 	.word	0x06060606
   15760:	3b06      	.short	0x3b06
		LL_ASSERT(0);
   15762:	4a24      	ldr	r2, [pc, #144]	; (157f4 <rp_comm_tx_proxy+0xe4>)
   15764:	4924      	ldr	r1, [pc, #144]	; (157f8 <rp_comm_tx_proxy+0xe8>)
   15766:	4825      	ldr	r0, [pc, #148]	; (157fc <rp_comm_tx_proxy+0xec>)
   15768:	f240 434e 	movw	r3, #1102	; 0x44e
   1576c:	f00b ffee 	bl	2174c <assert_print>
   15770:	4040      	eors	r0, r0
   15772:	f380 8811 	msr	BASEPRI, r0
   15776:	f04f 0003 	mov.w	r0, #3
   1577a:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
   1577c:	f898 3007 	ldrb.w	r3, [r8, #7]
   15780:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   15782:	4641      	mov	r1, r8
   15784:	4638      	mov	r0, r7
   15786:	f7ff faff 	bl	14d88 <llcp_tx_enqueue>
	llcp_rr_prt_restart(conn);
   1578a:	4638      	mov	r0, r7
   1578c:	f002 f940 	bl	17a10 <llcp_rr_prt_restart>
	ctx->state = RP_COMMON_STATE_WAIT_TX_ACK;
   15790:	2304      	movs	r3, #4
   15792:	72a3      	strb	r3, [r4, #10]
	if (complete) {
   15794:	2e00      	cmp	r6, #0
   15796:	d0c6      	beq.n	15726 <rp_comm_tx_proxy+0x16>
		llcp_rr_complete(conn);
   15798:	4638      	mov	r0, r7
   1579a:	f002 f9b7 	bl	17b0c <llcp_rr_complete>
		ctx->state = RP_COMMON_STATE_IDLE;
   1579e:	2300      	movs	r3, #0
   157a0:	72a3      	strb	r3, [r4, #10]
   157a2:	e7c0      	b.n	15726 <rp_comm_tx_proxy+0x16>
	LL_ASSERT(tx);
   157a4:	4a13      	ldr	r2, [pc, #76]	; (157f4 <rp_comm_tx_proxy+0xe4>)
   157a6:	4916      	ldr	r1, [pc, #88]	; (15800 <rp_comm_tx_proxy+0xf0>)
   157a8:	4814      	ldr	r0, [pc, #80]	; (157fc <rp_comm_tx_proxy+0xec>)
   157aa:	f44f 6381 	mov.w	r3, #1032	; 0x408
   157ae:	f00b ffcd 	bl	2174c <assert_print>
   157b2:	4040      	eors	r0, r0
   157b4:	f380 8811 	msr	BASEPRI, r0
   157b8:	f04f 0003 	mov.w	r0, #3
   157bc:	df02      	svc	2
   157be:	e7c2      	b.n	15746 <rp_comm_tx_proxy+0x36>
		llcp_pdu_encode_ping_rsp(pdu);
   157c0:	4608      	mov	r0, r1
   157c2:	f000 fe6d 	bl	164a0 <llcp_pdu_encode_ping_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   157c6:	23ff      	movs	r3, #255	; 0xff
   157c8:	72e3      	strb	r3, [r4, #11]
		break;
   157ca:	e7d7      	b.n	1577c <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_length_rsp(conn, pdu);
   157cc:	4638      	mov	r0, r7
   157ce:	f001 f905 	bl	169dc <llcp_pdu_encode_length_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   157d2:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
   157d4:	f8c4 8014 	str.w	r8, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   157d8:	72e3      	strb	r3, [r4, #11]
		break;
   157da:	e7cf      	b.n	1577c <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_feature_rsp(conn, pdu);
   157dc:	4638      	mov	r0, r7
   157de:	f000 fead 	bl	1653c <llcp_pdu_encode_feature_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   157e2:	23ff      	movs	r3, #255	; 0xff
   157e4:	72e3      	strb	r3, [r4, #11]
		break;
   157e6:	e7c9      	b.n	1577c <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_version_ind(pdu);
   157e8:	4608      	mov	r0, r1
   157ea:	f000 ff39 	bl	16660 <llcp_pdu_encode_version_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   157ee:	23ff      	movs	r3, #255	; 0xff
   157f0:	72e3      	strb	r3, [r4, #11]
		break;
   157f2:	e7c3      	b.n	1577c <rp_comm_tx_proxy+0x6c>
   157f4:	0002906c 	.word	0x0002906c
   157f8:	000286fc 	.word	0x000286fc
   157fc:	0002866c 	.word	0x0002866c
   15800:	00028d90 	.word	0x00028d90

00015804 <rp_comm_send_rsp.constprop.0>:

static void rp_comm_send_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   15804:	b538      	push	{r3, r4, r5, lr}
{
	switch (ctx->proc) {
   15806:	7a0b      	ldrb	r3, [r1, #8]
   15808:	3b01      	subs	r3, #1
static void rp_comm_send_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   1580a:	460c      	mov	r4, r1
   1580c:	4605      	mov	r5, r0
	switch (ctx->proc) {
   1580e:	2b0b      	cmp	r3, #11
   15810:	d807      	bhi.n	15822 <rp_comm_send_rsp.constprop.0+0x1e>
   15812:	e8df f003 	tbb	[pc, r3]
   15816:	1914      	.short	0x1914
   15818:	06062206 	.word	0x06062206
   1581c:	2e060606 	.word	0x2e060606
   15820:	3606      	.short	0x3606
		rp_comm_tx_proxy(conn, ctx, false);
		break;
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
	default:
		/* Unknown procedure */
		LL_ASSERT(0);
   15822:	4a1d      	ldr	r2, [pc, #116]	; (15898 <rp_comm_send_rsp.constprop.0+0x94>)
   15824:	491d      	ldr	r1, [pc, #116]	; (1589c <rp_comm_send_rsp.constprop.0+0x98>)
   15826:	481e      	ldr	r0, [pc, #120]	; (158a0 <rp_comm_send_rsp.constprop.0+0x9c>)
   15828:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   1582c:	f00b ff8e 	bl	2174c <assert_print>
   15830:	4040      	eors	r0, r0
   15832:	f380 8811 	msr	BASEPRI, r0
   15836:	f04f 0003 	mov.w	r0, #3
   1583a:	df02      	svc	2
	}
}
   1583c:	bd38      	pop	{r3, r4, r5, pc}
   1583e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_comm_tx_proxy(conn, ctx, true);
   15842:	2201      	movs	r2, #1
   15844:	f7ff bf64 	b.w	15710 <rp_comm_tx_proxy>
		if (rp_comm_tx_proxy(conn, ctx, true)) {
   15848:	2201      	movs	r2, #1
   1584a:	f7ff ff61 	bl	15710 <rp_comm_tx_proxy>
   1584e:	2800      	cmp	r0, #0
   15850:	d0f4      	beq.n	1583c <rp_comm_send_rsp.constprop.0+0x38>
			conn->llcp.fex.sent = 1;
   15852:	2301      	movs	r3, #1
   15854:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
}
   15858:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->llcp.vex.sent) {
   1585a:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
   1585e:	b9ab      	cbnz	r3, 1588c <rp_comm_send_rsp.constprop.0+0x88>
			if (rp_comm_tx_proxy(conn, ctx, true)) {
   15860:	2201      	movs	r2, #1
   15862:	f7ff ff55 	bl	15710 <rp_comm_tx_proxy>
   15866:	2800      	cmp	r0, #0
   15868:	d0e8      	beq.n	1583c <rp_comm_send_rsp.constprop.0+0x38>
				conn->llcp.vex.sent = 1;
   1586a:	2301      	movs	r3, #1
   1586c:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
}
   15870:	bd38      	pop	{r3, r4, r5, pc}
	llcp_rr_complete(conn);
   15872:	f002 f94b 	bl	17b0c <llcp_rr_complete>
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
   15876:	7f23      	ldrb	r3, [r4, #28]
	ctx->state = RP_COMMON_STATE_IDLE;
   15878:	2200      	movs	r2, #0
   1587a:	72a2      	strb	r2, [r4, #10]
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
   1587c:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
   15880:	bd38      	pop	{r3, r4, r5, pc}
   15882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_comm_tx_proxy(conn, ctx, false);
   15886:	2200      	movs	r2, #0
   15888:	f7ff bf42 	b.w	15710 <rp_comm_tx_proxy>
			llcp_rr_complete(conn);
   1588c:	f002 f93e 	bl	17b0c <llcp_rr_complete>
			ctx->state = RP_COMMON_STATE_IDLE;
   15890:	2300      	movs	r3, #0
   15892:	72a3      	strb	r3, [r4, #10]
}
   15894:	bd38      	pop	{r3, r4, r5, pc}
   15896:	bf00      	nop
   15898:	0002906c 	.word	0x0002906c
   1589c:	000286fc 	.word	0x000286fc
   158a0:	0002866c 	.word	0x0002866c

000158a4 <rp_comm_execute_fsm>:
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static void rp_comm_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
				void *param)
{
   158a4:	b570      	push	{r4, r5, r6, lr}
   158a6:	460c      	mov	r4, r1
	switch (ctx->state) {
   158a8:	7a89      	ldrb	r1, [r1, #10]
{
   158aa:	4605      	mov	r5, r0
	switch (ctx->state) {
   158ac:	2905      	cmp	r1, #5
   158ae:	f200 8095 	bhi.w	159dc <rp_comm_execute_fsm+0x138>
   158b2:	e8df f001 	tbb	[pc, r1]
   158b6:	0d08      	.short	0x0d08
   158b8:	03362e20 	.word	0x03362e20
	if (llcp_ntf_alloc_is_available()) {
   158bc:	f7ff fa52 	bl	14d64 <llcp_ntf_alloc_is_available>
   158c0:	2800      	cmp	r0, #0
   158c2:	d145      	bne.n	15950 <rp_comm_execute_fsm+0xac>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   158c4:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   158c6:	2a00      	cmp	r2, #0
   158c8:	d1fc      	bne.n	158c4 <rp_comm_execute_fsm+0x20>
		ctx->state = RP_COMMON_STATE_WAIT_RX;
   158ca:	2301      	movs	r3, #1
   158cc:	72a3      	strb	r3, [r4, #10]
}
   158ce:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   158d0:	2a02      	cmp	r2, #2
   158d2:	d1f7      	bne.n	158c4 <rp_comm_execute_fsm+0x20>
	ctx->response_opcode = pdu->llctrl.opcode;
   158d4:	78da      	ldrb	r2, [r3, #3]
   158d6:	7262      	strb	r2, [r4, #9]
	switch (pdu->llctrl.opcode) {
   158d8:	3a02      	subs	r2, #2
   158da:	2a12      	cmp	r2, #18
   158dc:	d850      	bhi.n	15980 <rp_comm_execute_fsm+0xdc>
   158de:	e8df f002 	tbb	[pc, r2]
   158e2:	4f74      	.short	0x4f74
   158e4:	4f4f4f4f 	.word	0x4f4f4f4f
   158e8:	4f4f4f6f 	.word	0x4f4f4f6f
   158ec:	4f4f4f6a 	.word	0x4f4f4f6a
   158f0:	4f1a4f4f 	.word	0x4f1a4f4f
   158f4:	5d          	.byte	0x5d
   158f5:	00          	.byte	0x00
	switch (evt) {
   158f6:	2a00      	cmp	r2, #0
   158f8:	d1e4      	bne.n	158c4 <rp_comm_execute_fsm+0x20>
		LL_ASSERT(ctx->proc == PROC_TERMINATE);
   158fa:	7a23      	ldrb	r3, [r4, #8]
   158fc:	2b0a      	cmp	r3, #10
   158fe:	d131      	bne.n	15964 <rp_comm_execute_fsm+0xc0>
	llcp_rr_complete(conn);
   15900:	4628      	mov	r0, r5
   15902:	f002 f903 	bl	17b0c <llcp_rr_complete>
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
   15906:	7f23      	ldrb	r3, [r4, #28]
	ctx->state = RP_COMMON_STATE_IDLE;
   15908:	2200      	movs	r2, #0
   1590a:	72a2      	strb	r2, [r4, #10]
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
   1590c:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
   15910:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   15912:	2a00      	cmp	r2, #0
   15914:	d1d6      	bne.n	158c4 <rp_comm_execute_fsm+0x20>
		rp_comm_send_rsp(conn, ctx, evt, param);
   15916:	4621      	mov	r1, r4
   15918:	4628      	mov	r0, r5
}
   1591a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_comm_send_rsp(conn, ctx, evt, param);
   1591e:	f7ff bf71 	b.w	15804 <rp_comm_send_rsp.constprop.0>
	switch (evt) {
   15922:	2a01      	cmp	r2, #1
   15924:	d1ce      	bne.n	158c4 <rp_comm_execute_fsm+0x20>
		switch (ctx->proc) {
   15926:	7a23      	ldrb	r3, [r4, #8]
   15928:	2b0c      	cmp	r3, #12
   1592a:	d1cb      	bne.n	158c4 <rp_comm_execute_fsm+0x20>
			uint8_t dle_changed = ull_dle_update_eff_tx(conn);
   1592c:	4628      	mov	r0, r5
   1592e:	f7fe f84d 	bl	139cc <ull_dle_update_eff_tx>
			dle_changed |= ctx->data.dle.ntf_dle;
   15932:	7f23      	ldrb	r3, [r4, #28]
   15934:	ea40 0603 	orr.w	r6, r0, r3
   15938:	b2f6      	uxtb	r6, r6
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   1593a:	2104      	movs	r1, #4
   1593c:	4628      	mov	r0, r5
   1593e:	f7ff fa3b 	bl	14db8 <llcp_tx_resume_data>
			if (dle_changed && !llcp_ntf_alloc_is_available()) {
   15942:	b14e      	cbz	r6, 15958 <rp_comm_execute_fsm+0xb4>
   15944:	f7ff fa0e 	bl	14d64 <llcp_ntf_alloc_is_available>
   15948:	b910      	cbnz	r0, 15950 <rp_comm_execute_fsm+0xac>
				ctx->state = RP_COMMON_STATE_WAIT_NTF;
   1594a:	2305      	movs	r3, #5
   1594c:	72a3      	strb	r3, [r4, #10]
}
   1594e:	bd70      	pop	{r4, r5, r6, pc}
					rp_comm_ntf(conn, ctx);
   15950:	4621      	mov	r1, r4
   15952:	4628      	mov	r0, r5
   15954:	f7ff fe1c 	bl	15590 <rp_comm_ntf>
				llcp_rr_complete(conn);
   15958:	4628      	mov	r0, r5
   1595a:	f002 f8d7 	bl	17b0c <llcp_rr_complete>
				ctx->state = RP_COMMON_STATE_IDLE;
   1595e:	2300      	movs	r3, #0
   15960:	72a3      	strb	r3, [r4, #10]
}
   15962:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(ctx->proc == PROC_TERMINATE);
   15964:	4a24      	ldr	r2, [pc, #144]	; (159f8 <rp_comm_execute_fsm+0x154>)
   15966:	4925      	ldr	r1, [pc, #148]	; (159fc <rp_comm_execute_fsm+0x158>)
   15968:	4825      	ldr	r0, [pc, #148]	; (15a00 <rp_comm_execute_fsm+0x15c>)
   1596a:	f240 531e 	movw	r3, #1310	; 0x51e
   1596e:	f00b feed 	bl	2174c <assert_print>
   15972:	4040      	eors	r0, r0
   15974:	f380 8811 	msr	BASEPRI, r0
   15978:	f04f 0003 	mov.w	r0, #3
   1597c:	df02      	svc	2
   1597e:	e7bf      	b.n	15900 <rp_comm_execute_fsm+0x5c>
		LL_ASSERT(0);
   15980:	4a1d      	ldr	r2, [pc, #116]	; (159f8 <rp_comm_execute_fsm+0x154>)
   15982:	4920      	ldr	r1, [pc, #128]	; (15a04 <rp_comm_execute_fsm+0x160>)
   15984:	481e      	ldr	r0, [pc, #120]	; (15a00 <rp_comm_execute_fsm+0x15c>)
   15986:	f240 33fd 	movw	r3, #1021	; 0x3fd
   1598a:	f00b fedf 	bl	2174c <assert_print>
   1598e:	4040      	eors	r0, r0
   15990:	f380 8811 	msr	BASEPRI, r0
   15994:	f04f 0003 	mov.w	r0, #3
   15998:	df02      	svc	2
   1599a:	e7bc      	b.n	15916 <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_length_req(conn, pdu);
   1599c:	4619      	mov	r1, r3
   1599e:	4628      	mov	r0, r5
   159a0:	f001 f84c 	bl	16a3c <llcp_pdu_decode_length_req>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   159a4:	2104      	movs	r1, #4
   159a6:	4628      	mov	r0, r5
   159a8:	f7ff f9f2 	bl	14d90 <llcp_tx_pause_data>
		ctx->data.dle.ntf_dle = ull_dle_update_eff_rx(conn);
   159ac:	4628      	mov	r0, r5
   159ae:	f7fd ffd5 	bl	1395c <ull_dle_update_eff_rx>
   159b2:	7720      	strb	r0, [r4, #28]
		break;
   159b4:	e7af      	b.n	15916 <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_version_ind(conn, pdu);
   159b6:	4619      	mov	r1, r3
   159b8:	4628      	mov	r0, r5
   159ba:	f000 fe79 	bl	166b0 <llcp_pdu_decode_version_ind>
		break;
   159be:	e7aa      	b.n	15916 <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_feature_req(conn, pdu);
   159c0:	4619      	mov	r1, r3
   159c2:	4628      	mov	r0, r5
   159c4:	f000 fdfa 	bl	165bc <llcp_pdu_decode_feature_req>
		if (feature_phy_coded(conn)) {
   159c8:	e7a5      	b.n	15916 <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_terminate_ind(ctx, pdu);
   159ca:	4619      	mov	r1, r3
   159cc:	4620      	mov	r0, r4
   159ce:	f000 fe43 	bl	16658 <llcp_pdu_decode_terminate_ind>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_TERMINATE);
   159d2:	2108      	movs	r1, #8
   159d4:	4628      	mov	r0, r5
   159d6:	f7ff f9db 	bl	14d90 <llcp_tx_pause_data>
		break;
   159da:	e79c      	b.n	15916 <rp_comm_execute_fsm+0x72>
		LL_ASSERT(0);
   159dc:	4a06      	ldr	r2, [pc, #24]	; (159f8 <rp_comm_execute_fsm+0x154>)
   159de:	4909      	ldr	r1, [pc, #36]	; (15a04 <rp_comm_execute_fsm+0x160>)
   159e0:	4807      	ldr	r0, [pc, #28]	; (15a00 <rp_comm_execute_fsm+0x15c>)
   159e2:	f240 539d 	movw	r3, #1437	; 0x59d
   159e6:	f00b feb1 	bl	2174c <assert_print>
   159ea:	4040      	eors	r0, r0
   159ec:	f380 8811 	msr	BASEPRI, r0
   159f0:	f04f 0003 	mov.w	r0, #3
   159f4:	df02      	svc	2
}
   159f6:	bd70      	pop	{r4, r5, r6, pc}
   159f8:	0002906c 	.word	0x0002906c
   159fc:	000290b4 	.word	0x000290b4
   15a00:	0002866c 	.word	0x0002866c
   15a04:	000286fc 	.word	0x000286fc

00015a08 <lp_comm_ntf>:
{
   15a08:	b570      	push	{r4, r5, r6, lr}
   15a0a:	4606      	mov	r6, r0
   15a0c:	460d      	mov	r5, r1
	ntf = llcp_ntf_alloc();
   15a0e:	f7ff f9b9 	bl	14d84 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   15a12:	4604      	mov	r4, r0
   15a14:	2800      	cmp	r0, #0
   15a16:	d05c      	beq.n	15ad2 <lp_comm_ntf+0xca>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   15a18:	2303      	movs	r3, #3
   15a1a:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   15a1c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   15a1e:	80e3      	strh	r3, [r4, #6]
	switch (ctx->proc) {
   15a20:	7a2b      	ldrb	r3, [r5, #8]
   15a22:	2b04      	cmp	r3, #4
	pdu = (struct pdu_data *)ntf->pdu;
   15a24:	f104 011c 	add.w	r1, r4, #28
	switch (ctx->proc) {
   15a28:	d016      	beq.n	15a58 <lp_comm_ntf+0x50>
   15a2a:	2b0c      	cmp	r3, #12
   15a2c:	d03c      	beq.n	15aa8 <lp_comm_ntf+0xa0>
   15a2e:	2b02      	cmp	r3, #2
   15a30:	d028      	beq.n	15a84 <lp_comm_ntf+0x7c>
		LL_ASSERT(0);
   15a32:	4a2f      	ldr	r2, [pc, #188]	; (15af0 <lp_comm_ntf+0xe8>)
   15a34:	492f      	ldr	r1, [pc, #188]	; (15af4 <lp_comm_ntf+0xec>)
   15a36:	4830      	ldr	r0, [pc, #192]	; (15af8 <lp_comm_ntf+0xf0>)
   15a38:	f240 139d 	movw	r3, #413	; 0x19d
   15a3c:	f00b fe86 	bl	2174c <assert_print>
   15a40:	4040      	eors	r0, r0
   15a42:	f380 8811 	msr	BASEPRI, r0
   15a46:	f04f 0003 	mov.w	r0, #3
   15a4a:	df02      	svc	2
	ll_rx_put_sched(ntf->hdr.link, ntf);
   15a4c:	6820      	ldr	r0, [r4, #0]
   15a4e:	4621      	mov	r1, r4
}
   15a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   15a54:	f7fb bdba 	b.w	115cc <ll_rx_put_sched>
	switch (ctx->response_opcode) {
   15a58:	7a6b      	ldrb	r3, [r5, #9]
   15a5a:	2b0c      	cmp	r3, #12
   15a5c:	d031      	beq.n	15ac2 <lp_comm_ntf+0xba>
		LL_ASSERT(0);
   15a5e:	4a24      	ldr	r2, [pc, #144]	; (15af0 <lp_comm_ntf+0xe8>)
   15a60:	4924      	ldr	r1, [pc, #144]	; (15af4 <lp_comm_ntf+0xec>)
   15a62:	4825      	ldr	r0, [pc, #148]	; (15af8 <lp_comm_ntf+0xf0>)
   15a64:	f240 1303 	movw	r3, #259	; 0x103
   15a68:	f00b fe70 	bl	2174c <assert_print>
   15a6c:	4040      	eors	r0, r0
   15a6e:	f380 8811 	msr	BASEPRI, r0
   15a72:	f04f 0003 	mov.w	r0, #3
   15a76:	df02      	svc	2
	ll_rx_put_sched(ntf->hdr.link, ntf);
   15a78:	6820      	ldr	r0, [r4, #0]
   15a7a:	4621      	mov	r1, r4
}
   15a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   15a80:	f7fb bda4 	b.w	115cc <ll_rx_put_sched>
	switch (ctx->response_opcode) {
   15a84:	7a6b      	ldrb	r3, [r5, #9]
   15a86:	2b07      	cmp	r3, #7
   15a88:	d01f      	beq.n	15aca <lp_comm_ntf+0xc2>
   15a8a:	2b09      	cmp	r3, #9
   15a8c:	d015      	beq.n	15aba <lp_comm_ntf+0xb2>
		LL_ASSERT(0);
   15a8e:	4a18      	ldr	r2, [pc, #96]	; (15af0 <lp_comm_ntf+0xe8>)
   15a90:	4918      	ldr	r1, [pc, #96]	; (15af4 <lp_comm_ntf+0xec>)
   15a92:	4819      	ldr	r0, [pc, #100]	; (15af8 <lp_comm_ntf+0xf0>)
   15a94:	23f6      	movs	r3, #246	; 0xf6
   15a96:	f00b fe59 	bl	2174c <assert_print>
   15a9a:	4040      	eors	r0, r0
   15a9c:	f380 8811 	msr	BASEPRI, r0
   15aa0:	f04f 0003 	mov.w	r0, #3
   15aa4:	df02      	svc	2
   15aa6:	e7d1      	b.n	15a4c <lp_comm_ntf+0x44>
	llcp_ntf_encode_length_change(conn, pdu);
   15aa8:	4630      	mov	r0, r6
   15aaa:	f000 ffaf 	bl	16a0c <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
   15aae:	6820      	ldr	r0, [r4, #0]
   15ab0:	4621      	mov	r1, r4
}
   15ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   15ab6:	f7fb bd89 	b.w	115cc <ll_rx_put_sched>
		llcp_ntf_encode_feature_rsp(conn, pdu);
   15aba:	4630      	mov	r0, r6
   15abc:	f000 fd60 	bl	16580 <llcp_ntf_encode_feature_rsp>
		break;
   15ac0:	e7c4      	b.n	15a4c <lp_comm_ntf+0x44>
		llcp_ntf_encode_version_ind(conn, pdu);
   15ac2:	4630      	mov	r0, r6
   15ac4:	f000 fdde 	bl	16684 <llcp_ntf_encode_version_ind>
		break;
   15ac8:	e7c0      	b.n	15a4c <lp_comm_ntf+0x44>
		llcp_ntf_encode_unknown_rsp(ctx, pdu);
   15aca:	4628      	mov	r0, r5
   15acc:	f000 fd04 	bl	164d8 <llcp_ntf_encode_unknown_rsp>
		break;
   15ad0:	e7bc      	b.n	15a4c <lp_comm_ntf+0x44>
	LL_ASSERT(ntf);
   15ad2:	4a07      	ldr	r2, [pc, #28]	; (15af0 <lp_comm_ntf+0xe8>)
   15ad4:	4909      	ldr	r1, [pc, #36]	; (15afc <lp_comm_ntf+0xf4>)
   15ad6:	4808      	ldr	r0, [pc, #32]	; (15af8 <lp_comm_ntf+0xf0>)
   15ad8:	f44f 73c0 	mov.w	r3, #384	; 0x180
   15adc:	f00b fe36 	bl	2174c <assert_print>
   15ae0:	4040      	eors	r0, r0
   15ae2:	f380 8811 	msr	BASEPRI, r0
   15ae6:	f04f 0003 	mov.w	r0, #3
   15aea:	df02      	svc	2
   15aec:	e794      	b.n	15a18 <lp_comm_ntf+0x10>
   15aee:	bf00      	nop
   15af0:	0002906c 	.word	0x0002906c
   15af4:	000286fc 	.word	0x000286fc
   15af8:	0002866c 	.word	0x0002866c
   15afc:	00028f40 	.word	0x00028f40

00015b00 <lp_comm_complete.constprop.0>:
static void lp_comm_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   15b00:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   15b02:	7a0b      	ldrb	r3, [r1, #8]
   15b04:	3b01      	subs	r3, #1
static void lp_comm_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   15b06:	460c      	mov	r4, r1
   15b08:	4605      	mov	r5, r0
	switch (ctx->proc) {
   15b0a:	2b0b      	cmp	r3, #11
   15b0c:	d815      	bhi.n	15b3a <lp_comm_complete.constprop.0+0x3a>
   15b0e:	e8df f003 	tbb	[pc, r3]
   15b12:	2206      	.short	0x2206
   15b14:	1414280e 	.word	0x1414280e
   15b18:	31141414 	.word	0x31141414
   15b1c:	3914      	.short	0x3914
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP ||
   15b1e:	7a4b      	ldrb	r3, [r1, #9]
   15b20:	2b07      	cmp	r3, #7
   15b22:	d004      	beq.n	15b2e <lp_comm_complete.constprop.0+0x2e>
   15b24:	2b13      	cmp	r3, #19
   15b26:	d002      	beq.n	15b2e <lp_comm_complete.constprop.0+0x2e>
	conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   15b28:	2324      	movs	r3, #36	; 0x24
   15b2a:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
	llcp_lr_complete(conn);
   15b2e:	4628      	mov	r0, r5
   15b30:	f000 fc48 	bl	163c4 <llcp_lr_complete>
	ctx->state = LP_COMMON_STATE_IDLE;
   15b34:	2300      	movs	r3, #0
   15b36:	72a3      	strb	r3, [r4, #10]
}
   15b38:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(0);
   15b3a:	4a2c      	ldr	r2, [pc, #176]	; (15bec <lp_comm_complete.constprop.0+0xec>)
   15b3c:	492c      	ldr	r1, [pc, #176]	; (15bf0 <lp_comm_complete.constprop.0+0xf0>)
   15b3e:	482d      	ldr	r0, [pc, #180]	; (15bf4 <lp_comm_complete.constprop.0+0xf4>)
   15b40:	f240 2339 	movw	r3, #569	; 0x239
   15b44:	f00b fe02 	bl	2174c <assert_print>
   15b48:	4040      	eors	r0, r0
   15b4a:	f380 8811 	msr	BASEPRI, r0
   15b4e:	f04f 0003 	mov.w	r0, #3
   15b52:	df02      	svc	2
}
   15b54:	bd38      	pop	{r3, r4, r5, pc}
			(ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP ||
   15b56:	7a4b      	ldrb	r3, [r1, #9]
   15b58:	2b07      	cmp	r3, #7
   15b5a:	d005      	beq.n	15b68 <lp_comm_complete.constprop.0+0x68>
   15b5c:	2b09      	cmp	r3, #9
   15b5e:	d1e3      	bne.n	15b28 <lp_comm_complete.constprop.0+0x28>
   15b60:	e002      	b.n	15b68 <lp_comm_complete.constprop.0+0x68>
	if (valid_pdu) {
   15b62:	7a4b      	ldrb	r3, [r1, #9]
   15b64:	2b0c      	cmp	r3, #12
   15b66:	d1df      	bne.n	15b28 <lp_comm_complete.constprop.0+0x28>
		if (!llcp_ntf_alloc_is_available()) {
   15b68:	f7ff f8fc 	bl	14d64 <llcp_ntf_alloc_is_available>
   15b6c:	bb20      	cbnz	r0, 15bb8 <lp_comm_complete.constprop.0+0xb8>
			ctx->state = LP_COMMON_STATE_WAIT_NTF;
   15b6e:	2304      	movs	r3, #4
   15b70:	72a3      	strb	r3, [r4, #10]
}
   15b72:	bd38      	pop	{r3, r4, r5, pc}
		llcp_lr_complete(conn);
   15b74:	f000 fc26 	bl	163c4 <llcp_lr_complete>
		ctx->state = LP_COMMON_STATE_IDLE;
   15b78:	2200      	movs	r2, #0
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   15b7a:	2316      	movs	r3, #22
		ctx->state = LP_COMMON_STATE_IDLE;
   15b7c:	72a2      	strb	r2, [r4, #10]
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   15b7e:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
   15b82:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   15b84:	7a4b      	ldrb	r3, [r1, #9]
   15b86:	2b15      	cmp	r3, #21
   15b88:	d020      	beq.n	15bcc <lp_comm_complete.constprop.0+0xcc>
		} else if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) {
   15b8a:	2b07      	cmp	r3, #7
   15b8c:	d1cc      	bne.n	15b28 <lp_comm_complete.constprop.0+0x28>
	conn->llcp.fex.features_used &= ~ll_feat_mask;
   15b8e:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   15b92:	f023 0320 	bic.w	r3, r3, #32
   15b96:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
			llcp_lr_complete(conn);
   15b9a:	f000 fc13 	bl	163c4 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
   15b9e:	2300      	movs	r3, #0
				ctx->state = LP_COMMON_STATE_WAIT_NTF;
   15ba0:	72a3      	strb	r3, [r4, #10]
		if (!ull_cp_remote_dle_pending(conn)) {
   15ba2:	4628      	mov	r0, r5
   15ba4:	f7ff fbb0 	bl	15308 <ull_cp_remote_dle_pending>
   15ba8:	2800      	cmp	r0, #0
   15baa:	d1c5      	bne.n	15b38 <lp_comm_complete.constprop.0+0x38>
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   15bac:	4628      	mov	r0, r5
   15bae:	2104      	movs	r1, #4
}
   15bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   15bb4:	f7ff b900 	b.w	14db8 <llcp_tx_resume_data>
			lp_comm_ntf(conn, ctx);
   15bb8:	4621      	mov	r1, r4
   15bba:	4628      	mov	r0, r5
   15bbc:	f7ff ff24 	bl	15a08 <lp_comm_ntf>
			llcp_lr_complete(conn);
   15bc0:	4628      	mov	r0, r5
   15bc2:	f000 fbff 	bl	163c4 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
   15bc6:	2300      	movs	r3, #0
   15bc8:	72a3      	strb	r3, [r4, #10]
}
   15bca:	bd38      	pop	{r3, r4, r5, pc}
			uint8_t dle_changed = ull_dle_update_eff(conn);
   15bcc:	f7fd fe46 	bl	1385c <ull_dle_update_eff>
			if (dle_changed && !llcp_ntf_alloc_is_available()) {
   15bd0:	b140      	cbz	r0, 15be4 <lp_comm_complete.constprop.0+0xe4>
   15bd2:	f7ff f8c7 	bl	14d64 <llcp_ntf_alloc_is_available>
   15bd6:	b908      	cbnz	r0, 15bdc <lp_comm_complete.constprop.0+0xdc>
   15bd8:	2304      	movs	r3, #4
   15bda:	e7e1      	b.n	15ba0 <lp_comm_complete.constprop.0+0xa0>
					lp_comm_ntf(conn, ctx);
   15bdc:	4621      	mov	r1, r4
   15bde:	4628      	mov	r0, r5
   15be0:	f7ff ff12 	bl	15a08 <lp_comm_ntf>
				llcp_lr_complete(conn);
   15be4:	4628      	mov	r0, r5
   15be6:	f000 fbed 	bl	163c4 <llcp_lr_complete>
				ctx->state = LP_COMMON_STATE_IDLE;
   15bea:	e7d8      	b.n	15b9e <lp_comm_complete.constprop.0+0x9e>
   15bec:	0002906c 	.word	0x0002906c
   15bf0:	000286fc 	.word	0x000286fc
   15bf4:	0002866c 	.word	0x0002866c

00015bf8 <lp_comm_send_req.constprop.0.isra.0>:
static void lp_comm_send_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   15bf8:	b570      	push	{r4, r5, r6, lr}
	switch (ctx->proc) {
   15bfa:	7a0e      	ldrb	r6, [r1, #8]
   15bfc:	1e73      	subs	r3, r6, #1
static void lp_comm_send_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   15bfe:	460c      	mov	r4, r1
   15c00:	4605      	mov	r5, r0
	switch (ctx->proc) {
   15c02:	2b0b      	cmp	r3, #11
   15c04:	d807      	bhi.n	15c16 <lp_comm_send_req.constprop.0.isra.0+0x1e>
   15c06:	e8df f003 	tbb	[pc, r3]
   15c0a:	1b14      	.short	0x1b14
   15c0c:	06064733 	.word	0x06064733
   15c10:	64060606 	.word	0x64060606
   15c14:	7106      	.short	0x7106
		LL_ASSERT(0);
   15c16:	4a51      	ldr	r2, [pc, #324]	; (15d5c <lp_comm_send_req.constprop.0.isra.0+0x164>)
   15c18:	4951      	ldr	r1, [pc, #324]	; (15d60 <lp_comm_send_req.constprop.0.isra.0+0x168>)
   15c1a:	4852      	ldr	r0, [pc, #328]	; (15d64 <lp_comm_send_req.constprop.0.isra.0+0x16c>)
   15c1c:	f240 23b7 	movw	r3, #695	; 0x2b7
   15c20:	f00b fd94 	bl	2174c <assert_print>
   15c24:	4040      	eors	r0, r0
   15c26:	f380 8811 	msr	BASEPRI, r0
   15c2a:	f04f 0003 	mov.w	r0, #3
   15c2e:	df02      	svc	2
}
   15c30:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   15c32:	f000 fb33 	bl	1629c <llcp_lr_ispaused>
   15c36:	2800      	cmp	r0, #0
   15c38:	d07d      	beq.n	15d36 <lp_comm_send_req.constprop.0.isra.0+0x13e>
		ctx->state = LP_COMMON_STATE_WAIT_TX;
   15c3a:	2301      	movs	r3, #1
   15c3c:	72a3      	strb	r3, [r4, #10]
}
   15c3e:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   15c40:	f000 fb2c 	bl	1629c <llcp_lr_ispaused>
   15c44:	2800      	cmp	r0, #0
   15c46:	d1f8      	bne.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
   15c48:	4621      	mov	r1, r4
   15c4a:	4628      	mov	r0, r5
   15c4c:	f7ff f876 	bl	14d3c <llcp_tx_alloc_peek>
   15c50:	2800      	cmp	r0, #0
   15c52:	d0f2      	beq.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
   15c54:	4621      	mov	r1, r4
   15c56:	4628      	mov	r0, r5
   15c58:	f7ff fcdc 	bl	15614 <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   15c5c:	6962      	ldr	r2, [r4, #20]
   15c5e:	2a00      	cmp	r2, #0
			conn->llcp.fex.sent = 1;
   15c60:	f04f 0301 	mov.w	r3, #1
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   15c64:	bf08      	it	eq
   15c66:	2603      	moveq	r6, #3
   15c68:	72a6      	strb	r6, [r4, #10]
			conn->llcp.fex.sent = 1;
   15c6a:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
}
   15c6e:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   15c70:	f000 fb14 	bl	1629c <llcp_lr_ispaused>
   15c74:	2800      	cmp	r0, #0
   15c76:	d1e0      	bne.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
   15c78:	4621      	mov	r1, r4
   15c7a:	4628      	mov	r0, r5
   15c7c:	f7ff f85e 	bl	14d3c <llcp_tx_alloc_peek>
   15c80:	2800      	cmp	r0, #0
   15c82:	d0da      	beq.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
   15c84:	4621      	mov	r1, r4
   15c86:	4628      	mov	r0, r5
   15c88:	f7ff fcc4 	bl	15614 <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   15c8c:	6963      	ldr	r3, [r4, #20]
   15c8e:	2b00      	cmp	r3, #0
   15c90:	bf18      	it	ne
   15c92:	2602      	movne	r6, #2
   15c94:	72a6      	strb	r6, [r4, #10]
}
   15c96:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->llcp.vex.sent) {
   15c98:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
   15c9c:	2b00      	cmp	r3, #0
   15c9e:	d13e      	bne.n	15d1e <lp_comm_send_req.constprop.0.isra.0+0x126>
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   15ca0:	f000 fafc 	bl	1629c <llcp_lr_ispaused>
   15ca4:	2800      	cmp	r0, #0
   15ca6:	d1c8      	bne.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
   15ca8:	4621      	mov	r1, r4
   15caa:	4628      	mov	r0, r5
   15cac:	f7ff f846 	bl	14d3c <llcp_tx_alloc_peek>
   15cb0:	2800      	cmp	r0, #0
   15cb2:	d0c2      	beq.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
   15cb4:	4621      	mov	r1, r4
   15cb6:	4628      	mov	r0, r5
   15cb8:	f7ff fcac 	bl	15614 <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   15cbc:	6962      	ldr	r2, [r4, #20]
   15cbe:	2a00      	cmp	r2, #0
				conn->llcp.vex.sent = 1;
   15cc0:	f04f 0301 	mov.w	r3, #1
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   15cc4:	bf0c      	ite	eq
   15cc6:	2203      	moveq	r2, #3
   15cc8:	2202      	movne	r2, #2
   15cca:	72a2      	strb	r2, [r4, #10]
				conn->llcp.vex.sent = 1;
   15ccc:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
}
   15cd0:	bd70      	pop	{r4, r5, r6, pc}
		if (!llcp_tx_alloc_peek(conn, ctx)) {
   15cd2:	f7ff f833 	bl	14d3c <llcp_tx_alloc_peek>
   15cd6:	2800      	cmp	r0, #0
   15cd8:	d0af      	beq.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
			lp_comm_tx(conn, ctx);
   15cda:	4621      	mov	r1, r4
   15cdc:	4628      	mov	r0, r5
   15cde:	f7ff fc99 	bl	15614 <lp_comm_tx>
			ctx->data.term.error_code = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   15ce2:	2216      	movs	r2, #22
			ctx->state = LP_COMMON_STATE_WAIT_TX_ACK;
   15ce4:	2302      	movs	r3, #2
			ctx->data.term.error_code = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   15ce6:	7722      	strb	r2, [r4, #28]
			ctx->state = LP_COMMON_STATE_WAIT_TX_ACK;
   15ce8:	72a3      	strb	r3, [r4, #10]
}
   15cea:	bd70      	pop	{r4, r5, r6, pc}
		if (!ull_cp_remote_dle_pending(conn)) {
   15cec:	f7ff fb0c 	bl	15308 <ull_cp_remote_dle_pending>
   15cf0:	b9d8      	cbnz	r0, 15d2a <lp_comm_send_req.constprop.0.isra.0+0x132>
			if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   15cf2:	4628      	mov	r0, r5
   15cf4:	f000 fad2 	bl	1629c <llcp_lr_ispaused>
   15cf8:	2800      	cmp	r0, #0
   15cfa:	d19e      	bne.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
   15cfc:	4621      	mov	r1, r4
   15cfe:	4628      	mov	r0, r5
   15d00:	f7ff f81c 	bl	14d3c <llcp_tx_alloc_peek>
   15d04:	2800      	cmp	r0, #0
   15d06:	d098      	beq.n	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
				llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   15d08:	2104      	movs	r1, #4
   15d0a:	4628      	mov	r0, r5
   15d0c:	f7ff f840 	bl	14d90 <llcp_tx_pause_data>
				lp_comm_tx(conn, ctx);
   15d10:	4621      	mov	r1, r4
   15d12:	4628      	mov	r0, r5
   15d14:	f7ff fc7e 	bl	15614 <lp_comm_tx>
				ctx->state = LP_COMMON_STATE_WAIT_RX;
   15d18:	2303      	movs	r3, #3
   15d1a:	72a3      	strb	r3, [r4, #10]
}
   15d1c:	bd70      	pop	{r4, r5, r6, pc}
			ctx->response_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   15d1e:	230c      	movs	r3, #12
   15d20:	724b      	strb	r3, [r1, #9]
}
   15d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			lp_comm_complete(conn, ctx, evt, param);
   15d26:	f7ff beeb 	b.w	15b00 <lp_comm_complete.constprop.0>
			llcp_lr_complete(conn);
   15d2a:	4628      	mov	r0, r5
   15d2c:	f000 fb4a 	bl	163c4 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
   15d30:	2300      	movs	r3, #0
   15d32:	72a3      	strb	r3, [r4, #10]
}
   15d34:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   15d36:	4621      	mov	r1, r4
   15d38:	4628      	mov	r0, r5
   15d3a:	f7fe ffff 	bl	14d3c <llcp_tx_alloc_peek>
   15d3e:	2800      	cmp	r0, #0
   15d40:	f43f af7b 	beq.w	15c3a <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
   15d44:	4621      	mov	r1, r4
   15d46:	4628      	mov	r0, r5
   15d48:	f7ff fc64 	bl	15614 <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   15d4c:	6963      	ldr	r3, [r4, #20]
   15d4e:	2b00      	cmp	r3, #0
   15d50:	bf0c      	ite	eq
   15d52:	2303      	moveq	r3, #3
   15d54:	2302      	movne	r3, #2
   15d56:	72a3      	strb	r3, [r4, #10]
}
   15d58:	bd70      	pop	{r4, r5, r6, pc}
   15d5a:	bf00      	nop
   15d5c:	0002906c 	.word	0x0002906c
   15d60:	000286fc 	.word	0x000286fc
   15d64:	0002866c 	.word	0x0002866c

00015d68 <lp_comm_execute_fsm>:
{
   15d68:	b530      	push	{r4, r5, lr}
   15d6a:	460c      	mov	r4, r1
	switch (ctx->state) {
   15d6c:	7a89      	ldrb	r1, [r1, #10]
{
   15d6e:	b083      	sub	sp, #12
   15d70:	4605      	mov	r5, r0
	switch (ctx->state) {
   15d72:	2904      	cmp	r1, #4
   15d74:	f200 80b1 	bhi.w	15eda <lp_comm_execute_fsm+0x172>
   15d78:	e8df f001 	tbb	[pc, r1]
   15d7c:	371e2e1a 	.word	0x371e2e1a
   15d80:	03          	.byte	0x03
   15d81:	00          	.byte	0x00
	switch (evt) {
   15d82:	b9ba      	cbnz	r2, 15db4 <lp_comm_execute_fsm+0x4c>
		switch (ctx->proc) {
   15d84:	7a21      	ldrb	r1, [r4, #8]
   15d86:	290c      	cmp	r1, #12
   15d88:	d814      	bhi.n	15db4 <lp_comm_execute_fsm+0x4c>
   15d8a:	f241 0314 	movw	r3, #4116	; 0x1014
   15d8e:	40cb      	lsrs	r3, r1
   15d90:	07db      	lsls	r3, r3, #31
   15d92:	d50f      	bpl.n	15db4 <lp_comm_execute_fsm+0x4c>
			if (llcp_ntf_alloc_is_available()) {
   15d94:	9201      	str	r2, [sp, #4]
   15d96:	f7fe ffe5 	bl	14d64 <llcp_ntf_alloc_is_available>
   15d9a:	b158      	cbz	r0, 15db4 <lp_comm_execute_fsm+0x4c>
				lp_comm_ntf(conn, ctx);
   15d9c:	4621      	mov	r1, r4
   15d9e:	4628      	mov	r0, r5
   15da0:	f7ff fe32 	bl	15a08 <lp_comm_ntf>
				llcp_lr_complete(conn);
   15da4:	4628      	mov	r0, r5
   15da6:	f000 fb0d 	bl	163c4 <llcp_lr_complete>
				ctx->state = LP_COMMON_STATE_IDLE;
   15daa:	9a01      	ldr	r2, [sp, #4]
   15dac:	72a2      	strb	r2, [r4, #10]
   15dae:	e001      	b.n	15db4 <lp_comm_execute_fsm+0x4c>
	switch (evt) {
   15db0:	2a00      	cmp	r2, #0
   15db2:	d055      	beq.n	15e60 <lp_comm_execute_fsm+0xf8>
}
   15db4:	b003      	add	sp, #12
   15db6:	bd30      	pop	{r4, r5, pc}
	switch (evt) {
   15db8:	2a05      	cmp	r2, #5
   15dba:	d1fb      	bne.n	15db4 <lp_comm_execute_fsm+0x4c>
		switch (ctx->proc) {
   15dbc:	7a23      	ldrb	r3, [r4, #8]
   15dbe:	2b03      	cmp	r3, #3
   15dc0:	d001      	beq.n	15dc6 <lp_comm_execute_fsm+0x5e>
   15dc2:	2b0a      	cmp	r3, #10
   15dc4:	d1f6      	bne.n	15db4 <lp_comm_execute_fsm+0x4c>
			ctx->tx_ack = NULL;
   15dc6:	2300      	movs	r3, #0
   15dc8:	6163      	str	r3, [r4, #20]
		lp_comm_complete(conn, ctx, evt, param);
   15dca:	4621      	mov	r1, r4
   15dcc:	4628      	mov	r0, r5
}
   15dce:	b003      	add	sp, #12
   15dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		lp_comm_complete(conn, ctx, evt, param);
   15dd4:	f7ff be94 	b.w	15b00 <lp_comm_complete.constprop.0>
	switch (evt) {
   15dd8:	2a00      	cmp	r2, #0
   15dda:	d1eb      	bne.n	15db4 <lp_comm_execute_fsm+0x4c>
		lp_comm_send_req(conn, ctx, evt, param);
   15ddc:	4621      	mov	r1, r4
   15dde:	4628      	mov	r0, r5
}
   15de0:	b003      	add	sp, #12
   15de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		lp_comm_send_req(conn, ctx, evt, param);
   15de6:	f7ff bf07 	b.w	15bf8 <lp_comm_send_req.constprop.0.isra.0>
	switch (evt) {
   15dea:	2a01      	cmp	r2, #1
   15dec:	d1e2      	bne.n	15db4 <lp_comm_execute_fsm+0x4c>
	ctx->response_opcode = pdu->llctrl.opcode;
   15dee:	78da      	ldrb	r2, [r3, #3]
   15df0:	7262      	strb	r2, [r4, #9]
	switch (pdu->llctrl.opcode) {
   15df2:	3a02      	subs	r2, #2
   15df4:	2a17      	cmp	r2, #23
   15df6:	d83b      	bhi.n	15e70 <lp_comm_execute_fsm+0x108>
   15df8:	a101      	add	r1, pc, #4	; (adr r1, 15e00 <lp_comm_execute_fsm+0x98>)
   15dfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   15dfe:	bf00      	nop
   15e00:	00015e8d 	.word	0x00015e8d
   15e04:	00015e71 	.word	0x00015e71
   15e08:	00015e71 	.word	0x00015e71
   15e0c:	00015e71 	.word	0x00015e71
   15e10:	00015e71 	.word	0x00015e71
   15e14:	00015ed1 	.word	0x00015ed1
   15e18:	00015e71 	.word	0x00015e71
   15e1c:	00015ec7 	.word	0x00015ec7
   15e20:	00015e71 	.word	0x00015e71
   15e24:	00015e71 	.word	0x00015e71
   15e28:	00015ea9 	.word	0x00015ea9
   15e2c:	00015dcb 	.word	0x00015dcb
   15e30:	00015e71 	.word	0x00015e71
   15e34:	00015e71 	.word	0x00015e71
   15e38:	00015e71 	.word	0x00015e71
   15e3c:	00015ebd 	.word	0x00015ebd
   15e40:	00015e71 	.word	0x00015e71
   15e44:	00015dcb 	.word	0x00015dcb
   15e48:	00015e71 	.word	0x00015e71
   15e4c:	00015eb3 	.word	0x00015eb3
   15e50:	00015e71 	.word	0x00015e71
   15e54:	00015e71 	.word	0x00015e71
   15e58:	00015e71 	.word	0x00015e71
   15e5c:	00015dcb 	.word	0x00015dcb
		if (llcp_lr_ispaused(conn)) {
   15e60:	4628      	mov	r0, r5
   15e62:	f000 fa1b 	bl	1629c <llcp_lr_ispaused>
   15e66:	2800      	cmp	r0, #0
   15e68:	d0b8      	beq.n	15ddc <lp_comm_execute_fsm+0x74>
			ctx->state = LP_COMMON_STATE_WAIT_TX;
   15e6a:	2301      	movs	r3, #1
   15e6c:	72a3      	strb	r3, [r4, #10]
   15e6e:	e7a1      	b.n	15db4 <lp_comm_execute_fsm+0x4c>
		LL_ASSERT(0);
   15e70:	4a21      	ldr	r2, [pc, #132]	; (15ef8 <lp_comm_execute_fsm+0x190>)
   15e72:	4922      	ldr	r1, [pc, #136]	; (15efc <lp_comm_execute_fsm+0x194>)
   15e74:	4822      	ldr	r0, [pc, #136]	; (15f00 <lp_comm_execute_fsm+0x198>)
   15e76:	f240 333e 	movw	r3, #830	; 0x33e
   15e7a:	f00b fc67 	bl	2174c <assert_print>
   15e7e:	4040      	eors	r0, r0
   15e80:	f380 8811 	msr	BASEPRI, r0
   15e84:	f04f 0003 	mov.w	r0, #3
   15e88:	df02      	svc	2
   15e8a:	e79e      	b.n	15dca <lp_comm_execute_fsm+0x62>
		LL_ASSERT(0);
   15e8c:	4a1a      	ldr	r2, [pc, #104]	; (15ef8 <lp_comm_execute_fsm+0x190>)
   15e8e:	491b      	ldr	r1, [pc, #108]	; (15efc <lp_comm_execute_fsm+0x194>)
   15e90:	481b      	ldr	r0, [pc, #108]	; (15f00 <lp_comm_execute_fsm+0x198>)
   15e92:	f240 3325 	movw	r3, #805	; 0x325
   15e96:	f00b fc59 	bl	2174c <assert_print>
   15e9a:	4040      	eors	r0, r0
   15e9c:	f380 8811 	msr	BASEPRI, r0
   15ea0:	f04f 0003 	mov.w	r0, #3
   15ea4:	df02      	svc	2
		break;
   15ea6:	e790      	b.n	15dca <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_version_ind(conn, pdu);
   15ea8:	4619      	mov	r1, r3
   15eaa:	4628      	mov	r0, r5
   15eac:	f000 fc00 	bl	166b0 <llcp_pdu_decode_version_ind>
		break;
   15eb0:	e78b      	b.n	15dca <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_length_rsp(conn, pdu);
   15eb2:	4619      	mov	r1, r3
   15eb4:	4628      	mov	r0, r5
   15eb6:	f000 fde9 	bl	16a8c <llcp_pdu_decode_length_rsp>
		break;
   15eba:	e786      	b.n	15dca <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_reject_ext_ind(ctx, pdu);
   15ebc:	4619      	mov	r1, r3
   15ebe:	4620      	mov	r0, r4
   15ec0:	f000 fc6e 	bl	167a0 <llcp_pdu_decode_reject_ext_ind>
		break;
   15ec4:	e781      	b.n	15dca <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_feature_rsp(conn, pdu);
   15ec6:	4619      	mov	r1, r3
   15ec8:	4628      	mov	r0, r5
   15eca:	f000 fb93 	bl	165f4 <llcp_pdu_decode_feature_rsp>
		if (feature_phy_coded(conn)) {
   15ece:	e77c      	b.n	15dca <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_unknown_rsp(ctx, pdu);
   15ed0:	4619      	mov	r1, r3
   15ed2:	4620      	mov	r0, r4
   15ed4:	f000 fafc 	bl	164d0 <llcp_pdu_decode_unknown_rsp>
		break;
   15ed8:	e777      	b.n	15dca <lp_comm_execute_fsm+0x62>
		LL_ASSERT(0);
   15eda:	4a07      	ldr	r2, [pc, #28]	; (15ef8 <lp_comm_execute_fsm+0x190>)
   15edc:	4907      	ldr	r1, [pc, #28]	; (15efc <lp_comm_execute_fsm+0x194>)
   15ede:	4808      	ldr	r0, [pc, #32]	; (15f00 <lp_comm_execute_fsm+0x198>)
   15ee0:	f240 338b 	movw	r3, #907	; 0x38b
   15ee4:	f00b fc32 	bl	2174c <assert_print>
   15ee8:	4040      	eors	r0, r0
   15eea:	f380 8811 	msr	BASEPRI, r0
   15eee:	f04f 0003 	mov.w	r0, #3
   15ef2:	df02      	svc	2
}
   15ef4:	e75e      	b.n	15db4 <lp_comm_execute_fsm+0x4c>
   15ef6:	bf00      	nop
   15ef8:	0002906c 	.word	0x0002906c
   15efc:	000286fc 	.word	0x000286fc
   15f00:	0002866c 	.word	0x0002866c

00015f04 <llcp_lp_comm_tx_ack>:
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_ACK, tx->pdu);
   15f04:	1d13      	adds	r3, r2, #4
   15f06:	2205      	movs	r2, #5
   15f08:	f7ff bf2e 	b.w	15d68 <lp_comm_execute_fsm>

00015f0c <llcp_lp_comm_rx>:
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_RESPONSE, rx->pdu);
   15f0c:	f102 031c 	add.w	r3, r2, #28
   15f10:	2201      	movs	r2, #1
   15f12:	f7ff bf29 	b.w	15d68 <lp_comm_execute_fsm>
   15f16:	bf00      	nop

00015f18 <llcp_lp_comm_init_proc>:
	ctx->state = LP_COMMON_STATE_IDLE;
   15f18:	2300      	movs	r3, #0
   15f1a:	7283      	strb	r3, [r0, #10]
}
   15f1c:	4770      	bx	lr
   15f1e:	bf00      	nop

00015f20 <llcp_lp_comm_run>:
{
   15f20:	4613      	mov	r3, r2
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_RUN, param);
   15f22:	2200      	movs	r2, #0
   15f24:	f7ff bf20 	b.w	15d68 <lp_comm_execute_fsm>

00015f28 <llcp_rp_comm_rx>:

void llcp_rp_comm_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_REQUEST, rx->pdu);
   15f28:	f102 031c 	add.w	r3, r2, #28
   15f2c:	2202      	movs	r2, #2
   15f2e:	f7ff bcb9 	b.w	158a4 <rp_comm_execute_fsm>
   15f32:	bf00      	nop

00015f34 <llcp_rp_comm_tx_ack>:
}

void llcp_rp_comm_tx_ack(struct ll_conn *conn, struct proc_ctx *ctx, struct node_tx *tx)
{
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_ACK, tx->pdu);
   15f34:	1d13      	adds	r3, r2, #4
   15f36:	2201      	movs	r2, #1
   15f38:	f7ff bcb4 	b.w	158a4 <rp_comm_execute_fsm>

00015f3c <llcp_rp_comm_init_proc>:
}

void llcp_rp_comm_init_proc(struct proc_ctx *ctx)
   15f3c:	2300      	movs	r3, #0
   15f3e:	7283      	strb	r3, [r0, #10]
   15f40:	4770      	bx	lr
   15f42:	bf00      	nop

00015f44 <llcp_rp_comm_run>:
{
	ctx->state = RP_COMMON_STATE_IDLE;
}

void llcp_rp_comm_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   15f44:	4613      	mov	r3, r2
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_RUN, param);
   15f46:	2200      	movs	r2, #0
   15f48:	f7ff bcac 	b.w	158a4 <rp_comm_execute_fsm>

00015f4c <lr_dequeue>:

	shared_data_access_unlock(key);
}

static struct proc_ctx *lr_dequeue(struct ll_conn *conn)
{
   15f4c:	b570      	push	{r4, r5, r6, lr}
   15f4e:	4604      	mov	r4, r0
	if (mayfly_is_running()) {
   15f50:	f004 fcfc 	bl	1a94c <mayfly_is_running>
   15f54:	b168      	cbz	r0, 15f72 <lr_dequeue+0x26>
	return list->head;
   15f56:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
   15f5a:	b145      	cbz	r5, 15f6e <lr_dequeue+0x22>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15f5c:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	return node->next;
   15f60:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   15f62:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15f66:	4295      	cmp	r5, r2
	list->tail = node;
   15f68:	bf08      	it	eq
   15f6a:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	ctx = (struct proc_ctx *)sys_slist_get(&conn->llcp.local.pend_proc_list);

	shared_data_access_unlock(key);

	return ctx;
}
   15f6e:	4628      	mov	r0, r5
   15f70:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   15f72:	4605      	mov	r5, r0
   15f74:	2101      	movs	r1, #1
   15f76:	2003      	movs	r0, #3
   15f78:	f004 fc8a 	bl	1a890 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   15f7c:	462a      	mov	r2, r5
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   15f7e:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   15f80:	2101      	movs	r1, #1
   15f82:	2003      	movs	r0, #3
   15f84:	f7f8 f8dc 	bl	e140 <mayfly_enable>
	return list->head;
   15f88:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
   15f8c:	b145      	cbz	r5, 15fa0 <lr_dequeue+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15f8e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	return node->next;
   15f92:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   15f94:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15f98:	4295      	cmp	r5, r2
	list->tail = node;
   15f9a:	bf08      	it	eq
   15f9c:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	if (key) {
   15fa0:	2e00      	cmp	r6, #0
   15fa2:	d0e4      	beq.n	15f6e <lr_dequeue+0x22>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   15fa4:	2201      	movs	r2, #1
   15fa6:	4611      	mov	r1, r2
   15fa8:	2003      	movs	r0, #3
   15faa:	f7f8 f8c9 	bl	e140 <mayfly_enable>
}
   15fae:	4628      	mov	r0, r5
   15fb0:	bd70      	pop	{r4, r5, r6, pc}
   15fb2:	bf00      	nop

00015fb4 <lr_act_complete>:

	lr_check_done(conn, ctx);
}

static void lr_act_complete(struct ll_conn *conn)
{
   15fb4:	b570      	push	{r4, r5, r6, lr}
   15fb6:	4604      	mov	r4, r0
	if (mayfly_is_running()) {
   15fb8:	f004 fcc8 	bl	1a94c <mayfly_is_running>
   15fbc:	b140      	cbz	r0, 15fd0 <lr_act_complete+0x1c>
	return list->head;
   15fbe:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
	LL_ASSERT(ctx != NULL);
   15fc2:	b1dd      	cbz	r5, 15ffc <lr_act_complete+0x48>
	conn->llcp.local.prt_expire = 0U;
   15fc4:	2200      	movs	r2, #0

	/* Stop procedure response timeout timer */
	llcp_lr_prt_stop(conn);

	/* Mark the procedure as safe to delete */
	ctx->done = 1U;
   15fc6:	2301      	movs	r3, #1
	conn->llcp.local.prt_expire = 0U;
   15fc8:	f8a4 20f2 	strh.w	r2, [r4, #242]	; 0xf2
	ctx->done = 1U;
   15fcc:	61ab      	str	r3, [r5, #24]
}
   15fce:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   15fd0:	4605      	mov	r5, r0
   15fd2:	2101      	movs	r1, #1
   15fd4:	2003      	movs	r0, #3
   15fd6:	f004 fc5b 	bl	1a890 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   15fda:	462a      	mov	r2, r5
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   15fdc:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   15fde:	2101      	movs	r1, #1
   15fe0:	2003      	movs	r0, #3
   15fe2:	f7f8 f8ad 	bl	e140 <mayfly_enable>
   15fe6:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
	if (key) {
   15fea:	2e00      	cmp	r6, #0
   15fec:	d0e9      	beq.n	15fc2 <lr_act_complete+0xe>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   15fee:	2201      	movs	r2, #1
   15ff0:	4611      	mov	r1, r2
   15ff2:	2003      	movs	r0, #3
   15ff4:	f7f8 f8a4 	bl	e140 <mayfly_enable>
	LL_ASSERT(ctx != NULL);
   15ff8:	2d00      	cmp	r5, #0
   15ffa:	d1e3      	bne.n	15fc4 <lr_act_complete+0x10>
   15ffc:	4a06      	ldr	r2, [pc, #24]	; (16018 <lr_act_complete+0x64>)
   15ffe:	4907      	ldr	r1, [pc, #28]	; (1601c <lr_act_complete+0x68>)
   16000:	4807      	ldr	r0, [pc, #28]	; (16020 <lr_act_complete+0x6c>)
   16002:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   16006:	f00b fba1 	bl	2174c <assert_print>
   1600a:	4040      	eors	r0, r0
   1600c:	f380 8811 	msr	BASEPRI, r0
   16010:	f04f 0003 	mov.w	r0, #3
   16014:	df02      	svc	2
   16016:	e7d5      	b.n	15fc4 <lr_act_complete+0x10>
   16018:	000290d0 	.word	0x000290d0
   1601c:	00029118 	.word	0x00029118
   16020:	0002866c 	.word	0x0002866c

00016024 <lr_check_done.part.0>:
static void lr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
   16024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16026:	4605      	mov	r5, r0
   16028:	460c      	mov	r4, r1
	if (mayfly_is_running()) {
   1602a:	f004 fc8f 	bl	1a94c <mayfly_is_running>
   1602e:	b1b8      	cbz	r0, 16060 <lr_check_done.part.0+0x3c>
   16030:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
		LL_ASSERT(ctx_header == ctx);
   16034:	42b4      	cmp	r4, r6
   16036:	d00b      	beq.n	16050 <lr_check_done.part.0+0x2c>
   16038:	4a14      	ldr	r2, [pc, #80]	; (1608c <lr_check_done.part.0+0x68>)
   1603a:	4915      	ldr	r1, [pc, #84]	; (16090 <lr_check_done.part.0+0x6c>)
   1603c:	4815      	ldr	r0, [pc, #84]	; (16094 <lr_check_done.part.0+0x70>)
   1603e:	2351      	movs	r3, #81	; 0x51
   16040:	f00b fb84 	bl	2174c <assert_print>
   16044:	4040      	eors	r0, r0
   16046:	f380 8811 	msr	BASEPRI, r0
   1604a:	f04f 0003 	mov.w	r0, #3
   1604e:	df02      	svc	2
		lr_dequeue(conn);
   16050:	4628      	mov	r0, r5
   16052:	f7ff ff7b 	bl	15f4c <lr_dequeue>
		llcp_proc_ctx_release(ctx);
   16056:	4620      	mov	r0, r4
}
   16058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		llcp_proc_ctx_release(ctx);
   1605c:	f7fe be4c 	b.w	14cf8 <llcp_proc_ctx_release>
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   16060:	4606      	mov	r6, r0
   16062:	2101      	movs	r1, #1
   16064:	2003      	movs	r0, #3
   16066:	f004 fc13 	bl	1a890 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   1606a:	4632      	mov	r2, r6
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   1606c:	4607      	mov	r7, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   1606e:	2101      	movs	r1, #1
   16070:	2003      	movs	r0, #3
   16072:	f7f8 f865 	bl	e140 <mayfly_enable>
   16076:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
	if (key) {
   1607a:	2f00      	cmp	r7, #0
   1607c:	d0da      	beq.n	16034 <lr_check_done.part.0+0x10>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   1607e:	2201      	movs	r2, #1
   16080:	4611      	mov	r1, r2
   16082:	2003      	movs	r0, #3
   16084:	f7f8 f85c 	bl	e140 <mayfly_enable>
   16088:	e7d4      	b.n	16034 <lr_check_done.part.0+0x10>
   1608a:	bf00      	nop
   1608c:	000290d0 	.word	0x000290d0
   16090:	0002912c 	.word	0x0002912c
   16094:	0002866c 	.word	0x0002866c

00016098 <llcp_lr_enqueue>:
{
   16098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1609a:	4605      	mov	r5, r0
   1609c:	460c      	mov	r4, r1
	if (mayfly_is_running()) {
   1609e:	f004 fc55 	bl	1a94c <mayfly_is_running>
   160a2:	b140      	cbz	r0, 160b6 <llcp_lr_enqueue+0x1e>
	parent->next = child;
   160a4:	2300      	movs	r3, #0
   160a6:	6023      	str	r3, [r4, #0]
	return list->tail;
   160a8:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
   160ac:	b1f3      	cbz	r3, 160ec <llcp_lr_enqueue+0x54>
	parent->next = child;
   160ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
   160b0:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
   160b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   160b6:	4606      	mov	r6, r0
   160b8:	2101      	movs	r1, #1
   160ba:	2003      	movs	r0, #3
   160bc:	f004 fbe8 	bl	1a890 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   160c0:	4632      	mov	r2, r6
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   160c2:	4607      	mov	r7, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   160c4:	2101      	movs	r1, #1
   160c6:	2003      	movs	r0, #3
   160c8:	f7f8 f83a 	bl	e140 <mayfly_enable>
	parent->next = child;
   160cc:	6026      	str	r6, [r4, #0]
	return list->tail;
   160ce:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
   160d2:	b183      	cbz	r3, 160f6 <llcp_lr_enqueue+0x5e>
	parent->next = child;
   160d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   160d6:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
	if (key) {
   160da:	2f00      	cmp	r7, #0
   160dc:	d0ea      	beq.n	160b4 <llcp_lr_enqueue+0x1c>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   160de:	2201      	movs	r2, #1
}
   160e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   160e4:	4611      	mov	r1, r2
   160e6:	2003      	movs	r0, #3
   160e8:	f7f8 b82a 	b.w	e140 <mayfly_enable>
	list->head = node;
   160ec:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
   160f0:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
   160f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160f6:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
   160fa:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
   160fe:	e7ec      	b.n	160da <llcp_lr_enqueue+0x42>

00016100 <llcp_lr_peek>:
{
   16100:	b570      	push	{r4, r5, r6, lr}
   16102:	4605      	mov	r5, r0
	if (mayfly_is_running()) {
   16104:	f004 fc22 	bl	1a94c <mayfly_is_running>
   16108:	b118      	cbz	r0, 16112 <llcp_lr_peek+0x12>
	return list->head;
   1610a:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
}
   1610e:	4620      	mov	r0, r4
   16110:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   16112:	4604      	mov	r4, r0
   16114:	2101      	movs	r1, #1
   16116:	2003      	movs	r0, #3
   16118:	f004 fbba 	bl	1a890 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   1611c:	4622      	mov	r2, r4
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   1611e:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   16120:	2101      	movs	r1, #1
   16122:	2003      	movs	r0, #3
   16124:	f7f8 f80c 	bl	e140 <mayfly_enable>
   16128:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
	if (key) {
   1612c:	2e00      	cmp	r6, #0
   1612e:	d0ee      	beq.n	1610e <llcp_lr_peek+0xe>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   16130:	2201      	movs	r2, #1
   16132:	4611      	mov	r1, r2
   16134:	2003      	movs	r0, #3
   16136:	f7f8 f803 	bl	e140 <mayfly_enable>
}
   1613a:	4620      	mov	r0, r4
   1613c:	bd70      	pop	{r4, r5, r6, pc}
   1613e:	bf00      	nop

00016140 <lr_act_run>:
{
   16140:	b538      	push	{r3, r4, r5, lr}
   16142:	4605      	mov	r5, r0
	ctx = llcp_lr_peek(conn);
   16144:	f7ff ffdc 	bl	16100 <llcp_lr_peek>
	switch (ctx->proc) {
   16148:	7a03      	ldrb	r3, [r0, #8]
   1614a:	3b01      	subs	r3, #1
	ctx = llcp_lr_peek(conn);
   1614c:	4604      	mov	r4, r0
	switch (ctx->proc) {
   1614e:	2b0b      	cmp	r3, #11
   16150:	d81b      	bhi.n	1618a <lr_act_run+0x4a>
   16152:	e8df f003 	tbb	[pc, r3]
   16156:	0606      	.short	0x0606
   16158:	1a1a0606 	.word	0x1a1a0606
   1615c:	06141428 	.word	0x06141428
   16160:	061a      	.short	0x061a
		llcp_lp_comm_run(conn, ctx, NULL);
   16162:	4601      	mov	r1, r0
   16164:	2200      	movs	r2, #0
   16166:	4628      	mov	r0, r5
   16168:	f7ff feda 	bl	15f20 <llcp_lp_comm_run>
	if (ctx->done) {
   1616c:	69a3      	ldr	r3, [r4, #24]
   1616e:	b903      	cbnz	r3, 16172 <lr_act_run+0x32>
}
   16170:	bd38      	pop	{r3, r4, r5, pc}
   16172:	4621      	mov	r1, r4
   16174:	4628      	mov	r0, r5
   16176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1617a:	f7ff bf53 	b.w	16024 <lr_check_done.part.0>
		llcp_lp_cu_run(conn, ctx, NULL);
   1617e:	4601      	mov	r1, r0
   16180:	2200      	movs	r2, #0
   16182:	4628      	mov	r0, r5
   16184:	f001 f946 	bl	17414 <llcp_lp_cu_run>
		break;
   16188:	e7f0      	b.n	1616c <lr_act_run+0x2c>
		LL_ASSERT(0);
   1618a:	4a0a      	ldr	r2, [pc, #40]	; (161b4 <lr_act_run+0x74>)
   1618c:	490a      	ldr	r1, [pc, #40]	; (161b8 <lr_act_run+0x78>)
   1618e:	480b      	ldr	r0, [pc, #44]	; (161bc <lr_act_run+0x7c>)
   16190:	f44f 73c9 	mov.w	r3, #402	; 0x192
   16194:	f00b fada 	bl	2174c <assert_print>
   16198:	4040      	eors	r0, r0
   1619a:	f380 8811 	msr	BASEPRI, r0
   1619e:	f04f 0003 	mov.w	r0, #3
   161a2:	df02      	svc	2
		break;
   161a4:	e7e2      	b.n	1616c <lr_act_run+0x2c>
		llcp_lp_pu_run(conn, ctx, NULL);
   161a6:	4601      	mov	r1, r0
   161a8:	2200      	movs	r2, #0
   161aa:	4628      	mov	r0, r5
   161ac:	f7fe f838 	bl	14220 <llcp_lp_pu_run>
		break;
   161b0:	e7dc      	b.n	1616c <lr_act_run+0x2c>
   161b2:	bf00      	nop
   161b4:	000290d0 	.word	0x000290d0
   161b8:	000286fc 	.word	0x000286fc
   161bc:	0002866c 	.word	0x0002866c

000161c0 <lr_st_active.constprop.0>:
	}
}

static void lr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
{
	switch (evt) {
   161c0:	2901      	cmp	r1, #1
static void lr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
   161c2:	b510      	push	{r4, lr}
   161c4:	4604      	mov	r4, r0
	switch (evt) {
   161c6:	d017      	beq.n	161f8 <lr_st_active.constprop.0+0x38>
   161c8:	2903      	cmp	r1, #3
   161ca:	d004      	beq.n	161d6 <lr_st_active.constprop.0+0x16>
   161cc:	b159      	cbz	r1, 161e6 <lr_st_active.constprop.0+0x26>
		break;
	default:
		/* Ignore other evts */
		break;
	}
}
   161ce:	bd10      	pop	{r4, pc}
		llcp_proc_ctx_release(ctx);
   161d0:	f7fe fd92 	bl	14cf8 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   161d4:	4620      	mov	r0, r4
   161d6:	f7ff feb9 	bl	15f4c <lr_dequeue>
	while (ctx != NULL) {
   161da:	2800      	cmp	r0, #0
   161dc:	d1f8      	bne.n	161d0 <lr_st_active.constprop.0+0x10>
	conn->llcp.local.state = state;
   161de:	2302      	movs	r3, #2
   161e0:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
   161e4:	bd10      	pop	{r4, pc}
		if (llcp_lr_peek(conn)) {
   161e6:	f7ff ff8b 	bl	16100 <llcp_lr_peek>
   161ea:	2800      	cmp	r0, #0
   161ec:	d0ef      	beq.n	161ce <lr_st_active.constprop.0+0xe>
			lr_act_run(conn);
   161ee:	4620      	mov	r0, r4
}
   161f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lr_act_run(conn);
   161f4:	f7ff bfa4 	b.w	16140 <lr_act_run>
		lr_act_complete(conn);
   161f8:	f7ff fedc 	bl	15fb4 <lr_act_complete>
	conn->llcp.local.state = state;
   161fc:	2300      	movs	r3, #0
   161fe:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
   16202:	bd10      	pop	{r4, pc}

00016204 <lr_execute_fsm.constprop.0>:
		/* Ignore other evts */
		break;
	}
}

static void lr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
   16204:	b538      	push	{r3, r4, r5, lr}
{
	switch (conn->llcp.local.state) {
   16206:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
static void lr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
   1620a:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
   1620c:	2b03      	cmp	r3, #3
   1620e:	d831      	bhi.n	16274 <lr_execute_fsm.constprop.0+0x70>
   16210:	e8df f003 	tbb	[pc, r3]
   16214:	020c0206 	.word	0x020c0206
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   16218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lr_st_active(conn, evt, param);
   1621c:	f7ff bfd0 	b.w	161c0 <lr_st_active.constprop.0>
	switch (evt) {
   16220:	2901      	cmp	r1, #1
   16222:	d023      	beq.n	1626c <lr_execute_fsm.constprop.0+0x68>
   16224:	2903      	cmp	r1, #3
   16226:	d009      	beq.n	1623c <lr_execute_fsm.constprop.0+0x38>
   16228:	b189      	cbz	r1, 1624e <lr_execute_fsm.constprop.0+0x4a>
}
   1622a:	bd38      	pop	{r3, r4, r5, pc}
	switch (evt) {
   1622c:	2902      	cmp	r1, #2
   1622e:	d1fc      	bne.n	1622a <lr_execute_fsm.constprop.0+0x26>
	conn->llcp.local.state = state;
   16230:	2300      	movs	r3, #0
   16232:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
}
   16236:	bd38      	pop	{r3, r4, r5, pc}
		llcp_proc_ctx_release(ctx);
   16238:	f7fe fd5e 	bl	14cf8 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   1623c:	4620      	mov	r0, r4
   1623e:	f7ff fe85 	bl	15f4c <lr_dequeue>
	while (ctx != NULL) {
   16242:	2800      	cmp	r0, #0
   16244:	d1f8      	bne.n	16238 <lr_execute_fsm.constprop.0+0x34>
	conn->llcp.local.state = state;
   16246:	2302      	movs	r3, #2
   16248:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
   1624c:	bd38      	pop	{r3, r4, r5, pc}
		ctx = llcp_lr_peek(conn);
   1624e:	f7ff ff57 	bl	16100 <llcp_lr_peek>
		if (ctx) {
   16252:	2800      	cmp	r0, #0
   16254:	d0e9      	beq.n	1622a <lr_execute_fsm.constprop.0+0x26>
			const enum llcp_proc curr_proc = ctx->proc;
   16256:	7a05      	ldrb	r5, [r0, #8]
			lr_act_run(conn);
   16258:	4620      	mov	r0, r4
   1625a:	f7ff ff71 	bl	16140 <lr_act_run>
			if (curr_proc != PROC_TERMINATE) {
   1625e:	2d0a      	cmp	r5, #10
	conn->llcp.local.state = state;
   16260:	bf14      	ite	ne
   16262:	2301      	movne	r3, #1
   16264:	2303      	moveq	r3, #3
   16266:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
   1626a:	bd38      	pop	{r3, r4, r5, pc}
   1626c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lr_act_complete(conn);
   16270:	f7ff bea0 	b.w	15fb4 <lr_act_complete>
		LL_ASSERT(0);
   16274:	4a06      	ldr	r2, [pc, #24]	; (16290 <lr_execute_fsm.constprop.0+0x8c>)
   16276:	4907      	ldr	r1, [pc, #28]	; (16294 <lr_execute_fsm.constprop.0+0x90>)
   16278:	4807      	ldr	r0, [pc, #28]	; (16298 <lr_execute_fsm.constprop.0+0x94>)
   1627a:	f44f 730b 	mov.w	r3, #556	; 0x22c
   1627e:	f00b fa65 	bl	2174c <assert_print>
   16282:	4040      	eors	r0, r0
   16284:	f380 8811 	msr	BASEPRI, r0
   16288:	f04f 0003 	mov.w	r0, #3
   1628c:	df02      	svc	2
}
   1628e:	bd38      	pop	{r3, r4, r5, pc}
   16290:	000290d0 	.word	0x000290d0
   16294:	000286fc 	.word	0x000286fc
   16298:	0002866c 	.word	0x0002866c

0001629c <llcp_lr_ispaused>:
	return conn->llcp.local.pause == 1U;
   1629c:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
}
   162a0:	f1a0 0001 	sub.w	r0, r0, #1
   162a4:	fab0 f080 	clz	r0, r0
   162a8:	0940      	lsrs	r0, r0, #5
   162aa:	4770      	bx	lr

000162ac <llcp_lr_pause>:
	conn->llcp.local.pause = 1U;
   162ac:	2301      	movs	r3, #1
   162ae:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
}
   162b2:	4770      	bx	lr

000162b4 <llcp_lr_resume>:
	conn->llcp.local.pause = 0U;
   162b4:	2300      	movs	r3, #0
   162b6:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
}
   162ba:	4770      	bx	lr

000162bc <llcp_lr_prt_restart>:
	conn->llcp.local.prt_expire = conn->llcp.prt_reload;
   162bc:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
   162c0:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
   162c4:	4770      	bx	lr
   162c6:	bf00      	nop

000162c8 <llcp_lr_prt_restart_with_value>:
	conn->llcp.local.prt_expire = value;
   162c8:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
}
   162cc:	4770      	bx	lr
   162ce:	bf00      	nop

000162d0 <llcp_lr_prt_stop>:
	conn->llcp.local.prt_expire = 0U;
   162d0:	2300      	movs	r3, #0
   162d2:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
   162d6:	4770      	bx	lr

000162d8 <llcp_lr_rx>:
{
   162d8:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   162da:	7a0b      	ldrb	r3, [r1, #8]
   162dc:	3b01      	subs	r3, #1
{
   162de:	460c      	mov	r4, r1
   162e0:	4605      	mov	r5, r0
	switch (ctx->proc) {
   162e2:	2b0b      	cmp	r3, #11
   162e4:	d817      	bhi.n	16316 <llcp_lr_rx+0x3e>
   162e6:	e8df f003 	tbb	[pc, r3]
   162ea:	0606      	.short	0x0606
   162ec:	16160606 	.word	0x16160606
   162f0:	06121224 	.word	0x06121224
   162f4:	0616      	.short	0x0616
		llcp_lp_comm_rx(conn, ctx, rx);
   162f6:	4621      	mov	r1, r4
   162f8:	f7ff fe08 	bl	15f0c <llcp_lp_comm_rx>
	if (ctx->done) {
   162fc:	69a3      	ldr	r3, [r4, #24]
   162fe:	b903      	cbnz	r3, 16302 <llcp_lr_rx+0x2a>
}
   16300:	bd38      	pop	{r3, r4, r5, pc}
   16302:	4621      	mov	r1, r4
   16304:	4628      	mov	r0, r5
   16306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1630a:	f7ff be8b 	b.w	16024 <lr_check_done.part.0>
		llcp_lp_cu_rx(conn, ctx, rx);
   1630e:	4621      	mov	r1, r4
   16310:	f001 f828 	bl	17364 <llcp_lp_cu_rx>
		break;
   16314:	e7f2      	b.n	162fc <llcp_lr_rx+0x24>
		LL_ASSERT(0);
   16316:	4a09      	ldr	r2, [pc, #36]	; (1633c <llcp_lr_rx+0x64>)
   16318:	4909      	ldr	r1, [pc, #36]	; (16340 <llcp_lr_rx+0x68>)
   1631a:	480a      	ldr	r0, [pc, #40]	; (16344 <llcp_lr_rx+0x6c>)
   1631c:	f44f 7388 	mov.w	r3, #272	; 0x110
   16320:	f00b fa14 	bl	2174c <assert_print>
   16324:	4040      	eors	r0, r0
   16326:	f380 8811 	msr	BASEPRI, r0
   1632a:	f04f 0003 	mov.w	r0, #3
   1632e:	df02      	svc	2
		break;
   16330:	e7e4      	b.n	162fc <llcp_lr_rx+0x24>
		llcp_lp_pu_rx(conn, ctx, rx);
   16332:	4621      	mov	r1, r4
   16334:	f7fd ff50 	bl	141d8 <llcp_lp_pu_rx>
		break;
   16338:	e7e0      	b.n	162fc <llcp_lr_rx+0x24>
   1633a:	bf00      	nop
   1633c:	000290d0 	.word	0x000290d0
   16340:	000286fc 	.word	0x000286fc
   16344:	0002866c 	.word	0x0002866c

00016348 <llcp_lr_tx_ack>:
{
   16348:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   1634a:	7a0b      	ldrb	r3, [r1, #8]
   1634c:	3b03      	subs	r3, #3
{
   1634e:	460c      	mov	r4, r1
   16350:	4605      	mov	r5, r0
	switch (ctx->proc) {
   16352:	2b09      	cmp	r3, #9
   16354:	d809      	bhi.n	1636a <llcp_lr_tx_ack+0x22>
   16356:	e8df f003 	tbb	[pc, r3]
   1635a:	0805      	.short	0x0805
   1635c:	080b0808 	.word	0x080b0808
   16360:	05080508 	.word	0x05080508
		llcp_lp_comm_tx_ack(conn, ctx, tx);
   16364:	4621      	mov	r1, r4
   16366:	f7ff fdcd 	bl	15f04 <llcp_lp_comm_tx_ack>
	if (ctx->done) {
   1636a:	69a3      	ldr	r3, [r4, #24]
   1636c:	b933      	cbnz	r3, 1637c <llcp_lr_tx_ack+0x34>
}
   1636e:	bd38      	pop	{r3, r4, r5, pc}
		llcp_lp_pu_tx_ack(conn, ctx, tx);
   16370:	4621      	mov	r1, r4
   16372:	f7fd ff59 	bl	14228 <llcp_lp_pu_tx_ack>
	if (ctx->done) {
   16376:	69a3      	ldr	r3, [r4, #24]
   16378:	2b00      	cmp	r3, #0
   1637a:	d0f8      	beq.n	1636e <llcp_lr_tx_ack+0x26>
   1637c:	4621      	mov	r1, r4
   1637e:	4628      	mov	r0, r5
}
   16380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16384:	f7ff be4e 	b.w	16024 <lr_check_done.part.0>

00016388 <llcp_lr_tx_ntf>:
{
   16388:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   1638a:	7a0b      	ldrb	r3, [r1, #8]
   1638c:	2b07      	cmp	r3, #7
{
   1638e:	460c      	mov	r4, r1
   16390:	4605      	mov	r5, r0
	switch (ctx->proc) {
   16392:	d008      	beq.n	163a6 <llcp_lr_tx_ntf+0x1e>
	if (ctx->done) {
   16394:	69a3      	ldr	r3, [r4, #24]
   16396:	b903      	cbnz	r3, 1639a <llcp_lr_tx_ntf+0x12>
}
   16398:	bd38      	pop	{r3, r4, r5, pc}
   1639a:	4621      	mov	r1, r4
   1639c:	4628      	mov	r0, r5
   1639e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   163a2:	f7ff be3f 	b.w	16024 <lr_check_done.part.0>
		llcp_lp_pu_tx_ntf(conn, ctx);
   163a6:	f7fd ff43 	bl	14230 <llcp_lp_pu_tx_ntf>
		break;
   163aa:	e7f3      	b.n	16394 <llcp_lr_tx_ntf+0xc>

000163ac <llcp_lr_init>:
	conn->llcp.local.state = state;
   163ac:	2202      	movs	r2, #2

void llcp_lr_init(struct ll_conn *conn)
{
	lr_set_state(conn, LR_STATE_DISCONNECT);
	conn->llcp.local.prt_expire = 0U;
   163ae:	2300      	movs	r3, #0
	conn->llcp.local.state = state;
   163b0:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
	conn->llcp.local.prt_expire = 0U;
   163b4:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
   163b8:	4770      	bx	lr
   163ba:	bf00      	nop

000163bc <llcp_lr_run>:

void llcp_lr_run(struct ll_conn *conn)
{
	lr_execute_fsm(conn, LR_EVT_RUN, NULL);
   163bc:	2100      	movs	r1, #0
   163be:	f7ff bf21 	b.w	16204 <lr_execute_fsm.constprop.0>
   163c2:	bf00      	nop

000163c4 <llcp_lr_complete>:
}

void llcp_lr_complete(struct ll_conn *conn)
{
   163c4:	b510      	push	{r4, lr}
	switch (conn->llcp.local.state) {
   163c6:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
{
   163ca:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
   163cc:	2b03      	cmp	r3, #3
   163ce:	d80d      	bhi.n	163ec <llcp_lr_complete+0x28>
   163d0:	e8df f003 	tbb	[pc, r3]
   163d4:	02070208 	.word	0x02070208
		lr_act_complete(conn);
   163d8:	f7ff fdec 	bl	15fb4 <lr_act_complete>
	conn->llcp.local.state = state;
   163dc:	2300      	movs	r3, #0
   163de:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	lr_execute_fsm(conn, LR_EVT_COMPLETE, NULL);
}
   163e2:	bd10      	pop	{r4, pc}
   163e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lr_act_complete(conn);
   163e8:	f7ff bde4 	b.w	15fb4 <lr_act_complete>
		LL_ASSERT(0);
   163ec:	4a06      	ldr	r2, [pc, #24]	; (16408 <llcp_lr_complete+0x44>)
   163ee:	4907      	ldr	r1, [pc, #28]	; (1640c <llcp_lr_complete+0x48>)
   163f0:	4807      	ldr	r0, [pc, #28]	; (16410 <llcp_lr_complete+0x4c>)
   163f2:	f44f 730b 	mov.w	r3, #556	; 0x22c
   163f6:	f00b f9a9 	bl	2174c <assert_print>
   163fa:	4040      	eors	r0, r0
   163fc:	f380 8811 	msr	BASEPRI, r0
   16400:	f04f 0003 	mov.w	r0, #3
   16404:	df02      	svc	2
}
   16406:	bd10      	pop	{r4, pc}
   16408:	000290d0 	.word	0x000290d0
   1640c:	000286fc 	.word	0x000286fc
   16410:	0002866c 	.word	0x0002866c

00016414 <llcp_lr_connect>:

void llcp_lr_connect(struct ll_conn *conn)
{
   16414:	b508      	push	{r3, lr}
	switch (conn->llcp.local.state) {
   16416:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   1641a:	2b02      	cmp	r3, #2
   1641c:	d011      	beq.n	16442 <llcp_lr_connect+0x2e>
   1641e:	d800      	bhi.n	16422 <llcp_lr_connect+0xe>
	lr_execute_fsm(conn, LR_EVT_CONNECT, NULL);
}
   16420:	bd08      	pop	{r3, pc}
	switch (conn->llcp.local.state) {
   16422:	2b03      	cmp	r3, #3
   16424:	d0fc      	beq.n	16420 <llcp_lr_connect+0xc>
		LL_ASSERT(0);
   16426:	4a09      	ldr	r2, [pc, #36]	; (1644c <llcp_lr_connect+0x38>)
   16428:	4909      	ldr	r1, [pc, #36]	; (16450 <llcp_lr_connect+0x3c>)
   1642a:	480a      	ldr	r0, [pc, #40]	; (16454 <llcp_lr_connect+0x40>)
   1642c:	f44f 730b 	mov.w	r3, #556	; 0x22c
   16430:	f00b f98c 	bl	2174c <assert_print>
   16434:	4040      	eors	r0, r0
   16436:	f380 8811 	msr	BASEPRI, r0
   1643a:	f04f 0003 	mov.w	r0, #3
   1643e:	df02      	svc	2
}
   16440:	bd08      	pop	{r3, pc}
	conn->llcp.local.state = state;
   16442:	2300      	movs	r3, #0
   16444:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
}
   16448:	bd08      	pop	{r3, pc}
   1644a:	bf00      	nop
   1644c:	000290d0 	.word	0x000290d0
   16450:	000286fc 	.word	0x000286fc
   16454:	0002866c 	.word	0x0002866c

00016458 <llcp_lr_disconnect>:

void llcp_lr_disconnect(struct ll_conn *conn)
{
	lr_execute_fsm(conn, LR_EVT_DISCONNECT, NULL);
   16458:	2103      	movs	r1, #3
   1645a:	f7ff bed3 	b.w	16204 <lr_execute_fsm.constprop.0>
   1645e:	bf00      	nop

00016460 <llcp_lr_abort>:
}

void llcp_lr_abort(struct ll_conn *conn)
{
   16460:	b538      	push	{r3, r4, r5, lr}
   16462:	4604      	mov	r4, r0
	struct proc_ctx *ctx;

	/* Flush all pending procedures */
	ctx = lr_dequeue(conn);
   16464:	f7ff fd72 	bl	15f4c <lr_dequeue>
	while (ctx) {
   16468:	b130      	cbz	r0, 16478 <llcp_lr_abort+0x18>
		llcp_proc_ctx_release(ctx);
   1646a:	f7fe fc45 	bl	14cf8 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   1646e:	4620      	mov	r0, r4
   16470:	f7ff fd6c 	bl	15f4c <lr_dequeue>
	while (ctx) {
   16474:	2800      	cmp	r0, #0
   16476:	d1f8      	bne.n	1646a <llcp_lr_abort+0xa>
	conn->llcp.local.prt_expire = 0U;
   16478:	2500      	movs	r5, #0
   1647a:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	}

	llcp_lr_prt_stop(conn);
	llcp_rr_set_incompat(conn, 0U);
   1647e:	4629      	mov	r1, r5
   16480:	4620      	mov	r0, r4
   16482:	f001 faab 	bl	179dc <llcp_rr_set_incompat>
	conn->llcp.local.state = state;
   16486:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
	lr_set_state(conn, LR_STATE_IDLE);
}
   1648a:	bd38      	pop	{r3, r4, r5, pc}

0001648c <llcp_pdu_encode_ping_req>:
 * LE Ping Procedure Helpers
 */

void llcp_pdu_encode_ping_req(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1648c:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_req);
   1648e:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   16490:	2212      	movs	r2, #18
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16492:	f043 0303 	orr.w	r3, r3, #3
   16496:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_req);
   16498:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1649a:	70c2      	strb	r2, [r0, #3]
}
   1649c:	4770      	bx	lr
   1649e:	bf00      	nop

000164a0 <llcp_pdu_encode_ping_rsp>:

void llcp_pdu_encode_ping_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164a0:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_rsp);
   164a2:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   164a4:	2213      	movs	r2, #19
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164a6:	f043 0303 	orr.w	r3, r3, #3
   164aa:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_rsp);
   164ac:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   164ae:	70c2      	strb	r2, [r0, #3]
}
   164b0:	4770      	bx	lr
   164b2:	bf00      	nop

000164b4 <llcp_pdu_encode_unknown_rsp>:
 * Unknown response helper
 */

void llcp_pdu_encode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164b4:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   164b6:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164ba:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   164be:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164c0:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   164c2:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   164c6:	70ca      	strb	r2, [r1, #3]

	pdu->llctrl.unknown_rsp.type = ctx->unknown_response.type;
   164c8:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   164cc:	710b      	strb	r3, [r1, #4]
}
   164ce:	4770      	bx	lr

000164d0 <llcp_pdu_decode_unknown_rsp>:

void llcp_pdu_decode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->unknown_response.type = pdu->llctrl.unknown_rsp.type;
   164d0:	790b      	ldrb	r3, [r1, #4]
   164d2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
   164d6:	4770      	bx	lr

000164d8 <llcp_ntf_encode_unknown_rsp>:

void llcp_ntf_encode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_unknown_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164d8:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   164da:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164de:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   164e2:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164e4:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   164e6:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   164ea:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.unknown_rsp;
	p->type = ctx->unknown_response.type;
   164ec:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   164f0:	710b      	strb	r3, [r1, #4]
}
   164f2:	4770      	bx	lr

000164f4 <llcp_pdu_encode_feature_req>:

	*featuresout = feat;
}

void llcp_pdu_encode_feature_req(struct ll_conn *conn, struct pdu_data *pdu)
{
   164f4:	b510      	push	{r4, lr}
	struct pdu_data_llctrl_feature_req *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164f6:	780b      	ldrb	r3, [r1, #0]
{
   164f8:	460c      	mov	r4, r1
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
   164fa:	2209      	movs	r2, #9
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_REQ;
   164fc:	2108      	movs	r1, #8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   164fe:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_REQ;
   16502:	70e1      	strb	r1, [r4, #3]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
   16504:	7062      	strb	r2, [r4, #1]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16506:	7023      	strb	r3, [r4, #0]

#if defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) && defined(CONFIG_BT_PERIPHERAL)
	if (conn->lll.role == BT_HCI_ROLE_PERIPHERAL) {
   16508:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PER_INIT_FEAT_XCHG;
   1650c:	2b00      	cmp	r3, #0
   1650e:	bfac      	ite	ge
   16510:	460b      	movge	r3, r1
   16512:	230e      	movlt	r3, #14
   16514:	70e3      	strb	r3, [r4, #3]
	}
#endif /* CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG && CONFIG_BT_PERIPHERAL */

	p = &pdu->llctrl.feature_req;
	sys_put_le64(ll_feat_get(), p->features);
   16516:	f7fa fb7d 	bl	10c14 <ll_feat_get>
	dst[0] = val;
   1651a:	2200      	movs	r2, #0
   1651c:	f361 0207 	bfi	r2, r1, #0, #8
	dst[1] = val >> 8;
   16520:	f3c1 2c07 	ubfx	ip, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   16524:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   16526:	f36c 220f 	bfi	r2, ip, #8, #8
   1652a:	f363 4217 	bfi	r2, r3, #16, #8
	dst[1] = val >> 8;
   1652e:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   16530:	f363 621f 	bfi	r2, r3, #24, #8
   16534:	6060      	str	r0, [r4, #4]
   16536:	60a2      	str	r2, [r4, #8]
}
   16538:	bd10      	pop	{r4, pc}
   1653a:	bf00      	nop

0001653c <llcp_pdu_encode_feature_rsp>:

void llcp_pdu_encode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
   1653c:	b538      	push	{r3, r4, r5, lr}
   1653e:	460c      	mov	r4, r1
   16540:	4605      	mov	r5, r0
	struct pdu_data_llctrl_feature_rsp *p;
	uint64_t feature_rsp = ll_feat_get();
   16542:	f7fa fb67 	bl	10c14 <ll_feat_get>

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16546:	7823      	ldrb	r3, [r4, #0]
   16548:	f043 0303 	orr.w	r3, r3, #3
   1654c:	7023      	strb	r3, [r4, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   1654e:	2309      	movs	r3, #9
   16550:	7063      	strb	r3, [r4, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   16552:	70e3      	strb	r3, [r4, #3]

	/*
	 * we only filter on octet 0, remaining 7 octets are the features
	 * we support, as defined in LL_FEAT
	 */
	feature_rsp &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   16554:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   16558:	7221      	strb	r1, [r4, #8]
   1655a:	f063 03ff 	orn	r3, r3, #255	; 0xff
   1655e:	4018      	ands	r0, r3
	sys_put_le16(val >> 16, &dst[2]);
   16560:	0c02      	lsrs	r2, r0, #16
   16562:	0c0b      	lsrs	r3, r1, #16
	dst[1] = val >> 8;
   16564:	f3c0 2507 	ubfx	r5, r0, #8, #8
	dst[0] = val;
   16568:	7120      	strb	r0, [r4, #4]
	dst[1] = val >> 8;
   1656a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1656e:	0a10      	lsrs	r0, r2, #8
	dst[0] = val;
   16570:	71a2      	strb	r2, [r4, #6]
	dst[1] = val >> 8;
   16572:	0a1a      	lsrs	r2, r3, #8
   16574:	71e0      	strb	r0, [r4, #7]
   16576:	7165      	strb	r5, [r4, #5]
   16578:	7261      	strb	r1, [r4, #9]
	dst[0] = val;
   1657a:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   1657c:	72e2      	strb	r2, [r4, #11]

	sys_put_le64(feature_rsp, p->features);
}
   1657e:	bd38      	pop	{r3, r4, r5, pc}

00016580 <llcp_ntf_encode_feature_rsp>:

void llcp_ntf_encode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_feature_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16580:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   16582:	2209      	movs	r2, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16584:	f043 0303 	orr.w	r3, r3, #3
   16588:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   1658a:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1658c:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.feature_rsp;

	sys_put_le64(conn->llcp.fex.features_peer, p->features);
   1658e:	e9d0 234a 	ldrd	r2, r3, [r0, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   16592:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   16594:	f3c2 2c07 	ubfx	ip, r2, #8, #8
	dst[0] = val;
   16598:	710a      	strb	r2, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1659a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1659c:	f881 c005 	strb.w	ip, [r1, #5]
	dst[0] = val;
   165a0:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   165a2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	dst[0] = val;
   165a6:	720b      	strb	r3, [r1, #8]
	dst[1] = val >> 8;
   165a8:	f3c3 2007 	ubfx	r0, r3, #8, #8
   165ac:	0a13      	lsrs	r3, r2, #8
   165ae:	f881 c007 	strb.w	ip, [r1, #7]
   165b2:	7248      	strb	r0, [r1, #9]
	dst[0] = val;
   165b4:	728a      	strb	r2, [r1, #10]
	dst[1] = val >> 8;
   165b6:	72cb      	strb	r3, [r1, #11]
}
   165b8:	4770      	bx	lr
   165ba:	bf00      	nop

000165bc <llcp_pdu_decode_feature_req>:

void llcp_pdu_decode_feature_req(struct ll_conn *conn, struct pdu_data *pdu)
{
   165bc:	b570      	push	{r4, r5, r6, lr}
	feat &= LL_FEAT_BIT_MASK_VALID;
   165be:	4e0c      	ldr	r6, [pc, #48]	; (165f0 <llcp_pdu_decode_feature_req+0x34>)
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   165c0:	684b      	ldr	r3, [r1, #4]
   165c2:	688d      	ldr	r5, [r1, #8]
{
   165c4:	4604      	mov	r4, r0
	feat &= LL_FEAT_BIT_MASK_VALID;
   165c6:	401e      	ands	r6, r3
	uint64_t featureset;

	feature_filter(pdu->llctrl.feature_req.features, &featureset);
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
   165c8:	f7fa fb24 	bl	10c14 <ll_feat_get>
   165cc:	ea00 0306 	and.w	r3, r0, r6
   165d0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   165d4:	f063 03ff 	orn	r3, r3, #255	; 0xff
	feat &= LL_FEAT_BIT_MASK_VALID;
   165d8:	f005 05ef 	and.w	r5, r5, #239	; 0xef
	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   165dc:	4033      	ands	r3, r6
	conn->llcp.fex.features_peer = featureset;
   165de:	e9c4 354a 	strd	r3, r5, [r4, #296]	; 0x128
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
   165e2:	4029      	ands	r1, r5

	conn->llcp.fex.valid = 1;
   165e4:	2201      	movs	r2, #1
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
   165e6:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	conn->llcp.fex.valid = 1;
   165ea:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
}
   165ee:	bd70      	pop	{r4, r5, r6, pc}
   165f0:	f787cf2f 	.word	0xf787cf2f

000165f4 <llcp_pdu_decode_feature_rsp>:

void llcp_pdu_decode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
   165f4:	b570      	push	{r4, r5, r6, lr}
	feat &= LL_FEAT_BIT_MASK_VALID;
   165f6:	4e0a      	ldr	r6, [pc, #40]	; (16620 <llcp_pdu_decode_feature_rsp+0x2c>)
   165f8:	684b      	ldr	r3, [r1, #4]
   165fa:	688d      	ldr	r5, [r1, #8]
{
   165fc:	4604      	mov	r4, r0
	feat &= LL_FEAT_BIT_MASK_VALID;
   165fe:	401e      	ands	r6, r3
	uint64_t featureset;

	feature_filter(pdu->llctrl.feature_rsp.features, &featureset);
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
   16600:	f7fa fb08 	bl	10c14 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK_VALID;
   16604:	f005 05ef 	and.w	r5, r5, #239	; 0xef

	conn->llcp.fex.features_peer = featureset;
   16608:	e9c4 654a 	strd	r6, r5, [r4, #296]	; 0x128
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
   1660c:	4030      	ands	r0, r6
   1660e:	4029      	ands	r1, r5
	conn->llcp.fex.valid = 1;
   16610:	2301      	movs	r3, #1
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
   16612:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   16616:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	conn->llcp.fex.valid = 1;
   1661a:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
}
   1661e:	bd70      	pop	{r4, r5, r6, pc}
   16620:	f787cf2f 	.word	0xf787cf2f

00016624 <llcp_pdu_encode_min_used_chans_ind>:
#if defined(CONFIG_BT_PERIPHERAL)
void llcp_pdu_encode_min_used_chans_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_min_used_chans_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16624:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(min_used_chans_ind);
   16626:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1662a:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND;
   1662e:	2219      	movs	r2, #25
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16630:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(min_used_chans_ind);
   16632:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND;
   16636:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.min_used_chans_ind;
	p->phys = ctx->data.muc.phys;
   16638:	7f03      	ldrb	r3, [r0, #28]
   1663a:	710b      	strb	r3, [r1, #4]
	p->min_used_chans = ctx->data.muc.min_used_chans;
   1663c:	7f43      	ldrb	r3, [r0, #29]
   1663e:	714b      	strb	r3, [r1, #5]
}
   16640:	4770      	bx	lr
   16642:	bf00      	nop

00016644 <llcp_pdu_encode_terminate_ind>:
 */
void llcp_pdu_encode_terminate_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_terminate_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16644:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(terminate_ind);
   16646:	2202      	movs	r2, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16648:	f043 0303 	orr.w	r3, r3, #3
   1664c:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(terminate_ind);
   1664e:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
   16650:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.terminate_ind;
	p->error_code = ctx->data.term.error_code;
   16652:	7f03      	ldrb	r3, [r0, #28]
   16654:	710b      	strb	r3, [r1, #4]
}
   16656:	4770      	bx	lr

00016658 <llcp_pdu_decode_terminate_ind>:

void llcp_pdu_decode_terminate_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.term.error_code = pdu->llctrl.terminate_ind.error_code;
   16658:	790b      	ldrb	r3, [r1, #4]
   1665a:	7703      	strb	r3, [r0, #28]
}
   1665c:	4770      	bx	lr
   1665e:	bf00      	nop

00016660 <llcp_pdu_encode_version_ind>:
{
	uint16_t cid;
	uint16_t svn;
	struct pdu_data_llctrl_version_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16660:	7803      	ldrb	r3, [r0, #0]

	p = &pdu->llctrl.version_ind;
	p->version_number = LL_VERSION_NUMBER;
	cid = sys_cpu_to_le16(ll_settings_company_id());
	svn = sys_cpu_to_le16(ll_settings_subversion_number());
	p->company_id = cid;
   16662:	4a07      	ldr	r2, [pc, #28]	; (16680 <llcp_pdu_encode_version_ind+0x20>)
   16664:	f8c0 2005 	str.w	r2, [r0, #5]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   16668:	f04f 0c06 	mov.w	ip, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1666c:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16670:	f640 410c 	movw	r1, #3084	; 0xc0c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16674:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   16676:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1667a:	f8a0 1003 	strh.w	r1, [r0, #3]
	p->sub_version_number = svn;
}
   1667e:	4770      	bx	lr
   16680:	ffff05f1 	.word	0xffff05f1

00016684 <llcp_ntf_encode_version_ind>:

void llcp_ntf_encode_version_ind(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_version_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16684:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   16686:	f04f 0c06 	mov.w	ip, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1668a:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1668e:	220c      	movs	r2, #12
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16690:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   16692:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16696:	70ca      	strb	r2, [r1, #3]

	p = &pdu->llctrl.version_ind;
	p->version_number = conn->llcp.vex.cached.version_number;
   16698:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
   1669c:	710b      	strb	r3, [r1, #4]
	p->company_id = sys_cpu_to_le16(conn->llcp.vex.cached.company_id);
   1669e:	f8b0 3117 	ldrh.w	r3, [r0, #279]	; 0x117
   166a2:	f8a1 3005 	strh.w	r3, [r1, #5]
	p->sub_version_number = sys_cpu_to_le16(conn->llcp.vex.cached.sub_version_number);
   166a6:	f8b0 3119 	ldrh.w	r3, [r0, #281]	; 0x119
   166aa:	f8a1 3007 	strh.w	r3, [r1, #7]
}
   166ae:	4770      	bx	lr

000166b0 <llcp_pdu_decode_version_ind>:

void llcp_pdu_decode_version_ind(struct ll_conn *conn, struct pdu_data *pdu)
{
	conn->llcp.vex.valid = 1;
   166b0:	2301      	movs	r3, #1
   166b2:	f880 3115 	strb.w	r3, [r0, #277]	; 0x115
	conn->llcp.vex.cached.version_number = pdu->llctrl.version_ind.version_number;
   166b6:	790b      	ldrb	r3, [r1, #4]
   166b8:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
	conn->llcp.vex.cached.company_id = sys_le16_to_cpu(pdu->llctrl.version_ind.company_id);
   166bc:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   166c0:	f8a0 3117 	strh.w	r3, [r0, #279]	; 0x117
	conn->llcp.vex.cached.sub_version_number =
		sys_le16_to_cpu(pdu->llctrl.version_ind.sub_version_number);
   166c4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.vex.cached.sub_version_number =
   166c8:	f8a0 3119 	strh.w	r3, [r0, #281]	; 0x119
}
   166cc:	4770      	bx	lr
   166ce:	bf00      	nop

000166d0 <llcp_ntf_encode_enc_req>:
}
#endif /* CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_PERIPHERAL)
void llcp_ntf_encode_enc_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
   166d0:	b538      	push	{r3, r4, r5, lr}
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   166d2:	780b      	ldrb	r3, [r1, #0]
{
   166d4:	460c      	mov	r4, r1
   166d6:	4605      	mov	r5, r0
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   166d8:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_req);
   166dc:	2117      	movs	r1, #23
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   166de:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   166e0:	7023      	strb	r3, [r4, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_req);
   166e2:	7061      	strb	r1, [r4, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   166e4:	70e2      	strb	r2, [r4, #3]
	memcpy(p->rand, ctx->data.enc.rand, sizeof(p->rand));
   166e6:	f100 011d 	add.w	r1, r0, #29
   166ea:	2208      	movs	r2, #8
   166ec:	1d20      	adds	r0, r4, #4
   166ee:	f00d fa8d 	bl	23c0c <memcpy>
	p->ediv[0] = ctx->data.enc.ediv[0];
   166f2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   166f6:	7323      	strb	r3, [r4, #12]
	p->ediv[1] = ctx->data.enc.ediv[1];
   166f8:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   166fc:	7363      	strb	r3, [r4, #13]
	encode_enc_req(ctx, pdu);
}
   166fe:	bd38      	pop	{r3, r4, r5, pc}

00016700 <llcp_pdu_encode_enc_rsp>:

void llcp_pdu_encode_enc_rsp(struct pdu_data *pdu)
{
   16700:	b510      	push	{r4, lr}
	struct pdu_data_llctrl_enc_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16702:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_rsp);
   16704:	210d      	movs	r1, #13
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   16706:	2204      	movs	r2, #4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16708:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_rsp);
   1670c:	7041      	strb	r1, [r0, #1]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1670e:	7003      	strb	r3, [r0, #0]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   16710:	70c2      	strb	r2, [r0, #3]
	p = &pdu->llctrl.enc_rsp;
	/* Optimal getting random data, p->ivs is packed right after p->skds */
	BUILD_ASSERT(offsetof(struct pdu_data_llctrl_enc_rsp, ivs) ==
		     offsetof(struct pdu_data_llctrl_enc_rsp, skds) + sizeof(p->skds),
		     "Member IVS must be after member SKDS");
	csrand_get(p->skds, sizeof(p->skds) + sizeof(p->ivs));
   16712:	1884      	adds	r4, r0, r2
	if (k_is_in_isr()) {
   16714:	f010 f9ca 	bl	26aac <k_is_in_isr>
		return lll_csrand_isr_get(buf, len);
   16718:	210c      	movs	r1, #12
	if (k_is_in_isr()) {
   1671a:	b120      	cbz	r0, 16726 <llcp_pdu_encode_enc_rsp+0x26>
		return lll_csrand_isr_get(buf, len);
   1671c:	4620      	mov	r0, r4
}
   1671e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return lll_csrand_isr_get(buf, len);
   16722:	f001 becb 	b.w	184bc <lll_csrand_isr_get>
		return lll_csrand_get(buf, len);
   16726:	4620      	mov	r0, r4
}
   16728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return lll_csrand_get(buf, len);
   1672c:	f001 bebc 	b.w	184a8 <lll_csrand_get>

00016730 <llcp_pdu_encode_start_enc_req>:

void llcp_pdu_encode_start_enc_req(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16730:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_req);
   16732:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_REQ;
   16734:	2205      	movs	r2, #5
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16736:	f043 0303 	orr.w	r3, r3, #3
   1673a:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_req);
   1673c:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_REQ;
   1673e:	70c2      	strb	r2, [r0, #3]
}
   16740:	4770      	bx	lr
   16742:	bf00      	nop

00016744 <llcp_pdu_encode_start_enc_rsp>:
#endif /* CONFIG_BT_PERIPHERAL */

void llcp_pdu_encode_start_enc_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16744:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_rsp);
   16746:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   16748:	2206      	movs	r2, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1674a:	f043 0303 	orr.w	r3, r3, #3
   1674e:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_rsp);
   16750:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   16752:	70c2      	strb	r2, [r0, #3]
}
   16754:	4770      	bx	lr
   16756:	bf00      	nop

00016758 <llcp_pdu_encode_pause_enc_rsp>:
}
#endif /* CONFIG_BT_CENTRAL */

void llcp_pdu_encode_pause_enc_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16758:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(pause_enc_rsp);
   1675a:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1675c:	220b      	movs	r2, #11
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1675e:	f043 0303 	orr.w	r3, r3, #3
   16762:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(pause_enc_rsp);
   16764:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   16766:	70c2      	strb	r2, [r0, #3]
}
   16768:	4770      	bx	lr
   1676a:	bf00      	nop

0001676c <llcp_pdu_encode_reject_ind>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

void llcp_pdu_encode_reject_ind(struct pdu_data *pdu, uint8_t error_code)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1676c:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
	pdu->llctrl.reject_ind.error_code = error_code;
   1676e:	7101      	strb	r1, [r0, #4]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
   16770:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16774:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16778:	220d      	movs	r2, #13
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1677a:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
   1677c:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16780:	70c2      	strb	r2, [r0, #3]
}
   16782:	4770      	bx	lr

00016784 <llcp_pdu_encode_reject_ext_ind>:

void llcp_pdu_encode_reject_ext_ind(struct pdu_data *pdu, uint8_t reject_opcode, uint8_t error_code)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16784:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   16786:	7101      	strb	r1, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16788:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
   1678c:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16790:	7003      	strb	r3, [r0, #0]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   16792:	2311      	movs	r3, #17
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
   16794:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   16798:	70c3      	strb	r3, [r0, #3]
	pdu->llctrl.reject_ext_ind.error_code = error_code;
   1679a:	7142      	strb	r2, [r0, #5]
}
   1679c:	4770      	bx	lr
   1679e:	bf00      	nop

000167a0 <llcp_pdu_decode_reject_ext_ind>:

void llcp_pdu_decode_reject_ext_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->reject_ext_ind.reject_opcode = pdu->llctrl.reject_ext_ind.reject_opcode;
   167a0:	790b      	ldrb	r3, [r1, #4]
   167a2:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
	ctx->reject_ext_ind.error_code = pdu->llctrl.reject_ext_ind.error_code;
   167a6:	794b      	ldrb	r3, [r1, #5]
   167a8:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
}
   167ac:	4770      	bx	lr
   167ae:	bf00      	nop

000167b0 <llcp_pdu_encode_phy_req>:
 * PHY Update Procedure Helper
 */

void llcp_pdu_encode_phy_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   167b0:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_req);
   167b2:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   167b6:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   167ba:	2216      	movs	r2, #22
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   167bc:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_req);
   167be:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   167c2:	70ca      	strb	r2, [r1, #3]
	pdu->llctrl.phy_req.rx_phys = ctx->data.pu.rx;
   167c4:	7f03      	ldrb	r3, [r0, #28]
   167c6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   167ca:	714b      	strb	r3, [r1, #5]
	pdu->llctrl.phy_req.tx_phys = ctx->data.pu.tx;
   167cc:	7f03      	ldrb	r3, [r0, #28]
   167ce:	f3c3 0302 	ubfx	r3, r3, #0, #3
   167d2:	710b      	strb	r3, [r1, #4]
}
   167d4:	4770      	bx	lr
   167d6:	bf00      	nop

000167d8 <llcp_pdu_decode_phy_req>:

void llcp_pdu_decode_phy_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.pu.rx = pdu->llctrl.phy_req.tx_phys;
   167d8:	790a      	ldrb	r2, [r1, #4]
   167da:	7f03      	ldrb	r3, [r0, #28]
   167dc:	f362 03c5 	bfi	r3, r2, #3, #3
   167e0:	7703      	strb	r3, [r0, #28]
	ctx->data.pu.tx = pdu->llctrl.phy_req.rx_phys;
   167e2:	794a      	ldrb	r2, [r1, #5]
   167e4:	f362 0302 	bfi	r3, r2, #0, #3
   167e8:	7703      	strb	r3, [r0, #28]
}
   167ea:	4770      	bx	lr

000167ec <llcp_pdu_encode_phy_rsp>:

#if defined(CONFIG_BT_PERIPHERAL)
void llcp_pdu_encode_phy_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   167ec:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_rsp);
   167ee:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   167f2:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   167f6:	2217      	movs	r2, #23
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   167f8:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_rsp);
   167fa:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   167fe:	70ca      	strb	r2, [r1, #3]
	pdu->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16800:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
   16804:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16808:	714b      	strb	r3, [r1, #5]
	pdu->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1680a:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
   1680e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16812:	710b      	strb	r3, [r1, #4]
}
   16814:	4770      	bx	lr
   16816:	bf00      	nop

00016818 <llcp_pdu_decode_phy_update_ind>:
void llcp_pdu_decode_phy_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.pu.instant = sys_le16_to_cpu(pdu->llctrl.phy_upd_ind.instant);
   16818:	88cb      	ldrh	r3, [r1, #6]
   1681a:	8403      	strh	r3, [r0, #32]
	ctx->data.pu.c_to_p_phy = pdu->llctrl.phy_upd_ind.c_to_p_phy;
   1681c:	790b      	ldrb	r3, [r1, #4]
   1681e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	ctx->data.pu.p_to_c_phy = pdu->llctrl.phy_upd_ind.p_to_c_phy;
   16822:	794b      	ldrb	r3, [r1, #5]
   16824:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
}
   16828:	4770      	bx	lr
   1682a:	bf00      	nop

0001682c <llcp_pdu_encode_conn_param_req>:
 */
static void encode_conn_param_req_rsp_common(struct proc_ctx *ctx, struct pdu_data *pdu,
					     struct pdu_data_llctrl_conn_param_req_rsp_common *p,
					     uint8_t opcode)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1682c:	780b      	ldrb	r3, [r1, #0]
	/* The '+ 1U' is to count in opcode octet, the first member of struct pdu_data_llctrl */
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   1682e:	f04f 0c18 	mov.w	ip, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16832:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   16836:	220f      	movs	r2, #15
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16838:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   1683a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   1683e:	70ca      	strb	r2, [r1, #3]

	p->interval_min = sys_cpu_to_le16(ctx->data.cu.interval_min);
   16840:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   16842:	808b      	strh	r3, [r1, #4]
	p->interval_max = sys_cpu_to_le16(ctx->data.cu.interval_max);
   16844:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   16846:	80cb      	strh	r3, [r1, #6]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   16848:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1684a:	810b      	strh	r3, [r1, #8]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   1684c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1684e:	814b      	strh	r3, [r1, #10]
	p->preferred_periodicity = ctx->data.cu.preferred_periodicity;
   16850:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   16854:	730b      	strb	r3, [r1, #12]
	p->reference_conn_event_count = sys_cpu_to_le16(ctx->data.cu.reference_conn_event_count);
   16856:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   16858:	f8a1 300d 	strh.w	r3, [r1, #13]
	p->offset0 = sys_cpu_to_le16(ctx->data.cu.offsets[0]);
   1685c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   1685e:	f8a1 300f 	strh.w	r3, [r1, #15]
	p->offset1 = sys_cpu_to_le16(ctx->data.cu.offsets[1]);
   16862:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   16864:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset2 = sys_cpu_to_le16(ctx->data.cu.offsets[2]);
   16868:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   1686a:	f8a1 3013 	strh.w	r3, [r1, #19]
	p->offset3 = sys_cpu_to_le16(ctx->data.cu.offsets[3]);
   1686e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   16870:	f8a1 3015 	strh.w	r3, [r1, #21]
	p->offset4 = sys_cpu_to_le16(ctx->data.cu.offsets[4]);
   16874:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   16876:	f8a1 3017 	strh.w	r3, [r1, #23]
	p->offset5 = sys_cpu_to_le16(ctx->data.cu.offsets[5]);
   1687a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   1687c:	f8a1 3019 	strh.w	r3, [r1, #25]
void llcp_pdu_encode_conn_param_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	encode_conn_param_req_rsp_common(ctx, pdu,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_req,
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ);
}
   16880:	4770      	bx	lr
   16882:	bf00      	nop

00016884 <llcp_pdu_encode_conn_param_rsp>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16884:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   16886:	f04f 0c18 	mov.w	ip, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1688a:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   1688e:	2210      	movs	r2, #16
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16890:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   16892:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   16896:	70ca      	strb	r2, [r1, #3]
	p->interval_min = sys_cpu_to_le16(ctx->data.cu.interval_min);
   16898:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1689a:	808b      	strh	r3, [r1, #4]
	p->interval_max = sys_cpu_to_le16(ctx->data.cu.interval_max);
   1689c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1689e:	80cb      	strh	r3, [r1, #6]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   168a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   168a2:	810b      	strh	r3, [r1, #8]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   168a4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   168a6:	814b      	strh	r3, [r1, #10]
	p->preferred_periodicity = ctx->data.cu.preferred_periodicity;
   168a8:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   168ac:	730b      	strb	r3, [r1, #12]
	p->reference_conn_event_count = sys_cpu_to_le16(ctx->data.cu.reference_conn_event_count);
   168ae:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   168b0:	f8a1 300d 	strh.w	r3, [r1, #13]
	p->offset0 = sys_cpu_to_le16(ctx->data.cu.offsets[0]);
   168b4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   168b6:	f8a1 300f 	strh.w	r3, [r1, #15]
	p->offset1 = sys_cpu_to_le16(ctx->data.cu.offsets[1]);
   168ba:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   168bc:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset2 = sys_cpu_to_le16(ctx->data.cu.offsets[2]);
   168c0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   168c2:	f8a1 3013 	strh.w	r3, [r1, #19]
	p->offset3 = sys_cpu_to_le16(ctx->data.cu.offsets[3]);
   168c6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   168c8:	f8a1 3015 	strh.w	r3, [r1, #21]
	p->offset4 = sys_cpu_to_le16(ctx->data.cu.offsets[4]);
   168cc:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   168ce:	f8a1 3017 	strh.w	r3, [r1, #23]
	p->offset5 = sys_cpu_to_le16(ctx->data.cu.offsets[5]);
   168d2:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   168d4:	f8a1 3019 	strh.w	r3, [r1, #25]
void llcp_pdu_encode_conn_param_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	encode_conn_param_req_rsp_common(ctx, pdu,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_rsp,
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP);
}
   168d8:	4770      	bx	lr
   168da:	bf00      	nop

000168dc <llcp_pdu_decode_conn_param_req>:

static void decode_conn_param_req_rsp_common(struct proc_ctx *ctx,
					     struct pdu_data_llctrl_conn_param_req_rsp_common *p)
{
	ctx->data.cu.interval_min = sys_le16_to_cpu(p->interval_min);
   168dc:	888b      	ldrh	r3, [r1, #4]
   168de:	84c3      	strh	r3, [r0, #38]	; 0x26
	ctx->data.cu.interval_max = sys_le16_to_cpu(p->interval_max);
   168e0:	88cb      	ldrh	r3, [r1, #6]
   168e2:	8503      	strh	r3, [r0, #40]	; 0x28
	ctx->data.cu.latency = sys_le16_to_cpu(p->latency);
   168e4:	890b      	ldrh	r3, [r1, #8]
   168e6:	8543      	strh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.timeout = sys_le16_to_cpu(p->timeout);
   168e8:	894b      	ldrh	r3, [r1, #10]
   168ea:	8583      	strh	r3, [r0, #44]	; 0x2c
	ctx->data.cu.preferred_periodicity = p->preferred_periodicity;
   168ec:	7b0b      	ldrb	r3, [r1, #12]
   168ee:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	ctx->data.cu.reference_conn_event_count = sys_le16_to_cpu(p->reference_conn_event_count);
   168f2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   168f6:	8603      	strh	r3, [r0, #48]	; 0x30
	ctx->data.cu.offsets[0] = sys_le16_to_cpu(p->offset0);
   168f8:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   168fc:	8643      	strh	r3, [r0, #50]	; 0x32
	ctx->data.cu.offsets[1] = sys_le16_to_cpu(p->offset1);
   168fe:	f8b1 3011 	ldrh.w	r3, [r1, #17]
   16902:	8683      	strh	r3, [r0, #52]	; 0x34
	ctx->data.cu.offsets[2] = sys_le16_to_cpu(p->offset2);
   16904:	f8b1 3013 	ldrh.w	r3, [r1, #19]
   16908:	86c3      	strh	r3, [r0, #54]	; 0x36
	ctx->data.cu.offsets[3] = sys_le16_to_cpu(p->offset3);
   1690a:	f8b1 3015 	ldrh.w	r3, [r1, #21]
   1690e:	8703      	strh	r3, [r0, #56]	; 0x38
	ctx->data.cu.offsets[4] = sys_le16_to_cpu(p->offset4);
   16910:	f8b1 3017 	ldrh.w	r3, [r1, #23]
   16914:	8743      	strh	r3, [r0, #58]	; 0x3a
	ctx->data.cu.offsets[5] = sys_le16_to_cpu(p->offset5);
   16916:	f8b1 3019 	ldrh.w	r3, [r1, #25]
   1691a:	8783      	strh	r3, [r0, #60]	; 0x3c

void llcp_pdu_decode_conn_param_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	decode_conn_param_req_rsp_common(ctx,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_req);
}
   1691c:	4770      	bx	lr
   1691e:	bf00      	nop

00016920 <llcp_pdu_encode_conn_update_ind>:

void llcp_pdu_encode_conn_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_conn_update_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16920:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   16922:	2200      	movs	r2, #0
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16924:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
   16928:	f04f 0c0c 	mov.w	ip, #12
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   1692c:	70ca      	strb	r2, [r1, #3]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1692e:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
   16930:	f881 c001 	strb.w	ip, [r1, #1]

	p = (void *)&pdu->llctrl.conn_update_ind;
	p->win_size = ctx->data.cu.win_size;
   16934:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   16938:	710b      	strb	r3, [r1, #4]
	p->win_offset = sys_cpu_to_le16(ctx->data.cu.win_offset_us / CONN_INT_UNIT_US);
   1693a:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1693c:	4a09      	ldr	r2, [pc, #36]	; (16964 <llcp_pdu_encode_conn_update_ind+0x44>)
   1693e:	fba2 2303 	umull	r2, r3, r2, r3
   16942:	0a9b      	lsrs	r3, r3, #10
   16944:	f8a1 3005 	strh.w	r3, [r1, #5]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   16948:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1694a:	f8a1 3009 	strh.w	r3, [r1, #9]
	p->interval = sys_cpu_to_le16(ctx->data.cu.interval_max);
   1694e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   16950:	f8a1 3007 	strh.w	r3, [r1, #7]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   16954:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   16956:	f8a1 300b 	strh.w	r3, [r1, #11]
	p->instant = sys_cpu_to_le16(ctx->data.cu.instant);
   1695a:	8c03      	ldrh	r3, [r0, #32]
   1695c:	f8a1 300d 	strh.w	r3, [r1, #13]
}
   16960:	4770      	bx	lr
   16962:	bf00      	nop
   16964:	d1b71759 	.word	0xd1b71759

00016968 <llcp_pdu_decode_conn_update_ind>:
void llcp_pdu_decode_conn_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_conn_update_ind *p;

	p = (void *)&pdu->llctrl.conn_update_ind;
	ctx->data.cu.win_size = p->win_size;
   16968:	790b      	ldrb	r3, [r1, #4]
   1696a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	ctx->data.cu.win_offset_us = sys_le16_to_cpu(p->win_offset) * CONN_INT_UNIT_US;
   1696e:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   16972:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   16976:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1697a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1697e:	005b      	lsls	r3, r3, #1
   16980:	8483      	strh	r3, [r0, #36]	; 0x24
	ctx->data.cu.latency = sys_le16_to_cpu(p->latency);
   16982:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   16986:	8543      	strh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.interval_max = sys_le16_to_cpu(p->interval);
   16988:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1698c:	8503      	strh	r3, [r0, #40]	; 0x28
	ctx->data.cu.timeout = sys_le16_to_cpu(p->timeout);
   1698e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16992:	8583      	strh	r3, [r0, #44]	; 0x2c
	ctx->data.cu.instant = sys_le16_to_cpu(p->instant);
   16994:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   16998:	8403      	strh	r3, [r0, #32]
}
   1699a:	4770      	bx	lr

0001699c <llcp_pdu_decode_chan_map_update_ind>:
	memcpy(p->chm, ctx->data.chmu.chm, sizeof(p->chm));
}

void llcp_pdu_decode_chan_map_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.chmu.instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1699c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   169a0:	8383      	strh	r3, [r0, #28]
	memcpy(ctx->data.chmu.chm, pdu->llctrl.chan_map_ind.chm, sizeof(ctx->data.chmu.chm));
   169a2:	2205      	movs	r2, #5
   169a4:	3104      	adds	r1, #4
   169a6:	301e      	adds	r0, #30
   169a8:	f00d b930 	b.w	23c0c <memcpy>

000169ac <llcp_pdu_encode_length_req>:
static void encode_length_req_rsp_common(struct pdu_data *pdu,
					 struct pdu_data_llctrl_length_req_rsp_common *p,
					 const uint8_t opcode,
					 const struct data_pdu_length *dle)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   169ac:	780b      	ldrb	r3, [r1, #0]
	/* The '+ 1U' is to count in opcode octet, the first member of struct pdu_data_llctrl */
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   169ae:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   169b2:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   169b6:	2214      	movs	r2, #20
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   169b8:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   169ba:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   169be:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   169c0:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
   169c4:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   169c6:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   169ca:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   169cc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   169d0:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   169d2:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   169d6:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_req,
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
		&conn->lll.dle.local);
}
   169d8:	4770      	bx	lr
   169da:	bf00      	nop

000169dc <llcp_pdu_encode_length_rsp>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   169dc:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   169de:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   169e2:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   169e6:	2215      	movs	r2, #21
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   169e8:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   169ea:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   169ee:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   169f0:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
   169f4:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   169f6:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   169fa:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   169fc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   16a00:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   16a02:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   16a06:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_rsp,
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP,
		&conn->lll.dle.local);
}
   16a08:	4770      	bx	lr
   16a0a:	bf00      	nop

00016a0c <llcp_ntf_encode_length_change>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16a0c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   16a0e:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16a12:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   16a16:	2215      	movs	r2, #21
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16a18:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   16a1a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   16a1e:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   16a20:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   16a24:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   16a26:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   16a2a:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   16a2c:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
   16a30:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   16a32:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
   16a36:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_rsp,
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP,
		&conn->lll.dle.eff);
}
   16a38:	4770      	bx	lr
   16a3a:	bf00      	nop

00016a3c <llcp_pdu_decode_length_req>:
static void decode_length_req_rsp_common(struct ll_conn *conn,
					 struct pdu_data_llctrl_length_req_rsp_common *p)
{
	struct data_pdu_length remote;

	remote.max_rx_octets = sys_le16_to_cpu(p->max_rx_octets);
   16a3c:	888b      	ldrh	r3, [r1, #4]
	if (!IN_RANGE(remote->max_rx_octets, PDU_DC_PAYLOAD_SIZE_MIN,
   16a3e:	f1a3 021b 	sub.w	r2, r3, #27
   16a42:	2ae0      	cmp	r2, #224	; 0xe0
   16a44:	d821      	bhi.n	16a8a <llcp_pdu_decode_length_req+0x4e>
	remote.max_tx_octets = sys_le16_to_cpu(p->max_tx_octets);
   16a46:	f8b1 c008 	ldrh.w	ip, [r1, #8]
	if (!IN_RANGE(remote->max_tx_octets, PDU_DC_PAYLOAD_SIZE_MIN,
   16a4a:	f1ac 021b 	sub.w	r2, ip, #27
   16a4e:	2ae0      	cmp	r2, #224	; 0xe0
   16a50:	d81b      	bhi.n	16a8a <llcp_pdu_decode_length_req+0x4e>

	conn->lll.dle.remote = remote;
}

void llcp_pdu_decode_length_req(struct ll_conn *conn, struct pdu_data *pdu)
{
   16a52:	b530      	push	{r4, r5, lr}
	remote.max_rx_time = sys_le16_to_cpu(p->max_rx_time);
   16a54:	88cd      	ldrh	r5, [r1, #6]
	if (!IN_RANGE(remote->max_rx_time, PDU_DC_PAYLOAD_TIME_MIN,
   16a56:	f5a5 72a4 	sub.w	r2, r5, #328	; 0x148
   16a5a:	f244 1e48 	movw	lr, #16712	; 0x4148
   16a5e:	b292      	uxth	r2, r2
   16a60:	4572      	cmp	r2, lr
   16a62:	d811      	bhi.n	16a88 <llcp_pdu_decode_length_req+0x4c>
	remote.max_tx_time = sys_le16_to_cpu(p->max_tx_time);
   16a64:	894a      	ldrh	r2, [r1, #10]
   16a66:	2100      	movs	r1, #0
   16a68:	460c      	mov	r4, r1
   16a6a:	f362 040f 	bfi	r4, r2, #0, #16
	if (!IN_RANGE(remote->max_tx_time, PDU_DC_PAYLOAD_TIME_MIN,
   16a6e:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
   16a72:	f36c 010f 	bfi	r1, ip, #0, #16
   16a76:	b292      	uxth	r2, r2
   16a78:	f363 411f 	bfi	r1, r3, #16, #16
   16a7c:	f365 441f 	bfi	r4, r5, #16, #16
   16a80:	4572      	cmp	r2, lr
	conn->lll.dle.remote = remote;
   16a82:	bf98      	it	ls
   16a84:	e9c0 1418 	strdls	r1, r4, [r0, #96]	; 0x60
	decode_length_req_rsp_common(conn,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_req);
}
   16a88:	bd30      	pop	{r4, r5, pc}
   16a8a:	4770      	bx	lr

00016a8c <llcp_pdu_decode_length_rsp>:

void llcp_pdu_decode_length_rsp(struct ll_conn *conn, struct pdu_data *pdu)
   16a8c:	888b      	ldrh	r3, [r1, #4]
   16a8e:	f1a3 021b 	sub.w	r2, r3, #27
   16a92:	2ae0      	cmp	r2, #224	; 0xe0
   16a94:	d821      	bhi.n	16ada <llcp_pdu_decode_length_rsp+0x4e>
   16a96:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   16a9a:	f1ac 021b 	sub.w	r2, ip, #27
   16a9e:	2ae0      	cmp	r2, #224	; 0xe0
   16aa0:	d81b      	bhi.n	16ada <llcp_pdu_decode_length_rsp+0x4e>
   16aa2:	b530      	push	{r4, r5, lr}
   16aa4:	88cd      	ldrh	r5, [r1, #6]
   16aa6:	f5a5 72a4 	sub.w	r2, r5, #328	; 0x148
   16aaa:	f244 1e48 	movw	lr, #16712	; 0x4148
   16aae:	b292      	uxth	r2, r2
   16ab0:	4572      	cmp	r2, lr
   16ab2:	d811      	bhi.n	16ad8 <llcp_pdu_decode_length_rsp+0x4c>
   16ab4:	894a      	ldrh	r2, [r1, #10]
   16ab6:	2100      	movs	r1, #0
   16ab8:	460c      	mov	r4, r1
   16aba:	f362 040f 	bfi	r4, r2, #0, #16
   16abe:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
   16ac2:	f36c 010f 	bfi	r1, ip, #0, #16
   16ac6:	b292      	uxth	r2, r2
   16ac8:	f363 411f 	bfi	r1, r3, #16, #16
   16acc:	f365 441f 	bfi	r4, r5, #16, #16
   16ad0:	4572      	cmp	r2, lr
   16ad2:	bf98      	it	ls
   16ad4:	e9c0 1418 	strdls	r1, r4, [r0, #96]	; 0x60
   16ad8:	bd30      	pop	{r4, r5, pc}
   16ada:	4770      	bx	lr

00016adc <cu_ntf>:
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
		(ctx->data.cu.params_changed != 0U));
}

static void cu_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   16adc:	b570      	push	{r4, r5, r6, lr}
   16ade:	4606      	mov	r6, r0
   16ae0:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct node_rx_cu *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   16ae2:	f7fe f94f 	bl	14d84 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   16ae6:	4604      	mov	r4, r0
   16ae8:	b1c8      	cbz	r0, 16b1e <cu_ntf+0x42>

	ntf->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16aea:	2319      	movs	r3, #25
   16aec:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   16aee:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   16af0:	80e3      	strh	r3, [r4, #6]
	pdu = (struct node_rx_cu *)ntf->pdu;

	pdu->status = ctx->data.cu.error;
   16af2:	7f2b      	ldrb	r3, [r5, #28]
   16af4:	7723      	strb	r3, [r4, #28]
	if (!ctx->data.cu.error) {
   16af6:	b95b      	cbnz	r3, 16b10 <cu_ntf+0x34>
		pdu->interval = ctx->data.cu.interval_max;
   16af8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   16afa:	83e3      	strh	r3, [r4, #30]
		pdu->latency = ctx->data.cu.latency;
   16afc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   16afe:	8423      	strh	r3, [r4, #32]
		pdu->timeout = ctx->data.cu.timeout;
   16b00:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   16b02:	8463      	strh	r3, [r4, #34]	; 0x22
		pdu->latency = conn->lll.latency;
		pdu->timeout = conn->supervision_timeout;
	}

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   16b04:	6820      	ldr	r0, [r4, #0]
   16b06:	4621      	mov	r1, r4
}
   16b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   16b0c:	f7fa bd5e 	b.w	115cc <ll_rx_put_sched>
		pdu->interval = conn->lll.interval;
   16b10:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   16b12:	83e3      	strh	r3, [r4, #30]
		pdu->latency = conn->lll.latency;
   16b14:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
   16b16:	8423      	strh	r3, [r4, #32]
		pdu->timeout = conn->supervision_timeout;
   16b18:	f8b6 3184 	ldrh.w	r3, [r6, #388]	; 0x184
   16b1c:	e7f1      	b.n	16b02 <cu_ntf+0x26>
	LL_ASSERT(ntf);
   16b1e:	4a06      	ldr	r2, [pc, #24]	; (16b38 <cu_ntf+0x5c>)
   16b20:	4906      	ldr	r1, [pc, #24]	; (16b3c <cu_ntf+0x60>)
   16b22:	4807      	ldr	r0, [pc, #28]	; (16b40 <cu_ntf+0x64>)
   16b24:	23f4      	movs	r3, #244	; 0xf4
   16b26:	f00a fe11 	bl	2174c <assert_print>
   16b2a:	4040      	eors	r0, r0
   16b2c:	f380 8811 	msr	BASEPRI, r0
   16b30:	f04f 0003 	mov.w	r0, #3
   16b34:	df02      	svc	2
   16b36:	e7d8      	b.n	16aea <cu_ntf+0xe>
   16b38:	00029140 	.word	0x00029140
   16b3c:	00028f40 	.word	0x00028f40
   16b40:	0002866c 	.word	0x0002866c

00016b44 <rp_cu_conn_param_req_ntf>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_conn_param_req_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   16b44:	b570      	push	{r4, r5, r6, lr}
   16b46:	4606      	mov	r6, r0
   16b48:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   16b4a:	f7fe f91b 	bl	14d84 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   16b4e:	4604      	mov	r4, r0
   16b50:	b170      	cbz	r0, 16b70 <rp_cu_conn_param_req_ntf+0x2c>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   16b52:	2303      	movs	r3, #3
   16b54:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   16b56:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   16b58:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;

	llcp_pdu_encode_conn_param_req(ctx, pdu);
   16b5a:	4628      	mov	r0, r5
   16b5c:	f104 011c 	add.w	r1, r4, #28
   16b60:	f7ff fe64 	bl	1682c <llcp_pdu_encode_conn_param_req>

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   16b64:	6820      	ldr	r0, [r4, #0]
   16b66:	4621      	mov	r1, r4
}
   16b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   16b6c:	f7fa bd2e 	b.w	115cc <ll_rx_put_sched>
	LL_ASSERT(ntf);
   16b70:	4a06      	ldr	r2, [pc, #24]	; (16b8c <rp_cu_conn_param_req_ntf+0x48>)
   16b72:	4907      	ldr	r1, [pc, #28]	; (16b90 <rp_cu_conn_param_req_ntf+0x4c>)
   16b74:	4807      	ldr	r0, [pc, #28]	; (16b94 <rp_cu_conn_param_req_ntf+0x50>)
   16b76:	f240 23ed 	movw	r3, #749	; 0x2ed
   16b7a:	f00a fde7 	bl	2174c <assert_print>
   16b7e:	4040      	eors	r0, r0
   16b80:	f380 8811 	msr	BASEPRI, r0
   16b84:	f04f 0003 	mov.w	r0, #3
   16b88:	df02      	svc	2
   16b8a:	e7e2      	b.n	16b52 <rp_cu_conn_param_req_ntf+0xe>
   16b8c:	00029140 	.word	0x00029140
   16b90:	00028f40 	.word	0x00028f40
   16b94:	0002866c 	.word	0x0002866c

00016b98 <cu_update_conn_parameters>:
{
   16b98:	b530      	push	{r4, r5, lr}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   16b9a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.params_changed = cu_have_params_changed(
   16b9c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
   16b9e:	8d4c      	ldrh	r4, [r1, #42]	; 0x2a
   16ba0:	8d8d      	ldrh	r5, [r1, #44]	; 0x2c
	if ((interval != lll->interval) || (latency != lll->latency) ||
   16ba2:	4293      	cmp	r3, r2
{
   16ba4:	b085      	sub	sp, #20
	if ((interval != lll->interval) || (latency != lll->latency) ||
   16ba6:	d102      	bne.n	16bae <cu_update_conn_parameters+0x16>
   16ba8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   16baa:	42a3      	cmp	r3, r4
   16bac:	d013      	beq.n	16bd6 <cu_update_conn_parameters+0x3e>
   16bae:	2301      	movs	r3, #1
	ctx->data.cu.params_changed = cu_have_params_changed(
   16bb0:	778b      	strb	r3, [r1, #30]
	ull_conn_update_parameters(conn, (ctx->proc == PROC_CONN_UPDATE), ctx->data.cu.win_size,
   16bb2:	9502      	str	r5, [sp, #8]
   16bb4:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
   16bb6:	e9cd 2400 	strd	r2, r4, [sp]
   16bba:	7a0c      	ldrb	r4, [r1, #8]
   16bbc:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   16bc0:	8c09      	ldrh	r1, [r1, #32]
   16bc2:	9103      	str	r1, [sp, #12]
   16bc4:	f1a4 0108 	sub.w	r1, r4, #8
   16bc8:	fab1 f181 	clz	r1, r1
   16bcc:	0949      	lsrs	r1, r1, #5
   16bce:	f7ea fd63 	bl	1698 <ull_conn_update_parameters>
}
   16bd2:	b005      	add	sp, #20
   16bd4:	bd30      	pop	{r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   16bd6:	f8b0 3184 	ldrh.w	r3, [r0, #388]	; 0x184
	ctx->data.cu.params_changed = cu_have_params_changed(
   16bda:	1b5b      	subs	r3, r3, r5
   16bdc:	bf18      	it	ne
   16bde:	2301      	movne	r3, #1
   16be0:	e7e6      	b.n	16bb0 <cu_update_conn_parameters+0x18>
   16be2:	bf00      	nop

00016be4 <rp_cu_tx>:
{
   16be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16be6:	4607      	mov	r7, r0
   16be8:	460d      	mov	r5, r1
   16bea:	4616      	mov	r6, r2
	tx = llcp_tx_alloc(conn, ctx);
   16bec:	f7fe f8ae 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   16bf0:	4604      	mov	r4, r0
   16bf2:	2800      	cmp	r0, #0
   16bf4:	d03b      	beq.n	16c6e <rp_cu_tx+0x8a>
	pdu = (struct pdu_data *)tx->pdu;
   16bf6:	1d21      	adds	r1, r4, #4
	switch (opcode) {
   16bf8:	2e11      	cmp	r6, #17
   16bfa:	d80a      	bhi.n	16c12 <rp_cu_tx+0x2e>
   16bfc:	e8df f006 	tbb	[pc, r6]
   16c00:	0909092a 	.word	0x0909092a
   16c04:	26090909 	.word	0x26090909
   16c08:	09090909 	.word	0x09090909
   16c0c:	09090909 	.word	0x09090909
   16c10:	202e      	.short	0x202e
		LL_ASSERT(0);
   16c12:	4a1e      	ldr	r2, [pc, #120]	; (16c8c <rp_cu_tx+0xa8>)
   16c14:	491e      	ldr	r1, [pc, #120]	; (16c90 <rp_cu_tx+0xac>)
   16c16:	481f      	ldr	r0, [pc, #124]	; (16c94 <rp_cu_tx+0xb0>)
   16c18:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   16c1c:	f00a fd96 	bl	2174c <assert_print>
   16c20:	4040      	eors	r0, r0
   16c22:	f380 8811 	msr	BASEPRI, r0
   16c26:	f04f 0003 	mov.w	r0, #3
   16c2a:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
   16c2c:	79e3      	ldrb	r3, [r4, #7]
   16c2e:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   16c30:	4621      	mov	r1, r4
   16c32:	4638      	mov	r0, r7
   16c34:	f7fe f8a8 	bl	14d88 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   16c38:	7a2b      	ldrb	r3, [r5, #8]
   16c3a:	2b09      	cmp	r3, #9
   16c3c:	d012      	beq.n	16c64 <rp_cu_tx+0x80>
}
   16c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
   16c40:	4608      	mov	r0, r1
   16c42:	7f2a      	ldrb	r2, [r5, #28]
   16c44:	7f69      	ldrb	r1, [r5, #29]
   16c46:	f7ff fd9d 	bl	16784 <llcp_pdu_encode_reject_ext_ind>
		break;
   16c4a:	e7ef      	b.n	16c2c <rp_cu_tx+0x48>
		llcp_pdu_encode_unknown_rsp(ctx, pdu);
   16c4c:	4628      	mov	r0, r5
   16c4e:	f7ff fc31 	bl	164b4 <llcp_pdu_encode_unknown_rsp>
		break;
   16c52:	e7eb      	b.n	16c2c <rp_cu_tx+0x48>
		llcp_pdu_encode_conn_update_ind(ctx, pdu);
   16c54:	4628      	mov	r0, r5
   16c56:	f7ff fe63 	bl	16920 <llcp_pdu_encode_conn_update_ind>
		break;
   16c5a:	e7e7      	b.n	16c2c <rp_cu_tx+0x48>
		llcp_pdu_encode_conn_param_rsp(ctx, pdu);
   16c5c:	4628      	mov	r0, r5
   16c5e:	f7ff fe11 	bl	16884 <llcp_pdu_encode_conn_param_rsp>
		break;
   16c62:	e7e3      	b.n	16c2c <rp_cu_tx+0x48>
		llcp_rr_prt_restart(conn);
   16c64:	4638      	mov	r0, r7
}
   16c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		llcp_rr_prt_restart(conn);
   16c6a:	f000 bed1 	b.w	17a10 <llcp_rr_prt_restart>
	LL_ASSERT(tx);
   16c6e:	4a07      	ldr	r2, [pc, #28]	; (16c8c <rp_cu_tx+0xa8>)
   16c70:	4909      	ldr	r1, [pc, #36]	; (16c98 <rp_cu_tx+0xb4>)
   16c72:	4808      	ldr	r0, [pc, #32]	; (16c94 <rp_cu_tx+0xb0>)
   16c74:	f240 23bb 	movw	r3, #699	; 0x2bb
   16c78:	f00a fd68 	bl	2174c <assert_print>
   16c7c:	4040      	eors	r0, r0
   16c7e:	f380 8811 	msr	BASEPRI, r0
   16c82:	f04f 0003 	mov.w	r0, #3
   16c86:	df02      	svc	2
   16c88:	e7b5      	b.n	16bf6 <rp_cu_tx+0x12>
   16c8a:	bf00      	nop
   16c8c:	00029140 	.word	0x00029140
   16c90:	000286fc 	.word	0x000286fc
   16c94:	0002866c 	.word	0x0002866c
   16c98:	00028d90 	.word	0x00028d90

00016c9c <rp_cu_send_conn_update_ind.constprop.0>:
		cu_ntf(conn, ctx);
		rp_cu_complete(conn, ctx);
	}
}

static void rp_cu_send_conn_update_ind(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   16c9c:	b570      	push	{r4, r5, r6, lr}
   16c9e:	4606      	mov	r6, r0
   16ca0:	460c      	mov	r4, r1
				       void *param)
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   16ca2:	f000 fead 	bl	17a00 <llcp_rr_ispaused>
   16ca6:	b110      	cbz	r0, 16cae <rp_cu_send_conn_update_ind.constprop.0+0x12>
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_UPDATE_IND;
   16ca8:	2309      	movs	r3, #9
   16caa:	72a3      	strb	r3, [r4, #10]
		cu_prepare_update_ind(conn, ctx);
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND);
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
		ctx->state = RP_CU_STATE_WAIT_INSTANT;
	}
}
   16cac:	bd70      	pop	{r4, r5, r6, pc}
   16cae:	4605      	mov	r5, r0
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   16cb0:	4621      	mov	r1, r4
   16cb2:	4630      	mov	r0, r6
   16cb4:	f7fe f842 	bl	14d3c <llcp_tx_alloc_peek>
   16cb8:	2800      	cmp	r0, #0
   16cba:	d0f5      	beq.n	16ca8 <rp_cu_send_conn_update_ind.constprop.0+0xc>
	const uint8_t preferred_periodicity = ctx->data.cu.preferred_periodicity;
   16cbc:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   16cc0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	ctx->data.cu.win_offset_us = 0U;
   16cc2:	84a5      	strh	r5, [r4, #36]	; 0x24
	ctx->data.cu.win_size = 1U;
   16cc4:	2301      	movs	r3, #1
   16cc6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	if (preferred_periodicity) {
   16cca:	b14a      	cbz	r2, 16ce0 <rp_cu_send_conn_update_ind.constprop.0+0x44>
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   16ccc:	fbb1 f3f2 	udiv	r3, r1, r2
   16cd0:	fb13 f302 	smulbb	r3, r3, r2
		if (interval_max >= ctx->data.cu.interval_min) {
   16cd4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   16cd6:	b29b      	uxth	r3, r3
		if (interval_max >= ctx->data.cu.interval_min) {
   16cd8:	429a      	cmp	r2, r3
			ctx->data.cu.interval_max = interval_max;
   16cda:	bf9c      	itt	ls
   16cdc:	8523      	strhls	r3, [r4, #40]	; 0x28
   16cde:	4619      	movls	r1, r3
	if (ctx->data.cu.offsets[0] <= ctx->data.cu.interval_max) {
   16ce0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   16ce2:	428b      	cmp	r3, r1
   16ce4:	d807      	bhi.n	16cf6 <rp_cu_send_conn_update_ind.constprop.0+0x5a>
		ctx->data.cu.win_offset_us = ctx->data.cu.offsets[0] * CONN_INT_UNIT_US;
   16ce6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   16cea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   16cee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   16cf2:	005b      	lsls	r3, r3, #1
   16cf4:	84a3      	strh	r3, [r4, #36]	; 0x24
	ctx->data.cu.instant = ull_conn_event_counter(conn) + conn->lll.latency +
   16cf6:	4630      	mov	r0, r6
   16cf8:	f7fc fd88 	bl	1380c <ull_conn_event_counter>
   16cfc:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
   16cfe:	3306      	adds	r3, #6
   16d00:	4418      	add	r0, r3
   16d02:	8420      	strh	r0, [r4, #32]
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND);
   16d04:	2200      	movs	r2, #0
   16d06:	4621      	mov	r1, r4
   16d08:	4630      	mov	r0, r6
   16d0a:	f7ff ff6b 	bl	16be4 <rp_cu_tx>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   16d0e:	23ff      	movs	r3, #255	; 0xff
   16d10:	72e3      	strb	r3, [r4, #11]
   16d12:	230b      	movs	r3, #11
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_UPDATE_IND;
   16d14:	72a3      	strb	r3, [r4, #10]
}
   16d16:	bd70      	pop	{r4, r5, r6, pc}

00016d18 <lp_cu_send_conn_param_req.constprop.0>:
static void lp_cu_send_conn_param_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   16d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return conn_upd_curr && (conn_upd_curr != conn);
   16d1c:	4e31      	ldr	r6, [pc, #196]	; (16de4 <lp_cu_send_conn_param_req.constprop.0+0xcc>)
   16d1e:	6833      	ldr	r3, [r6, #0]
   16d20:	4604      	mov	r4, r0
   16d22:	460d      	mov	r5, r1
   16d24:	b12b      	cbz	r3, 16d32 <lp_cu_send_conn_param_req.constprop.0+0x1a>
   16d26:	4283      	cmp	r3, r0
   16d28:	d003      	beq.n	16d32 <lp_cu_send_conn_param_req.constprop.0+0x1a>
		ctx->state = LP_CU_STATE_WAIT_TX_CONN_PARAM_REQ;
   16d2a:	2301      	movs	r3, #1
   16d2c:	72ab      	strb	r3, [r5, #10]
}
   16d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cpr_active_is_set(conn) || llcp_lr_ispaused(conn) ||
   16d32:	4620      	mov	r0, r4
   16d34:	f7ff fab2 	bl	1629c <llcp_lr_ispaused>
   16d38:	2800      	cmp	r0, #0
   16d3a:	d1f6      	bne.n	16d2a <lp_cu_send_conn_param_req.constprop.0+0x12>
	     llcp_rr_get_collision(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   16d3c:	4620      	mov	r0, r4
   16d3e:	f000 fe55 	bl	179ec <llcp_rr_get_collision>
	if (cpr_active_is_set(conn) || llcp_lr_ispaused(conn) ||
   16d42:	4607      	mov	r7, r0
   16d44:	2800      	cmp	r0, #0
   16d46:	d1f0      	bne.n	16d2a <lp_cu_send_conn_param_req.constprop.0+0x12>
	     llcp_rr_get_collision(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   16d48:	4629      	mov	r1, r5
   16d4a:	4620      	mov	r0, r4
   16d4c:	f7fd fff6 	bl	14d3c <llcp_tx_alloc_peek>
   16d50:	2800      	cmp	r0, #0
   16d52:	d0ea      	beq.n	16d2a <lp_cu_send_conn_param_req.constprop.0+0x12>
		uint16_t event_counter = ull_conn_event_counter(conn);
   16d54:	4620      	mov	r0, r4
   16d56:	f7fc fd59 	bl	1380c <ull_conn_event_counter>
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
   16d5a:	2101      	movs	r1, #1
		uint16_t event_counter = ull_conn_event_counter(conn);
   16d5c:	4680      	mov	r8, r0
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
   16d5e:	4620      	mov	r0, r4
   16d60:	f000 fe3c 	bl	179dc <llcp_rr_set_incompat>
		ctx->data.cu.reference_conn_event_count = event_counter;
   16d64:	f8a5 8030 	strh.w	r8, [r5, #48]	; 0x30
		ctx->data.cu.preferred_periodicity = 0U;
   16d68:	f885 702e 	strb.w	r7, [r5, #46]	; 0x2e
	tx = llcp_tx_alloc(conn, ctx);
   16d6c:	4629      	mov	r1, r5
   16d6e:	4620      	mov	r0, r4
	conn_upd_curr = conn;
   16d70:	6034      	str	r4, [r6, #0]
   16d72:	f7fd ffeb 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   16d76:	4606      	mov	r6, r0
   16d78:	b328      	cbz	r0, 16dc6 <lp_cu_send_conn_param_req.constprop.0+0xae>
		llcp_pdu_encode_conn_param_req(ctx, pdu);
   16d7a:	1d31      	adds	r1, r6, #4
   16d7c:	4628      	mov	r0, r5
   16d7e:	f7ff fd55 	bl	1682c <llcp_pdu_encode_conn_param_req>
	ctx->tx_opcode = pdu->llctrl.opcode;
   16d82:	79f3      	ldrb	r3, [r6, #7]
   16d84:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   16d86:	4631      	mov	r1, r6
   16d88:	4620      	mov	r0, r4
   16d8a:	f7fd fffd 	bl	14d88 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   16d8e:	7a2b      	ldrb	r3, [r5, #8]
   16d90:	2b09      	cmp	r3, #9
   16d92:	d014      	beq.n	16dbe <lp_cu_send_conn_param_req.constprop.0+0xa6>
		switch (conn->lll.role) {
   16d94:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   16d98:	09db      	lsrs	r3, r3, #7
   16d9a:	d002      	beq.n	16da2 <lp_cu_send_conn_param_req.constprop.0+0x8a>
			ctx->state = LP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   16d9c:	2304      	movs	r3, #4
   16d9e:	816b      	strh	r3, [r5, #10]
			break;
   16da0:	e7c5      	b.n	16d2e <lp_cu_send_conn_param_req.constprop.0+0x16>
			LL_ASSERT(0);
   16da2:	4a11      	ldr	r2, [pc, #68]	; (16de8 <lp_cu_send_conn_param_req.constprop.0+0xd0>)
   16da4:	4911      	ldr	r1, [pc, #68]	; (16dec <lp_cu_send_conn_param_req.constprop.0+0xd4>)
   16da6:	4812      	ldr	r0, [pc, #72]	; (16df0 <lp_cu_send_conn_param_req.constprop.0+0xd8>)
   16da8:	f44f 73c0 	mov.w	r3, #384	; 0x180
   16dac:	f00a fcce 	bl	2174c <assert_print>
   16db0:	4040      	eors	r0, r0
   16db2:	f380 8811 	msr	BASEPRI, r0
   16db6:	f04f 0003 	mov.w	r0, #3
   16dba:	df02      	svc	2
}
   16dbc:	e7b7      	b.n	16d2e <lp_cu_send_conn_param_req.constprop.0+0x16>
		llcp_lr_prt_restart(conn);
   16dbe:	4620      	mov	r0, r4
   16dc0:	f7ff fa7c 	bl	162bc <llcp_lr_prt_restart>
   16dc4:	e7e6      	b.n	16d94 <lp_cu_send_conn_param_req.constprop.0+0x7c>
	LL_ASSERT(tx);
   16dc6:	4a08      	ldr	r2, [pc, #32]	; (16de8 <lp_cu_send_conn_param_req.constprop.0+0xd0>)
   16dc8:	490a      	ldr	r1, [pc, #40]	; (16df4 <lp_cu_send_conn_param_req.constprop.0+0xdc>)
   16dca:	4809      	ldr	r0, [pc, #36]	; (16df0 <lp_cu_send_conn_param_req.constprop.0+0xd8>)
   16dcc:	f240 1311 	movw	r3, #273	; 0x111
   16dd0:	f00a fcbc 	bl	2174c <assert_print>
   16dd4:	4040      	eors	r0, r0
   16dd6:	f380 8811 	msr	BASEPRI, r0
   16dda:	f04f 0003 	mov.w	r0, #3
   16dde:	df02      	svc	2
   16de0:	e7cb      	b.n	16d7a <lp_cu_send_conn_param_req.constprop.0+0x62>
   16de2:	bf00      	nop
   16de4:	200030c4 	.word	0x200030c4
   16de8:	00029140 	.word	0x00029140
   16dec:	000286fc 	.word	0x000286fc
   16df0:	0002866c 	.word	0x0002866c
   16df4:	00028d90 	.word	0x00028d90

00016df8 <rp_cu_send_reject_ext_ind.constprop.0>:

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_send_reject_ext_ind(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   16df8:	b570      	push	{r4, r5, r6, lr}
   16dfa:	4606      	mov	r6, r0
   16dfc:	460c      	mov	r4, r1
				      void *param)
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   16dfe:	f000 fdff 	bl	17a00 <llcp_rr_ispaused>
   16e02:	b110      	cbz	r0, 16e0a <rp_cu_send_reject_ext_ind.constprop.0+0x12>
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   16e04:	2306      	movs	r3, #6
   16e06:	72a3      	strb	r3, [r4, #10]
	} else {
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND);
		rp_cu_complete(conn, ctx);
	}
}
   16e08:	bd70      	pop	{r4, r5, r6, pc}
   16e0a:	4605      	mov	r5, r0
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   16e0c:	4621      	mov	r1, r4
   16e0e:	4630      	mov	r0, r6
   16e10:	f7fd ff94 	bl	14d3c <llcp_tx_alloc_peek>
   16e14:	2800      	cmp	r0, #0
   16e16:	d0f5      	beq.n	16e04 <rp_cu_send_reject_ext_ind.constprop.0+0xc>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND);
   16e18:	2211      	movs	r2, #17
   16e1a:	4621      	mov	r1, r4
   16e1c:	4630      	mov	r0, r6
   16e1e:	f7ff fee1 	bl	16be4 <rp_cu_tx>
	llcp_rr_complete(conn);
   16e22:	4630      	mov	r0, r6
   16e24:	f000 fe72 	bl	17b0c <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   16e28:	7a23      	ldrb	r3, [r4, #8]
   16e2a:	2b09      	cmp	r3, #9
   16e2c:	d104      	bne.n	16e38 <rp_cu_send_reject_ext_ind.constprop.0+0x40>
	if (conn == conn_upd_curr) {
   16e2e:	4b04      	ldr	r3, [pc, #16]	; (16e40 <rp_cu_send_reject_ext_ind.constprop.0+0x48>)
   16e30:	681a      	ldr	r2, [r3, #0]
   16e32:	4296      	cmp	r6, r2
		conn_upd_curr = NULL;
   16e34:	bf08      	it	eq
   16e36:	601d      	streq	r5, [r3, #0]
}
   16e38:	2300      	movs	r3, #0
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   16e3a:	72a3      	strb	r3, [r4, #10]
}
   16e3c:	bd70      	pop	{r4, r5, r6, pc}
   16e3e:	bf00      	nop
   16e40:	200030c4 	.word	0x200030c4

00016e44 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0>:
		break;
	}
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_st_wait_conn_param_req_available(struct ll_conn *conn, struct proc_ctx *ctx,
   16e44:	b538      	push	{r3, r4, r5, lr}
	return conn_upd_curr && (conn_upd_curr != conn);
   16e46:	4a1d      	ldr	r2, [pc, #116]	; (16ebc <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x78>)
   16e48:	6813      	ldr	r3, [r2, #0]
   16e4a:	4605      	mov	r5, r0
   16e4c:	460c      	mov	r4, r1
   16e4e:	b13b      	cbz	r3, 16e60 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1c>
   16e50:	4283      	cmp	r3, r0
   16e52:	d005      	beq.n	16e60 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1c>
	 */
	switch (evt) {
	case RP_CU_EVT_CONN_PARAM_REQ:
	case RP_CU_EVT_RUN:
		if (cpr_active_is_set(conn)) {
			ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_AVAILABLE;
   16e54:	2302      	movs	r3, #2
   16e56:	728b      	strb	r3, [r1, #10]
			if (!llcp_rr_ispaused(conn) && llcp_tx_alloc_peek(conn, ctx)) {
   16e58:	f000 fdd2 	bl	17a00 <llcp_rr_ispaused>
   16e5c:	b1b8      	cbz	r0, 16e8e <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x4a>
		}
	default:
		/* Ignore other evts */
		break;
	}
}
   16e5e:	bd38      	pop	{r3, r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   16e60:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   16e62:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
	conn_upd_curr = conn;
   16e64:	6015      	str	r5, [r2, #0]
   16e66:	4299      	cmp	r1, r3
				cu_have_params_changed(conn, ctx->data.cu.interval_max,
   16e68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   16e6a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	if ((interval != lll->interval) || (latency != lll->latency) ||
   16e6c:	d005      	beq.n	16e7a <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x36>
	if (!llcp_ntf_alloc_is_available()) {
   16e6e:	f7fd ff79 	bl	14d64 <llcp_ntf_alloc_is_available>
   16e72:	b9d8      	cbnz	r0, 16eac <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x68>
		ctx->state = RP_CU_STATE_WAIT_NTF_CONN_PARAM_REQ;
   16e74:	2303      	movs	r3, #3
   16e76:	72a3      	strb	r3, [r4, #10]
}
   16e78:	bd38      	pop	{r3, r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   16e7a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   16e7c:	4293      	cmp	r3, r2
   16e7e:	d1f6      	bne.n	16e6e <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x2a>
   16e80:	f8b5 3184 	ldrh.w	r3, [r5, #388]	; 0x184
   16e84:	4283      	cmp	r3, r0
   16e86:	d1f2      	bne.n	16e6e <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x2a>
				ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY_CONTINUE;
   16e88:	2305      	movs	r3, #5
   16e8a:	72a3      	strb	r3, [r4, #10]
}
   16e8c:	bd38      	pop	{r3, r4, r5, pc}
			if (!llcp_rr_ispaused(conn) && llcp_tx_alloc_peek(conn, ctx)) {
   16e8e:	4621      	mov	r1, r4
   16e90:	4628      	mov	r0, r5
   16e92:	f7fd ff53 	bl	14d3c <llcp_tx_alloc_peek>
   16e96:	2800      	cmp	r0, #0
   16e98:	d0e1      	beq.n	16e5e <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1a>
				ctx->data.cu.error = BT_HCI_ERR_UNSUPP_LL_PARAM_VAL;
   16e9a:	f44f 6372 	mov.w	r3, #3872	; 0xf20
   16e9e:	83a3      	strh	r3, [r4, #28]
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   16ea0:	4621      	mov	r1, r4
   16ea2:	4628      	mov	r0, r5
}
   16ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   16ea8:	f7ff bfa6 	b.w	16df8 <rp_cu_send_reject_ext_ind.constprop.0>
		rp_cu_conn_param_req_ntf(conn, ctx);
   16eac:	4621      	mov	r1, r4
   16eae:	4628      	mov	r0, r5
   16eb0:	f7ff fe48 	bl	16b44 <rp_cu_conn_param_req_ntf>
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY;
   16eb4:	2304      	movs	r3, #4
   16eb6:	72a3      	strb	r3, [r4, #10]
}
   16eb8:	bd38      	pop	{r3, r4, r5, pc}
   16eba:	bf00      	nop
   16ebc:	200030c4 	.word	0x200030c4

00016ec0 <rp_cu_check_instant.isra.0>:
		/* Ignore other evts */
		break;
	}
}

static void rp_cu_check_instant(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   16ec0:	b538      	push	{r3, r4, r5, lr}
   16ec2:	460c      	mov	r4, r1
   16ec4:	4605      	mov	r5, r0
				void *param)
{
	uint16_t event_counter = ull_conn_event_counter(conn);
   16ec6:	f7fc fca1 	bl	1380c <ull_conn_event_counter>

	if (is_instant_reached_or_passed(ctx->data.cu.instant, event_counter)) {
   16eca:	8c23      	ldrh	r3, [r4, #32]
   16ecc:	1ac3      	subs	r3, r0, r3
   16ece:	041b      	lsls	r3, r3, #16
   16ed0:	d500      	bpl.n	16ed4 <rp_cu_check_instant.isra.0+0x14>
			rp_cu_wait_complete(conn, ctx, evt, param);
		} else {
			rp_cu_complete(conn, ctx);
		}
	}
}
   16ed2:	bd38      	pop	{r3, r4, r5, pc}
		cu_update_conn_parameters(conn, ctx);
   16ed4:	4621      	mov	r1, r4
   16ed6:	4628      	mov	r0, r5
   16ed8:	f7ff fe5e 	bl	16b98 <cu_update_conn_parameters>
		if (ctx->proc == PROC_CONN_PARAM_REQ) {
   16edc:	7a23      	ldrb	r3, [r4, #8]
   16ede:	2b09      	cmp	r3, #9
   16ee0:	d01d      	beq.n	16f1e <rp_cu_check_instant.isra.0+0x5e>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   16ee2:	7fa3      	ldrb	r3, [r4, #30]
   16ee4:	b15b      	cbz	r3, 16efe <rp_cu_check_instant.isra.0+0x3e>
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
   16ee6:	2300      	movs	r3, #0
   16ee8:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
   16eea:	f7fd ff3b 	bl	14d64 <llcp_ntf_alloc_is_available>
   16eee:	b910      	cbnz	r0, 16ef6 <rp_cu_check_instant.isra.0+0x36>
		ctx->state = RP_CU_STATE_WAIT_NTF;
   16ef0:	230c      	movs	r3, #12
   16ef2:	72a3      	strb	r3, [r4, #10]
}
   16ef4:	bd38      	pop	{r3, r4, r5, pc}
		cu_ntf(conn, ctx);
   16ef6:	4621      	mov	r1, r4
   16ef8:	4628      	mov	r0, r5
   16efa:	f7ff fdef 	bl	16adc <cu_ntf>
	llcp_rr_complete(conn);
   16efe:	4628      	mov	r0, r5
   16f00:	f000 fe04 	bl	17b0c <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   16f04:	7a23      	ldrb	r3, [r4, #8]
   16f06:	2b09      	cmp	r3, #9
   16f08:	d002      	beq.n	16f10 <rp_cu_check_instant.isra.0+0x50>
	ctx->state = RP_CU_STATE_IDLE;
   16f0a:	2300      	movs	r3, #0
   16f0c:	72a3      	strb	r3, [r4, #10]
}
   16f0e:	bd38      	pop	{r3, r4, r5, pc}
	if (conn == conn_upd_curr) {
   16f10:	4b08      	ldr	r3, [pc, #32]	; (16f34 <rp_cu_check_instant.isra.0+0x74>)
   16f12:	681a      	ldr	r2, [r3, #0]
   16f14:	4295      	cmp	r5, r2
		conn_upd_curr = NULL;
   16f16:	bf04      	itt	eq
   16f18:	2200      	moveq	r2, #0
   16f1a:	601a      	streq	r2, [r3, #0]
   16f1c:	e7f5      	b.n	16f0a <rp_cu_check_instant.isra.0+0x4a>
			llcp_rr_prt_stop(conn);
   16f1e:	4628      	mov	r0, r5
   16f20:	f000 fd7c 	bl	17a1c <llcp_rr_prt_stop>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   16f24:	7a23      	ldrb	r3, [r4, #8]
   16f26:	2b09      	cmp	r3, #9
   16f28:	d1db      	bne.n	16ee2 <rp_cu_check_instant.isra.0+0x22>
   16f2a:	7f23      	ldrb	r3, [r4, #28]
   16f2c:	2b00      	cmp	r3, #0
   16f2e:	d1da      	bne.n	16ee6 <rp_cu_check_instant.isra.0+0x26>
   16f30:	e7d7      	b.n	16ee2 <rp_cu_check_instant.isra.0+0x22>
   16f32:	bf00      	nop
   16f34:	200030c4 	.word	0x200030c4

00016f38 <rp_cu_execute_fsm>:
		break;
	}
}

static void rp_cu_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
   16f38:	b570      	push	{r4, r5, r6, lr}
   16f3a:	460c      	mov	r4, r1
	switch (ctx->state) {
   16f3c:	7a89      	ldrb	r1, [r1, #10]
{
   16f3e:	4605      	mov	r5, r0
	switch (ctx->state) {
   16f40:	290c      	cmp	r1, #12
   16f42:	f200 80a9 	bhi.w	17098 <rp_cu_execute_fsm+0x160>
   16f46:	e8df f001 	tbb	[pc, r1]
   16f4a:	170b      	.short	0x170b
   16f4c:	61584e46 	.word	0x61584e46
   16f50:	8379a771 	.word	0x8379a771
   16f54:	9e8b      	.short	0x9e8b
   16f56:	07          	.byte	0x07
   16f57:	00          	.byte	0x00
	switch (evt) {
   16f58:	2a00      	cmp	r2, #0
   16f5a:	f000 80ab 	beq.w	170b4 <rp_cu_execute_fsm+0x17c>
	default:
		/* Unknown state */
		LL_ASSERT(0);
		break;
	}
}
   16f5e:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   16f60:	2a00      	cmp	r2, #0
   16f62:	d1fc      	bne.n	16f5e <rp_cu_execute_fsm+0x26>
		switch (ctx->proc) {
   16f64:	7a23      	ldrb	r3, [r4, #8]
   16f66:	2b08      	cmp	r3, #8
   16f68:	f000 80bc 	beq.w	170e4 <rp_cu_execute_fsm+0x1ac>
   16f6c:	2b09      	cmp	r3, #9
   16f6e:	f040 80ab 	bne.w	170c8 <rp_cu_execute_fsm+0x190>
			ctx->state = RP_CU_STATE_WAIT_RX_CONN_PARAM_REQ;
   16f72:	2301      	movs	r3, #1
   16f74:	72a3      	strb	r3, [r4, #10]
}
   16f76:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   16f78:	2a01      	cmp	r2, #1
   16f7a:	d1f0      	bne.n	16f5e <rp_cu_execute_fsm+0x26>
		llcp_pdu_decode_conn_param_req(ctx, param);
   16f7c:	4619      	mov	r1, r3
   16f7e:	4620      	mov	r0, r4
   16f80:	f7ff fcac 	bl	168dc <llcp_pdu_decode_conn_param_req>
	const uint16_t interval_min = ctx->data.cu.interval_min;
   16f84:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	const uint16_t interval_max = ctx->data.cu.interval_max; /* unit conn events (ie 1.25ms) */
   16f86:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	const uint16_t timeout = ctx->data.cu.timeout; /* unit 10ms */
   16f88:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	const uint16_t latency = ctx->data.cu.latency;
   16f8a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
	const uint16_t preferred_periodicity = ctx->data.cu.preferred_periodicity;
   16f8c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
	     ((latency + 1) * interval_max)) ||
   16f90:	2b05      	cmp	r3, #5
   16f92:	d917      	bls.n	16fc4 <rp_cu_execute_fsm+0x8c>
	const bool invalid = ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16f94:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   16f98:	d814      	bhi.n	16fc4 <rp_cu_execute_fsm+0x8c>
	    (interval_max > CONN_UPDATE_CONN_INTV_4SEC) ||
   16f9a:	4293      	cmp	r3, r2
   16f9c:	d812      	bhi.n	16fc4 <rp_cu_execute_fsm+0x8c>
	    (interval_min > interval_max) ||
   16f9e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   16fa2:	d20f      	bcs.n	16fc4 <rp_cu_execute_fsm+0x8c>
	    (latency > CONN_UPDATE_LATENCY_MAX) ||
   16fa4:	f1a0 030a 	sub.w	r3, r0, #10
   16fa8:	b29b      	uxth	r3, r3
   16faa:	f640 4c76 	movw	ip, #3190	; 0xc76
   16fae:	4563      	cmp	r3, ip
   16fb0:	d808      	bhi.n	16fc4 <rp_cu_execute_fsm+0x8c>
	     ((latency + 1) * interval_max)) ||
   16fb2:	1c4b      	adds	r3, r1, #1
   16fb4:	b29b      	uxth	r3, r3
   16fb6:	fb02 f303 	mul.w	r3, r2, r3
	    (timeout < CONN_UPDATE_TIMEOUT_100MS) || (timeout > CONN_UPDATE_TIMEOUT_32SEC) ||
   16fba:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   16fbe:	d201      	bcs.n	16fc4 <rp_cu_execute_fsm+0x8c>
	     ((latency + 1) * interval_max)) ||
   16fc0:	42b2      	cmp	r2, r6
   16fc2:	d20a      	bcs.n	16fda <rp_cu_execute_fsm+0xa2>
			ctx->data.cu.error = BT_HCI_ERR_INVALID_LL_PARAM;
   16fc4:	f640 731e 	movw	r3, #3870	; 0xf1e
   16fc8:	83a3      	strh	r3, [r4, #28]
			rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   16fca:	4621      	mov	r1, r4
   16fcc:	4628      	mov	r0, r5
}
   16fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   16fd2:	f7ff bf11 	b.w	16df8 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   16fd6:	2a01      	cmp	r2, #1
   16fd8:	d8c1      	bhi.n	16f5e <rp_cu_execute_fsm+0x26>
   16fda:	4621      	mov	r1, r4
   16fdc:	4628      	mov	r0, r5
}
   16fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16fe2:	f7ff bf2f 	b.w	16e44 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0>
	switch (evt) {
   16fe6:	2a00      	cmp	r2, #0
   16fe8:	d1b9      	bne.n	16f5e <rp_cu_execute_fsm+0x26>
	if (!llcp_ntf_alloc_is_available()) {
   16fea:	f7fd febb 	bl	14d64 <llcp_ntf_alloc_is_available>
   16fee:	2800      	cmp	r0, #0
   16ff0:	f040 809f 	bne.w	17132 <rp_cu_execute_fsm+0x1fa>
		ctx->state = RP_CU_STATE_WAIT_NTF_CONN_PARAM_REQ;
   16ff4:	2303      	movs	r3, #3
   16ff6:	72a3      	strb	r3, [r4, #10]
}
   16ff8:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   16ffa:	2a03      	cmp	r2, #3
   16ffc:	d061      	beq.n	170c2 <rp_cu_execute_fsm+0x18a>
   16ffe:	2a04      	cmp	r2, #4
   17000:	d1ad      	bne.n	16f5e <rp_cu_execute_fsm+0x26>
		ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17002:	220f      	movs	r2, #15
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   17004:	2306      	movs	r3, #6
		ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17006:	7762      	strb	r2, [r4, #29]
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   17008:	72a3      	strb	r3, [r4, #10]
}
   1700a:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   1700c:	2a00      	cmp	r2, #0
   1700e:	d1a6      	bne.n	16f5e <rp_cu_execute_fsm+0x26>
		if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
   17010:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   17014:	2b00      	cmp	r3, #0
   17016:	da1d      	bge.n	17054 <rp_cu_execute_fsm+0x11c>
			if (!ctx->data.cu.error) {
   17018:	7f23      	ldrb	r3, [r4, #28]
   1701a:	b18b      	cbz	r3, 17040 <rp_cu_execute_fsm+0x108>
				ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1701c:	230f      	movs	r3, #15
   1701e:	7763      	strb	r3, [r4, #29]
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   17020:	4621      	mov	r1, r4
   17022:	4628      	mov	r0, r5
}
   17024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   17028:	f7ff bee6 	b.w	16df8 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   1702c:	2a00      	cmp	r2, #0
   1702e:	d196      	bne.n	16f5e <rp_cu_execute_fsm+0x26>
		rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   17030:	4621      	mov	r1, r4
   17032:	4628      	mov	r0, r5
}
   17034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   17038:	f7ff bede 	b.w	16df8 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   1703c:	2a00      	cmp	r2, #0
   1703e:	d18e      	bne.n	16f5e <rp_cu_execute_fsm+0x26>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   17040:	4628      	mov	r0, r5
   17042:	f000 fcdd 	bl	17a00 <llcp_rr_ispaused>
   17046:	2800      	cmp	r0, #0
   17048:	d04f      	beq.n	170ea <rp_cu_execute_fsm+0x1b2>
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_PARAM_RSP;
   1704a:	2308      	movs	r3, #8
   1704c:	72a3      	strb	r3, [r4, #10]
}
   1704e:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   17050:	2a00      	cmp	r2, #0
   17052:	d184      	bne.n	16f5e <rp_cu_execute_fsm+0x26>
		rp_cu_send_conn_update_ind(conn, ctx, evt, param);
   17054:	4621      	mov	r1, r4
   17056:	4628      	mov	r0, r5
}
   17058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_send_conn_update_ind(conn, ctx, evt, param);
   1705c:	f7ff be1e 	b.w	16c9c <rp_cu_send_conn_update_ind.constprop.0>
	switch (evt) {
   17060:	2a02      	cmp	r2, #2
   17062:	f47f af7c 	bne.w	16f5e <rp_cu_execute_fsm+0x26>
		switch (conn->lll.role) {
   17066:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1706a:	f3c2 11c0 	ubfx	r1, r2, #7, #1
   1706e:	09d2      	lsrs	r2, r2, #7
   17070:	d149      	bne.n	17106 <rp_cu_execute_fsm+0x1ce>
			ctx->unknown_response.type = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   17072:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   17076:	4628      	mov	r0, r5
   17078:	f000 fcc2 	bl	17a00 <llcp_rr_ispaused>
   1707c:	2800      	cmp	r0, #0
   1707e:	d07a      	beq.n	17176 <rp_cu_execute_fsm+0x23e>
		ctx->state = RP_CU_STATE_WAIT_TX_UNKNOWN_RSP;
   17080:	230d      	movs	r3, #13
   17082:	72a3      	strb	r3, [r4, #10]
}
   17084:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   17086:	2a00      	cmp	r2, #0
   17088:	f47f af69 	bne.w	16f5e <rp_cu_execute_fsm+0x26>
		rp_cu_check_instant(conn, ctx, evt, param);
   1708c:	4621      	mov	r1, r4
   1708e:	4628      	mov	r0, r5
}
   17090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_check_instant(conn, ctx, evt, param);
   17094:	f7ff bf14 	b.w	16ec0 <rp_cu_check_instant.isra.0>
		LL_ASSERT(0);
   17098:	4a3d      	ldr	r2, [pc, #244]	; (17190 <rp_cu_execute_fsm+0x258>)
   1709a:	493e      	ldr	r1, [pc, #248]	; (17194 <rp_cu_execute_fsm+0x25c>)
   1709c:	483e      	ldr	r0, [pc, #248]	; (17198 <rp_cu_execute_fsm+0x260>)
   1709e:	f240 43aa 	movw	r3, #1194	; 0x4aa
   170a2:	f00a fb53 	bl	2174c <assert_print>
   170a6:	4040      	eors	r0, r0
   170a8:	f380 8811 	msr	BASEPRI, r0
   170ac:	f04f 0003 	mov.w	r0, #3
   170b0:	df02      	svc	2
}
   170b2:	bd70      	pop	{r4, r5, r6, pc}
	if (!llcp_ntf_alloc_is_available()) {
   170b4:	f7fd fe56 	bl	14d64 <llcp_ntf_alloc_is_available>
   170b8:	2800      	cmp	r0, #0
   170ba:	d141      	bne.n	17140 <rp_cu_execute_fsm+0x208>
		ctx->state = RP_CU_STATE_WAIT_NTF;
   170bc:	230c      	movs	r3, #12
   170be:	72a3      	strb	r3, [r4, #10]
}
   170c0:	bd70      	pop	{r4, r5, r6, pc}
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY_CONTINUE;
   170c2:	2305      	movs	r3, #5
   170c4:	72a3      	strb	r3, [r4, #10]
}
   170c6:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   170c8:	4a31      	ldr	r2, [pc, #196]	; (17190 <rp_cu_execute_fsm+0x258>)
   170ca:	4932      	ldr	r1, [pc, #200]	; (17194 <rp_cu_execute_fsm+0x25c>)
   170cc:	4832      	ldr	r0, [pc, #200]	; (17198 <rp_cu_execute_fsm+0x260>)
   170ce:	f240 335b 	movw	r3, #859	; 0x35b
   170d2:	f00a fb3b 	bl	2174c <assert_print>
   170d6:	4040      	eors	r0, r0
   170d8:	f380 8811 	msr	BASEPRI, r0
   170dc:	f04f 0003 	mov.w	r0, #3
   170e0:	df02      	svc	2
}
   170e2:	bd70      	pop	{r4, r5, r6, pc}
			ctx->state = RP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   170e4:	230a      	movs	r3, #10
   170e6:	72a3      	strb	r3, [r4, #10]
}
   170e8:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   170ea:	4621      	mov	r1, r4
   170ec:	4628      	mov	r0, r5
   170ee:	f7fd fe25 	bl	14d3c <llcp_tx_alloc_peek>
   170f2:	2800      	cmp	r0, #0
   170f4:	d0a9      	beq.n	1704a <rp_cu_execute_fsm+0x112>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP);
   170f6:	2210      	movs	r2, #16
   170f8:	4621      	mov	r1, r4
   170fa:	4628      	mov	r0, r5
   170fc:	f7ff fd72 	bl	16be4 <rp_cu_tx>
		ctx->state = RP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   17100:	230a      	movs	r3, #10
   17102:	8163      	strh	r3, [r4, #10]
}
   17104:	bd70      	pop	{r4, r5, r6, pc}
			llcp_pdu_decode_conn_update_ind(ctx, param);
   17106:	4619      	mov	r1, r3
   17108:	4620      	mov	r0, r4
   1710a:	f7ff fc2d 	bl	16968 <llcp_pdu_decode_conn_update_ind>
			if (is_instant_not_passed(ctx->data.cu.instant,
   1710e:	4628      	mov	r0, r5
   17110:	8c26      	ldrh	r6, [r4, #32]
   17112:	f7fc fb7b 	bl	1380c <ull_conn_event_counter>
   17116:	1a33      	subs	r3, r6, r0
   17118:	b29b      	uxth	r3, r3
   1711a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   1711e:	4293      	cmp	r3, r2
   17120:	d81b      	bhi.n	1715a <rp_cu_execute_fsm+0x222>
				ctx->state = RP_CU_STATE_WAIT_INSTANT;
   17122:	230b      	movs	r3, #11
   17124:	72a3      	strb	r3, [r4, #10]
				rp_cu_check_instant(conn, ctx, evt, param);
   17126:	4621      	mov	r1, r4
   17128:	4628      	mov	r0, r5
}
   1712a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rp_cu_check_instant(conn, ctx, evt, param);
   1712e:	f7ff bec7 	b.w	16ec0 <rp_cu_check_instant.isra.0>
		rp_cu_conn_param_req_ntf(conn, ctx);
   17132:	4621      	mov	r1, r4
   17134:	4628      	mov	r0, r5
   17136:	f7ff fd05 	bl	16b44 <rp_cu_conn_param_req_ntf>
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY;
   1713a:	2304      	movs	r3, #4
   1713c:	72a3      	strb	r3, [r4, #10]
}
   1713e:	bd70      	pop	{r4, r5, r6, pc}
		cu_ntf(conn, ctx);
   17140:	4621      	mov	r1, r4
   17142:	4628      	mov	r0, r5
   17144:	f7ff fcca 	bl	16adc <cu_ntf>
	llcp_rr_complete(conn);
   17148:	4628      	mov	r0, r5
   1714a:	f000 fcdf 	bl	17b0c <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   1714e:	7a23      	ldrb	r3, [r4, #8]
   17150:	2b09      	cmp	r3, #9
   17152:	d009      	beq.n	17168 <rp_cu_execute_fsm+0x230>
				ctx->state = RP_CU_STATE_IDLE;
   17154:	2300      	movs	r3, #0
   17156:	72a3      	strb	r3, [r4, #10]
}
   17158:	bd70      	pop	{r4, r5, r6, pc}
				conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
   1715a:	2328      	movs	r3, #40	; 0x28
   1715c:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
				llcp_rr_complete(conn);
   17160:	4628      	mov	r0, r5
   17162:	f000 fcd3 	bl	17b0c <llcp_rr_complete>
   17166:	e7f5      	b.n	17154 <rp_cu_execute_fsm+0x21c>
	if (conn == conn_upd_curr) {
   17168:	4b0c      	ldr	r3, [pc, #48]	; (1719c <rp_cu_execute_fsm+0x264>)
   1716a:	681a      	ldr	r2, [r3, #0]
   1716c:	4295      	cmp	r5, r2
   1716e:	d1f1      	bne.n	17154 <rp_cu_execute_fsm+0x21c>
		conn_upd_curr = NULL;
   17170:	2200      	movs	r2, #0
   17172:	601a      	str	r2, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
   17174:	e7ee      	b.n	17154 <rp_cu_execute_fsm+0x21c>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   17176:	4621      	mov	r1, r4
   17178:	4628      	mov	r0, r5
   1717a:	f7fd fddf 	bl	14d3c <llcp_tx_alloc_peek>
   1717e:	2800      	cmp	r0, #0
   17180:	f43f af7e 	beq.w	17080 <rp_cu_execute_fsm+0x148>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP);
   17184:	2207      	movs	r2, #7
   17186:	4621      	mov	r1, r4
   17188:	4628      	mov	r0, r5
   1718a:	f7ff fd2b 	bl	16be4 <rp_cu_tx>
   1718e:	e7db      	b.n	17148 <rp_cu_execute_fsm+0x210>
   17190:	00029140 	.word	0x00029140
   17194:	000286fc 	.word	0x000286fc
   17198:	0002866c 	.word	0x0002866c
   1719c:	200030c4 	.word	0x200030c4

000171a0 <lp_cu_execute_fsm>:
{
   171a0:	b570      	push	{r4, r5, r6, lr}
   171a2:	460c      	mov	r4, r1
	switch (ctx->state) {
   171a4:	7a89      	ldrb	r1, [r1, #10]
{
   171a6:	4606      	mov	r6, r0
   171a8:	4615      	mov	r5, r2
	switch (ctx->state) {
   171aa:	2907      	cmp	r1, #7
   171ac:	d808      	bhi.n	171c0 <lp_cu_execute_fsm+0x20>
   171ae:	e8df f001 	tbb	[pc, r1]
   171b2:	2815      	.short	0x2815
   171b4:	30600707 	.word	0x30600707
   171b8:	0439      	.short	0x0439
	switch (evt) {
   171ba:	2d00      	cmp	r5, #0
   171bc:	d06e      	beq.n	1729c <lp_cu_execute_fsm+0xfc>
}
   171be:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   171c0:	4a63      	ldr	r2, [pc, #396]	; (17350 <lp_cu_execute_fsm+0x1b0>)
   171c2:	4964      	ldr	r1, [pc, #400]	; (17354 <lp_cu_execute_fsm+0x1b4>)
   171c4:	4864      	ldr	r0, [pc, #400]	; (17358 <lp_cu_execute_fsm+0x1b8>)
   171c6:	f240 2385 	movw	r3, #645	; 0x285
   171ca:	f00a fabf 	bl	2174c <assert_print>
   171ce:	4040      	eors	r0, r0
   171d0:	f380 8811 	msr	BASEPRI, r0
   171d4:	f04f 0003 	mov.w	r0, #3
   171d8:	df02      	svc	2
}
   171da:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   171dc:	2d00      	cmp	r5, #0
   171de:	d1ee      	bne.n	171be <lp_cu_execute_fsm+0x1e>
		switch (ctx->proc) {
   171e0:	7a23      	ldrb	r3, [r4, #8]
   171e2:	2b09      	cmp	r3, #9
   171e4:	d00f      	beq.n	17206 <lp_cu_execute_fsm+0x66>
			LL_ASSERT(0);
   171e6:	4a5a      	ldr	r2, [pc, #360]	; (17350 <lp_cu_execute_fsm+0x1b0>)
   171e8:	495a      	ldr	r1, [pc, #360]	; (17354 <lp_cu_execute_fsm+0x1b4>)
   171ea:	485b      	ldr	r0, [pc, #364]	; (17358 <lp_cu_execute_fsm+0x1b8>)
   171ec:	f240 13a7 	movw	r3, #423	; 0x1a7
   171f0:	f00a faac 	bl	2174c <assert_print>
   171f4:	4040      	eors	r0, r0
   171f6:	f380 8811 	msr	BASEPRI, r0
   171fa:	f04f 0003 	mov.w	r0, #3
   171fe:	df02      	svc	2
}
   17200:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   17202:	2d00      	cmp	r5, #0
   17204:	d1db      	bne.n	171be <lp_cu_execute_fsm+0x1e>
			lp_cu_send_conn_param_req(conn, ctx, evt, param);
   17206:	4621      	mov	r1, r4
   17208:	4630      	mov	r0, r6
}
   1720a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			lp_cu_send_conn_param_req(conn, ctx, evt, param);
   1720e:	f7ff bd83 	b.w	16d18 <lp_cu_send_conn_param_req.constprop.0>
	switch (evt) {
   17212:	2d00      	cmp	r5, #0
   17214:	d1d3      	bne.n	171be <lp_cu_execute_fsm+0x1e>
	if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   17216:	f7ff f841 	bl	1629c <llcp_lr_ispaused>
   1721a:	2800      	cmp	r0, #0
   1721c:	d057      	beq.n	172ce <lp_cu_execute_fsm+0x12e>
		ctx->state = LP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   1721e:	2305      	movs	r3, #5
   17220:	72a3      	strb	r3, [r4, #10]
}
   17222:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   17224:	2d00      	cmp	r5, #0
   17226:	d1ca      	bne.n	171be <lp_cu_execute_fsm+0x1e>
	uint16_t event_counter = ull_conn_event_counter(conn);
   17228:	f7fc faf0 	bl	1380c <ull_conn_event_counter>
	if (is_instant_reached_or_passed(ctx->data.cu.instant, event_counter)) {
   1722c:	8c23      	ldrh	r3, [r4, #32]
   1722e:	1ac0      	subs	r0, r0, r3
   17230:	0403      	lsls	r3, r0, #16
   17232:	d4c4      	bmi.n	171be <lp_cu_execute_fsm+0x1e>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   17234:	4629      	mov	r1, r5
   17236:	4630      	mov	r0, r6
   17238:	f000 fbd0 	bl	179dc <llcp_rr_set_incompat>
		cu_update_conn_parameters(conn, ctx);
   1723c:	4621      	mov	r1, r4
   1723e:	4630      	mov	r0, r6
   17240:	f7ff fcaa 	bl	16b98 <cu_update_conn_parameters>
		if (ctx->proc == PROC_CONN_PARAM_REQ) {
   17244:	7a23      	ldrb	r3, [r4, #8]
   17246:	2b09      	cmp	r3, #9
   17248:	d063      	beq.n	17312 <lp_cu_execute_fsm+0x172>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   1724a:	7fa3      	ldrb	r3, [r4, #30]
   1724c:	b143      	cbz	r3, 17260 <lp_cu_execute_fsm+0xc0>
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
   1724e:	2300      	movs	r3, #0
   17250:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
   17252:	f7fd fd87 	bl	14d64 <llcp_ntf_alloc_is_available>
   17256:	b328      	cbz	r0, 172a4 <lp_cu_execute_fsm+0x104>
		cu_ntf(conn, ctx);
   17258:	4621      	mov	r1, r4
   1725a:	4630      	mov	r0, r6
   1725c:	f7ff fc3e 	bl	16adc <cu_ntf>
	llcp_lr_complete(conn);
   17260:	4630      	mov	r0, r6
   17262:	f7ff f8af 	bl	163c4 <llcp_lr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   17266:	7a23      	ldrb	r3, [r4, #8]
   17268:	2b09      	cmp	r3, #9
   1726a:	d025      	beq.n	172b8 <lp_cu_execute_fsm+0x118>
	ctx->state = LP_CU_STATE_IDLE;
   1726c:	2300      	movs	r3, #0
   1726e:	72a3      	strb	r3, [r4, #10]
}
   17270:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   17272:	2d03      	cmp	r5, #3
   17274:	d019      	beq.n	172aa <lp_cu_execute_fsm+0x10a>
   17276:	2d04      	cmp	r5, #4
   17278:	d008      	beq.n	1728c <lp_cu_execute_fsm+0xec>
   1727a:	2d02      	cmp	r5, #2
   1727c:	d19f      	bne.n	171be <lp_cu_execute_fsm+0x1e>
		llcp_pdu_decode_conn_update_ind(ctx, param);
   1727e:	4619      	mov	r1, r3
   17280:	4620      	mov	r0, r4
   17282:	f7ff fb71 	bl	16968 <llcp_pdu_decode_conn_update_ind>
		ctx->state = LP_CU_STATE_WAIT_INSTANT;
   17286:	2306      	movs	r3, #6
   17288:	72a3      	strb	r3, [r4, #10]
}
   1728a:	bd70      	pop	{r4, r5, r6, pc}
   1728c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
		ctx->data.cu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17290:	221a      	movs	r2, #26
   17292:	f023 0302 	bic.w	r3, r3, #2
   17296:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
   1729a:	7722      	strb	r2, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
   1729c:	f7fd fd62 	bl	14d64 <llcp_ntf_alloc_is_available>
   172a0:	2800      	cmp	r0, #0
   172a2:	d1d9      	bne.n	17258 <lp_cu_execute_fsm+0xb8>
		ctx->state = LP_CU_STATE_WAIT_NTF;
   172a4:	2307      	movs	r3, #7
   172a6:	72a3      	strb	r3, [r4, #10]
}
   172a8:	bd70      	pop	{r4, r5, r6, pc}
		ctx->data.cu.error = pdu->llctrl.reject_ext_ind.error_code;
   172aa:	795b      	ldrb	r3, [r3, #5]
   172ac:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
   172ae:	f7fd fd59 	bl	14d64 <llcp_ntf_alloc_is_available>
   172b2:	2800      	cmp	r0, #0
   172b4:	d0f6      	beq.n	172a4 <lp_cu_execute_fsm+0x104>
   172b6:	e7cf      	b.n	17258 <lp_cu_execute_fsm+0xb8>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   172b8:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
   172bc:	2b00      	cmp	r3, #0
   172be:	db32      	blt.n	17326 <lp_cu_execute_fsm+0x186>
	if (conn == conn_upd_curr) {
   172c0:	4b26      	ldr	r3, [pc, #152]	; (1735c <lp_cu_execute_fsm+0x1bc>)
   172c2:	681a      	ldr	r2, [r3, #0]
   172c4:	4296      	cmp	r6, r2
   172c6:	d1d1      	bne.n	1726c <lp_cu_execute_fsm+0xcc>
		conn_upd_curr = NULL;
   172c8:	2200      	movs	r2, #0
   172ca:	601a      	str	r2, [r3, #0]
   172cc:	e7ce      	b.n	1726c <lp_cu_execute_fsm+0xcc>
	if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   172ce:	4621      	mov	r1, r4
   172d0:	4630      	mov	r0, r6
   172d2:	f7fd fd33 	bl	14d3c <llcp_tx_alloc_peek>
   172d6:	2800      	cmp	r0, #0
   172d8:	d0a1      	beq.n	1721e <lp_cu_execute_fsm+0x7e>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   172da:	4629      	mov	r1, r5
   172dc:	4630      	mov	r0, r6
   172de:	f000 fb7d 	bl	179dc <llcp_rr_set_incompat>
	tx = llcp_tx_alloc(conn, ctx);
   172e2:	4621      	mov	r1, r4
   172e4:	4630      	mov	r0, r6
   172e6:	f7fd fd31 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   172ea:	4605      	mov	r5, r0
   172ec:	b308      	cbz	r0, 17332 <lp_cu_execute_fsm+0x192>
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
   172ee:	7f22      	ldrb	r2, [r4, #28]
   172f0:	7f61      	ldrb	r1, [r4, #29]
   172f2:	1d28      	adds	r0, r5, #4
   172f4:	f7ff fa46 	bl	16784 <llcp_pdu_encode_reject_ext_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
   172f8:	79eb      	ldrb	r3, [r5, #7]
   172fa:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   172fc:	4629      	mov	r1, r5
   172fe:	4630      	mov	r0, r6
   17300:	f7fd fd42 	bl	14d88 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   17304:	7a23      	ldrb	r3, [r4, #8]
   17306:	2b09      	cmp	r3, #9
   17308:	d1aa      	bne.n	17260 <lp_cu_execute_fsm+0xc0>
		llcp_lr_prt_restart(conn);
   1730a:	4630      	mov	r0, r6
   1730c:	f7fe ffd6 	bl	162bc <llcp_lr_prt_restart>
	llcp_lr_complete(conn);
   17310:	e7a6      	b.n	17260 <lp_cu_execute_fsm+0xc0>
			llcp_lr_prt_stop(conn);
   17312:	4630      	mov	r0, r6
   17314:	f7fe ffdc 	bl	162d0 <llcp_lr_prt_stop>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   17318:	7a23      	ldrb	r3, [r4, #8]
   1731a:	2b09      	cmp	r3, #9
   1731c:	d195      	bne.n	1724a <lp_cu_execute_fsm+0xaa>
   1731e:	7f23      	ldrb	r3, [r4, #28]
   17320:	2b00      	cmp	r3, #0
   17322:	d194      	bne.n	1724e <lp_cu_execute_fsm+0xae>
   17324:	e791      	b.n	1724a <lp_cu_execute_fsm+0xaa>
	    !(conn->lll.role && ull_cp_remote_cpr_pending(conn))) {
   17326:	4630      	mov	r0, r6
   17328:	f7fe f81c 	bl	15364 <ull_cp_remote_cpr_pending>
   1732c:	2800      	cmp	r0, #0
   1732e:	d0c7      	beq.n	172c0 <lp_cu_execute_fsm+0x120>
   17330:	e79c      	b.n	1726c <lp_cu_execute_fsm+0xcc>
	LL_ASSERT(tx);
   17332:	4a07      	ldr	r2, [pc, #28]	; (17350 <lp_cu_execute_fsm+0x1b0>)
   17334:	490a      	ldr	r1, [pc, #40]	; (17360 <lp_cu_execute_fsm+0x1c0>)
   17336:	4808      	ldr	r0, [pc, #32]	; (17358 <lp_cu_execute_fsm+0x1b8>)
   17338:	f240 1311 	movw	r3, #273	; 0x111
   1733c:	f00a fa06 	bl	2174c <assert_print>
   17340:	4040      	eors	r0, r0
   17342:	f380 8811 	msr	BASEPRI, r0
   17346:	f04f 0003 	mov.w	r0, #3
   1734a:	df02      	svc	2
   1734c:	e7cf      	b.n	172ee <lp_cu_execute_fsm+0x14e>
   1734e:	bf00      	nop
   17350:	00029140 	.word	0x00029140
   17354:	000286fc 	.word	0x000286fc
   17358:	0002866c 	.word	0x0002866c
   1735c:	200030c4 	.word	0x200030c4
   17360:	00028d90 	.word	0x00028d90

00017364 <llcp_lp_cu_rx>:
{
   17364:	b510      	push	{r4, lr}
	switch (pdu->llctrl.opcode) {
   17366:	f892 c01f 	ldrb.w	ip, [r2, #31]
{
   1736a:	b082      	sub	sp, #8
   1736c:	4604      	mov	r4, r0
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   1736e:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   17372:	f1bc 0f11 	cmp.w	ip, #17
   17376:	d80a      	bhi.n	1738e <llcp_lp_cu_rx+0x2a>
   17378:	e8df f00c 	tbb	[pc, ip]
   1737c:	0909092c 	.word	0x0909092c
   17380:	25090909 	.word	0x25090909
   17384:	09090909 	.word	0x09090909
   17388:	09090909 	.word	0x09090909
   1738c:	171e      	.short	0x171e
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   1738e:	2324      	movs	r3, #36	; 0x24
   17390:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
   17394:	9101      	str	r1, [sp, #4]
	llcp_lr_complete(conn);
   17396:	f7ff f815 	bl	163c4 <llcp_lr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   1739a:	9901      	ldr	r1, [sp, #4]
   1739c:	7a0b      	ldrb	r3, [r1, #8]
   1739e:	2b09      	cmp	r3, #9
   173a0:	d01f      	beq.n	173e2 <llcp_lp_cu_rx+0x7e>
	ctx->state = LP_CU_STATE_IDLE;
   173a2:	2300      	movs	r3, #0
   173a4:	728b      	strb	r3, [r1, #10]
}
   173a6:	b002      	add	sp, #8
   173a8:	bd10      	pop	{r4, pc}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   173aa:	2203      	movs	r2, #3
   173ac:	4620      	mov	r0, r4
}
   173ae:	b002      	add	sp, #8
   173b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   173b4:	f7ff bef4 	b.w	171a0 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_CONN_PARAM_RSP, pdu);
   173b8:	2201      	movs	r2, #1
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   173ba:	4620      	mov	r0, r4
}
   173bc:	b002      	add	sp, #8
   173be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   173c2:	f7ff beed 	b.w	171a0 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_UNKNOWN, pdu);
   173c6:	2204      	movs	r2, #4
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   173c8:	4620      	mov	r0, r4
}
   173ca:	b002      	add	sp, #8
   173cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   173d0:	f7ff bee6 	b.w	171a0 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_CONN_UPDATE_IND, pdu);
   173d4:	2202      	movs	r2, #2
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   173d6:	4620      	mov	r0, r4
}
   173d8:	b002      	add	sp, #8
   173da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   173de:	f7ff bedf 	b.w	171a0 <lp_cu_execute_fsm>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   173e2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   173e6:	2b00      	cmp	r3, #0
   173e8:	db06      	blt.n	173f8 <llcp_lp_cu_rx+0x94>
	if (conn == conn_upd_curr) {
   173ea:	4b07      	ldr	r3, [pc, #28]	; (17408 <llcp_lp_cu_rx+0xa4>)
   173ec:	681a      	ldr	r2, [r3, #0]
   173ee:	4294      	cmp	r4, r2
   173f0:	d1d7      	bne.n	173a2 <llcp_lp_cu_rx+0x3e>
		conn_upd_curr = NULL;
   173f2:	2200      	movs	r2, #0
   173f4:	601a      	str	r2, [r3, #0]
   173f6:	e7d4      	b.n	173a2 <llcp_lp_cu_rx+0x3e>
	    !(conn->lll.role && ull_cp_remote_cpr_pending(conn))) {
   173f8:	4620      	mov	r0, r4
   173fa:	9101      	str	r1, [sp, #4]
   173fc:	f7fd ffb2 	bl	15364 <ull_cp_remote_cpr_pending>
   17400:	9901      	ldr	r1, [sp, #4]
   17402:	2800      	cmp	r0, #0
   17404:	d0f1      	beq.n	173ea <llcp_lp_cu_rx+0x86>
   17406:	e7cc      	b.n	173a2 <llcp_lp_cu_rx+0x3e>
   17408:	200030c4 	.word	0x200030c4

0001740c <llcp_lp_cu_init_proc>:
	ctx->state = LP_CU_STATE_IDLE;
   1740c:	2300      	movs	r3, #0
   1740e:	7283      	strb	r3, [r0, #10]
}
   17410:	4770      	bx	lr
   17412:	bf00      	nop

00017414 <llcp_lp_cu_run>:
{
   17414:	4613      	mov	r3, r2
	lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_RUN, param);
   17416:	2200      	movs	r2, #0
   17418:	f7ff bec2 	b.w	171a0 <lp_cu_execute_fsm>

0001741c <llcp_rp_cu_rx>:

void llcp_rp_cu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
   1741c:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   1741e:	7fd5      	ldrb	r5, [r2, #31]
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   17420:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   17424:	b135      	cbz	r5, 17434 <llcp_rp_cu_rx+0x18>
   17426:	2d0f      	cmp	r5, #15
   17428:	d109      	bne.n	1743e <llcp_rp_cu_rx+0x22>
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
		rp_cu_complete(conn, ctx);
		break;
	}
}
   1742a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ, pdu);
   1742e:	2201      	movs	r2, #1
   17430:	f7ff bd82 	b.w	16f38 <rp_cu_execute_fsm>
}
   17434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_UPDATE_IND, pdu);
   17438:	2202      	movs	r2, #2
   1743a:	f7ff bd7d 	b.w	16f38 <rp_cu_execute_fsm>
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   1743e:	2324      	movs	r3, #36	; 0x24
   17440:	460e      	mov	r6, r1
   17442:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		rp_cu_complete(conn, ctx);
   17446:	4604      	mov	r4, r0
	llcp_rr_complete(conn);
   17448:	f000 fb60 	bl	17b0c <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   1744c:	7a33      	ldrb	r3, [r6, #8]
   1744e:	2b09      	cmp	r3, #9
   17450:	d105      	bne.n	1745e <llcp_rp_cu_rx+0x42>
	if (conn == conn_upd_curr) {
   17452:	4b04      	ldr	r3, [pc, #16]	; (17464 <llcp_rp_cu_rx+0x48>)
   17454:	681a      	ldr	r2, [r3, #0]
   17456:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   17458:	bf04      	itt	eq
   1745a:	2200      	moveq	r2, #0
   1745c:	601a      	streq	r2, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
   1745e:	2300      	movs	r3, #0
   17460:	72b3      	strb	r3, [r6, #10]
}
   17462:	bd70      	pop	{r4, r5, r6, pc}
   17464:	200030c4 	.word	0x200030c4

00017468 <llcp_rp_cu_init_proc>:

void llcp_rp_cu_init_proc(struct proc_ctx *ctx)
   17468:	2300      	movs	r3, #0
   1746a:	7283      	strb	r3, [r0, #10]
   1746c:	4770      	bx	lr
   1746e:	bf00      	nop

00017470 <llcp_rp_cu_run>:
{
	ctx->state = RP_CU_STATE_IDLE;
}

void llcp_rp_cu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   17470:	4613      	mov	r3, r2
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_RUN, param);
   17472:	2200      	movs	r2, #0
   17474:	f7ff bd60 	b.w	16f38 <rp_cu_execute_fsm>

00017478 <llcp_rp_conn_param_req_reply>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
void llcp_rp_conn_param_req_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ_REPLY, NULL);
   17478:	2300      	movs	r3, #0
   1747a:	2203      	movs	r2, #3
   1747c:	f7ff bd5c 	b.w	16f38 <rp_cu_execute_fsm>

00017480 <llcp_rp_conn_param_req_neg_reply>:
}

void llcp_rp_conn_param_req_neg_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ_NEG_REPLY, NULL);
   17480:	2300      	movs	r3, #0
   17482:	2204      	movs	r2, #4
   17484:	f7ff bd58 	b.w	16f38 <rp_cu_execute_fsm>

00017488 <llcp_rp_chmu_rx>:
		LL_ASSERT(0);
	}
}

void llcp_rp_chmu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
   17488:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   1748a:	7fd3      	ldrb	r3, [r2, #31]
   1748c:	2b01      	cmp	r3, #1
{
   1748e:	4605      	mov	r5, r0
   17490:	460c      	mov	r4, r1
	switch (pdu->llctrl.opcode) {
   17492:	d007      	beq.n	174a4 <llcp_rp_chmu_rx+0x1c>
		rp_chmu_execute_fsm(conn, ctx, RP_CHMU_EVT_RX_CHAN_MAP_IND, pdu);
		break;
	default:
		/* Invalid behaviour */
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   17494:	2324      	movs	r3, #36	; 0x24
   17496:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_rr_complete(conn);
   1749a:	f000 fb37 	bl	17b0c <llcp_rr_complete>
		ctx->state = RP_CHMU_STATE_IDLE;
   1749e:	2300      	movs	r3, #0
   174a0:	72a3      	strb	r3, [r4, #10]
		break;
	}
}
   174a2:	bd70      	pop	{r4, r5, r6, pc}
	switch (ctx->state) {
   174a4:	7a8b      	ldrb	r3, [r1, #10]
   174a6:	2b01      	cmp	r3, #1
   174a8:	d010      	beq.n	174cc <llcp_rp_chmu_rx+0x44>
   174aa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   174ae:	d0f8      	beq.n	174a2 <llcp_rp_chmu_rx+0x1a>
		LL_ASSERT(0);
   174b0:	4a14      	ldr	r2, [pc, #80]	; (17504 <llcp_rp_chmu_rx+0x7c>)
   174b2:	4915      	ldr	r1, [pc, #84]	; (17508 <llcp_rp_chmu_rx+0x80>)
   174b4:	4815      	ldr	r0, [pc, #84]	; (1750c <llcp_rp_chmu_rx+0x84>)
   174b6:	f240 132b 	movw	r3, #299	; 0x12b
   174ba:	f00a f947 	bl	2174c <assert_print>
   174be:	4040      	eors	r0, r0
   174c0:	f380 8811 	msr	BASEPRI, r0
   174c4:	f04f 0003 	mov.w	r0, #3
   174c8:	df02      	svc	2
}
   174ca:	bd70      	pop	{r4, r5, r6, pc}
		llcp_pdu_decode_chan_map_update_ind(ctx, param);
   174cc:	f102 011c 	add.w	r1, r2, #28
   174d0:	4620      	mov	r0, r4
   174d2:	f7ff fa63 	bl	1699c <llcp_pdu_decode_chan_map_update_ind>
		if (is_instant_not_passed(ctx->data.chmu.instant,
   174d6:	4628      	mov	r0, r5
   174d8:	8ba6      	ldrh	r6, [r4, #28]
   174da:	f7fc f997 	bl	1380c <ull_conn_event_counter>
   174de:	1a36      	subs	r6, r6, r0
   174e0:	b2b6      	uxth	r6, r6
   174e2:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   174e6:	429e      	cmp	r6, r3
   174e8:	d802      	bhi.n	174f0 <llcp_rp_chmu_rx+0x68>
			ctx->state = RP_CHMU_STATE_WAIT_INSTANT;
   174ea:	2302      	movs	r3, #2
   174ec:	72a3      	strb	r3, [r4, #10]
}
   174ee:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
   174f0:	2328      	movs	r3, #40	; 0x28
   174f2:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
			llcp_rr_complete(conn);
   174f6:	4628      	mov	r0, r5
   174f8:	f000 fb08 	bl	17b0c <llcp_rr_complete>
			ctx->state = RP_CHMU_STATE_IDLE;
   174fc:	2300      	movs	r3, #0
   174fe:	72a3      	strb	r3, [r4, #10]
}
   17500:	bd70      	pop	{r4, r5, r6, pc}
   17502:	bf00      	nop
   17504:	0002918c 	.word	0x0002918c
   17508:	000286fc 	.word	0x000286fc
   1750c:	0002866c 	.word	0x0002866c

00017510 <llcp_rp_chmu_init_proc>:

void llcp_rp_chmu_init_proc(struct proc_ctx *ctx)
{
	ctx->state = RP_CHMU_STATE_IDLE;
   17510:	2300      	movs	r3, #0
   17512:	7283      	strb	r3, [r0, #10]
}
   17514:	4770      	bx	lr
   17516:	bf00      	nop

00017518 <llcp_rp_chmu_run>:

void llcp_rp_chmu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   17518:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->state) {
   1751a:	7a8b      	ldrb	r3, [r1, #10]
   1751c:	2b01      	cmp	r3, #1
   1751e:	d010      	beq.n	17542 <llcp_rp_chmu_run+0x2a>
   17520:	2b02      	cmp	r3, #2
   17522:	460c      	mov	r4, r1
   17524:	d00e      	beq.n	17544 <llcp_rp_chmu_run+0x2c>
   17526:	b1fb      	cbz	r3, 17568 <llcp_rp_chmu_run+0x50>
		LL_ASSERT(0);
   17528:	4a11      	ldr	r2, [pc, #68]	; (17570 <llcp_rp_chmu_run+0x58>)
   1752a:	4912      	ldr	r1, [pc, #72]	; (17574 <llcp_rp_chmu_run+0x5c>)
   1752c:	4812      	ldr	r0, [pc, #72]	; (17578 <llcp_rp_chmu_run+0x60>)
   1752e:	f240 132b 	movw	r3, #299	; 0x12b
   17532:	f00a f90b 	bl	2174c <assert_print>
   17536:	4040      	eors	r0, r0
   17538:	f380 8811 	msr	BASEPRI, r0
   1753c:	f04f 0003 	mov.w	r0, #3
   17540:	df02      	svc	2
	rp_chmu_execute_fsm(conn, ctx, RP_CHMU_EVT_RUN, param);
}
   17542:	bd38      	pop	{r3, r4, r5, pc}
	uint16_t event_counter = ull_conn_event_counter(conn);
   17544:	4605      	mov	r5, r0
   17546:	f7fc f961 	bl	1380c <ull_conn_event_counter>
	if (((event_counter - ctx->data.chmu.instant) & 0xFFFF) <= 0x7FFF) {
   1754a:	8ba3      	ldrh	r3, [r4, #28]
   1754c:	1ac0      	subs	r0, r0, r3
   1754e:	0403      	lsls	r3, r0, #16
   17550:	d4f7      	bmi.n	17542 <llcp_rp_chmu_run+0x2a>
	ull_conn_chan_map_set(conn, ctx->data.chmu.chm);
   17552:	f104 011e 	add.w	r1, r4, #30
   17556:	4628      	mov	r0, r5
   17558:	f7fc f966 	bl	13828 <ull_conn_chan_map_set>
	llcp_rr_complete(conn);
   1755c:	4628      	mov	r0, r5
   1755e:	f000 fad5 	bl	17b0c <llcp_rr_complete>
	ctx->state = RP_CHMU_STATE_IDLE;
   17562:	2300      	movs	r3, #0
   17564:	72a3      	strb	r3, [r4, #10]
}
   17566:	bd38      	pop	{r3, r4, r5, pc}
		ctx->state = RP_CHMU_STATE_WAIT_RX_CHAN_MAP_IND;
   17568:	2301      	movs	r3, #1
   1756a:	728b      	strb	r3, [r1, #10]
}
   1756c:	bd38      	pop	{r3, r4, r5, pc}
   1756e:	bf00      	nop
   17570:	0002918c 	.word	0x0002918c
   17574:	000286fc 	.word	0x000286fc
   17578:	0002866c 	.word	0x0002866c

0001757c <rr_act_disconnect>:
{
	/* Empty on purpose */
}

static void rr_act_disconnect(struct ll_conn *conn)
{
   1757c:	b510      	push	{r4, lr}
   1757e:	4604      	mov	r4, r0
   17580:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   17584:	b170      	cbz	r0, 175a4 <rr_act_disconnect+0x28>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17586:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
   1758a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1758c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17590:	4290      	cmp	r0, r2
	list->tail = node;
   17592:	bf08      	it	eq
   17594:	f8c4 30fc 	streq.w	r3, [r4, #252]	; 0xfc
	 * we may have been disconnected in the
	 * middle of a control procedure, in  which
	 * case we need to release all contexts
	 */
	while (ctx != NULL) {
		llcp_proc_ctx_release(ctx);
   17598:	f7fd fbae 	bl	14cf8 <llcp_proc_ctx_release>
	return list->head;
   1759c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   175a0:	2800      	cmp	r0, #0
   175a2:	d1f0      	bne.n	17586 <rr_act_disconnect+0xa>
		ctx = rr_dequeue(conn);
	}
}
   175a4:	bd10      	pop	{r4, pc}
   175a6:	bf00      	nop

000175a8 <rr_check_done.part.0>:
static void rr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
   175a8:	b538      	push	{r3, r4, r5, lr}
		LL_ASSERT(ctx_header == ctx);
   175aa:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   175ae:	428b      	cmp	r3, r1
static void rr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
   175b0:	4604      	mov	r4, r0
   175b2:	460d      	mov	r5, r1
		LL_ASSERT(ctx_header == ctx);
   175b4:	d01c      	beq.n	175f0 <rr_check_done.part.0+0x48>
   175b6:	4a0f      	ldr	r2, [pc, #60]	; (175f4 <rr_check_done.part.0+0x4c>)
   175b8:	490f      	ldr	r1, [pc, #60]	; (175f8 <rr_check_done.part.0+0x50>)
   175ba:	4810      	ldr	r0, [pc, #64]	; (175fc <rr_check_done.part.0+0x54>)
   175bc:	2377      	movs	r3, #119	; 0x77
   175be:	f00a f8c5 	bl	2174c <assert_print>
   175c2:	4040      	eors	r0, r0
   175c4:	f380 8811 	msr	BASEPRI, r0
   175c8:	f04f 0003 	mov.w	r0, #3
   175cc:	df02      	svc	2
	return list->head;
   175ce:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   175d2:	b143      	cbz	r3, 175e6 <rr_check_done.part.0+0x3e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   175d4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
	return node->next;
   175d8:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   175da:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   175de:	4299      	cmp	r1, r3
	list->tail = node;
   175e0:	bf08      	it	eq
   175e2:	f8c4 20fc 	streq.w	r2, [r4, #252]	; 0xfc
		llcp_proc_ctx_release(ctx);
   175e6:	4628      	mov	r0, r5
}
   175e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_proc_ctx_release(ctx);
   175ec:	f7fd bb84 	b.w	14cf8 <llcp_proc_ctx_release>
   175f0:	460b      	mov	r3, r1
   175f2:	e7ee      	b.n	175d2 <rr_check_done.part.0+0x2a>
   175f4:	000291d4 	.word	0x000291d4
   175f8:	0002912c 	.word	0x0002912c
   175fc:	0002866c 	.word	0x0002866c

00017600 <rr_act_run>:
{
   17600:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   17602:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
	switch (ctx->proc) {
   17606:	7a2b      	ldrb	r3, [r5, #8]
   17608:	3b01      	subs	r3, #1
{
   1760a:	4604      	mov	r4, r0
	switch (ctx->proc) {
   1760c:	2b0b      	cmp	r3, #11
   1760e:	d828      	bhi.n	17662 <rr_act_run+0x62>
   17610:	e8df f003 	tbb	[pc, r3]
   17614:	06060606 	.word	0x06060606
   17618:	131d1818 	.word	0x131d1818
   1761c:	06220613 	.word	0x06220613
		llcp_rp_comm_run(conn, ctx, NULL);
   17620:	2200      	movs	r2, #0
   17622:	4629      	mov	r1, r5
   17624:	f7fe fc8e 	bl	15f44 <llcp_rp_comm_run>
	if (ctx->done) {
   17628:	69ab      	ldr	r3, [r5, #24]
   1762a:	b12b      	cbz	r3, 17638 <rr_act_run+0x38>
   1762c:	4629      	mov	r1, r5
   1762e:	4620      	mov	r0, r4
}
   17630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17634:	f7ff bfb8 	b.w	175a8 <rr_check_done.part.0>
   17638:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_cu_run(conn, ctx, NULL);
   1763a:	2200      	movs	r2, #0
   1763c:	4629      	mov	r1, r5
   1763e:	f7ff ff17 	bl	17470 <llcp_rp_cu_run>
		break;
   17642:	e7f1      	b.n	17628 <rr_act_run+0x28>
		llcp_rp_enc_run(conn, ctx, NULL);
   17644:	2200      	movs	r2, #0
   17646:	4629      	mov	r1, r5
   17648:	f7fd fa5c 	bl	14b04 <llcp_rp_enc_run>
		break;
   1764c:	e7ec      	b.n	17628 <rr_act_run+0x28>
		llcp_rp_pu_run(conn, ctx, NULL);
   1764e:	2200      	movs	r2, #0
   17650:	4629      	mov	r1, r5
   17652:	f7fc ff85 	bl	14560 <llcp_rp_pu_run>
		break;
   17656:	e7e7      	b.n	17628 <rr_act_run+0x28>
		llcp_rp_chmu_run(conn, ctx, NULL);
   17658:	2200      	movs	r2, #0
   1765a:	4629      	mov	r1, r5
   1765c:	f7ff ff5c 	bl	17518 <llcp_rp_chmu_run>
		break;
   17660:	e7e2      	b.n	17628 <rr_act_run+0x28>
		LL_ASSERT(0);
   17662:	4a07      	ldr	r2, [pc, #28]	; (17680 <rr_act_run+0x80>)
   17664:	4907      	ldr	r1, [pc, #28]	; (17684 <rr_act_run+0x84>)
   17666:	4808      	ldr	r0, [pc, #32]	; (17688 <rr_act_run+0x88>)
   17668:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   1766c:	f00a f86e 	bl	2174c <assert_print>
   17670:	4040      	eors	r0, r0
   17672:	f380 8811 	msr	BASEPRI, r0
   17676:	f04f 0003 	mov.w	r0, #3
   1767a:	df02      	svc	2
		break;
   1767c:	e7d4      	b.n	17628 <rr_act_run+0x28>
   1767e:	bf00      	nop
   17680:	000291d4 	.word	0x000291d4
   17684:	000286fc 	.word	0x000286fc
   17688:	0002866c 	.word	0x0002866c

0001768c <rr_st_active.constprop.0>:
	rr_act_unsupported(conn);
}

static void rr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
{
	switch (evt) {
   1768c:	2902      	cmp	r1, #2
static void rr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
   1768e:	b538      	push	{r3, r4, r5, lr}
   17690:	4605      	mov	r5, r0
	switch (evt) {
   17692:	d012      	beq.n	176ba <rr_st_active.constprop.0+0x2e>
   17694:	2904      	cmp	r1, #4
   17696:	460c      	mov	r4, r1
   17698:	d00a      	beq.n	176b0 <rr_st_active.constprop.0+0x24>
   1769a:	2901      	cmp	r1, #1
   1769c:	d000      	beq.n	176a0 <rr_st_active.constprop.0+0x14>
		break;
	default:
		/* Ignore other evts */
		break;
	}
}
   1769e:	bd38      	pop	{r3, r4, r5, pc}
		if (llcp_rr_peek(conn)) {
   176a0:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   176a4:	2b00      	cmp	r3, #0
   176a6:	d0fa      	beq.n	1769e <rr_st_active.constprop.0+0x12>
}
   176a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			rr_act_run(conn);
   176ac:	f7ff bfa8 	b.w	17600 <rr_act_run>
		rr_act_disconnect(conn);
   176b0:	f7ff ff64 	bl	1757c <rr_act_disconnect>
	conn->llcp.remote.state = state;
   176b4:	f885 4100 	strb.w	r4, [r5, #256]	; 0x100
}
   176b8:	bd38      	pop	{r3, r4, r5, pc}
   176ba:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	conn->llcp.remote.collision = collision;
   176be:	2300      	movs	r3, #0
   176c0:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
	LL_ASSERT(ctx != NULL);
   176c4:	b13c      	cbz	r4, 176d6 <rr_st_active.constprop.0+0x4a>
	conn->llcp.remote.prt_expire = 0U;
   176c6:	2300      	movs	r3, #0
	ctx->done = 1U;
   176c8:	2201      	movs	r2, #1
	conn->llcp.remote.prt_expire = 0U;
   176ca:	f8a5 3102 	strh.w	r3, [r5, #258]	; 0x102
	ctx->done = 1U;
   176ce:	61a2      	str	r2, [r4, #24]
	conn->llcp.remote.state = state;
   176d0:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
}
   176d4:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(ctx != NULL);
   176d6:	4a07      	ldr	r2, [pc, #28]	; (176f4 <rr_st_active.constprop.0+0x68>)
   176d8:	4907      	ldr	r1, [pc, #28]	; (176f8 <rr_st_active.constprop.0+0x6c>)
   176da:	4808      	ldr	r0, [pc, #32]	; (176fc <rr_st_active.constprop.0+0x70>)
   176dc:	f240 13ff 	movw	r3, #511	; 0x1ff
   176e0:	f00a f834 	bl	2174c <assert_print>
   176e4:	4040      	eors	r0, r0
   176e6:	f380 8811 	msr	BASEPRI, r0
   176ea:	f04f 0003 	mov.w	r0, #3
   176ee:	df02      	svc	2
   176f0:	e7e9      	b.n	176c6 <rr_st_active.constprop.0+0x3a>
   176f2:	bf00      	nop
   176f4:	000291d4 	.word	0x000291d4
   176f8:	00029118 	.word	0x00029118
   176fc:	0002866c 	.word	0x0002866c

00017700 <rr_act_unsupported>:
{
   17700:	b570      	push	{r4, r5, r6, lr}
   17702:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
   17706:	4604      	mov	r4, r0
	LL_ASSERT(ctx != NULL);
   17708:	b31d      	cbz	r5, 17752 <rr_act_unsupported+0x52>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   1770a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1770e:	2b01      	cmp	r3, #1
   17710:	d103      	bne.n	1771a <rr_act_unsupported+0x1a>
}
   17712:	2302      	movs	r3, #2
	conn->llcp.remote.state = state;
   17714:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   17718:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   1771a:	4629      	mov	r1, r5
   1771c:	4620      	mov	r0, r4
   1771e:	f7fd fb0d 	bl	14d3c <llcp_tx_alloc_peek>
   17722:	2800      	cmp	r0, #0
   17724:	d0f5      	beq.n	17712 <rr_act_unsupported+0x12>
	tx = llcp_tx_alloc(conn, ctx);
   17726:	4629      	mov	r1, r5
   17728:	4620      	mov	r0, r4
   1772a:	f7fd fb0f 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   1772e:	4606      	mov	r6, r0
   17730:	b1e8      	cbz	r0, 1776e <rr_act_unsupported+0x6e>
		llcp_pdu_encode_unknown_rsp(ctx, pdu);
   17732:	1d31      	adds	r1, r6, #4
   17734:	4628      	mov	r0, r5
   17736:	f7fe febd 	bl	164b4 <llcp_pdu_encode_unknown_rsp>
	ctx->tx_opcode = pdu->llctrl.opcode;
   1773a:	79f3      	ldrb	r3, [r6, #7]
   1773c:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   1773e:	4631      	mov	r1, r6
   17740:	4620      	mov	r0, r4
   17742:	f7fd fb21 	bl	14d88 <llcp_tx_enqueue>
		ctx->done = 1U;
   17746:	2301      	movs	r3, #1
   17748:	61ab      	str	r3, [r5, #24]
}
   1774a:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   1774c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   17750:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ctx != NULL);
   17752:	4a0e      	ldr	r2, [pc, #56]	; (1778c <rr_act_unsupported+0x8c>)
   17754:	490e      	ldr	r1, [pc, #56]	; (17790 <rr_act_unsupported+0x90>)
   17756:	480f      	ldr	r0, [pc, #60]	; (17794 <rr_act_unsupported+0x94>)
   17758:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   1775c:	f009 fff6 	bl	2174c <assert_print>
   17760:	4040      	eors	r0, r0
   17762:	f380 8811 	msr	BASEPRI, r0
   17766:	f04f 0003 	mov.w	r0, #3
   1776a:	df02      	svc	2
   1776c:	e7cd      	b.n	1770a <rr_act_unsupported+0xa>
	LL_ASSERT(tx);
   1776e:	4a07      	ldr	r2, [pc, #28]	; (1778c <rr_act_unsupported+0x8c>)
   17770:	4909      	ldr	r1, [pc, #36]	; (17798 <rr_act_unsupported+0x98>)
   17772:	4808      	ldr	r0, [pc, #32]	; (17794 <rr_act_unsupported+0x94>)
   17774:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   17778:	f009 ffe8 	bl	2174c <assert_print>
   1777c:	4040      	eors	r0, r0
   1777e:	f380 8811 	msr	BASEPRI, r0
   17782:	f04f 0003 	mov.w	r0, #3
   17786:	df02      	svc	2
   17788:	e7d3      	b.n	17732 <rr_act_unsupported+0x32>
   1778a:	bf00      	nop
   1778c:	000291d4 	.word	0x000291d4
   17790:	00029118 	.word	0x00029118
   17794:	0002866c 	.word	0x0002866c
   17798:	00028d90 	.word	0x00028d90

0001779c <rr_act_reject>:
{
   1779c:	b570      	push	{r4, r5, r6, lr}
   1779e:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
   177a2:	4604      	mov	r4, r0
	LL_ASSERT(ctx != NULL);
   177a4:	b3ad      	cbz	r5, 17812 <rr_act_reject+0x76>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   177a6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   177aa:	2b01      	cmp	r3, #1
   177ac:	d103      	bne.n	177b6 <rr_act_reject+0x1a>
}
   177ae:	2301      	movs	r3, #1
	conn->llcp.remote.state = state;
   177b0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   177b4:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   177b6:	4629      	mov	r1, r5
   177b8:	4620      	mov	r0, r4
   177ba:	f7fd fabf 	bl	14d3c <llcp_tx_alloc_peek>
   177be:	2800      	cmp	r0, #0
   177c0:	d0f5      	beq.n	177ae <rr_act_reject+0x12>
	tx = llcp_tx_alloc(conn, ctx);
   177c2:	4629      	mov	r1, r5
   177c4:	4620      	mov	r0, r4
   177c6:	f7fd fac1 	bl	14d4c <llcp_tx_alloc>
	LL_ASSERT(tx);
   177ca:	4606      	mov	r6, r0
   177cc:	2800      	cmp	r0, #0
   177ce:	d03b      	beq.n	17848 <rr_act_reject+0xac>
		ctx_local = llcp_lr_peek(conn);
   177d0:	4620      	mov	r0, r4
   177d2:	f7fe fc95 	bl	16100 <llcp_lr_peek>
		if (ctx_local->proc == ctx->proc ||
   177d6:	7a2a      	ldrb	r2, [r5, #8]
   177d8:	7a03      	ldrb	r3, [r0, #8]
   177da:	4293      	cmp	r3, r2
	pdu = (struct pdu_data *)tx->pdu;
   177dc:	f106 0004 	add.w	r0, r6, #4
		if (ctx_local->proc == ctx->proc ||
   177e0:	d025      	beq.n	1782e <rr_act_reject+0x92>
   177e2:	2b08      	cmp	r3, #8
   177e4:	d025      	beq.n	17832 <rr_act_reject+0x96>
			reject_code = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   177e6:	212a      	movs	r1, #42	; 0x2a
		if (conn->llcp.fex.valid && feature_ext_rej_ind(conn)) {
   177e8:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   177ec:	b11b      	cbz	r3, 177f6 <rr_act_reject+0x5a>
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_EXT_REJ_IND) != 0;
   177ee:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   177f2:	075b      	lsls	r3, r3, #29
   177f4:	d422      	bmi.n	1783c <rr_act_reject+0xa0>
			llcp_pdu_encode_reject_ind(pdu, reject_code);
   177f6:	f7fe ffb9 	bl	1676c <llcp_pdu_encode_reject_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
   177fa:	79f3      	ldrb	r3, [r6, #7]
   177fc:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   177fe:	4631      	mov	r1, r6
   17800:	4620      	mov	r0, r4
   17802:	f7fd fac1 	bl	14d88 <llcp_tx_enqueue>
		ctx->done = 1U;
   17806:	2301      	movs	r3, #1
   17808:	61ab      	str	r3, [r5, #24]
}
   1780a:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   1780c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   17810:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ctx != NULL);
   17812:	4a14      	ldr	r2, [pc, #80]	; (17864 <rr_act_reject+0xc8>)
   17814:	4914      	ldr	r1, [pc, #80]	; (17868 <rr_act_reject+0xcc>)
   17816:	4815      	ldr	r0, [pc, #84]	; (1786c <rr_act_reject+0xd0>)
   17818:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
   1781c:	f009 ff96 	bl	2174c <assert_print>
   17820:	4040      	eors	r0, r0
   17822:	f380 8811 	msr	BASEPRI, r0
   17826:	f04f 0003 	mov.w	r0, #3
   1782a:	df02      	svc	2
   1782c:	e7bb      	b.n	177a6 <rr_act_reject+0xa>
			reject_code = BT_HCI_ERR_LL_PROC_COLLISION;
   1782e:	2123      	movs	r1, #35	; 0x23
   17830:	e7da      	b.n	177e8 <rr_act_reject+0x4c>
   17832:	2a09      	cmp	r2, #9
   17834:	bf14      	ite	ne
   17836:	212a      	movne	r1, #42	; 0x2a
   17838:	2123      	moveq	r1, #35	; 0x23
   1783a:	e7d5      	b.n	177e8 <rr_act_reject+0x4c>
			llcp_pdu_encode_reject_ext_ind(pdu, conn->llcp.remote.reject_opcode,
   1783c:	460a      	mov	r2, r1
   1783e:	f894 1107 	ldrb.w	r1, [r4, #263]	; 0x107
   17842:	f7fe ff9f 	bl	16784 <llcp_pdu_encode_reject_ext_ind>
   17846:	e7d8      	b.n	177fa <rr_act_reject+0x5e>
	LL_ASSERT(tx);
   17848:	4a06      	ldr	r2, [pc, #24]	; (17864 <rr_act_reject+0xc8>)
   1784a:	4909      	ldr	r1, [pc, #36]	; (17870 <rr_act_reject+0xd4>)
   1784c:	4807      	ldr	r0, [pc, #28]	; (1786c <rr_act_reject+0xd0>)
   1784e:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   17852:	f009 ff7b 	bl	2174c <assert_print>
   17856:	4040      	eors	r0, r0
   17858:	f380 8811 	msr	BASEPRI, r0
   1785c:	f04f 0003 	mov.w	r0, #3
   17860:	df02      	svc	2
   17862:	e7b5      	b.n	177d0 <rr_act_reject+0x34>
   17864:	000291d4 	.word	0x000291d4
   17868:	00029118 	.word	0x00029118
   1786c:	0002866c 	.word	0x0002866c
   17870:	00028d90 	.word	0x00028d90

00017874 <rr_execute_fsm>:
		break;
	}
}

static void rr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
{
   17874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp.remote.state) {
   17876:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
{
   1787a:	4604      	mov	r4, r0
   1787c:	460e      	mov	r6, r1
   1787e:	4615      	mov	r5, r2
	switch (conn->llcp.remote.state) {
   17880:	2b05      	cmp	r3, #5
   17882:	f200 8094 	bhi.w	179ae <rr_execute_fsm+0x13a>
   17886:	e8df f003 	tbb	[pc, r3]
   1788a:	160e      	.short	0x160e
   1788c:	030b0307 	.word	0x030b0307
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   17890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		rr_st_active(conn, evt, param);
   17894:	f7ff befa 	b.w	1768c <rr_st_active.constprop.0>
}
   17898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rr_act_unsupported(conn);
   1789c:	f7ff bf30 	b.w	17700 <rr_act_unsupported>
	switch (evt) {
   178a0:	2903      	cmp	r1, #3
   178a2:	d00c      	beq.n	178be <rr_execute_fsm+0x4a>
}
   178a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
   178a6:	b171      	cbz	r1, 178c6 <rr_execute_fsm+0x52>
   178a8:	2904      	cmp	r1, #4
   178aa:	d1fb      	bne.n	178a4 <rr_execute_fsm+0x30>
		rr_act_disconnect(conn);
   178ac:	f7ff fe66 	bl	1757c <rr_act_disconnect>
	conn->llcp.remote.state = state;
   178b0:	f884 6100 	strb.w	r6, [r4, #256]	; 0x100
}
   178b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   178b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rr_act_reject(conn);
   178ba:	f7ff bf6f 	b.w	1779c <rr_act_reject>
	conn->llcp.remote.state = state;
   178be:	2300      	movs	r3, #0
   178c0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
}
   178c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   178c6:	f8d0 70f8 	ldr.w	r7, [r0, #248]	; 0xf8
		if (ctx) {
   178ca:	2f00      	cmp	r7, #0
   178cc:	d0ea      	beq.n	178a4 <rr_execute_fsm+0x30>
	return conn->llcp.remote.incompat;
   178ce:	7a3b      	ldrb	r3, [r7, #8]
   178d0:	f890 c106 	ldrb.w	ip, [r0, #262]	; 0x106
			const bool periph = !!(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
   178d4:	f890 e039 	ldrb.w	lr, [r0, #57]	; 0x39
	switch (ctx->proc) {
   178d8:	2b10      	cmp	r3, #16
   178da:	d811      	bhi.n	17900 <rr_execute_fsm+0x8c>
   178dc:	4a3b      	ldr	r2, [pc, #236]	; (179cc <rr_execute_fsm+0x158>)
   178de:	2101      	movs	r1, #1
   178e0:	fa01 f003 	lsl.w	r0, r1, r3
   178e4:	4002      	ands	r2, r0
   178e6:	b342      	cbz	r2, 1793a <rr_execute_fsm+0xc6>
			if (ctx->proc == PROC_TERMINATE) {
   178e8:	2b0a      	cmp	r3, #10
   178ea:	d01f      	beq.n	1792c <rr_execute_fsm+0xb8>
			} else if (ctx->proc == PROC_UNKNOWN) {
   178ec:	b1b3      	cbz	r3, 1791c <rr_execute_fsm+0xa8>
	conn->llcp.remote.collision = collision;
   178ee:	f884 6105 	strb.w	r6, [r4, #261]	; 0x105
				rr_act_run(conn);
   178f2:	4620      	mov	r0, r4
   178f4:	f7ff fe84 	bl	17600 <rr_act_run>
	conn->llcp.remote.state = state;
   178f8:	2303      	movs	r3, #3
   178fa:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   178fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   17900:	4a33      	ldr	r2, [pc, #204]	; (179d0 <rr_execute_fsm+0x15c>)
   17902:	4934      	ldr	r1, [pc, #208]	; (179d4 <rr_execute_fsm+0x160>)
   17904:	4834      	ldr	r0, [pc, #208]	; (179d8 <rr_execute_fsm+0x164>)
   17906:	236a      	movs	r3, #106	; 0x6a
   17908:	f009 ff20 	bl	2174c <assert_print>
   1790c:	4040      	eors	r0, r0
   1790e:	f380 8811 	msr	BASEPRI, r0
   17912:	f04f 0003 	mov.w	r0, #3
   17916:	df02      	svc	2
			if (ctx->proc == PROC_TERMINATE) {
   17918:	7a3b      	ldrb	r3, [r7, #8]
   1791a:	e7e5      	b.n	178e8 <rr_execute_fsm+0x74>
				ctx->unknown_response.type = pdu->llctrl.opcode;
   1791c:	7feb      	ldrb	r3, [r5, #31]
   1791e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				rr_act_unsupported(conn);
   17922:	4620      	mov	r0, r4
}
   17924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				rr_act_unsupported(conn);
   17928:	f7ff beea 	b.w	17700 <rr_act_unsupported>
				rr_act_run(conn);
   1792c:	4620      	mov	r0, r4
   1792e:	f7ff fe67 	bl	17600 <rr_act_run>
	conn->llcp.remote.state = state;
   17932:	2305      	movs	r3, #5
   17934:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   17938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (ctx->proc) {
   1793a:	f410 6f38 	tst.w	r0, #2944	; 0xb80
   1793e:	d0df      	beq.n	17900 <rr_execute_fsm+0x8c>
			if (ctx->proc == PROC_TERMINATE) {
   17940:	2b0a      	cmp	r3, #10
   17942:	d0f3      	beq.n	1792c <rr_execute_fsm+0xb8>
			} else if (ctx->proc == PROC_UNKNOWN) {
   17944:	2b00      	cmp	r3, #0
   17946:	d0e9      	beq.n	1791c <rr_execute_fsm+0xa8>
			} else if (!with_instant || incompat == INCOMPAT_NO_COLLISION) {
   17948:	f1bc 0f00 	cmp.w	ip, #0
   1794c:	d101      	bne.n	17952 <rr_execute_fsm+0xde>
   1794e:	460e      	mov	r6, r1
   17950:	e7cd      	b.n	178ee <rr_execute_fsm+0x7a>
			} else if (periph && incompat == INCOMPAT_RESOLVABLE) {
   17952:	f01e 0f80 	tst.w	lr, #128	; 0x80
   17956:	d112      	bne.n	1797e <rr_execute_fsm+0x10a>
			} else if (central && incompat == INCOMPAT_RESOLVABLE) {
   17958:	f1bc 0f01 	cmp.w	ip, #1
   1795c:	d019      	beq.n	17992 <rr_execute_fsm+0x11e>
			} else if (incompat == INCOMPAT_RESERVED) {
   1795e:	f1bc 0f02 	cmp.w	ip, #2
   17962:	d19f      	bne.n	178a4 <rr_execute_fsm+0x30>
				ctx_local = llcp_lr_peek(conn);
   17964:	4620      	mov	r0, r4
   17966:	f7fe fbcb 	bl	16100 <llcp_lr_peek>
				if (ctx_local->proc == ctx->proc ||
   1796a:	7a3b      	ldrb	r3, [r7, #8]
   1796c:	7a02      	ldrb	r2, [r0, #8]
   1796e:	429a      	cmp	r2, r3
   17970:	d019      	beq.n	179a6 <rr_execute_fsm+0x132>
   17972:	2a08      	cmp	r2, #8
   17974:	d015      	beq.n	179a2 <rr_execute_fsm+0x12e>
					conn->llcp_terminate.reason_final =
   17976:	232a      	movs	r3, #42	; 0x2a
   17978:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   1797c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			} else if (periph && incompat == INCOMPAT_RESOLVABLE) {
   1797e:	f1bc 0f01 	cmp.w	ip, #1
   17982:	d1ec      	bne.n	1795e <rr_execute_fsm+0xea>
				rr_act_run(conn);
   17984:	4620      	mov	r0, r4
   17986:	f7ff fe3b 	bl	17600 <rr_act_run>
	conn->llcp.remote.state = state;
   1798a:	2303      	movs	r3, #3
   1798c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   17990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				conn->llcp.remote.reject_opcode = pdu->llctrl.opcode;
   17992:	7feb      	ldrb	r3, [r5, #31]
   17994:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
				rr_act_reject(conn);
   17998:	4620      	mov	r0, r4
}
   1799a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				rr_act_reject(conn);
   1799e:	f7ff befd 	b.w	1779c <rr_act_reject>
				    (ctx_local->proc == PROC_CONN_UPDATE &&
   179a2:	2b09      	cmp	r3, #9
   179a4:	d1e7      	bne.n	17976 <rr_execute_fsm+0x102>
					conn->llcp_terminate.reason_final =
   179a6:	2323      	movs	r3, #35	; 0x23
   179a8:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   179ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   179ae:	4a08      	ldr	r2, [pc, #32]	; (179d0 <rr_execute_fsm+0x15c>)
   179b0:	4908      	ldr	r1, [pc, #32]	; (179d4 <rr_execute_fsm+0x160>)
   179b2:	4809      	ldr	r0, [pc, #36]	; (179d8 <rr_execute_fsm+0x164>)
   179b4:	f240 23db 	movw	r3, #731	; 0x2db
   179b8:	f009 fec8 	bl	2174c <assert_print>
   179bc:	4040      	eors	r0, r0
   179be:	f380 8811 	msr	BASEPRI, r0
   179c2:	f04f 0003 	mov.w	r0, #3
   179c6:	df02      	svc	2
}
   179c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179ca:	bf00      	nop
   179cc:	0001f47f 	.word	0x0001f47f
   179d0:	000291d4 	.word	0x000291d4
   179d4:	000286fc 	.word	0x000286fc
   179d8:	0002866c 	.word	0x0002866c

000179dc <llcp_rr_set_incompat>:
	conn->llcp.remote.incompat = incompat;
   179dc:	f880 1106 	strb.w	r1, [r0, #262]	; 0x106
}
   179e0:	4770      	bx	lr
   179e2:	bf00      	nop

000179e4 <llcp_rr_set_paused_cmd>:
}
   179e4:	4770      	bx	lr
   179e6:	bf00      	nop

000179e8 <llcp_rr_get_paused_cmd>:
}
   179e8:	2000      	movs	r0, #0
   179ea:	4770      	bx	lr

000179ec <llcp_rr_get_collision>:
	return conn->llcp.remote.collision;
   179ec:	f890 0105 	ldrb.w	r0, [r0, #261]	; 0x105
}
   179f0:	3800      	subs	r0, #0
   179f2:	bf18      	it	ne
   179f4:	2001      	movne	r0, #1
   179f6:	4770      	bx	lr

000179f8 <llcp_rr_peek>:
}
   179f8:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
   179fc:	4770      	bx	lr
   179fe:	bf00      	nop

00017a00 <llcp_rr_ispaused>:
	return conn->llcp.remote.pause == 1U;
   17a00:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
}
   17a04:	f1a0 0001 	sub.w	r0, r0, #1
   17a08:	fab0 f080 	clz	r0, r0
   17a0c:	0940      	lsrs	r0, r0, #5
   17a0e:	4770      	bx	lr

00017a10 <llcp_rr_prt_restart>:
	conn->llcp.remote.prt_expire = conn->llcp.prt_reload;
   17a10:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
   17a14:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   17a18:	4770      	bx	lr
   17a1a:	bf00      	nop

00017a1c <llcp_rr_prt_stop>:
	conn->llcp.remote.prt_expire = 0U;
   17a1c:	2300      	movs	r3, #0
   17a1e:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   17a22:	4770      	bx	lr

00017a24 <llcp_rr_rx>:
{
   17a24:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   17a26:	7a0b      	ldrb	r3, [r1, #8]
{
   17a28:	460c      	mov	r4, r1
   17a2a:	4605      	mov	r5, r0
	switch (ctx->proc) {
   17a2c:	2b0c      	cmp	r3, #12
   17a2e:	d824      	bhi.n	17a7a <llcp_rr_rx+0x56>
   17a30:	e8df f003 	tbb	[pc, r3]
   17a34:	0707070a 	.word	0x0707070a
   17a38:	1b171707 	.word	0x1b171707
   17a3c:	1f071313 	.word	0x1f071313
   17a40:	07          	.byte	0x07
   17a41:	00          	.byte	0x00
		llcp_rp_comm_rx(conn, ctx, rx);
   17a42:	4621      	mov	r1, r4
   17a44:	f7fe fa70 	bl	15f28 <llcp_rp_comm_rx>
	if (ctx->done) {
   17a48:	69a3      	ldr	r3, [r4, #24]
   17a4a:	b12b      	cbz	r3, 17a58 <llcp_rr_rx+0x34>
   17a4c:	4621      	mov	r1, r4
   17a4e:	4628      	mov	r0, r5
}
   17a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17a54:	f7ff bda8 	b.w	175a8 <rr_check_done.part.0>
   17a58:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_cu_rx(conn, ctx, rx);
   17a5a:	4621      	mov	r1, r4
   17a5c:	f7ff fcde 	bl	1741c <llcp_rp_cu_rx>
		break;
   17a60:	e7f2      	b.n	17a48 <llcp_rr_rx+0x24>
		llcp_rp_enc_rx(conn, ctx, rx);
   17a62:	4621      	mov	r1, r4
   17a64:	f7fc fffe 	bl	14a64 <llcp_rp_enc_rx>
		break;
   17a68:	e7ee      	b.n	17a48 <llcp_rr_rx+0x24>
		llcp_rp_pu_rx(conn, ctx, rx);
   17a6a:	4621      	mov	r1, r4
   17a6c:	f7fc fd56 	bl	1451c <llcp_rp_pu_rx>
		break;
   17a70:	e7ea      	b.n	17a48 <llcp_rr_rx+0x24>
		llcp_rp_chmu_rx(conn, ctx, rx);
   17a72:	4621      	mov	r1, r4
   17a74:	f7ff fd08 	bl	17488 <llcp_rp_chmu_rx>
		break;
   17a78:	e7e6      	b.n	17a48 <llcp_rr_rx+0x24>
		LL_ASSERT(0);
   17a7a:	4a07      	ldr	r2, [pc, #28]	; (17a98 <llcp_rr_rx+0x74>)
   17a7c:	4907      	ldr	r1, [pc, #28]	; (17a9c <llcp_rr_rx+0x78>)
   17a7e:	4808      	ldr	r0, [pc, #32]	; (17aa0 <llcp_rr_rx+0x7c>)
   17a80:	f240 1321 	movw	r3, #289	; 0x121
   17a84:	f009 fe62 	bl	2174c <assert_print>
   17a88:	4040      	eors	r0, r0
   17a8a:	f380 8811 	msr	BASEPRI, r0
   17a8e:	f04f 0003 	mov.w	r0, #3
   17a92:	df02      	svc	2
		break;
   17a94:	e7d8      	b.n	17a48 <llcp_rr_rx+0x24>
   17a96:	bf00      	nop
   17a98:	000291d4 	.word	0x000291d4
   17a9c:	000286fc 	.word	0x000286fc
   17aa0:	0002866c 	.word	0x0002866c

00017aa4 <llcp_rr_tx_ack>:
{
   17aa4:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   17aa6:	7a0b      	ldrb	r3, [r1, #8]
   17aa8:	2b07      	cmp	r3, #7
{
   17aaa:	460c      	mov	r4, r1
   17aac:	4605      	mov	r5, r0
	switch (ctx->proc) {
   17aae:	d00c      	beq.n	17aca <llcp_rr_tx_ack+0x26>
   17ab0:	2b0c      	cmp	r3, #12
   17ab2:	d101      	bne.n	17ab8 <llcp_rr_tx_ack+0x14>
		llcp_rp_comm_tx_ack(conn, ctx, tx);
   17ab4:	f7fe fa3e 	bl	15f34 <llcp_rp_comm_tx_ack>
	if (ctx->done) {
   17ab8:	69a3      	ldr	r3, [r4, #24]
   17aba:	b12b      	cbz	r3, 17ac8 <llcp_rr_tx_ack+0x24>
   17abc:	4621      	mov	r1, r4
   17abe:	4628      	mov	r0, r5
}
   17ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17ac4:	f7ff bd70 	b.w	175a8 <rr_check_done.part.0>
   17ac8:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_pu_tx_ack(conn, ctx, tx);
   17aca:	f7fc fd4d 	bl	14568 <llcp_rp_pu_tx_ack>
		break;
   17ace:	e7f3      	b.n	17ab8 <llcp_rr_tx_ack+0x14>

00017ad0 <llcp_rr_tx_ntf>:
{
   17ad0:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   17ad2:	7a0b      	ldrb	r3, [r1, #8]
   17ad4:	2b07      	cmp	r3, #7
{
   17ad6:	460c      	mov	r4, r1
   17ad8:	4605      	mov	r5, r0
	switch (ctx->proc) {
   17ada:	d008      	beq.n	17aee <llcp_rr_tx_ntf+0x1e>
	if (ctx->done) {
   17adc:	69a3      	ldr	r3, [r4, #24]
   17ade:	b12b      	cbz	r3, 17aec <llcp_rr_tx_ntf+0x1c>
   17ae0:	4621      	mov	r1, r4
   17ae2:	4628      	mov	r0, r5
}
   17ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17ae8:	f7ff bd5e 	b.w	175a8 <rr_check_done.part.0>
   17aec:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_pu_tx_ntf(conn, ctx);
   17aee:	f7fc fd3f 	bl	14570 <llcp_rp_pu_tx_ntf>
		break;
   17af2:	e7f3      	b.n	17adc <llcp_rr_tx_ntf+0xc>

00017af4 <llcp_rr_init>:
	conn->llcp.remote.state = state;
   17af4:	2204      	movs	r2, #4

void llcp_rr_init(struct ll_conn *conn)
{
	rr_set_state(conn, RR_STATE_DISCONNECT);
	conn->llcp.remote.prt_expire = 0U;
   17af6:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   17af8:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
	conn->llcp.remote.prt_expire = 0U;
   17afc:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   17b00:	4770      	bx	lr
   17b02:	bf00      	nop

00017b04 <llcp_rr_run>:
	rr_execute_fsm(conn, RR_EVT_PREPARE, rx);
}

void llcp_rr_run(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_RUN, NULL);
   17b04:	2200      	movs	r2, #0
   17b06:	2101      	movs	r1, #1
   17b08:	f7ff beb4 	b.w	17874 <rr_execute_fsm>

00017b0c <llcp_rr_complete>:
}

void llcp_rr_complete(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_COMPLETE, NULL);
   17b0c:	2200      	movs	r2, #0
   17b0e:	2102      	movs	r1, #2
   17b10:	f7ff beb0 	b.w	17874 <rr_execute_fsm>

00017b14 <llcp_rr_connect>:
}

void llcp_rr_connect(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_CONNECT, NULL);
   17b14:	2200      	movs	r2, #0
   17b16:	2103      	movs	r1, #3
   17b18:	f7ff beac 	b.w	17874 <rr_execute_fsm>

00017b1c <llcp_rr_disconnect>:
}

void llcp_rr_disconnect(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_DISCONNECT, NULL);
   17b1c:	2200      	movs	r2, #0
   17b1e:	2104      	movs	r1, #4
   17b20:	f7ff bea8 	b.w	17874 <rr_execute_fsm>

00017b24 <llcp_rr_new>:
	[PDU_DATA_LLCTRL_TYPE_CLOCK_ACCURACY_REQ] = { PROC_SCA_UPDATE, ACCEPT_ROLE_BOTH },
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
};

void llcp_rr_new(struct ll_conn *conn, struct node_rx_pdu *rx, bool valid_pdu)
{
   17b24:	b570      	push	{r4, r5, r6, lr}
   17b26:	4604      	mov	r4, r0
   17b28:	460e      	mov	r6, r1
	uint8_t proc = PROC_UNKNOWN;

	pdu = (struct pdu_data *)rx->pdu;

	/* Is this a valid opcode */
	if (valid_pdu && pdu->llctrl.opcode < ARRAY_SIZE(new_proc_lut)) {
   17b2a:	b112      	cbz	r2, 17b32 <llcp_rr_new+0xe>
   17b2c:	7fcb      	ldrb	r3, [r1, #31]
   17b2e:	2b1b      	cmp	r3, #27
   17b30:	d923      	bls.n	17b7a <llcp_rr_new+0x56>
	uint8_t proc = PROC_UNKNOWN;
   17b32:	2500      	movs	r5, #0

	if (proc == PROC_TERMINATE) {
		rr_abort(conn);
	}

	ctx = llcp_create_remote_procedure(proc);
   17b34:	4628      	mov	r0, r5
   17b36:	f7fd f995 	bl	14e64 <llcp_create_remote_procedure>
	if (!ctx) {
   17b3a:	4605      	mov	r5, r0
   17b3c:	b1e0      	cbz	r0, 17b78 <llcp_rr_new+0x54>
	parent->next = child;
   17b3e:	2300      	movs	r3, #0
   17b40:	6003      	str	r3, [r0, #0]
	return list->tail;
   17b42:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
   17b46:	2b00      	cmp	r3, #0
   17b48:	d040      	beq.n	17bcc <llcp_rr_new+0xa8>
	parent->next = child;
   17b4a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   17b4c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	rr_execute_fsm(conn, RR_EVT_PREPARE, rx);
   17b50:	4632      	mov	r2, r6
   17b52:	2100      	movs	r1, #0
   17b54:	4620      	mov	r0, r4
   17b56:	f7ff fe8d 	bl	17874 <rr_execute_fsm>
	if (ctx->done) {
   17b5a:	69ab      	ldr	r3, [r5, #24]
   17b5c:	b11b      	cbz	r3, 17b66 <llcp_rr_new+0x42>
   17b5e:	4629      	mov	r1, r5
   17b60:	4620      	mov	r0, r4
   17b62:	f7ff fd21 	bl	175a8 <rr_check_done.part.0>
	return list->head;
   17b66:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8

	rr_check_done(conn, ctx);

	/* Handle PDU */
	ctx = llcp_rr_peek(conn);
	if (ctx) {
   17b6a:	b129      	cbz	r1, 17b78 <llcp_rr_new+0x54>
		llcp_rr_rx(conn, ctx, rx);
   17b6c:	4632      	mov	r2, r6
   17b6e:	4620      	mov	r0, r4
	}
}
   17b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_rx(conn, ctx, rx);
   17b74:	f7ff bf56 	b.w	17a24 <llcp_rr_rx>
}
   17b78:	bd70      	pop	{r4, r5, r6, pc}
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   17b7a:	491b      	ldr	r1, [pc, #108]	; (17be8 <llcp_rr_new+0xc4>)
   17b7c:	b218      	sxth	r0, r3
   17b7e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		uint8_t role_mask  = (1 << conn->lll.role);
   17b82:	2501      	movs	r5, #1
		if (pr.accept & role_mask) {
   17b84:	785a      	ldrb	r2, [r3, #1]
		uint8_t role_mask  = (1 << conn->lll.role);
   17b86:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   17b8a:	09db      	lsrs	r3, r3, #7
   17b8c:	409d      	lsls	r5, r3
		if (pr.accept & role_mask) {
   17b8e:	4015      	ands	r5, r2
   17b90:	d0d0      	beq.n	17b34 <llcp_rr_new+0x10>
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   17b92:	f811 5010 	ldrb.w	r5, [r1, r0, lsl #1]
	if (proc == PROC_TERMINATE) {
   17b96:	2d0a      	cmp	r5, #10
   17b98:	d1cc      	bne.n	17b34 <llcp_rr_new+0x10>
   17b9a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   17b9e:	b1d0      	cbz	r0, 17bd6 <llcp_rr_new+0xb2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17ba0:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
   17ba4:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   17ba6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17baa:	4290      	cmp	r0, r2
   17bac:	d00b      	beq.n	17bc6 <llcp_rr_new+0xa2>
	struct proc_ctx *ctx;

	/* Flush all pending procedures */
	ctx = rr_dequeue(conn);
	while (ctx) {
		llcp_proc_ctx_release(ctx);
   17bae:	f7fd f8a3 	bl	14cf8 <llcp_proc_ctx_release>
	return list->head;
   17bb2:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   17bb6:	b170      	cbz	r0, 17bd6 <llcp_rr_new+0xb2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17bb8:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
   17bbc:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   17bbe:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17bc2:	4290      	cmp	r0, r2
   17bc4:	d1f3      	bne.n	17bae <llcp_rr_new+0x8a>
	list->tail = node;
   17bc6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
}
   17bca:	e7f0      	b.n	17bae <llcp_rr_new+0x8a>
	list->head = node;
   17bcc:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
   17bd0:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
}
   17bd4:	e7bc      	b.n	17b50 <llcp_rr_new+0x2c>
	conn->llcp.remote.prt_expire = 0U;
   17bd6:	2300      	movs	r3, #0
   17bd8:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
	conn->llcp.remote.collision = collision;
   17bdc:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	conn->llcp.remote.state = state;
   17be0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	}

	llcp_rr_prt_stop(conn);
	rr_set_collision(conn, 0U);
	rr_set_state(conn, RR_STATE_IDLE);
}
   17be4:	e7a6      	b.n	17b34 <llcp_rr_new+0x10>
   17be6:	bf00      	nop
   17be8:	0002921c 	.word	0x0002921c

00017bec <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   17bec:	b510      	push	{r4, lr}
   17bee:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   17bf0:	b930      	cbnz	r0, 17c00 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   17bf2:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   17bf6:	f36f 0300 	bfc	r3, #0, #1
   17bfa:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
   17bfe:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   17c00:	4a09      	ldr	r2, [pc, #36]	; (17c28 <ticker_update_latency_cancel_op_cb+0x3c>)
   17c02:	490a      	ldr	r1, [pc, #40]	; (17c2c <ticker_update_latency_cancel_op_cb+0x40>)
   17c04:	480a      	ldr	r0, [pc, #40]	; (17c30 <ticker_update_latency_cancel_op_cb+0x44>)
   17c06:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   17c0a:	f009 fd9f 	bl	2174c <assert_print>
   17c0e:	4040      	eors	r0, r0
   17c10:	f380 8811 	msr	BASEPRI, r0
   17c14:	f04f 0003 	mov.w	r0, #3
   17c18:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   17c1a:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   17c1e:	f36f 0300 	bfc	r3, #0, #1
   17c22:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
   17c26:	bd10      	pop	{r4, pc}
   17c28:	00029254 	.word	0x00029254
   17c2c:	0002929c 	.word	0x0002929c
   17c30:	0002866c 	.word	0x0002866c

00017c34 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17c34:	b900      	cbnz	r0, 17c38 <ticker_op_cb+0x4>
   17c36:	4770      	bx	lr
{
   17c38:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17c3a:	4a07      	ldr	r2, [pc, #28]	; (17c58 <ticker_op_cb+0x24>)
   17c3c:	4907      	ldr	r1, [pc, #28]	; (17c5c <ticker_op_cb+0x28>)
   17c3e:	4808      	ldr	r0, [pc, #32]	; (17c60 <ticker_op_cb+0x2c>)
   17c40:	f44f 732c 	mov.w	r3, #688	; 0x2b0
   17c44:	f009 fd82 	bl	2174c <assert_print>
   17c48:	4040      	eors	r0, r0
   17c4a:	f380 8811 	msr	BASEPRI, r0
   17c4e:	f04f 0003 	mov.w	r0, #3
   17c52:	df02      	svc	2
}
   17c54:	bd08      	pop	{r3, pc}
   17c56:	bf00      	nop
   17c58:	00029254 	.word	0x00029254
   17c5c:	00028da4 	.word	0x00028da4
   17c60:	0002866c 	.word	0x0002866c

00017c64 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17c64:	2801      	cmp	r0, #1
   17c66:	d000      	beq.n	17c6a <ticker_op_stop_adv_cb+0x6>
   17c68:	4770      	bx	lr
{
   17c6a:	b510      	push	{r4, lr}
   17c6c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17c6e:	f7f9 fd6b 	bl	11748 <ull_disable_mark_get>
   17c72:	4284      	cmp	r4, r0
   17c74:	d00c      	beq.n	17c90 <ticker_op_stop_adv_cb+0x2c>
   17c76:	4a07      	ldr	r2, [pc, #28]	; (17c94 <ticker_op_stop_adv_cb+0x30>)
   17c78:	4907      	ldr	r1, [pc, #28]	; (17c98 <ticker_op_stop_adv_cb+0x34>)
   17c7a:	4808      	ldr	r0, [pc, #32]	; (17c9c <ticker_op_stop_adv_cb+0x38>)
   17c7c:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   17c80:	f009 fd64 	bl	2174c <assert_print>
   17c84:	4040      	eors	r0, r0
   17c86:	f380 8811 	msr	BASEPRI, r0
   17c8a:	f04f 0003 	mov.w	r0, #3
   17c8e:	df02      	svc	2
}
   17c90:	bd10      	pop	{r4, pc}
   17c92:	bf00      	nop
   17c94:	00029254 	.word	0x00029254
   17c98:	000292b0 	.word	0x000292b0
   17c9c:	0002866c 	.word	0x0002866c

00017ca0 <ull_periph_ticker_cb>:
{
   17ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ca4:	9c07      	ldr	r4, [sp, #28]
   17ca6:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   17caa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   17cac:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   17cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17cb2:	4299      	cmp	r1, r3
   17cb4:	d026      	beq.n	17d04 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17cb6:	4606      	mov	r6, r0
   17cb8:	4617      	mov	r7, r2
   17cba:	4601      	mov	r1, r0
   17cbc:	462a      	mov	r2, r5
   17cbe:	4620      	mov	r0, r4
   17cc0:	f7fb fb44 	bl	1334c <ull_conn_llcp>
		if (ret) {
   17cc4:	b9f0      	cbnz	r0, 17d04 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   17cc6:	7823      	ldrb	r3, [r4, #0]
   17cc8:	3301      	adds	r3, #1
   17cca:	b2db      	uxtb	r3, r3
   17ccc:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   17cce:	b34b      	cbz	r3, 17d24 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   17cd0:	491b      	ldr	r1, [pc, #108]	; (17d40 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   17cd2:	4b1c      	ldr	r3, [pc, #112]	; (17d44 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   17cd4:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   17cd6:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17cda:	2200      	movs	r2, #0
	p.param = &conn->lll;
   17cdc:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   17cde:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   17ce2:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   17ce6:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17ce8:	2001      	movs	r0, #1
   17cea:	4611      	mov	r1, r2
   17cec:	f7f6 fa5c 	bl	e1a8 <mayfly_enqueue>
	LL_ASSERT(!err);
   17cf0:	b950      	cbnz	r0, 17d08 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   17cf2:	20ff      	movs	r0, #255	; 0xff
   17cf4:	f7fb fb5c 	bl	133b0 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17cf8:	4620      	mov	r0, r4
   17cfa:	21ff      	movs	r1, #255	; 0xff
}
   17cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17d00:	f7fb bc14 	b.w	1352c <ull_conn_tx_lll_enqueue>
}
   17d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   17d08:	4a0f      	ldr	r2, [pc, #60]	; (17d48 <ull_periph_ticker_cb+0xa8>)
   17d0a:	4910      	ldr	r1, [pc, #64]	; (17d4c <ull_periph_ticker_cb+0xac>)
   17d0c:	4810      	ldr	r0, [pc, #64]	; (17d50 <ull_periph_ticker_cb+0xb0>)
   17d0e:	f44f 7310 	mov.w	r3, #576	; 0x240
   17d12:	f009 fd1b 	bl	2174c <assert_print>
   17d16:	4040      	eors	r0, r0
   17d18:	f380 8811 	msr	BASEPRI, r0
   17d1c:	f04f 0003 	mov.w	r0, #3
   17d20:	df02      	svc	2
   17d22:	e7e6      	b.n	17cf2 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   17d24:	4a08      	ldr	r2, [pc, #32]	; (17d48 <ull_periph_ticker_cb+0xa8>)
   17d26:	490b      	ldr	r1, [pc, #44]	; (17d54 <ull_periph_ticker_cb+0xb4>)
   17d28:	4809      	ldr	r0, [pc, #36]	; (17d50 <ull_periph_ticker_cb+0xb0>)
   17d2a:	f240 2333 	movw	r3, #563	; 0x233
   17d2e:	f009 fd0d 	bl	2174c <assert_print>
   17d32:	4040      	eors	r0, r0
   17d34:	f380 8811 	msr	BASEPRI, r0
   17d38:	f04f 0003 	mov.w	r0, #3
   17d3c:	df02      	svc	2
   17d3e:	e7c7      	b.n	17cd0 <ull_periph_ticker_cb+0x30>
   17d40:	20003394 	.word	0x20003394
   17d44:	200006a4 	.word	0x200006a4
   17d48:	00029254 	.word	0x00029254
   17d4c:	00028a38 	.word	0x00028a38
   17d50:	0002866c 	.word	0x0002866c
   17d54:	00028cd0 	.word	0x00028cd0

00017d58 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   17d58:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   17d5a:	b123      	cbz	r3, 17d66 <ull_periph_latency_cancel+0xe>
   17d5c:	f890 216c 	ldrb.w	r2, [r0, #364]	; 0x16c
   17d60:	f012 0301 	ands.w	r3, r2, #1
   17d64:	d000      	beq.n	17d68 <ull_periph_latency_cancel+0x10>
   17d66:	4770      	bx	lr
{
   17d68:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   17d6a:	f042 0201 	orr.w	r2, r2, #1
{
   17d6e:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   17d70:	4c11      	ldr	r4, [pc, #68]	; (17db8 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   17d72:	f880 216c 	strb.w	r2, [r0, #364]	; 0x16c
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   17d76:	3103      	adds	r1, #3
   17d78:	2201      	movs	r2, #1
   17d7a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   17d7e:	9006      	str	r0, [sp, #24]
   17d80:	b2ca      	uxtb	r2, r1
   17d82:	e9cd 3404 	strd	r3, r4, [sp, #16]
   17d86:	e9cd 3300 	strd	r3, r3, [sp]
   17d8a:	2103      	movs	r1, #3
   17d8c:	4618      	mov	r0, r3
   17d8e:	f7f7 fac1 	bl	f314 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17d92:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   17d96:	d00c      	beq.n	17db2 <ull_periph_latency_cancel+0x5a>
   17d98:	4a08      	ldr	r2, [pc, #32]	; (17dbc <ull_periph_latency_cancel+0x64>)
   17d9a:	4909      	ldr	r1, [pc, #36]	; (17dc0 <ull_periph_latency_cancel+0x68>)
   17d9c:	4809      	ldr	r0, [pc, #36]	; (17dc4 <ull_periph_latency_cancel+0x6c>)
   17d9e:	f240 13f9 	movw	r3, #505	; 0x1f9
   17da2:	f009 fcd3 	bl	2174c <assert_print>
   17da6:	4040      	eors	r0, r0
   17da8:	f380 8811 	msr	BASEPRI, r0
   17dac:	f04f 0003 	mov.w	r0, #3
   17db0:	df02      	svc	2
}
   17db2:	b008      	add	sp, #32
   17db4:	bd10      	pop	{r4, pc}
   17db6:	bf00      	nop
   17db8:	00017bed 	.word	0x00017bed
   17dbc:	00029254 	.word	0x00029254
   17dc0:	00028e10 	.word	0x00028e10
   17dc4:	0002866c 	.word	0x0002866c

00017dc8 <ll_start_enc_req_send>:
{
   17dc8:	b538      	push	{r3, r4, r5, lr}
   17dca:	460c      	mov	r4, r1
   17dcc:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   17dce:	f7fa ffe3 	bl	12d98 <ll_connected_get>
	if (!conn) {
   17dd2:	b148      	cbz	r0, 17de8 <ll_start_enc_req_send+0x20>
	if (error_code) {
   17dd4:	b11c      	cbz	r4, 17dde <ll_start_enc_req_send+0x16>
}
   17dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return ull_cp_ltk_req_neq_reply(conn);
   17dda:	f7fd ba09 	b.w	151f0 <ull_cp_ltk_req_neq_reply>
		return ull_cp_ltk_req_reply(conn, ltk);
   17dde:	4629      	mov	r1, r5
}
   17de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return ull_cp_ltk_req_reply(conn, ltk);
   17de4:	f7fd b9e4 	b.w	151b0 <ull_cp_ltk_req_reply>
}
   17de8:	2002      	movs	r0, #2
   17dea:	bd38      	pop	{r3, r4, r5, pc}

00017dec <ll_set_min_used_chans>:

#if !defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
uint8_t ll_set_min_used_chans(uint16_t handle, uint8_t const phys,
			      uint8_t const min_used_chans)
{
   17dec:	b538      	push	{r3, r4, r5, lr}
   17dee:	460c      	mov	r4, r1
   17df0:	4615      	mov	r5, r2
	struct ll_conn *conn;

	conn = ll_connected_get(handle);
   17df2:	f7fa ffd1 	bl	12d98 <ll_connected_get>
	if (!conn) {
   17df6:	b158      	cbz	r0, 17e10 <ll_set_min_used_chans+0x24>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	if (!conn->lll.role) {
   17df8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   17dfc:	2b00      	cmp	r3, #0
   17dfe:	da05      	bge.n	17e0c <ll_set_min_used_chans+0x20>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	return ull_cp_min_used_chans(conn, phys, min_used_chans);
   17e00:	462a      	mov	r2, r5
   17e02:	4621      	mov	r1, r4
}
   17e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ull_cp_min_used_chans(conn, phys, min_used_chans);
   17e08:	f7fd b932 	b.w	15070 <ull_cp_min_used_chans>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17e0c:	200c      	movs	r0, #12
}
   17e0e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17e10:	2002      	movs	r0, #2
}
   17e12:	bd38      	pop	{r3, r4, r5, pc}

00017e14 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   17e14:	b530      	push	{r4, r5, lr}
   17e16:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   17e18:	7800      	ldrb	r0, [r0, #0]
{
   17e1a:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   17e1e:	fb02 1101 	mla	r1, r2, r1, r1
   17e22:	4a1f      	ldr	r2, [pc, #124]	; (17ea0 <lll_chan_sel_1+0x8c>)
   17e24:	4401      	add	r1, r0
   17e26:	fb82 0201 	smull	r0, r2, r2, r1
   17e2a:	440a      	add	r2, r1
   17e2c:	1152      	asrs	r2, r2, #5
   17e2e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   17e32:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   17e36:	1a8a      	subs	r2, r1, r2
   17e38:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   17e3a:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   17e3c:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   17e3e:	5c59      	ldrb	r1, [r3, r1]
   17e40:	f002 0207 	and.w	r2, r2, #7
   17e44:	fa41 f202 	asr.w	r2, r1, r2
   17e48:	f012 0201 	ands.w	r2, r2, #1
   17e4c:	d11f      	bne.n	17e8e <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   17e4e:	fbb0 f4f5 	udiv	r4, r0, r5
   17e52:	fb05 0414 	mls	r4, r5, r4, r0
   17e56:	b2e4      	uxtb	r4, r4
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   17e58:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   17e5a:	4610      	mov	r0, r2
   17e5c:	3304      	adds	r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   17e5e:	f100 0e08 	add.w	lr, r0, #8
   17e62:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   17e66:	fa5f fe8e 	uxtb.w	lr, lr
		bite = *chan_map;
   17e6a:	4602      	mov	r2, r0
			if (bite & 0x01) {
   17e6c:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   17e70:	f102 0c01 	add.w	ip, r2, #1
			bite >>= 1;
   17e74:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   17e78:	d002      	beq.n	17e80 <lll_chan_sel_1+0x6c>
				if (chan_index == 0U) {
   17e7a:	b14c      	cbz	r4, 17e90 <lll_chan_sel_1+0x7c>
				chan_index--;
   17e7c:	3c01      	subs	r4, #1
   17e7e:	b2e4      	uxtb	r4, r4
			chan_next++;
   17e80:	fa5f f28c 	uxtb.w	r2, ip
		while (bit_count--) {
   17e84:	4572      	cmp	r2, lr
   17e86:	d1f1      	bne.n	17e6c <lll_chan_sel_1+0x58>
			chan_next++;
   17e88:	4610      	mov	r0, r2
	while (byte_count--) {
   17e8a:	429d      	cmp	r5, r3
   17e8c:	d1e7      	bne.n	17e5e <lll_chan_sel_1+0x4a>
}
   17e8e:	bd30      	pop	{r4, r5, pc}
		}

		if (bit_count < 8) {
   17e90:	1dc1      	adds	r1, r0, #7
   17e92:	1a89      	subs	r1, r1, r2
   17e94:	b2c9      	uxtb	r1, r1
   17e96:	2907      	cmp	r1, #7
   17e98:	4610      	mov	r0, r2
   17e9a:	d8f6      	bhi.n	17e8a <lll_chan_sel_1+0x76>
}
   17e9c:	bd30      	pop	{r4, r5, pc}
   17e9e:	bf00      	nop
   17ea0:	dd67c8a7 	.word	0xdd67c8a7

00017ea4 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   17ea4:	8842      	ldrh	r2, [r0, #2]
   17ea6:	8800      	ldrh	r0, [r0, #0]
}
   17ea8:	4050      	eors	r0, r2
   17eaa:	4770      	bx	lr

00017eac <lll_chan_sel_2>:
{
   17eac:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   17eae:	4d34      	ldr	r5, [pc, #208]	; (17f80 <lll_chan_sel_2+0xd4>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   17eb0:	4c34      	ldr	r4, [pc, #208]	; (17f84 <lll_chan_sel_2+0xd8>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   17eb2:	4048      	eors	r0, r1
   17eb4:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   17eb8:	0a06      	lsrs	r6, r0, #8
   17eba:	fa5f fe80 	uxtb.w	lr, r0
   17ebe:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   17ec2:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   17ec6:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   17eca:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   17ece:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   17ed2:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   17ed6:	433e      	orrs	r6, r7
   17ed8:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   17edc:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   17ee0:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   17ee4:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   17ee8:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   17eec:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   17eee:	f3c0 4007 	ubfx	r0, r0, #16, #8
   17ef2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   17ef6:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   17efa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   17efe:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   17f00:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   17f04:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   17f06:	d1d7      	bne.n	17eb8 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   17f08:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   17f0a:	481f      	ldr	r0, [pc, #124]	; (17f88 <lll_chan_sel_2+0xdc>)
   17f0c:	fba0 4001 	umull	r4, r0, r0, r1
   17f10:	1a0c      	subs	r4, r1, r0
   17f12:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   17f16:	0940      	lsrs	r0, r0, #5
   17f18:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   17f1c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   17f20:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   17f22:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   17f26:	f000 0507 	and.w	r5, r0, #7
   17f2a:	5d14      	ldrb	r4, [r2, r4]
   17f2c:	412c      	asrs	r4, r5
   17f2e:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   17f30:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   17f32:	d41c      	bmi.n	17f6e <lll_chan_sel_2+0xc2>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   17f34:	fb01 f303 	mul.w	r3, r1, r3
   17f38:	1e56      	subs	r6, r2, #1
   17f3a:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   17f3e:	3204      	adds	r2, #4
	chan_next = 0U;
   17f40:	4660      	mov	r0, ip
		bite = *chan_map;
   17f42:	f100 0508 	add.w	r5, r0, #8
   17f46:	f816 cf01 	ldrb.w	ip, [r6, #1]!
		while (bit_count--) {
   17f4a:	b2ed      	uxtb	r5, r5
		bite = *chan_map;
   17f4c:	4601      	mov	r1, r0
			if (bite & 0x01) {
   17f4e:	f01c 0f01 	tst.w	ip, #1
			chan_next++;
   17f52:	f101 0401 	add.w	r4, r1, #1
			bite >>= 1;
   17f56:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (bite & 0x01) {
   17f5a:	d002      	beq.n	17f62 <lll_chan_sel_2+0xb6>
				if (chan_index == 0U) {
   17f5c:	b143      	cbz	r3, 17f70 <lll_chan_sel_2+0xc4>
				chan_index--;
   17f5e:	3b01      	subs	r3, #1
   17f60:	b2db      	uxtb	r3, r3
			chan_next++;
   17f62:	b2e1      	uxtb	r1, r4
		while (bit_count--) {
   17f64:	42a9      	cmp	r1, r5
   17f66:	d1f2      	bne.n	17f4e <lll_chan_sel_2+0xa2>
			chan_next++;
   17f68:	4608      	mov	r0, r1
	while (byte_count--) {
   17f6a:	4296      	cmp	r6, r2
   17f6c:	d1e9      	bne.n	17f42 <lll_chan_sel_2+0x96>
}
   17f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bit_count < 8) {
   17f70:	3007      	adds	r0, #7
   17f72:	1a40      	subs	r0, r0, r1
   17f74:	b2c0      	uxtb	r0, r0
   17f76:	2807      	cmp	r0, #7
   17f78:	4608      	mov	r0, r1
   17f7a:	d8f6      	bhi.n	17f6a <lll_chan_sel_2+0xbe>
}
   17f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f7e:	bf00      	nop
   17f80:	00022110 	.word	0x00022110
   17f84:	00088440 	.word	0x00088440
   17f88:	bacf914d 	.word	0xbacf914d

00017f8c <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   17f8c:	4668      	mov	r0, sp
   17f8e:	f020 0107 	bic.w	r1, r0, #7
   17f92:	468d      	mov	sp, r1
   17f94:	b501      	push	{r0, lr}
	isr_radio();
   17f96:	f002 f859 	bl	1a04c <isr_radio>
	ISR_DIRECT_PM();
   17f9a:	f7ef f93b 	bl	7214 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   17f9e:	f7ef fa31 	bl	7404 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   17fa2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   17fa6:	4685      	mov	sp, r0
   17fa8:	4770      	bx	lr
   17faa:	bf00      	nop

00017fac <rtc0_nrf5_isr>:
{
   17fac:	b508      	push	{r3, lr}
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   17fae:	4b09      	ldr	r3, [pc, #36]	; (17fd4 <rtc0_nrf5_isr+0x28>)
   17fb0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17fb4:	b93a      	cbnz	r2, 17fc6 <rtc0_nrf5_isr+0x1a>
	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   17fb6:	2001      	movs	r0, #1
   17fb8:	f7f6 f954 	bl	e264 <mayfly_run>
}
   17fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   17fc0:	2002      	movs	r0, #2
   17fc2:	f7f6 b94f 	b.w	e264 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   17fc6:	2000      	movs	r0, #0
   17fc8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   17fcc:	f7f7 f8c2 	bl	f154 <ticker_trigger>
   17fd0:	e7f1      	b.n	17fb6 <rtc0_nrf5_isr+0xa>
   17fd2:	bf00      	nop
   17fd4:	4000b000 	.word	0x4000b000

00017fd8 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   17fd8:	2000      	movs	r0, #0
   17fda:	f7f6 b943 	b.w	e264 <mayfly_run>
   17fde:	bf00      	nop

00017fe0 <ticker_start_op_cb>:

	preempt_req = preempt_ack;
}

static void ticker_start_op_cb(uint32_t status, void *param)
{
   17fe0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17fe2:	b9f8      	cbnz	r0, 18024 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   17fe4:	4b1e      	ldr	r3, [pc, #120]	; (18060 <ticker_start_op_cb+0x80>)
   17fe6:	4d1f      	ldr	r5, [pc, #124]	; (18064 <ticker_start_op_cb+0x84>)
   17fe8:	781a      	ldrb	r2, [r3, #0]
   17fea:	782b      	ldrb	r3, [r5, #0]
   17fec:	429a      	cmp	r2, r3
   17fee:	d027      	beq.n	18040 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   17ff0:	4a1d      	ldr	r2, [pc, #116]	; (18068 <ticker_start_op_cb+0x88>)
   17ff2:	4c1e      	ldr	r4, [pc, #120]	; (1806c <ticker_start_op_cb+0x8c>)
   17ff4:	7812      	ldrb	r2, [r2, #0]
   17ff6:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   17ff8:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   17ffa:	4291      	cmp	r1, r2
	preempt_start_ack++;
   17ffc:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   17ffe:	b2d3      	uxtb	r3, r2
   18000:	d00d      	beq.n	1801e <ticker_start_op_cb+0x3e>
   18002:	4a1b      	ldr	r2, [pc, #108]	; (18070 <ticker_start_op_cb+0x90>)
   18004:	491b      	ldr	r1, [pc, #108]	; (18074 <ticker_start_op_cb+0x94>)
   18006:	481c      	ldr	r0, [pc, #112]	; (18078 <ticker_start_op_cb+0x98>)
   18008:	f240 3345 	movw	r3, #837	; 0x345
   1800c:	f009 fb9e 	bl	2174c <assert_print>
   18010:	4040      	eors	r0, r0
   18012:	f380 8811 	msr	BASEPRI, r0
   18016:	f04f 0003 	mov.w	r0, #3
   1801a:	df02      	svc	2
	preempt_req++;
   1801c:	7823      	ldrb	r3, [r4, #0]
   1801e:	3301      	adds	r3, #1
   18020:	7023      	strb	r3, [r4, #0]
}
   18022:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18024:	4a12      	ldr	r2, [pc, #72]	; (18070 <ticker_start_op_cb+0x90>)
   18026:	4915      	ldr	r1, [pc, #84]	; (1807c <ticker_start_op_cb+0x9c>)
   18028:	4813      	ldr	r0, [pc, #76]	; (18078 <ticker_start_op_cb+0x98>)
   1802a:	f44f 7350 	mov.w	r3, #832	; 0x340
   1802e:	f009 fb8d 	bl	2174c <assert_print>
   18032:	4040      	eors	r0, r0
   18034:	f380 8811 	msr	BASEPRI, r0
   18038:	f04f 0003 	mov.w	r0, #3
   1803c:	df02      	svc	2
   1803e:	e7d1      	b.n	17fe4 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   18040:	4a0b      	ldr	r2, [pc, #44]	; (18070 <ticker_start_op_cb+0x90>)
   18042:	490f      	ldr	r1, [pc, #60]	; (18080 <ticker_start_op_cb+0xa0>)
   18044:	480c      	ldr	r0, [pc, #48]	; (18078 <ticker_start_op_cb+0x98>)
   18046:	f240 3342 	movw	r3, #834	; 0x342
   1804a:	f009 fb7f 	bl	2174c <assert_print>
   1804e:	4040      	eors	r0, r0
   18050:	f380 8811 	msr	BASEPRI, r0
   18054:	f04f 0003 	mov.w	r0, #3
   18058:	df02      	svc	2
	preempt_start_ack++;
   1805a:	782b      	ldrb	r3, [r5, #0]
   1805c:	e7c8      	b.n	17ff0 <ticker_start_op_cb+0x10>
   1805e:	bf00      	nop
   18060:	20003bd7 	.word	0x20003bd7
   18064:	20003bd6 	.word	0x20003bd6
   18068:	20003bd2 	.word	0x20003bd2
   1806c:	20003bd3 	.word	0x20003bd3
   18070:	000292e0 	.word	0x000292e0
   18074:	00029350 	.word	0x00029350
   18078:	0002866c 	.word	0x0002866c
   1807c:	00028da4 	.word	0x00028da4
   18080:	00029328 	.word	0x00029328

00018084 <ticker_stop_op_cb>:
{
   18084:	b510      	push	{r4, lr}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   18086:	4b0e      	ldr	r3, [pc, #56]	; (180c0 <ticker_stop_op_cb+0x3c>)
   18088:	4c0e      	ldr	r4, [pc, #56]	; (180c4 <ticker_stop_op_cb+0x40>)
   1808a:	781a      	ldrb	r2, [r3, #0]
   1808c:	7823      	ldrb	r3, [r4, #0]
   1808e:	429a      	cmp	r2, r3
   18090:	d006      	beq.n	180a0 <ticker_stop_op_cb+0x1c>
	preempt_req = preempt_ack;
   18092:	490d      	ldr	r1, [pc, #52]	; (180c8 <ticker_stop_op_cb+0x44>)
   18094:	4a0d      	ldr	r2, [pc, #52]	; (180cc <ticker_stop_op_cb+0x48>)
   18096:	7809      	ldrb	r1, [r1, #0]
   18098:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1809a:	3301      	adds	r3, #1
   1809c:	7023      	strb	r3, [r4, #0]
}
   1809e:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   180a0:	4a0b      	ldr	r2, [pc, #44]	; (180d0 <ticker_stop_op_cb+0x4c>)
   180a2:	490c      	ldr	r1, [pc, #48]	; (180d4 <ticker_stop_op_cb+0x50>)
   180a4:	480c      	ldr	r0, [pc, #48]	; (180d8 <ticker_stop_op_cb+0x54>)
   180a6:	f240 3337 	movw	r3, #823	; 0x337
   180aa:	f009 fb4f 	bl	2174c <assert_print>
   180ae:	4040      	eors	r0, r0
   180b0:	f380 8811 	msr	BASEPRI, r0
   180b4:	f04f 0003 	mov.w	r0, #3
   180b8:	df02      	svc	2
	preempt_stop_ack++;
   180ba:	7823      	ldrb	r3, [r4, #0]
   180bc:	e7e9      	b.n	18092 <ticker_stop_op_cb+0xe>
   180be:	bf00      	nop
   180c0:	20003bd5 	.word	0x20003bd5
   180c4:	20003bd4 	.word	0x20003bd4
   180c8:	20003bd2 	.word	0x20003bd2
   180cc:	20003bd3 	.word	0x20003bd3
   180d0:	000292e0 	.word	0x000292e0
   180d4:	0002936c 	.word	0x0002936c
   180d8:	0002866c 	.word	0x0002866c

000180dc <isr_race>:
	radio_status_reset();
   180dc:	f002 b8f0 	b.w	1a2c0 <radio_status_reset>

000180e0 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   180e0:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   180e2:	4a18      	ldr	r2, [pc, #96]	; (18144 <preempt_ticker_cb+0x64>)
   180e4:	4c18      	ldr	r4, [pc, #96]	; (18148 <preempt_ticker_cb+0x68>)
   180e6:	7812      	ldrb	r2, [r2, #0]
   180e8:	7823      	ldrb	r3, [r4, #0]
   180ea:	429a      	cmp	r2, r3
   180ec:	d01b      	beq.n	18126 <preempt_ticker_cb+0x46>
	preempt_ack++;
   180ee:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   180f0:	4b16      	ldr	r3, [pc, #88]	; (1814c <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   180f2:	3101      	adds	r1, #1
   180f4:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   180f6:	2200      	movs	r2, #0
	preempt_ack++;
   180f8:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   180fa:	9903      	ldr	r1, [sp, #12]
   180fc:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   180fe:	2001      	movs	r0, #1
   18100:	4611      	mov	r1, r2
   18102:	f7f6 f851 	bl	e1a8 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   18106:	b900      	cbnz	r0, 1810a <preempt_ticker_cb+0x2a>
}
   18108:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1810a:	4a11      	ldr	r2, [pc, #68]	; (18150 <preempt_ticker_cb+0x70>)
   1810c:	4911      	ldr	r1, [pc, #68]	; (18154 <preempt_ticker_cb+0x74>)
   1810e:	4812      	ldr	r0, [pc, #72]	; (18158 <preempt_ticker_cb+0x78>)
   18110:	f240 33c3 	movw	r3, #963	; 0x3c3
   18114:	f009 fb1a 	bl	2174c <assert_print>
   18118:	4040      	eors	r0, r0
   1811a:	f380 8811 	msr	BASEPRI, r0
   1811e:	f04f 0003 	mov.w	r0, #3
   18122:	df02      	svc	2
}
   18124:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   18126:	4a0a      	ldr	r2, [pc, #40]	; (18150 <preempt_ticker_cb+0x70>)
   18128:	490c      	ldr	r1, [pc, #48]	; (1815c <preempt_ticker_cb+0x7c>)
   1812a:	480b      	ldr	r0, [pc, #44]	; (18158 <preempt_ticker_cb+0x78>)
   1812c:	f240 33bd 	movw	r3, #957	; 0x3bd
   18130:	f009 fb0c 	bl	2174c <assert_print>
   18134:	4040      	eors	r0, r0
   18136:	f380 8811 	msr	BASEPRI, r0
   1813a:	f04f 0003 	mov.w	r0, #3
   1813e:	df02      	svc	2
   18140:	e7d5      	b.n	180ee <preempt_ticker_cb+0xe>
   18142:	bf00      	nop
   18144:	20003bd3 	.word	0x20003bd3
   18148:	20003bd2 	.word	0x20003bd2
   1814c:	200006b4 	.word	0x200006b4
   18150:	000292e0 	.word	0x000292e0
   18154:	00028b38 	.word	0x00028b38
   18158:	0002866c 	.word	0x0002866c
   1815c:	00029394 	.word	0x00029394

00018160 <preempt_ticker_start>:
{
   18160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((preempt_start_req != preempt_start_ack) ||
   18164:	f8df 8144 	ldr.w	r8, [pc, #324]	; 182ac <preempt_ticker_start+0x14c>
{
   18168:	4615      	mov	r5, r2
	if ((preempt_start_req != preempt_start_ack) ||
   1816a:	4a51      	ldr	r2, [pc, #324]	; (182b0 <preempt_ticker_start+0x150>)
   1816c:	f898 3000 	ldrb.w	r3, [r8]
   18170:	7812      	ldrb	r2, [r2, #0]
   18172:	429a      	cmp	r2, r3
{
   18174:	b08a      	sub	sp, #40	; 0x28
   18176:	460c      	mov	r4, r1
	if ((preempt_start_req != preempt_start_ack) ||
   18178:	d04a      	beq.n	18210 <preempt_ticker_start+0xb0>
		if (!prev || prev->is_aborted ||
   1817a:	2c00      	cmp	r4, #0
   1817c:	d063      	beq.n	18246 <preempt_ticker_start+0xe6>
   1817e:	7f22      	ldrb	r2, [r4, #28]
   18180:	f012 0202 	ands.w	r2, r2, #2
   18184:	d15f      	bne.n	18246 <preempt_ticker_start+0xe6>
		ull = HDR_LLL2ULL(p->param);
   18186:	68eb      	ldr	r3, [r5, #12]
		preempt_anchor = p->ticks_at_expire;
   18188:	f8d5 a000 	ldr.w	sl, [r5]
		ull = HDR_LLL2ULL(p->param);
   1818c:	681b      	ldr	r3, [r3, #0]
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1818e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 182b4 <preempt_ticker_start+0x154>
		preempt_to = MAX(ull->ticks_active_to_start,
   18192:	68df      	ldr	r7, [r3, #12]
   18194:	e9d3 1001 	ldrd	r1, r0, [r3, #4]
   18198:	4288      	cmp	r0, r1
   1819a:	bf2c      	ite	cs
   1819c:	ebc7 0700 	rsbcs	r7, r7, r0
   181a0:	ebc7 0701 	rsbcc	r7, r7, r1
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   181a4:	eb0a 0607 	add.w	r6, sl, r7
		diff = ticks_at_preempt_new - ticks_at_preempt;
   181a8:	f8d9 0000 	ldr.w	r0, [r9]
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   181ac:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		diff = ticks_at_preempt_new - ticks_at_preempt;
   181b0:	1a30      	subs	r0, r6, r0
		if (!prev || prev->is_aborted ||
   181b2:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   181b6:	d047      	beq.n	18248 <preempt_ticker_start+0xe8>
	if ((preempt_stop_req != preempt_stop_ack) ||
   181b8:	493f      	ldr	r1, [pc, #252]	; (182b8 <preempt_ticker_start+0x158>)
   181ba:	4b40      	ldr	r3, [pc, #256]	; (182bc <preempt_ticker_start+0x15c>)
   181bc:	7808      	ldrb	r0, [r1, #0]
   181be:	7819      	ldrb	r1, [r3, #0]
   181c0:	4288      	cmp	r0, r1
   181c2:	d044      	beq.n	1824e <preempt_ticker_start+0xee>
		prev->is_aborted = 1U;
   181c4:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   181c6:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   181c8:	f8c9 6000 	str.w	r6, [r9]
		prev->is_aborted = 1U;
   181cc:	f043 0302 	orr.w	r3, r3, #2
   181d0:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   181d2:	4620      	mov	r0, r4
   181d4:	69a3      	ldr	r3, [r4, #24]
   181d6:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   181d8:	4b39      	ldr	r3, [pc, #228]	; (182c0 <preempt_ticker_start+0x160>)
	ticks_at_preempt = ticks_at_preempt_new;
   181da:	f8c9 6000 	str.w	r6, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   181de:	e9cd 3507 	strd	r3, r5, [sp, #28]
   181e2:	4b38      	ldr	r3, [pc, #224]	; (182c4 <preempt_ticker_start+0x164>)
   181e4:	9700      	str	r7, [sp, #0]
   181e6:	2200      	movs	r2, #0
   181e8:	e9cd 3505 	strd	r3, r5, [sp, #20]
   181ec:	e9cd 2203 	strd	r2, r2, [sp, #12]
   181f0:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_start_req++;
   181f4:	f898 4000 	ldrb.w	r4, [r8]
   181f8:	3401      	adds	r4, #1
   181fa:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   181fc:	4653      	mov	r3, sl
   181fe:	4611      	mov	r1, r2
   18200:	4610      	mov	r0, r2
	preempt_start_req++;
   18202:	f888 4000 	strb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   18206:	f7f7 f813 	bl	f230 <ticker_start>
}
   1820a:	b00a      	add	sp, #40	; 0x28
   1820c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   18210:	4b2d      	ldr	r3, [pc, #180]	; (182c8 <preempt_ticker_start+0x168>)
   18212:	4a2e      	ldr	r2, [pc, #184]	; (182cc <preempt_ticker_start+0x16c>)
   18214:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   18216:	7812      	ldrb	r2, [r2, #0]
   18218:	429a      	cmp	r2, r3
   1821a:	d1ae      	bne.n	1817a <preempt_ticker_start+0x1a>
		ull = HDR_LLL2ULL(p->param);
   1821c:	68c3      	ldr	r3, [r0, #12]
		preempt_anchor = p->ticks_at_expire;
   1821e:	f8d0 a000 	ldr.w	sl, [r0]
		ull = HDR_LLL2ULL(p->param);
   18222:	681b      	ldr	r3, [r3, #0]
		preempt_to = MAX(ull->ticks_active_to_start,
   18224:	f8df 908c 	ldr.w	r9, [pc, #140]	; 182b4 <preempt_ticker_start+0x154>
   18228:	68df      	ldr	r7, [r3, #12]
   1822a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1822e:	4291      	cmp	r1, r2
   18230:	bf2c      	ite	cs
   18232:	ebc7 0701 	rsbcs	r7, r7, r1
   18236:	ebc7 0702 	rsbcc	r7, r7, r2
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   1823a:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   1823e:	4605      	mov	r5, r0
   18240:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   18244:	e7c8      	b.n	181d8 <preempt_ticker_start+0x78>
			return TICKER_STATUS_SUCCESS;
   18246:	2000      	movs	r0, #0
}
   18248:	b00a      	add	sp, #40	; 0x28
   1824a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req == preempt_ack)) {
   1824e:	491e      	ldr	r1, [pc, #120]	; (182c8 <preempt_ticker_start+0x168>)
   18250:	481e      	ldr	r0, [pc, #120]	; (182cc <preempt_ticker_start+0x16c>)
   18252:	7809      	ldrb	r1, [r1, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   18254:	7800      	ldrb	r0, [r0, #0]
   18256:	4288      	cmp	r0, r1
   18258:	d0b4      	beq.n	181c4 <preempt_ticker_start+0x64>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1825a:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   1825c:	7819      	ldrb	r1, [r3, #0]
   1825e:	3101      	adds	r1, #1
   18260:	b2c9      	uxtb	r1, r1
   18262:	7019      	strb	r1, [r3, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18264:	4610      	mov	r0, r2
   18266:	4b1a      	ldr	r3, [pc, #104]	; (182d0 <preempt_ticker_start+0x170>)
   18268:	4611      	mov	r1, r2
   1826a:	f7f7 f86b 	bl	f344 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1826e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   18272:	d0a7      	beq.n	181c4 <preempt_ticker_start+0x64>
   18274:	4a17      	ldr	r2, [pc, #92]	; (182d4 <preempt_ticker_start+0x174>)
   18276:	4918      	ldr	r1, [pc, #96]	; (182d8 <preempt_ticker_start+0x178>)
   18278:	4818      	ldr	r0, [pc, #96]	; (182dc <preempt_ticker_start+0x17c>)
   1827a:	f240 33af 	movw	r3, #943	; 0x3af
   1827e:	f009 fa65 	bl	2174c <assert_print>
   18282:	4040      	eors	r0, r0
   18284:	f380 8811 	msr	BASEPRI, r0
   18288:	f04f 0003 	mov.w	r0, #3
   1828c:	df02      	svc	2
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1828e:	4a11      	ldr	r2, [pc, #68]	; (182d4 <preempt_ticker_start+0x174>)
   18290:	4911      	ldr	r1, [pc, #68]	; (182d8 <preempt_ticker_start+0x178>)
   18292:	4812      	ldr	r0, [pc, #72]	; (182dc <preempt_ticker_start+0x17c>)
   18294:	f240 336e 	movw	r3, #878	; 0x36e
   18298:	f009 fa58 	bl	2174c <assert_print>
   1829c:	4040      	eors	r0, r0
   1829e:	f380 8811 	msr	BASEPRI, r0
   182a2:	f04f 0003 	mov.w	r0, #3
   182a6:	df02      	svc	2
   182a8:	e78c      	b.n	181c4 <preempt_ticker_start+0x64>
   182aa:	bf00      	nop
   182ac:	20003bd7 	.word	0x20003bd7
   182b0:	20003bd6 	.word	0x20003bd6
   182b4:	200033ac 	.word	0x200033ac
   182b8:	20003bd4 	.word	0x20003bd4
   182bc:	20003bd5 	.word	0x20003bd5
   182c0:	00017fe1 	.word	0x00017fe1
   182c4:	000180e1 	.word	0x000180e1
   182c8:	20003bd2 	.word	0x20003bd2
   182cc:	20003bd3 	.word	0x20003bd3
   182d0:	00018085 	.word	0x00018085
   182d4:	000292e0 	.word	0x000292e0
   182d8:	00028c0c 	.word	0x00028c0c
   182dc:	0002866c 	.word	0x0002866c

000182e0 <preempt>:

static void preempt(void *param)
{
   182e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   182e2:	4e4b      	ldr	r6, [pc, #300]	; (18410 <preempt+0x130>)
   182e4:	68b3      	ldr	r3, [r6, #8]
{
   182e6:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   182e8:	b15b      	cbz	r3, 18302 <preempt+0x22>
   182ea:	6833      	ldr	r3, [r6, #0]
   182ec:	b14b      	cbz	r3, 18302 <preempt+0x22>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   182ee:	23ff      	movs	r3, #255	; 0xff
   182f0:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   182f2:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   182f6:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   182fa:	f7f9 fb71 	bl	119e0 <ull_prepare_dequeue_iter>
	if (!next) {
   182fe:	4602      	mov	r2, r0
   18300:	b930      	cbnz	r0, 18310 <preempt+0x30>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   18302:	b009      	add	sp, #36	; 0x24
   18304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   18306:	f7f9 fb6b 	bl	119e0 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1830a:	4602      	mov	r2, r0
   1830c:	2800      	cmp	r0, #0
   1830e:	d0f8      	beq.n	18302 <preempt+0x22>
   18310:	7f11      	ldrb	r1, [r2, #28]
   18312:	f011 0403 	ands.w	r4, r1, #3
		next = ull_prepare_dequeue_iter(&idx);
   18316:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1831a:	d1f4      	bne.n	18306 <preempt+0x26>
	if (next != param) {
   1831c:	4295      	cmp	r5, r2
   1831e:	d126      	bne.n	1836e <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   18320:	6873      	ldr	r3, [r6, #4]
   18322:	6831      	ldr	r1, [r6, #0]
   18324:	68e8      	ldr	r0, [r5, #12]
   18326:	aa03      	add	r2, sp, #12
   18328:	4798      	blx	r3
	if (!err) {
   1832a:	4607      	mov	r7, r0
   1832c:	b1b0      	cbz	r0, 1835c <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1832e:	68b3      	ldr	r3, [r6, #8]
   18330:	6831      	ldr	r1, [r6, #0]
   18332:	4620      	mov	r0, r4
   18334:	4798      	blx	r3
	if (err == -EAGAIN) {
   18336:	f117 0f0b 	cmn.w	r7, #11
   1833a:	d02d      	beq.n	18398 <preempt+0xb8>
		LL_ASSERT(err == -ECANCELED);
   1833c:	378c      	adds	r7, #140	; 0x8c
   1833e:	d0e0      	beq.n	18302 <preempt+0x22>
   18340:	4a34      	ldr	r2, [pc, #208]	; (18414 <preempt+0x134>)
   18342:	4935      	ldr	r1, [pc, #212]	; (18418 <preempt+0x138>)
   18344:	4835      	ldr	r0, [pc, #212]	; (1841c <preempt+0x13c>)
   18346:	f240 431d 	movw	r3, #1053	; 0x41d
   1834a:	f009 f9ff 	bl	2174c <assert_print>
   1834e:	4040      	eors	r0, r0
   18350:	f380 8811 	msr	BASEPRI, r0
   18354:	f04f 0003 	mov.w	r0, #3
   18358:	df02      	svc	2
   1835a:	e7d2      	b.n	18302 <preempt+0x22>
		next->is_aborted = 1;
   1835c:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1835e:	69aa      	ldr	r2, [r5, #24]
   18360:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   18362:	f043 0302 	orr.w	r3, r3, #2
   18366:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   18368:	4628      	mov	r0, r5
   1836a:	4790      	blx	r2
		return;
   1836c:	e7c9      	b.n	18302 <preempt+0x22>
		ret = preempt_ticker_start(next, NULL, next);
   1836e:	4621      	mov	r1, r4
   18370:	4610      	mov	r0, r2
   18372:	f7ff fef5 	bl	18160 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18376:	f030 0302 	bics.w	r3, r0, #2
   1837a:	d0c2      	beq.n	18302 <preempt+0x22>
   1837c:	4a25      	ldr	r2, [pc, #148]	; (18414 <preempt+0x134>)
   1837e:	4928      	ldr	r1, [pc, #160]	; (18420 <preempt+0x140>)
   18380:	4826      	ldr	r0, [pc, #152]	; (1841c <preempt+0x13c>)
   18382:	f240 33e9 	movw	r3, #1001	; 0x3e9
   18386:	f009 f9e1 	bl	2174c <assert_print>
   1838a:	4040      	eors	r0, r0
   1838c:	f380 8811 	msr	BASEPRI, r0
   18390:	f04f 0003 	mov.w	r0, #3
   18394:	df02      	svc	2
   18396:	e7b4      	b.n	18302 <preempt+0x22>
		iter_idx = UINT8_MAX;
   18398:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1839a:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1839e:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   183a2:	f7f9 fb1d 	bl	119e0 <ull_prepare_dequeue_iter>
		while (iter) {
   183a6:	b928      	cbnz	r0, 183b4 <preempt+0xd4>
   183a8:	e013      	b.n	183d2 <preempt+0xf2>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   183aa:	f10d 000b 	add.w	r0, sp, #11
   183ae:	f7f9 fb17 	bl	119e0 <ull_prepare_dequeue_iter>
		while (iter) {
   183b2:	b170      	cbz	r0, 183d2 <preempt+0xf2>
			if (!iter->is_aborted &&
   183b4:	7f03      	ldrb	r3, [r0, #28]
   183b6:	079a      	lsls	r2, r3, #30
   183b8:	d4f7      	bmi.n	183aa <preempt+0xca>
			    event.curr.param == iter->prepare_param.param) {
   183ba:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   183bc:	6831      	ldr	r1, [r6, #0]
   183be:	4291      	cmp	r1, r2
   183c0:	d1f3      	bne.n	183aa <preempt+0xca>
				iter->is_aborted = 1;
   183c2:	f043 0302 	orr.w	r3, r3, #2
   183c6:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   183c8:	6983      	ldr	r3, [r0, #24]
   183ca:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   183cc:	f88d 400b 	strb.w	r4, [sp, #11]
   183d0:	e7eb      	b.n	183aa <preempt+0xca>
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   183d2:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   183d4:	6830      	ldr	r0, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   183d6:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   183d8:	2100      	movs	r1, #0
   183da:	e9cd 1104 	strd	r1, r1, [sp, #16]
   183de:	9106      	str	r1, [sp, #24]
	prepare_param.param = event.curr.param;
   183e0:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   183e2:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   183e4:	9b03      	ldr	r3, [sp, #12]
   183e6:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   183ea:	aa04      	add	r2, sp, #16
   183ec:	f7f9 fab8 	bl	11960 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   183f0:	2800      	cmp	r0, #0
   183f2:	d186      	bne.n	18302 <preempt+0x22>
   183f4:	4a07      	ldr	r2, [pc, #28]	; (18414 <preempt+0x134>)
   183f6:	490b      	ldr	r1, [pc, #44]	; (18424 <preempt+0x144>)
   183f8:	4808      	ldr	r0, [pc, #32]	; (1841c <preempt+0x13c>)
   183fa:	f240 431b 	movw	r3, #1051	; 0x41b
   183fe:	f009 f9a5 	bl	2174c <assert_print>
   18402:	4040      	eors	r0, r0
   18404:	f380 8811 	msr	BASEPRI, r0
   18408:	f04f 0003 	mov.w	r0, #3
   1840c:	df02      	svc	2
   1840e:	e778      	b.n	18302 <preempt+0x22>
   18410:	200033b0 	.word	0x200033b0
   18414:	000292e0 	.word	0x000292e0
   18418:	000293b8 	.word	0x000293b8
   1841c:	0002866c 	.word	0x0002866c
   18420:	00028c0c 	.word	0x00028c0c
   18424:	000293b0 	.word	0x000293b0

00018428 <lll_init>:
{
   18428:	b510      	push	{r4, lr}
   1842a:	4815      	ldr	r0, [pc, #84]	; (18480 <lll_init+0x58>)
   1842c:	f00e fa5c 	bl	268e8 <z_device_is_ready>
	if (!device_is_ready(dev_entropy)) {
   18430:	b310      	cbz	r0, 18478 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   18432:	4b14      	ldr	r3, [pc, #80]	; (18484 <lll_init+0x5c>)
   18434:	2400      	movs	r4, #0
   18436:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   18438:	f000 fae8 	bl	18a0c <lll_clock_init>
	if (err < 0) {
   1843c:	2800      	cmp	r0, #0
   1843e:	db1a      	blt.n	18476 <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   18440:	4621      	mov	r1, r4
   18442:	2001      	movs	r0, #1
   18444:	4622      	mov	r2, r4
   18446:	f7ee fecd 	bl	71e4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1844a:	4622      	mov	r2, r4
   1844c:	200b      	movs	r0, #11
   1844e:	2101      	movs	r1, #1
   18450:	f7ee fec8 	bl	71e4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   18454:	4622      	mov	r2, r4
   18456:	4621      	mov	r1, r4
   18458:	2018      	movs	r0, #24
   1845a:	f7ee fec3 	bl	71e4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1845e:	2001      	movs	r0, #1
   18460:	f7ee fe90 	bl	7184 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   18464:	200b      	movs	r0, #11
   18466:	f7ee fe8d 	bl	7184 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1846a:	2018      	movs	r0, #24
   1846c:	f7ee fe8a 	bl	7184 <arch_irq_enable>
	radio_setup();
   18470:	f001 fe1c 	bl	1a0ac <radio_setup>
	return 0;
   18474:	4620      	mov	r0, r4
}
   18476:	bd10      	pop	{r4, pc}
		return -ENODEV;
   18478:	f06f 0012 	mvn.w	r0, #18
}
   1847c:	bd10      	pop	{r4, pc}
   1847e:	bf00      	nop
   18480:	000275e8 	.word	0x000275e8
   18484:	200033b0 	.word	0x200033b0

00018488 <lll_deinit>:
{
   18488:	b508      	push	{r3, lr}
	err = lll_clock_deinit();
   1848a:	f000 facf 	bl	18a2c <lll_clock_deinit>
	if (err < 0) {
   1848e:	2800      	cmp	r0, #0
   18490:	db09      	blt.n	184a6 <lll_deinit+0x1e>
	irq_disable(RADIO_IRQn);
   18492:	2001      	movs	r0, #1
   18494:	f7ee fe84 	bl	71a0 <arch_irq_disable>
	irq_disable(RTC0_IRQn);
   18498:	200b      	movs	r0, #11
   1849a:	f7ee fe81 	bl	71a0 <arch_irq_disable>
	irq_disable(HAL_SWI_RADIO_IRQ);
   1849e:	2018      	movs	r0, #24
   184a0:	f7ee fe7e 	bl	71a0 <arch_irq_disable>
	return 0;
   184a4:	2000      	movs	r0, #0
}
   184a6:	bd08      	pop	{r3, pc}

000184a8 <lll_csrand_get>:
{
   184a8:	4603      	mov	r3, r0
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   184aa:	4803      	ldr	r0, [pc, #12]	; (184b8 <lll_csrand_get+0x10>)
   184ac:	b28a      	uxth	r2, r1
   184ae:	4619      	mov	r1, r3
   184b0:	6883      	ldr	r3, [r0, #8]
   184b2:	681b      	ldr	r3, [r3, #0]
   184b4:	4718      	bx	r3
   184b6:	bf00      	nop
   184b8:	000275e8 	.word	0x000275e8

000184bc <lll_csrand_isr_get>:
{
   184bc:	b430      	push	{r4, r5}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   184be:	4d07      	ldr	r5, [pc, #28]	; (184dc <lll_csrand_isr_get+0x20>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   184c0:	68ab      	ldr	r3, [r5, #8]
   184c2:	685c      	ldr	r4, [r3, #4]
   184c4:	b134      	cbz	r4, 184d4 <lll_csrand_isr_get+0x18>
   184c6:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   184c8:	46a4      	mov	ip, r4
   184ca:	4601      	mov	r1, r0
   184cc:	2300      	movs	r3, #0
   184ce:	4628      	mov	r0, r5
}
   184d0:	bc30      	pop	{r4, r5}
   184d2:	4760      	bx	ip
   184d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   184d8:	bc30      	pop	{r4, r5}
   184da:	4770      	bx	lr
   184dc:	000275e8 	.word	0x000275e8

000184e0 <lll_rand_isr_get>:
int lll_rand_isr_get(void *buf, size_t len)
   184e0:	b430      	push	{r4, r5}
   184e2:	4d07      	ldr	r5, [pc, #28]	; (18500 <lll_rand_isr_get+0x20>)
   184e4:	68ab      	ldr	r3, [r5, #8]
   184e6:	685c      	ldr	r4, [r3, #4]
   184e8:	b134      	cbz	r4, 184f8 <lll_rand_isr_get+0x18>
   184ea:	b28a      	uxth	r2, r1
   184ec:	46a4      	mov	ip, r4
   184ee:	4601      	mov	r1, r0
   184f0:	2300      	movs	r3, #0
   184f2:	4628      	mov	r0, r5
   184f4:	bc30      	pop	{r4, r5}
   184f6:	4760      	bx	ip
   184f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   184fc:	bc30      	pop	{r4, r5}
   184fe:	4770      	bx	lr
   18500:	000275e8 	.word	0x000275e8

00018504 <lll_reset>:
}
   18504:	2000      	movs	r0, #0
   18506:	4770      	bx	lr

00018508 <lll_disable>:
{
   18508:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1850a:	4604      	mov	r4, r0
{
   1850c:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1850e:	b378      	cbz	r0, 18570 <lll_disable+0x68>
   18510:	4b23      	ldr	r3, [pc, #140]	; (185a0 <lll_disable+0x98>)
   18512:	681a      	ldr	r2, [r3, #0]
   18514:	4282      	cmp	r2, r0
   18516:	d025      	beq.n	18564 <lll_disable+0x5c>
		idx = UINT8_MAX;
   18518:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1851a:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1851e:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   18522:	f7f9 fa5d 	bl	119e0 <ull_prepare_dequeue_iter>
		while (next) {
   18526:	b938      	cbnz	r0, 18538 <lll_disable+0x30>
   18528:	e01a      	b.n	18560 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1852a:	42a1      	cmp	r1, r4
   1852c:	d00a      	beq.n	18544 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   1852e:	f10d 0007 	add.w	r0, sp, #7
   18532:	f7f9 fa55 	bl	119e0 <ull_prepare_dequeue_iter>
		while (next) {
   18536:	b198      	cbz	r0, 18560 <lll_disable+0x58>
			if (!next->is_aborted &&
   18538:	7f03      	ldrb	r3, [r0, #28]
   1853a:	079b      	lsls	r3, r3, #30
   1853c:	d4f7      	bmi.n	1852e <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   1853e:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   18540:	2c00      	cmp	r4, #0
   18542:	d1f2      	bne.n	1852a <lll_disable+0x22>
				next->is_aborted = 1;
   18544:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   18546:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   18548:	f043 0302 	orr.w	r3, r3, #2
   1854c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1854e:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   18550:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   18554:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   18558:	f7f9 fa42 	bl	119e0 <ull_prepare_dequeue_iter>
		while (next) {
   1855c:	2800      	cmp	r0, #0
   1855e:	d1eb      	bne.n	18538 <lll_disable+0x30>
}
   18560:	b003      	add	sp, #12
   18562:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   18564:	689b      	ldr	r3, [r3, #8]
   18566:	b16b      	cbz	r3, 18584 <lll_disable+0x7c>
   18568:	4601      	mov	r1, r0
			event.curr.abort_cb(NULL, event.curr.param);
   1856a:	2000      	movs	r0, #0
   1856c:	4798      	blx	r3
   1856e:	e7d3      	b.n	18518 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   18570:	4a0b      	ldr	r2, [pc, #44]	; (185a0 <lll_disable+0x98>)
   18572:	6893      	ldr	r3, [r2, #8]
   18574:	2b00      	cmp	r3, #0
   18576:	d0cf      	beq.n	18518 <lll_disable+0x10>
   18578:	6811      	ldr	r1, [r2, #0]
   1857a:	2900      	cmp	r1, #0
   1857c:	d0cc      	beq.n	18518 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   1857e:	2000      	movs	r0, #0
   18580:	4798      	blx	r3
   18582:	e7c9      	b.n	18518 <lll_disable+0x10>
			LL_ASSERT(!param);
   18584:	4a07      	ldr	r2, [pc, #28]	; (185a4 <lll_disable+0x9c>)
   18586:	4908      	ldr	r1, [pc, #32]	; (185a8 <lll_disable+0xa0>)
   18588:	4808      	ldr	r0, [pc, #32]	; (185ac <lll_disable+0xa4>)
   1858a:	f240 1311 	movw	r3, #273	; 0x111
   1858e:	f009 f8dd 	bl	2174c <assert_print>
   18592:	4040      	eors	r0, r0
   18594:	f380 8811 	msr	BASEPRI, r0
   18598:	f04f 0003 	mov.w	r0, #3
   1859c:	df02      	svc	2
   1859e:	e7bb      	b.n	18518 <lll_disable+0x10>
   185a0:	200033b0 	.word	0x200033b0
   185a4:	000292e0 	.word	0x000292e0
   185a8:	000293c4 	.word	0x000293c4
   185ac:	0002866c 	.word	0x0002866c

000185b0 <lll_prepare_done>:
}
   185b0:	2000      	movs	r0, #0
   185b2:	4770      	bx	lr

000185b4 <lll_done>:
{
   185b4:	b538      	push	{r3, r4, r5, lr}
   185b6:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   185b8:	f7f9 fa04 	bl	119c4 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   185bc:	b154      	cbz	r4, 185d4 <lll_done+0x20>
   185be:	b310      	cbz	r0, 18606 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   185c0:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   185c2:	2000      	movs	r0, #0
   185c4:	f7f9 fa2c 	bl	11a20 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   185c8:	4620      	mov	r0, r4
   185ca:	f7f9 fa9d 	bl	11b08 <ull_event_done>
	LL_ASSERT(evdone);
   185ce:	b158      	cbz	r0, 185e8 <lll_done+0x34>
}
   185d0:	2000      	movs	r0, #0
   185d2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   185d4:	4d1a      	ldr	r5, [pc, #104]	; (18640 <lll_done+0x8c>)
   185d6:	68ab      	ldr	r3, [r5, #8]
   185d8:	b31b      	cbz	r3, 18622 <lll_done+0x6e>
		param = event.curr.param;
   185da:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   185dc:	2300      	movs	r3, #0
   185de:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   185e0:	602b      	str	r3, [r5, #0]
		if (param) {
   185e2:	2c00      	cmp	r4, #0
   185e4:	d1ec      	bne.n	185c0 <lll_done+0xc>
   185e6:	e7ec      	b.n	185c2 <lll_done+0xe>
	LL_ASSERT(evdone);
   185e8:	4a16      	ldr	r2, [pc, #88]	; (18644 <lll_done+0x90>)
   185ea:	4917      	ldr	r1, [pc, #92]	; (18648 <lll_done+0x94>)
   185ec:	4817      	ldr	r0, [pc, #92]	; (1864c <lll_done+0x98>)
   185ee:	f44f 73c1 	mov.w	r3, #386	; 0x182
   185f2:	f009 f8ab 	bl	2174c <assert_print>
   185f6:	4040      	eors	r0, r0
   185f8:	f380 8811 	msr	BASEPRI, r0
   185fc:	f04f 0003 	mov.w	r0, #3
   18600:	df02      	svc	2
}
   18602:	2000      	movs	r0, #0
   18604:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   18606:	4a0f      	ldr	r2, [pc, #60]	; (18644 <lll_done+0x90>)
   18608:	4911      	ldr	r1, [pc, #68]	; (18650 <lll_done+0x9c>)
   1860a:	4810      	ldr	r0, [pc, #64]	; (1864c <lll_done+0x98>)
   1860c:	f240 134b 	movw	r3, #331	; 0x14b
   18610:	f009 f89c 	bl	2174c <assert_print>
   18614:	4040      	eors	r0, r0
   18616:	f380 8811 	msr	BASEPRI, r0
   1861a:	f04f 0003 	mov.w	r0, #3
   1861e:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   18620:	e7ce      	b.n	185c0 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   18622:	4a08      	ldr	r2, [pc, #32]	; (18644 <lll_done+0x90>)
   18624:	490b      	ldr	r1, [pc, #44]	; (18654 <lll_done+0xa0>)
   18626:	4809      	ldr	r0, [pc, #36]	; (1864c <lll_done+0x98>)
   18628:	f44f 73a8 	mov.w	r3, #336	; 0x150
   1862c:	f009 f88e 	bl	2174c <assert_print>
   18630:	4040      	eors	r0, r0
   18632:	f380 8811 	msr	BASEPRI, r0
   18636:	f04f 0003 	mov.w	r0, #3
   1863a:	df02      	svc	2
   1863c:	e7cd      	b.n	185da <lll_done+0x26>
   1863e:	bf00      	nop
   18640:	200033b0 	.word	0x200033b0
   18644:	000292e0 	.word	0x000292e0
   18648:	000293f0 	.word	0x000293f0
   1864c:	0002866c 	.word	0x0002866c
   18650:	000293cc 	.word	0x000293cc
   18654:	000293dc 	.word	0x000293dc

00018658 <lll_is_abort_cb>:
}
   18658:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1865c:	4770      	bx	lr
   1865e:	bf00      	nop

00018660 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   18660:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   18664:	2a00      	cmp	r2, #0
   18666:	db04      	blt.n	18672 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   18668:	429a      	cmp	r2, r3
   1866a:	bf38      	it	cc
   1866c:	461a      	movcc	r2, r3
   1866e:	4610      	mov	r0, r2
}
   18670:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   18672:	68c0      	ldr	r0, [r0, #12]
   18674:	4298      	cmp	r0, r3
   18676:	bf38      	it	cc
   18678:	4618      	movcc	r0, r3
   1867a:	4770      	bx	lr

0001867c <lll_chan_set>:
	switch (chan) {
   1867c:	2826      	cmp	r0, #38	; 0x26
{
   1867e:	b510      	push	{r4, lr}
   18680:	4604      	mov	r4, r0
	switch (chan) {
   18682:	d01c      	beq.n	186be <lll_chan_set+0x42>
   18684:	2827      	cmp	r0, #39	; 0x27
   18686:	d012      	beq.n	186ae <lll_chan_set+0x32>
   18688:	2825      	cmp	r0, #37	; 0x25
   1868a:	d008      	beq.n	1869e <lll_chan_set+0x22>
		if (chan < 11) {
   1868c:	280a      	cmp	r0, #10
   1868e:	d91e      	bls.n	186ce <lll_chan_set+0x52>
		} else if (chan < 40) {
   18690:	2827      	cmp	r0, #39	; 0x27
   18692:	d821      	bhi.n	186d8 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   18694:	3003      	adds	r0, #3
   18696:	0040      	lsls	r0, r0, #1
   18698:	f001 fd86 	bl	1a1a8 <radio_freq_chan_set>
   1869c:	e002      	b.n	186a4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1869e:	2002      	movs	r0, #2
   186a0:	f001 fd82 	bl	1a1a8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   186a4:	4620      	mov	r0, r4
}
   186a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   186aa:	f001 bd83 	b.w	1a1b4 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   186ae:	2050      	movs	r0, #80	; 0x50
   186b0:	f001 fd7a 	bl	1a1a8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   186b4:	4620      	mov	r0, r4
}
   186b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   186ba:	f001 bd7b 	b.w	1a1b4 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   186be:	201a      	movs	r0, #26
   186c0:	f001 fd72 	bl	1a1a8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   186c4:	4620      	mov	r0, r4
}
   186c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   186ca:	f001 bd73 	b.w	1a1b4 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   186ce:	3002      	adds	r0, #2
   186d0:	0040      	lsls	r0, r0, #1
   186d2:	f001 fd69 	bl	1a1a8 <radio_freq_chan_set>
   186d6:	e7e5      	b.n	186a4 <lll_chan_set+0x28>
			LL_ASSERT(0);
   186d8:	4a06      	ldr	r2, [pc, #24]	; (186f4 <lll_chan_set+0x78>)
   186da:	4907      	ldr	r1, [pc, #28]	; (186f8 <lll_chan_set+0x7c>)
   186dc:	4807      	ldr	r0, [pc, #28]	; (186fc <lll_chan_set+0x80>)
   186de:	f240 13f7 	movw	r3, #503	; 0x1f7
   186e2:	f009 f833 	bl	2174c <assert_print>
   186e6:	4040      	eors	r0, r0
   186e8:	f380 8811 	msr	BASEPRI, r0
   186ec:	f04f 0003 	mov.w	r0, #3
   186f0:	df02      	svc	2
   186f2:	e7d7      	b.n	186a4 <lll_chan_set+0x28>
   186f4:	000292e0 	.word	0x000292e0
   186f8:	000286fc 	.word	0x000286fc
   186fc:	0002866c 	.word	0x0002866c

00018700 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   18700:	f001 bdb4 	b.w	1a26c <radio_tx_ready_delay_get>

00018704 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   18704:	f001 bdba 	b.w	1a27c <radio_rx_ready_delay_get>

00018708 <lll_isr_tx_status_reset>:
{
   18708:	b508      	push	{r3, lr}
	radio_status_reset();
   1870a:	f001 fdd9 	bl	1a2c0 <radio_status_reset>
}
   1870e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   18712:	f001 bf0b 	b.w	1a52c <radio_tmr_status_reset>
   18716:	bf00      	nop

00018718 <lll_isr_rx_status_reset>:
{
   18718:	b508      	push	{r3, lr}
	radio_status_reset();
   1871a:	f001 fdd1 	bl	1a2c0 <radio_status_reset>
	radio_tmr_status_reset();
   1871e:	f001 ff05 	bl	1a52c <radio_tmr_status_reset>
}
   18722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   18726:	f001 becd 	b.w	1a4c4 <radio_rssi_status_reset>
   1872a:	bf00      	nop

0001872c <lll_isr_status_reset>:
{
   1872c:	b508      	push	{r3, lr}
	radio_status_reset();
   1872e:	f001 fdc7 	bl	1a2c0 <radio_status_reset>
	radio_tmr_status_reset();
   18732:	f001 fefb 	bl	1a52c <radio_tmr_status_reset>
	radio_filter_status_reset();
   18736:	f001 fee1 	bl	1a4fc <radio_filter_status_reset>
}
   1873a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1873e:	f001 bec1 	b.w	1a4c4 <radio_rssi_status_reset>
   18742:	bf00      	nop

00018744 <lll_isr_cleanup>:
{
   18744:	b508      	push	{r3, lr}
   18746:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   18748:	4817      	ldr	r0, [pc, #92]	; (187a8 <lll_isr_cleanup+0x64>)
   1874a:	f001 fc8f 	bl	1a06c <radio_isr_set>
	if (!radio_is_idle()) {
   1874e:	f001 fdd7 	bl	1a300 <radio_is_idle>
   18752:	b160      	cbz	r0, 1876e <lll_isr_cleanup+0x2a>
	radio_tmr_stop();
   18754:	f001 ff8e 	bl	1a674 <radio_tmr_stop>
	radio_stop();
   18758:	f001 fd10 	bl	1a17c <radio_stop>
	err = lll_hfclock_off();
   1875c:	f000 f9a2 	bl	18aa4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18760:	2800      	cmp	r0, #0
   18762:	db0e      	blt.n	18782 <lll_isr_cleanup+0x3e>
}
   18764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   18768:	2000      	movs	r0, #0
   1876a:	f7ff bf23 	b.w	185b4 <lll_done>
		radio_disable();
   1876e:	f001 fd93 	bl	1a298 <radio_disable>
	radio_tmr_stop();
   18772:	f001 ff7f 	bl	1a674 <radio_tmr_stop>
	radio_stop();
   18776:	f001 fd01 	bl	1a17c <radio_stop>
	err = lll_hfclock_off();
   1877a:	f000 f993 	bl	18aa4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1877e:	2800      	cmp	r0, #0
   18780:	daf0      	bge.n	18764 <lll_isr_cleanup+0x20>
   18782:	4a0a      	ldr	r2, [pc, #40]	; (187ac <lll_isr_cleanup+0x68>)
   18784:	490a      	ldr	r1, [pc, #40]	; (187b0 <lll_isr_cleanup+0x6c>)
   18786:	480b      	ldr	r0, [pc, #44]	; (187b4 <lll_isr_cleanup+0x70>)
   18788:	f240 2373 	movw	r3, #627	; 0x273
   1878c:	f008 ffde 	bl	2174c <assert_print>
   18790:	4040      	eors	r0, r0
   18792:	f380 8811 	msr	BASEPRI, r0
   18796:	f04f 0003 	mov.w	r0, #3
   1879a:	df02      	svc	2
	lll_done(NULL);
   1879c:	2000      	movs	r0, #0
}
   1879e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   187a2:	f7ff bf07 	b.w	185b4 <lll_done>
   187a6:	bf00      	nop
   187a8:	000180dd 	.word	0x000180dd
   187ac:	000292e0 	.word	0x000292e0
   187b0:	000293f8 	.word	0x000293f8
   187b4:	0002866c 	.word	0x0002866c

000187b8 <lll_isr_abort>:
{
   187b8:	b510      	push	{r4, lr}
   187ba:	4604      	mov	r4, r0
	radio_status_reset();
   187bc:	f001 fd80 	bl	1a2c0 <radio_status_reset>
	radio_tmr_status_reset();
   187c0:	f001 feb4 	bl	1a52c <radio_tmr_status_reset>
	radio_filter_status_reset();
   187c4:	f001 fe9a 	bl	1a4fc <radio_filter_status_reset>
	radio_rssi_status_reset();
   187c8:	f001 fe7c 	bl	1a4c4 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   187cc:	4620      	mov	r0, r4
}
   187ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   187d2:	f7ff bfb7 	b.w	18744 <lll_isr_cleanup>
   187d6:	bf00      	nop

000187d8 <lll_isr_early_abort>:
{
   187d8:	b508      	push	{r3, lr}
   187da:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   187dc:	4813      	ldr	r0, [pc, #76]	; (1882c <lll_isr_early_abort+0x54>)
   187de:	f001 fc45 	bl	1a06c <radio_isr_set>
	if (!radio_is_idle()) {
   187e2:	f001 fd8d 	bl	1a300 <radio_is_idle>
   187e6:	b140      	cbz	r0, 187fa <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   187e8:	f000 f95c 	bl	18aa4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   187ec:	2800      	cmp	r0, #0
   187ee:	db0a      	blt.n	18806 <lll_isr_early_abort+0x2e>
}
   187f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   187f4:	2000      	movs	r0, #0
   187f6:	f7ff bedd 	b.w	185b4 <lll_done>
		radio_disable();
   187fa:	f001 fd4d 	bl	1a298 <radio_disable>
	err = lll_hfclock_off();
   187fe:	f000 f951 	bl	18aa4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18802:	2800      	cmp	r0, #0
   18804:	daf4      	bge.n	187f0 <lll_isr_early_abort+0x18>
   18806:	4a0a      	ldr	r2, [pc, #40]	; (18830 <lll_isr_early_abort+0x58>)
   18808:	490a      	ldr	r1, [pc, #40]	; (18834 <lll_isr_early_abort+0x5c>)
   1880a:	480b      	ldr	r0, [pc, #44]	; (18838 <lll_isr_early_abort+0x60>)
   1880c:	f240 2382 	movw	r3, #642	; 0x282
   18810:	f008 ff9c 	bl	2174c <assert_print>
   18814:	4040      	eors	r0, r0
   18816:	f380 8811 	msr	BASEPRI, r0
   1881a:	f04f 0003 	mov.w	r0, #3
   1881e:	df02      	svc	2
	lll_done(NULL);
   18820:	2000      	movs	r0, #0
}
   18822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   18826:	f7ff bec5 	b.w	185b4 <lll_done>
   1882a:	bf00      	nop
   1882c:	000180dd 	.word	0x000180dd
   18830:	000292e0 	.word	0x000292e0
   18834:	000293f8 	.word	0x000293f8
   18838:	0002866c 	.word	0x0002866c

0001883c <lll_prepare_resolve>:
{
   1883c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18840:	b084      	sub	sp, #16
   18842:	4606      	mov	r6, r0
   18844:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   18846:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1884a:	23ff      	movs	r3, #255	; 0xff
{
   1884c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   18850:	f88d 300f 	strb.w	r3, [sp, #15]
{
   18854:	460f      	mov	r7, r1
   18856:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   18858:	f7f9 f8c2 	bl	119e0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1885c:	4604      	mov	r4, r0
   1885e:	b928      	cbnz	r0, 1886c <lll_prepare_resolve+0x30>
   18860:	e03b      	b.n	188da <lll_prepare_resolve+0x9e>
		p = ull_prepare_dequeue_iter(&idx);
   18862:	f7f9 f8bd 	bl	119e0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   18866:	4604      	mov	r4, r0
   18868:	2800      	cmp	r0, #0
   1886a:	d036      	beq.n	188da <lll_prepare_resolve+0x9e>
   1886c:	f894 c01c 	ldrb.w	ip, [r4, #28]
   18870:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   18874:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   18878:	d1f3      	bne.n	18862 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1887a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 18998 <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   1887e:	f8da 3008 	ldr.w	r3, [sl, #8]
   18882:	2b00      	cmp	r3, #0
   18884:	d130      	bne.n	188e8 <lll_prepare_resolve+0xac>
	    (p && is_resume)) {
   18886:	f1b9 0f00 	cmp.w	r9, #0
   1888a:	d16b      	bne.n	18964 <lll_prepare_resolve+0x128>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1888c:	42ac      	cmp	r4, r5
   1888e:	d00c      	beq.n	188aa <lll_prepare_resolve+0x6e>
   18890:	4a42      	ldr	r2, [pc, #264]	; (1899c <lll_prepare_resolve+0x160>)
   18892:	4943      	ldr	r1, [pc, #268]	; (189a0 <lll_prepare_resolve+0x164>)
   18894:	4843      	ldr	r0, [pc, #268]	; (189a4 <lll_prepare_resolve+0x168>)
   18896:	f240 23f1 	movw	r3, #753	; 0x2f1
   1889a:	f008 ff57 	bl	2174c <assert_print>
   1889e:	4040      	eors	r0, r0
   188a0:	f380 8811 	msr	BASEPRI, r0
   188a4:	f04f 0003 	mov.w	r0, #3
   188a8:	df02      	svc	2
	event.curr.param = prepare_param->param;
   188aa:	68eb      	ldr	r3, [r5, #12]
   188ac:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   188b0:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   188b4:	4628      	mov	r0, r5
   188b6:	47c0      	blx	r8
   188b8:	4604      	mov	r4, r0
   188ba:	e003      	b.n	188c4 <lll_prepare_resolve+0x88>
	} while (p->is_aborted || p->is_resume);
   188bc:	7f01      	ldrb	r1, [r0, #28]
   188be:	f011 0103 	ands.w	r1, r1, #3
   188c2:	d039      	beq.n	18938 <lll_prepare_resolve+0xfc>
		p = ull_prepare_dequeue_iter(&idx);
   188c4:	f10d 000f 	add.w	r0, sp, #15
   188c8:	f7f9 f88a 	bl	119e0 <ull_prepare_dequeue_iter>
   188cc:	4602      	mov	r2, r0
		if (!p) {
   188ce:	2800      	cmp	r0, #0
   188d0:	d1f4      	bne.n	188bc <lll_prepare_resolve+0x80>
}
   188d2:	4620      	mov	r0, r4
   188d4:	b004      	add	sp, #16
   188d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   188da:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 18998 <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   188de:	f8da 3008 	ldr.w	r3, [sl, #8]
   188e2:	2b00      	cmp	r3, #0
   188e4:	d0e1      	beq.n	188aa <lll_prepare_resolve+0x6e>
{
   188e6:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   188e8:	462a      	mov	r2, r5
   188ea:	f8cd 9000 	str.w	r9, [sp]
   188ee:	4643      	mov	r3, r8
   188f0:	4639      	mov	r1, r7
   188f2:	4630      	mov	r0, r6
   188f4:	f7f9 f834 	bl	11960 <ull_prepare_enqueue>
		LL_ASSERT(next);
   188f8:	4602      	mov	r2, r0
   188fa:	2800      	cmp	r0, #0
   188fc:	d03c      	beq.n	18978 <lll_prepare_resolve+0x13c>
		if (is_resume) {
   188fe:	f1b9 0f00 	cmp.w	r9, #0
   18902:	d116      	bne.n	18932 <lll_prepare_resolve+0xf6>
		ret  = preempt_ticker_start(first, p, next);
   18904:	2c00      	cmp	r4, #0
   18906:	bf14      	ite	ne
   18908:	4620      	movne	r0, r4
   1890a:	4610      	moveq	r0, r2
   1890c:	4621      	mov	r1, r4
   1890e:	f7ff fc27 	bl	18160 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18912:	f030 0302 	bics.w	r3, r0, #2
   18916:	d00c      	beq.n	18932 <lll_prepare_resolve+0xf6>
   18918:	4a20      	ldr	r2, [pc, #128]	; (1899c <lll_prepare_resolve+0x160>)
   1891a:	4923      	ldr	r1, [pc, #140]	; (189a8 <lll_prepare_resolve+0x16c>)
   1891c:	4821      	ldr	r0, [pc, #132]	; (189a4 <lll_prepare_resolve+0x168>)
   1891e:	f240 23cb 	movw	r3, #715	; 0x2cb
   18922:	f008 ff13 	bl	2174c <assert_print>
   18926:	4040      	eors	r0, r0
   18928:	f380 8811 	msr	BASEPRI, r0
   1892c:	f04f 0003 	mov.w	r0, #3
   18930:	df02      	svc	2
			return -EINPROGRESS;
   18932:	f06f 0476 	mvn.w	r4, #118	; 0x76
   18936:	e7cc      	b.n	188d2 <lll_prepare_resolve+0x96>
	ret = preempt_ticker_start(p, NULL, p);
   18938:	f7ff fc12 	bl	18160 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1893c:	f030 0302 	bics.w	r3, r0, #2
   18940:	d0c7      	beq.n	188d2 <lll_prepare_resolve+0x96>
   18942:	4a16      	ldr	r2, [pc, #88]	; (1899c <lll_prepare_resolve+0x160>)
   18944:	4918      	ldr	r1, [pc, #96]	; (189a8 <lll_prepare_resolve+0x16c>)
   18946:	4817      	ldr	r0, [pc, #92]	; (189a4 <lll_prepare_resolve+0x168>)
   18948:	f240 330e 	movw	r3, #782	; 0x30e
   1894c:	f008 fefe 	bl	2174c <assert_print>
   18950:	4040      	eors	r0, r0
   18952:	f380 8811 	msr	BASEPRI, r0
   18956:	f04f 0003 	mov.w	r0, #3
   1895a:	df02      	svc	2
}
   1895c:	4620      	mov	r0, r4
   1895e:	b004      	add	sp, #16
   18960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   18964:	f8cd 9000 	str.w	r9, [sp]
   18968:	4643      	mov	r3, r8
   1896a:	462a      	mov	r2, r5
   1896c:	4639      	mov	r1, r7
   1896e:	4630      	mov	r0, r6
   18970:	f7f8 fff6 	bl	11960 <ull_prepare_enqueue>
		LL_ASSERT(next);
   18974:	2800      	cmp	r0, #0
   18976:	d1dc      	bne.n	18932 <lll_prepare_resolve+0xf6>
   18978:	4a08      	ldr	r2, [pc, #32]	; (1899c <lll_prepare_resolve+0x160>)
   1897a:	490c      	ldr	r1, [pc, #48]	; (189ac <lll_prepare_resolve+0x170>)
   1897c:	4809      	ldr	r0, [pc, #36]	; (189a4 <lll_prepare_resolve+0x168>)
   1897e:	f240 23be 	movw	r3, #702	; 0x2be
   18982:	f008 fee3 	bl	2174c <assert_print>
   18986:	4040      	eors	r0, r0
   18988:	f380 8811 	msr	BASEPRI, r0
   1898c:	f04f 0003 	mov.w	r0, #3
   18990:	df02      	svc	2
   18992:	2200      	movs	r2, #0
   18994:	e7b3      	b.n	188fe <lll_prepare_resolve+0xc2>
   18996:	bf00      	nop
   18998:	200033b0 	.word	0x200033b0
   1899c:	000292e0 	.word	0x000292e0
   189a0:	00029438 	.word	0x00029438
   189a4:	0002866c 	.word	0x0002866c
   189a8:	00028c0c 	.word	0x00028c0c
   189ac:	00029430 	.word	0x00029430

000189b0 <clock_ready>:
	z_impl_k_sem_give(sem);
   189b0:	f101 0010 	add.w	r0, r1, #16
   189b4:	f007 b9ba 	b.w	1fd2c <z_impl_k_sem_give>

000189b8 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   189b8:	b570      	push	{r4, r5, r6, lr}
   189ba:	4605      	mov	r5, r0
   189bc:	b08a      	sub	sp, #40	; 0x28
   189be:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   189c0:	2201      	movs	r2, #1
   189c2:	2100      	movs	r1, #0
   189c4:	a804      	add	r0, sp, #16
   189c6:	f00e f95b 	bl	26c80 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   189ca:	4b0f      	ldr	r3, [pc, #60]	; (18a08 <blocking_on+0x50>)
   189cc:	9301      	str	r3, [sp, #4]
   189ce:	2600      	movs	r6, #0
   189d0:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   189d2:	4669      	mov	r1, sp
   189d4:	4628      	mov	r0, r5
   189d6:	9603      	str	r6, [sp, #12]
   189d8:	9302      	str	r3, [sp, #8]
   189da:	f008 fcd9 	bl	21390 <onoff_request>
	if (err < 0) {
   189de:	2800      	cmp	r0, #0
   189e0:	db10      	blt.n	18a04 <blocking_on+0x4c>
			return ((t * to_hz + off) / from_hz);
   189e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   189e6:	4631      	mov	r1, r6
   189e8:	f240 30e7 	movw	r0, #999	; 0x3e7
   189ec:	fbe4 0103 	umlal	r0, r1, r4, r3
   189f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   189f4:	2300      	movs	r3, #0
   189f6:	f7e7 ff91 	bl	91c <__aeabi_uldivmod>
   189fa:	4602      	mov	r2, r0
   189fc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   189fe:	a804      	add	r0, sp, #16
   18a00:	f007 f9ba 	bl	1fd78 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   18a04:	b00a      	add	sp, #40	; 0x28
   18a06:	bd70      	pop	{r4, r5, r6, pc}
   18a08:	000189b1 	.word	0x000189b1

00018a0c <lll_clock_init>:

int lll_clock_init(void)
{
   18a0c:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   18a0e:	2001      	movs	r0, #1
   18a10:	f002 fbae 	bl	1b170 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   18a14:	4904      	ldr	r1, [pc, #16]	; (18a28 <lll_clock_init+0x1c>)
   18a16:	2300      	movs	r3, #0
   18a18:	2401      	movs	r4, #1
   18a1a:	604b      	str	r3, [r1, #4]
   18a1c:	608c      	str	r4, [r1, #8]
   18a1e:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   18a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return onoff_request(mgr, &lf_cli);
   18a24:	f008 bcb4 	b.w	21390 <onoff_request>
   18a28:	200033c0 	.word	0x200033c0

00018a2c <lll_clock_deinit>:

int lll_clock_deinit(void)
{
   18a2c:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   18a2e:	2001      	movs	r0, #1
   18a30:	f002 fb9e 	bl	1b170 <z_nrf_clock_control_get_onoff>

	return onoff_release(mgr);
}
   18a34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_release(mgr);
   18a38:	f008 bd02 	b.w	21440 <onoff_release>

00018a3c <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   18a3c:	4b0c      	ldr	r3, [pc, #48]	; (18a70 <lll_clock_wait+0x34>)
   18a3e:	781a      	ldrb	r2, [r3, #0]
   18a40:	b10a      	cbz	r2, 18a46 <lll_clock_wait+0xa>
		return 0;
   18a42:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   18a44:	4770      	bx	lr
{
   18a46:	b510      	push	{r4, lr}
	done = true;
   18a48:	2001      	movs	r0, #1
   18a4a:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   18a4c:	f002 fb90 	bl	1b170 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   18a50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   18a54:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   18a56:	f7ff ffaf 	bl	189b8 <blocking_on>
	if (err) {
   18a5a:	b938      	cbnz	r0, 18a6c <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   18a5c:	4620      	mov	r0, r4
   18a5e:	f008 fcef 	bl	21440 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   18a62:	2802      	cmp	r0, #2
		return 0;
   18a64:	bf0c      	ite	eq
   18a66:	2000      	moveq	r0, #0
		return -EIO;
   18a68:	f06f 0004 	mvnne.w	r0, #4
}
   18a6c:	bd10      	pop	{r4, pc}
   18a6e:	bf00      	nop
   18a70:	20003bd8 	.word	0x20003bd8

00018a74 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   18a74:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   18a76:	4b0a      	ldr	r3, [pc, #40]	; (18aa0 <lll_hfclock_on+0x2c>)
   18a78:	f3bf 8f5b 	dmb	ish
   18a7c:	e853 2f00 	ldrex	r2, [r3]
   18a80:	1c51      	adds	r1, r2, #1
   18a82:	e843 1000 	strex	r0, r1, [r3]
   18a86:	2800      	cmp	r0, #0
   18a88:	d1f8      	bne.n	18a7c <lll_hfclock_on+0x8>
   18a8a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   18a8e:	2a00      	cmp	r2, #0
   18a90:	dd01      	ble.n	18a96 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   18a92:	2000      	movs	r0, #0
   18a94:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   18a96:	f002 fb73 	bl	1b180 <z_nrf_clock_bt_ctlr_hf_request>
}
   18a9a:	2000      	movs	r0, #0
   18a9c:	bd08      	pop	{r3, pc}
   18a9e:	bf00      	nop
   18aa0:	200033bc 	.word	0x200033bc

00018aa4 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   18aa4:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   18aa6:	4b0c      	ldr	r3, [pc, #48]	; (18ad8 <lll_hfclock_off+0x34>)
   18aa8:	681a      	ldr	r2, [r3, #0]
   18aaa:	2a00      	cmp	r2, #0
   18aac:	dd11      	ble.n	18ad2 <lll_hfclock_off+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18aae:	f3bf 8f5b 	dmb	ish
   18ab2:	e853 2f00 	ldrex	r2, [r3]
   18ab6:	1e51      	subs	r1, r2, #1
   18ab8:	e843 1000 	strex	r0, r1, [r3]
   18abc:	2800      	cmp	r0, #0
   18abe:	d1f8      	bne.n	18ab2 <lll_hfclock_off+0xe>
   18ac0:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   18ac4:	2a01      	cmp	r2, #1
   18ac6:	dd01      	ble.n	18acc <lll_hfclock_off+0x28>
		return 0;
   18ac8:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   18aca:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   18acc:	f002 fb6c 	bl	1b1a8 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   18ad0:	e7fa      	b.n	18ac8 <lll_hfclock_off+0x24>
		return -EALREADY;
   18ad2:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   18ad6:	bd08      	pop	{r3, pc}
   18ad8:	200033bc 	.word	0x200033bc

00018adc <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   18adc:	2032      	movs	r0, #50	; 0x32
   18ade:	4770      	bx	lr

00018ae0 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   18ae0:	4b01      	ldr	r3, [pc, #4]	; (18ae8 <lll_clock_ppm_get+0x8>)
}
   18ae2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18ae6:	4770      	bx	lr
   18ae8:	00029478 	.word	0x00029478

00018aec <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   18aec:	b510      	push	{r4, lr}
   18aee:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   18af0:	f7ff fe1c 	bl	1872c <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   18af4:	f001 fcf8 	bl	1a4e8 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   18af8:	4620      	mov	r0, r4
}
   18afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   18afe:	f7ff be21 	b.w	18744 <lll_isr_cleanup>
   18b02:	bf00      	nop

00018b04 <isr_tx>:
{
   18b04:	b538      	push	{r3, r4, r5, lr}
   18b06:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   18b08:	f7ff fdfe 	bl	18708 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   18b0c:	2096      	movs	r0, #150	; 0x96
   18b0e:	f001 fd1d 	bl	1a54c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   18b12:	2300      	movs	r3, #0
   18b14:	4618      	mov	r0, r3
   18b16:	461a      	mov	r2, r3
   18b18:	4619      	mov	r1, r3
   18b1a:	f001 fc65 	bl	1a3e8 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   18b1e:	2001      	movs	r0, #1
   18b20:	f7f8 feb6 	bl	11890 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18b24:	4604      	mov	r4, r0
   18b26:	b368      	cbz	r0, 18b84 <isr_tx+0x80>
	radio_pkt_rx_set(node_rx->pdu);
   18b28:	f104 001c 	add.w	r0, r4, #28
   18b2c:	f001 fb92 	bl	1a254 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   18b30:	f001 fbd2 	bl	1a2d8 <radio_is_ready>
   18b34:	b9c0      	cbnz	r0, 18b68 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   18b36:	4629      	mov	r1, r5
   18b38:	4819      	ldr	r0, [pc, #100]	; (18ba0 <isr_tx+0x9c>)
   18b3a:	f001 fa97 	bl	1a06c <radio_isr_set>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   18b3e:	f001 fded 	bl	1a71c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   18b42:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   18b44:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   18b46:	4608      	mov	r0, r1
   18b48:	f001 fb9a 	bl	1a280 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   18b4c:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   18b4e:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   18b50:	4608      	mov	r0, r1
   18b52:	f001 fb91 	bl	1a278 <radio_tx_chain_delay_get>
   18b56:	442c      	add	r4, r5
   18b58:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   18b5a:	1a20      	subs	r0, r4, r0
   18b5c:	f001 fd96 	bl	1a68c <radio_tmr_hcto_configure>
}
   18b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   18b64:	f001 bdcc 	b.w	1a700 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   18b68:	4a0e      	ldr	r2, [pc, #56]	; (18ba4 <isr_tx+0xa0>)
   18b6a:	490f      	ldr	r1, [pc, #60]	; (18ba8 <isr_tx+0xa4>)
   18b6c:	480f      	ldr	r0, [pc, #60]	; (18bac <isr_tx+0xa8>)
   18b6e:	f240 4387 	movw	r3, #1159	; 0x487
   18b72:	f008 fdeb 	bl	2174c <assert_print>
   18b76:	4040      	eors	r0, r0
   18b78:	f380 8811 	msr	BASEPRI, r0
   18b7c:	f04f 0003 	mov.w	r0, #3
   18b80:	df02      	svc	2
   18b82:	e7d8      	b.n	18b36 <isr_tx+0x32>
	LL_ASSERT(node_rx);
   18b84:	4a07      	ldr	r2, [pc, #28]	; (18ba4 <isr_tx+0xa0>)
   18b86:	490a      	ldr	r1, [pc, #40]	; (18bb0 <isr_tx+0xac>)
   18b88:	4808      	ldr	r0, [pc, #32]	; (18bac <isr_tx+0xa8>)
   18b8a:	f240 4383 	movw	r3, #1155	; 0x483
   18b8e:	f008 fddd 	bl	2174c <assert_print>
   18b92:	4040      	eors	r0, r0
   18b94:	f380 8811 	msr	BASEPRI, r0
   18b98:	f04f 0003 	mov.w	r0, #3
   18b9c:	df02      	svc	2
   18b9e:	e7c3      	b.n	18b28 <isr_tx+0x24>
   18ba0:	00019255 	.word	0x00019255
   18ba4:	00029488 	.word	0x00029488
   18ba8:	000294dc 	.word	0x000294dc
   18bac:	0002866c 	.word	0x0002866c
   18bb0:	000294d4 	.word	0x000294d4

00018bb4 <is_abort_cb>:
	if (next != curr) {
   18bb4:	4281      	cmp	r1, r0
{
   18bb6:	b508      	push	{r3, lr}
	if (next != curr) {
   18bb8:	d00e      	beq.n	18bd8 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   18bba:	7a0b      	ldrb	r3, [r1, #8]
   18bbc:	07db      	lsls	r3, r3, #31
   18bbe:	d402      	bmi.n	18bc6 <is_abort_cb+0x12>
			return -ECANCELED;
   18bc0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   18bc4:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   18bc6:	4b12      	ldr	r3, [pc, #72]	; (18c10 <is_abort_cb+0x5c>)
   18bc8:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   18bca:	f7ff ff53 	bl	18a74 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   18bce:	2800      	cmp	r0, #0
   18bd0:	db0f      	blt.n	18bf2 <is_abort_cb+0x3e>
{
   18bd2:	f06f 000a 	mvn.w	r0, #10
}
   18bd6:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   18bd8:	7b0b      	ldrb	r3, [r1, #12]
   18bda:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   18bde:	690b      	ldr	r3, [r1, #16]
   18be0:	781b      	ldrb	r3, [r3, #0]
   18be2:	f003 030f 	and.w	r3, r3, #15
		return 0;
   18be6:	2b01      	cmp	r3, #1
   18be8:	bf14      	ite	ne
   18bea:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   18bee:	2000      	moveq	r0, #0
}
   18bf0:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   18bf2:	4a08      	ldr	r2, [pc, #32]	; (18c14 <is_abort_cb+0x60>)
   18bf4:	4908      	ldr	r1, [pc, #32]	; (18c18 <is_abort_cb+0x64>)
   18bf6:	4809      	ldr	r0, [pc, #36]	; (18c1c <is_abort_cb+0x68>)
   18bf8:	f240 433c 	movw	r3, #1084	; 0x43c
   18bfc:	f008 fda6 	bl	2174c <assert_print>
   18c00:	4040      	eors	r0, r0
   18c02:	f380 8811 	msr	BASEPRI, r0
   18c06:	f04f 0003 	mov.w	r0, #3
   18c0a:	df02      	svc	2
   18c0c:	e7e1      	b.n	18bd2 <is_abort_cb+0x1e>
   18c0e:	bf00      	nop
   18c10:	00019141 	.word	0x00019141
   18c14:	00029488 	.word	0x00029488
   18c18:	000293f8 	.word	0x000293f8
   18c1c:	0002866c 	.word	0x0002866c

00018c20 <isr_abort_all>:

#if defined(CONFIG_BT_PERIPHERAL)
static void isr_abort_all(void *param)
{
   18c20:	b510      	push	{r4, lr}
   18c22:	4604      	mov	r4, r0
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, lll_disable};
	uint32_t ret;

	/* Clear radio status and events */
	lll_isr_status_reset();
   18c24:	f7ff fd82 	bl	1872c <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   18c28:	f001 fc5e 	bl	1a4e8 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   18c2c:	4620      	mov	r0, r4
   18c2e:	f7ff fd89 	bl	18744 <lll_isr_cleanup>

	/* Abort any LLL prepare/resume enqueued in pipeline */
	mfy.param = param;
   18c32:	4b0b      	ldr	r3, [pc, #44]	; (18c60 <isr_abort_all+0x40>)
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   18c34:	2100      	movs	r1, #0
   18c36:	2201      	movs	r2, #1
   18c38:	4608      	mov	r0, r1
	mfy.param = param;
   18c3a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   18c3c:	f7f5 fab4 	bl	e1a8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   18c40:	b900      	cbnz	r0, 18c44 <isr_abort_all+0x24>
}
   18c42:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   18c44:	4a07      	ldr	r2, [pc, #28]	; (18c64 <isr_abort_all+0x44>)
   18c46:	4908      	ldr	r1, [pc, #32]	; (18c68 <isr_abort_all+0x48>)
   18c48:	4808      	ldr	r0, [pc, #32]	; (18c6c <isr_abort_all+0x4c>)
   18c4a:	f44f 63b2 	mov.w	r3, #1424	; 0x590
   18c4e:	f008 fd7d 	bl	2174c <assert_print>
   18c52:	4040      	eors	r0, r0
   18c54:	f380 8811 	msr	BASEPRI, r0
   18c58:	f04f 0003 	mov.w	r0, #3
   18c5c:	df02      	svc	2
}
   18c5e:	bd10      	pop	{r4, pc}
   18c60:	200006c4 	.word	0x200006c4
   18c64:	00029488 	.word	0x00029488
   18c68:	00028b38 	.word	0x00028b38
   18c6c:	0002866c 	.word	0x0002866c

00018c70 <abort_cb>:
{
   18c70:	b510      	push	{r4, lr}
	if (!prepare_param) {
   18c72:	b1d8      	cbz	r0, 18cac <abort_cb+0x3c>
	err = lll_hfclock_off();
   18c74:	460c      	mov	r4, r1
   18c76:	f7ff ff15 	bl	18aa4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18c7a:	2800      	cmp	r0, #0
   18c7c:	db04      	blt.n	18c88 <abort_cb+0x18>
	lll_done(param);
   18c7e:	4620      	mov	r0, r4
}
   18c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18c84:	f7ff bc96 	b.w	185b4 <lll_done>
	LL_ASSERT(err >= 0);
   18c88:	4a0c      	ldr	r2, [pc, #48]	; (18cbc <abort_cb+0x4c>)
   18c8a:	490d      	ldr	r1, [pc, #52]	; (18cc0 <abort_cb+0x50>)
   18c8c:	480d      	ldr	r0, [pc, #52]	; (18cc4 <abort_cb+0x54>)
   18c8e:	f240 4362 	movw	r3, #1122	; 0x462
   18c92:	f008 fd5b 	bl	2174c <assert_print>
   18c96:	4040      	eors	r0, r0
   18c98:	f380 8811 	msr	BASEPRI, r0
   18c9c:	f04f 0003 	mov.w	r0, #3
   18ca0:	df02      	svc	2
	lll_done(param);
   18ca2:	4620      	mov	r0, r4
}
   18ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18ca8:	f7ff bc84 	b.w	185b4 <lll_done>
		radio_isr_set(isr_abort, param);
   18cac:	4806      	ldr	r0, [pc, #24]	; (18cc8 <abort_cb+0x58>)
   18cae:	f001 f9dd 	bl	1a06c <radio_isr_set>
}
   18cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   18cb6:	f001 baef 	b.w	1a298 <radio_disable>
   18cba:	bf00      	nop
   18cbc:	00029488 	.word	0x00029488
   18cc0:	000293f8 	.word	0x000293f8
   18cc4:	0002866c 	.word	0x0002866c
   18cc8:	00018aed 	.word	0x00018aed

00018ccc <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   18ccc:	4b08      	ldr	r3, [pc, #32]	; (18cf0 <lll_adv_init+0x24>)
   18cce:	2204      	movs	r2, #4
{
   18cd0:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   18cd2:	1898      	adds	r0, r3, r2
   18cd4:	2128      	movs	r1, #40	; 0x28
   18cd6:	f7f5 f95b 	bl	df90 <mem_init>
	MFIFO_INIT(pdu_free);
   18cda:	4b06      	ldr	r3, [pc, #24]	; (18cf4 <lll_adv_init+0x28>)
   18cdc:	2400      	movs	r4, #0
   18cde:	809c      	strh	r4, [r3, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   18ce0:	2202      	movs	r2, #2
   18ce2:	4621      	mov	r1, r4
   18ce4:	4804      	ldr	r0, [pc, #16]	; (18cf8 <lll_adv_init+0x2c>)
   18ce6:	f00d ffcb 	bl	26c80 <z_impl_k_sem_init>
}
   18cea:	4620      	mov	r0, r4
   18cec:	bd10      	pop	{r4, pc}
   18cee:	bf00      	nop
   18cf0:	200033f0 	.word	0x200033f0
   18cf4:	200006d4 	.word	0x200006d4
   18cf8:	200033d8 	.word	0x200033d8

00018cfc <lll_adv_reset>:
int lll_adv_reset(void)
   18cfc:	4b08      	ldr	r3, [pc, #32]	; (18d20 <lll_adv_reset+0x24>)
   18cfe:	2204      	movs	r2, #4
   18d00:	b510      	push	{r4, lr}
   18d02:	1898      	adds	r0, r3, r2
   18d04:	2128      	movs	r1, #40	; 0x28
   18d06:	f7f5 f943 	bl	df90 <mem_init>
   18d0a:	4b06      	ldr	r3, [pc, #24]	; (18d24 <lll_adv_reset+0x28>)
   18d0c:	2400      	movs	r4, #0
   18d0e:	809c      	strh	r4, [r3, #4]
   18d10:	2202      	movs	r2, #2
   18d12:	4621      	mov	r1, r4
   18d14:	4804      	ldr	r0, [pc, #16]	; (18d28 <lll_adv_reset+0x2c>)
   18d16:	f00d ffb3 	bl	26c80 <z_impl_k_sem_init>
   18d1a:	4620      	mov	r0, r4
   18d1c:	bd10      	pop	{r4, pc}
   18d1e:	bf00      	nop
   18d20:	200033f0 	.word	0x200033f0
   18d24:	200006d4 	.word	0x200006d4
   18d28:	200033d8 	.word	0x200033d8

00018d2c <lll_adv_data_init>:
{
   18d2c:	b510      	push	{r4, lr}
   18d2e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   18d30:	4805      	ldr	r0, [pc, #20]	; (18d48 <lll_adv_data_init+0x1c>)
   18d32:	f7f5 f95d 	bl	dff0 <mem_acquire>
	if (!p) {
   18d36:	b120      	cbz	r0, 18d42 <lll_adv_data_init+0x16>
   18d38:	4603      	mov	r3, r0
	p->len = 0U;
   18d3a:	2000      	movs	r0, #0
   18d3c:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   18d3e:	6063      	str	r3, [r4, #4]
}
   18d40:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   18d42:	f06f 000b 	mvn.w	r0, #11
}
   18d46:	bd10      	pop	{r4, pc}
   18d48:	200033f0 	.word	0x200033f0

00018d4c <lll_adv_data_reset>:
{
   18d4c:	4603      	mov	r3, r0
	pdu->first = 0U;
   18d4e:	2000      	movs	r0, #0
   18d50:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   18d52:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   18d54:	6098      	str	r0, [r3, #8]
}
   18d56:	4770      	bx	lr

00018d58 <lll_adv_pdu_alloc_pdu_adv>:
{
   18d58:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   18d5a:	4c2d      	ldr	r4, [pc, #180]	; (18e10 <lll_adv_pdu_alloc_pdu_adv+0xb8>)
   18d5c:	7923      	ldrb	r3, [r4, #4]
	if (first == last) {
   18d5e:	7962      	ldrb	r2, [r4, #5]
   18d60:	7821      	ldrb	r1, [r4, #0]
   18d62:	429a      	cmp	r2, r3
   18d64:	d003      	beq.n	18d6e <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   18d66:	fb01 4303 	mla	r3, r1, r3, r4
   18d6a:	689d      	ldr	r5, [r3, #8]
	if (p) {
   18d6c:	b935      	cbnz	r5, 18d7c <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   18d6e:	4829      	ldr	r0, [pc, #164]	; (18e14 <lll_adv_pdu_alloc_pdu_adv+0xbc>)
   18d70:	f7f5 f93e 	bl	dff0 <mem_acquire>
	if (p) {
   18d74:	4605      	mov	r5, r0
   18d76:	b188      	cbz	r0, 18d9c <lll_adv_pdu_alloc_pdu_adv+0x44>
}
   18d78:	4628      	mov	r0, r5
   18d7a:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_reset(sem);
   18d7c:	4826      	ldr	r0, [pc, #152]	; (18e18 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   18d7e:	f007 f823 	bl	1fdc8 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   18d82:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   18d84:	7962      	ldrb	r2, [r4, #5]
		MFIFO_DEQUEUE(pdu_free);
   18d86:	78a1      	ldrb	r1, [r4, #2]
   18d88:	429a      	cmp	r2, r3
   18d8a:	d0f5      	beq.n	18d78 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   18d8c:	3301      	adds	r3, #1
   18d8e:	b2db      	uxtb	r3, r3
		_first = 0U;
   18d90:	4299      	cmp	r1, r3
   18d92:	bf08      	it	eq
   18d94:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18d96:	7123      	strb	r3, [r4, #4]
}
   18d98:	4628      	mov	r0, r5
   18d9a:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   18d9c:	481e      	ldr	r0, [pc, #120]	; (18e18 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   18d9e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   18da2:	2300      	movs	r3, #0
   18da4:	f006 ffe8 	bl	1fd78 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   18da8:	b9b0      	cbnz	r0, 18dd8 <lll_adv_pdu_alloc_pdu_adv+0x80>
	z_impl_k_sem_reset(sem);
   18daa:	481b      	ldr	r0, [pc, #108]	; (18e18 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   18dac:	f007 f80c 	bl	1fdc8 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   18db0:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   18db2:	7961      	ldrb	r1, [r4, #5]
	p = MFIFO_DEQUEUE(pdu_free);
   18db4:	7822      	ldrb	r2, [r4, #0]
   18db6:	78a0      	ldrb	r0, [r4, #2]
   18db8:	4299      	cmp	r1, r3
   18dba:	d01b      	beq.n	18df4 <lll_adv_pdu_alloc_pdu_adv+0x9c>
	mem = *((void **)(fifo + _first * size));
   18dbc:	fb13 f202 	smulbb	r2, r3, r2
   18dc0:	4916      	ldr	r1, [pc, #88]	; (18e1c <lll_adv_pdu_alloc_pdu_adv+0xc4>)
	_first += 1U;
   18dc2:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   18dc4:	588a      	ldr	r2, [r1, r2]
	_first += 1U;
   18dc6:	b2db      	uxtb	r3, r3
		_first = 0U;
   18dc8:	4298      	cmp	r0, r3
   18dca:	bf08      	it	eq
   18dcc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18dce:	7123      	strb	r3, [r4, #4]
	LL_ASSERT(p);
   18dd0:	b182      	cbz	r2, 18df4 <lll_adv_pdu_alloc_pdu_adv+0x9c>
   18dd2:	4615      	mov	r5, r2
}
   18dd4:	4628      	mov	r0, r5
   18dd6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!err);
   18dd8:	4a11      	ldr	r2, [pc, #68]	; (18e20 <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   18dda:	4912      	ldr	r1, [pc, #72]	; (18e24 <lll_adv_pdu_alloc_pdu_adv+0xcc>)
   18ddc:	4812      	ldr	r0, [pc, #72]	; (18e28 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   18dde:	f240 13b3 	movw	r3, #435	; 0x1b3
   18de2:	f008 fcb3 	bl	2174c <assert_print>
   18de6:	4040      	eors	r0, r0
   18de8:	f380 8811 	msr	BASEPRI, r0
   18dec:	f04f 0003 	mov.w	r0, #3
   18df0:	df02      	svc	2
   18df2:	e7da      	b.n	18daa <lll_adv_pdu_alloc_pdu_adv+0x52>
	LL_ASSERT(p);
   18df4:	4a0a      	ldr	r2, [pc, #40]	; (18e20 <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   18df6:	490d      	ldr	r1, [pc, #52]	; (18e2c <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   18df8:	480b      	ldr	r0, [pc, #44]	; (18e28 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   18dfa:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   18dfe:	f008 fca5 	bl	2174c <assert_print>
   18e02:	4040      	eors	r0, r0
   18e04:	f380 8811 	msr	BASEPRI, r0
   18e08:	f04f 0003 	mov.w	r0, #3
   18e0c:	df02      	svc	2
   18e0e:	e7b3      	b.n	18d78 <lll_adv_pdu_alloc_pdu_adv+0x20>
   18e10:	200006d4 	.word	0x200006d4
   18e14:	200033f0 	.word	0x200033f0
   18e18:	200033d8 	.word	0x200033d8
   18e1c:	200006dc 	.word	0x200006dc
   18e20:	00029488 	.word	0x00029488
   18e24:	00028a38 	.word	0x00028a38
   18e28:	0002866c 	.word	0x0002866c
   18e2c:	000294f0 	.word	0x000294f0

00018e30 <lll_adv_pdu_alloc>:
{
   18e30:	b510      	push	{r4, lr}
	first = pdu->first;
   18e32:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   18e34:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   18e36:	429a      	cmp	r2, r3
   18e38:	d014      	beq.n	18e64 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   18e3a:	b2d4      	uxtb	r4, r2
   18e3c:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   18e3e:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   18e40:	4294      	cmp	r4, r2
   18e42:	d004      	beq.n	18e4e <lll_adv_pdu_alloc+0x1e>
			last++;
   18e44:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   18e46:	7043      	strb	r3, [r0, #1]
			last++;
   18e48:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   18e4a:	2b02      	cmp	r3, #2
   18e4c:	d00e      	beq.n	18e6c <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   18e4e:	461a      	mov	r2, r3
	*idx = last;
   18e50:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   18e54:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   18e56:	6860      	ldr	r0, [r4, #4]
	if (p) {
   18e58:	b100      	cbz	r0, 18e5c <lll_adv_pdu_alloc+0x2c>
}
   18e5a:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   18e5c:	f7ff ff7c 	bl	18d58 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   18e60:	6060      	str	r0, [r4, #4]
}
   18e62:	bd10      	pop	{r4, pc}
		last++;
   18e64:	3301      	adds	r3, #1
   18e66:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   18e68:	2b02      	cmp	r3, #2
   18e6a:	d1f0      	bne.n	18e4e <lll_adv_pdu_alloc+0x1e>
{
   18e6c:	2200      	movs	r2, #0
			last = 0U;
   18e6e:	4613      	mov	r3, r2
   18e70:	e7ee      	b.n	18e50 <lll_adv_pdu_alloc+0x20>
   18e72:	bf00      	nop

00018e74 <lll_adv_pdu_latest_get>:
{
   18e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   18e76:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   18e78:	7843      	ldrb	r3, [r0, #1]
   18e7a:	4293      	cmp	r3, r2
{
   18e7c:	4604      	mov	r4, r0
	if (first != pdu->last) {
   18e7e:	d02c      	beq.n	18eda <lll_adv_pdu_latest_get+0x66>
		pdu_idx = first;
   18e80:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   18e82:	4a18      	ldr	r2, [pc, #96]	; (18ee4 <lll_adv_pdu_latest_get+0x70>)
   18e84:	f892 e005 	ldrb.w	lr, [r2, #5]
   18e88:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	last = last + 1;
   18e8c:	f10e 0301 	add.w	r3, lr, #1
	if (last == count) {
   18e90:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   18e92:	b2db      	uxtb	r3, r3
		last = 0U;
   18e94:	4298      	cmp	r0, r3
   18e96:	bf08      	it	eq
   18e98:	2300      	moveq	r3, #0
   18e9a:	7910      	ldrb	r0, [r2, #4]
	if (last == first) {
   18e9c:	4298      	cmp	r0, r3
   18e9e:	460e      	mov	r6, r1
		p = pdu->pdu[pdu_idx];
   18ea0:	6879      	ldr	r1, [r7, #4]
   18ea2:	d00b      	beq.n	18ebc <lll_adv_pdu_latest_get+0x48>
			MFIFO_BY_IDX_ENQUEUE(pdu_free, free_idx, p);
   18ea4:	4694      	mov	ip, r2
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18ea6:	f81c 0b08 	ldrb.w	r0, [ip], #8
   18eaa:	fb10 f00e 	smulbb	r0, r0, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   18eae:	f84c 1000 	str.w	r1, [ip, r0]
	*last = idx; /* Commit: Update write index */
   18eb2:	7153      	strb	r3, [r2, #5]
	z_impl_k_sem_give(sem);
   18eb4:	480c      	ldr	r0, [pc, #48]	; (18ee8 <lll_adv_pdu_latest_get+0x74>)
   18eb6:	f006 ff39 	bl	1fd2c <z_impl_k_sem_give>
			p = next;
   18eba:	2100      	movs	r1, #0
		first += 1U;
   18ebc:	1c6b      	adds	r3, r5, #1
   18ebe:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   18ec0:	2b02      	cmp	r3, #2
   18ec2:	bf0a      	itet	eq
   18ec4:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   18ec6:	461a      	movne	r2, r3
			first = 0U;
   18ec8:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   18eca:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   18ecc:	7023      	strb	r3, [r4, #0]
		*is_modified = 1U;
   18ece:	2101      	movs	r1, #1
	return (void *)pdu->pdu[first];
   18ed0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   18ed4:	7031      	strb	r1, [r6, #0]
}
   18ed6:	6860      	ldr	r0, [r4, #4]
   18ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   18eda:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   18edc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   18ee0:	6860      	ldr	r0, [r4, #4]
   18ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ee4:	200006d4 	.word	0x200006d4
   18ee8:	200033d8 	.word	0x200033d8

00018eec <chan_prepare.isra.0>:
#endif /* CONFIG_BT_PERIPHERAL */

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   18eec:	b530      	push	{r4, r5, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   18eee:	7a03      	ldrb	r3, [r0, #8]
   18ef0:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   18ef4:	4604      	mov	r4, r0
   18ef6:	2b00      	cmp	r3, #0
   18ef8:	fa93 f0a3 	rbit	r0, r3
   18efc:	fab0 f080 	clz	r0, r0
   18f00:	bf08      	it	eq
   18f02:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   18f06:	b083      	sub	sp, #12
   18f08:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   18f0c:	d03b      	beq.n	18f86 <chan_prepare.isra.0+0x9a>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   18f0e:	7a21      	ldrb	r1, [r4, #8]
   18f10:	1e5a      	subs	r2, r3, #1
   18f12:	4013      	ands	r3, r2
   18f14:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   18f18:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   18f1c:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   18f1e:	f7ff fbad 	bl	1867c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   18f22:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   18f24:	f10d 0107 	add.w	r1, sp, #7
   18f28:	f104 000c 	add.w	r0, r4, #12
   18f2c:	f88d 3007 	strb.w	r3, [sp, #7]
   18f30:	f7ff ffa0 	bl	18e74 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   18f34:	4605      	mov	r5, r0
   18f36:	2800      	cmp	r0, #0
   18f38:	d036      	beq.n	18fa8 <chan_prepare.isra.0+0xbc>

	radio_pkt_tx_set(pdu);
   18f3a:	4628      	mov	r0, r5
   18f3c:	f001 f990 	bl	1a260 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   18f40:	782b      	ldrb	r3, [r5, #0]
   18f42:	f003 030f 	and.w	r3, r3, #15
   18f46:	2b02      	cmp	r3, #2
   18f48:	d014      	beq.n	18f74 <chan_prepare.isra.0+0x88>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   18f4a:	f10d 0107 	add.w	r1, sp, #7
   18f4e:	f104 0018 	add.w	r0, r4, #24
   18f52:	f7ff ff8f 	bl	18e74 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   18f56:	2800      	cmp	r0, #0
   18f58:	d034      	beq.n	18fc4 <chan_prepare.isra.0+0xd8>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   18f5a:	4621      	mov	r1, r4
   18f5c:	4820      	ldr	r0, [pc, #128]	; (18fe0 <chan_prepare.isra.0+0xf4>)
   18f5e:	f001 f885 	bl	1a06c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   18f62:	2096      	movs	r0, #150	; 0x96
   18f64:	f001 faf2 	bl	1a54c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   18f68:	2000      	movs	r0, #0
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   18f6a:	b003      	add	sp, #12
   18f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_switch_complete_and_rx(0);
   18f70:	f001 b9f2 	b.w	1a358 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
   18f74:	481b      	ldr	r0, [pc, #108]	; (18fe4 <chan_prepare.isra.0+0xf8>)
   18f76:	4621      	mov	r1, r4
   18f78:	f001 f878 	bl	1a06c <radio_isr_set>
}
   18f7c:	b003      	add	sp, #12
   18f7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_switch_complete_and_disable();
   18f82:	f001 ba91 	b.w	1a4a8 <radio_switch_complete_and_disable>
	LL_ASSERT(chan);
   18f86:	4a18      	ldr	r2, [pc, #96]	; (18fe8 <chan_prepare.isra.0+0xfc>)
   18f88:	4918      	ldr	r1, [pc, #96]	; (18fec <chan_prepare.isra.0+0x100>)
   18f8a:	4819      	ldr	r0, [pc, #100]	; (18ff0 <chan_prepare.isra.0+0x104>)
   18f8c:	f240 539b 	movw	r3, #1435	; 0x59b
   18f90:	f008 fbdc 	bl	2174c <assert_print>
   18f94:	4040      	eors	r0, r0
   18f96:	f380 8811 	msr	BASEPRI, r0
   18f9a:	f04f 0003 	mov.w	r0, #3
   18f9e:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   18fa0:	7a23      	ldrb	r3, [r4, #8]
   18fa2:	f3c3 1302 	ubfx	r3, r3, #4, #3
   18fa6:	e7b2      	b.n	18f0e <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   18fa8:	4a0f      	ldr	r2, [pc, #60]	; (18fe8 <chan_prepare.isra.0+0xfc>)
   18faa:	4912      	ldr	r1, [pc, #72]	; (18ff4 <chan_prepare.isra.0+0x108>)
   18fac:	4810      	ldr	r0, [pc, #64]	; (18ff0 <chan_prepare.isra.0+0x104>)
   18fae:	f240 53a4 	movw	r3, #1444	; 0x5a4
   18fb2:	f008 fbcb 	bl	2174c <assert_print>
   18fb6:	4040      	eors	r0, r0
   18fb8:	f380 8811 	msr	BASEPRI, r0
   18fbc:	f04f 0003 	mov.w	r0, #3
   18fc0:	df02      	svc	2
   18fc2:	e7ba      	b.n	18f3a <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   18fc4:	4a08      	ldr	r2, [pc, #32]	; (18fe8 <chan_prepare.isra.0+0xfc>)
   18fc6:	490c      	ldr	r1, [pc, #48]	; (18ff8 <chan_prepare.isra.0+0x10c>)
   18fc8:	4809      	ldr	r0, [pc, #36]	; (18ff0 <chan_prepare.isra.0+0x104>)
   18fca:	f240 53ae 	movw	r3, #1454	; 0x5ae
   18fce:	f008 fbbd 	bl	2174c <assert_print>
   18fd2:	4040      	eors	r0, r0
   18fd4:	f380 8811 	msr	BASEPRI, r0
   18fd8:	f04f 0003 	mov.w	r0, #3
   18fdc:	df02      	svc	2
   18fde:	e7bc      	b.n	18f5a <chan_prepare.isra.0+0x6e>
   18fe0:	00018b05 	.word	0x00018b05
   18fe4:	00018ffd 	.word	0x00018ffd
   18fe8:	00029488 	.word	0x00029488
   18fec:	000294f4 	.word	0x000294f4
   18ff0:	0002866c 	.word	0x0002866c
   18ff4:	000294fc 	.word	0x000294fc
   18ff8:	00029500 	.word	0x00029500

00018ffc <isr_done>:
{
   18ffc:	b510      	push	{r4, lr}
   18ffe:	4604      	mov	r4, r0
	lll_isr_status_reset();
   19000:	f7ff fb94 	bl	1872c <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   19004:	7a23      	ldrb	r3, [r4, #8]
   19006:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1900a:	2a01      	cmp	r2, #1
   1900c:	d105      	bne.n	1901a <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1900e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   19012:	f362 1306 	bfi	r3, r2, #4, #3
   19016:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   19018:	b2db      	uxtb	r3, r3
   1901a:	f013 0f70 	tst.w	r3, #112	; 0x70
   1901e:	d005      	beq.n	1902c <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   19020:	6863      	ldr	r3, [r4, #4]
   19022:	b153      	cbz	r3, 1903a <isr_done+0x3e>
   19024:	f893 3020 	ldrb.w	r3, [r3, #32]
   19028:	079b      	lsls	r3, r3, #30
   1902a:	d506      	bpl.n	1903a <isr_done+0x3e>
	radio_filter_disable();
   1902c:	f001 fa5c 	bl	1a4e8 <radio_filter_disable>
	lll_isr_cleanup(param);
   19030:	4620      	mov	r0, r4
}
   19032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   19036:	f7ff bb85 	b.w	18744 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1903a:	4620      	mov	r0, r4
   1903c:	f7ff ff56 	bl	18eec <chan_prepare.isra.0>
		radio_tx_enable();
   19040:	f001 f924 	bl	1a28c <radio_tx_enable>
}
   19044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   19048:	f001 bb5a 	b.w	1a700 <radio_tmr_end_capture>

0001904c <prepare_cb>:
{
   1904c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1904e:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   19050:	6863      	ldr	r3, [r4, #4]
{
   19052:	b083      	sub	sp, #12
   19054:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   19056:	2b00      	cmp	r3, #0
   19058:	d158      	bne.n	1910c <prepare_cb+0xc0>
	radio_reset();
   1905a:	f001 f849 	bl	1a0f0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1905e:	2000      	movs	r0, #0
   19060:	f001 f89c 	bl	1a19c <radio_tx_power_set>
	radio_phy_set(0, 0);
   19064:	2100      	movs	r1, #0
   19066:	4608      	mov	r0, r1
   19068:	f001 f88a 	bl	1a180 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1906c:	2200      	movs	r2, #0
   1906e:	2125      	movs	r1, #37	; 0x25
   19070:	2008      	movs	r0, #8
   19072:	f001 f8c9 	bl	1a208 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   19076:	4b2b      	ldr	r3, [pc, #172]	; (19124 <prepare_cb+0xd8>)
   19078:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1907a:	a801      	add	r0, sp, #4
   1907c:	f001 f8ac 	bl	1a1d8 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   19080:	4929      	ldr	r1, [pc, #164]	; (19128 <prepare_cb+0xdc>)
   19082:	f240 605b 	movw	r0, #1627	; 0x65b
   19086:	f001 f945 	bl	1a314 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1908a:	7a23      	ldrb	r3, [r4, #8]
   1908c:	f3c3 0242 	ubfx	r2, r3, #1, #3
   19090:	f362 1306 	bfi	r3, r2, #4, #3
   19094:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   19096:	4620      	mov	r0, r4
   19098:	f7ff ff28 	bl	18eec <chan_prepare.isra.0>
	ull = HDR_LLL2ULL(lll);
   1909c:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1909e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   190a0:	4638      	mov	r0, r7
   190a2:	f7ff fadd 	bl	18660 <lll_event_offset_get>
   190a6:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   190a8:	686a      	ldr	r2, [r5, #4]
   190aa:	f106 0109 	add.w	r1, r6, #9
   190ae:	2001      	movs	r0, #1
   190b0:	f001 fa58 	bl	1a564 <radio_tmr_start>
	radio_tmr_end_capture();
   190b4:	f001 fb24 	bl	1a700 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   190b8:	4620      	mov	r0, r4
   190ba:	f7f9 fb81 	bl	127c0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   190be:	1c81      	adds	r1, r0, #2
   190c0:	4632      	mov	r2, r6
   190c2:	b2c9      	uxtb	r1, r1
   190c4:	4638      	mov	r0, r7
   190c6:	f7e8 fdeb 	bl	1ca0 <lll_preempt_calc>
   190ca:	b930      	cbnz	r0, 190da <prepare_cb+0x8e>
		ret = lll_prepare_done(lll);
   190cc:	4620      	mov	r0, r4
   190ce:	f7ff fa6f 	bl	185b0 <lll_prepare_done>
		LL_ASSERT(!ret);
   190d2:	b958      	cbnz	r0, 190ec <prepare_cb+0xa0>
}
   190d4:	2000      	movs	r0, #0
   190d6:	b003      	add	sp, #12
   190d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   190da:	4814      	ldr	r0, [pc, #80]	; (1912c <prepare_cb+0xe0>)
   190dc:	4621      	mov	r1, r4
   190de:	f000 ffc5 	bl	1a06c <radio_isr_set>
		radio_disable();
   190e2:	f001 f8d9 	bl	1a298 <radio_disable>
}
   190e6:	2000      	movs	r0, #0
   190e8:	b003      	add	sp, #12
   190ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(!ret);
   190ec:	4a10      	ldr	r2, [pc, #64]	; (19130 <prepare_cb+0xe4>)
   190ee:	4911      	ldr	r1, [pc, #68]	; (19134 <prepare_cb+0xe8>)
   190f0:	4811      	ldr	r0, [pc, #68]	; (19138 <prepare_cb+0xec>)
   190f2:	f240 4313 	movw	r3, #1043	; 0x413
   190f6:	f008 fb29 	bl	2174c <assert_print>
   190fa:	4040      	eors	r0, r0
   190fc:	f380 8811 	msr	BASEPRI, r0
   19100:	f04f 0003 	mov.w	r0, #3
   19104:	df02      	svc	2
}
   19106:	2000      	movs	r0, #0
   19108:	b003      	add	sp, #12
   1910a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   1910c:	f893 3020 	ldrb.w	r3, [r3, #32]
   19110:	079b      	lsls	r3, r3, #30
   19112:	d0a2      	beq.n	1905a <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   19114:	4809      	ldr	r0, [pc, #36]	; (1913c <prepare_cb+0xf0>)
   19116:	4621      	mov	r1, r4
   19118:	f000 ffa8 	bl	1a06c <radio_isr_set>
		radio_disable();
   1911c:	f001 f8bc 	bl	1a298 <radio_disable>
		return 0;
   19120:	e7d8      	b.n	190d4 <prepare_cb+0x88>
   19122:	bf00      	nop
   19124:	8e89bed6 	.word	0x8e89bed6
   19128:	00555555 	.word	0x00555555
   1912c:	00018aed 	.word	0x00018aed
   19130:	00029488 	.word	0x00029488
   19134:	00028b38 	.word	0x00028b38
   19138:	0002866c 	.word	0x0002866c
   1913c:	000187d9 	.word	0x000187d9

00019140 <resume_prepare_cb>:
{
   19140:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   19142:	68c3      	ldr	r3, [r0, #12]
{
   19144:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   19146:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   19148:	f7f6 f982 	bl	f450 <ticker_ticks_now_get>
   1914c:	4605      	mov	r5, r0
   1914e:	4630      	mov	r0, r6
   19150:	f7ff fa86 	bl	18660 <lll_event_offset_get>
	p->remainder = 0;
   19154:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   19156:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   19158:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1915c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1915e:	4620      	mov	r0, r4
}
   19160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   19164:	f7ff bf72 	b.w	1904c <prepare_cb>

00019168 <lll_adv_prepare>:
{
   19168:	b510      	push	{r4, lr}
   1916a:	b082      	sub	sp, #8
   1916c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1916e:	f7ff fc81 	bl	18a74 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   19172:	2800      	cmp	r0, #0
   19174:	db1a      	blt.n	191ac <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   19176:	4a14      	ldr	r2, [pc, #80]	; (191c8 <lll_adv_prepare+0x60>)
   19178:	4914      	ldr	r1, [pc, #80]	; (191cc <lll_adv_prepare+0x64>)
   1917a:	4815      	ldr	r0, [pc, #84]	; (191d0 <lll_adv_prepare+0x68>)
   1917c:	9400      	str	r4, [sp, #0]
   1917e:	2300      	movs	r3, #0
   19180:	f7f8 fed6 	bl	11f30 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   19184:	b108      	cbz	r0, 1918a <lll_adv_prepare+0x22>
   19186:	3077      	adds	r0, #119	; 0x77
   19188:	d101      	bne.n	1918e <lll_adv_prepare+0x26>
}
   1918a:	b002      	add	sp, #8
   1918c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1918e:	4a11      	ldr	r2, [pc, #68]	; (191d4 <lll_adv_prepare+0x6c>)
   19190:	4911      	ldr	r1, [pc, #68]	; (191d8 <lll_adv_prepare+0x70>)
   19192:	4812      	ldr	r0, [pc, #72]	; (191dc <lll_adv_prepare+0x74>)
   19194:	f44f 732b 	mov.w	r3, #684	; 0x2ac
   19198:	f008 fad8 	bl	2174c <assert_print>
   1919c:	4040      	eors	r0, r0
   1919e:	f380 8811 	msr	BASEPRI, r0
   191a2:	f04f 0003 	mov.w	r0, #3
   191a6:	df02      	svc	2
}
   191a8:	b002      	add	sp, #8
   191aa:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   191ac:	4a09      	ldr	r2, [pc, #36]	; (191d4 <lll_adv_prepare+0x6c>)
   191ae:	490c      	ldr	r1, [pc, #48]	; (191e0 <lll_adv_prepare+0x78>)
   191b0:	480a      	ldr	r0, [pc, #40]	; (191dc <lll_adv_prepare+0x74>)
   191b2:	f240 23a9 	movw	r3, #681	; 0x2a9
   191b6:	f008 fac9 	bl	2174c <assert_print>
   191ba:	4040      	eors	r0, r0
   191bc:	f380 8811 	msr	BASEPRI, r0
   191c0:	f04f 0003 	mov.w	r0, #3
   191c4:	df02      	svc	2
   191c6:	e7d6      	b.n	19176 <lll_adv_prepare+0xe>
   191c8:	0001904d 	.word	0x0001904d
   191cc:	00018c71 	.word	0x00018c71
   191d0:	00018bb5 	.word	0x00018bb5
   191d4:	00029488 	.word	0x00029488
   191d8:	0002950c 	.word	0x0002950c
   191dc:	0002866c 	.word	0x0002866c
   191e0:	000293f8 	.word	0x000293f8

000191e4 <lll_adv_connect_ind_check>:
{
   191e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191e6:	9e07      	ldr	r6, [sp, #28]
   191e8:	f89d 7018 	ldrb.w	r7, [sp, #24]
   191ec:	f89d 4020 	ldrb.w	r4, [sp, #32]
   191f0:	460d      	mov	r5, r1
	if (tgt_addr) {
   191f2:	b95e      	cbnz	r6, 1920c <lll_adv_connect_ind_check+0x28>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   191f4:	7a41      	ldrb	r1, [r0, #9]
		(devmatch_ok)) &&
   191f6:	f001 0103 	and.w	r1, r1, #3
   191fa:	2901      	cmp	r1, #1
   191fc:	d900      	bls.n	19200 <lll_adv_connect_ind_check+0x1c>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   191fe:	b11c      	cbz	r4, 19208 <lll_adv_connect_ind_check+0x24>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   19200:	7829      	ldrb	r1, [r5, #0]
   19202:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   19206:	d01b      	beq.n	19240 <lll_adv_connect_ind_check+0x5c>
   19208:	2000      	movs	r0, #0
}
   1920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (tx_addr == sr->rx_addr) &&
   1920c:	7809      	ldrb	r1, [r1, #0]
   1920e:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   19212:	d1f9      	bne.n	19208 <lll_adv_connect_ind_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   19214:	2206      	movs	r2, #6
   19216:	4618      	mov	r0, r3
   19218:	f105 0108 	add.w	r1, r5, #8
   1921c:	f00a fccf 	bl	23bbe <memcmp>
	return (tx_addr == sr->rx_addr) &&
   19220:	2800      	cmp	r0, #0
   19222:	d1f1      	bne.n	19208 <lll_adv_connect_ind_check+0x24>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
		return rl_idx == lll->rl_idx;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   19224:	782b      	ldrb	r3, [r5, #0]
   19226:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1922a:	42bb      	cmp	r3, r7
   1922c:	d1ec      	bne.n	19208 <lll_adv_connect_ind_check+0x24>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1922e:	2206      	movs	r2, #6
   19230:	1ca9      	adds	r1, r5, #2
   19232:	4630      	mov	r0, r6
   19234:	f00a fcc3 	bl	23bbe <memcmp>
	return (rx_addr == ci->tx_addr) &&
   19238:	fab0 f080 	clz	r0, r0
   1923c:	0940      	lsrs	r0, r0, #5
}
   1923e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   19240:	2206      	movs	r2, #6
   19242:	f105 0108 	add.w	r1, r5, #8
   19246:	4618      	mov	r0, r3
   19248:	f00a fcb9 	bl	23bbe <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1924c:	fab0 f080 	clz	r0, r0
   19250:	0940      	lsrs	r0, r0, #5
}
   19252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019254 <isr_rx>:
{
   19254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19258:	b088      	sub	sp, #32
   1925a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1925c:	f001 f846 	bl	1a2ec <radio_is_done>
	if (trx_done) {
   19260:	b2c0      	uxtb	r0, r0
   19262:	b950      	cbnz	r0, 1927a <isr_rx+0x26>
	lll_isr_status_reset();
   19264:	f7ff fa62 	bl	1872c <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   19268:	4873      	ldr	r0, [pc, #460]	; (19438 <isr_rx+0x1e4>)
   1926a:	4621      	mov	r1, r4
   1926c:	f000 fefe 	bl	1a06c <radio_isr_set>
}
   19270:	b008      	add	sp, #32
   19272:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_disable();
   19276:	f001 b80f 	b.w	1a298 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1927a:	f001 f857 	bl	1a32c <radio_crc_is_valid>
   1927e:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   19280:	f001 f944 	bl	1a50c <radio_filter_has_match>
	if (crc_ok) {
   19284:	b2ed      	uxtb	r5, r5
		devmatch_ok = radio_filter_has_match();
   19286:	4606      	mov	r6, r0
		devmatch_id = radio_filter_match_get();
   19288:	f001 f94a 	bl	1a520 <radio_filter_match_get>
		rssi_ready = radio_rssi_is_ready();
   1928c:	f001 f922 	bl	1a4d4 <radio_rssi_is_ready>
	lll_isr_status_reset();
   19290:	f7ff fa4c 	bl	1872c <lll_isr_status_reset>
	if (crc_ok) {
   19294:	2d00      	cmp	r5, #0
   19296:	d0e7      	beq.n	19268 <isr_rx+0x14>
	uint8_t rl_idx = FILTER_IDX_NONE;
   19298:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   1929a:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   1929c:	f88d 301f 	strb.w	r3, [sp, #31]
	node_rx = ull_pdu_rx_alloc_peek(1);
   192a0:	f7f8 faf6 	bl	11890 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   192a4:	4605      	mov	r5, r0
   192a6:	2800      	cmp	r0, #0
   192a8:	f000 8097 	beq.w	193da <isr_rx+0x186>
   192ac:	7b23      	ldrb	r3, [r4, #12]
   192ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   192b2:	f105 091c 	add.w	r9, r5, #28
   192b6:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   192b8:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   192ba:	b2f6      	uxtb	r6, r6
	tx_addr = pdu_adv->tx_addr;
   192bc:	f813 2b02 	ldrb.w	r2, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   192c0:	f002 000f 	and.w	r0, r2, #15
   192c4:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   192c6:	bf08      	it	eq
   192c8:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   192cc:	7f29      	ldrb	r1, [r5, #28]
	tx_addr = pdu_adv->tx_addr;
   192ce:	f3c2 1a80 	ubfx	sl, r2, #6, #1
	rx_addr = pdu_adv->rx_addr;
   192d2:	ea4f 17d2 	mov.w	r7, r2, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   192d6:	f001 020f 	and.w	r2, r1, #15
		tgt_addr = NULL;
   192da:	bf18      	it	ne
   192dc:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   192e0:	2a03      	cmp	r2, #3
   192e2:	d04d      	beq.n	19380 <isr_rx+0x12c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   192e4:	2a05      	cmp	r2, #5
   192e6:	d1bf      	bne.n	19268 <isr_rx+0x14>
   192e8:	7f6a      	ldrb	r2, [r5, #29]
   192ea:	2a22      	cmp	r2, #34	; 0x22
   192ec:	d1bc      	bne.n	19268 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   192ee:	6862      	ldr	r2, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   192f0:	2a00      	cmp	r2, #0
   192f2:	d0b9      	beq.n	19268 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   192f4:	f892 2020 	ldrb.w	r2, [r2, #32]
   192f8:	0792      	lsls	r2, r2, #30
   192fa:	d4b5      	bmi.n	19268 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   192fc:	f10d 051f 	add.w	r5, sp, #31
   19300:	e9cd 8601 	strd	r8, r6, [sp, #4]
   19304:	9700      	str	r7, [sp, #0]
   19306:	4652      	mov	r2, sl
   19308:	4649      	mov	r1, r9
   1930a:	4620      	mov	r0, r4
   1930c:	9503      	str	r5, [sp, #12]
   1930e:	f7ff ff69 	bl	191e4 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   19312:	2800      	cmp	r0, #0
   19314:	d0a8      	beq.n	19268 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   19316:	2004      	movs	r0, #4
   19318:	f7f8 faba 	bl	11890 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1931c:	2800      	cmp	r0, #0
   1931e:	d0a3      	beq.n	19268 <isr_rx+0x14>
		radio_isr_set(isr_abort_all, lll);
   19320:	4846      	ldr	r0, [pc, #280]	; (1943c <isr_rx+0x1e8>)
   19322:	4621      	mov	r1, r4
   19324:	f000 fea2 	bl	1a06c <radio_isr_set>
		radio_disable();
   19328:	f000 ffb6 	bl	1a298 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1932c:	f000 ffd4 	bl	1a2d8 <radio_is_ready>
   19330:	2800      	cmp	r0, #0
   19332:	d144      	bne.n	193be <isr_rx+0x16a>
		lll->conn->periph.initiated = 1;
   19334:	6862      	ldr	r2, [r4, #4]
   19336:	f892 3020 	ldrb.w	r3, [r2, #32]
   1933a:	f043 0301 	orr.w	r3, r3, #1
   1933e:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   19342:	f7f8 fac7 	bl	118d4 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   19346:	2217      	movs	r2, #23
		rx->hdr.handle = 0xffff;
   19348:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1934c:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   1934e:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   19350:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   19352:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   19354:	f001 f988 	bl	1a668 <radio_tmr_start_get>
   19358:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1935a:	f001 f9d9 	bl	1a710 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   1935e:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   19360:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   19362:	4608      	mov	r0, r1
   19364:	f000 ff8c 	bl	1a280 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   19368:	1a24      	subs	r4, r4, r0
   1936a:	616c      	str	r4, [r5, #20]
			ftr->extra = ull_pdu_rx_alloc();
   1936c:	f7f8 fab2 	bl	118d4 <ull_pdu_rx_alloc>
   19370:	60e8      	str	r0, [r5, #12]
		ull_rx_put_sched(rx->hdr.link, rx);
   19372:	6828      	ldr	r0, [r5, #0]
   19374:	4629      	mov	r1, r5
}
   19376:	b008      	add	sp, #32
   19378:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		ull_rx_put_sched(rx->hdr.link, rx);
   1937c:	f7f8 bad8 	b.w	11930 <ull_rx_put_sched>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   19380:	7f6a      	ldrb	r2, [r5, #29]
   19382:	2a0c      	cmp	r2, #12
   19384:	f47f af70 	bne.w	19268 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   19388:	f1b8 0f00 	cmp.w	r8, #0
   1938c:	f47f af6c 	bne.w	19268 <isr_rx+0x14>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   19390:	7a62      	ldrb	r2, [r4, #9]
		 devmatch_ok) &&
   19392:	07d0      	lsls	r0, r2, #31
   19394:	d502      	bpl.n	1939c <isr_rx+0x148>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   19396:	2e00      	cmp	r6, #0
   19398:	f43f af66 	beq.w	19268 <isr_rx+0x14>
	return (tx_addr == sr->rx_addr) &&
   1939c:	ebba 1fd1 	cmp.w	sl, r1, lsr #7
   193a0:	f47f af62 	bne.w	19268 <isr_rx+0x14>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   193a4:	2206      	movs	r2, #6
   193a6:	f105 0124 	add.w	r1, r5, #36	; 0x24
   193aa:	4618      	mov	r0, r3
   193ac:	9305      	str	r3, [sp, #20]
   193ae:	f00a fc06 	bl	23bbe <memcmp>
	return (tx_addr == sr->rx_addr) &&
   193b2:	b300      	cbz	r0, 193f6 <isr_rx+0x1a2>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   193b4:	7f2a      	ldrb	r2, [r5, #28]
   193b6:	9b05      	ldr	r3, [sp, #20]
   193b8:	f002 020f 	and.w	r2, r2, #15
   193bc:	e792      	b.n	192e4 <isr_rx+0x90>
		LL_ASSERT(!radio_is_ready());
   193be:	4a20      	ldr	r2, [pc, #128]	; (19440 <isr_rx+0x1ec>)
   193c0:	4920      	ldr	r1, [pc, #128]	; (19444 <isr_rx+0x1f0>)
   193c2:	4821      	ldr	r0, [pc, #132]	; (19448 <isr_rx+0x1f4>)
   193c4:	f240 633e 	movw	r3, #1598	; 0x63e
   193c8:	f008 f9c0 	bl	2174c <assert_print>
   193cc:	4040      	eors	r0, r0
   193ce:	f380 8811 	msr	BASEPRI, r0
   193d2:	f04f 0003 	mov.w	r0, #3
   193d6:	df02      	svc	2
   193d8:	e7ac      	b.n	19334 <isr_rx+0xe0>
	LL_ASSERT(node_rx);
   193da:	4a19      	ldr	r2, [pc, #100]	; (19440 <isr_rx+0x1ec>)
   193dc:	491b      	ldr	r1, [pc, #108]	; (1944c <isr_rx+0x1f8>)
   193de:	481a      	ldr	r0, [pc, #104]	; (19448 <isr_rx+0x1f4>)
   193e0:	f240 53de 	movw	r3, #1502	; 0x5de
   193e4:	f008 f9b2 	bl	2174c <assert_print>
   193e8:	4040      	eors	r0, r0
   193ea:	f380 8811 	msr	BASEPRI, r0
   193ee:	f04f 0003 	mov.w	r0, #3
   193f2:	df02      	svc	2
   193f4:	e75a      	b.n	192ac <isr_rx+0x58>
		radio_isr_set(isr_done, lll);
   193f6:	4810      	ldr	r0, [pc, #64]	; (19438 <isr_rx+0x1e4>)
   193f8:	4621      	mov	r1, r4
   193fa:	f000 fe37 	bl	1a06c <radio_isr_set>
		radio_switch_complete_and_disable();
   193fe:	f001 f853 	bl	1a4a8 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   19402:	7e23      	ldrb	r3, [r4, #24]
   19404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   19408:	69d8      	ldr	r0, [r3, #28]
   1940a:	f000 ff29 	bl	1a260 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1940e:	f000 ff63 	bl	1a2d8 <radio_is_ready>
   19412:	b910      	cbnz	r0, 1941a <isr_rx+0x1c6>
}
   19414:	b008      	add	sp, #32
   19416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT(!radio_is_ready());
   1941a:	4a09      	ldr	r2, [pc, #36]	; (19440 <isr_rx+0x1ec>)
   1941c:	4909      	ldr	r1, [pc, #36]	; (19444 <isr_rx+0x1f0>)
   1941e:	480a      	ldr	r0, [pc, #40]	; (19448 <isr_rx+0x1f4>)
   19420:	f240 53f7 	movw	r3, #1527	; 0x5f7
   19424:	f008 f992 	bl	2174c <assert_print>
   19428:	4040      	eors	r0, r0
   1942a:	f380 8811 	msr	BASEPRI, r0
   1942e:	f04f 0003 	mov.w	r0, #3
   19432:	df02      	svc	2
		if (!err) {
   19434:	e7ee      	b.n	19414 <isr_rx+0x1c0>
   19436:	bf00      	nop
   19438:	00018ffd 	.word	0x00018ffd
   1943c:	00018c21 	.word	0x00018c21
   19440:	00029488 	.word	0x00029488
   19444:	000294dc 	.word	0x000294dc
   19448:	0002866c 	.word	0x0002866c
   1944c:	000294d4 	.word	0x000294d4

00019450 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   19450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19452:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   19454:	f7ff f96a 	bl	1872c <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   19458:	f7f8 fb46 	bl	11ae8 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1945c:	4604      	mov	r4, r0
   1945e:	2800      	cmp	r0, #0
   19460:	d036      	beq.n	194d0 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   19462:	4922      	ldr	r1, [pc, #136]	; (194ec <isr_done+0x9c>)
   19464:	79a2      	ldrb	r2, [r4, #6]
   19466:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   19468:	4b21      	ldr	r3, [pc, #132]	; (194f0 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   1946a:	f360 0200 	bfi	r2, r0, #0, #1
   1946e:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   19470:	4a20      	ldr	r2, [pc, #128]	; (194f4 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   19472:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   19474:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   19476:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   19478:	2101      	movs	r1, #1
   1947a:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   1947c:	7222      	strb	r2, [r4, #8]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1947e:	b11b      	cbz	r3, 19488 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   19480:	f995 301d 	ldrsb.w	r3, [r5, #29]
   19484:	2b00      	cmp	r3, #0
   19486:	db04      	blt.n	19492 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   19488:	4628      	mov	r0, r5
}
   1948a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1948e:	f7ff b959 	b.w	18744 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   19492:	f895 305b 	ldrb.w	r3, [r5, #91]	; 0x5b
   19496:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1949a:	2b02      	cmp	r3, #2
   1949c:	d016      	beq.n	194cc <isr_done+0x7c>
	default:
	case BIT(0):
		return 40;
   1949e:	2b04      	cmp	r3, #4
   194a0:	bf0c      	ite	eq
   194a2:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   194a6:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   194a8:	f001 f91e 	bl	1a6e8 <radio_tmr_aa_restore>
   194ac:	4606      	mov	r6, r0
   194ae:	f001 f921 	bl	1a6f4 <radio_tmr_ready_get>
   194b2:	1a36      	subs	r6, r6, r0
			e->drift.start_to_address_actual_us =
   194b4:	60e6      	str	r6, [r4, #12]
				lll->periph.window_widening_event_us;
   194b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   194b8:	e9c4 2704 	strd	r2, r7, [r4, #16]
			lll->periph.window_widening_event_us = 0;
   194bc:	2300      	movs	r3, #0
   194be:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   194c0:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   194c2:	4628      	mov	r0, r5
}
   194c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   194c8:	f7ff b93c 	b.w	18744 <lll_isr_cleanup>
	switch (phy) {
   194cc:	2718      	movs	r7, #24
   194ce:	e7eb      	b.n	194a8 <isr_done+0x58>
	LL_ASSERT(e);
   194d0:	4a09      	ldr	r2, [pc, #36]	; (194f8 <isr_done+0xa8>)
   194d2:	490a      	ldr	r1, [pc, #40]	; (194fc <isr_done+0xac>)
   194d4:	480a      	ldr	r0, [pc, #40]	; (19500 <isr_done+0xb0>)
   194d6:	f240 3357 	movw	r3, #855	; 0x357
   194da:	f008 f937 	bl	2174c <assert_print>
   194de:	4040      	eors	r0, r0
   194e0:	f380 8811 	msr	BASEPRI, r0
   194e4:	f04f 0003 	mov.w	r0, #3
   194e8:	df02      	svc	2
   194ea:	e7ba      	b.n	19462 <isr_done+0x12>
   194ec:	20003bda 	.word	0x20003bda
   194f0:	20003aea 	.word	0x20003aea
   194f4:	20003bd9 	.word	0x20003bd9
   194f8:	00029520 	.word	0x00029520
   194fc:	00028c38 	.word	0x00028c38
   19500:	0002866c 	.word	0x0002866c

00019504 <lll_conn_init>:
{
   19504:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   19506:	f000 ff1b 	bl	1a340 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1950a:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1950c:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1950e:	2101      	movs	r1, #1
   19510:	f361 0201 	bfi	r2, r1, #0, #2
   19514:	701a      	strb	r2, [r3, #0]
}
   19516:	2000      	movs	r0, #0
   19518:	bd08      	pop	{r3, pc}
   1951a:	bf00      	nop

0001951c <lll_conn_reset>:
}
   1951c:	2000      	movs	r0, #0
   1951e:	4770      	bx	lr

00019520 <lll_conn_flush>:
}
   19520:	4770      	bx	lr
   19522:	bf00      	nop

00019524 <lll_conn_prepare_reset>:
{
   19524:	b410      	push	{r4}
	crc_valid = 0U;
   19526:	4805      	ldr	r0, [pc, #20]	; (1953c <lll_conn_prepare_reset+0x18>)
	trx_cnt = 0U;
   19528:	4c05      	ldr	r4, [pc, #20]	; (19540 <lll_conn_prepare_reset+0x1c>)
	crc_expire = 0U;
   1952a:	4906      	ldr	r1, [pc, #24]	; (19544 <lll_conn_prepare_reset+0x20>)
	mic_state = LLL_CONN_MIC_NONE;
   1952c:	4a06      	ldr	r2, [pc, #24]	; (19548 <lll_conn_prepare_reset+0x24>)
	trx_cnt = 0U;
   1952e:	2300      	movs	r3, #0
   19530:	8023      	strh	r3, [r4, #0]
	crc_valid = 0U;
   19532:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   19534:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   19536:	7013      	strb	r3, [r2, #0]
}
   19538:	bc10      	pop	{r4}
   1953a:	4770      	bx	lr
   1953c:	20003bda 	.word	0x20003bda
   19540:	20003aea 	.word	0x20003aea
   19544:	20003bdb 	.word	0x20003bdb
   19548:	20003bd9 	.word	0x20003bd9

0001954c <lll_conn_abort_cb>:
{
   1954c:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1954e:	b350      	cbz	r0, 195a6 <lll_conn_abort_cb+0x5a>
	err = lll_hfclock_off();
   19550:	460d      	mov	r5, r1
   19552:	4604      	mov	r4, r0
   19554:	f7ff faa6 	bl	18aa4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   19558:	2800      	cmp	r0, #0
   1955a:	db17      	blt.n	1958c <lll_conn_abort_cb+0x40>
	lll = prepare_param->param;
   1955c:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1955e:	8923      	ldrh	r3, [r4, #8]
   19560:	8a51      	ldrh	r1, [r2, #18]
   19562:	3301      	adds	r3, #1
   19564:	440b      	add	r3, r1
   19566:	8253      	strh	r3, [r2, #18]
	e = ull_event_done_extra_get();
   19568:	f7f8 fabe 	bl	11ae8 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1956c:	4604      	mov	r4, r0
   1956e:	b308      	cbz	r0, 195b4 <lll_conn_abort_cb+0x68>
	e->crc_valid = 0U;
   19570:	79a2      	ldrb	r2, [r4, #6]
	e->trx_cnt = 0U;
   19572:	2300      	movs	r3, #0
	e->crc_valid = 0U;
   19574:	f363 0200 	bfi	r2, r3, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   19578:	2101      	movs	r1, #1
   1957a:	7021      	strb	r1, [r4, #0]
	e->trx_cnt = 0U;
   1957c:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = 0U;
   1957e:	71a2      	strb	r2, [r4, #6]
	e->mic_state = LLL_CONN_MIC_NONE;
   19580:	7223      	strb	r3, [r4, #8]
	lll_done(param);
   19582:	4628      	mov	r0, r5
}
   19584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   19588:	f7ff b814 	b.w	185b4 <lll_done>
	LL_ASSERT(err >= 0);
   1958c:	4a10      	ldr	r2, [pc, #64]	; (195d0 <lll_conn_abort_cb+0x84>)
   1958e:	4911      	ldr	r1, [pc, #68]	; (195d4 <lll_conn_abort_cb+0x88>)
   19590:	4811      	ldr	r0, [pc, #68]	; (195d8 <lll_conn_abort_cb+0x8c>)
   19592:	23ac      	movs	r3, #172	; 0xac
   19594:	f008 f8da 	bl	2174c <assert_print>
   19598:	4040      	eors	r0, r0
   1959a:	f380 8811 	msr	BASEPRI, r0
   1959e:	f04f 0003 	mov.w	r0, #3
   195a2:	df02      	svc	2
   195a4:	e7da      	b.n	1955c <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   195a6:	480d      	ldr	r0, [pc, #52]	; (195dc <lll_conn_abort_cb+0x90>)
   195a8:	f000 fd60 	bl	1a06c <radio_isr_set>
}
   195ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   195b0:	f000 be72 	b.w	1a298 <radio_disable>
	LL_ASSERT(e);
   195b4:	4a06      	ldr	r2, [pc, #24]	; (195d0 <lll_conn_abort_cb+0x84>)
   195b6:	490a      	ldr	r1, [pc, #40]	; (195e0 <lll_conn_abort_cb+0x94>)
   195b8:	4807      	ldr	r0, [pc, #28]	; (195d8 <lll_conn_abort_cb+0x8c>)
   195ba:	23b4      	movs	r3, #180	; 0xb4
   195bc:	f008 f8c6 	bl	2174c <assert_print>
   195c0:	4040      	eors	r0, r0
   195c2:	f380 8811 	msr	BASEPRI, r0
   195c6:	f04f 0003 	mov.w	r0, #3
   195ca:	df02      	svc	2
   195cc:	e7d0      	b.n	19570 <lll_conn_abort_cb+0x24>
   195ce:	bf00      	nop
   195d0:	00029520 	.word	0x00029520
   195d4:	000293f8 	.word	0x000293f8
   195d8:	0002866c 	.word	0x0002866c
   195dc:	00019451 	.word	0x00019451
   195e0:	00028c38 	.word	0x00028c38

000195e4 <lll_conn_rx_pkt_set>:
{
   195e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195e6:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   195e8:	2001      	movs	r0, #1
   195ea:	f7f8 f951 	bl	11890 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   195ee:	4607      	mov	r7, r0
   195f0:	b358      	cbz	r0, 1964a <lll_conn_rx_pkt_set+0x66>
	phy = lll->phy_rx;
   195f2:	f894 505b 	ldrb.w	r5, [r4, #91]	; 0x5b
	max_rx_octets = lll->dle.eff.max_rx_octets;
   195f6:	f8b4 604e 	ldrh.w	r6, [r4, #78]	; 0x4e
	phy = lll->phy_rx;
   195fa:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   195fe:	2100      	movs	r1, #0
   19600:	4628      	mov	r0, r5
   19602:	f000 fdbd 	bl	1a180 <radio_phy_set>
	} else if (lll->enc_rx) {
   19606:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1960a:	006a      	lsls	r2, r5, #1
	} else if (lll->enc_rx) {
   1960c:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1960e:	b2f1      	uxtb	r1, r6
   19610:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_rx) {
   19614:	d510      	bpl.n	19638 <lll_conn_rx_pkt_set+0x54>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   19616:	3104      	adds	r1, #4
   19618:	b2c9      	uxtb	r1, r1
   1961a:	2008      	movs	r0, #8
   1961c:	f000 fdf4 	bl	1a208 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   19620:	f000 fe96 	bl	1a350 <radio_pkt_decrypt_get>
   19624:	4629      	mov	r1, r5
   19626:	4602      	mov	r2, r0
   19628:	f104 0073 	add.w	r0, r4, #115	; 0x73
   1962c:	f001 f87c 	bl	1a728 <radio_ccm_rx_pkt_set>
}
   19630:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   19634:	f000 be0e 	b.w	1a254 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   19638:	2008      	movs	r0, #8
   1963a:	f000 fde5 	bl	1a208 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1963e:	f107 001c 	add.w	r0, r7, #28
}
   19642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   19646:	f000 be05 	b.w	1a254 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1964a:	4a07      	ldr	r2, [pc, #28]	; (19668 <lll_conn_rx_pkt_set+0x84>)
   1964c:	4907      	ldr	r1, [pc, #28]	; (1966c <lll_conn_rx_pkt_set+0x88>)
   1964e:	4808      	ldr	r0, [pc, #32]	; (19670 <lll_conn_rx_pkt_set+0x8c>)
   19650:	f240 238b 	movw	r3, #651	; 0x28b
   19654:	f008 f87a 	bl	2174c <assert_print>
   19658:	4040      	eors	r0, r0
   1965a:	f380 8811 	msr	BASEPRI, r0
   1965e:	f04f 0003 	mov.w	r0, #3
   19662:	df02      	svc	2
   19664:	e7c5      	b.n	195f2 <lll_conn_rx_pkt_set+0xe>
   19666:	bf00      	nop
   19668:	00029520 	.word	0x00029520
   1966c:	000294d4 	.word	0x000294d4
   19670:	0002866c 	.word	0x0002866c

00019674 <lll_conn_isr_tx>:
{
   19674:	b538      	push	{r3, r4, r5, lr}
   19676:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   19678:	f7ff f846 	bl	18708 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1967c:	2096      	movs	r0, #150	; 0x96
   1967e:	f000 ff65 	bl	1a54c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   19682:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
   19686:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   1968a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1968e:	f000 0007 	and.w	r0, r0, #7
   19692:	f002 0207 	and.w	r2, r2, #7
   19696:	2100      	movs	r1, #0
   19698:	f000 fea6 	bl	1a3e8 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1969c:	4620      	mov	r0, r4
   1969e:	f7ff ffa1 	bl	195e4 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   196a2:	f000 fe19 	bl	1a2d8 <radio_is_ready>
   196a6:	bb58      	cbnz	r0, 19700 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   196a8:	f001 f838 	bl	1a71c <radio_tmr_tifs_base_get>
   196ac:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   196ae:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   196b2:	2101      	movs	r1, #1
   196b4:	f000 0007 	and.w	r0, r0, #7
   196b8:	f000 fde2 	bl	1a280 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   196bc:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
   196c0:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   196c4:	4405      	add	r5, r0
   196c6:	2b02      	cmp	r3, #2
   196c8:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   196cc:	d016      	beq.n	196fc <lll_conn_isr_tx+0x88>
		return 40;
   196ce:	2b04      	cmp	r3, #4
   196d0:	bf0c      	ite	eq
   196d2:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   196d6:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   196d8:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
   196dc:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   196e0:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   196e4:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   196e6:	f000 fdc7 	bl	1a278 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   196ea:	1a28      	subs	r0, r5, r0
   196ec:	f000 ffce 	bl	1a68c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   196f0:	4621      	mov	r1, r4
   196f2:	480a      	ldr	r0, [pc, #40]	; (1971c <lll_conn_isr_tx+0xa8>)
}
   196f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   196f8:	f000 bcb8 	b.w	1a06c <radio_isr_set>
	switch (phy) {
   196fc:	2318      	movs	r3, #24
   196fe:	e7eb      	b.n	196d8 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   19700:	4a07      	ldr	r2, [pc, #28]	; (19720 <lll_conn_isr_tx+0xac>)
   19702:	4908      	ldr	r1, [pc, #32]	; (19724 <lll_conn_isr_tx+0xb0>)
   19704:	4808      	ldr	r0, [pc, #32]	; (19728 <lll_conn_isr_tx+0xb4>)
   19706:	f44f 7310 	mov.w	r3, #576	; 0x240
   1970a:	f008 f81f 	bl	2174c <assert_print>
   1970e:	4040      	eors	r0, r0
   19710:	f380 8811 	msr	BASEPRI, r0
   19714:	f04f 0003 	mov.w	r0, #3
   19718:	df02      	svc	2
   1971a:	e7c5      	b.n	196a8 <lll_conn_isr_tx+0x34>
   1971c:	00019841 	.word	0x00019841
   19720:	00029520 	.word	0x00029520
   19724:	000294dc 	.word	0x000294dc
   19728:	0002866c 	.word	0x0002866c

0001972c <lll_conn_tx_pkt_set>:
{
   1972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1972e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   19730:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
	max_tx_octets = lll->dle.eff.max_tx_octets;
   19734:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
	phy = lll->phy_tx;
   19738:	f001 0407 	and.w	r4, r1, #7
{
   1973c:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1973e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   19742:	4620      	mov	r0, r4
   19744:	f000 fd1c 	bl	1a180 <radio_phy_set>
	} else if (lll->enc_tx) {
   19748:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1974c:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   1974e:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   19750:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   19754:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   19756:	d50d      	bpl.n	19774 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   19758:	3104      	adds	r1, #4
   1975a:	b2c9      	uxtb	r1, r1
   1975c:	2008      	movs	r0, #8
   1975e:	f000 fd53 	bl	1a208 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   19762:	4639      	mov	r1, r7
   19764:	f105 0094 	add.w	r0, r5, #148	; 0x94
   19768:	f001 f81e 	bl	1a7a8 <radio_ccm_tx_pkt_set>
}
   1976c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   19770:	f000 bd76 	b.w	1a260 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   19774:	2008      	movs	r0, #8
   19776:	f000 fd47 	bl	1a208 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1977a:	4638      	mov	r0, r7
}
   1977c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   19780:	f000 bd6e 	b.w	1a260 <radio_pkt_tx_set>

00019784 <lll_conn_pdu_tx_prep>:
{
   19784:	b5f0      	push	{r4, r5, r6, r7, lr}
   19786:	4605      	mov	r5, r0
   19788:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1978a:	aa01      	add	r2, sp, #4
   1978c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
{
   1978e:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   19790:	6e29      	ldr	r1, [r5, #96]	; 0x60
   19792:	f7f4 fc9d 	bl	e0d0 <memq_peek>
	if (lll->empty || !link) {
   19796:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   1979a:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1979c:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1979e:	d438      	bmi.n	19812 <lll_conn_pdu_tx_prep+0x8e>
   197a0:	b348      	cbz	r0, 197f6 <lll_conn_pdu_tx_prep+0x72>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   197a2:	9c01      	ldr	r4, [sp, #4]
   197a4:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
		if (!lll->packet_tx_head_len) {
   197a8:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   197ac:	3404      	adds	r4, #4
   197ae:	441c      	add	r4, r3
		if (!lll->packet_tx_head_len) {
   197b0:	b912      	cbnz	r2, 197b8 <lll_conn_pdu_tx_prep+0x34>
			lll->packet_tx_head_len = p->len;
   197b2:	7862      	ldrb	r2, [r4, #1]
   197b4:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
		if (lll->packet_tx_head_offset) {
   197b8:	b133      	cbz	r3, 197c8 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   197ba:	7823      	ldrb	r3, [r4, #0]
   197bc:	2201      	movs	r2, #1
   197be:	f362 0301 	bfi	r3, r2, #0, #2
   197c2:	7023      	strb	r3, [r4, #0]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   197c4:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
   197c8:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
   197cc:	1ad3      	subs	r3, r2, r3
   197ce:	7063      	strb	r3, [r4, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   197d0:	4628      	mov	r0, r5
   197d2:	f7f9 ffef 	bl	137b4 <ull_conn_lll_max_tx_octets_get>
		if (((PDU_DC_CTRL_TX_SIZE_MAX <= PDU_DC_PAYLOAD_SIZE_MIN) ||
   197d6:	7863      	ldrb	r3, [r4, #1]
   197d8:	4283      	cmp	r3, r0
   197da:	d92a      	bls.n	19832 <lll_conn_pdu_tx_prep+0xae>
			p->len = max_tx_octets;
   197dc:	7060      	strb	r0, [r4, #1]
{
   197de:	2101      	movs	r1, #1
			p->md = 1U;
   197e0:	7823      	ldrb	r3, [r4, #0]
   197e2:	f003 030f 	and.w	r3, r3, #15
			p->octet3.resv[0] = 0U;
   197e6:	2200      	movs	r2, #0
			p->md = 1U;
   197e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   197ec:	7023      	strb	r3, [r4, #0]
			p->octet3.resv[0] = 0U;
   197ee:	70a2      	strb	r2, [r4, #2]
	*pdu_data_tx = p;
   197f0:	603c      	str	r4, [r7, #0]
}
   197f2:	b003      	add	sp, #12
   197f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   197f6:	f043 0304 	orr.w	r3, r3, #4
   197fa:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
		p = (void *)radio_pkt_empty_get();
   197fe:	f000 fd9f 	bl	1a340 <radio_pkt_empty_get>
   19802:	4604      	mov	r4, r0
			p->md = 0U;
   19804:	7823      	ldrb	r3, [r4, #0]
   19806:	f36f 1304 	bfc	r3, #4, #1
   1980a:	7023      	strb	r3, [r4, #0]
	*pdu_data_tx = p;
   1980c:	603c      	str	r4, [r7, #0]
}
   1980e:	b003      	add	sp, #12
   19810:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   19812:	f043 0304 	orr.w	r3, r3, #4
   19816:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
		p = (void *)radio_pkt_empty_get();
   1981a:	f000 fd91 	bl	1a340 <radio_pkt_empty_get>
   1981e:	4604      	mov	r4, r0
		if (link || FORCE_MD_CNT_GET()) {
   19820:	2e00      	cmp	r6, #0
   19822:	d0ef      	beq.n	19804 <lll_conn_pdu_tx_prep+0x80>
			p->md = 1U;
   19824:	7803      	ldrb	r3, [r0, #0]
   19826:	f043 0310 	orr.w	r3, r3, #16
   1982a:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1982c:	603c      	str	r4, [r7, #0]
}
   1982e:	b003      	add	sp, #12
   19830:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   19832:	6832      	ldr	r2, [r6, #0]
   19834:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   19836:	429a      	cmp	r2, r3
   19838:	d1d1      	bne.n	197de <lll_conn_pdu_tx_prep+0x5a>
   1983a:	2100      	movs	r1, #0
   1983c:	e7d0      	b.n	197e0 <lll_conn_pdu_tx_prep+0x5c>
   1983e:	bf00      	nop

00019840 <lll_conn_isr_rx>:
{
   19840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19844:	b082      	sub	sp, #8
   19846:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   19848:	f000 fd50 	bl	1a2ec <radio_is_done>
	if (trx_done) {
   1984c:	b2c0      	uxtb	r0, r0
   1984e:	b950      	cbnz	r0, 19866 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   19850:	f7fe ff62 	bl	18718 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   19854:	48ba      	ldr	r0, [pc, #744]	; (19b40 <lll_conn_isr_rx+0x300>)
   19856:	4621      	mov	r1, r4
   19858:	f000 fc08 	bl	1a06c <radio_isr_set>
}
   1985c:	b002      	add	sp, #8
   1985e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_disable();
   19862:	f000 bd19 	b.w	1a298 <radio_disable>
		crc_ok = radio_crc_is_valid();
   19866:	f000 fd61 	bl	1a32c <radio_crc_is_valid>
   1986a:	fa5f f880 	uxtb.w	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1986e:	f000 fe31 	bl	1a4d4 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   19872:	f7fe ff51 	bl	18718 <lll_isr_rx_status_reset>
	trx_cnt++;
   19876:	4ab3      	ldr	r2, [pc, #716]	; (19b44 <lll_conn_isr_rx+0x304>)
   19878:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1987a:	2001      	movs	r0, #1
	trx_cnt++;
   1987c:	4403      	add	r3, r0
   1987e:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   19880:	f7f8 f806 	bl	11890 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19884:	4605      	mov	r5, r0
   19886:	2800      	cmp	r0, #0
   19888:	f000 80e1 	beq.w	19a4e <lll_conn_isr_rx+0x20e>
	if (crc_ok) {
   1988c:	f1b8 0f00 	cmp.w	r8, #0
   19890:	d158      	bne.n	19944 <lll_conn_isr_rx+0x104>
		if (crc_expire == 0U) {
   19892:	4bad      	ldr	r3, [pc, #692]	; (19b48 <lll_conn_isr_rx+0x308>)
   19894:	781e      	ldrb	r6, [r3, #0]
   19896:	2e00      	cmp	r6, #0
   19898:	f040 80b9 	bne.w	19a0e <lll_conn_isr_rx+0x1ce>
		crc_expire--;
   1989c:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1989e:	a901      	add	r1, sp, #4
   198a0:	4620      	mov	r0, r4
		crc_expire--;
   198a2:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   198a4:	f7ff ff6e 	bl	19784 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   198a8:	2600      	movs	r6, #0
   198aa:	9f01      	ldr	r7, [sp, #4]
   198ac:	46b0      	mov	r8, r6
		radio_tmr_tifs_set(EVENT_IFS_US);
   198ae:	2096      	movs	r0, #150	; 0x96
   198b0:	f000 fe4c 	bl	1a54c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   198b4:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   198b8:	f000 0007 	and.w	r0, r0, #7
   198bc:	f000 fd4c 	bl	1a358 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   198c0:	48a2      	ldr	r0, [pc, #648]	; (19b4c <lll_conn_isr_rx+0x30c>)
   198c2:	4621      	mov	r1, r4
   198c4:	f000 fbd2 	bl	1a06c <radio_isr_set>
		radio_tmr_end_capture();
   198c8:	f000 ff1a 	bl	1a700 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   198cc:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
   198d0:	783b      	ldrb	r3, [r7, #0]
   198d2:	f362 03c3 	bfi	r3, r2, #3, #1
   198d6:	703b      	strb	r3, [r7, #0]
	pdu_data_tx->nesn = lll->nesn;
   198d8:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   198dc:	783a      	ldrb	r2, [r7, #0]
   198de:	f3c3 0340 	ubfx	r3, r3, #1, #1
   198e2:	f363 0282 	bfi	r2, r3, #2, #1
   198e6:	703a      	strb	r2, [r7, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   198e8:	4639      	mov	r1, r7
   198ea:	4620      	mov	r0, r4
   198ec:	f7ff ff1e 	bl	1972c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   198f0:	f000 fcf2 	bl	1a2d8 <radio_is_ready>
   198f4:	2800      	cmp	r0, #0
   198f6:	f040 809c 	bne.w	19a32 <lll_conn_isr_rx+0x1f2>
	if (!radio_tmr_aa_restore()) {
   198fa:	f000 fef5 	bl	1a6e8 <radio_tmr_aa_restore>
   198fe:	2800      	cmp	r0, #0
   19900:	d079      	beq.n	199f6 <lll_conn_isr_rx+0x1b6>
	if (tx_release) {
   19902:	f1b8 0f00 	cmp.w	r8, #0
   19906:	d07d      	beq.n	19a04 <lll_conn_isr_rx+0x1c4>
		LL_ASSERT(lll->handle != 0xFFFF);
   19908:	89a0      	ldrh	r0, [r4, #12]
   1990a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1990e:	4298      	cmp	r0, r3
   19910:	f000 80e2 	beq.w	19ad8 <lll_conn_isr_rx+0x298>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   19914:	4641      	mov	r1, r8
   19916:	f7f9 feb3 	bl	13680 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1991a:	b176      	cbz	r6, 1993a <lll_conn_isr_rx+0xfa>
		if (lll->enc_rx) {
   1991c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19920:	071b      	lsls	r3, r3, #28
   19922:	f100 80cf 	bmi.w	19ac4 <lll_conn_isr_rx+0x284>
		ull_pdu_rx_alloc();
   19926:	f7f7 ffd5 	bl	118d4 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1992a:	2303      	movs	r3, #3
   1992c:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.handle = lll->handle;
   1992e:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   19930:	6828      	ldr	r0, [r5, #0]
		node_rx->hdr.handle = lll->handle;
   19932:	80eb      	strh	r3, [r5, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   19934:	4629      	mov	r1, r5
   19936:	f7f7 ffe3 	bl	11900 <ull_rx_put>
}
   1993a:	b002      	add	sp, #8
   1993c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   19940:	f7f7 bfee 	b.w	11920 <ull_rx_sched>
	if (lll->enc_rx) {
   19944:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19948:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   1994a:	f105 061c 	add.w	r6, r5, #28
	if (lll->enc_rx) {
   1994e:	f100 80af 	bmi.w	19ab0 <lll_conn_isr_rx+0x270>
	if (pdu_data_rx->nesn != lll->sn) {
   19952:	7f2a      	ldrb	r2, [r5, #28]
   19954:	f003 0101 	and.w	r1, r3, #1
   19958:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1995c:	4288      	cmp	r0, r1
   1995e:	f000 8087 	beq.w	19a70 <lll_conn_isr_rx+0x230>
		if (lll->role) {
   19962:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   19966:	f081 0101 	eor.w	r1, r1, #1
   1996a:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1996e:	2a00      	cmp	r2, #0
		lll->sn++;
   19970:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		if (lll->role) {
   19974:	da05      	bge.n	19982 <lll_conn_isr_rx+0x142>
			lll->periph.latency_enabled = 1;
   19976:	f894 3020 	ldrb.w	r3, [r4, #32]
   1997a:	f043 0304 	orr.w	r3, r3, #4
   1997e:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   19982:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19986:	075a      	lsls	r2, r3, #29
   19988:	f100 80b7 	bmi.w	19afa <lll_conn_isr_rx+0x2ba>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1998c:	e9d4 0117 	ldrd	r0, r1, [r4, #92]	; 0x5c
   19990:	aa01      	add	r2, sp, #4
   19992:	f7f4 fb9d 	bl	e0d0 <memq_peek>
		if (link) {
   19996:	4607      	mov	r7, r0
   19998:	2800      	cmp	r0, #0
   1999a:	f000 80b4 	beq.w	19b06 <lll_conn_isr_rx+0x2c6>
					       lll->packet_tx_head_offset);
   1999e:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
			pdu_data_tx_len = pdu_data_tx->len;
   199a2:	9b01      	ldr	r3, [sp, #4]
   199a4:	4413      	add	r3, r2
   199a6:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   199a8:	b171      	cbz	r1, 199c8 <lll_conn_isr_rx+0x188>
				if (lll->enc_tx) {
   199aa:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   199ae:	06db      	lsls	r3, r3, #27
   199b0:	d50a      	bpl.n	199c8 <lll_conn_isr_rx+0x188>
					lll->ccm_tx.counter++;
   199b2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   199b6:	3301      	adds	r3, #1
   199b8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   199bc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   199c0:	f143 0300 	adc.w	r3, r3, #0
   199c4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
			if (offset < lll->packet_tx_head_len) {
   199c8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   199cc:	440a      	add	r2, r1
   199ce:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   199d0:	429a      	cmp	r2, r3
   199d2:	f0c0 809e 	bcc.w	19b12 <lll_conn_isr_rx+0x2d2>
			} else if (offset == lll->packet_tx_head_len) {
   199d6:	f000 80c9 	beq.w	19b6c <lll_conn_isr_rx+0x32c>
				LL_ASSERT(0);
   199da:	4a5d      	ldr	r2, [pc, #372]	; (19b50 <lll_conn_isr_rx+0x310>)
   199dc:	495d      	ldr	r1, [pc, #372]	; (19b54 <lll_conn_isr_rx+0x314>)
   199de:	485e      	ldr	r0, [pc, #376]	; (19b58 <lll_conn_isr_rx+0x318>)
   199e0:	f240 33e3 	movw	r3, #995	; 0x3e3
   199e4:	f007 feb2 	bl	2174c <assert_print>
   199e8:	4040      	eors	r0, r0
   199ea:	f380 8811 	msr	BASEPRI, r0
   199ee:	f04f 0003 	mov.w	r0, #3
   199f2:	df02      	svc	2
   199f4:	e087      	b.n	19b06 <lll_conn_isr_rx+0x2c6>
		radio_tmr_aa_save(radio_tmr_aa_get());
   199f6:	f000 fe6b 	bl	1a6d0 <radio_tmr_aa_get>
   199fa:	f000 fe6f 	bl	1a6dc <radio_tmr_aa_save>
	if (tx_release) {
   199fe:	f1b8 0f00 	cmp.w	r8, #0
   19a02:	d181      	bne.n	19908 <lll_conn_isr_rx+0xc8>
	if (is_rx_enqueue) {
   19a04:	2e00      	cmp	r6, #0
   19a06:	d189      	bne.n	1991c <lll_conn_isr_rx+0xdc>
}
   19a08:	b002      	add	sp, #8
   19a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_expire--;
   19a0e:	3e01      	subs	r6, #1
   19a10:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19a12:	a901      	add	r1, sp, #4
   19a14:	4620      	mov	r0, r4
		crc_expire--;
   19a16:	701e      	strb	r6, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19a18:	f7ff feb4 	bl	19784 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   19a1c:	2e00      	cmp	r6, #0
   19a1e:	f47f af43 	bne.w	198a8 <lll_conn_isr_rx+0x68>
	pdu_data_tx->sn = lll->sn;
   19a22:	9f01      	ldr	r7, [sp, #4]
		radio_isr_set(isr_done, param);
   19a24:	4846      	ldr	r0, [pc, #280]	; (19b40 <lll_conn_isr_rx+0x300>)
   19a26:	4621      	mov	r1, r4
   19a28:	f000 fb20 	bl	1a06c <radio_isr_set>
			radio_switch_complete_and_disable();
   19a2c:	f000 fd3c 	bl	1a4a8 <radio_switch_complete_and_disable>
   19a30:	e74c      	b.n	198cc <lll_conn_isr_rx+0x8c>
	LL_ASSERT(!radio_is_ready());
   19a32:	4a47      	ldr	r2, [pc, #284]	; (19b50 <lll_conn_isr_rx+0x310>)
   19a34:	4949      	ldr	r1, [pc, #292]	; (19b5c <lll_conn_isr_rx+0x31c>)
   19a36:	4848      	ldr	r0, [pc, #288]	; (19b58 <lll_conn_isr_rx+0x318>)
   19a38:	f240 138f 	movw	r3, #399	; 0x18f
   19a3c:	f007 fe86 	bl	2174c <assert_print>
   19a40:	4040      	eors	r0, r0
   19a42:	f380 8811 	msr	BASEPRI, r0
   19a46:	f04f 0003 	mov.w	r0, #3
   19a4a:	df02      	svc	2
   19a4c:	e755      	b.n	198fa <lll_conn_isr_rx+0xba>
	LL_ASSERT(node_rx);
   19a4e:	4a40      	ldr	r2, [pc, #256]	; (19b50 <lll_conn_isr_rx+0x310>)
   19a50:	4943      	ldr	r1, [pc, #268]	; (19b60 <lll_conn_isr_rx+0x320>)
   19a52:	4841      	ldr	r0, [pc, #260]	; (19b58 <lll_conn_isr_rx+0x318>)
   19a54:	23ff      	movs	r3, #255	; 0xff
   19a56:	f007 fe79 	bl	2174c <assert_print>
   19a5a:	4040      	eors	r0, r0
   19a5c:	f380 8811 	msr	BASEPRI, r0
   19a60:	f04f 0003 	mov.w	r0, #3
   19a64:	df02      	svc	2
	if (crc_ok) {
   19a66:	f1b8 0f00 	cmp.w	r8, #0
   19a6a:	f43f af12 	beq.w	19892 <lll_conn_isr_rx+0x52>
   19a6e:	e769      	b.n	19944 <lll_conn_isr_rx+0x104>
	tx_release = NULL;
   19a70:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   19a74:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   19a78:	f3c3 0340 	ubfx	r3, r3, #1, #1
   19a7c:	429a      	cmp	r2, r3
   19a7e:	d04b      	beq.n	19b18 <lll_conn_isr_rx+0x2d8>
	is_rx_enqueue = 0U;
   19a80:	2600      	movs	r6, #0
		crc_expire = 0U;
   19a82:	4a31      	ldr	r2, [pc, #196]	; (19b48 <lll_conn_isr_rx+0x308>)
		crc_valid = 1U;
   19a84:	4b37      	ldr	r3, [pc, #220]	; (19b64 <lll_conn_isr_rx+0x324>)
		crc_expire = 0U;
   19a86:	2100      	movs	r1, #0
   19a88:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19a8a:	4620      	mov	r0, r4
		crc_valid = 1U;
   19a8c:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19a8e:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   19a90:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19a92:	f7ff fe77 	bl	19784 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   19a96:	7f2b      	ldrb	r3, [r5, #28]
   19a98:	06d9      	lsls	r1, r3, #27
   19a9a:	d42c      	bmi.n	19af6 <lll_conn_isr_rx+0x2b6>
			      (pdu_data_tx->md == 0) &&
   19a9c:	9f01      	ldr	r7, [sp, #4]
   19a9e:	783b      	ldrb	r3, [r7, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   19aa0:	06da      	lsls	r2, r3, #27
   19aa2:	f53f af04 	bmi.w	198ae <lll_conn_isr_rx+0x6e>
			      (pdu_data_tx->md == 0) &&
   19aa6:	787b      	ldrb	r3, [r7, #1]
   19aa8:	2b00      	cmp	r3, #0
   19aaa:	f47f af00 	bne.w	198ae <lll_conn_isr_rx+0x6e>
   19aae:	e7b9      	b.n	19a24 <lll_conn_isr_rx+0x1e4>
		pkt_decrypt = radio_pkt_decrypt_get();
   19ab0:	f000 fc4e 	bl	1a350 <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   19ab4:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   19ab6:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   19ab8:	4630      	mov	r0, r6
   19aba:	f00a f8a7 	bl	23c0c <memcpy>
   19abe:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19ac2:	e746      	b.n	19952 <lll_conn_isr_rx+0x112>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   19ac4:	f000 fc44 	bl	1a350 <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   19ac8:	7f6a      	ldrb	r2, [r5, #29]
   19aca:	1cc1      	adds	r1, r0, #3
   19acc:	f105 001f 	add.w	r0, r5, #31
   19ad0:	f00a f89c 	bl	23c0c <memcpy>
   19ad4:	e727      	b.n	19926 <lll_conn_isr_rx+0xe6>
	pdu_data_tx->sn = lll->sn;
   19ad6:	2600      	movs	r6, #0
		LL_ASSERT(lll->handle != 0xFFFF);
   19ad8:	4a1d      	ldr	r2, [pc, #116]	; (19b50 <lll_conn_isr_rx+0x310>)
   19ada:	4923      	ldr	r1, [pc, #140]	; (19b68 <lll_conn_isr_rx+0x328>)
   19adc:	481e      	ldr	r0, [pc, #120]	; (19b58 <lll_conn_isr_rx+0x318>)
   19ade:	f240 13a5 	movw	r3, #421	; 0x1a5
   19ae2:	f007 fe33 	bl	2174c <assert_print>
   19ae6:	4040      	eors	r0, r0
   19ae8:	f380 8811 	msr	BASEPRI, r0
   19aec:	f04f 0003 	mov.w	r0, #3
   19af0:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   19af2:	89a0      	ldrh	r0, [r4, #12]
   19af4:	e70e      	b.n	19914 <lll_conn_isr_rx+0xd4>
			      (pdu_data_tx->md == 0) &&
   19af6:	9f01      	ldr	r7, [sp, #4]
   19af8:	e6d9      	b.n	198ae <lll_conn_isr_rx+0x6e>
			lll->empty = 0;
   19afa:	f36f 0382 	bfc	r3, #2, #1
   19afe:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			pdu_data_tx = (void *)radio_pkt_empty_get();
   19b02:	f000 fc1d 	bl	1a340 <radio_pkt_empty_get>
		if (link) {
   19b06:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19b0a:	7f2a      	ldrb	r2, [r5, #28]
	tx_release = NULL;
   19b0c:	f04f 0800 	mov.w	r8, #0
   19b10:	e7b0      	b.n	19a74 <lll_conn_isr_rx+0x234>
				lll->packet_tx_head_offset = offset;
   19b12:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
   19b16:	e7f6      	b.n	19b06 <lll_conn_isr_rx+0x2c6>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   19b18:	2003      	movs	r0, #3
   19b1a:	f7f7 feb9 	bl	11890 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   19b1e:	2800      	cmp	r0, #0
   19b20:	d0ae      	beq.n	19a80 <lll_conn_isr_rx+0x240>
		lll->nesn++;
   19b22:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19b26:	f083 0302 	eor.w	r3, r3, #2
   19b2a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		if (pdu_data_rx->len != 0) {
   19b2e:	7f6b      	ldrb	r3, [r5, #29]
   19b30:	2b00      	cmp	r3, #0
   19b32:	d0a5      	beq.n	19a80 <lll_conn_isr_rx+0x240>
			if (lll->enc_rx) {
   19b34:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19b38:	0718      	lsls	r0, r3, #28
   19b3a:	d42a      	bmi.n	19b92 <lll_conn_isr_rx+0x352>
			*is_rx_enqueue = 1U;
   19b3c:	2601      	movs	r6, #1
   19b3e:	e7a0      	b.n	19a82 <lll_conn_isr_rx+0x242>
   19b40:	00019451 	.word	0x00019451
   19b44:	20003aea 	.word	0x20003aea
   19b48:	20003bdb 	.word	0x20003bdb
   19b4c:	00019675 	.word	0x00019675
   19b50:	00029520 	.word	0x00029520
   19b54:	000286fc 	.word	0x000286fc
   19b58:	0002866c 	.word	0x0002866c
   19b5c:	000294dc 	.word	0x000294dc
   19b60:	000294d4 	.word	0x000294d4
   19b64:	20003bda 	.word	0x20003bda
   19b68:	00029574 	.word	0x00029574
				lll->packet_tx_head_len = 0;
   19b6c:	2200      	movs	r2, #0
   19b6e:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
				memq_dequeue(lll->memq_tx.tail,
   19b72:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19b74:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   19b78:	f7f4 fab2 	bl	e0e0 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   19b7c:	9b01      	ldr	r3, [sp, #4]
   19b7e:	681b      	ldr	r3, [r3, #0]
   19b80:	603b      	str	r3, [r7, #0]
				tx->next = link;
   19b82:	9b01      	ldr	r3, [sp, #4]
   19b84:	601f      	str	r7, [r3, #0]
				*tx_release = tx;
   19b86:	f8dd 8004 	ldr.w	r8, [sp, #4]
				FORCE_MD_CNT_SET();
   19b8a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19b8e:	7f2a      	ldrb	r2, [r5, #28]
   19b90:	e770      	b.n	19a74 <lll_conn_isr_rx+0x234>
				done = radio_ccm_is_done();
   19b92:	f000 fe33 	bl	1a7fc <radio_ccm_is_done>
				LL_ASSERT(done);
   19b96:	2800      	cmp	r0, #0
   19b98:	d067      	beq.n	19c6a <lll_conn_isr_rx+0x42a>
				bool mic_failure = !radio_ccm_mic_is_valid();
   19b9a:	f000 fe51 	bl	1a840 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   19b9e:	2800      	cmp	r0, #0
   19ba0:	d153      	bne.n	19c4a <lll_conn_isr_rx+0x40a>
				    lll->ccm_rx.counter == 0 &&
   19ba2:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   19ba6:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
				if (mic_failure &&
   19baa:	4313      	orrs	r3, r2
   19bac:	d104      	bne.n	19bb8 <lll_conn_isr_rx+0x378>
				    (pdu_data_rx->ll_id ==
   19bae:	7f2b      	ldrb	r3, [r5, #28]
				    lll->ccm_rx.counter == 0 &&
   19bb0:	f003 0303 	and.w	r3, r3, #3
   19bb4:	2b03      	cmp	r3, #3
   19bb6:	d032      	beq.n	19c1e <lll_conn_isr_rx+0x3de>
					mic_state = LLL_CONN_MIC_FAIL;
   19bb8:	4b33      	ldr	r3, [pc, #204]	; (19c88 <lll_conn_isr_rx+0x448>)
			radio_isr_set(isr_done, param);
   19bba:	4834      	ldr	r0, [pc, #208]	; (19c8c <lll_conn_isr_rx+0x44c>)
					mic_state = LLL_CONN_MIC_FAIL;
   19bbc:	2202      	movs	r2, #2
			radio_isr_set(isr_done, param);
   19bbe:	4621      	mov	r1, r4
					mic_state = LLL_CONN_MIC_FAIL;
   19bc0:	701a      	strb	r2, [r3, #0]
			radio_isr_set(isr_done, param);
   19bc2:	f000 fa53 	bl	1a06c <radio_isr_set>
			radio_disable();
   19bc6:	f000 fb67 	bl	1a298 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   19bca:	f000 fb85 	bl	1a2d8 <radio_is_ready>
   19bce:	b980      	cbnz	r0, 19bf2 <lll_conn_isr_rx+0x3b2>
	if (!radio_tmr_aa_restore()) {
   19bd0:	f000 fd8a 	bl	1a6e8 <radio_tmr_aa_restore>
   19bd4:	b1d8      	cbz	r0, 19c0e <lll_conn_isr_rx+0x3ce>
	if (tx_release) {
   19bd6:	f1b8 0f00 	cmp.w	r8, #0
   19bda:	f43f af15 	beq.w	19a08 <lll_conn_isr_rx+0x1c8>
		LL_ASSERT(lll->handle != 0xFFFF);
   19bde:	89a0      	ldrh	r0, [r4, #12]
   19be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19be4:	4298      	cmp	r0, r3
   19be6:	f43f af76 	beq.w	19ad6 <lll_conn_isr_rx+0x296>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   19bea:	4641      	mov	r1, r8
   19bec:	f7f9 fd48 	bl	13680 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   19bf0:	e6a3      	b.n	1993a <lll_conn_isr_rx+0xfa>
			LL_ASSERT(!radio_is_ready());
   19bf2:	4a27      	ldr	r2, [pc, #156]	; (19c90 <lll_conn_isr_rx+0x450>)
   19bf4:	4927      	ldr	r1, [pc, #156]	; (19c94 <lll_conn_isr_rx+0x454>)
   19bf6:	4828      	ldr	r0, [pc, #160]	; (19c98 <lll_conn_isr_rx+0x458>)
   19bf8:	f44f 7388 	mov.w	r3, #272	; 0x110
   19bfc:	f007 fda6 	bl	2174c <assert_print>
   19c00:	4040      	eors	r0, r0
   19c02:	f380 8811 	msr	BASEPRI, r0
   19c06:	f04f 0003 	mov.w	r0, #3
   19c0a:	df02      	svc	2
   19c0c:	e7e0      	b.n	19bd0 <lll_conn_isr_rx+0x390>
		radio_tmr_aa_save(radio_tmr_aa_get());
   19c0e:	f000 fd5f 	bl	1a6d0 <radio_tmr_aa_get>
   19c12:	f000 fd63 	bl	1a6dc <radio_tmr_aa_save>
	if (tx_release) {
   19c16:	f1b8 0f00 	cmp.w	r8, #0
   19c1a:	d1e0      	bne.n	19bde <lll_conn_isr_rx+0x39e>
   19c1c:	e6f4      	b.n	19a08 <lll_conn_isr_rx+0x1c8>
						radio_pkt_scratch_get();
   19c1e:	f000 fb93 	bl	1a348 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   19c22:	7843      	ldrb	r3, [r0, #1]
   19c24:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   19c26:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   19c28:	d8c6      	bhi.n	19bb8 <lll_conn_isr_rx+0x378>
						memcpy(pdu_data_rx,
   19c2a:	3303      	adds	r3, #3
   19c2c:	b2da      	uxtb	r2, r3
   19c2e:	4630      	mov	r0, r6
   19c30:	f009 ffec 	bl	23c0c <memcpy>
						lll->ccm_rx.counter--;
   19c34:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   19c38:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   19c3c:	3b01      	subs	r3, #1
   19c3e:	f8c4 3083 	str.w	r3, [r4, #131]	; 0x83
   19c42:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   19c46:	f8c4 3087 	str.w	r3, [r4, #135]	; 0x87
				lll->ccm_rx.counter++;
   19c4a:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
				mic_state = LLL_CONN_MIC_PASS;
   19c4e:	4a0e      	ldr	r2, [pc, #56]	; (19c88 <lll_conn_isr_rx+0x448>)
				lll->ccm_rx.counter++;
   19c50:	3301      	adds	r3, #1
   19c52:	f8c4 3083 	str.w	r3, [r4, #131]	; 0x83
   19c56:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
						lll->ccm_rx.counter--;
   19c5a:	f104 0183 	add.w	r1, r4, #131	; 0x83
				lll->ccm_rx.counter++;
   19c5e:	f143 0300 	adc.w	r3, r3, #0
   19c62:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   19c64:	2301      	movs	r3, #1
   19c66:	7013      	strb	r3, [r2, #0]
		if (err) {
   19c68:	e768      	b.n	19b3c <lll_conn_isr_rx+0x2fc>
				LL_ASSERT(done);
   19c6a:	4a09      	ldr	r2, [pc, #36]	; (19c90 <lll_conn_isr_rx+0x450>)
   19c6c:	490b      	ldr	r1, [pc, #44]	; (19c9c <lll_conn_isr_rx+0x45c>)
   19c6e:	480a      	ldr	r0, [pc, #40]	; (19c98 <lll_conn_isr_rx+0x458>)
   19c70:	f240 33fe 	movw	r3, #1022	; 0x3fe
   19c74:	f007 fd6a 	bl	2174c <assert_print>
   19c78:	4040      	eors	r0, r0
   19c7a:	f380 8811 	msr	BASEPRI, r0
   19c7e:	f04f 0003 	mov.w	r0, #3
   19c82:	df02      	svc	2
   19c84:	e789      	b.n	19b9a <lll_conn_isr_rx+0x35a>
   19c86:	bf00      	nop
   19c88:	20003bd9 	.word	0x20003bd9
   19c8c:	00019451 	.word	0x00019451
   19c90:	00029520 	.word	0x00029520
   19c94:	000294dc 	.word	0x000294dc
   19c98:	0002866c 	.word	0x0002866c
   19c9c:	0002956c 	.word	0x0002956c

00019ca0 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   19ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   19ca4:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   19ca6:	89a2      	ldrh	r2, [r4, #12]
   19ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19cac:	429a      	cmp	r2, r3
{
   19cae:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   19cb0:	f000 80d2 	beq.w	19e58 <prepare_cb+0x1b8>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   19cb4:	4605      	mov	r5, r0
   19cb6:	f7ff fc35 	bl	19524 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   19cba:	892b      	ldrh	r3, [r5, #8]
   19cbc:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   19cbe:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   19cc0:	441a      	add	r2, r3
   19cc2:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   19cc4:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   19cc6:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   19cc8:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   19cca:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   19ccc:	1c41      	adds	r1, r0, #1
   19cce:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   19cd0:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   19cd2:	f04f 0100 	mov.w	r1, #0
   19cd6:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   19cd8:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   19cdc:	f100 808e 	bmi.w	19dfc <prepare_cb+0x15c>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   19ce0:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   19ce4:	460b      	mov	r3, r1
   19ce6:	7fa1      	ldrb	r1, [r4, #30]
   19ce8:	9000      	str	r0, [sp, #0]
   19cea:	f104 001f 	add.w	r0, r4, #31
   19cee:	f7fe f891 	bl	17e14 <lll_chan_sel_1>
   19cf2:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   19cf4:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   19cf8:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   19cfa:	e9d4 020d 	ldrd	r0, r2, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   19cfe:	2100      	movs	r1, #0
	lll->periph.window_size_event_us +=
   19d00:	4402      	add	r2, r0
	lll->periph.window_widening_prepare_us = 0;
   19d02:	62e1      	str	r1, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   19d04:	6361      	str	r1, [r4, #52]	; 0x34
   19d06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_size_event_us +=
   19d08:	63a2      	str	r2, [r4, #56]	; 0x38
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   19d0a:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
   19d0e:	428b      	cmp	r3, r1
   19d10:	bf28      	it	cs
   19d12:	460b      	movcs	r3, r1
   19d14:	f012 0204 	ands.w	r2, r2, #4
   19d18:	6323      	str	r3, [r4, #48]	; 0x30
   19d1a:	f000 808f 	beq.w	19e3c <prepare_cb+0x19c>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   19d1e:	f000 f9e7 	bl	1a0f0 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   19d22:	2000      	movs	r0, #0
   19d24:	f000 fa3a 	bl	1a19c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	radio_aa_set(lll->access_addr);
   19d28:	1d20      	adds	r0, r4, #4
   19d2a:	f000 fa55 	bl	1a1d8 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   19d2e:	8923      	ldrh	r3, [r4, #8]
   19d30:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   19d32:	f240 605b 	movw	r0, #1627	; 0x65b
   19d36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   19d3a:	f000 faeb 	bl	1a314 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   19d3e:	4630      	mov	r0, r6
   19d40:	f7fe fc9c 	bl	1867c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   19d44:	4621      	mov	r1, r4
   19d46:	4849      	ldr	r0, [pc, #292]	; (19e6c <prepare_cb+0x1cc>)
   19d48:	f000 f990 	bl	1a06c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   19d4c:	2096      	movs	r0, #150	; 0x96
   19d4e:	f000 fbfd 	bl	1a54c <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   19d52:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
   19d56:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   19d5a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   19d5e:	2100      	movs	r1, #0
   19d60:	f002 0207 	and.w	r2, r2, #7
   19d64:	f000 0007 	and.w	r0, r0, #7
   19d68:	f000 fb3e 	bl	1a3e8 <radio_switch_complete_and_tx>
	}

	/* The call can use Radio interface that alternates NRF_RADIO->SHORTS. The register is
	 * set by radio_switch_complete_XXX functions, hence any changes done before are cleared.
	 */
	lll_conn_rx_pkt_set(lll);
   19d6c:	4620      	mov	r0, r4
   19d6e:	f7ff fc39 	bl	195e4 <lll_conn_rx_pkt_set>

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   19d72:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   19d74:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   19d76:	4638      	mov	r0, r7
   19d78:	f7fe fc72 	bl	18660 <lll_event_offset_get>
   19d7c:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   19d7e:	686a      	ldr	r2, [r5, #4]
   19d80:	f106 0109 	add.w	r1, r6, #9
   19d84:	2000      	movs	r0, #0
   19d86:	f000 fbed 	bl	1a564 <radio_tmr_start>
   19d8a:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   19d8c:	f000 fc8c 	bl	1a6a8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   19d90:	2000      	movs	r0, #0
   19d92:	f000 fca3 	bl	1a6dc <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   19d96:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19d98:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   19d9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   19da0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19da2:	f000 0007 	and.w	r0, r0, #7
   19da6:	2101      	movs	r1, #1
	hcto = remainder_us +
   19da8:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19dac:	f000 fa66 	bl	1a27c <radio_rx_ready_delay_get>
	hcto = remainder_us +
   19db0:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19db2:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   19db4:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   19db8:	f000 0007 	and.w	r0, r0, #7
   19dbc:	2802      	cmp	r0, #2
   19dbe:	d03b      	beq.n	19e38 <prepare_cb+0x198>
		return 40;
   19dc0:	2804      	cmp	r0, #4
   19dc2:	bf0c      	ite	eq
   19dc4:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   19dc8:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   19dca:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   19dcc:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   19dce:	f000 fa57 	bl	1a280 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   19dd2:	4428      	add	r0, r5
   19dd4:	f000 fc5a 	bl	1a68c <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   19dd8:	89a1      	ldrh	r1, [r4, #12]
   19dda:	3103      	adds	r1, #3
   19ddc:	4632      	mov	r2, r6
   19dde:	b2c9      	uxtb	r1, r1
   19de0:	4638      	mov	r0, r7
   19de2:	f7e7 ff5d 	bl	1ca0 <lll_preempt_calc>
   19de6:	b188      	cbz	r0, 19e0c <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   19de8:	4821      	ldr	r0, [pc, #132]	; (19e70 <prepare_cb+0x1d0>)
   19dea:	4621      	mov	r1, r4
   19dec:	f000 f93e 	bl	1a06c <radio_isr_set>
		radio_disable();
   19df0:	f000 fa52 	bl	1a298 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   19df4:	2000      	movs	r0, #0
   19df6:	b002      	add	sp, #8
   19df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   19dfc:	460a      	mov	r2, r1
   19dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19e02:	8be1      	ldrh	r1, [r4, #30]
   19e04:	f7fe f852 	bl	17eac <lll_chan_sel_2>
   19e08:	4606      	mov	r6, r0
   19e0a:	e773      	b.n	19cf4 <prepare_cb+0x54>
		ret = lll_prepare_done(lll);
   19e0c:	4620      	mov	r0, r4
   19e0e:	f7fe fbcf 	bl	185b0 <lll_prepare_done>
		LL_ASSERT(!ret);
   19e12:	2800      	cmp	r0, #0
   19e14:	d0ee      	beq.n	19df4 <prepare_cb+0x154>
   19e16:	4a17      	ldr	r2, [pc, #92]	; (19e74 <prepare_cb+0x1d4>)
   19e18:	4917      	ldr	r1, [pc, #92]	; (19e78 <prepare_cb+0x1d8>)
   19e1a:	4818      	ldr	r0, [pc, #96]	; (19e7c <prepare_cb+0x1dc>)
   19e1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
   19e20:	f007 fc94 	bl	2174c <assert_print>
   19e24:	4040      	eors	r0, r0
   19e26:	f380 8811 	msr	BASEPRI, r0
   19e2a:	f04f 0003 	mov.w	r0, #3
   19e2e:	df02      	svc	2
}
   19e30:	2000      	movs	r0, #0
   19e32:	b002      	add	sp, #8
   19e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   19e38:	2318      	movs	r3, #24
   19e3a:	e7c6      	b.n	19dca <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   19e3c:	e9d4 0117 	ldrd	r0, r1, [r4, #92]	; 0x5c
   19e40:	f7f4 f946 	bl	e0d0 <memq_peek>
		if (!link) {
   19e44:	2800      	cmp	r0, #0
   19e46:	f47f af6a 	bne.w	19d1e <prepare_cb+0x7e>
			lll->empty = 1U;
   19e4a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   19e4e:	f043 0304 	orr.w	r3, r3, #4
   19e52:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
   19e56:	e762      	b.n	19d1e <prepare_cb+0x7e>
		radio_isr_set(lll_isr_early_abort, lll);
   19e58:	4809      	ldr	r0, [pc, #36]	; (19e80 <prepare_cb+0x1e0>)
   19e5a:	4621      	mov	r1, r4
   19e5c:	f000 f906 	bl	1a06c <radio_isr_set>
		radio_disable();
   19e60:	f000 fa1a 	bl	1a298 <radio_disable>
}
   19e64:	2000      	movs	r0, #0
   19e66:	b002      	add	sp, #8
   19e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e6c:	00019841 	.word	0x00019841
   19e70:	000187b9 	.word	0x000187b9
   19e74:	0002958c 	.word	0x0002958c
   19e78:	00028b38 	.word	0x00028b38
   19e7c:	0002866c 	.word	0x0002866c
   19e80:	000187d9 	.word	0x000187d9

00019e84 <lll_periph_prepare>:
{
   19e84:	b510      	push	{r4, lr}
   19e86:	b082      	sub	sp, #8
   19e88:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   19e8a:	f7fe fdf3 	bl	18a74 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   19e8e:	2800      	cmp	r0, #0
   19e90:	db25      	blt.n	19ede <lll_periph_prepare+0x5a>
	lll = p->param;
   19e92:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   19e94:	8920      	ldrh	r0, [r4, #8]
   19e96:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   19e98:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   19e9a:	fb00 3303 	mla	r3, r0, r3, r3
   19e9e:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   19ea0:	4413      	add	r3, r2
   19ea2:	4283      	cmp	r3, r0
   19ea4:	bf28      	it	cs
   19ea6:	4603      	movcs	r3, r0
   19ea8:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   19eaa:	4a13      	ldr	r2, [pc, #76]	; (19ef8 <lll_periph_prepare+0x74>)
   19eac:	4913      	ldr	r1, [pc, #76]	; (19efc <lll_periph_prepare+0x78>)
   19eae:	4814      	ldr	r0, [pc, #80]	; (19f00 <lll_periph_prepare+0x7c>)
   19eb0:	9400      	str	r4, [sp, #0]
   19eb2:	2300      	movs	r3, #0
   19eb4:	f7f8 f83c 	bl	11f30 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   19eb8:	b108      	cbz	r0, 19ebe <lll_periph_prepare+0x3a>
   19eba:	3077      	adds	r0, #119	; 0x77
   19ebc:	d101      	bne.n	19ec2 <lll_periph_prepare+0x3e>
}
   19ebe:	b002      	add	sp, #8
   19ec0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   19ec2:	4a10      	ldr	r2, [pc, #64]	; (19f04 <lll_periph_prepare+0x80>)
   19ec4:	4910      	ldr	r1, [pc, #64]	; (19f08 <lll_periph_prepare+0x84>)
   19ec6:	4811      	ldr	r0, [pc, #68]	; (19f0c <lll_periph_prepare+0x88>)
   19ec8:	235d      	movs	r3, #93	; 0x5d
   19eca:	f007 fc3f 	bl	2174c <assert_print>
   19ece:	4040      	eors	r0, r0
   19ed0:	f380 8811 	msr	BASEPRI, r0
   19ed4:	f04f 0003 	mov.w	r0, #3
   19ed8:	df02      	svc	2
}
   19eda:	b002      	add	sp, #8
   19edc:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   19ede:	4a09      	ldr	r2, [pc, #36]	; (19f04 <lll_periph_prepare+0x80>)
   19ee0:	490b      	ldr	r1, [pc, #44]	; (19f10 <lll_periph_prepare+0x8c>)
   19ee2:	480a      	ldr	r0, [pc, #40]	; (19f0c <lll_periph_prepare+0x88>)
   19ee4:	234c      	movs	r3, #76	; 0x4c
   19ee6:	f007 fc31 	bl	2174c <assert_print>
   19eea:	4040      	eors	r0, r0
   19eec:	f380 8811 	msr	BASEPRI, r0
   19ef0:	f04f 0003 	mov.w	r0, #3
   19ef4:	df02      	svc	2
   19ef6:	e7cc      	b.n	19e92 <lll_periph_prepare+0xe>
   19ef8:	00019ca1 	.word	0x00019ca1
   19efc:	0001954d 	.word	0x0001954d
   19f00:	00018659 	.word	0x00018659
   19f04:	0002958c 	.word	0x0002958c
   19f08:	0002950c 	.word	0x0002950c
   19f0c:	0002866c 	.word	0x0002866c
   19f10:	000293f8 	.word	0x000293f8

00019f14 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   19f14:	4b05      	ldr	r3, [pc, #20]	; (19f2c <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   19f16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19f1a:	2100      	movs	r1, #0
   19f1c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   19f20:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   19f24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   19f28:	4770      	bx	lr
   19f2a:	bf00      	nop
   19f2c:	4000b000 	.word	0x4000b000

00019f30 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   19f30:	4b05      	ldr	r3, [pc, #20]	; (19f48 <cntr_start+0x18>)
   19f32:	7818      	ldrb	r0, [r3, #0]
   19f34:	1c42      	adds	r2, r0, #1
   19f36:	701a      	strb	r2, [r3, #0]
   19f38:	b918      	cbnz	r0, 19f42 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19f3a:	4b04      	ldr	r3, [pc, #16]	; (19f4c <cntr_start+0x1c>)
   19f3c:	2201      	movs	r2, #1
   19f3e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   19f40:	4770      	bx	lr
		return 1;
   19f42:	2001      	movs	r0, #1
}
   19f44:	4770      	bx	lr
   19f46:	bf00      	nop
   19f48:	20003bdc 	.word	0x20003bdc
   19f4c:	4000b000 	.word	0x4000b000

00019f50 <cntr_stop>:

uint32_t cntr_stop(void)
{
   19f50:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   19f52:	4c0d      	ldr	r4, [pc, #52]	; (19f88 <cntr_stop+0x38>)
   19f54:	7820      	ldrb	r0, [r4, #0]
   19f56:	b148      	cbz	r0, 19f6c <cntr_stop+0x1c>

	if (--_refcount) {
   19f58:	3801      	subs	r0, #1
   19f5a:	b2c0      	uxtb	r0, r0
   19f5c:	7020      	strb	r0, [r4, #0]
   19f5e:	b918      	cbnz	r0, 19f68 <cntr_stop+0x18>
   19f60:	4b0a      	ldr	r3, [pc, #40]	; (19f8c <cntr_stop+0x3c>)
   19f62:	2201      	movs	r2, #1
   19f64:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   19f66:	bd10      	pop	{r4, pc}
		return 1;
   19f68:	2001      	movs	r0, #1
}
   19f6a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   19f6c:	4a08      	ldr	r2, [pc, #32]	; (19f90 <cntr_stop+0x40>)
   19f6e:	4909      	ldr	r1, [pc, #36]	; (19f94 <cntr_stop+0x44>)
   19f70:	4809      	ldr	r0, [pc, #36]	; (19f98 <cntr_stop+0x48>)
   19f72:	232a      	movs	r3, #42	; 0x2a
   19f74:	f007 fbea 	bl	2174c <assert_print>
   19f78:	4040      	eors	r0, r0
   19f7a:	f380 8811 	msr	BASEPRI, r0
   19f7e:	f04f 0003 	mov.w	r0, #3
   19f82:	df02      	svc	2
	if (--_refcount) {
   19f84:	7820      	ldrb	r0, [r4, #0]
   19f86:	e7e7      	b.n	19f58 <cntr_stop+0x8>
   19f88:	20003bdc 	.word	0x20003bdc
   19f8c:	4000b000 	.word	0x4000b000
   19f90:	000295e0 	.word	0x000295e0
   19f94:	0002962c 	.word	0x0002962c
   19f98:	0002866c 	.word	0x0002866c

00019f9c <cntr_cnt_get>:
     return p_reg->COUNTER;
   19f9c:	4b01      	ldr	r3, [pc, #4]	; (19fa4 <cntr_cnt_get+0x8>)
   19f9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   19fa2:	4770      	bx	lr
   19fa4:	4000b000 	.word	0x4000b000

00019fa8 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   19fa8:	4b02      	ldr	r3, [pc, #8]	; (19fb4 <cntr_cmp_set+0xc>)
   19faa:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19fae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   19fb2:	4770      	bx	lr
   19fb4:	4000b000 	.word	0x4000b000

00019fb8 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19fb8:	4b12      	ldr	r3, [pc, #72]	; (1a004 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   19fba:	b430      	push	{r4, r5}
   19fbc:	2101      	movs	r1, #1
   19fbe:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   19fc0:	2000      	movs	r0, #0
   19fc2:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   19fc4:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   19fc8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   19fcc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   19fd0:	6019      	str	r1, [r3, #0]
}
   19fd2:	e005      	b.n	19fe0 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   19fd4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   19fd8:	b932      	cbnz	r2, 19fe8 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   19fda:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   19fde:	b11a      	cbz	r2, 19fe8 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   19fe0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   19fe4:	2a00      	cmp	r2, #0
   19fe6:	d0f5      	beq.n	19fd4 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19fe8:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   19fea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   19fee:	2a00      	cmp	r2, #0
   19ff0:	d1e7      	bne.n	19fc2 <do_ecb+0xa>
   19ff2:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   19ff6:	2d00      	cmp	r5, #0
   19ff8:	d0e3      	beq.n	19fc2 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   19ffa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   19ffe:	bc30      	pop	{r4, r5}
   1a000:	4770      	bx	lr
   1a002:	bf00      	nop
   1a004:	4000e000 	.word	0x4000e000

0001a008 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1a008:	b570      	push	{r4, r5, r6, lr}
   1a00a:	b08c      	sub	sp, #48	; 0x30
   1a00c:	460e      	mov	r6, r1
   1a00e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1a010:	4601      	mov	r1, r0
   1a012:	2210      	movs	r2, #16
   1a014:	4668      	mov	r0, sp
{
   1a016:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1a018:	f7f4 f828 	bl	e06c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1a01c:	2210      	movs	r2, #16
   1a01e:	eb0d 0002 	add.w	r0, sp, r2
   1a022:	4631      	mov	r1, r6
   1a024:	f7f4 f822 	bl	e06c <mem_rcopy>

	do_ecb(&ecb);
   1a028:	4668      	mov	r0, sp
   1a02a:	f7ff ffc5 	bl	19fb8 <do_ecb>

	if (cipher_text_le) {
   1a02e:	b125      	cbz	r5, 1a03a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1a030:	2210      	movs	r2, #16
   1a032:	a908      	add	r1, sp, #32
   1a034:	4628      	mov	r0, r5
   1a036:	f7f4 f819 	bl	e06c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1a03a:	b124      	cbz	r4, 1a046 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1a03c:	2210      	movs	r2, #16
   1a03e:	a908      	add	r1, sp, #32
   1a040:	4620      	mov	r0, r4
   1a042:	f009 fde3 	bl	23c0c <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1a046:	b00c      	add	sp, #48	; 0x30
   1a048:	bd70      	pop	{r4, r5, r6, pc}
   1a04a:	bf00      	nop

0001a04c <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1a04c:	4b04      	ldr	r3, [pc, #16]	; (1a060 <isr_radio+0x14>)
   1a04e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1a052:	b123      	cbz	r3, 1a05e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1a054:	4a03      	ldr	r2, [pc, #12]	; (1a064 <isr_radio+0x18>)
   1a056:	4b04      	ldr	r3, [pc, #16]	; (1a068 <isr_radio+0x1c>)
   1a058:	6810      	ldr	r0, [r2, #0]
   1a05a:	681b      	ldr	r3, [r3, #0]
   1a05c:	4718      	bx	r3
}
   1a05e:	4770      	bx	lr
   1a060:	40001000 	.word	0x40001000
   1a064:	200037b0 	.word	0x200037b0
   1a068:	200037b4 	.word	0x200037b4

0001a06c <radio_isr_set>:
{
   1a06c:	b538      	push	{r3, r4, r5, lr}
   1a06e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1a070:	2001      	movs	r0, #1
{
   1a072:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1a074:	f7ed f894 	bl	71a0 <arch_irq_disable>
	isr_cb = cb;
   1a078:	4b08      	ldr	r3, [pc, #32]	; (1a09c <radio_isr_set+0x30>)
	isr_cb_param = param;
   1a07a:	4a09      	ldr	r2, [pc, #36]	; (1a0a0 <radio_isr_set+0x34>)
	isr_cb = cb;
   1a07c:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a07e:	4909      	ldr	r1, [pc, #36]	; (1a0a4 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a080:	4b09      	ldr	r3, [pc, #36]	; (1a0a8 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1a082:	6015      	str	r5, [r2, #0]
   1a084:	2010      	movs	r0, #16
   1a086:	2202      	movs	r2, #2
   1a088:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1a08c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1a090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1a094:	2001      	movs	r0, #1
   1a096:	f7ed b875 	b.w	7184 <arch_irq_enable>
   1a09a:	bf00      	nop
   1a09c:	200037b4 	.word	0x200037b4
   1a0a0:	200037b0 	.word	0x200037b0
   1a0a4:	40001000 	.word	0x40001000
   1a0a8:	e000e100 	.word	0xe000e100

0001a0ac <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1a0ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a0b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1a0b4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1a0b6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1a0ba:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1a0be:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1a0c2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1a0c6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1a0ca:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1a0ce:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1a0d2:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1a0d6:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1a0da:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1a0de:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1a0e2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1a0e6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1a0ea:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1a0ee:	4770      	bx	lr

0001a0f0 <radio_reset>:
{
   1a0f0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1a0f2:	2001      	movs	r0, #1
   1a0f4:	f7ed f854 	bl	71a0 <arch_irq_disable>
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1a0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	NRF_RADIO->PCNF1 = HAL_RADIO_RESET_VALUE_PCNF1;
   1a0fc:	491b      	ldr	r1, [pc, #108]	; (1a16c <radio_reset+0x7c>)
   1a0fe:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1a102:	2000      	movs	r0, #0
   1a104:	f8c1 0518 	str.w	r0, [r1, #1304]	; 0x518
   1a108:	1c59      	adds	r1, r3, #1
   1a10a:	d01f      	beq.n	1a14c <radio_reset+0x5c>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1a10c:	2b06      	cmp	r3, #6
   1a10e:	d009      	beq.n	1a124 <radio_reset+0x34>
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1a110:	4b17      	ldr	r3, [pc, #92]	; (1a170 <radio_reset+0x80>)
   1a112:	f44f 5190 	mov.w	r1, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1a116:	f44f 5210 	mov.w	r2, #9216	; 0x2400
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1a11a:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1a11e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   1a122:	bd08      	pop	{r3, pc}
                var2 = *(uint32_t *)0x10000134ul;
   1a124:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
            {
                switch(var2)
   1a128:	3b03      	subs	r3, #3
   1a12a:	2b04      	cmp	r3, #4
   1a12c:	d8f0      	bhi.n	1a110 <radio_reset+0x20>
	if (nrf52_errata_102() || nrf52_errata_106() || nrf52_errata_107()) {
   1a12e:	4a11      	ldr	r2, [pc, #68]	; (1a174 <radio_reset+0x84>)
   1a130:	5cd2      	ldrb	r2, [r2, r3]
   1a132:	b1b2      	cbz	r2, 1a162 <radio_reset+0x72>
			((*(volatile uint32_t *)0x40001774) & 0xfffffffe)
   1a134:	4a0d      	ldr	r2, [pc, #52]	; (1a16c <radio_reset+0x7c>)
   1a136:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
			| 0x01000000;
   1a13a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a13e:	f023 0301 	bic.w	r3, r3, #1
   1a142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
		*(volatile uint32_t *)0x40001774 =
   1a146:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
   1a14a:	e7e1      	b.n	1a110 <radio_reset+0x20>
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a14c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1a150:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
   1a154:	2a06      	cmp	r2, #6
   1a156:	d1db      	bne.n	1a110 <radio_reset+0x20>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1a158:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1a15c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1a160:	e7e2      	b.n	1a128 <radio_reset+0x38>
	if (nrf52_errata_102() || nrf52_errata_106() || nrf52_errata_107()) {
   1a162:	4a05      	ldr	r2, [pc, #20]	; (1a178 <radio_reset+0x88>)
   1a164:	5cd3      	ldrb	r3, [r2, r3]
   1a166:	2b00      	cmp	r3, #0
   1a168:	d0d2      	beq.n	1a110 <radio_reset+0x20>
   1a16a:	e7e3      	b.n	1a134 <radio_reset+0x44>
   1a16c:	40001000 	.word	0x40001000
   1a170:	4001f000 	.word	0x4001f000
   1a174:	00029640 	.word	0x00029640
   1a178:	00029638 	.word	0x00029638

0001a17c <radio_stop>:
}
   1a17c:	4770      	bx	lr
   1a17e:	bf00      	nop

0001a180 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1a180:	4b05      	ldr	r3, [pc, #20]	; (1a198 <radio_phy_set+0x18>)
	uint32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1a182:	2802      	cmp	r0, #2
   1a184:	bf0c      	ite	eq
   1a186:	2104      	moveq	r1, #4
   1a188:	2103      	movne	r1, #3
	NRF_RADIO->MODECNF0 = ((RADIO_MODECNF0_DTX_Center <<
   1a18a:	f240 2201 	movw	r2, #513	; 0x201
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1a18e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 = ((RADIO_MODECNF0_DTX_Center <<
   1a192:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1a196:	4770      	bx	lr
   1a198:	40001000 	.word	0x40001000

0001a19c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1a19c:	4b01      	ldr	r3, [pc, #4]	; (1a1a4 <radio_tx_power_set+0x8>)
   1a19e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1a1a2:	4770      	bx	lr
   1a1a4:	40001000 	.word	0x40001000

0001a1a8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1a1a8:	4b01      	ldr	r3, [pc, #4]	; (1a1b0 <radio_freq_chan_set+0x8>)
   1a1aa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1a1ae:	4770      	bx	lr
   1a1b0:	40001000 	.word	0x40001000

0001a1b4 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1a1b4:	4b07      	ldr	r3, [pc, #28]	; (1a1d4 <radio_whiten_iv_set+0x20>)
   1a1b6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1a1ba:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1a1be:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1a1c2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1a1c6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1a1ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1a1ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1a1d2:	4770      	bx	lr
   1a1d4:	40001000 	.word	0x40001000

0001a1d8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1a1d8:	4a0a      	ldr	r2, [pc, #40]	; (1a204 <radio_aa_set+0x2c>)
   1a1da:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1a1dc:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1a1de:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1a1e2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1a1e6:	78c3      	ldrb	r3, [r0, #3]
   1a1e8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1a1ec:	7843      	ldrb	r3, [r0, #1]
   1a1ee:	f890 c002 	ldrb.w	ip, [r0, #2]
   1a1f2:	7801      	ldrb	r1, [r0, #0]
   1a1f4:	041b      	lsls	r3, r3, #16
   1a1f6:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1a1fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1a1fe:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1a202:	4770      	bx	lr
   1a204:	40001000 	.word	0x40001000

0001a208 <radio_pkt_configure>:
	switch (phy) {
   1a208:	f3c2 0342 	ubfx	r3, r2, #1, #3
   1a20c:	f1a3 0302 	sub.w	r3, r3, #2
   1a210:	fab3 f383 	clz	r3, r3
   1a214:	095b      	lsrs	r3, r3, #5
   1a216:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1a218:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1a21a:	bf48      	it	mi
   1a21c:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1a220:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   1a224:	4a09      	ldr	r2, [pc, #36]	; (1a24c <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1a226:	4318      	orrs	r0, r3
   1a228:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1a22c:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1a230:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1a234:	4b06      	ldr	r3, [pc, #24]	; (1a250 <radio_pkt_configure+0x48>)
   1a236:	4003      	ands	r3, r0
   1a238:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   1a23c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1a240:	4319      	orrs	r1, r3
   1a242:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1a246:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1a24a:	4770      	bx	lr
   1a24c:	40001000 	.word	0x40001000
   1a250:	fef80000 	.word	0xfef80000

0001a254 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1a254:	4b01      	ldr	r3, [pc, #4]	; (1a25c <radio_pkt_rx_set+0x8>)
   1a256:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1a25a:	4770      	bx	lr
   1a25c:	40001000 	.word	0x40001000

0001a260 <radio_pkt_tx_set>:
void radio_pkt_tx_set(void *tx_packet)
   1a260:	4b01      	ldr	r3, [pc, #4]	; (1a268 <radio_pkt_tx_set+0x8>)
   1a262:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1a266:	4770      	bx	lr
   1a268:	40001000 	.word	0x40001000

0001a26c <radio_tx_ready_delay_get>:
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_US;
   1a26c:	2802      	cmp	r0, #2
}
   1a26e:	bf0c      	ite	eq
   1a270:	2028      	moveq	r0, #40	; 0x28
   1a272:	2029      	movne	r0, #41	; 0x29
   1a274:	4770      	bx	lr
   1a276:	bf00      	nop

0001a278 <radio_tx_chain_delay_get>:
}
   1a278:	2001      	movs	r0, #1
   1a27a:	4770      	bx	lr

0001a27c <radio_rx_ready_delay_get>:
}
   1a27c:	2029      	movs	r0, #41	; 0x29
   1a27e:	4770      	bx	lr

0001a280 <radio_rx_chain_delay_get>:
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_US;
   1a280:	2802      	cmp	r0, #2
}
   1a282:	bf0c      	ite	eq
   1a284:	2006      	moveq	r0, #6
   1a286:	200a      	movne	r0, #10
   1a288:	4770      	bx	lr
   1a28a:	bf00      	nop

0001a28c <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a28c:	4b01      	ldr	r3, [pc, #4]	; (1a294 <radio_tx_enable+0x8>)
   1a28e:	2201      	movs	r2, #1
   1a290:	601a      	str	r2, [r3, #0]
}
   1a292:	4770      	bx	lr
   1a294:	40001000 	.word	0x40001000

0001a298 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1a298:	4a07      	ldr	r2, [pc, #28]	; (1a2b8 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1a29a:	4908      	ldr	r1, [pc, #32]	; (1a2bc <radio_disable+0x24>)
{
   1a29c:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1a29e:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1a2a0:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1a2a4:	2000      	movs	r0, #0
   1a2a6:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1a2aa:	6053      	str	r3, [r2, #4]
   1a2ac:	60d3      	str	r3, [r2, #12]
   1a2ae:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1a2b2:	610b      	str	r3, [r1, #16]
}
   1a2b4:	bc10      	pop	{r4}
   1a2b6:	4770      	bx	lr
   1a2b8:	4001f000 	.word	0x4001f000
   1a2bc:	40001000 	.word	0x40001000

0001a2c0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1a2c0:	4b04      	ldr	r3, [pc, #16]	; (1a2d4 <radio_status_reset+0x14>)
   1a2c2:	2200      	movs	r2, #0
   1a2c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1a2c8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1a2cc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1a2d0:	4770      	bx	lr
   1a2d2:	bf00      	nop
   1a2d4:	40001000 	.word	0x40001000

0001a2d8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1a2d8:	4b03      	ldr	r3, [pc, #12]	; (1a2e8 <radio_is_ready+0x10>)
   1a2da:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1a2de:	3800      	subs	r0, #0
   1a2e0:	bf18      	it	ne
   1a2e2:	2001      	movne	r0, #1
   1a2e4:	4770      	bx	lr
   1a2e6:	bf00      	nop
   1a2e8:	40001000 	.word	0x40001000

0001a2ec <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   1a2ec:	4b03      	ldr	r3, [pc, #12]	; (1a2fc <radio_is_done+0x10>)
   1a2ee:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1a2f2:	3800      	subs	r0, #0
   1a2f4:	bf18      	it	ne
   1a2f6:	2001      	movne	r0, #1
   1a2f8:	4770      	bx	lr
   1a2fa:	bf00      	nop
   1a2fc:	40001000 	.word	0x40001000

0001a300 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1a300:	4b03      	ldr	r3, [pc, #12]	; (1a310 <radio_is_idle+0x10>)
   1a302:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1a306:	fab0 f080 	clz	r0, r0
   1a30a:	0940      	lsrs	r0, r0, #5
   1a30c:	4770      	bx	lr
   1a30e:	bf00      	nop
   1a310:	40001000 	.word	0x40001000

0001a314 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1a314:	4b04      	ldr	r3, [pc, #16]	; (1a328 <radio_crc_configure+0x14>)
   1a316:	f240 1203 	movw	r2, #259	; 0x103
   1a31a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1a31e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1a322:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1a326:	4770      	bx	lr
   1a328:	40001000 	.word	0x40001000

0001a32c <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1a32c:	4b03      	ldr	r3, [pc, #12]	; (1a33c <radio_crc_is_valid+0x10>)
   1a32e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1a332:	3800      	subs	r0, #0
   1a334:	bf18      	it	ne
   1a336:	2001      	movne	r0, #1
   1a338:	4770      	bx	lr
   1a33a:	bf00      	nop
   1a33c:	40001000 	.word	0x40001000

0001a340 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1a340:	4800      	ldr	r0, [pc, #0]	; (1a344 <radio_pkt_empty_get+0x4>)
   1a342:	4770      	bx	lr
   1a344:	200037ac 	.word	0x200037ac

0001a348 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1a348:	4800      	ldr	r0, [pc, #0]	; (1a34c <radio_pkt_scratch_get+0x4>)
   1a34a:	4770      	bx	lr
   1a34c:	200036a8 	.word	0x200036a8

0001a350 <radio_pkt_decrypt_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_decrypt_get(void)
{
	return _pkt_decrypt;
}
   1a350:	4800      	ldr	r0, [pc, #0]	; (1a354 <radio_pkt_decrypt_get+0x4>)
   1a352:	4770      	bx	lr
   1a354:	200035a4 	.word	0x200035a4

0001a358 <radio_switch_complete_and_rx>:
	sw_tifs_toggle &= 1U;
}
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   1a358:	b4f0      	push	{r4, r5, r6, r7}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1a35a:	4b1d      	ldr	r3, [pc, #116]	; (1a3d0 <radio_switch_complete_and_rx+0x78>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1a35c:	4d1d      	ldr	r5, [pc, #116]	; (1a3d4 <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a35e:	4e1e      	ldr	r6, [pc, #120]	; (1a3d8 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1a360:	4c1e      	ldr	r4, [pc, #120]	; (1a3dc <radio_switch_complete_and_rx+0x84>)
   1a362:	4f1f      	ldr	r7, [pc, #124]	; (1a3e0 <radio_switch_complete_and_rx+0x88>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1a364:	2203      	movs	r2, #3
   1a366:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1a36a:	782a      	ldrb	r2, [r5, #0]
   1a36c:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1a370:	f102 030c 	add.w	r3, r2, #12
   1a374:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1a376:	00d0      	lsls	r0, r2, #3
   1a378:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1a37a:	0091      	lsls	r1, r2, #2
   1a37c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1a380:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1a384:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1a388:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a38c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1a390:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1a394:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1a398:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a39c:	4811      	ldr	r0, [pc, #68]	; (1a3e4 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a39e:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a3a2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1a3a6:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1a3aa:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1a3ac:	bf8a      	itet	hi
   1a3ae:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1a3b2:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1a3b4:	3b2d      	subhi	r3, #45	; 0x2d
   1a3b6:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1a3ba:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1a3bc:	4b06      	ldr	r3, [pc, #24]	; (1a3d8 <radio_switch_complete_and_rx+0x80>)
   1a3be:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1a3c2:	f002 0201 	and.w	r2, r2, #1
   1a3c6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1a3ca:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1a3cc:	bcf0      	pop	{r4, r5, r6, r7}
   1a3ce:	4770      	bx	lr
   1a3d0:	40001000 	.word	0x40001000
   1a3d4:	20003bdd 	.word	0x20003bdd
   1a3d8:	4001f000 	.word	0x4001f000
   1a3dc:	40009140 	.word	0x40009140
   1a3e0:	4000110c 	.word	0x4000110c
   1a3e4:	40001004 	.word	0x40001004

0001a3e8 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   1a3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1a3ec:	4e28      	ldr	r6, [pc, #160]	; (1a490 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1a3ee:	4c29      	ldr	r4, [pc, #164]	; (1a494 <radio_switch_complete_and_tx+0xac>)
   1a3f0:	4f29      	ldr	r7, [pc, #164]	; (1a498 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a3f2:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1a49c <radio_switch_complete_and_tx+0xb4>
   1a3f6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1a4a0 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1a3fa:	2303      	movs	r3, #3
   1a3fc:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1a400:	7821      	ldrb	r1, [r4, #0]
   1a402:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1a406:	f101 030c 	add.w	r3, r1, #12
   1a40a:	b2db      	uxtb	r3, r3
   1a40c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1a40e:	00cd      	lsls	r5, r1, #3
   1a410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a414:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1a418:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1a41c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1a420:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a424:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1a428:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a42c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   1a430:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a434:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1a438:	f24a 234e 	movw	r3, #41550	; 0xa24e
   1a43c:	2a02      	cmp	r2, #2
   1a43e:	bf18      	it	ne
   1a440:	461d      	movne	r5, r3

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   1a442:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   1a446:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1a44a:	f241 534a 	movw	r3, #5450	; 0x154a
   1a44e:	2802      	cmp	r0, #2
   1a450:	bf18      	it	ne
   1a452:	4613      	movne	r3, r2
   1a454:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   1a458:	4a12      	ldr	r2, [pc, #72]	; (1a4a4 <radio_switch_complete_and_tx+0xbc>)
   1a45a:	442b      	add	r3, r5
   1a45c:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1a460:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   1a464:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1a468:	bf85      	ittet	hi
   1a46a:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1a46c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1a470:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1a472:	1a1b      	subhi	r3, r3, r0
   1a474:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1a478:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1a47a:	4b08      	ldr	r3, [pc, #32]	; (1a49c <radio_switch_complete_and_tx+0xb4>)
   1a47c:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1a480:	f001 0101 	and.w	r1, r1, #1
   1a484:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1a488:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1a48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a48e:	bf00      	nop
   1a490:	40001000 	.word	0x40001000
   1a494:	20003bdd 	.word	0x20003bdd
   1a498:	40009140 	.word	0x40009140
   1a49c:	4001f000 	.word	0x4001f000
   1a4a0:	4000110c 	.word	0x4000110c
   1a4a4:	10624dd3 	.word	0x10624dd3

0001a4a8 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   1a4a8:	4904      	ldr	r1, [pc, #16]	; (1a4bc <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1a4aa:	4b05      	ldr	r3, [pc, #20]	; (1a4c0 <radio_switch_complete_and_disable+0x18>)
   1a4ac:	2003      	movs	r0, #3
   1a4ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1a4b2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1a4b6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1a4ba:	4770      	bx	lr
   1a4bc:	40001000 	.word	0x40001000
   1a4c0:	4001f000 	.word	0x4001f000

0001a4c4 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1a4c4:	4b02      	ldr	r3, [pc, #8]	; (1a4d0 <radio_rssi_status_reset+0xc>)
   1a4c6:	2200      	movs	r2, #0
   1a4c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1a4cc:	4770      	bx	lr
   1a4ce:	bf00      	nop
   1a4d0:	40001000 	.word	0x40001000

0001a4d4 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1a4d4:	4b03      	ldr	r3, [pc, #12]	; (1a4e4 <radio_rssi_is_ready+0x10>)
   1a4d6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1a4da:	3800      	subs	r0, #0
   1a4dc:	bf18      	it	ne
   1a4de:	2001      	movne	r0, #1
   1a4e0:	4770      	bx	lr
   1a4e2:	bf00      	nop
   1a4e4:	40001000 	.word	0x40001000

0001a4e8 <radio_filter_disable>:
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1a4e8:	4a03      	ldr	r2, [pc, #12]	; (1a4f8 <radio_filter_disable+0x10>)
   1a4ea:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1a4ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1a4f2:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1a4f6:	4770      	bx	lr
   1a4f8:	40001000 	.word	0x40001000

0001a4fc <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1a4fc:	4b02      	ldr	r3, [pc, #8]	; (1a508 <radio_filter_status_reset+0xc>)
   1a4fe:	2200      	movs	r2, #0
   1a500:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1a504:	4770      	bx	lr
   1a506:	bf00      	nop
   1a508:	40001000 	.word	0x40001000

0001a50c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1a50c:	4b03      	ldr	r3, [pc, #12]	; (1a51c <radio_filter_has_match+0x10>)
   1a50e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1a512:	3800      	subs	r0, #0
   1a514:	bf18      	it	ne
   1a516:	2001      	movne	r0, #1
   1a518:	4770      	bx	lr
   1a51a:	bf00      	nop
   1a51c:	40001000 	.word	0x40001000

0001a520 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1a520:	4b01      	ldr	r3, [pc, #4]	; (1a528 <radio_filter_match_get+0x8>)
   1a522:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1a526:	4770      	bx	lr
   1a528:	40001000 	.word	0x40001000

0001a52c <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1a52c:	4904      	ldr	r1, [pc, #16]	; (1a540 <radio_tmr_status_reset+0x14>)
   1a52e:	4b05      	ldr	r3, [pc, #20]	; (1a544 <radio_tmr_status_reset+0x18>)
   1a530:	4a05      	ldr	r2, [pc, #20]	; (1a548 <radio_tmr_status_reset+0x1c>)
   1a532:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1a536:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1a53a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
			BIT(HAL_TRIGGER_CRYPT_DELAY_PPI) |
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1a53e:	4770      	bx	lr
   1a540:	4000b000 	.word	0x4000b000
   1a544:	4001f000 	.word	0x4001f000
   1a548:	0e7000c0 	.word	0x0e7000c0

0001a54c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1a54c:	4b03      	ldr	r3, [pc, #12]	; (1a55c <radio_tmr_tifs_set+0x10>)
   1a54e:	4a04      	ldr	r2, [pc, #16]	; (1a560 <radio_tmr_tifs_set+0x14>)
   1a550:	781b      	ldrb	r3, [r3, #0]
   1a552:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1a556:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1a55a:	4770      	bx	lr
   1a55c:	20003bdd 	.word	0x20003bdd
   1a560:	40009000 	.word	0x40009000

0001a564 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1a564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/* Remove ticks and return positive remainder value in microseconds */
static inline void hal_ticker_remove_jitter(uint32_t *ticks,
					    uint32_t *remainder)
{
	/* Is remainder less than 1 us */
	if ((*remainder & BIT(31)) || !(*remainder / 1000000UL)) {
   1a568:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1a56c:	4d31      	ldr	r5, [pc, #196]	; (1a634 <radio_tmr_start+0xd0>)
   1a56e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1a572:	42ab      	cmp	r3, r5
   1a574:	4604      	mov	r4, r0
   1a576:	d906      	bls.n	1a586 <radio_tmr_start+0x22>
		*ticks -= 1U;
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   1a578:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1a57c:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		*ticks -= 1U;
   1a580:	3901      	subs	r1, #1
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   1a582:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a586:	4b2c      	ldr	r3, [pc, #176]	; (1a638 <radio_tmr_start+0xd4>)
	}

	/* pico seconds to micro seconds unit */
	*remainder /= 1000000UL;
   1a588:	482c      	ldr	r0, [pc, #176]	; (1a63c <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1a58a:	4d2d      	ldr	r5, [pc, #180]	; (1a640 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a58c:	4e2d      	ldr	r6, [pc, #180]	; (1a644 <radio_tmr_start+0xe0>)
   1a58e:	2701      	movs	r7, #1
   1a590:	60df      	str	r7, [r3, #12]
	hal_ticker_remove_jitter(&ticks_start, &remainder);

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1a592:	2700      	movs	r7, #0
   1a594:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
   1a598:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1a59c:	2704      	movs	r7, #4
   1a59e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
   1a5a2:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1a5a4:	2702      	movs	r7, #2
   1a5a6:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1a5aa:	4a27      	ldr	r2, [pc, #156]	; (1a648 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1a5ac:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1a5b0:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1a5b4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1a5b8:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1a5bc:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a5be:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a5c2:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1a5c6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1a5ca:	b364      	cbz	r4, 1a626 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1a5cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1a5d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1a5d4:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1a5d8:	4b1b      	ldr	r3, [pc, #108]	; (1a648 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a5da:	4a1c      	ldr	r2, [pc, #112]	; (1a64c <radio_tmr_start+0xe8>)
   1a5dc:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1a5e0:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1a5e2:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a5e4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1a650 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a5e8:	f8df e068 	ldr.w	lr, [pc, #104]	; 1a654 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a5ec:	f8df c068 	ldr.w	ip, [pc, #104]	; 1a658 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a5f0:	4f1a      	ldr	r7, [pc, #104]	; (1a65c <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a5f2:	4e1b      	ldr	r6, [pc, #108]	; (1a660 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a5f4:	4d1b      	ldr	r5, [pc, #108]	; (1a664 <radio_tmr_start+0x100>)
   1a5f6:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1a5f8:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1a5fc:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1a600:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1a604:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1a608:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a60a:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a60e:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a612:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a616:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a61a:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a61e:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1a622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1a626:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1a62a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1a62e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1a632:	e7d1      	b.n	1a5d8 <radio_tmr_start+0x74>
   1a634:	7ff0bdbf 	.word	0x7ff0bdbf
   1a638:	40008000 	.word	0x40008000
   1a63c:	431bde83 	.word	0x431bde83
   1a640:	4000b000 	.word	0x4000b000
   1a644:	4000b148 	.word	0x4000b148
   1a648:	4001f000 	.word	0x4001f000
   1a64c:	40009000 	.word	0x40009000
   1a650:	4000110c 	.word	0x4000110c
   1a654:	4000900c 	.word	0x4000900c
   1a658:	40009140 	.word	0x40009140
   1a65c:	4001f004 	.word	0x4001f004
   1a660:	40009144 	.word	0x40009144
   1a664:	4001f00c 	.word	0x4001f00c

0001a668 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1a668:	4b01      	ldr	r3, [pc, #4]	; (1a670 <radio_tmr_start_get+0x8>)
   1a66a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1a66e:	4770      	bx	lr
   1a670:	4000b000 	.word	0x4000b000

0001a674 <radio_tmr_stop>:
   1a674:	4903      	ldr	r1, [pc, #12]	; (1a684 <radio_tmr_stop+0x10>)
   1a676:	4a04      	ldr	r2, [pc, #16]	; (1a688 <radio_tmr_stop+0x14>)
   1a678:	2301      	movs	r3, #1
   1a67a:	604b      	str	r3, [r1, #4]
   1a67c:	610b      	str	r3, [r1, #16]
   1a67e:	6053      	str	r3, [r2, #4]
   1a680:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1a682:	4770      	bx	lr
   1a684:	40008000 	.word	0x40008000
   1a688:	40009000 	.word	0x40009000

0001a68c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1a68c:	4904      	ldr	r1, [pc, #16]	; (1a6a0 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1a68e:	4b05      	ldr	r3, [pc, #20]	; (1a6a4 <radio_tmr_hcto_configure+0x18>)
   1a690:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1a694:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1a698:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1a69c:	4770      	bx	lr
   1a69e:	bf00      	nop
   1a6a0:	40008000 	.word	0x40008000
   1a6a4:	4001f000 	.word	0x4001f000

0001a6a8 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a6a8:	4b05      	ldr	r3, [pc, #20]	; (1a6c0 <radio_tmr_aa_capture+0x18>)
   1a6aa:	4806      	ldr	r0, [pc, #24]	; (1a6c4 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a6ac:	4906      	ldr	r1, [pc, #24]	; (1a6c8 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1a6ae:	4a07      	ldr	r2, [pc, #28]	; (1a6cc <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a6b0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a6b4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1a6b8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1a6bc:	4770      	bx	lr
   1a6be:	bf00      	nop
   1a6c0:	4001f000 	.word	0x4001f000
   1a6c4:	40001100 	.word	0x40001100
   1a6c8:	40008040 	.word	0x40008040
   1a6cc:	04000080 	.word	0x04000080

0001a6d0 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1a6d0:	4b01      	ldr	r3, [pc, #4]	; (1a6d8 <radio_tmr_aa_get+0x8>)
   1a6d2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1a6d6:	4770      	bx	lr
   1a6d8:	40008000 	.word	0x40008000

0001a6dc <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1a6dc:	4b01      	ldr	r3, [pc, #4]	; (1a6e4 <radio_tmr_aa_save+0x8>)
   1a6de:	6018      	str	r0, [r3, #0]
}
   1a6e0:	4770      	bx	lr
   1a6e2:	bf00      	nop
   1a6e4:	200035a0 	.word	0x200035a0

0001a6e8 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1a6e8:	4b01      	ldr	r3, [pc, #4]	; (1a6f0 <radio_tmr_aa_restore+0x8>)
}
   1a6ea:	6818      	ldr	r0, [r3, #0]
   1a6ec:	4770      	bx	lr
   1a6ee:	bf00      	nop
   1a6f0:	200035a0 	.word	0x200035a0

0001a6f4 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1a6f4:	4b01      	ldr	r3, [pc, #4]	; (1a6fc <radio_tmr_ready_get+0x8>)
   1a6f6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1a6fa:	4770      	bx	lr
   1a6fc:	40008000 	.word	0x40008000

0001a700 <radio_tmr_end_capture>:
   1a700:	4b02      	ldr	r3, [pc, #8]	; (1a70c <radio_tmr_end_capture+0xc>)
   1a702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1a706:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   1a70a:	4770      	bx	lr
   1a70c:	4001f000 	.word	0x4001f000

0001a710 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1a710:	4b01      	ldr	r3, [pc, #4]	; (1a718 <radio_tmr_end_get+0x8>)
   1a712:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1a716:	4770      	bx	lr
   1a718:	40008000 	.word	0x40008000

0001a71c <radio_tmr_tifs_base_get>:

uint32_t radio_tmr_tifs_base_get(void)
   1a71c:	4b01      	ldr	r3, [pc, #4]	; (1a724 <radio_tmr_tifs_base_get+0x8>)
   1a71e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1a722:	4770      	bx	lr
   1a724:	40008000 	.word	0x40008000

0001a728 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a728:	4b19      	ldr	r3, [pc, #100]	; (1a790 <radio_ccm_rx_pkt_set+0x68>)
{
   1a72a:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a72c:	2400      	movs	r4, #0
   1a72e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1a732:	2902      	cmp	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1a734:	f04f 0402 	mov.w	r4, #2
   1a738:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
{
   1a73c:	4604      	mov	r4, r0
	switch (phy) {
   1a73e:	d020      	beq.n	1a782 <radio_ccm_rx_pkt_set+0x5a>
   1a740:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   1a744:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
	default:
	case PHY_1M:
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1a748:	4912      	ldr	r1, [pc, #72]	; (1a794 <radio_ccm_rx_pkt_set+0x6c>)
   1a74a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	/* MAXPACKETSIZE value 0x001B (27) - 0x00FB (251) bytes */
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
#endif

	NRF_CCM->MODE = mode;
   1a74e:	4b10      	ldr	r3, [pc, #64]	; (1a790 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1a750:	4811      	ldr	r0, [pc, #68]	; (1a798 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->MODE = mode;
   1a752:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1a756:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
   1a75a:	2100      	movs	r1, #0
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1a75c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1a760:	4c0e      	ldr	r4, [pc, #56]	; (1a79c <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1a762:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a766:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1a768:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1a76c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   1a770:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1a774:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1a778:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1a77c:	601a      	str	r2, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1a77e:	bc10      	pop	{r4}
   1a780:	4770      	bx	lr
   1a782:	4b07      	ldr	r3, [pc, #28]	; (1a7a0 <radio_ccm_rx_pkt_set+0x78>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1a784:	4907      	ldr	r1, [pc, #28]	; (1a7a4 <radio_ccm_rx_pkt_set+0x7c>)
   1a786:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   1a78a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1a78e:	e7de      	b.n	1a74e <radio_ccm_rx_pkt_set+0x26>
   1a790:	4000f000 	.word	0x4000f000
   1a794:	01000001 	.word	0x01000001
   1a798:	200036a8 	.word	0x200036a8
   1a79c:	20003494 	.word	0x20003494
   1a7a0:	4001f000 	.word	0x4001f000
   1a7a4:	01010001 	.word	0x01010001

0001a7a8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a7a8:	4b10      	ldr	r3, [pc, #64]	; (1a7ec <radio_ccm_tx_pkt_set+0x44>)
{
   1a7aa:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a7ac:	2200      	movs	r2, #0
{
   1a7ae:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1a7b0:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a7b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1a7b6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500

	/* MAXPACKETSIZE value 0x001B (27) - 0x00FB (251) bytes */
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
#endif

	NRF_CCM->MODE = mode;
   1a7ba:	480d      	ldr	r0, [pc, #52]	; (1a7f0 <radio_ccm_tx_pkt_set+0x48>)
   1a7bc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1a7c0:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1a7c4:	480b      	ldr	r0, [pc, #44]	; (1a7f4 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1a7c6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1a7ca:	4c0b      	ldr	r4, [pc, #44]	; (1a7f8 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1a7cc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1a7d0:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1a7d2:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1a7d6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   1a7da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1a7de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1a7e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1a7e6:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1a7e8:	bc10      	pop	{r4}
   1a7ea:	4770      	bx	lr
   1a7ec:	4000f000 	.word	0x4000f000
   1a7f0:	01010000 	.word	0x01010000
   1a7f4:	200036a8 	.word	0x200036a8
   1a7f8:	20003494 	.word	0x20003494

0001a7fc <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a7fc:	4a0e      	ldr	r2, [pc, #56]	; (1a838 <radio_ccm_is_done+0x3c>)
   1a7fe:	2302      	movs	r3, #2
   1a800:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1a804:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1a808:	b933      	cbnz	r3, 1a818 <radio_ccm_is_done+0x1c>
		__WFE();
   1a80a:	bf20      	wfe
		__SEV();
   1a80c:	bf40      	sev
		__WFE();
   1a80e:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1a810:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1a814:	2b00      	cmp	r3, #0
   1a816:	d0f8      	beq.n	1a80a <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1a818:	4b07      	ldr	r3, [pc, #28]	; (1a838 <radio_ccm_is_done+0x3c>)
   1a81a:	4a08      	ldr	r2, [pc, #32]	; (1a83c <radio_ccm_is_done+0x40>)
   1a81c:	2002      	movs	r0, #2
   1a81e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1a822:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a826:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1a82a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1a82e:	fab0 f080 	clz	r0, r0
   1a832:	0940      	lsrs	r0, r0, #5
   1a834:	4770      	bx	lr
   1a836:	bf00      	nop
   1a838:	4000f000 	.word	0x4000f000
   1a83c:	e000e100 	.word	0xe000e100

0001a840 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1a840:	4b03      	ldr	r3, [pc, #12]	; (1a850 <radio_ccm_mic_is_valid+0x10>)
   1a842:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1a846:	3800      	subs	r0, #0
   1a848:	bf18      	it	ne
   1a84a:	2001      	movne	r0, #1
   1a84c:	4770      	bx	lr
   1a84e:	bf00      	nop
   1a850:	4000f000 	.word	0x4000f000

0001a854 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	switch (callee_id) {
   1a854:	3901      	subs	r1, #1
   1a856:	2901      	cmp	r1, #1
   1a858:	d805      	bhi.n	1a866 <mayfly_enable_cb+0x12>
	case MAYFLY_CALL_ID_WORKER:
		if (enable) {
			irq_enable(HAL_SWI_WORKER_IRQ);
   1a85a:	200b      	movs	r0, #11
		if (enable) {
   1a85c:	b10a      	cbz	r2, 1a862 <mayfly_enable_cb+0xe>
			irq_enable(HAL_SWI_WORKER_IRQ);
   1a85e:	f7ec bc91 	b.w	7184 <arch_irq_enable>
		} else {
			irq_disable(HAL_SWI_WORKER_IRQ);
   1a862:	f7ec bc9d 	b.w	71a0 <arch_irq_disable>
{
   1a866:	b508      	push	{r3, lr}
			irq_disable(HAL_SWI_JOB_IRQ);
		}
		break;

	default:
		LL_ASSERT(0);
   1a868:	4a06      	ldr	r2, [pc, #24]	; (1a884 <mayfly_enable_cb+0x30>)
   1a86a:	4907      	ldr	r1, [pc, #28]	; (1a888 <mayfly_enable_cb+0x34>)
   1a86c:	4807      	ldr	r0, [pc, #28]	; (1a88c <mayfly_enable_cb+0x38>)
   1a86e:	232d      	movs	r3, #45	; 0x2d
   1a870:	f006 ff6c 	bl	2174c <assert_print>
   1a874:	4040      	eors	r0, r0
   1a876:	f380 8811 	msr	BASEPRI, r0
   1a87a:	f04f 0003 	mov.w	r0, #3
   1a87e:	df02      	svc	2
		break;
	}
}
   1a880:	bd08      	pop	{r3, pc}
   1a882:	bf00      	nop
   1a884:	00029648 	.word	0x00029648
   1a888:	000286fc 	.word	0x000286fc
   1a88c:	0002866c 	.word	0x0002866c

0001a890 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1a890:	b129      	cbz	r1, 1a89e <mayfly_is_enabled+0xe>
   1a892:	3901      	subs	r1, #1
   1a894:	2901      	cmp	r1, #1
   1a896:	d805      	bhi.n	1a8a4 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1a898:	200b      	movs	r0, #11
   1a89a:	f7ec bc95 	b.w	71c8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1a89e:	2018      	movs	r0, #24
   1a8a0:	f7ec bc92 	b.w	71c8 <arch_irq_is_enabled>
{
   1a8a4:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1a8a6:	4a07      	ldr	r2, [pc, #28]	; (1a8c4 <mayfly_is_enabled+0x34>)
   1a8a8:	4907      	ldr	r1, [pc, #28]	; (1a8c8 <mayfly_is_enabled+0x38>)
   1a8aa:	4808      	ldr	r0, [pc, #32]	; (1a8cc <mayfly_is_enabled+0x3c>)
   1a8ac:	2341      	movs	r3, #65	; 0x41
   1a8ae:	f006 ff4d 	bl	2174c <assert_print>
   1a8b2:	4040      	eors	r0, r0
   1a8b4:	f380 8811 	msr	BASEPRI, r0
   1a8b8:	f04f 0003 	mov.w	r0, #3
   1a8bc:	df02      	svc	2
		break;
	}

	return 0;
}
   1a8be:	2000      	movs	r0, #0
   1a8c0:	bd08      	pop	{r3, pc}
   1a8c2:	bf00      	nop
   1a8c4:	00029648 	.word	0x00029648
   1a8c8:	000286fc 	.word	0x000286fc
   1a8cc:	0002866c 	.word	0x0002866c

0001a8d0 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1a8d0:	4288      	cmp	r0, r1
   1a8d2:	d00f      	beq.n	1a8f4 <mayfly_prio_is_equal+0x24>
	return (caller_id == callee_id) ||
   1a8d4:	2801      	cmp	r0, #1
   1a8d6:	d007      	beq.n	1a8e8 <mayfly_prio_is_equal+0x18>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1a8d8:	2802      	cmp	r0, #2
   1a8da:	d10d      	bne.n	1a8f8 <mayfly_prio_is_equal+0x28>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1a8dc:	f1a1 0001 	sub.w	r0, r1, #1
   1a8e0:	fab0 f080 	clz	r0, r0
   1a8e4:	0940      	lsrs	r0, r0, #5
   1a8e6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1a8e8:	f1a1 0002 	sub.w	r0, r1, #2
   1a8ec:	fab0 f080 	clz	r0, r0
   1a8f0:	0940      	lsrs	r0, r0, #5
   1a8f2:	4770      	bx	lr
   1a8f4:	2001      	movs	r0, #1
   1a8f6:	4770      	bx	lr
   1a8f8:	2000      	movs	r0, #0
#endif
	       0;
}
   1a8fa:	4770      	bx	lr

0001a8fc <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1a8fc:	2901      	cmp	r1, #1
{
   1a8fe:	b508      	push	{r3, lr}
	switch (callee_id) {
   1a900:	d00f      	beq.n	1a922 <mayfly_pend+0x26>
   1a902:	2902      	cmp	r1, #2
   1a904:	d00d      	beq.n	1a922 <mayfly_pend+0x26>
   1a906:	b191      	cbz	r1, 1a92e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1a908:	4a0c      	ldr	r2, [pc, #48]	; (1a93c <mayfly_pend+0x40>)
   1a90a:	490d      	ldr	r1, [pc, #52]	; (1a940 <mayfly_pend+0x44>)
   1a90c:	480d      	ldr	r0, [pc, #52]	; (1a944 <mayfly_pend+0x48>)
   1a90e:	2372      	movs	r3, #114	; 0x72
   1a910:	f006 ff1c 	bl	2174c <assert_print>
   1a914:	4040      	eors	r0, r0
   1a916:	f380 8811 	msr	BASEPRI, r0
   1a91a:	f04f 0003 	mov.w	r0, #3
   1a91e:	df02      	svc	2
		break;
	}
}
   1a920:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a922:	4b09      	ldr	r3, [pc, #36]	; (1a948 <mayfly_pend+0x4c>)
   1a924:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a928:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a92c:	bd08      	pop	{r3, pc}
   1a92e:	4b06      	ldr	r3, [pc, #24]	; (1a948 <mayfly_pend+0x4c>)
   1a930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1a934:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a938:	bd08      	pop	{r3, pc}
   1a93a:	bf00      	nop
   1a93c:	00029648 	.word	0x00029648
   1a940:	000286fc 	.word	0x000286fc
   1a944:	0002866c 	.word	0x0002866c
   1a948:	e000e100 	.word	0xe000e100

0001a94c <mayfly_is_running>:

uint32_t mayfly_is_running(void)
{
   1a94c:	b508      	push	{r3, lr}
	return k_is_in_isr();
   1a94e:	f00c f8ad 	bl	26aac <k_is_in_isr>
}
   1a952:	bd08      	pop	{r3, pc}

0001a954 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1a954:	2803      	cmp	r0, #3
{
   1a956:	b510      	push	{r4, lr}
   1a958:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1a95a:	d804      	bhi.n	1a966 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1a95c:	4b11      	ldr	r3, [pc, #68]	; (1a9a4 <hal_ticker_instance0_caller_id_get+0x50>)
   1a95e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1a960:	b18c      	cbz	r4, 1a986 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1a962:	4620      	mov	r0, r4
   1a964:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1a966:	4a10      	ldr	r2, [pc, #64]	; (1a9a8 <hal_ticker_instance0_caller_id_get+0x54>)
   1a968:	4910      	ldr	r1, [pc, #64]	; (1a9ac <hal_ticker_instance0_caller_id_get+0x58>)
   1a96a:	4811      	ldr	r0, [pc, #68]	; (1a9b0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1a96c:	2328      	movs	r3, #40	; 0x28
   1a96e:	f006 feed 	bl	2174c <assert_print>
   1a972:	4040      	eors	r0, r0
   1a974:	f380 8811 	msr	BASEPRI, r0
   1a978:	f04f 0003 	mov.w	r0, #3
   1a97c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1a97e:	4b09      	ldr	r3, [pc, #36]	; (1a9a4 <hal_ticker_instance0_caller_id_get+0x50>)
   1a980:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1a982:	2c00      	cmp	r4, #0
   1a984:	d1ed      	bne.n	1a962 <hal_ticker_instance0_caller_id_get+0xe>
   1a986:	4a08      	ldr	r2, [pc, #32]	; (1a9a8 <hal_ticker_instance0_caller_id_get+0x54>)
   1a988:	490a      	ldr	r1, [pc, #40]	; (1a9b4 <hal_ticker_instance0_caller_id_get+0x60>)
   1a98a:	4809      	ldr	r0, [pc, #36]	; (1a9b0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1a98c:	232b      	movs	r3, #43	; 0x2b
   1a98e:	f006 fedd 	bl	2174c <assert_print>
   1a992:	4040      	eors	r0, r0
   1a994:	f380 8811 	msr	BASEPRI, r0
   1a998:	f04f 0003 	mov.w	r0, #3
   1a99c:	df02      	svc	2
}
   1a99e:	4620      	mov	r0, r4
   1a9a0:	bd10      	pop	{r4, pc}
   1a9a2:	bf00      	nop
   1a9a4:	00029718 	.word	0x00029718
   1a9a8:	00029698 	.word	0x00029698
   1a9ac:	000296e8 	.word	0x000296e8
   1a9b0:	0002866c 	.word	0x0002866c
   1a9b4:	00029708 	.word	0x00029708

0001a9b8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1a9b8:	3801      	subs	r0, #1
{
   1a9ba:	b510      	push	{r4, lr}
   1a9bc:	461c      	mov	r4, r3
	switch (caller_id) {
   1a9be:	2804      	cmp	r0, #4
   1a9c0:	f200 8082 	bhi.w	1aac8 <hal_ticker_instance0_sched+0x110>
   1a9c4:	e8df f000 	tbb	[pc, r0]
   1a9c8:	3f302112 	.word	0x3f302112
   1a9cc:	03          	.byte	0x03
   1a9cd:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1a9ce:	2904      	cmp	r1, #4
   1a9d0:	d04a      	beq.n	1aa68 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1a9d2:	4a44      	ldr	r2, [pc, #272]	; (1aae4 <hal_ticker_instance0_sched+0x12c>)
   1a9d4:	4944      	ldr	r1, [pc, #272]	; (1aae8 <hal_ticker_instance0_sched+0x130>)
   1a9d6:	4845      	ldr	r0, [pc, #276]	; (1aaec <hal_ticker_instance0_sched+0x134>)
   1a9d8:	23b7      	movs	r3, #183	; 0xb7
   1a9da:	f006 feb7 	bl	2174c <assert_print>
   1a9de:	4040      	eors	r0, r0
   1a9e0:	f380 8811 	msr	BASEPRI, r0
   1a9e4:	f04f 0003 	mov.w	r0, #3
   1a9e8:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1a9ea:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1a9ec:	2904      	cmp	r1, #4
   1a9ee:	d043      	beq.n	1aa78 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1a9f0:	4a3c      	ldr	r2, [pc, #240]	; (1aae4 <hal_ticker_instance0_sched+0x12c>)
   1a9f2:	493d      	ldr	r1, [pc, #244]	; (1aae8 <hal_ticker_instance0_sched+0x130>)
   1a9f4:	483d      	ldr	r0, [pc, #244]	; (1aaec <hal_ticker_instance0_sched+0x134>)
   1a9f6:	234b      	movs	r3, #75	; 0x4b
   1a9f8:	f006 fea8 	bl	2174c <assert_print>
   1a9fc:	4040      	eors	r0, r0
   1a9fe:	f380 8811 	msr	BASEPRI, r0
   1aa02:	f04f 0003 	mov.w	r0, #3
   1aa06:	df02      	svc	2
}
   1aa08:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1aa0a:	2903      	cmp	r1, #3
   1aa0c:	d03c      	beq.n	1aa88 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1aa0e:	4a35      	ldr	r2, [pc, #212]	; (1aae4 <hal_ticker_instance0_sched+0x12c>)
   1aa10:	4935      	ldr	r1, [pc, #212]	; (1aae8 <hal_ticker_instance0_sched+0x130>)
   1aa12:	4836      	ldr	r0, [pc, #216]	; (1aaec <hal_ticker_instance0_sched+0x134>)
   1aa14:	2362      	movs	r3, #98	; 0x62
   1aa16:	f006 fe99 	bl	2174c <assert_print>
   1aa1a:	4040      	eors	r0, r0
   1aa1c:	f380 8811 	msr	BASEPRI, r0
   1aa20:	f04f 0003 	mov.w	r0, #3
   1aa24:	df02      	svc	2
}
   1aa26:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1aa28:	2904      	cmp	r1, #4
   1aa2a:	d035      	beq.n	1aa98 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1aa2c:	4a2d      	ldr	r2, [pc, #180]	; (1aae4 <hal_ticker_instance0_sched+0x12c>)
   1aa2e:	492e      	ldr	r1, [pc, #184]	; (1aae8 <hal_ticker_instance0_sched+0x130>)
   1aa30:	482e      	ldr	r0, [pc, #184]	; (1aaec <hal_ticker_instance0_sched+0x134>)
   1aa32:	2379      	movs	r3, #121	; 0x79
   1aa34:	f006 fe8a 	bl	2174c <assert_print>
   1aa38:	4040      	eors	r0, r0
   1aa3a:	f380 8811 	msr	BASEPRI, r0
   1aa3e:	f04f 0003 	mov.w	r0, #3
   1aa42:	df02      	svc	2
}
   1aa44:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1aa46:	2903      	cmp	r1, #3
   1aa48:	d036      	beq.n	1aab8 <hal_ticker_instance0_sched+0x100>
   1aa4a:	2904      	cmp	r1, #4
   1aa4c:	d02c      	beq.n	1aaa8 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1aa4e:	4a25      	ldr	r2, [pc, #148]	; (1aae4 <hal_ticker_instance0_sched+0x12c>)
   1aa50:	4925      	ldr	r1, [pc, #148]	; (1aae8 <hal_ticker_instance0_sched+0x130>)
   1aa52:	4826      	ldr	r0, [pc, #152]	; (1aaec <hal_ticker_instance0_sched+0x134>)
   1aa54:	239f      	movs	r3, #159	; 0x9f
   1aa56:	f006 fe79 	bl	2174c <assert_print>
   1aa5a:	4040      	eors	r0, r0
   1aa5c:	f380 8811 	msr	BASEPRI, r0
   1aa60:	f04f 0003 	mov.w	r0, #3
   1aa64:	df02      	svc	2
}
   1aa66:	bd10      	pop	{r4, pc}
			m.param = instance;
   1aa68:	4b21      	ldr	r3, [pc, #132]	; (1aaf0 <hal_ticker_instance0_sched+0x138>)
   1aa6a:	609c      	str	r4, [r3, #8]
}
   1aa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1aa70:	2102      	movs	r1, #2
   1aa72:	2003      	movs	r0, #3
   1aa74:	f7f3 bb98 	b.w	e1a8 <mayfly_enqueue>
			m.param = instance;
   1aa78:	4b1e      	ldr	r3, [pc, #120]	; (1aaf4 <hal_ticker_instance0_sched+0x13c>)
   1aa7a:	609c      	str	r4, [r3, #8]
}
   1aa7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1aa80:	2102      	movs	r1, #2
   1aa82:	2000      	movs	r0, #0
   1aa84:	f7f3 bb90 	b.w	e1a8 <mayfly_enqueue>
			m.param = instance;
   1aa88:	4b1b      	ldr	r3, [pc, #108]	; (1aaf8 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1aa8a:	2101      	movs	r1, #1
			m.param = instance;
   1aa8c:	609c      	str	r4, [r3, #8]
}
   1aa8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1aa92:	4608      	mov	r0, r1
   1aa94:	f7f3 bb88 	b.w	e1a8 <mayfly_enqueue>
			m.param = instance;
   1aa98:	4b18      	ldr	r3, [pc, #96]	; (1aafc <hal_ticker_instance0_sched+0x144>)
   1aa9a:	609c      	str	r4, [r3, #8]
}
   1aa9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1aaa0:	2102      	movs	r1, #2
   1aaa2:	2001      	movs	r0, #1
   1aaa4:	f7f3 bb80 	b.w	e1a8 <mayfly_enqueue>
			m.param = instance;
   1aaa8:	4b15      	ldr	r3, [pc, #84]	; (1ab00 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1aaaa:	2102      	movs	r1, #2
			m.param = instance;
   1aaac:	609c      	str	r4, [r3, #8]
}
   1aaae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1aab2:	4608      	mov	r0, r1
   1aab4:	f7f3 bb78 	b.w	e1a8 <mayfly_enqueue>
			m.param = instance;
   1aab8:	4b12      	ldr	r3, [pc, #72]	; (1ab04 <hal_ticker_instance0_sched+0x14c>)
   1aaba:	609c      	str	r4, [r3, #8]
}
   1aabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1aac0:	2101      	movs	r1, #1
   1aac2:	2002      	movs	r0, #2
   1aac4:	f7f3 bb70 	b.w	e1a8 <mayfly_enqueue>
		LL_ASSERT(0);
   1aac8:	4a06      	ldr	r2, [pc, #24]	; (1aae4 <hal_ticker_instance0_sched+0x12c>)
   1aaca:	4907      	ldr	r1, [pc, #28]	; (1aae8 <hal_ticker_instance0_sched+0x130>)
   1aacc:	4807      	ldr	r0, [pc, #28]	; (1aaec <hal_ticker_instance0_sched+0x134>)
   1aace:	23bd      	movs	r3, #189	; 0xbd
   1aad0:	f006 fe3c 	bl	2174c <assert_print>
   1aad4:	4040      	eors	r0, r0
   1aad6:	f380 8811 	msr	BASEPRI, r0
   1aada:	f04f 0003 	mov.w	r0, #3
   1aade:	df02      	svc	2
}
   1aae0:	bd10      	pop	{r4, pc}
   1aae2:	bf00      	nop
   1aae4:	00029698 	.word	0x00029698
   1aae8:	000286fc 	.word	0x000286fc
   1aaec:	0002866c 	.word	0x0002866c
   1aaf0:	200006e8 	.word	0x200006e8
   1aaf4:	20000738 	.word	0x20000738
   1aaf8:	20000728 	.word	0x20000728
   1aafc:	20000718 	.word	0x20000718
   1ab00:	200006f8 	.word	0x200006f8
   1ab04:	20000708 	.word	0x20000708

0001ab08 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1ab08:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1ab0a:	2000      	movs	r0, #0
   1ab0c:	f7ff ba4c 	b.w	19fa8 <cntr_cmp_set>

0001ab10 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1ab10:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1ab12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1ab16:	4684      	mov	ip, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1ab18:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1ab1c:	3201      	adds	r2, #1
   1ab1e:	d03e      	beq.n	1ab9e <hci_vendor_read_static_addr+0x8e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1ab20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ab24:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1ab28:	f010 0001 	ands.w	r0, r0, #1
   1ab2c:	d100      	bne.n	1ab30 <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   1ab2e:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1ab30:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1ab34:	f8cc 3000 	str.w	r3, [ip]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1ab38:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   1ab3c:	f88c 3004 	strb.w	r3, [ip, #4]
	dst[1] = val >> 8;
   1ab40:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1ab44:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ab48:	f88c 3005 	strb.w	r3, [ip, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ab4c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1ab50:	3301      	adds	r3, #1
   1ab52:	d01c      	beq.n	1ab8e <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ab54:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ab58:	3301      	adds	r3, #1
   1ab5a:	d018      	beq.n	1ab8e <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ab5c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ab60:	3301      	adds	r3, #1
   1ab62:	d014      	beq.n	1ab8e <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1ab64:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ab68:	3301      	adds	r3, #1
   1ab6a:	d010      	beq.n	1ab8e <hci_vendor_read_static_addr+0x7e>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1ab6c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1ab70:	f8cc 3006 	str.w	r3, [ip, #6]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1ab74:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1ab78:	f8cc 300a 	str.w	r3, [ip, #10]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1ab7c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1ab80:	f8cc 300e 	str.w	r3, [ip, #14]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1ab84:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1ab88:	f8cc 3012 	str.w	r3, [ip, #18]
}
   1ab8c:	e005      	b.n	1ab9a <hci_vendor_read_static_addr+0x8a>
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1ab8e:	2210      	movs	r2, #16
   1ab90:	2100      	movs	r1, #0
   1ab92:	f10c 0006 	add.w	r0, ip, #6
   1ab96:	f009 f844 	bl	23c22 <memset>
		return 1;
   1ab9a:	2001      	movs	r0, #1
}
   1ab9c:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1ab9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1aba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aba6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1aba8:	4293      	cmp	r3, r2
   1abaa:	d1b9      	bne.n	1ab20 <hci_vendor_read_static_addr+0x10>
	return 0;
   1abac:	2000      	movs	r0, #0
}
   1abae:	bd08      	pop	{r3, pc}

0001abb0 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1abb0:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1abb2:	2210      	movs	r2, #16
{
   1abb4:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1abb6:	2100      	movs	r1, #0
   1abb8:	f009 f833 	bl	23c22 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1abbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1abc0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1abc4:	3201      	adds	r2, #1
   1abc6:	d018      	beq.n	1abfa <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1abc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1abcc:	3201      	adds	r2, #1
   1abce:	d014      	beq.n	1abfa <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1abd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1abd4:	3201      	adds	r2, #1
   1abd6:	d010      	beq.n	1abfa <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1abd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1abdc:	3201      	adds	r2, #1
   1abde:	d00c      	beq.n	1abfa <hci_vendor_read_key_hierarchy_roots+0x4a>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1abe0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1abe4:	6022      	str	r2, [r4, #0]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1abe6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   1abea:	6062      	str	r2, [r4, #4]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1abec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1abf0:	60a2      	str	r2, [r4, #8]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1abf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   1abf6:	60e3      	str	r3, [r4, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1abf8:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1abfa:	4620      	mov	r0, r4
   1abfc:	2210      	movs	r2, #16
}
   1abfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1ac02:	2100      	movs	r1, #0
   1ac04:	f009 b80d 	b.w	23c22 <memset>

0001ac08 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1ac08:	4b02      	ldr	r3, [pc, #8]	; (1ac14 <net_buf_pool_get+0xc>)
   1ac0a:	222c      	movs	r2, #44	; 0x2c
   1ac0c:	fb02 3000 	mla	r0, r2, r0, r3
   1ac10:	4770      	bx	lr
   1ac12:	bf00      	nop
   1ac14:	20000c0c 	.word	0x20000c0c

0001ac18 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ac18:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ac1a:	4b06      	ldr	r3, [pc, #24]	; (1ac34 <net_buf_id+0x1c>)
   1ac1c:	212c      	movs	r1, #44	; 0x2c
   1ac1e:	fb01 3302 	mla	r3, r1, r2, r3
   1ac22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ac24:	7f1b      	ldrb	r3, [r3, #28]
   1ac26:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ac28:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ac2a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1ac2e:	fbb0 f0f3 	udiv	r0, r0, r3
   1ac32:	4770      	bx	lr
   1ac34:	20000c0c 	.word	0x20000c0c

0001ac38 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ac38:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ac3a:	4b0a      	ldr	r3, [pc, #40]	; (1ac64 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ac3c:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ac3e:	242c      	movs	r4, #44	; 0x2c
   1ac40:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1ac44:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ac48:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ac4a:	681a      	ldr	r2, [r3, #0]
   1ac4c:	4294      	cmp	r4, r2
   1ac4e:	bf94      	ite	ls
   1ac50:	600c      	strls	r4, [r1, #0]
   1ac52:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ac54:	e9d3 5400 	ldrd	r5, r4, [r3]
   1ac58:	f7ff ffde 	bl	1ac18 <net_buf_id>
}
   1ac5c:	fb05 4000 	mla	r0, r5, r0, r4
   1ac60:	bd38      	pop	{r3, r4, r5, pc}
   1ac62:	bf00      	nop
   1ac64:	20000c0c 	.word	0x20000c0c

0001ac68 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ac68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac6c:	4605      	mov	r5, r0
   1ac6e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ac70:	4610      	mov	r0, r2
   1ac72:	4619      	mov	r1, r3
{
   1ac74:	4691      	mov	r9, r2
   1ac76:	4698      	mov	r8, r3
   1ac78:	4617      	mov	r7, r2
   1ac7a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ac7c:	f00c fa7b 	bl	27176 <sys_clock_timeout_end_calc>
   1ac80:	4682      	mov	sl, r0
   1ac82:	468b      	mov	fp, r1
	__asm__ volatile(
   1ac84:	f04f 0320 	mov.w	r3, #32
   1ac88:	f3ef 8111 	mrs	r1, BASEPRI
   1ac8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac90:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ac94:	8b6b      	ldrh	r3, [r5, #26]
   1ac96:	2b00      	cmp	r3, #0
   1ac98:	d058      	beq.n	1ad4c <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ac9a:	8b2a      	ldrh	r2, [r5, #24]
   1ac9c:	429a      	cmp	r2, r3
   1ac9e:	d93c      	bls.n	1ad1a <net_buf_alloc_len+0xb2>
   1aca0:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1aca2:	2200      	movs	r2, #0
   1aca4:	2300      	movs	r3, #0
   1aca6:	4628      	mov	r0, r5
   1aca8:	f005 f80c 	bl	1fcc4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1acac:	9900      	ldr	r1, [sp, #0]
   1acae:	4604      	mov	r4, r0
   1acb0:	2800      	cmp	r0, #0
   1acb2:	d032      	beq.n	1ad1a <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   1acb4:	f381 8811 	msr	BASEPRI, r1
   1acb8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1acbc:	9b01      	ldr	r3, [sp, #4]
   1acbe:	2b00      	cmp	r3, #0
   1acc0:	d055      	beq.n	1ad6e <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1acc2:	ea58 0309 	orrs.w	r3, r8, r9
   1acc6:	d00f      	beq.n	1ace8 <net_buf_alloc_len+0x80>
   1acc8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1accc:	bf08      	it	eq
   1acce:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1acd2:	d009      	beq.n	1ace8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1acd4:	f005 ff1c 	bl	20b10 <sys_clock_tick_get>
   1acd8:	ebba 0700 	subs.w	r7, sl, r0
   1acdc:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   1ace0:	2e00      	cmp	r6, #0
   1ace2:	bfbc      	itt	lt
   1ace4:	2700      	movlt	r7, #0
   1ace6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ace8:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1acea:	4d26      	ldr	r5, [pc, #152]	; (1ad84 <net_buf_alloc_len+0x11c>)
   1acec:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1acf0:	fb08 5303 	mla	r3, r8, r3, r5
   1acf4:	463a      	mov	r2, r7
   1acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1acf8:	681b      	ldr	r3, [r3, #0]
   1acfa:	a901      	add	r1, sp, #4
   1acfc:	f8d3 9000 	ldr.w	r9, [r3]
   1ad00:	4620      	mov	r0, r4
   1ad02:	4633      	mov	r3, r6
   1ad04:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ad06:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1ad08:	2800      	cmp	r0, #0
   1ad0a:	d131      	bne.n	1ad70 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   1ad0c:	7aa0      	ldrb	r0, [r4, #10]
   1ad0e:	4621      	mov	r1, r4
   1ad10:	fb00 5008 	mla	r0, r0, r8, r5
   1ad14:	f00b ffa6 	bl	26c64 <k_queue_prepend>
}
   1ad18:	e024      	b.n	1ad64 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1ad1a:	8b68      	ldrh	r0, [r5, #26]
   1ad1c:	1e43      	subs	r3, r0, #1
   1ad1e:	836b      	strh	r3, [r5, #26]
   1ad20:	f381 8811 	msr	BASEPRI, r1
   1ad24:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ad28:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ad2a:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ad2c:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ad2e:	331b      	adds	r3, #27
   1ad30:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ad34:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ad36:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1ad3a:	4b12      	ldr	r3, [pc, #72]	; (1ad84 <net_buf_alloc_len+0x11c>)
   1ad3c:	4a12      	ldr	r2, [pc, #72]	; (1ad88 <net_buf_alloc_len+0x120>)
   1ad3e:	1aeb      	subs	r3, r5, r3
   1ad40:	109b      	asrs	r3, r3, #2
   1ad42:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1ad44:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1ad46:	7f2b      	ldrb	r3, [r5, #28]
   1ad48:	72e3      	strb	r3, [r4, #11]
		goto success;
   1ad4a:	e7b7      	b.n	1acbc <net_buf_alloc_len+0x54>
   1ad4c:	f381 8811 	msr	BASEPRI, r1
   1ad50:	f3bf 8f6f 	isb	sy
   1ad54:	464a      	mov	r2, r9
   1ad56:	4643      	mov	r3, r8
   1ad58:	4628      	mov	r0, r5
   1ad5a:	f004 ffb3 	bl	1fcc4 <z_impl_k_queue_get>
	if (!buf) {
   1ad5e:	4604      	mov	r4, r0
   1ad60:	2800      	cmp	r0, #0
   1ad62:	d1ab      	bne.n	1acbc <net_buf_alloc_len+0x54>
		return NULL;
   1ad64:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ad66:	4620      	mov	r0, r4
   1ad68:	b003      	add	sp, #12
   1ad6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1ad6e:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   1ad70:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ad72:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ad74:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1ad76:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1ad78:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1ad7a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1ad7c:	6963      	ldr	r3, [r4, #20]
   1ad7e:	8262      	strh	r2, [r4, #18]
   1ad80:	60e3      	str	r3, [r4, #12]
	return buf;
   1ad82:	e7f0      	b.n	1ad66 <net_buf_alloc_len+0xfe>
   1ad84:	20000c0c 	.word	0x20000c0c
   1ad88:	ba2e8ba3 	.word	0xba2e8ba3

0001ad8c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ad8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad90:	4d16      	ldr	r5, [pc, #88]	; (1adec <net_buf_unref+0x60>)
   1ad92:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ad94:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1ad96:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1ad98:	b90c      	cbnz	r4, 1ad9e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1ad9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1ad9e:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1ada0:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   1ada4:	3b01      	subs	r3, #1
   1ada6:	b2db      	uxtb	r3, r3
   1ada8:	7223      	strb	r3, [r4, #8]
   1adaa:	2b00      	cmp	r3, #0
   1adac:	d1f5      	bne.n	1ad9a <net_buf_unref+0xe>
		if (buf->__buf) {
   1adae:	6961      	ldr	r1, [r4, #20]
   1adb0:	b159      	cbz	r1, 1adca <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1adb2:	7a63      	ldrb	r3, [r4, #9]
   1adb4:	07db      	lsls	r3, r3, #31
   1adb6:	d407      	bmi.n	1adc8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1adb8:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1adba:	fb07 5303 	mla	r3, r7, r3, r5
   1adbe:	4620      	mov	r0, r4
   1adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1adc2:	681b      	ldr	r3, [r3, #0]
   1adc4:	689b      	ldr	r3, [r3, #8]
   1adc6:	4798      	blx	r3
			buf->__buf = NULL;
   1adc8:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   1adca:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1adcc:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   1adce:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1add2:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   1add4:	6a1b      	ldr	r3, [r3, #32]
   1add6:	b11b      	cbz	r3, 1ade0 <net_buf_unref+0x54>
			pool->destroy(buf);
   1add8:	4620      	mov	r0, r4
   1adda:	4798      	blx	r3
{
   1addc:	4644      	mov	r4, r8
   1adde:	e7db      	b.n	1ad98 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1ade0:	4621      	mov	r1, r4
   1ade2:	fb00 5007 	mla	r0, r0, r7, r5
   1ade6:	f00b ff3d 	bl	26c64 <k_queue_prepend>
}
   1adea:	e7f7      	b.n	1addc <net_buf_unref+0x50>
   1adec:	20000c0c 	.word	0x20000c0c

0001adf0 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1adf0:	b508      	push	{r3, lr}
   1adf2:	4804      	ldr	r0, [pc, #16]	; (1ae04 <xoshiro128_initialize+0x14>)
   1adf4:	f00b fd78 	bl	268e8 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1adf8:	2800      	cmp	r0, #0
}
   1adfa:	bf0c      	ite	eq
   1adfc:	f06f 0012 	mvneq.w	r0, #18
   1ae00:	2000      	movne	r0, #0
   1ae02:	bd08      	pop	{r3, pc}
   1ae04:	000275e8 	.word	0x000275e8

0001ae08 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1ae08:	4b08      	ldr	r3, [pc, #32]	; (1ae2c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ae0a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1ae0c:	1ac3      	subs	r3, r0, r3
{
   1ae0e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ae10:	4907      	ldr	r1, [pc, #28]	; (1ae30 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1ae12:	109b      	asrs	r3, r3, #2
{
   1ae14:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ae16:	4359      	muls	r1, r3
   1ae18:	4806      	ldr	r0, [pc, #24]	; (1ae34 <onoff_stop+0x2c>)
   1ae1a:	2240      	movs	r2, #64	; 0x40
   1ae1c:	f00a fc52 	bl	256c4 <stop>
	notify(mgr, res);
   1ae20:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ae22:	4601      	mov	r1, r0
	notify(mgr, res);
   1ae24:	4620      	mov	r0, r4
}
   1ae26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1ae2a:	4718      	bx	r3
   1ae2c:	200037fc 	.word	0x200037fc
   1ae30:	b6db6db7 	.word	0xb6db6db7
   1ae34:	000275b8 	.word	0x000275b8

0001ae38 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ae38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1ae3a:	4c0c      	ldr	r4, [pc, #48]	; (1ae6c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ae3c:	4a0c      	ldr	r2, [pc, #48]	; (1ae70 <onoff_start+0x38>)
   1ae3e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1ae40:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ae42:	9300      	str	r3, [sp, #0]
{
   1ae44:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ae46:	460b      	mov	r3, r1
   1ae48:	490a      	ldr	r1, [pc, #40]	; (1ae74 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1ae4a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ae4c:	4361      	muls	r1, r4
{
   1ae4e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ae50:	4809      	ldr	r0, [pc, #36]	; (1ae78 <onoff_start+0x40>)
   1ae52:	f00a fc63 	bl	2571c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1ae56:	1e01      	subs	r1, r0, #0
   1ae58:	da05      	bge.n	1ae66 <onoff_start+0x2e>
		notify(mgr, err);
   1ae5a:	4630      	mov	r0, r6
   1ae5c:	462b      	mov	r3, r5
	}
}
   1ae5e:	b002      	add	sp, #8
   1ae60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1ae64:	4718      	bx	r3
}
   1ae66:	b002      	add	sp, #8
   1ae68:	bd70      	pop	{r4, r5, r6, pc}
   1ae6a:	bf00      	nop
   1ae6c:	200037fc 	.word	0x200037fc
   1ae70:	00025787 	.word	0x00025787
   1ae74:	b6db6db7 	.word	0xb6db6db7
   1ae78:	000275b8 	.word	0x000275b8

0001ae7c <hfclk_start>:
{
   1ae7c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1ae7e:	f00c f974 	bl	2716a <z_impl_k_uptime_ticks>
   1ae82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ae86:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
   1ae8a:	4c07      	ldr	r4, [pc, #28]	; (1aea8 <hfclk_start+0x2c>)
   1ae8c:	fb02 3101 	mla	r1, r2, r1, r3
   1ae90:	0bc0      	lsrs	r0, r0, #15
   1ae92:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1ae96:	0bc9      	lsrs	r1, r1, #15
   1ae98:	e9c4 0100 	strd	r0, r1, [r4]
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1ae9c:	2001      	movs	r0, #1
}
   1ae9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aea2:	f003 bad7 	b.w	1e454 <nrfx_clock_start>
   1aea6:	bf00      	nop
   1aea8:	20001ef0 	.word	0x20001ef0

0001aeac <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1aeac:	2200      	movs	r2, #0
{
   1aeae:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1aeb0:	2101      	movs	r1, #1
{
   1aeb2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1aeb4:	4610      	mov	r0, r2
   1aeb6:	f7ec f995 	bl	71e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1aeba:	480f      	ldr	r0, [pc, #60]	; (1aef8 <clk_init+0x4c>)
   1aebc:	f003 faba 	bl	1e434 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1aec0:	4b0e      	ldr	r3, [pc, #56]	; (1aefc <clk_init+0x50>)
   1aec2:	4298      	cmp	r0, r3
   1aec4:	d115      	bne.n	1aef2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1aec6:	f00b fcba 	bl	2683e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1aeca:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1aecc:	490c      	ldr	r1, [pc, #48]	; (1af00 <clk_init+0x54>)
   1aece:	4630      	mov	r0, r6
   1aed0:	f006 fa4b 	bl	2136a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1aed4:	2800      	cmp	r0, #0
   1aed6:	db0b      	blt.n	1aef0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1aed8:	2501      	movs	r5, #1
   1aeda:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1aedc:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1aede:	4908      	ldr	r1, [pc, #32]	; (1af00 <clk_init+0x54>)
   1aee0:	f104 001c 	add.w	r0, r4, #28
   1aee4:	f006 fa41 	bl	2136a <onoff_manager_init>
		if (err < 0) {
   1aee8:	2800      	cmp	r0, #0
   1aeea:	db01      	blt.n	1aef0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1aeec:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1aeee:	2000      	movs	r0, #0
}
   1aef0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1aef2:	f06f 0004 	mvn.w	r0, #4
   1aef6:	e7fb      	b.n	1aef0 <clk_init+0x44>
   1aef8:	0001af39 	.word	0x0001af39
   1aefc:	0bad0000 	.word	0x0bad0000
   1af00:	00029728 	.word	0x00029728

0001af04 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1af04:	b570      	push	{r4, r5, r6, lr}
   1af06:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1af08:	230c      	movs	r3, #12
   1af0a:	4809      	ldr	r0, [pc, #36]	; (1af30 <clkstarted_handle.constprop.0+0x2c>)
   1af0c:	434b      	muls	r3, r1
   1af0e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1af10:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1af14:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1af16:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1af18:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1af1a:	4418      	add	r0, r3
   1af1c:	f00a fbbf 	bl	2569e <set_on_state>
	if (callback) {
   1af20:	b12d      	cbz	r5, 1af2e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1af22:	4632      	mov	r2, r6
   1af24:	462b      	mov	r3, r5
   1af26:	4803      	ldr	r0, [pc, #12]	; (1af34 <clkstarted_handle.constprop.0+0x30>)
}
   1af28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1af2c:	4718      	bx	r3
}
   1af2e:	bd70      	pop	{r4, r5, r6, pc}
   1af30:	200037fc 	.word	0x200037fc
   1af34:	000275b8 	.word	0x000275b8

0001af38 <clock_event_handler>:
	switch (event) {
   1af38:	b110      	cbz	r0, 1af40 <clock_event_handler+0x8>
   1af3a:	2801      	cmp	r0, #1
   1af3c:	d004      	beq.n	1af48 <clock_event_handler+0x10>
   1af3e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1af40:	4b03      	ldr	r3, [pc, #12]	; (1af50 <clock_event_handler+0x18>)
   1af42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1af44:	075b      	lsls	r3, r3, #29
   1af46:	d101      	bne.n	1af4c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1af48:	f7ff bfdc 	b.w	1af04 <clkstarted_handle.constprop.0>
}
   1af4c:	4770      	bx	lr
   1af4e:	bf00      	nop
   1af50:	200037fc 	.word	0x200037fc

0001af54 <generic_hfclk_start>:
{
   1af54:	b508      	push	{r3, lr}
	__asm__ volatile(
   1af56:	f04f 0320 	mov.w	r3, #32
   1af5a:	f3ef 8111 	mrs	r1, BASEPRI
   1af5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1af62:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1af66:	4a11      	ldr	r2, [pc, #68]	; (1afac <generic_hfclk_start+0x58>)
   1af68:	6813      	ldr	r3, [r2, #0]
   1af6a:	f043 0002 	orr.w	r0, r3, #2
   1af6e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1af70:	07da      	lsls	r2, r3, #31
   1af72:	d407      	bmi.n	1af84 <generic_hfclk_start+0x30>
	__asm__ volatile(
   1af74:	f381 8811 	msr	BASEPRI, r1
   1af78:	f3bf 8f6f 	isb	sy
}
   1af7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   1af80:	f7ff bf7c 	b.w	1ae7c <hfclk_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1af84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1af88:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1af8c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1af90:	07d3      	lsls	r3, r2, #31
   1af92:	d5ef      	bpl.n	1af74 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1af94:	4806      	ldr	r0, [pc, #24]	; (1afb0 <generic_hfclk_start+0x5c>)
   1af96:	f00a fb82 	bl	2569e <set_on_state>
   1af9a:	f381 8811 	msr	BASEPRI, r1
   1af9e:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1afa2:	2000      	movs	r0, #0
}
   1afa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1afa8:	f7ff bfac 	b.w	1af04 <clkstarted_handle.constprop.0>
   1afac:	2000384c 	.word	0x2000384c
   1afb0:	2000383c 	.word	0x2000383c

0001afb4 <api_blocking_start>:
{
   1afb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1afb6:	2200      	movs	r2, #0
   1afb8:	2301      	movs	r3, #1
   1afba:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1afbe:	ab04      	add	r3, sp, #16
   1afc0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1afc4:	4a09      	ldr	r2, [pc, #36]	; (1afec <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1afc6:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1afca:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1afcc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1afd0:	f00a fbd2 	bl	25778 <api_start>
	if (err < 0) {
   1afd4:	2800      	cmp	r0, #0
   1afd6:	db05      	blt.n	1afe4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1afd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1afdc:	2300      	movs	r3, #0
   1afde:	4668      	mov	r0, sp
   1afe0:	f004 feca 	bl	1fd78 <z_impl_k_sem_take>
}
   1afe4:	b007      	add	sp, #28
   1afe6:	f85d fb04 	ldr.w	pc, [sp], #4
   1afea:	bf00      	nop
   1afec:	0002579f 	.word	0x0002579f

0001aff0 <lfclk_start>:
{
   1aff0:	b510      	push	{r4, lr}
	if (!once) {
   1aff2:	4c07      	ldr	r4, [pc, #28]	; (1b010 <lfclk_start+0x20>)
   1aff4:	7823      	ldrb	r3, [r4, #0]
   1aff6:	b92b      	cbnz	r3, 1b004 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1aff8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1affc:	f00c f8b7 	bl	2716e <z_impl_k_busy_wait>
		once = true;
   1b000:	2301      	movs	r3, #1
   1b002:	7023      	strb	r3, [r4, #0]
}
   1b004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1b008:	2000      	movs	r0, #0
   1b00a:	f003 ba23 	b.w	1e454 <nrfx_clock_start>
   1b00e:	bf00      	nop
   1b010:	20003bde 	.word	0x20003bde

0001b014 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   1b014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1b018:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   1b01c:	4605      	mov	r5, r0
   1b01e:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
   1b022:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   1b026:	f04f 0320 	mov.w	r3, #32
   1b02a:	f3ef 8711 	mrs	r7, BASEPRI
   1b02e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b032:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
   1b036:	f00c f898 	bl	2716a <z_impl_k_uptime_ticks>
   1b03a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b03e:	fba0 4302 	umull	r4, r3, r0, r2
   1b042:	fb02 3301 	mla	r3, r2, r1, r3
   1b046:	0be4      	lsrs	r4, r4, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1b048:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
   1b04c:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1b050:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   1b054:	4b23      	ldr	r3, [pc, #140]	; (1b0e4 <cmd_status+0xd0>)
   1b056:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   1b05a:	4b23      	ldr	r3, [pc, #140]	; (1b0e8 <cmd_status+0xd4>)
   1b05c:	f8d3 a000 	ldr.w	sl, [r3]
	__asm__ volatile(
   1b060:	f387 8811 	msr	BASEPRI, r7
   1b064:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   1b068:	4a20      	ldr	r2, [pc, #128]	; (1b0ec <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
   1b06a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1b0f0 <cmd_status+0xdc>
   1b06e:	4f21      	ldr	r7, [pc, #132]	; (1b0f4 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
   1b070:	4628      	mov	r0, r5
   1b072:	2108      	movs	r1, #8
   1b074:	f007 f98e 	bl	22394 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   1b078:	f019 0f01 	tst.w	r9, #1
   1b07c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1b0f8 <cmd_status+0xe4>
   1b080:	4a1e      	ldr	r2, [pc, #120]	; (1b0fc <cmd_status+0xe8>)
   1b082:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   1b086:	9300      	str	r3, [sp, #0]
   1b088:	4628      	mov	r0, r5
   1b08a:	bf0c      	ite	eq
   1b08c:	4643      	moveq	r3, r8
   1b08e:	463b      	movne	r3, r7
   1b090:	2108      	movs	r1, #8
   1b092:	f007 f97f 	bl	22394 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   1b096:	eba4 030b 	sub.w	r3, r4, fp
   1b09a:	9300      	str	r3, [sp, #0]
   1b09c:	4628      	mov	r0, r5
   1b09e:	465b      	mov	r3, fp
   1b0a0:	4a17      	ldr	r2, [pc, #92]	; (1b100 <cmd_status+0xec>)
   1b0a2:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   1b0a4:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   1b0a8:	f007 f974 	bl	22394 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   1b0ac:	4653      	mov	r3, sl
   1b0ae:	4628      	mov	r0, r5
   1b0b0:	4a14      	ldr	r2, [pc, #80]	; (1b104 <cmd_status+0xf0>)
   1b0b2:	9400      	str	r4, [sp, #0]
   1b0b4:	2108      	movs	r1, #8
   1b0b6:	f007 f96d 	bl	22394 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   1b0ba:	4628      	mov	r0, r5
   1b0bc:	4a12      	ldr	r2, [pc, #72]	; (1b108 <cmd_status+0xf4>)
   1b0be:	2108      	movs	r1, #8
   1b0c0:	f007 f968 	bl	22394 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   1b0c4:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   1b0c8:	9300      	str	r3, [sp, #0]
   1b0ca:	4628      	mov	r0, r5
   1b0cc:	4a0b      	ldr	r2, [pc, #44]	; (1b0fc <cmd_status+0xe8>)
   1b0ce:	2e00      	cmp	r6, #0
   1b0d0:	bf0c      	ite	eq
   1b0d2:	4643      	moveq	r3, r8
   1b0d4:	463b      	movne	r3, r7
   1b0d6:	2108      	movs	r1, #8
   1b0d8:	f007 f95c 	bl	22394 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   1b0dc:	2000      	movs	r0, #0
   1b0de:	b003      	add	sp, #12
   1b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0e4:	20001ef0 	.word	0x20001ef0
   1b0e8:	20001ee8 	.word	0x20001ee8
   1b0ec:	0002d0bd 	.word	0x0002d0bd
   1b0f0:	0002d0b8 	.word	0x0002d0b8
   1b0f4:	0002a598 	.word	0x0002a598
   1b0f8:	200037fc 	.word	0x200037fc
   1b0fc:	0002d0c8 	.word	0x0002d0c8
   1b100:	0002d0e2 	.word	0x0002d0e2
   1b104:	0002d104 	.word	0x0002d104
   1b108:	0002d125 	.word	0x0002d125

0001b10c <hfclk_stop>:
{
   1b10c:	b510      	push	{r4, lr}
   1b10e:	f00c f82c 	bl	2716a <z_impl_k_uptime_ticks>
   1b112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b116:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
   1b11a:	4c07      	ldr	r4, [pc, #28]	; (1b138 <hfclk_stop+0x2c>)
   1b11c:	fb02 3101 	mla	r1, r2, r1, r3
   1b120:	0bc0      	lsrs	r0, r0, #15
   1b122:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1b126:	0bc9      	lsrs	r1, r1, #15
   1b128:	e9c4 0100 	strd	r0, r1, [r4]
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1b12c:	2001      	movs	r0, #1
}
   1b12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b132:	f00b bb91 	b.w	26858 <nrfx_clock_stop>
   1b136:	bf00      	nop
   1b138:	20001ee8 	.word	0x20001ee8

0001b13c <generic_hfclk_stop>:
{
   1b13c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b13e:	f04f 0320 	mov.w	r3, #32
   1b142:	f3ef 8411 	mrs	r4, BASEPRI
   1b146:	f383 8812 	msr	BASEPRI_MAX, r3
   1b14a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1b14e:	4a07      	ldr	r2, [pc, #28]	; (1b16c <generic_hfclk_stop+0x30>)
   1b150:	6813      	ldr	r3, [r2, #0]
   1b152:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1b156:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1b158:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1b15a:	d401      	bmi.n	1b160 <generic_hfclk_stop+0x24>
		hfclk_stop();
   1b15c:	f7ff ffd6 	bl	1b10c <hfclk_stop>
	__asm__ volatile(
   1b160:	f384 8811 	msr	BASEPRI, r4
   1b164:	f3bf 8f6f 	isb	sy
}
   1b168:	bd10      	pop	{r4, pc}
   1b16a:	bf00      	nop
   1b16c:	2000384c 	.word	0x2000384c

0001b170 <z_nrf_clock_control_get_onoff>:
}
   1b170:	4a02      	ldr	r2, [pc, #8]	; (1b17c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1b172:	b2c3      	uxtb	r3, r0
}
   1b174:	201c      	movs	r0, #28
   1b176:	fb03 2000 	mla	r0, r3, r0, r2
   1b17a:	4770      	bx	lr
   1b17c:	200037fc 	.word	0x200037fc

0001b180 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b180:	4b08      	ldr	r3, [pc, #32]	; (1b1a4 <z_nrf_clock_bt_ctlr_hf_request+0x24>)
   1b182:	f3bf 8f5b 	dmb	ish
   1b186:	e853 2f00 	ldrex	r2, [r3]
   1b18a:	f042 0101 	orr.w	r1, r2, #1
   1b18e:	e843 1000 	strex	r0, r1, [r3]
   1b192:	2800      	cmp	r0, #0
   1b194:	d1f7      	bne.n	1b186 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   1b196:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   1b19a:	0793      	lsls	r3, r2, #30
   1b19c:	d401      	bmi.n	1b1a2 <z_nrf_clock_bt_ctlr_hf_request+0x22>
	hfclk_start();
   1b19e:	f7ff be6d 	b.w	1ae7c <hfclk_start>
}
   1b1a2:	4770      	bx	lr
   1b1a4:	2000384c 	.word	0x2000384c

0001b1a8 <z_nrf_clock_bt_ctlr_hf_release>:
{
   1b1a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b1aa:	f04f 0320 	mov.w	r3, #32
   1b1ae:	f3ef 8411 	mrs	r4, BASEPRI
   1b1b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1b6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_BT;
   1b1ba:	4a07      	ldr	r2, [pc, #28]	; (1b1d8 <z_nrf_clock_bt_ctlr_hf_release+0x30>)
   1b1bc:	6813      	ldr	r3, [r2, #0]
   1b1be:	f023 0101 	bic.w	r1, r3, #1
	if (!(hfclk_users & HF_USER_GENERIC)) {
   1b1c2:	079b      	lsls	r3, r3, #30
	hfclk_users &= ~HF_USER_BT;
   1b1c4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_GENERIC)) {
   1b1c6:	d401      	bmi.n	1b1cc <z_nrf_clock_bt_ctlr_hf_release+0x24>
		hfclk_stop();
   1b1c8:	f7ff ffa0 	bl	1b10c <hfclk_stop>
	__asm__ volatile(
   1b1cc:	f384 8811 	msr	BASEPRI, r4
   1b1d0:	f3bf 8f6f 	isb	sy
}
   1b1d4:	bd10      	pop	{r4, pc}
   1b1d6:	bf00      	nop
   1b1d8:	2000384c 	.word	0x2000384c

0001b1dc <z_nrf_clock_control_lf_on>:
{
   1b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b1e0:	4938      	ldr	r1, [pc, #224]	; (1b2c4 <z_nrf_clock_control_lf_on+0xe8>)
   1b1e2:	f3bf 8f5b 	dmb	ish
   1b1e6:	4607      	mov	r7, r0
   1b1e8:	2201      	movs	r2, #1
   1b1ea:	e851 3f00 	ldrex	r3, [r1]
   1b1ee:	e841 2000 	strex	r0, r2, [r1]
   1b1f2:	2800      	cmp	r0, #0
   1b1f4:	d1f9      	bne.n	1b1ea <z_nrf_clock_control_lf_on+0xe>
   1b1f6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1b1fa:	b933      	cbnz	r3, 1b20a <z_nrf_clock_control_lf_on+0x2e>
   1b1fc:	4932      	ldr	r1, [pc, #200]	; (1b2c8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   1b1fe:	4833      	ldr	r0, [pc, #204]	; (1b2cc <z_nrf_clock_control_lf_on+0xf0>)
   1b200:	604b      	str	r3, [r1, #4]
   1b202:	60cb      	str	r3, [r1, #12]
   1b204:	608a      	str	r2, [r1, #8]
   1b206:	f006 f8c3 	bl	21390 <onoff_request>
	switch (start_mode) {
   1b20a:	1e7b      	subs	r3, r7, #1
   1b20c:	2b01      	cmp	r3, #1
   1b20e:	d82b      	bhi.n	1b268 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1b210:	2f01      	cmp	r7, #1
   1b212:	d107      	bne.n	1b224 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1b214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b218:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1b21c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1b220:	2b01      	cmp	r3, #1
   1b222:	d021      	beq.n	1b268 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b224:	f00b fc42 	bl	26aac <k_is_in_isr>
   1b228:	4605      	mov	r5, r0
   1b22a:	b9f8      	cbnz	r0, 1b26c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   1b22c:	4b28      	ldr	r3, [pc, #160]	; (1b2d0 <z_nrf_clock_control_lf_on+0xf4>)
   1b22e:	781b      	ldrb	r3, [r3, #0]
   1b230:	b1e3      	cbz	r3, 1b26c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   1b232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b236:	2202      	movs	r2, #2
   1b238:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1b23c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b23e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1b2d4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1b242:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1b246:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1b24a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1b24e:	03d2      	lsls	r2, r2, #15
   1b250:	d516      	bpl.n	1b280 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1b252:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1b256:	2b01      	cmp	r3, #1
   1b258:	d001      	beq.n	1b25e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1b25a:	2f01      	cmp	r7, #1
   1b25c:	d110      	bne.n	1b280 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   1b25e:	b35d      	cbz	r5, 1b2b8 <z_nrf_clock_control_lf_on+0xdc>
   1b260:	f386 8811 	msr	BASEPRI, r6
   1b264:	f3bf 8f6f 	isb	sy
}
   1b268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b26c:	f04f 0320 	mov.w	r3, #32
   1b270:	f3ef 8611 	mrs	r6, BASEPRI
   1b274:	f383 8812 	msr	BASEPRI_MAX, r3
   1b278:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b27c:	2501      	movs	r5, #1
   1b27e:	e7de      	b.n	1b23e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1b280:	b1ad      	cbz	r5, 1b2ae <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1b282:	4630      	mov	r0, r6
   1b284:	f7eb fef8 	bl	7078 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1b288:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1b28c:	2b00      	cmp	r3, #0
   1b28e:	d1da      	bne.n	1b246 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1b290:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1b294:	2a00      	cmp	r2, #0
   1b296:	d0d6      	beq.n	1b246 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b298:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1b29c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1b2a0:	2301      	movs	r3, #1
   1b2a2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1b2a6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b2aa:	60a3      	str	r3, [r4, #8]
}
   1b2ac:	e7cb      	b.n	1b246 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   1b2ae:	2100      	movs	r1, #0
   1b2b0:	2021      	movs	r0, #33	; 0x21
   1b2b2:	f005 fa45 	bl	20740 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b2b6:	e7e7      	b.n	1b288 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   1b2b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b2bc:	2202      	movs	r2, #2
   1b2be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b2c2:	e7d1      	b.n	1b268 <z_nrf_clock_control_lf_on+0x8c>
   1b2c4:	200037f8 	.word	0x200037f8
   1b2c8:	200037e8 	.word	0x200037e8
   1b2cc:	20003818 	.word	0x20003818
   1b2d0:	20004032 	.word	0x20004032
   1b2d4:	e000e100 	.word	0xe000e100

0001b2d8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1b2d8:	b508      	push	{r3, lr}
   1b2da:	4807      	ldr	r0, [pc, #28]	; (1b2f8 <uart_console_init+0x20>)
   1b2dc:	f00b fb04 	bl	268e8 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1b2e0:	b138      	cbz	r0, 1b2f2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1b2e2:	4806      	ldr	r0, [pc, #24]	; (1b2fc <uart_console_init+0x24>)
   1b2e4:	f7ec fdee 	bl	7ec4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1b2e8:	4804      	ldr	r0, [pc, #16]	; (1b2fc <uart_console_init+0x24>)
   1b2ea:	f7e7 fbe1 	bl	2ab0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1b2ee:	2000      	movs	r0, #0
}
   1b2f0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1b2f2:	f06f 0012 	mvn.w	r0, #18
   1b2f6:	e7fb      	b.n	1b2f0 <uart_console_init+0x18>
   1b2f8:	00027618 	.word	0x00027618
   1b2fc:	0001b301 	.word	0x0001b301

0001b300 <console_out>:
	if ('\n' == c) {
   1b300:	280a      	cmp	r0, #10
{
   1b302:	b538      	push	{r3, r4, r5, lr}
   1b304:	4d07      	ldr	r5, [pc, #28]	; (1b324 <console_out+0x24>)
   1b306:	4604      	mov	r4, r0
	if ('\n' == c) {
   1b308:	d104      	bne.n	1b314 <console_out+0x14>
	api->poll_out(dev, out_char);
   1b30a:	68ab      	ldr	r3, [r5, #8]
   1b30c:	210d      	movs	r1, #13
   1b30e:	685b      	ldr	r3, [r3, #4]
   1b310:	4628      	mov	r0, r5
   1b312:	4798      	blx	r3
   1b314:	68ab      	ldr	r3, [r5, #8]
   1b316:	4803      	ldr	r0, [pc, #12]	; (1b324 <console_out+0x24>)
   1b318:	685b      	ldr	r3, [r3, #4]
   1b31a:	b2e1      	uxtb	r1, r4
   1b31c:	4798      	blx	r3
}
   1b31e:	4620      	mov	r0, r4
   1b320:	bd38      	pop	{r3, r4, r5, pc}
   1b322:	bf00      	nop
   1b324:	00027618 	.word	0x00027618

0001b328 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1b328:	b530      	push	{r4, r5, lr}
	return port->config;
   1b32a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b32c:	7b05      	ldrb	r5, [r0, #12]
   1b32e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1b332:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1b336:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b338:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1b33c:	d105      	bne.n	1b34a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1b33e:	4620      	mov	r0, r4
   1b340:	f003 fb4c 	bl	1e9dc <nrfx_gpiote_trigger_disable>

		return 0;
   1b344:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1b346:	b005      	add	sp, #20
   1b348:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b34a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b34c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b350:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b354:	d114      	bne.n	1b380 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1b356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b35a:	bf0c      	ite	eq
   1b35c:	2304      	moveq	r3, #4
   1b35e:	2305      	movne	r3, #5
   1b360:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b364:	2300      	movs	r3, #0
   1b366:	4619      	mov	r1, r3
   1b368:	aa02      	add	r2, sp, #8
   1b36a:	4620      	mov	r0, r4
   1b36c:	f003 f96c 	bl	1e648 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b370:	4b1d      	ldr	r3, [pc, #116]	; (1b3e8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1b372:	4298      	cmp	r0, r3
   1b374:	d135      	bne.n	1b3e2 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1b376:	2101      	movs	r1, #1
   1b378:	4620      	mov	r0, r4
   1b37a:	f003 faeb 	bl	1e954 <nrfx_gpiote_trigger_enable>
	return 0;
   1b37e:	e7e1      	b.n	1b344 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b380:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1b384:	d022      	beq.n	1b3cc <gpio_nrfx_pin_interrupt_configure+0xa4>
   1b386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1b38a:	bf14      	ite	ne
   1b38c:	2301      	movne	r3, #1
   1b38e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b390:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1b394:	6883      	ldr	r3, [r0, #8]
   1b396:	40cb      	lsrs	r3, r1
   1b398:	07d9      	lsls	r1, r3, #31
   1b39a:	d4e3      	bmi.n	1b364 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1b39c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1b3a0:	d1e0      	bne.n	1b364 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1b3a2:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b3a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b3aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1b3b2:	07db      	lsls	r3, r3, #31
   1b3b4:	d4d6      	bmi.n	1b364 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b3b6:	f10d 0507 	add.w	r5, sp, #7
   1b3ba:	4629      	mov	r1, r5
   1b3bc:	4620      	mov	r0, r4
   1b3be:	f003 fa75 	bl	1e8ac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1b3c2:	4b0a      	ldr	r3, [pc, #40]	; (1b3ec <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1b3c4:	4298      	cmp	r0, r3
   1b3c6:	d003      	beq.n	1b3d0 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
   1b3c8:	9503      	str	r5, [sp, #12]
   1b3ca:	e7cb      	b.n	1b364 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b3cc:	2303      	movs	r3, #3
   1b3ce:	e7df      	b.n	1b390 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1b3d0:	4628      	mov	r0, r5
   1b3d2:	f003 fab9 	bl	1e948 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1b3d6:	4b04      	ldr	r3, [pc, #16]	; (1b3e8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1b3d8:	4298      	cmp	r0, r3
   1b3da:	d0f5      	beq.n	1b3c8 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
   1b3dc:	f06f 000b 	mvn.w	r0, #11
   1b3e0:	e7b1      	b.n	1b346 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1b3e2:	f06f 0015 	mvn.w	r0, #21
   1b3e6:	e7ae      	b.n	1b346 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1b3e8:	0bad0000 	.word	0x0bad0000
   1b3ec:	0bad0004 	.word	0x0bad0004

0001b3f0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1b3f0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1b3f2:	f003 fa99 	bl	1e928 <nrfx_gpiote_is_init>
   1b3f6:	4604      	mov	r4, r0
   1b3f8:	b968      	cbnz	r0, 1b416 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1b3fa:	f003 fa6d 	bl	1e8d8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1b3fe:	4b08      	ldr	r3, [pc, #32]	; (1b420 <gpio_nrfx_init+0x30>)
   1b400:	4298      	cmp	r0, r3
   1b402:	d10a      	bne.n	1b41a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1b404:	4807      	ldr	r0, [pc, #28]	; (1b424 <gpio_nrfx_init+0x34>)
   1b406:	4621      	mov	r1, r4
   1b408:	f003 fa4a 	bl	1e8a0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1b40c:	4622      	mov	r2, r4
   1b40e:	2105      	movs	r1, #5
   1b410:	2006      	movs	r0, #6
   1b412:	f7eb fee7 	bl	71e4 <z_arm_irq_priority_set>
		return 0;
   1b416:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1b418:	bd10      	pop	{r4, pc}
		return -EIO;
   1b41a:	f06f 0004 	mvn.w	r0, #4
   1b41e:	e7fb      	b.n	1b418 <gpio_nrfx_init+0x28>
   1b420:	0bad0000 	.word	0x0bad0000
   1b424:	0001b429 	.word	0x0001b429

0001b428 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b428:	0943      	lsrs	r3, r0, #5
{
   1b42a:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b42c:	d107      	bne.n	1b43e <nrfx_gpio_handler+0x16>
	return list->head;
   1b42e:	4b0b      	ldr	r3, [pc, #44]	; (1b45c <nrfx_gpio_handler+0x34>)
   1b430:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b432:	b121      	cbz	r1, 1b43e <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1b434:	2501      	movs	r5, #1
	return node->next;
   1b436:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1b438:	4e09      	ldr	r6, [pc, #36]	; (1b460 <nrfx_gpio_handler+0x38>)
   1b43a:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b43c:	b901      	cbnz	r1, 1b440 <nrfx_gpio_handler+0x18>
}
   1b43e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1b440:	688a      	ldr	r2, [r1, #8]
   1b442:	402a      	ands	r2, r5
   1b444:	d002      	beq.n	1b44c <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1b446:	684b      	ldr	r3, [r1, #4]
   1b448:	4630      	mov	r0, r6
   1b44a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b44c:	b11c      	cbz	r4, 1b456 <nrfx_gpio_handler+0x2e>
   1b44e:	6823      	ldr	r3, [r4, #0]
   1b450:	4621      	mov	r1, r4
   1b452:	461c      	mov	r4, r3
   1b454:	e7f2      	b.n	1b43c <nrfx_gpio_handler+0x14>
   1b456:	4623      	mov	r3, r4
   1b458:	e7fa      	b.n	1b450 <nrfx_gpio_handler+0x28>
   1b45a:	bf00      	nop
   1b45c:	20003850 	.word	0x20003850
   1b460:	000275d0 	.word	0x000275d0

0001b464 <gpio_nrfx_pin_configure>:
{
   1b464:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1b468:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b46a:	7b3b      	ldrb	r3, [r7, #12]
   1b46c:	f001 051f 	and.w	r5, r1, #31
   1b470:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1b474:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b476:	4628      	mov	r0, r5
   1b478:	f10d 0103 	add.w	r1, sp, #3
{
   1b47c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b47e:	f003 fa15 	bl	1e8ac <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b482:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b486:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b488:	d10b      	bne.n	1b4a2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1b48a:	4628      	mov	r0, r5
   1b48c:	f003 face 	bl	1ea2c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1b490:	4b3d      	ldr	r3, [pc, #244]	; (1b588 <gpio_nrfx_pin_configure+0x124>)
   1b492:	4598      	cmp	r8, r3
   1b494:	d103      	bne.n	1b49e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1b496:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b49a:	f003 fa4f 	bl	1e93c <nrfx_gpiote_channel_free>
		return 0;
   1b49e:	2000      	movs	r0, #0
   1b4a0:	e00c      	b.n	1b4bc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b4a2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b4a4:	4619      	mov	r1, r3
   1b4a6:	aa02      	add	r2, sp, #8
   1b4a8:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b4aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b4ae:	f003 f8cb 	bl	1e648 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b4b2:	4b35      	ldr	r3, [pc, #212]	; (1b588 <gpio_nrfx_pin_configure+0x124>)
   1b4b4:	4298      	cmp	r0, r3
   1b4b6:	d004      	beq.n	1b4c2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1b4b8:	f06f 0015 	mvn.w	r0, #21
}
   1b4bc:	b004      	add	sp, #16
   1b4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1b4c2:	4580      	cmp	r8, r0
   1b4c4:	d103      	bne.n	1b4ce <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1b4c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b4ca:	f003 fa37 	bl	1e93c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1b4ce:	03a3      	lsls	r3, r4, #14
   1b4d0:	d54b      	bpl.n	1b56a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b4d2:	f240 3306 	movw	r3, #774	; 0x306
   1b4d6:	4023      	ands	r3, r4
   1b4d8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1b4dc:	d019      	beq.n	1b512 <gpio_nrfx_pin_configure+0xae>
   1b4de:	d80c      	bhi.n	1b4fa <gpio_nrfx_pin_configure+0x96>
   1b4e0:	2b06      	cmp	r3, #6
   1b4e2:	d017      	beq.n	1b514 <gpio_nrfx_pin_configure+0xb0>
   1b4e4:	d804      	bhi.n	1b4f0 <gpio_nrfx_pin_configure+0x8c>
   1b4e6:	b1ab      	cbz	r3, 1b514 <gpio_nrfx_pin_configure+0xb0>
   1b4e8:	2b02      	cmp	r3, #2
   1b4ea:	d1e5      	bne.n	1b4b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1b4ec:	2304      	movs	r3, #4
   1b4ee:	e011      	b.n	1b514 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b4f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1b4f4:	d1e0      	bne.n	1b4b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1b4f6:	2301      	movs	r3, #1
   1b4f8:	e00c      	b.n	1b514 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b4fa:	f240 2202 	movw	r2, #514	; 0x202
   1b4fe:	4293      	cmp	r3, r2
   1b500:	d027      	beq.n	1b552 <gpio_nrfx_pin_configure+0xee>
   1b502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1b506:	d026      	beq.n	1b556 <gpio_nrfx_pin_configure+0xf2>
   1b508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1b50c:	d1d4      	bne.n	1b4b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1b50e:	2302      	movs	r3, #2
   1b510:	e000      	b.n	1b514 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1b512:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1b514:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1b518:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1b51c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1b520:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1b522:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1b526:	bf54      	ite	pl
   1b528:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1b52c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b52e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1b530:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b534:	d511      	bpl.n	1b55a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1b536:	687a      	ldr	r2, [r7, #4]
   1b538:	2301      	movs	r3, #1
   1b53a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1b53c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1b540:	2200      	movs	r2, #0
   1b542:	a901      	add	r1, sp, #4
   1b544:	4628      	mov	r0, r5
   1b546:	f003 f92d 	bl	1e7a4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b54a:	4b0f      	ldr	r3, [pc, #60]	; (1b588 <gpio_nrfx_pin_configure+0x124>)
   1b54c:	4298      	cmp	r0, r3
   1b54e:	d0a6      	beq.n	1b49e <gpio_nrfx_pin_configure+0x3a>
   1b550:	e7b2      	b.n	1b4b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1b552:	2305      	movs	r3, #5
   1b554:	e7de      	b.n	1b514 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b556:	2303      	movs	r3, #3
   1b558:	e7dc      	b.n	1b514 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1b55a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1b55c:	bf41      	itttt	mi
   1b55e:	2301      	movmi	r3, #1
   1b560:	687a      	ldrmi	r2, [r7, #4]
   1b562:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1b564:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1b568:	e7ea      	b.n	1b540 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   1b56a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b56c:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1b570:	bf54      	ite	pl
   1b572:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1b576:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b578:	461a      	mov	r2, r3
   1b57a:	a901      	add	r1, sp, #4
   1b57c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1b57e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b582:	f003 f861 	bl	1e648 <nrfx_gpiote_input_configure>
   1b586:	e7e0      	b.n	1b54a <gpio_nrfx_pin_configure+0xe6>
   1b588:	0bad0000 	.word	0x0bad0000

0001b58c <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   1b58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b590:	b082      	sub	sp, #8
	const struct sx1509b_config *cfg = dev->config;
   1b592:	6845      	ldr	r5, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1b594:	6906      	ldr	r6, [r0, #16]
{
   1b596:	4681      	mov	r9, r0
   1b598:	af00      	add	r7, sp, #0
	int rc;

	if (!device_is_ready(cfg->bus.bus)) {
   1b59a:	6868      	ldr	r0, [r5, #4]
   1b59c:	f00b f9a4 	bl	268e8 <z_device_is_ready>
   1b5a0:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1b73c <sx1509b_init+0x1b0>
   1b5a4:	4603      	mov	r3, r0
   1b5a6:	2800      	cmp	r0, #0
   1b5a8:	d13b      	bne.n	1b622 <sx1509b_init+0x96>
		LOG_ERR("I2C bus not ready");
   1b5aa:	f8d8 2000 	ldr.w	r2, [r8]
   1b5ae:	0751      	lsls	r1, r2, #29
   1b5b0:	d126      	bne.n	1b600 <sx1509b_init+0x74>
		rc = -ENODEV;
   1b5b2:	f06f 0412 	mvn.w	r4, #18
					   SX1509B_REG_MISC_FREQ);
	}

out:
	if (rc != 0) {
		LOG_ERR("%s init failed: %d", dev->name, rc);
   1b5b6:	f8d8 3000 	ldr.w	r3, [r8]
   1b5ba:	075b      	lsls	r3, r3, #29
   1b5bc:	d017      	beq.n	1b5ee <sx1509b_init+0x62>
   1b5be:	466d      	mov	r5, sp
   1b5c0:	b08a      	sub	sp, #40	; 0x28
   1b5c2:	f8d9 3000 	ldr.w	r3, [r9]
   1b5c6:	466a      	mov	r2, sp
   1b5c8:	495d      	ldr	r1, [pc, #372]	; (1b740 <sx1509b_init+0x1b4>)
   1b5ca:	6151      	str	r1, [r2, #20]
   1b5cc:	495d      	ldr	r1, [pc, #372]	; (1b744 <sx1509b_init+0x1b8>)
   1b5ce:	6214      	str	r4, [r2, #32]
   1b5d0:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1b5d4:	f240 3301 	movw	r3, #769	; 0x301
   1b5d8:	8493      	strh	r3, [r2, #36]	; 0x24
   1b5da:	4b5b      	ldr	r3, [pc, #364]	; (1b748 <sx1509b_init+0x1bc>)
   1b5dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1b5e0:	4856      	ldr	r0, [pc, #344]	; (1b73c <sx1509b_init+0x1b0>)
   1b5e2:	2300      	movs	r3, #0
   1b5e4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1b5e8:	f7e8 fdb2 	bl	4150 <z_impl_z_log_msg_static_create>
   1b5ec:	46ad      	mov	sp, r5
	z_impl_k_sem_give(sem);
   1b5ee:	f106 001c 	add.w	r0, r6, #28
   1b5f2:	f004 fb9b 	bl	1fd2c <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   1b5f6:	4620      	mov	r0, r4
   1b5f8:	3708      	adds	r7, #8
   1b5fa:	46bd      	mov	sp, r7
   1b5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("I2C bus not ready");
   1b600:	466c      	mov	r4, sp
   1b602:	b088      	sub	sp, #32
   1b604:	466a      	mov	r2, sp
   1b606:	4951      	ldr	r1, [pc, #324]	; (1b74c <sx1509b_init+0x1c0>)
   1b608:	6151      	str	r1, [r2, #20]
   1b60a:	494e      	ldr	r1, [pc, #312]	; (1b744 <sx1509b_init+0x1b8>)
   1b60c:	6191      	str	r1, [r2, #24]
   1b60e:	2103      	movs	r1, #3
   1b610:	f842 1f10 	str.w	r1, [r2, #16]!
   1b614:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b618:	4640      	mov	r0, r8
   1b61a:	f7e8 fd99 	bl	4150 <z_impl_z_log_msg_static_create>
   1b61e:	46a5      	mov	sp, r4
   1b620:	e7c7      	b.n	1b5b2 <sx1509b_init+0x26>
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1b622:	f241 227d 	movw	r2, #4733	; 0x127d
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1b626:	6868      	ldr	r0, [r5, #4]
   1b628:	892b      	ldrh	r3, [r5, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1b62a:	80ba      	strh	r2, [r7, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b62c:	1d39      	adds	r1, r7, #4
   1b62e:	2202      	movs	r2, #2
   1b630:	f00a f916 	bl	25860 <i2c_write>
	if (rc != 0) {
   1b634:	4604      	mov	r4, r0
   1b636:	b1e0      	cbz	r0, 1b672 <sx1509b_init+0xe6>
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
   1b638:	f8d8 3000 	ldr.w	r3, [r8]
   1b63c:	075a      	lsls	r2, r3, #29
   1b63e:	d0ba      	beq.n	1b5b6 <sx1509b_init+0x2a>
   1b640:	466d      	mov	r5, sp
   1b642:	b08a      	sub	sp, #40	; 0x28
   1b644:	f8d9 3000 	ldr.w	r3, [r9]
   1b648:	466a      	mov	r2, sp
   1b64a:	4941      	ldr	r1, [pc, #260]	; (1b750 <sx1509b_init+0x1c4>)
   1b64c:	6151      	str	r1, [r2, #20]
   1b64e:	493d      	ldr	r1, [pc, #244]	; (1b744 <sx1509b_init+0x1b8>)
   1b650:	6210      	str	r0, [r2, #32]
   1b652:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1b656:	f240 3301 	movw	r3, #769	; 0x301
   1b65a:	8493      	strh	r3, [r2, #36]	; 0x24
   1b65c:	4b3a      	ldr	r3, [pc, #232]	; (1b748 <sx1509b_init+0x1bc>)
   1b65e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b662:	2300      	movs	r3, #0
   1b664:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1b668:	4640      	mov	r0, r8
   1b66a:	f7e8 fd71 	bl	4150 <z_impl_z_log_msg_static_create>
   1b66e:	46ad      	mov	sp, r5
	if (rc != 0) {
   1b670:	e7a1      	b.n	1b5b6 <sx1509b_init+0x2a>
	uint8_t tx_buf[2] = {reg_addr, value};
   1b672:	f243 427d 	movw	r2, #13437	; 0x347d
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1b676:	6868      	ldr	r0, [r5, #4]
   1b678:	892b      	ldrh	r3, [r5, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1b67a:	80ba      	strh	r2, [r7, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b67c:	1d39      	adds	r1, r7, #4
   1b67e:	2202      	movs	r2, #2
   1b680:	f00a f8ee 	bl	25860 <i2c_write>
	if (rc != 0) {
   1b684:	4604      	mov	r4, r0
   1b686:	2800      	cmp	r0, #0
   1b688:	d195      	bne.n	1b5b6 <sx1509b_init+0x2a>
	return z_impl_k_sleep(timeout);
   1b68a:	2100      	movs	r1, #0
   1b68c:	2063      	movs	r0, #99	; 0x63
   1b68e:	f005 f857 	bl	20740 <z_impl_k_sleep>
	drv_data->pin_state = (struct sx1509b_pin_state) {
   1b692:	4621      	mov	r1, r4
   1b694:	2212      	movs	r2, #18
   1b696:	1d30      	adds	r0, r6, #4
   1b698:	f008 fac3 	bl	23c22 <memset>
   1b69c:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1b6a0:	8334      	strh	r4, [r6, #24]
   1b6a2:	76b4      	strb	r4, [r6, #26]
	drv_data->pin_state = (struct sx1509b_pin_state) {
   1b6a4:	82b3      	strh	r3, [r6, #20]
	uint8_t tx_buf[2] = {reg_addr, value};
   1b6a6:	f244 021e 	movw	r2, #16414	; 0x401e
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1b6aa:	6868      	ldr	r0, [r5, #4]
   1b6ac:	892b      	ldrh	r3, [r5, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1b6ae:	80ba      	strh	r2, [r7, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b6b0:	1d39      	adds	r1, r7, #4
   1b6b2:	2202      	movs	r2, #2
   1b6b4:	f00a f8d4 	bl	25860 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1b6b8:	46a2      	mov	sl, r4
	if (rc == 0) {
   1b6ba:	4604      	mov	r4, r0
   1b6bc:	2800      	cmp	r0, #0
   1b6be:	f47f af7a 	bne.w	1b5b6 <sx1509b_init+0x2a>
	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
   1b6c2:	3504      	adds	r5, #4
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   1b6c4:	8ab2      	ldrh	r2, [r6, #20]
   1b6c6:	2110      	movs	r1, #16
   1b6c8:	4628      	mov	r0, r5
   1b6ca:	f00a f8da 	bl	25882 <i2c_reg_write_word_be>
	if (rc == 0) {
   1b6ce:	4604      	mov	r4, r0
   1b6d0:	2800      	cmp	r0, #0
   1b6d2:	f47f af70 	bne.w	1b5b6 <sx1509b_init+0x2a>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DIR,
   1b6d6:	8a72      	ldrh	r2, [r6, #18]
   1b6d8:	210e      	movs	r1, #14
   1b6da:	4628      	mov	r0, r5
   1b6dc:	f00a f8d1 	bl	25882 <i2c_reg_write_word_be>
	if (rc == 0) {
   1b6e0:	4604      	mov	r4, r0
   1b6e2:	2800      	cmp	r0, #0
   1b6e4:	f47f af67 	bne.w	1b5b6 <sx1509b_init+0x2a>
	uint8_t tx_buf[3] = { reg_addr, value };
   1b6e8:	f649 031f 	movw	r3, #38943	; 0x981f
   1b6ec:	80bb      	strh	r3, [r7, #4]
   1b6ee:	f887 a006 	strb.w	sl, [r7, #6]
	return i2c_write_dt(bus, tx_buf, 2);
   1b6f2:	2202      	movs	r2, #2
   1b6f4:	1d39      	adds	r1, r7, #4
   1b6f6:	4628      	mov	r0, r5
   1b6f8:	f00a f8bf 	bl	2587a <i2c_write_dt>
	if (rc != 0) {
   1b6fc:	4604      	mov	r4, r0
   1b6fe:	2800      	cmp	r0, #0
   1b700:	f47f af59 	bne.w	1b5b6 <sx1509b_init+0x2a>
		LOG_INF("%s init ok", dev->name);
   1b704:	f8d8 3000 	ldr.w	r3, [r8]
   1b708:	f003 0307 	and.w	r3, r3, #7
   1b70c:	2b02      	cmp	r3, #2
   1b70e:	f67f af6e 	bls.w	1b5ee <sx1509b_init+0x62>
   1b712:	466d      	mov	r5, sp
   1b714:	b08a      	sub	sp, #40	; 0x28
   1b716:	f8d9 3000 	ldr.w	r3, [r9]
   1b71a:	466a      	mov	r2, sp
   1b71c:	490d      	ldr	r1, [pc, #52]	; (1b754 <sx1509b_init+0x1c8>)
   1b71e:	6151      	str	r1, [r2, #20]
   1b720:	4908      	ldr	r1, [pc, #32]	; (1b744 <sx1509b_init+0x1b8>)
   1b722:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1b726:	f240 3301 	movw	r3, #769	; 0x301
   1b72a:	8413      	strh	r3, [r2, #32]
   1b72c:	4b0a      	ldr	r3, [pc, #40]	; (1b758 <sx1509b_init+0x1cc>)
   1b72e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b732:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   1b736:	4603      	mov	r3, r0
   1b738:	4640      	mov	r0, r8
   1b73a:	e755      	b.n	1b5e8 <sx1509b_init+0x5c>
   1b73c:	20000b50 	.word	0x20000b50
   1b740:	0002d1bc 	.word	0x0002d1bc
   1b744:	0002d1e2 	.word	0x0002d1e2
   1b748:	01000005 	.word	0x01000005
   1b74c:	0002d189 	.word	0x0002d189
   1b750:	0002d19f 	.word	0x0002d19f
   1b754:	0002d1d3 	.word	0x0002d1d3
   1b758:	01000004 	.word	0x01000004

0001b75c <cmd_i2c_speed>:

/* i2c speed <device> <speed>
 * For: speed see constants like I2C_SPEED_STANDARD
 */
static int cmd_i2c_speed(const struct shell *shell_ctx, size_t argc, char **argv)
{
   1b75c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	char *s_dev_name = argv[ARGV_DEV];
	const struct device *dev;
	uint32_t dev_config = 0;
   1b760:	f04f 0800 	mov.w	r8, #0
	char *s_dev_name = argv[ARGV_DEV];
   1b764:	6856      	ldr	r6, [r2, #4]
	uint32_t dev_config = 0;
   1b766:	f8cd 8004 	str.w	r8, [sp, #4]
{
   1b76a:	4605      	mov	r5, r0
   1b76c:	4614      	mov	r4, r2
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1b76e:	4630      	mov	r0, r6
   1b770:	f003 fe1a 	bl	1f3a8 <z_impl_device_get_binding>
	uint32_t speed;
	int ret;

	dev = device_get_binding(s_dev_name);
	if (!dev) {
   1b774:	4607      	mov	r7, r0
   1b776:	b950      	cbnz	r0, 1b78e <cmd_i2c_speed+0x32>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
   1b778:	4628      	mov	r0, r5
   1b77a:	4a1a      	ldr	r2, [pc, #104]	; (1b7e4 <cmd_i2c_speed+0x88>)
   1b77c:	4633      	mov	r3, r6
   1b77e:	2101      	movs	r1, #1
   1b780:	f006 fe08 	bl	22394 <shell_fprintf>
			    s_dev_name);
		return -ENODEV;
   1b784:	f06f 0012 	mvn.w	r0, #18
		shell_error(shell_ctx, "I2C: Failed to configure device: %s",
			    s_dev_name);
		return -EIO;
	}
	return 0;
}
   1b788:	b002      	add	sp, #8
   1b78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	speed = strtol(argv[ARGV_DEV + 1], NULL, 10);
   1b78e:	68a0      	ldr	r0, [r4, #8]
   1b790:	220a      	movs	r2, #10
   1b792:	4641      	mov	r1, r8
   1b794:	f008 f8ab 	bl	238ee <strtol>
	if (api->get_config == NULL) {
   1b798:	68bb      	ldr	r3, [r7, #8]
   1b79a:	685b      	ldr	r3, [r3, #4]
   1b79c:	0044      	lsls	r4, r0, #1
   1b79e:	b1cb      	cbz	r3, 1b7d4 <cmd_i2c_speed+0x78>
	return api->get_config(dev, dev_config);
   1b7a0:	a901      	add	r1, sp, #4
   1b7a2:	4638      	mov	r0, r7
   1b7a4:	4798      	blx	r3
	if (ret == 0) {
   1b7a6:	b9a8      	cbnz	r0, 1b7d4 <cmd_i2c_speed+0x78>
		dev_config &= ~I2C_SPEED_MASK;
   1b7a8:	9b01      	ldr	r3, [sp, #4]
		dev_config |= I2C_SPEED_SET(speed);
   1b7aa:	f004 010e 	and.w	r1, r4, #14
		dev_config &= ~I2C_SPEED_MASK;
   1b7ae:	f023 030e 	bic.w	r3, r3, #14
		dev_config |= I2C_SPEED_SET(speed);
   1b7b2:	4319      	orrs	r1, r3
   1b7b4:	9101      	str	r1, [sp, #4]
	return api->configure(dev, dev_config);
   1b7b6:	68bb      	ldr	r3, [r7, #8]
   1b7b8:	4638      	mov	r0, r7
   1b7ba:	681b      	ldr	r3, [r3, #0]
   1b7bc:	4798      	blx	r3
	if (ret < 0) {
   1b7be:	2800      	cmp	r0, #0
   1b7c0:	da0d      	bge.n	1b7de <cmd_i2c_speed+0x82>
		shell_error(shell_ctx, "I2C: Failed to configure device: %s",
   1b7c2:	4628      	mov	r0, r5
   1b7c4:	4a08      	ldr	r2, [pc, #32]	; (1b7e8 <cmd_i2c_speed+0x8c>)
   1b7c6:	4633      	mov	r3, r6
   1b7c8:	2101      	movs	r1, #1
   1b7ca:	f006 fde3 	bl	22394 <shell_fprintf>
		return -EIO;
   1b7ce:	f06f 0004 	mvn.w	r0, #4
   1b7d2:	e7d9      	b.n	1b788 <cmd_i2c_speed+0x2c>
		dev_config = I2C_MODE_CONTROLLER | I2C_SPEED_SET(speed);
   1b7d4:	f004 010e 	and.w	r1, r4, #14
   1b7d8:	f041 0110 	orr.w	r1, r1, #16
   1b7dc:	e7ea      	b.n	1b7b4 <cmd_i2c_speed+0x58>
	return 0;
   1b7de:	2000      	movs	r0, #0
   1b7e0:	e7d2      	b.n	1b788 <cmd_i2c_speed+0x2c>
   1b7e2:	bf00      	nop
   1b7e4:	0002d206 	.word	0x0002d206
   1b7e8:	0002d228 	.word	0x0002d228

0001b7ec <i2c_read_to_buffer>:
{
   1b7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b7f0:	4605      	mov	r5, r0
   1b7f2:	b089      	sub	sp, #36	; 0x24
   1b7f4:	460c      	mov	r4, r1
   1b7f6:	4616      	mov	r6, r2
   1b7f8:	4699      	mov	r9, r3
   1b7fa:	4608      	mov	r0, r1
   1b7fc:	f003 fdd4 	bl	1f3a8 <z_impl_device_get_binding>
	if (!dev) {
   1b800:	4607      	mov	r7, r0
   1b802:	b950      	cbnz	r0, 1b81a <i2c_read_to_buffer+0x2e>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
   1b804:	4628      	mov	r0, r5
   1b806:	4a1f      	ldr	r2, [pc, #124]	; (1b884 <i2c_read_to_buffer+0x98>)
   1b808:	4623      	mov	r3, r4
   1b80a:	2101      	movs	r1, #1
   1b80c:	f006 fdc2 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1b810:	f06f 0012 	mvn.w	r0, #18
}
   1b814:	b009      	add	sp, #36	; 0x24
   1b816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	dev_addr = strtol(s_dev_addr, NULL, 16);
   1b81a:	2210      	movs	r2, #16
   1b81c:	2100      	movs	r1, #0
   1b81e:	4630      	mov	r0, r6
   1b820:	f008 f865 	bl	238ee <strtol>
	reg_addr = strtol(s_reg_addr, NULL, 16);
   1b824:	2210      	movs	r2, #16
   1b826:	2100      	movs	r1, #0
	dev_addr = strtol(s_dev_addr, NULL, 16);
   1b828:	4680      	mov	r8, r0
	reg_addr = strtol(s_reg_addr, NULL, 16);
   1b82a:	4648      	mov	r0, r9
   1b82c:	f008 f85f 	bl	238ee <strtol>
   1b830:	4604      	mov	r4, r0
	reg_addr_bytes = get_bytes_count_for_hex(s_reg_addr);
   1b832:	4648      	mov	r0, r9
   1b834:	f00a f98b 	bl	25b4e <get_bytes_count_for_hex>
			       MAX_BYTES_FOR_REGISTER_INDEX - reg_addr_bytes,
   1b838:	ab08      	add	r3, sp, #32
   1b83a:	1a1b      	subs	r3, r3, r0
	ret = i2c_write_read(dev, dev_addr,
   1b83c:	3b18      	subs	r3, #24
	msg[0].len = num_write;
   1b83e:	e9cd 3002 	strd	r3, r0, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1b842:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b844:	9305      	str	r3, [sp, #20]
   1b846:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   1b84a:	9306      	str	r3, [sp, #24]
   1b84c:	ba24      	rev	r4, r4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b84e:	2307      	movs	r3, #7
	dst[0] = val >> 8;
   1b850:	9401      	str	r4, [sp, #4]
   1b852:	f88d 301c 	strb.w	r3, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   1b856:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
   1b858:	fa1f f388 	uxth.w	r3, r8
   1b85c:	2202      	movs	r2, #2
   1b85e:	a902      	add	r1, sp, #8
   1b860:	4638      	mov	r0, r7
	msg[0].flags = I2C_MSG_WRITE;
   1b862:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   1b866:	f00a f95f 	bl	25b28 <i2c_transfer>
	if (ret < 0) {
   1b86a:	42a0      	cmp	r0, r4
   1b86c:	da08      	bge.n	1b880 <i2c_read_to_buffer+0x94>
		shell_error(shell_ctx, "Failed to read from device: %s",
   1b86e:	4628      	mov	r0, r5
   1b870:	4a05      	ldr	r2, [pc, #20]	; (1b888 <i2c_read_to_buffer+0x9c>)
   1b872:	4633      	mov	r3, r6
   1b874:	2101      	movs	r1, #1
   1b876:	f006 fd8d 	bl	22394 <shell_fprintf>
		return -EIO;
   1b87a:	f06f 0004 	mvn.w	r0, #4
   1b87e:	e7c9      	b.n	1b814 <i2c_read_to_buffer+0x28>
	return 0;
   1b880:	4620      	mov	r0, r4
   1b882:	e7c7      	b.n	1b814 <i2c_read_to_buffer+0x28>
   1b884:	0002d206 	.word	0x0002d206
   1b888:	0002d24d 	.word	0x0002d24d

0001b88c <cmd_i2c_read_byte>:
{
   1b88c:	b530      	push	{r4, r5, lr}
   1b88e:	b085      	sub	sp, #20
	ret = i2c_read_to_buffer(shell_ctx, argv[ARGV_DEV],
   1b890:	2301      	movs	r3, #1
   1b892:	9301      	str	r3, [sp, #4]
{
   1b894:	4611      	mov	r1, r2
	ret = i2c_read_to_buffer(shell_ctx, argv[ARGV_DEV],
   1b896:	f10d 030f 	add.w	r3, sp, #15
   1b89a:	9300      	str	r3, [sp, #0]
   1b89c:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   1b8a0:	6849      	ldr	r1, [r1, #4]
{
   1b8a2:	4605      	mov	r5, r0
	ret = i2c_read_to_buffer(shell_ctx, argv[ARGV_DEV],
   1b8a4:	f7ff ffa2 	bl	1b7ec <i2c_read_to_buffer>
	if (ret == 0) {
   1b8a8:	4604      	mov	r4, r0
   1b8aa:	b930      	cbnz	r0, 1b8ba <cmd_i2c_read_byte+0x2e>
		shell_print(shell_ctx, "Output: 0x%x", out);
   1b8ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b8b0:	4a03      	ldr	r2, [pc, #12]	; (1b8c0 <cmd_i2c_read_byte+0x34>)
   1b8b2:	2108      	movs	r1, #8
   1b8b4:	4628      	mov	r0, r5
   1b8b6:	f006 fd6d 	bl	22394 <shell_fprintf>
}
   1b8ba:	4620      	mov	r0, r4
   1b8bc:	b005      	add	sp, #20
   1b8be:	bd30      	pop	{r4, r5, pc}
   1b8c0:	0002d26d 	.word	0x0002d26d

0001b8c4 <i2c_write_from_buffer>:
{
   1b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8c8:	b089      	sub	sp, #36	; 0x24
   1b8ca:	4606      	mov	r6, r0
   1b8cc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
   1b8d0:	468a      	mov	sl, r1
   1b8d2:	4690      	mov	r8, r2
   1b8d4:	461d      	mov	r5, r3
   1b8d6:	4608      	mov	r0, r1
   1b8d8:	f003 fd66 	bl	1f3a8 <z_impl_device_get_binding>
	if (!dev) {
   1b8dc:	4607      	mov	r7, r0
   1b8de:	b950      	cbnz	r0, 1b8f6 <i2c_write_from_buffer+0x32>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
   1b8e0:	4630      	mov	r0, r6
   1b8e2:	4a2b      	ldr	r2, [pc, #172]	; (1b990 <i2c_write_from_buffer+0xcc>)
   1b8e4:	4653      	mov	r3, sl
   1b8e6:	2101      	movs	r1, #1
   1b8e8:	f006 fd54 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1b8ec:	f06f 0012 	mvn.w	r0, #18
}
   1b8f0:	b009      	add	sp, #36	; 0x24
   1b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(s_dev_addr, NULL, 16);
   1b8f6:	2210      	movs	r2, #16
   1b8f8:	2100      	movs	r1, #0
   1b8fa:	4640      	mov	r0, r8
   1b8fc:	f007 fff7 	bl	238ee <strtol>
	reg_addr = strtol(s_reg_addr, NULL, 16);
   1b900:	2210      	movs	r2, #16
   1b902:	2100      	movs	r1, #0
	dev_addr = strtol(s_dev_addr, NULL, 16);
   1b904:	4682      	mov	sl, r0
	reg_addr = strtol(s_reg_addr, NULL, 16);
   1b906:	4628      	mov	r0, r5
   1b908:	f007 fff1 	bl	238ee <strtol>
   1b90c:	4683      	mov	fp, r0
	reg_addr_bytes = get_bytes_count_for_hex(s_reg_addr);
   1b90e:	4628      	mov	r0, r5
   1b910:	f00a f91d 	bl	25b4e <get_bytes_count_for_hex>
   1b914:	4605      	mov	r5, r0
	if (data_length + reg_addr_bytes > MAX_I2C_BYTES) {
   1b916:	1963      	adds	r3, r4, r5
   1b918:	fa9b f08b 	rev.w	r0, fp
   1b91c:	2b10      	cmp	r3, #16
   1b91e:	9003      	str	r0, [sp, #12]
   1b920:	dd07      	ble.n	1b932 <i2c_write_from_buffer+0x6e>
		data_length = MAX_I2C_BYTES - reg_addr_bytes;
   1b922:	f1c5 0310 	rsb	r3, r5, #16
		shell_info(shell_ctx, "Too many bytes provided, limit is %d",
   1b926:	4a1b      	ldr	r2, [pc, #108]	; (1b994 <i2c_write_from_buffer+0xd0>)
   1b928:	2102      	movs	r1, #2
   1b92a:	4630      	mov	r0, r6
		data_length = MAX_I2C_BYTES - reg_addr_bytes;
   1b92c:	b2dc      	uxtb	r4, r3
		shell_info(shell_ctx, "Too many bytes provided, limit is %d",
   1b92e:	f006 fd31 	bl	22394 <shell_fprintf>
	for (i = 0; i < data_length; i++) {
   1b932:	f10d 090f 	add.w	r9, sp, #15
   1b936:	f04f 0b00 	mov.w	fp, #0
   1b93a:	455c      	cmp	r4, fp
   1b93c:	dc1a      	bgt.n	1b974 <i2c_write_from_buffer+0xb0>
			buf + MAX_BYTES_FOR_REGISTER_INDEX - reg_addr_bytes,
   1b93e:	ab08      	add	r3, sp, #32
   1b940:	1b5b      	subs	r3, r3, r5
	ret = i2c_write(dev,
   1b942:	3b10      	subs	r3, #16
	msg.buf = (uint8_t *)buf;
   1b944:	9300      	str	r3, [sp, #0]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1b946:	2302      	movs	r3, #2
   1b948:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_addr_bytes + data_length, dev_addr);
   1b94c:	442c      	add	r4, r5
	return i2c_transfer(dev, &msg, 1, addr);
   1b94e:	fa1f f38a 	uxth.w	r3, sl
   1b952:	2201      	movs	r2, #1
   1b954:	4669      	mov	r1, sp
   1b956:	4638      	mov	r0, r7
	msg.len = num_bytes;
   1b958:	9401      	str	r4, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   1b95a:	f00a f8e5 	bl	25b28 <i2c_transfer>
	if (ret < 0) {
   1b95e:	2800      	cmp	r0, #0
   1b960:	da14      	bge.n	1b98c <i2c_write_from_buffer+0xc8>
		shell_error(shell_ctx, "Failed to read from device: %s",
   1b962:	4630      	mov	r0, r6
   1b964:	4a0c      	ldr	r2, [pc, #48]	; (1b998 <i2c_write_from_buffer+0xd4>)
   1b966:	4643      	mov	r3, r8
   1b968:	2101      	movs	r1, #1
   1b96a:	f006 fd13 	bl	22394 <shell_fprintf>
		return -EIO;
   1b96e:	f06f 0004 	mvn.w	r0, #4
   1b972:	e7bd      	b.n	1b8f0 <i2c_write_from_buffer+0x2c>
			(uint8_t)strtol(data[i], NULL, 16);
   1b974:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b976:	2210      	movs	r2, #16
   1b978:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   1b97c:	2100      	movs	r1, #0
   1b97e:	f007 ffb6 	bl	238ee <strtol>
	for (i = 0; i < data_length; i++) {
   1b982:	f10b 0b01 	add.w	fp, fp, #1
			(uint8_t)strtol(data[i], NULL, 16);
   1b986:	f809 0f01 	strb.w	r0, [r9, #1]!
	for (i = 0; i < data_length; i++) {
   1b98a:	e7d6      	b.n	1b93a <i2c_write_from_buffer+0x76>
	return 0;
   1b98c:	2000      	movs	r0, #0
   1b98e:	e7af      	b.n	1b8f0 <i2c_write_from_buffer+0x2c>
   1b990:	0002d206 	.word	0x0002d206
   1b994:	0002d27b 	.word	0x0002d27b
   1b998:	0002d24d 	.word	0x0002d24d

0001b99c <cmd_i2c_scan>:
{
   1b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9a0:	4604      	mov	r4, r0
   1b9a2:	b087      	sub	sp, #28
	dev = device_get_binding(argv[ARGV_DEV]);
   1b9a4:	6850      	ldr	r0, [r2, #4]
{
   1b9a6:	4617      	mov	r7, r2
   1b9a8:	f003 fcfe 	bl	1f3a8 <z_impl_device_get_binding>
	if (!dev) {
   1b9ac:	4681      	mov	r9, r0
   1b9ae:	b950      	cbnz	r0, 1b9c6 <cmd_i2c_scan+0x2a>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
   1b9b0:	4620      	mov	r0, r4
   1b9b2:	687b      	ldr	r3, [r7, #4]
   1b9b4:	4a2a      	ldr	r2, [pc, #168]	; (1ba60 <cmd_i2c_scan+0xc4>)
   1b9b6:	2101      	movs	r1, #1
   1b9b8:	f006 fcec 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1b9bc:	f06f 0012 	mvn.w	r0, #18
}
   1b9c0:	b007      	add	sp, #28
   1b9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell_ctx,
   1b9c6:	4a27      	ldr	r2, [pc, #156]	; (1ba64 <cmd_i2c_scan+0xc8>)
   1b9c8:	2108      	movs	r1, #8
   1b9ca:	4620      	mov	r0, r4
   1b9cc:	f006 fce2 	bl	22394 <shell_fprintf>
   1b9d0:	f04f 0800 	mov.w	r8, #0
	uint8_t cnt = 0, first = 0x04, last = 0x77;
   1b9d4:	4646      	mov	r6, r8
		shell_fprintf(shell_ctx, SHELL_NORMAL, "%02x: ", i);
   1b9d6:	4a24      	ldr	r2, [pc, #144]	; (1ba68 <cmd_i2c_scan+0xcc>)
				shell_fprintf(shell_ctx, SHELL_NORMAL,
   1b9d8:	f8df a090 	ldr.w	sl, [pc, #144]	; 1ba6c <cmd_i2c_scan+0xd0>
				shell_fprintf(shell_ctx, SHELL_NORMAL, "   ");
   1b9dc:	f8df b090 	ldr.w	fp, [pc, #144]	; 1ba70 <cmd_i2c_scan+0xd4>
		shell_fprintf(shell_ctx, SHELL_NORMAL, "%02x: ", i);
   1b9e0:	4643      	mov	r3, r8
   1b9e2:	2108      	movs	r1, #8
   1b9e4:	4620      	mov	r0, r4
   1b9e6:	f006 fcd5 	bl	22394 <shell_fprintf>
   1b9ea:	4645      	mov	r5, r8
			if (i + j < first || i + j > last) {
   1b9ec:	1f2b      	subs	r3, r5, #4
   1b9ee:	2b73      	cmp	r3, #115	; 0x73
   1b9f0:	d907      	bls.n	1ba02 <cmd_i2c_scan+0x66>
				shell_fprintf(shell_ctx, SHELL_NORMAL, "   ");
   1b9f2:	465a      	mov	r2, fp
				shell_fprintf(shell_ctx, SHELL_NORMAL, "-- ");
   1b9f4:	2108      	movs	r1, #8
   1b9f6:	4620      	mov	r0, r4
   1b9f8:	f006 fccc 	bl	22394 <shell_fprintf>
   1b9fc:	e018      	b.n	1ba30 <cmd_i2c_scan+0x94>
   1b9fe:	46a8      	mov	r8, r5
   1ba00:	e7e9      	b.n	1b9d6 <cmd_i2c_scan+0x3a>
			msgs[0].buf = &dst;
   1ba02:	f10d 030b 	add.w	r3, sp, #11
   1ba06:	9303      	str	r3, [sp, #12]
			msgs[0].len = 0U;
   1ba08:	2300      	movs	r3, #0
   1ba0a:	9304      	str	r3, [sp, #16]
			msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1ba0c:	2302      	movs	r3, #2
   1ba0e:	f88d 3014 	strb.w	r3, [sp, #20]
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
   1ba12:	2201      	movs	r2, #1
   1ba14:	b2ab      	uxth	r3, r5
   1ba16:	a903      	add	r1, sp, #12
   1ba18:	4648      	mov	r0, r9
   1ba1a:	f00a f885 	bl	25b28 <i2c_transfer>
   1ba1e:	b9e8      	cbnz	r0, 1ba5c <cmd_i2c_scan+0xc0>
				shell_fprintf(shell_ctx, SHELL_NORMAL,
   1ba20:	462b      	mov	r3, r5
   1ba22:	4652      	mov	r2, sl
   1ba24:	2108      	movs	r1, #8
   1ba26:	4620      	mov	r0, r4
   1ba28:	f006 fcb4 	bl	22394 <shell_fprintf>
				++cnt;
   1ba2c:	3601      	adds	r6, #1
   1ba2e:	b2f6      	uxtb	r6, r6
		for (uint8_t j = 0; j < 16; j++) {
   1ba30:	3501      	adds	r5, #1
   1ba32:	f108 0310 	add.w	r3, r8, #16
   1ba36:	42ab      	cmp	r3, r5
   1ba38:	d1d8      	bne.n	1b9ec <cmd_i2c_scan+0x50>
		shell_print(shell_ctx, "");
   1ba3a:	4a0e      	ldr	r2, [pc, #56]	; (1ba74 <cmd_i2c_scan+0xd8>)
   1ba3c:	2108      	movs	r1, #8
   1ba3e:	4620      	mov	r0, r4
   1ba40:	f006 fca8 	bl	22394 <shell_fprintf>
	for (uint8_t i = 0; i <= last; i += 16) {
   1ba44:	2d80      	cmp	r5, #128	; 0x80
   1ba46:	d1da      	bne.n	1b9fe <cmd_i2c_scan+0x62>
	shell_print(shell_ctx, "%u devices found on %s",
   1ba48:	687b      	ldr	r3, [r7, #4]
   1ba4a:	9300      	str	r3, [sp, #0]
   1ba4c:	4620      	mov	r0, r4
   1ba4e:	4a0a      	ldr	r2, [pc, #40]	; (1ba78 <cmd_i2c_scan+0xdc>)
   1ba50:	4633      	mov	r3, r6
   1ba52:	2108      	movs	r1, #8
   1ba54:	f006 fc9e 	bl	22394 <shell_fprintf>
	return 0;
   1ba58:	2000      	movs	r0, #0
   1ba5a:	e7b1      	b.n	1b9c0 <cmd_i2c_scan+0x24>
				shell_fprintf(shell_ctx, SHELL_NORMAL, "-- ");
   1ba5c:	4a07      	ldr	r2, [pc, #28]	; (1ba7c <cmd_i2c_scan+0xe0>)
   1ba5e:	e7c9      	b.n	1b9f4 <cmd_i2c_scan+0x58>
   1ba60:	0002d206 	.word	0x0002d206
   1ba64:	0002d2a1 	.word	0x0002d2a1
   1ba68:	0002d2d6 	.word	0x0002d2d6
   1ba6c:	0002a062 	.word	0x0002a062
   1ba70:	0002a068 	.word	0x0002a068
   1ba74:	0002a597 	.word	0x0002a597
   1ba78:	0002d2e1 	.word	0x0002d2e1
   1ba7c:	0002d2dd 	.word	0x0002d2dd

0001ba80 <cmd_i2c_recover>:
{
   1ba80:	b538      	push	{r3, r4, r5, lr}
   1ba82:	4605      	mov	r5, r0
   1ba84:	4614      	mov	r4, r2
	dev = device_get_binding(argv[ARGV_DEV]);
   1ba86:	6850      	ldr	r0, [r2, #4]
   1ba88:	f003 fc8e 	bl	1f3a8 <z_impl_device_get_binding>
	if (!dev) {
   1ba8c:	b948      	cbnz	r0, 1baa2 <cmd_i2c_recover+0x22>
		shell_error(shell_ctx, "I2C: Device driver %s not found.",
   1ba8e:	6863      	ldr	r3, [r4, #4]
   1ba90:	4a0c      	ldr	r2, [pc, #48]	; (1bac4 <cmd_i2c_recover+0x44>)
   1ba92:	2101      	movs	r1, #1
   1ba94:	4628      	mov	r0, r5
   1ba96:	f006 fc7d 	bl	22394 <shell_fprintf>
   1ba9a:	f06f 0412 	mvn.w	r4, #18
}
   1ba9e:	4620      	mov	r0, r4
   1baa0:	bd38      	pop	{r3, r4, r5, pc}
	if (api->recover_bus == NULL) {
   1baa2:	6883      	ldr	r3, [r0, #8]
   1baa4:	695b      	ldr	r3, [r3, #20]
   1baa6:	b153      	cbz	r3, 1babe <cmd_i2c_recover+0x3e>
	return api->recover_bus(dev);
   1baa8:	4798      	blx	r3
	if (err) {
   1baaa:	4604      	mov	r4, r0
   1baac:	2800      	cmp	r0, #0
   1baae:	d0f6      	beq.n	1ba9e <cmd_i2c_recover+0x1e>
		shell_error(shell_ctx, "I2C: Bus recovery failed (err %d)",
   1bab0:	4a05      	ldr	r2, [pc, #20]	; (1bac8 <cmd_i2c_recover+0x48>)
   1bab2:	4623      	mov	r3, r4
   1bab4:	2101      	movs	r1, #1
   1bab6:	4628      	mov	r0, r5
   1bab8:	f006 fc6c 	bl	22394 <shell_fprintf>
		return err;
   1babc:	e7ef      	b.n	1ba9e <cmd_i2c_recover+0x1e>
		return -ENOSYS;
   1babe:	f06f 0457 	mvn.w	r4, #87	; 0x57
   1bac2:	e7f5      	b.n	1bab0 <cmd_i2c_recover+0x30>
   1bac4:	0002d206 	.word	0x0002d206
   1bac8:	0002d2f9 	.word	0x0002d2f9

0001bacc <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   1bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1bace:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1bad0:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
   1bad2:	69e3      	ldr	r3, [r4, #28]
{
   1bad4:	af00      	add	r7, sp, #0
   1bad6:	4605      	mov	r5, r0
	dev_config->irq_connect();
   1bad8:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
   1bada:	6a20      	ldr	r0, [r4, #32]
   1badc:	f00a f89b 	bl	25c16 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   1bae0:	2800      	cmp	r0, #0
   1bae2:	db0f      	blt.n	1bb04 <i2c_nrfx_twim_init+0x38>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   1bae4:	4633      	mov	r3, r6
   1bae6:	4a16      	ldr	r2, [pc, #88]	; (1bb40 <i2c_nrfx_twim_init+0x74>)
   1bae8:	f104 0108 	add.w	r1, r4, #8
   1baec:	4620      	mov	r0, r4
   1baee:	f003 f929 	bl	1ed44 <nrfx_twim_init>
   1baf2:	4b14      	ldr	r3, [pc, #80]	; (1bb44 <i2c_nrfx_twim_init+0x78>)
   1baf4:	4298      	cmp	r0, r3
   1baf6:	d01d      	beq.n	1bb34 <i2c_nrfx_twim_init+0x68>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1baf8:	4813      	ldr	r0, [pc, #76]	; (1bb48 <i2c_nrfx_twim_init+0x7c>)
   1bafa:	6803      	ldr	r3, [r0, #0]
   1bafc:	075b      	lsls	r3, r3, #29
   1bafe:	d103      	bne.n	1bb08 <i2c_nrfx_twim_init+0x3c>
		return -EIO;
   1bb00:	f06f 0004 	mvn.w	r0, #4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
   1bb04:	46bd      	mov	sp, r7
   1bb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1bb08:	466c      	mov	r4, sp
   1bb0a:	b08a      	sub	sp, #40	; 0x28
   1bb0c:	682b      	ldr	r3, [r5, #0]
   1bb0e:	466a      	mov	r2, sp
   1bb10:	490e      	ldr	r1, [pc, #56]	; (1bb4c <i2c_nrfx_twim_init+0x80>)
   1bb12:	6151      	str	r1, [r2, #20]
   1bb14:	490e      	ldr	r1, [pc, #56]	; (1bb50 <i2c_nrfx_twim_init+0x84>)
   1bb16:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1bb1a:	f240 3301 	movw	r3, #769	; 0x301
   1bb1e:	8413      	strh	r3, [r2, #32]
   1bb20:	4b0c      	ldr	r3, [pc, #48]	; (1bb54 <i2c_nrfx_twim_init+0x88>)
   1bb22:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb26:	2300      	movs	r3, #0
   1bb28:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1bb2c:	f7e8 fb10 	bl	4150 <z_impl_z_log_msg_static_create>
   1bb30:	46a5      	mov	sp, r4
   1bb32:	e7e5      	b.n	1bb00 <i2c_nrfx_twim_init+0x34>
	nrfx_twim_enable(&dev_config->twim);
   1bb34:	4620      	mov	r0, r4
   1bb36:	f003 f957 	bl	1ede8 <nrfx_twim_enable>
	return 0;
   1bb3a:	2000      	movs	r0, #0
   1bb3c:	e7e2      	b.n	1bb04 <i2c_nrfx_twim_init+0x38>
   1bb3e:	bf00      	nop
   1bb40:	0001bb95 	.word	0x0001bb95
   1bb44:	0bad0000 	.word	0x0bad0000
   1bb48:	20000b1c 	.word	0x20000b1c
   1bb4c:	0002d507 	.word	0x0002d507
   1bb50:	0002d696 	.word	0x0002d696
   1bb54:	01000004 	.word	0x01000004

0001bb58 <i2c_nrfx_twim_recover_bus>:
{
   1bb58:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1bb5a:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   1bb5c:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   1bb5e:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   1bb62:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
   1bb66:	4620      	mov	r0, r4
   1bb68:	f003 f94e 	bl	1ee08 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1bb6c:	4631      	mov	r1, r6
   1bb6e:	4628      	mov	r0, r5
   1bb70:	f003 fb04 	bl	1f17c <nrfx_twi_twim_bus_recover>
   1bb74:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   1bb76:	6a20      	ldr	r0, [r4, #32]
   1bb78:	f00a f84d 	bl	25c16 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   1bb7c:	4620      	mov	r0, r4
   1bb7e:	f003 f933 	bl	1ede8 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1bb82:	4b03      	ldr	r3, [pc, #12]	; (1bb90 <i2c_nrfx_twim_recover_bus+0x38>)
   1bb84:	429d      	cmp	r5, r3
}
   1bb86:	bf14      	ite	ne
   1bb88:	f06f 000f 	mvnne.w	r0, #15
   1bb8c:	2000      	moveq	r0, #0
   1bb8e:	bd70      	pop	{r4, r5, r6, pc}
   1bb90:	0bad0000 	.word	0x0bad0000

0001bb94 <event_handler>:
	switch (p_event->type) {
   1bb94:	7803      	ldrb	r3, [r0, #0]
   1bb96:	2b01      	cmp	r3, #1
   1bb98:	d008      	beq.n	1bbac <event_handler+0x18>
   1bb9a:	2b02      	cmp	r3, #2
   1bb9c:	d008      	beq.n	1bbb0 <event_handler+0x1c>
   1bb9e:	b94b      	cbnz	r3, 1bbb4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1bba0:	4b05      	ldr	r3, [pc, #20]	; (1bbb8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1bba2:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1bba4:	f101 0018 	add.w	r0, r1, #24
   1bba8:	f004 b8c0 	b.w	1fd2c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1bbac:	4b03      	ldr	r3, [pc, #12]	; (1bbbc <event_handler+0x28>)
   1bbae:	e7f8      	b.n	1bba2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1bbb0:	4b03      	ldr	r3, [pc, #12]	; (1bbc0 <event_handler+0x2c>)
   1bbb2:	e7f6      	b.n	1bba2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1bbb4:	4b03      	ldr	r3, [pc, #12]	; (1bbc4 <event_handler+0x30>)
   1bbb6:	e7f4      	b.n	1bba2 <event_handler+0xe>
   1bbb8:	0bad0000 	.word	0x0bad0000
   1bbbc:	0bae0001 	.word	0x0bae0001
   1bbc0:	0bae0002 	.word	0x0bae0002
   1bbc4:	0bad0001 	.word	0x0bad0001

0001bbc8 <i2c_nrfx_twim_configure>:
{
   1bbc8:	b598      	push	{r3, r4, r7, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1bbca:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1bbce:	6842      	ldr	r2, [r0, #4]
{
   1bbd0:	af00      	add	r7, sp, #0
	if (I2C_ADDR_10_BITS & i2c_config) {
   1bbd2:	d118      	bne.n	1bc06 <i2c_nrfx_twim_configure+0x3e>
	switch (I2C_SPEED_GET(i2c_config)) {
   1bbd4:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1bbd8:	2901      	cmp	r1, #1
   1bbda:	d017      	beq.n	1bc0c <i2c_nrfx_twim_configure+0x44>
   1bbdc:	2902      	cmp	r1, #2
   1bbde:	d01d      	beq.n	1bc1c <i2c_nrfx_twim_configure+0x54>
		LOG_ERR("unsupported speed");
   1bbe0:	4810      	ldr	r0, [pc, #64]	; (1bc24 <i2c_nrfx_twim_configure+0x5c>)
   1bbe2:	6802      	ldr	r2, [r0, #0]
   1bbe4:	0752      	lsls	r2, r2, #29
   1bbe6:	d00e      	beq.n	1bc06 <i2c_nrfx_twim_configure+0x3e>
   1bbe8:	466c      	mov	r4, sp
   1bbea:	b088      	sub	sp, #32
   1bbec:	466a      	mov	r2, sp
   1bbee:	490e      	ldr	r1, [pc, #56]	; (1bc28 <i2c_nrfx_twim_configure+0x60>)
   1bbf0:	6151      	str	r1, [r2, #20]
   1bbf2:	490e      	ldr	r1, [pc, #56]	; (1bc2c <i2c_nrfx_twim_configure+0x64>)
   1bbf4:	6191      	str	r1, [r2, #24]
   1bbf6:	2103      	movs	r1, #3
   1bbf8:	f842 1f10 	str.w	r1, [r2, #16]!
   1bbfc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bc00:	f7e8 faa6 	bl	4150 <z_impl_z_log_msg_static_create>
   1bc04:	46a5      	mov	sp, r4
		return -EINVAL;
   1bc06:	f06f 0015 	mvn.w	r0, #21
   1bc0a:	e005      	b.n	1bc18 <i2c_nrfx_twim_configure+0x50>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1bc0c:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1bc0e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1bc12:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   1bc16:	2000      	movs	r0, #0
}
   1bc18:	46bd      	mov	sp, r7
   1bc1a:	bd98      	pop	{r3, r4, r7, pc}
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1bc1c:	6813      	ldr	r3, [r2, #0]
   1bc1e:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1bc22:	e7f6      	b.n	1bc12 <i2c_nrfx_twim_configure+0x4a>
   1bc24:	20000b1c 	.word	0x20000b1c
   1bc28:	0002d52b 	.word	0x0002d52b
   1bc2c:	0002d6a9 	.word	0x0002d6a9

0001bc30 <i2c_nrfx_twim_transfer>:
{
   1bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc34:	b08d      	sub	sp, #52	; 0x34
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1bc36:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1bc3a:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
   1bc3e:	af00      	add	r7, sp, #0
   1bc40:	461d      	mov	r5, r3
   1bc42:	613a      	str	r2, [r7, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1bc44:	f8bb 3018 	ldrh.w	r3, [fp, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
   1bc48:	f8d9 a034 	ldr.w	sl, [r9, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1bc4c:	617b      	str	r3, [r7, #20]
{
   1bc4e:	4606      	mov	r6, r0
   1bc50:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1bc52:	2214      	movs	r2, #20
   1bc54:	2100      	movs	r1, #0
   1bc56:	f107 001c 	add.w	r0, r7, #28
   1bc5a:	f007 ffe2 	bl	23c22 <memset>
   1bc5e:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
   1bc60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bc64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bc68:	4648      	mov	r0, r9
   1bc6a:	f004 f885 	bl	1fd78 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1bc6e:	f109 0318 	add.w	r3, r9, #24
   1bc72:	60fb      	str	r3, [r7, #12]
   1bc74:	2200      	movs	r2, #0
   1bc76:	2300      	movs	r3, #0
   1bc78:	f109 0018 	add.w	r0, r9, #24
   1bc7c:	f004 f87c 	bl	1fd78 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
   1bc80:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   1bc84:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   1bc86:	693b      	ldr	r3, [r7, #16]
   1bc88:	4598      	cmp	r8, r3
   1bc8a:	d301      	bcc.n	1bc90 <i2c_nrfx_twim_transfer+0x60>
   1bc8c:	2400      	movs	r4, #0
   1bc8e:	e03d      	b.n	1bd0c <i2c_nrfx_twim_transfer+0xdc>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1bc90:	7a20      	ldrb	r0, [r4, #8]
   1bc92:	0702      	lsls	r2, r0, #28
   1bc94:	f100 80ff 	bmi.w	1be96 <i2c_nrfx_twim_transfer+0x266>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1bc98:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
   1bc9a:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1bc9e:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   1bca0:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   1bca2:	d20a      	bcs.n	1bcba <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1bca4:	0783      	lsls	r3, r0, #30
   1bca6:	d408      	bmi.n	1bcba <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1bca8:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1bcaa:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1bcae:	f002 0201 	and.w	r2, r2, #1
   1bcb2:	f003 0304 	and.w	r3, r3, #4
   1bcb6:	431a      	orrs	r2, r3
   1bcb8:	d030      	beq.n	1bd1c <i2c_nrfx_twim_transfer+0xec>
		if (concat_next || (msg_buf_used != 0)) {
   1bcba:	2d00      	cmp	r5, #0
   1bcbc:	d044      	beq.n	1bd48 <i2c_nrfx_twim_transfer+0x118>
		bool concat_next = ((i + 1) < num_msgs)
   1bcbe:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1bcc0:	6862      	ldr	r2, [r4, #4]
   1bcc2:	f8d7 c014 	ldr.w	ip, [r7, #20]
   1bcc6:	18a9      	adds	r1, r5, r2
   1bcc8:	4561      	cmp	r1, ip
   1bcca:	d929      	bls.n	1bd20 <i2c_nrfx_twim_transfer+0xf0>
				LOG_ERR("Need to use concatenation buffer and "
   1bccc:	4873      	ldr	r0, [pc, #460]	; (1be9c <i2c_nrfx_twim_transfer+0x26c>)
   1bcce:	6803      	ldr	r3, [r0, #0]
   1bcd0:	075c      	lsls	r4, r3, #29
   1bcd2:	d019      	beq.n	1bd08 <i2c_nrfx_twim_transfer+0xd8>
   1bcd4:	466c      	mov	r4, sp
   1bcd6:	b08c      	sub	sp, #48	; 0x30
   1bcd8:	6831      	ldr	r1, [r6, #0]
   1bcda:	466b      	mov	r3, sp
   1bcdc:	621a      	str	r2, [r3, #32]
   1bcde:	697a      	ldr	r2, [r7, #20]
   1bce0:	4e6f      	ldr	r6, [pc, #444]	; (1bea0 <i2c_nrfx_twim_transfer+0x270>)
   1bce2:	615e      	str	r6, [r3, #20]
   1bce4:	e9c3 2109 	strd	r2, r1, [r3, #36]	; 0x24
   1bce8:	4e6e      	ldr	r6, [pc, #440]	; (1bea4 <i2c_nrfx_twim_transfer+0x274>)
   1bcea:	f240 6204 	movw	r2, #1540	; 0x604
   1bcee:	859a      	strh	r2, [r3, #44]	; 0x2c
   1bcf0:	461a      	mov	r2, r3
   1bcf2:	e9c3 6506 	strd	r6, r5, [r3, #24]
   1bcf6:	4b6c      	ldr	r3, [pc, #432]	; (1bea8 <i2c_nrfx_twim_transfer+0x278>)
   1bcf8:	f842 3f10 	str.w	r3, [r2, #16]!
   1bcfc:	2300      	movs	r3, #0
   1bcfe:	f44f 5171 	mov.w	r1, #15424	; 0x3c40
   1bd02:	f7e8 fa25 	bl	4150 <z_impl_z_log_msg_static_create>
   1bd06:	46a5      	mov	sp, r4
				ret = -ENOSPC;
   1bd08:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
   1bd0c:	4648      	mov	r0, r9
   1bd0e:	f004 f80d 	bl	1fd2c <z_impl_k_sem_give>
}
   1bd12:	4620      	mov	r0, r4
   1bd14:	3734      	adds	r7, #52	; 0x34
   1bd16:	46bd      	mov	sp, r7
   1bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
   1bd1c:	2301      	movs	r3, #1
   1bd1e:	e7cf      	b.n	1bcc0 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1bd20:	07c1      	lsls	r1, r0, #31
   1bd22:	d406      	bmi.n	1bd32 <i2c_nrfx_twim_transfer+0x102>
				memcpy(msg_buf + msg_buf_used,
   1bd24:	6821      	ldr	r1, [r4, #0]
   1bd26:	607b      	str	r3, [r7, #4]
   1bd28:	eb0a 0005 	add.w	r0, sl, r5
   1bd2c:	f007 ff6e 	bl	23c0c <memcpy>
   1bd30:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
   1bd32:	6862      	ldr	r2, [r4, #4]
   1bd34:	442a      	add	r2, r5
   1bd36:	b295      	uxth	r5, r2
		if (concat_next) {
   1bd38:	2b00      	cmp	r3, #0
   1bd3a:	f040 8094 	bne.w	1be66 <i2c_nrfx_twim_transfer+0x236>
		if (msg_buf_used == 0) {
   1bd3e:	b13d      	cbz	r5, 1bd50 <i2c_nrfx_twim_transfer+0x120>
			cur_xfer.p_primary_buf = msg_buf;
   1bd40:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   1bd44:	462b      	mov	r3, r5
   1bd46:	e007      	b.n	1bd58 <i2c_nrfx_twim_transfer+0x128>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1bd48:	07c3      	lsls	r3, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1bd4a:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1bd4e:	d51b      	bpl.n	1bd88 <i2c_nrfx_twim_transfer+0x158>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1bd50:	6823      	ldr	r3, [r4, #0]
   1bd52:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   1bd54:	6863      	ldr	r3, [r4, #4]
   1bd56:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1bd58:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   1bd5a:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1bd5c:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1bd60:	f082 0202 	eor.w	r2, r2, #2
   1bd64:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1bd68:	0152      	lsls	r2, r2, #5
   1bd6a:	f107 011c 	add.w	r1, r7, #28
   1bd6e:	4658      	mov	r0, fp
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1bd70:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1bd72:	f003 f867 	bl	1ee44 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1bd76:	4b4d      	ldr	r3, [pc, #308]	; (1beac <i2c_nrfx_twim_transfer+0x27c>)
   1bd78:	4298      	cmp	r0, r3
   1bd7a:	d031      	beq.n	1bde0 <i2c_nrfx_twim_transfer+0x1b0>
			if (res == NRFX_ERROR_BUSY) {
   1bd7c:	330b      	adds	r3, #11
   1bd7e:	4298      	cmp	r0, r3
   1bd80:	d14e      	bne.n	1be20 <i2c_nrfx_twim_transfer+0x1f0>
				ret = -EBUSY;
   1bd82:	f06f 040f 	mvn.w	r4, #15
   1bd86:	e7c1      	b.n	1bd0c <i2c_nrfx_twim_transfer+0xdc>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1bd88:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1bd8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1bd90:	d0de      	beq.n	1bd50 <i2c_nrfx_twim_transfer+0x120>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1bd92:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   1bd96:	4293      	cmp	r3, r2
   1bd98:	d21d      	bcs.n	1bdd6 <i2c_nrfx_twim_transfer+0x1a6>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   1bd9a:	4840      	ldr	r0, [pc, #256]	; (1be9c <i2c_nrfx_twim_transfer+0x26c>)
   1bd9c:	6803      	ldr	r3, [r0, #0]
   1bd9e:	075c      	lsls	r4, r3, #29
   1bda0:	d016      	beq.n	1bdd0 <i2c_nrfx_twim_transfer+0x1a0>
   1bda2:	466c      	mov	r4, sp
   1bda4:	b08a      	sub	sp, #40	; 0x28
   1bda6:	6831      	ldr	r1, [r6, #0]
   1bda8:	466b      	mov	r3, sp
   1bdaa:	4e41      	ldr	r6, [pc, #260]	; (1beb0 <i2c_nrfx_twim_transfer+0x280>)
   1bdac:	615e      	str	r6, [r3, #20]
   1bdae:	4e3d      	ldr	r6, [pc, #244]	; (1bea4 <i2c_nrfx_twim_transfer+0x274>)
   1bdb0:	6219      	str	r1, [r3, #32]
   1bdb2:	e9c3 6206 	strd	r6, r2, [r3, #24]
   1bdb6:	f240 4202 	movw	r2, #1026	; 0x402
   1bdba:	849a      	strh	r2, [r3, #36]	; 0x24
   1bdbc:	461a      	mov	r2, r3
   1bdbe:	4b3d      	ldr	r3, [pc, #244]	; (1beb4 <i2c_nrfx_twim_transfer+0x284>)
   1bdc0:	f842 3f10 	str.w	r3, [r2, #16]!
   1bdc4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1bdc8:	462b      	mov	r3, r5
   1bdca:	f7e8 f9c1 	bl	4150 <z_impl_z_log_msg_static_create>
   1bdce:	46a5      	mov	sp, r4
				ret = -EINVAL;
   1bdd0:	f06f 0415 	mvn.w	r4, #21
   1bdd4:	e79a      	b.n	1bd0c <i2c_nrfx_twim_transfer+0xdc>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   1bdd6:	4650      	mov	r0, sl
   1bdd8:	f007 ff18 	bl	23c0c <memcpy>
			msg_buf_used = msgs[i].len;
   1bddc:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   1bdde:	e7ae      	b.n	1bd3e <i2c_nrfx_twim_transfer+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   1bde0:	2300      	movs	r3, #0
   1bde2:	68f8      	ldr	r0, [r7, #12]
   1bde4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1bde8:	f003 ffc6 	bl	1fd78 <z_impl_k_sem_take>
		if (ret != 0) {
   1bdec:	4603      	mov	r3, r0
   1bdee:	b1d0      	cbz	r0, 1be26 <i2c_nrfx_twim_transfer+0x1f6>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1bdf0:	482a      	ldr	r0, [pc, #168]	; (1be9c <i2c_nrfx_twim_transfer+0x26c>)
   1bdf2:	6803      	ldr	r3, [r0, #0]
   1bdf4:	0759      	lsls	r1, r3, #29
   1bdf6:	d010      	beq.n	1be1a <i2c_nrfx_twim_transfer+0x1ea>
   1bdf8:	466c      	mov	r4, sp
   1bdfa:	b088      	sub	sp, #32
   1bdfc:	466a      	mov	r2, sp
   1bdfe:	4b2e      	ldr	r3, [pc, #184]	; (1beb8 <i2c_nrfx_twim_transfer+0x288>)
   1be00:	6153      	str	r3, [r2, #20]
   1be02:	4b28      	ldr	r3, [pc, #160]	; (1bea4 <i2c_nrfx_twim_transfer+0x274>)
   1be04:	e9c2 3806 	strd	r3, r8, [r2, #24]
   1be08:	2304      	movs	r3, #4
   1be0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1be0e:	2300      	movs	r3, #0
   1be10:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1be14:	f7e8 f99c 	bl	4150 <z_impl_z_log_msg_static_create>
   1be18:	46a5      	mov	sp, r4
			(void)i2c_nrfx_twim_recover_bus(dev);
   1be1a:	4630      	mov	r0, r6
   1be1c:	f7ff fe9c 	bl	1bb58 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   1be20:	f06f 0404 	mvn.w	r4, #4
   1be24:	e772      	b.n	1bd0c <i2c_nrfx_twim_transfer+0xdc>
		res = dev_data->res;
   1be26:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1be2a:	4a20      	ldr	r2, [pc, #128]	; (1beac <i2c_nrfx_twim_transfer+0x27c>)
   1be2c:	4291      	cmp	r1, r2
   1be2e:	d016      	beq.n	1be5e <i2c_nrfx_twim_transfer+0x22e>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1be30:	481a      	ldr	r0, [pc, #104]	; (1be9c <i2c_nrfx_twim_transfer+0x26c>)
   1be32:	6802      	ldr	r2, [r0, #0]
   1be34:	0752      	lsls	r2, r2, #29
   1be36:	d0f3      	beq.n	1be20 <i2c_nrfx_twim_transfer+0x1f0>
   1be38:	466c      	mov	r4, sp
   1be3a:	b08a      	sub	sp, #40	; 0x28
   1be3c:	466a      	mov	r2, sp
   1be3e:	4d1f      	ldr	r5, [pc, #124]	; (1bebc <i2c_nrfx_twim_transfer+0x28c>)
   1be40:	6155      	str	r5, [r2, #20]
   1be42:	4d18      	ldr	r5, [pc, #96]	; (1bea4 <i2c_nrfx_twim_transfer+0x274>)
   1be44:	f8c2 8020 	str.w	r8, [r2, #32]
   1be48:	e9c2 5106 	strd	r5, r1, [r2, #24]
   1be4c:	2105      	movs	r1, #5
   1be4e:	f842 1f10 	str.w	r1, [r2, #16]!
   1be52:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1be56:	f7e8 f97b 	bl	4150 <z_impl_z_log_msg_static_create>
   1be5a:	46a5      	mov	sp, r4
   1be5c:	e7e0      	b.n	1be20 <i2c_nrfx_twim_transfer+0x1f0>
		if ((msgs[i].flags & I2C_MSG_READ)
   1be5e:	7a23      	ldrb	r3, [r4, #8]
   1be60:	07db      	lsls	r3, r3, #31
   1be62:	d404      	bmi.n	1be6e <i2c_nrfx_twim_transfer+0x23e>
		msg_buf_used = 0;
   1be64:	2500      	movs	r5, #0
   1be66:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1be6a:	340c      	adds	r4, #12
   1be6c:	e70b      	b.n	1bc86 <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be70:	459a      	cmp	sl, r3
   1be72:	d1f7      	bne.n	1be64 <i2c_nrfx_twim_transfer+0x234>
   1be74:	46a0      	mov	r8, r4
   1be76:	e007      	b.n	1be88 <i2c_nrfx_twim_transfer+0x258>
				msg_buf_used -= msgs[j].len;
   1be78:	1aa9      	subs	r1, r5, r2
   1be7a:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   1be7c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1be80:	fa1a f181 	uxtah	r1, sl, r1
   1be84:	f007 fec2 	bl	23c0c <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   1be88:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1be8c:	4295      	cmp	r5, r2
   1be8e:	f1a8 080c 	sub.w	r8, r8, #12
   1be92:	d2f1      	bcs.n	1be78 <i2c_nrfx_twim_transfer+0x248>
   1be94:	e7e6      	b.n	1be64 <i2c_nrfx_twim_transfer+0x234>
			ret = -ENOTSUP;
   1be96:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1be9a:	e737      	b.n	1bd0c <i2c_nrfx_twim_transfer+0xdc>
   1be9c:	20000b1c 	.word	0x20000b1c
   1bea0:	0002d541 	.word	0x0002d541
   1bea4:	0002d6c1 	.word	0x0002d6c1
   1bea8:	01000007 	.word	0x01000007
   1beac:	0bad0000 	.word	0x0bad0000
   1beb0:	0002d5d5 	.word	0x0002d5d5
   1beb4:	01000005 	.word	0x01000005
   1beb8:	0002d63f 	.word	0x0002d63f
   1bebc:	0002d66d 	.word	0x0002d66d

0001bec0 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
   1bec0:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
   1bec2:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   1bec4:	2904      	cmp	r1, #4
   1bec6:	d81c      	bhi.n	1bf02 <ccs811_channel_get+0x42>
   1bec8:	e8df f001 	tbb	[pc, r1]
   1becc:	0b1b0903 	.word	0x0b1b0903
   1bed0:	17          	.byte	0x17
   1bed1:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
   1bed2:	8819      	ldrh	r1, [r3, #0]
		val->val2 = 0;

		break;
   1bed4:	2300      	movs	r3, #0
		val->val2 = 0;
   1bed6:	e9c2 1300 	strd	r1, r3, [r2]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   1beda:	2000      	movs	r0, #0
   1bedc:	4770      	bx	lr
		val->val1 = rp->voc;
   1bede:	8859      	ldrh	r1, [r3, #2]
		break;
   1bee0:	e7f8      	b.n	1bed4 <ccs811_channel_get+0x14>
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   1bee2:	889b      	ldrh	r3, [r3, #4]
		val->val1 = uval / 1000000U;
   1bee4:	4808      	ldr	r0, [pc, #32]	; (1bf08 <ccs811_channel_get+0x48>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   1bee6:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   1beea:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   1beee:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
   1bef0:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
   1bef4:	fb00 3311 	mls	r3, r0, r1, r3
		break;
   1bef8:	e7ed      	b.n	1bed6 <ccs811_channel_get+0x16>
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   1befa:	889b      	ldrh	r3, [r3, #4]
		break;
   1befc:	2100      	movs	r1, #0
		val->val2 = uval % 1000000;
   1befe:	0a9b      	lsrs	r3, r3, #10
		break;
   1bf00:	e7e9      	b.n	1bed6 <ccs811_channel_get+0x16>
	switch (chan) {
   1bf02:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1bf06:	4770      	bx	lr
   1bf08:	000f4240 	.word	0x000f4240

0001bf0c <fetch_status.isra.0>:
static int fetch_status(const struct device *dev)
   1bf0c:	b5b0      	push	{r4, r5, r7, lr}
   1bf0e:	b082      	sub	sp, #8
   1bf10:	af00      	add	r7, sp, #0
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_STATUS, &status) < 0) {
   1bf12:	1dba      	adds	r2, r7, #6
   1bf14:	2100      	movs	r1, #0
static int fetch_status(const struct device *dev)
   1bf16:	4605      	mov	r5, r0
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_STATUS, &status) < 0) {
   1bf18:	f009 fee6 	bl	25ce8 <i2c_reg_read_byte_dt>
   1bf1c:	2800      	cmp	r0, #0
   1bf1e:	da18      	bge.n	1bf52 <fetch_status.isra.0+0x46>
		LOG_ERR("Failed to read Status register");
   1bf20:	4817      	ldr	r0, [pc, #92]	; (1bf80 <fetch_status.isra.0+0x74>)
   1bf22:	6803      	ldr	r3, [r0, #0]
   1bf24:	0759      	lsls	r1, r3, #29
   1bf26:	d00e      	beq.n	1bf46 <fetch_status.isra.0+0x3a>
   1bf28:	466c      	mov	r4, sp
   1bf2a:	b088      	sub	sp, #32
   1bf2c:	466a      	mov	r2, sp
   1bf2e:	4b15      	ldr	r3, [pc, #84]	; (1bf84 <fetch_status.isra.0+0x78>)
			LOG_ERR("Failed to read ERROR_ID register");
   1bf30:	6153      	str	r3, [r2, #20]
   1bf32:	4b15      	ldr	r3, [pc, #84]	; (1bf88 <fetch_status.isra.0+0x7c>)
   1bf34:	6193      	str	r3, [r2, #24]
   1bf36:	2303      	movs	r3, #3
   1bf38:	f842 3f10 	str.w	r3, [r2, #16]!
   1bf3c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bf40:	f009 fe79 	bl	25c36 <z_log_msg_static_create.constprop.0>
   1bf44:	46a5      	mov	sp, r4
		return -EIO;
   1bf46:	f06f 0404 	mvn.w	r4, #4
}
   1bf4a:	4620      	mov	r0, r4
   1bf4c:	3708      	adds	r7, #8
   1bf4e:	46bd      	mov	sp, r7
   1bf50:	bdb0      	pop	{r4, r5, r7, pc}
	rv = status;
   1bf52:	79bc      	ldrb	r4, [r7, #6]
	if (status & CCS811_STATUS_ERROR) {
   1bf54:	07e2      	lsls	r2, r4, #31
   1bf56:	d5f8      	bpl.n	1bf4a <fetch_status.isra.0+0x3e>
		if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_ERROR_ID, &error_id) < 0) {
   1bf58:	1dfa      	adds	r2, r7, #7
   1bf5a:	21e0      	movs	r1, #224	; 0xe0
   1bf5c:	4628      	mov	r0, r5
   1bf5e:	f009 fec3 	bl	25ce8 <i2c_reg_read_byte_dt>
   1bf62:	2800      	cmp	r0, #0
   1bf64:	da08      	bge.n	1bf78 <fetch_status.isra.0+0x6c>
			LOG_ERR("Failed to read ERROR_ID register");
   1bf66:	4806      	ldr	r0, [pc, #24]	; (1bf80 <fetch_status.isra.0+0x74>)
   1bf68:	6803      	ldr	r3, [r0, #0]
   1bf6a:	075b      	lsls	r3, r3, #29
   1bf6c:	d0eb      	beq.n	1bf46 <fetch_status.isra.0+0x3a>
   1bf6e:	466c      	mov	r4, sp
   1bf70:	b088      	sub	sp, #32
   1bf72:	466a      	mov	r2, sp
   1bf74:	4b05      	ldr	r3, [pc, #20]	; (1bf8c <fetch_status.isra.0+0x80>)
   1bf76:	e7db      	b.n	1bf30 <fetch_status.isra.0+0x24>
		rv |= (error_id << 8);
   1bf78:	79fb      	ldrb	r3, [r7, #7]
   1bf7a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   1bf7e:	e7e4      	b.n	1bf4a <fetch_status.isra.0+0x3e>
   1bf80:	20000ac0 	.word	0x20000ac0
   1bf84:	0002d700 	.word	0x0002d700
   1bf88:	0002d8e3 	.word	0x0002d8e3
   1bf8c:	0002d723 	.word	0x0002d723

0001bf90 <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
   1bf90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bf94:	b083      	sub	sp, #12
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_config *config = dev->config;
   1bf96:	6844      	ldr	r4, [r0, #4]
	struct ccs811_data *drv_data = dev->data;
   1bf98:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
   1bf9c:	af00      	add	r7, sp, #0
   1bf9e:	4606      	mov	r6, r0
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	if (!device_is_ready(config->i2c.bus)) {
   1bfa0:	6820      	ldr	r0, [r4, #0]
   1bfa2:	f00a fca1 	bl	268e8 <z_device_is_ready>
   1bfa6:	b9c8      	cbnz	r0, 1bfdc <ccs811_init+0x4c>
		LOG_ERR("I2C bus device not ready");
   1bfa8:	48a1      	ldr	r0, [pc, #644]	; (1c230 <ccs811_init+0x2a0>)
   1bfaa:	6803      	ldr	r3, [r0, #0]
   1bfac:	075c      	lsls	r4, r3, #29
   1bfae:	d00e      	beq.n	1bfce <ccs811_init+0x3e>
   1bfb0:	466c      	mov	r4, sp
   1bfb2:	b088      	sub	sp, #32
   1bfb4:	466a      	mov	r2, sp
   1bfb6:	4b9f      	ldr	r3, [pc, #636]	; (1c234 <ccs811_init+0x2a4>)
   1bfb8:	6153      	str	r3, [r2, #20]
   1bfba:	4b9f      	ldr	r3, [pc, #636]	; (1c238 <ccs811_init+0x2a8>)
   1bfbc:	6193      	str	r3, [r2, #24]
   1bfbe:	2303      	movs	r3, #3
   1bfc0:	f842 3f10 	str.w	r3, [r2, #16]!
   1bfc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bfc8:	f009 fe35 	bl	25c36 <z_log_msg_static_create.constprop.0>
   1bfcc:	46a5      	mov	sp, r4
		return -ENODEV;
   1bfce:	f06f 0412 	mvn.w	r4, #18
#endif

out:
	set_wake(dev, false);
	return ret;
}
   1bfd2:	4620      	mov	r0, r4
   1bfd4:	370c      	adds	r7, #12
   1bfd6:	46bd      	mov	sp, r7
   1bfd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (config->wake_gpio.port) {
   1bfdc:	69a0      	ldr	r0, [r4, #24]
   1bfde:	b1c0      	cbz	r0, 1c012 <ccs811_init+0x82>
   1bfe0:	f00a fc82 	bl	268e8 <z_device_is_ready>
		if (!device_is_ready(config->wake_gpio.port)) {
   1bfe4:	b940      	cbnz	r0, 1bff8 <ccs811_init+0x68>
			LOG_ERR("GPIO device not ready");
   1bfe6:	4892      	ldr	r0, [pc, #584]	; (1c230 <ccs811_init+0x2a0>)
   1bfe8:	6803      	ldr	r3, [r0, #0]
   1bfea:	0759      	lsls	r1, r3, #29
   1bfec:	d0ef      	beq.n	1bfce <ccs811_init+0x3e>
   1bfee:	466c      	mov	r4, sp
   1bff0:	b088      	sub	sp, #32
   1bff2:	466a      	mov	r2, sp
   1bff4:	4b91      	ldr	r3, [pc, #580]	; (1c23c <ccs811_init+0x2ac>)
   1bff6:	e7df      	b.n	1bfb8 <ccs811_init+0x28>
		gpio_pin_configure_dt(&config->wake_gpio, GPIO_OUTPUT_INACTIVE);
   1bff8:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   1bffc:	f104 0018 	add.w	r0, r4, #24
   1c000:	f009 fe58 	bl	25cb4 <gpio_pin_configure_dt.isra.0>
		set_wake(dev, true);
   1c004:	6870      	ldr	r0, [r6, #4]
   1c006:	2101      	movs	r1, #1
   1c008:	f009 fe96 	bl	25d38 <set_wake.isra.0>
		k_msleep(1);
   1c00c:	2001      	movs	r0, #1
   1c00e:	f009 fe2d 	bl	25c6c <k_msleep.isra.0>
	if (config->reset_gpio.port) {
   1c012:	6920      	ldr	r0, [r4, #16]
   1c014:	b160      	cbz	r0, 1c030 <ccs811_init+0xa0>
   1c016:	f00a fc67 	bl	268e8 <z_device_is_ready>
		if (!device_is_ready(config->reset_gpio.port)) {
   1c01a:	2800      	cmp	r0, #0
   1c01c:	d0e3      	beq.n	1bfe6 <ccs811_init+0x56>
		gpio_pin_configure_dt(&config->reset_gpio, GPIO_OUTPUT_ACTIVE);
   1c01e:	f104 0010 	add.w	r0, r4, #16
   1c022:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
   1c026:	f009 fe45 	bl	25cb4 <gpio_pin_configure_dt.isra.0>
		k_msleep(1);
   1c02a:	2001      	movs	r0, #1
   1c02c:	f009 fe1e 	bl	25c6c <k_msleep.isra.0>
	if (config->irq_gpio.port) {
   1c030:	68a0      	ldr	r0, [r4, #8]
   1c032:	b118      	cbz	r0, 1c03c <ccs811_init+0xac>
   1c034:	f00a fc58 	bl	268e8 <z_device_is_ready>
		if (!device_is_ready(config->irq_gpio.port)) {
   1c038:	2800      	cmp	r0, #0
   1c03a:	d0d4      	beq.n	1bfe6 <ccs811_init+0x56>
	k_msleep(20);            /* t_START assuming recent power-on */
   1c03c:	2014      	movs	r0, #20
   1c03e:	f009 fe15 	bl	25c6c <k_msleep.isra.0>
	if (config->reset_gpio.port) {
   1c042:	6923      	ldr	r3, [r4, #16]
   1c044:	b38b      	cbz	r3, 1c0aa <ccs811_init+0x11a>
		gpio_pin_set_dt(&config->reset_gpio, 1);
   1c046:	f104 0510 	add.w	r5, r4, #16
   1c04a:	2101      	movs	r1, #1
   1c04c:	4628      	mov	r0, r5
   1c04e:	f009 fe1d 	bl	25c8c <gpio_pin_set_dt.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
   1c052:	200f      	movs	r0, #15
   1c054:	f00b f88b 	bl	2716e <z_impl_k_busy_wait>
		gpio_pin_set_dt(&config->reset_gpio, 0);
   1c058:	2100      	movs	r1, #0
   1c05a:	4628      	mov	r0, r5
   1c05c:	f009 fe16 	bl	25c8c <gpio_pin_set_dt.isra.0>
	k_msleep(2);             /* t_START after reset */
   1c060:	2002      	movs	r0, #2
   1c062:	f009 fe03 	bl	25c6c <k_msleep.isra.0>
	const struct ccs811_config *config = dev->config;
   1c066:	6875      	ldr	r5, [r6, #4]
	status = fetch_status(dev);
   1c068:	4628      	mov	r0, r5
   1c06a:	f7ff ff4f 	bl	1bf0c <fetch_status.isra.0>
	if (status < 0) {
   1c06e:	2800      	cmp	r0, #0
   1c070:	db36      	blt.n	1c0e0 <ccs811_init+0x150>
	if (!(status & CCS811_STATUS_APP_VALID)) {
   1c072:	06c3      	lsls	r3, r0, #27
   1c074:	d437      	bmi.n	1c0e6 <ccs811_init+0x156>
		LOG_ERR("No Application firmware loaded");
   1c076:	486e      	ldr	r0, [pc, #440]	; (1c230 <ccs811_init+0x2a0>)
   1c078:	6803      	ldr	r3, [r0, #0]
   1c07a:	075c      	lsls	r4, r3, #29
   1c07c:	d00e      	beq.n	1c09c <ccs811_init+0x10c>
   1c07e:	466c      	mov	r4, sp
   1c080:	b088      	sub	sp, #32
   1c082:	466a      	mov	r2, sp
   1c084:	4b6e      	ldr	r3, [pc, #440]	; (1c240 <ccs811_init+0x2b0>)
   1c086:	6153      	str	r3, [r2, #20]
   1c088:	4b6e      	ldr	r3, [pc, #440]	; (1c244 <ccs811_init+0x2b4>)
   1c08a:	6193      	str	r3, [r2, #24]
   1c08c:	2303      	movs	r3, #3
   1c08e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c092:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c096:	f009 fdce 	bl	25c36 <z_log_msg_static_create.constprop.0>
   1c09a:	46a5      	mov	sp, r4
		return -EINVAL;
   1c09c:	f06f 0415 	mvn.w	r4, #21
	set_wake(dev, false);
   1c0a0:	6870      	ldr	r0, [r6, #4]
   1c0a2:	2100      	movs	r1, #0
   1c0a4:	f009 fe48 	bl	25d38 <set_wake.isra.0>
	return ret;
   1c0a8:	e793      	b.n	1bfd2 <ccs811_init+0x42>
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
   1c0aa:	88a3      	ldrh	r3, [r4, #4]
   1c0ac:	4966      	ldr	r1, [pc, #408]	; (1c248 <ccs811_init+0x2b8>)
   1c0ae:	6820      	ldr	r0, [r4, #0]
   1c0b0:	2205      	movs	r2, #5
   1c0b2:	f009 fe34 	bl	25d1e <i2c_write>
		if (i2c_write_dt(&config->i2c, reset_seq, sizeof(reset_seq)) < 0) {
   1c0b6:	2800      	cmp	r0, #0
   1c0b8:	dad2      	bge.n	1c060 <ccs811_init+0xd0>
			LOG_ERR("Failed to issue SW reset");
   1c0ba:	485d      	ldr	r0, [pc, #372]	; (1c230 <ccs811_init+0x2a0>)
   1c0bc:	6803      	ldr	r3, [r0, #0]
   1c0be:	075a      	lsls	r2, r3, #29
   1c0c0:	d00e      	beq.n	1c0e0 <ccs811_init+0x150>
   1c0c2:	466c      	mov	r4, sp
   1c0c4:	b088      	sub	sp, #32
   1c0c6:	466a      	mov	r2, sp
   1c0c8:	4b60      	ldr	r3, [pc, #384]	; (1c24c <ccs811_init+0x2bc>)
   1c0ca:	6153      	str	r3, [r2, #20]
   1c0cc:	4b5a      	ldr	r3, [pc, #360]	; (1c238 <ccs811_init+0x2a8>)
		LOG_ERR("Failed to set Application mode");
   1c0ce:	6193      	str	r3, [r2, #24]
   1c0d0:	2303      	movs	r3, #3
   1c0d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1c0d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c0da:	f009 fdac 	bl	25c36 <z_log_msg_static_create.constprop.0>
   1c0de:	46a5      	mov	sp, r4
		return -EIO;
   1c0e0:	f06f 0404 	mvn.w	r4, #4
   1c0e4:	e7dc      	b.n	1c0a0 <ccs811_init+0x110>
	if (status & CCS811_STATUS_FW_MODE) {
   1c0e6:	0601      	lsls	r1, r0, #24
   1c0e8:	d518      	bpl.n	1c11c <ccs811_init+0x18c>
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_HW_ID, &hw_id) < 0) {
   1c0ea:	1cfa      	adds	r2, r7, #3
   1c0ec:	2120      	movs	r1, #32
   1c0ee:	4620      	mov	r0, r4
   1c0f0:	f009 fdfa 	bl	25ce8 <i2c_reg_read_byte_dt>
   1c0f4:	2800      	cmp	r0, #0
   1c0f6:	4d4e      	ldr	r5, [pc, #312]	; (1c230 <ccs811_init+0x2a0>)
   1c0f8:	da38      	bge.n	1c16c <ccs811_init+0x1dc>
		LOG_ERR("Failed to read Hardware ID register");
   1c0fa:	682b      	ldr	r3, [r5, #0]
   1c0fc:	075c      	lsls	r4, r3, #29
   1c0fe:	d0ef      	beq.n	1c0e0 <ccs811_init+0x150>
   1c100:	466c      	mov	r4, sp
   1c102:	b088      	sub	sp, #32
   1c104:	466a      	mov	r2, sp
   1c106:	4b52      	ldr	r3, [pc, #328]	; (1c250 <ccs811_init+0x2c0>)
		LOG_ERR("Failed to read App Firmware Version register");
   1c108:	6153      	str	r3, [r2, #20]
   1c10a:	4b4b      	ldr	r3, [pc, #300]	; (1c238 <ccs811_init+0x2a8>)
   1c10c:	6193      	str	r3, [r2, #24]
   1c10e:	2303      	movs	r3, #3
   1c110:	f842 3f10 	str.w	r3, [r2, #16]!
   1c114:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c118:	4628      	mov	r0, r5
   1c11a:	e7de      	b.n	1c0da <ccs811_init+0x14a>
	buf = CCS811_REG_APP_START;
   1c11c:	23f4      	movs	r3, #244	; 0xf4
   1c11e:	71bb      	strb	r3, [r7, #6]
   1c120:	88ab      	ldrh	r3, [r5, #4]
   1c122:	6828      	ldr	r0, [r5, #0]
   1c124:	2201      	movs	r2, #1
   1c126:	1db9      	adds	r1, r7, #6
   1c128:	f009 fdf9 	bl	25d1e <i2c_write>
	if (i2c_write_dt(&config->i2c, &buf, 1) < 0) {
   1c12c:	2800      	cmp	r0, #0
   1c12e:	da0a      	bge.n	1c146 <ccs811_init+0x1b6>
		LOG_ERR("Failed to set Application mode");
   1c130:	483f      	ldr	r0, [pc, #252]	; (1c230 <ccs811_init+0x2a0>)
   1c132:	6803      	ldr	r3, [r0, #0]
   1c134:	075a      	lsls	r2, r3, #29
   1c136:	d0d3      	beq.n	1c0e0 <ccs811_init+0x150>
   1c138:	466c      	mov	r4, sp
   1c13a:	b088      	sub	sp, #32
   1c13c:	466a      	mov	r2, sp
   1c13e:	4b45      	ldr	r3, [pc, #276]	; (1c254 <ccs811_init+0x2c4>)
   1c140:	6153      	str	r3, [r2, #20]
   1c142:	4b40      	ldr	r3, [pc, #256]	; (1c244 <ccs811_init+0x2b4>)
   1c144:	e7c3      	b.n	1c0ce <ccs811_init+0x13e>
	k_msleep(1);             /* t_APP_START */
   1c146:	2001      	movs	r0, #1
   1c148:	f009 fd90 	bl	25c6c <k_msleep.isra.0>
	status = fetch_status(dev);
   1c14c:	6870      	ldr	r0, [r6, #4]
   1c14e:	f7ff fedd 	bl	1bf0c <fetch_status.isra.0>
	if (status < 0) {
   1c152:	2800      	cmp	r0, #0
   1c154:	dbc4      	blt.n	1c0e0 <ccs811_init+0x150>
	if (!(status & CCS811_STATUS_FW_MODE)) {
   1c156:	0603      	lsls	r3, r0, #24
   1c158:	d4c7      	bmi.n	1c0ea <ccs811_init+0x15a>
		LOG_ERR("Failed to start Application firmware");
   1c15a:	4835      	ldr	r0, [pc, #212]	; (1c230 <ccs811_init+0x2a0>)
   1c15c:	6803      	ldr	r3, [r0, #0]
   1c15e:	075d      	lsls	r5, r3, #29
   1c160:	d09c      	beq.n	1c09c <ccs811_init+0x10c>
   1c162:	466c      	mov	r4, sp
   1c164:	b088      	sub	sp, #32
   1c166:	466a      	mov	r2, sp
   1c168:	4b3b      	ldr	r3, [pc, #236]	; (1c258 <ccs811_init+0x2c8>)
   1c16a:	e78c      	b.n	1c086 <ccs811_init+0xf6>
	if (hw_id != CCS881_HW_ID) {
   1c16c:	78fb      	ldrb	r3, [r7, #3]
   1c16e:	2b81      	cmp	r3, #129	; 0x81
   1c170:	d010      	beq.n	1c194 <ccs811_init+0x204>
		LOG_ERR("Hardware ID mismatch!");
   1c172:	682b      	ldr	r3, [r5, #0]
   1c174:	0758      	lsls	r0, r3, #29
   1c176:	d091      	beq.n	1c09c <ccs811_init+0x10c>
   1c178:	466c      	mov	r4, sp
   1c17a:	b088      	sub	sp, #32
   1c17c:	466a      	mov	r2, sp
   1c17e:	4b37      	ldr	r3, [pc, #220]	; (1c25c <ccs811_init+0x2cc>)
   1c180:	6153      	str	r3, [r2, #20]
   1c182:	4b2d      	ldr	r3, [pc, #180]	; (1c238 <ccs811_init+0x2a8>)
   1c184:	6193      	str	r3, [r2, #24]
   1c186:	2303      	movs	r3, #3
   1c188:	f842 3f10 	str.w	r3, [r2, #16]!
   1c18c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c190:	4628      	mov	r0, r5
   1c192:	e780      	b.n	1c096 <ccs811_init+0x106>
	cmd = CCS811_REG_FW_APP_VERSION;
   1c194:	2324      	movs	r3, #36	; 0x24
   1c196:	70bb      	strb	r3, [r7, #2]
	if (i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), &fw_ver, sizeof(fw_ver)) < 0) {
   1c198:	2302      	movs	r3, #2
   1c19a:	1dba      	adds	r2, r7, #6
   1c19c:	18f9      	adds	r1, r7, r3
   1c19e:	4620      	mov	r0, r4
   1c1a0:	f009 fd4c 	bl	25c3c <i2c_write_read_dt.constprop.0>
   1c1a4:	2800      	cmp	r0, #0
   1c1a6:	da07      	bge.n	1c1b8 <ccs811_init+0x228>
		LOG_ERR("Failed to read App Firmware Version register");
   1c1a8:	682b      	ldr	r3, [r5, #0]
   1c1aa:	0759      	lsls	r1, r3, #29
   1c1ac:	d098      	beq.n	1c0e0 <ccs811_init+0x150>
   1c1ae:	466c      	mov	r4, sp
   1c1b0:	b088      	sub	sp, #32
   1c1b2:	466a      	mov	r2, sp
   1c1b4:	4b2a      	ldr	r3, [pc, #168]	; (1c260 <ccs811_init+0x2d0>)
   1c1b6:	e7a7      	b.n	1c108 <ccs811_init+0x178>
	fw_ver = sys_be16_to_cpu(fw_ver);
   1c1b8:	88fb      	ldrh	r3, [r7, #6]
   1c1ba:	ba5b      	rev16	r3, r3
   1c1bc:	b299      	uxth	r1, r3
   1c1be:	80fb      	strh	r3, [r7, #6]
	LOG_INF("App FW %04x", fw_ver);
   1c1c0:	682b      	ldr	r3, [r5, #0]
   1c1c2:	f003 0307 	and.w	r3, r3, #7
   1c1c6:	2b02      	cmp	r3, #2
   1c1c8:	d910      	bls.n	1c1ec <ccs811_init+0x25c>
   1c1ca:	46e9      	mov	r9, sp
   1c1cc:	b088      	sub	sp, #32
   1c1ce:	466a      	mov	r2, sp
   1c1d0:	4b24      	ldr	r3, [pc, #144]	; (1c264 <ccs811_init+0x2d4>)
   1c1d2:	6153      	str	r3, [r2, #20]
   1c1d4:	4b18      	ldr	r3, [pc, #96]	; (1c238 <ccs811_init+0x2a8>)
   1c1d6:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1c1da:	2304      	movs	r3, #4
   1c1dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c1e0:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1c1e4:	4628      	mov	r0, r5
   1c1e6:	f009 fd26 	bl	25c36 <z_log_msg_static_create.constprop.0>
   1c1ea:	46cd      	mov	sp, r9
	drv_data->app_fw_ver = fw_ver >> 8U;
   1c1ec:	88fb      	ldrh	r3, [r7, #6]
   1c1ee:	0a1b      	lsrs	r3, r3, #8
   1c1f0:	f888 3009 	strb.w	r3, [r8, #9]
	uint8_t tx_buf[2] = {reg_addr, value};
   1c1f4:	f241 0301 	movw	r3, #4097	; 0x1001
   1c1f8:	80bb      	strh	r3, [r7, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1c1fa:	6820      	ldr	r0, [r4, #0]
   1c1fc:	88a3      	ldrh	r3, [r4, #4]
   1c1fe:	2202      	movs	r2, #2
   1c200:	1d39      	adds	r1, r7, #4
   1c202:	f009 fd8c 	bl	25d1e <i2c_write>
	if (i2c_reg_write_byte_dt(&config->i2c, CCS811_REG_MEAS_MODE, meas_mode) < 0) {
   1c206:	2800      	cmp	r0, #0
   1c208:	da30      	bge.n	1c26c <ccs811_init+0x2dc>
		LOG_ERR("Failed to set Measurement mode");
   1c20a:	682b      	ldr	r3, [r5, #0]
   1c20c:	075a      	lsls	r2, r3, #29
   1c20e:	f43f af67 	beq.w	1c0e0 <ccs811_init+0x150>
   1c212:	466c      	mov	r4, sp
   1c214:	b088      	sub	sp, #32
   1c216:	466a      	mov	r2, sp
   1c218:	4b13      	ldr	r3, [pc, #76]	; (1c268 <ccs811_init+0x2d8>)
   1c21a:	6153      	str	r3, [r2, #20]
   1c21c:	4b06      	ldr	r3, [pc, #24]	; (1c238 <ccs811_init+0x2a8>)
   1c21e:	6193      	str	r3, [r2, #24]
   1c220:	2303      	movs	r3, #3
   1c222:	f842 3f10 	str.w	r3, [r2, #16]!
   1c226:	4802      	ldr	r0, [pc, #8]	; (1c230 <ccs811_init+0x2a0>)
   1c228:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c22c:	e755      	b.n	1c0da <ccs811_init+0x14a>
   1c22e:	bf00      	nop
   1c230:	20000ac0 	.word	0x20000ac0
   1c234:	0002d748 	.word	0x0002d748
   1c238:	0002d908 	.word	0x0002d908
   1c23c:	0002d765 	.word	0x0002d765
   1c240:	0002d79c 	.word	0x0002d79c
   1c244:	0002d8f0 	.word	0x0002d8f0
   1c248:	0002d903 	.word	0x0002d903
   1c24c:	0002d77f 	.word	0x0002d77f
   1c250:	0002d80b 	.word	0x0002d80b
   1c254:	0002d7bf 	.word	0x0002d7bf
   1c258:	0002d7e2 	.word	0x0002d7e2
   1c25c:	0002d833 	.word	0x0002d833
   1c260:	0002d84d 	.word	0x0002d84d
   1c264:	0002d87e 	.word	0x0002d87e
   1c268:	0002d88e 	.word	0x0002d88e
	drv_data->mode = meas_mode;
   1c26c:	2310      	movs	r3, #16
   1c26e:	f888 3008 	strb.w	r3, [r8, #8]
	status = fetch_status(dev);
   1c272:	6870      	ldr	r0, [r6, #4]
   1c274:	f7ff fe4a 	bl	1bf0c <fetch_status.isra.0>
	if (status < 0) {
   1c278:	2800      	cmp	r0, #0
   1c27a:	f6ff af31 	blt.w	1c0e0 <ccs811_init+0x150>
	if (status & CCS811_STATUS_ERROR) {
   1c27e:	f010 0401 	ands.w	r4, r0, #1
   1c282:	f43f af0d 	beq.w	1c0a0 <ccs811_init+0x110>
		LOG_ERR("CCS811 Error %02x during sensor configuration",
   1c286:	682b      	ldr	r3, [r5, #0]
   1c288:	075b      	lsls	r3, r3, #29
   1c28a:	f43f af07 	beq.w	1c09c <ccs811_init+0x10c>
   1c28e:	466c      	mov	r4, sp
   1c290:	b088      	sub	sp, #32
   1c292:	466a      	mov	r2, sp
   1c294:	4b06      	ldr	r3, [pc, #24]	; (1c2b0 <ccs811_init+0x320>)
   1c296:	6153      	str	r3, [r2, #20]
   1c298:	4b06      	ldr	r3, [pc, #24]	; (1c2b4 <ccs811_init+0x324>)
   1c29a:	6193      	str	r3, [r2, #24]
   1c29c:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1c2a0:	2304      	movs	r3, #4
   1c2a2:	61d0      	str	r0, [r2, #28]
   1c2a4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c2a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2ac:	4802      	ldr	r0, [pc, #8]	; (1c2b8 <ccs811_init+0x328>)
   1c2ae:	e6f2      	b.n	1c096 <ccs811_init+0x106>
   1c2b0:	0002d8b1 	.word	0x0002d8b1
   1c2b4:	0002d908 	.word	0x0002d908
   1c2b8:	20000ac0 	.word	0x20000ac0

0001c2bc <hts221_channel_get>:
};

static int hts221_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
   1c2bc:	b530      	push	{r4, r5, lr}

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   1c2be:	290d      	cmp	r1, #13
	struct hts221_data *data = dev->data;
   1c2c0:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   1c2c2:	d120      	bne.n	1c306 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1c2c4:	88c4      	ldrh	r4, [r0, #6]
			   (data->t_sample - data->t0_out) /
   1c2c6:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1c2ca:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
   1c2cc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1c2d0:	1b1b      	subs	r3, r3, r4
			   (data->t_sample - data->t0_out) /
   1c2d2:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1c2d4:	434b      	muls	r3, r1
			   (data->t1_out - data->t0_out) +
   1c2d6:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   1c2da:	1b49      	subs	r1, r1, r5
			   (data->t_sample - data->t0_out) /
   1c2dc:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1c2e0:	4423      	add	r3, r4
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
   1c2e2:	2b00      	cmp	r3, #0
   1c2e4:	4619      	mov	r1, r3
   1c2e6:	bfb8      	it	lt
   1c2e8:	1dd9      	addlt	r1, r3, #7
		val->val2 = (conv_val % 8) * (1000000 / 8);
   1c2ea:	4258      	negs	r0, r3
   1c2ec:	f000 0007 	and.w	r0, r0, #7
   1c2f0:	f003 0307 	and.w	r3, r3, #7
   1c2f4:	bf58      	it	pl
   1c2f6:	4243      	negpl	r3, r0
   1c2f8:	4812      	ldr	r0, [pc, #72]	; (1c344 <hts221_channel_get+0x88>)
		val->val1 = conv_val / 8;
   1c2fa:	10c9      	asrs	r1, r1, #3
		val->val2 = (conv_val % 8) * (1000000 / 8);
   1c2fc:	4343      	muls	r3, r0
   1c2fe:	e9c2 1300 	strd	r1, r3, [r2]
		val->val2 = (conv_val % 2) * 500000;
	} else {
		return -ENOTSUP;
	}

	return 0;
   1c302:	2000      	movs	r0, #0
}
   1c304:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   1c306:	2910      	cmp	r1, #16
   1c308:	d119      	bne.n	1c33e <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1c30a:	7904      	ldrb	r4, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
   1c30c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1c310:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
   1c312:	f9b0 1000 	ldrsh.w	r1, [r0]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1c316:	1b1b      	subs	r3, r3, r4
			   (data->rh_sample - data->h0_t0_out) /
   1c318:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1c31a:	434b      	muls	r3, r1
			   (data->h1_t0_out - data->h0_t0_out) +
   1c31c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		val->val2 = (conv_val % 2) * 500000;
   1c320:	4809      	ldr	r0, [pc, #36]	; (1c348 <hts221_channel_get+0x8c>)
			   (data->h1_t0_out - data->h0_t0_out) +
   1c322:	1b49      	subs	r1, r1, r5
			   (data->rh_sample - data->h0_t0_out) /
   1c324:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   1c328:	4423      	add	r3, r4
		val->val1 = conv_val / 2;
   1c32a:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
		val->val2 = (conv_val % 2) * 500000;
   1c32e:	2b00      	cmp	r3, #0
   1c330:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
   1c334:	ea4f 0161 	mov.w	r1, r1, asr #1
		val->val2 = (conv_val % 2) * 500000;
   1c338:	bfb8      	it	lt
   1c33a:	425b      	neglt	r3, r3
   1c33c:	e7de      	b.n	1c2fc <hts221_channel_get+0x40>
		return -ENOTSUP;
   1c33e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c342:	e7df      	b.n	1c304 <hts221_channel_get+0x48>
   1c344:	0001e848 	.word	0x0001e848
   1c348:	0007a120 	.word	0x0007a120

0001c34c <hts221_sample_fetch>:

static int hts221_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
   1c34c:	b5b0      	push	{r4, r5, r7, lr}
   1c34e:	b082      	sub	sp, #8
	uint8_t buf[4];
	int status;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1c350:	2304      	movs	r3, #4
{
   1c352:	af00      	add	r7, sp, #0
	struct hts221_data *data = dev->data;
   1c354:	6905      	ldr	r5, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1c356:	6840      	ldr	r0, [r0, #4]
   1c358:	18fa      	adds	r2, r7, r3
   1c35a:	21a8      	movs	r1, #168	; 0xa8
   1c35c:	f007 f81e 	bl	2339c <hts221_read_reg>
				 HTS221_AUTOINCREMENT_ADDR, buf, 4);
	if (status < 0) {
   1c360:	1e04      	subs	r4, r0, #0
   1c362:	da16      	bge.n	1c392 <hts221_sample_fetch+0x46>
		LOG_ERR("Failed to fetch data sample.");
   1c364:	480e      	ldr	r0, [pc, #56]	; (1c3a0 <hts221_sample_fetch+0x54>)
   1c366:	6803      	ldr	r3, [r0, #0]
   1c368:	075b      	lsls	r3, r3, #29
   1c36a:	d00e      	beq.n	1c38a <hts221_sample_fetch+0x3e>
   1c36c:	466d      	mov	r5, sp
   1c36e:	b088      	sub	sp, #32
   1c370:	466a      	mov	r2, sp
   1c372:	4b0c      	ldr	r3, [pc, #48]	; (1c3a4 <hts221_sample_fetch+0x58>)
   1c374:	6153      	str	r3, [r2, #20]
   1c376:	4b0c      	ldr	r3, [pc, #48]	; (1c3a8 <hts221_sample_fetch+0x5c>)
   1c378:	6193      	str	r3, [r2, #24]
   1c37a:	2303      	movs	r3, #3
   1c37c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c380:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c384:	f009 fd23 	bl	25dce <z_log_msg_static_create.constprop.0>
   1c388:	46ad      	mov	sp, r5

	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));

	return 0;
}
   1c38a:	4620      	mov	r0, r4
   1c38c:	3708      	adds	r7, #8
   1c38e:	46bd      	mov	sp, r7
   1c390:	bdb0      	pop	{r4, r5, r7, pc}
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
   1c392:	88bb      	ldrh	r3, [r7, #4]
   1c394:	802b      	strh	r3, [r5, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
   1c396:	88fb      	ldrh	r3, [r7, #6]
   1c398:	806b      	strh	r3, [r5, #2]
	return 0;
   1c39a:	2400      	movs	r4, #0
   1c39c:	e7f5      	b.n	1c38a <hts221_sample_fetch+0x3e>
   1c39e:	bf00      	nop
   1c3a0:	20000ac4 	.word	0x20000ac4
   1c3a4:	0002d925 	.word	0x0002d925
   1c3a8:	0002da36 	.word	0x0002da36

0001c3ac <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
   1c3ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c3b0:	b087      	sub	sp, #28
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   1c3b2:	6845      	ldr	r5, [r0, #4]
{
   1c3b4:	af00      	add	r7, sp, #0
   1c3b6:	4606      	mov	r6, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
   1c3b8:	1df9      	adds	r1, r7, #7
   1c3ba:	4628      	mov	r0, r5
   1c3bc:	f007 f828 	bl	23410 <hts221_device_id_get>
	if (status < 0) {
   1c3c0:	1e04      	subs	r4, r0, #0
   1c3c2:	da13      	bge.n	1c3ec <hts221_init+0x40>
		LOG_ERR("Failed to read chip ID.");
   1c3c4:	4877      	ldr	r0, [pc, #476]	; (1c5a4 <hts221_init+0x1f8>)
   1c3c6:	6803      	ldr	r3, [r0, #0]
   1c3c8:	075d      	lsls	r5, r3, #29
   1c3ca:	d018      	beq.n	1c3fe <hts221_init+0x52>
   1c3cc:	466d      	mov	r5, sp
   1c3ce:	b088      	sub	sp, #32
   1c3d0:	466a      	mov	r2, sp
   1c3d2:	4b75      	ldr	r3, [pc, #468]	; (1c5a8 <hts221_init+0x1fc>)
	}

#ifdef CONFIG_HTS221_TRIGGER
	status = hts221_init_interrupt(dev);
	if (status < 0) {
		LOG_ERR("Failed to initialize interrupt.");
   1c3d4:	6153      	str	r3, [r2, #20]
   1c3d6:	4b75      	ldr	r3, [pc, #468]	; (1c5ac <hts221_init+0x200>)
   1c3d8:	6193      	str	r3, [r2, #24]
   1c3da:	2303      	movs	r3, #3
   1c3dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c3e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c3e4:	f009 fcf3 	bl	25dce <z_log_msg_static_create.constprop.0>
   1c3e8:	46ad      	mov	sp, r5
   1c3ea:	e008      	b.n	1c3fe <hts221_init+0x52>
	if (id != HTS221_ID) {
   1c3ec:	79fb      	ldrb	r3, [r7, #7]
   1c3ee:	2bbc      	cmp	r3, #188	; 0xbc
   1c3f0:	d01a      	beq.n	1c428 <hts221_init+0x7c>
		LOG_ERR("Invalid chip ID.");
   1c3f2:	486c      	ldr	r0, [pc, #432]	; (1c5a4 <hts221_init+0x1f8>)
   1c3f4:	6803      	ldr	r3, [r0, #0]
   1c3f6:	0759      	lsls	r1, r3, #29
   1c3f8:	d106      	bne.n	1c408 <hts221_init+0x5c>
		return -EINVAL;
   1c3fa:	f06f 0415 	mvn.w	r4, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
   1c3fe:	4620      	mov	r0, r4
   1c400:	371c      	adds	r7, #28
   1c402:	46bd      	mov	sp, r7
   1c404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Invalid chip ID.");
   1c408:	466c      	mov	r4, sp
   1c40a:	b088      	sub	sp, #32
   1c40c:	466a      	mov	r2, sp
   1c40e:	4b68      	ldr	r3, [pc, #416]	; (1c5b0 <hts221_init+0x204>)
   1c410:	6153      	str	r3, [r2, #20]
   1c412:	4b66      	ldr	r3, [pc, #408]	; (1c5ac <hts221_init+0x200>)
   1c414:	6193      	str	r3, [r2, #24]
   1c416:	2303      	movs	r3, #3
   1c418:	f842 3f10 	str.w	r3, [r2, #16]!
   1c41c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c420:	f009 fcd5 	bl	25dce <z_log_msg_static_create.constprop.0>
   1c424:	46a5      	mov	sp, r4
   1c426:	e7e8      	b.n	1c3fa <hts221_init+0x4e>
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   1c428:	4c62      	ldr	r4, [pc, #392]	; (1c5b4 <hts221_init+0x208>)
   1c42a:	4621      	mov	r1, r4
   1c42c:	4620      	mov	r0, r4
   1c42e:	f007 fba6 	bl	23b7e <strcmp>
   1c432:	4603      	mov	r3, r0
   1c434:	b150      	cbz	r0, 1c44c <hts221_init+0xa0>
   1c436:	4860      	ldr	r0, [pc, #384]	; (1c5b8 <hts221_init+0x20c>)
   1c438:	4621      	mov	r1, r4
   1c43a:	f007 fba0 	bl	23b7e <strcmp>
   1c43e:	b1b8      	cbz	r0, 1c470 <hts221_init+0xc4>
   1c440:	485e      	ldr	r0, [pc, #376]	; (1c5bc <hts221_init+0x210>)
   1c442:	4621      	mov	r1, r4
   1c444:	f007 fb9b 	bl	23b7e <strcmp>
   1c448:	b9a0      	cbnz	r0, 1c474 <hts221_init+0xc8>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
   1c44a:	2302      	movs	r3, #2
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
   1c44c:	4a5c      	ldr	r2, [pc, #368]	; (1c5c0 <hts221_init+0x214>)
   1c44e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1c452:	4628      	mov	r0, r5
   1c454:	7919      	ldrb	r1, [r3, #4]
   1c456:	f006 ffad 	bl	233b4 <hts221_data_rate_set>
	if (status < 0) {
   1c45a:	1e04      	subs	r4, r0, #0
   1c45c:	da22      	bge.n	1c4a4 <hts221_init+0xf8>
		LOG_ERR("Could not set output data rate");
   1c45e:	4851      	ldr	r0, [pc, #324]	; (1c5a4 <hts221_init+0x1f8>)
   1c460:	6803      	ldr	r3, [r0, #0]
   1c462:	075b      	lsls	r3, r3, #29
   1c464:	d0cb      	beq.n	1c3fe <hts221_init+0x52>
   1c466:	466d      	mov	r5, sp
   1c468:	b088      	sub	sp, #32
   1c46a:	466a      	mov	r2, sp
   1c46c:	4b55      	ldr	r3, [pc, #340]	; (1c5c4 <hts221_init+0x218>)
   1c46e:	e7b1      	b.n	1c3d4 <hts221_init+0x28>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
   1c470:	2301      	movs	r3, #1
   1c472:	e7eb      	b.n	1c44c <hts221_init+0xa0>
		LOG_ERR("Invalid ODR value %s.", CONFIG_HTS221_ODR);
   1c474:	484b      	ldr	r0, [pc, #300]	; (1c5a4 <hts221_init+0x1f8>)
   1c476:	6803      	ldr	r3, [r0, #0]
   1c478:	075a      	lsls	r2, r3, #29
   1c47a:	d0be      	beq.n	1c3fa <hts221_init+0x4e>
   1c47c:	466d      	mov	r5, sp
   1c47e:	b08a      	sub	sp, #40	; 0x28
   1c480:	466a      	mov	r2, sp
   1c482:	4b51      	ldr	r3, [pc, #324]	; (1c5c8 <hts221_init+0x21c>)
   1c484:	6153      	str	r3, [r2, #20]
   1c486:	4b49      	ldr	r3, [pc, #292]	; (1c5ac <hts221_init+0x200>)
   1c488:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1c48c:	f240 3301 	movw	r3, #769	; 0x301
   1c490:	8413      	strh	r3, [r2, #32]
   1c492:	4b4e      	ldr	r3, [pc, #312]	; (1c5cc <hts221_init+0x220>)
   1c494:	f842 3f10 	str.w	r3, [r2, #16]!
   1c498:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c49c:	f009 fc97 	bl	25dce <z_log_msg_static_create.constprop.0>
   1c4a0:	46ad      	mov	sp, r5
   1c4a2:	e7aa      	b.n	1c3fa <hts221_init+0x4e>
	status = hts221_block_data_update_set(ctx, 1);
   1c4a4:	2101      	movs	r1, #1
   1c4a6:	4628      	mov	r0, r5
   1c4a8:	f006 ff9b 	bl	233e2 <hts221_block_data_update_set>
	if (status < 0) {
   1c4ac:	1e04      	subs	r4, r0, #0
   1c4ae:	da08      	bge.n	1c4c2 <hts221_init+0x116>
		LOG_ERR("Could not set BDU bit");
   1c4b0:	483c      	ldr	r0, [pc, #240]	; (1c5a4 <hts221_init+0x1f8>)
   1c4b2:	6803      	ldr	r3, [r0, #0]
   1c4b4:	075e      	lsls	r6, r3, #29
   1c4b6:	d0a2      	beq.n	1c3fe <hts221_init+0x52>
   1c4b8:	466d      	mov	r5, sp
   1c4ba:	b088      	sub	sp, #32
   1c4bc:	466a      	mov	r2, sp
   1c4be:	4b44      	ldr	r3, [pc, #272]	; (1c5d0 <hts221_init+0x224>)
   1c4c0:	e788      	b.n	1c3d4 <hts221_init+0x28>
	status = hts221_power_on_set(ctx, 1);
   1c4c2:	2101      	movs	r1, #1
   1c4c4:	4628      	mov	r0, r5
   1c4c6:	f006 ffa8 	bl	2341a <hts221_power_on_set>
	if (status < 0) {
   1c4ca:	1e04      	subs	r4, r0, #0
   1c4cc:	da08      	bge.n	1c4e0 <hts221_init+0x134>
		LOG_ERR("Could not set PD bit");
   1c4ce:	4835      	ldr	r0, [pc, #212]	; (1c5a4 <hts221_init+0x1f8>)
   1c4d0:	6803      	ldr	r3, [r0, #0]
   1c4d2:	075d      	lsls	r5, r3, #29
   1c4d4:	d093      	beq.n	1c3fe <hts221_init+0x52>
   1c4d6:	466d      	mov	r5, sp
   1c4d8:	b088      	sub	sp, #32
   1c4da:	466a      	mov	r2, sp
   1c4dc:	4b3d      	ldr	r3, [pc, #244]	; (1c5d4 <hts221_init+0x228>)
   1c4de:	e779      	b.n	1c3d4 <hts221_init+0x28>
	return z_impl_k_sleep(timeout);
   1c4e0:	2100      	movs	r1, #0
   1c4e2:	2063      	movs	r0, #99	; 0x63
   1c4e4:	f004 f92c 	bl	20740 <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   1c4e8:	6870      	ldr	r0, [r6, #4]
	struct hts221_data *data = dev->data;
   1c4ea:	6935      	ldr	r5, [r6, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   1c4ec:	2310      	movs	r3, #16
   1c4ee:	f107 0208 	add.w	r2, r7, #8
   1c4f2:	21b0      	movs	r1, #176	; 0xb0
   1c4f4:	f006 ff52 	bl	2339c <hts221_read_reg>
	if (status < 0) {
   1c4f8:	1e04      	subs	r4, r0, #0
   1c4fa:	da2a      	bge.n	1c552 <hts221_init+0x1a6>
		LOG_ERR("Failed to read conversion data.");
   1c4fc:	4d29      	ldr	r5, [pc, #164]	; (1c5a4 <hts221_init+0x1f8>)
   1c4fe:	682b      	ldr	r3, [r5, #0]
   1c500:	0759      	lsls	r1, r3, #29
   1c502:	f43f af7c 	beq.w	1c3fe <hts221_init+0x52>
   1c506:	466e      	mov	r6, sp
   1c508:	b088      	sub	sp, #32
   1c50a:	466a      	mov	r2, sp
   1c50c:	4b32      	ldr	r3, [pc, #200]	; (1c5d8 <hts221_init+0x22c>)
   1c50e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1c5dc <hts221_init+0x230>
   1c512:	6193      	str	r3, [r2, #24]
   1c514:	f04f 0803 	mov.w	r8, #3
   1c518:	f8c2 9014 	str.w	r9, [r2, #20]
   1c51c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c520:	f842 8f10 	str.w	r8, [r2, #16]!
   1c524:	4628      	mov	r0, r5
   1c526:	f009 fc52 	bl	25dce <z_log_msg_static_create.constprop.0>
		LOG_ERR("Failed to read conversion data.");
   1c52a:	682b      	ldr	r3, [r5, #0]
   1c52c:	075a      	lsls	r2, r3, #29
   1c52e:	46b5      	mov	sp, r6
   1c530:	f43f af65 	beq.w	1c3fe <hts221_init+0x52>
   1c534:	b088      	sub	sp, #32
   1c536:	466a      	mov	r2, sp
   1c538:	4b1c      	ldr	r3, [pc, #112]	; (1c5ac <hts221_init+0x200>)
   1c53a:	f8c2 9014 	str.w	r9, [r2, #20]
   1c53e:	6193      	str	r3, [r2, #24]
   1c540:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c544:	f842 8f10 	str.w	r8, [r2, #16]!
   1c548:	4628      	mov	r0, r5
   1c54a:	f009 fc40 	bl	25dce <z_log_msg_static_create.constprop.0>
   1c54e:	46b5      	mov	sp, r6
   1c550:	e755      	b.n	1c3fe <hts221_init+0x52>
	data->h0_rh_x2 = buf[0];
   1c552:	893b      	ldrh	r3, [r7, #8]
   1c554:	80ab      	strh	r3, [r5, #4]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   1c556:	7b7b      	ldrb	r3, [r7, #13]
   1c558:	7aba      	ldrb	r2, [r7, #10]
   1c55a:	0219      	lsls	r1, r3, #8
   1c55c:	f401 7140 	and.w	r1, r1, #768	; 0x300
   1c560:	430a      	orrs	r2, r1
   1c562:	80ea      	strh	r2, [r5, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
   1c564:	019b      	lsls	r3, r3, #6
   1c566:	7afa      	ldrb	r2, [r7, #11]
   1c568:	f403 7340 	and.w	r3, r3, #768	; 0x300
   1c56c:	4313      	orrs	r3, r2
   1c56e:	812b      	strh	r3, [r5, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
   1c570:	89fb      	ldrh	r3, [r7, #14]
   1c572:	816b      	strh	r3, [r5, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
   1c574:	8a7b      	ldrh	r3, [r7, #18]
   1c576:	81ab      	strh	r3, [r5, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
   1c578:	8abb      	ldrh	r3, [r7, #20]
   1c57a:	81eb      	strh	r3, [r5, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
   1c57c:	8afb      	ldrh	r3, [r7, #22]
   1c57e:	822b      	strh	r3, [r5, #16]
	status = hts221_init_interrupt(dev);
   1c580:	4630      	mov	r0, r6
   1c582:	f000 f82f 	bl	1c5e4 <hts221_init_interrupt>
	if (status < 0) {
   1c586:	1e04      	subs	r4, r0, #0
   1c588:	db01      	blt.n	1c58e <hts221_init+0x1e2>
	return 0;
   1c58a:	2400      	movs	r4, #0
   1c58c:	e737      	b.n	1c3fe <hts221_init+0x52>
		LOG_ERR("Failed to initialize interrupt.");
   1c58e:	4805      	ldr	r0, [pc, #20]	; (1c5a4 <hts221_init+0x1f8>)
   1c590:	6803      	ldr	r3, [r0, #0]
   1c592:	075b      	lsls	r3, r3, #29
   1c594:	f43f af33 	beq.w	1c3fe <hts221_init+0x52>
   1c598:	466d      	mov	r5, sp
   1c59a:	b088      	sub	sp, #32
   1c59c:	466a      	mov	r2, sp
   1c59e:	4b10      	ldr	r3, [pc, #64]	; (1c5e0 <hts221_init+0x234>)
   1c5a0:	e718      	b.n	1c3d4 <hts221_init+0x28>
   1c5a2:	bf00      	nop
   1c5a4:	20000ac4 	.word	0x20000ac4
   1c5a8:	0002d946 	.word	0x0002d946
   1c5ac:	0002da66 	.word	0x0002da66
   1c5b0:	0002d962 	.word	0x0002d962
   1c5b4:	0002c10e 	.word	0x0002c10e
   1c5b8:	0002d977 	.word	0x0002d977
   1c5bc:	0002d979 	.word	0x0002d979
   1c5c0:	000299c8 	.word	0x000299c8
   1c5c4:	0002d998 	.word	0x0002d998
   1c5c8:	0002d97e 	.word	0x0002d97e
   1c5cc:	01000004 	.word	0x01000004
   1c5d0:	0002d9bb 	.word	0x0002d9bb
   1c5d4:	0002d9d5 	.word	0x0002d9d5
   1c5d8:	0002da4a 	.word	0x0002da4a
   1c5dc:	0002d9ee 	.word	0x0002d9ee
   1c5e0:	0002da12 	.word	0x0002da12

0001c5e4 <hts221_init_interrupt>:
	process_drdy(data->dev);
}
#endif

int hts221_init_interrupt(const struct device *dev)
{
   1c5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct hts221_data *data = dev->data;
	const struct hts221_config *cfg = dev->config;
   1c5e8:	6845      	ldr	r5, [r0, #4]
{
   1c5ea:	4606      	mov	r6, r0
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
	int status;

	if (cfg->gpio_drdy.port == NULL) {
   1c5ec:	6968      	ldr	r0, [r5, #20]
{
   1c5ee:	af00      	add	r7, sp, #0
	if (cfg->gpio_drdy.port == NULL) {
   1c5f0:	2800      	cmp	r0, #0
   1c5f2:	f000 809f 	beq.w	1c734 <hts221_init_interrupt+0x150>
	struct hts221_data *data = dev->data;
   1c5f6:	f8d6 8010 	ldr.w	r8, [r6, #16]
   1c5fa:	f00a f975 	bl	268e8 <z_device_is_ready>
		LOG_DBG("gpio_drdy not defined in DT");
		return 0;
	}

	if (!device_is_ready(cfg->gpio_drdy.port)) {
   1c5fe:	4603      	mov	r3, r0
   1c600:	b9f8      	cbnz	r0, 1c642 <hts221_init_interrupt+0x5e>
		LOG_ERR("device %s is not ready", cfg->gpio_drdy.port->name);
   1c602:	484d      	ldr	r0, [pc, #308]	; (1c738 <hts221_init_interrupt+0x154>)
   1c604:	6802      	ldr	r2, [r0, #0]
   1c606:	0754      	lsls	r4, r2, #29
   1c608:	d105      	bne.n	1c616 <hts221_init_interrupt+0x32>
		return -ENODEV;
   1c60a:	f06f 0412 	mvn.w	r4, #18
#endif

	setup_drdy(dev, true);

	return 0;
}
   1c60e:	4620      	mov	r0, r4
   1c610:	46bd      	mov	sp, r7
   1c612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("device %s is not ready", cfg->gpio_drdy.port->name);
   1c616:	696a      	ldr	r2, [r5, #20]
   1c618:	466c      	mov	r4, sp
   1c61a:	b08a      	sub	sp, #40	; 0x28
   1c61c:	6811      	ldr	r1, [r2, #0]
   1c61e:	466a      	mov	r2, sp
   1c620:	4d46      	ldr	r5, [pc, #280]	; (1c73c <hts221_init_interrupt+0x158>)
   1c622:	6155      	str	r5, [r2, #20]
   1c624:	4d46      	ldr	r5, [pc, #280]	; (1c740 <hts221_init_interrupt+0x15c>)
   1c626:	e9c2 5106 	strd	r5, r1, [r2, #24]
   1c62a:	f240 3101 	movw	r1, #769	; 0x301
   1c62e:	8411      	strh	r1, [r2, #32]
   1c630:	4944      	ldr	r1, [pc, #272]	; (1c744 <hts221_init_interrupt+0x160>)
   1c632:	f842 1f10 	str.w	r1, [r2, #16]!
   1c636:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c63a:	f7e7 fd89 	bl	4150 <z_impl_z_log_msg_static_create>
   1c63e:	46a5      	mov	sp, r4
   1c640:	e7e3      	b.n	1c60a <hts221_init_interrupt+0x26>
	data->dev = dev;
   1c642:	f8c8 6014 	str.w	r6, [r8, #20]
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
   1c646:	8b6b      	ldrh	r3, [r5, #26]
	return gpio_pin_configure(spec->port,
   1c648:	6968      	ldr	r0, [r5, #20]
				  spec->pin,
   1c64a:	7e29      	ldrb	r1, [r5, #24]
	return gpio_pin_configure(spec->port,
   1c64c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
   1c650:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   1c654:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c658:	f8dc 4000 	ldr.w	r4, [ip]
   1c65c:	f013 0f01 	tst.w	r3, #1
   1c660:	f04f 0301 	mov.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c664:	fa03 f301 	lsl.w	r3, r3, r1
   1c668:	bf14      	ite	ne
   1c66a:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c66c:	ea24 0303 	biceq.w	r3, r4, r3
   1c670:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
   1c674:	f8de 3000 	ldr.w	r3, [lr]
   1c678:	4798      	blx	r3
	if (status < 0) {
   1c67a:	1e04      	subs	r4, r0, #0
   1c67c:	da1c      	bge.n	1c6b8 <hts221_init_interrupt+0xd4>
		LOG_ERR("Could not configure %s.%02u",
   1c67e:	482e      	ldr	r0, [pc, #184]	; (1c738 <hts221_init_interrupt+0x154>)
   1c680:	6803      	ldr	r3, [r0, #0]
   1c682:	0759      	lsls	r1, r3, #29
   1c684:	d0c3      	beq.n	1c60e <hts221_init_interrupt+0x2a>
   1c686:	696b      	ldr	r3, [r5, #20]
   1c688:	6819      	ldr	r1, [r3, #0]
   1c68a:	7e2b      	ldrb	r3, [r5, #24]
   1c68c:	466d      	mov	r5, sp
   1c68e:	b08a      	sub	sp, #40	; 0x28
   1c690:	466a      	mov	r2, sp
   1c692:	4e2d      	ldr	r6, [pc, #180]	; (1c748 <hts221_init_interrupt+0x164>)
   1c694:	6156      	str	r6, [r2, #20]
   1c696:	6213      	str	r3, [r2, #32]
   1c698:	4e29      	ldr	r6, [pc, #164]	; (1c740 <hts221_init_interrupt+0x15c>)
   1c69a:	f240 3301 	movw	r3, #769	; 0x301
   1c69e:	8493      	strh	r3, [r2, #36]	; 0x24
   1c6a0:	4b2a      	ldr	r3, [pc, #168]	; (1c74c <hts221_init_interrupt+0x168>)
   1c6a2:	e9c2 6106 	strd	r6, r1, [r2, #24]
   1c6a6:	f842 3f10 	str.w	r3, [r2, #16]!
   1c6aa:	2300      	movs	r3, #0
   1c6ac:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1c6b0:	f7e7 fd4e 	bl	4150 <z_impl_z_log_msg_static_create>
   1c6b4:	46ad      	mov	sp, r5
		LOG_ERR("Could not enable data-ready interrupt.");
   1c6b6:	e7aa      	b.n	1c60e <hts221_init_interrupt+0x2a>
			   BIT(cfg->gpio_drdy.pin));
   1c6b8:	7e2b      	ldrb	r3, [r5, #24]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1c6ba:	4a25      	ldr	r2, [pc, #148]	; (1c750 <hts221_init_interrupt+0x16c>)
   1c6bc:	f04f 0901 	mov.w	r9, #1
   1c6c0:	fa09 f303 	lsl.w	r3, r9, r3
	callback->pin_mask = pin_mask;
   1c6c4:	e9c8 2307 	strd	r2, r3, [r8, #28]
	status = gpio_add_callback(cfg->gpio_drdy.port, &data->drdy_cb);
   1c6c8:	6968      	ldr	r0, [r5, #20]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1c6ca:	6883      	ldr	r3, [r0, #8]
   1c6cc:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&data->drdy_cb,
   1c6ce:	f108 0118 	add.w	r1, r8, #24
   1c6d2:	b1ab      	cbz	r3, 1c700 <hts221_init_interrupt+0x11c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1c6d4:	464a      	mov	r2, r9
   1c6d6:	4798      	blx	r3
	if (status < 0) {
   1c6d8:	1e04      	subs	r4, r0, #0
   1c6da:	da14      	bge.n	1c706 <hts221_init_interrupt+0x122>
		LOG_ERR("Could not set gpio callback.");
   1c6dc:	4816      	ldr	r0, [pc, #88]	; (1c738 <hts221_init_interrupt+0x154>)
   1c6de:	6803      	ldr	r3, [r0, #0]
   1c6e0:	075a      	lsls	r2, r3, #29
   1c6e2:	d094      	beq.n	1c60e <hts221_init_interrupt+0x2a>
   1c6e4:	466d      	mov	r5, sp
   1c6e6:	b088      	sub	sp, #32
   1c6e8:	466a      	mov	r2, sp
   1c6ea:	4b1a      	ldr	r3, [pc, #104]	; (1c754 <hts221_init_interrupt+0x170>)
		LOG_ERR("Could not enable data-ready interrupt.");
   1c6ec:	6153      	str	r3, [r2, #20]
   1c6ee:	4b14      	ldr	r3, [pc, #80]	; (1c740 <hts221_init_interrupt+0x15c>)
   1c6f0:	6193      	str	r3, [r2, #24]
   1c6f2:	2303      	movs	r3, #3
   1c6f4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c6f8:	2300      	movs	r3, #0
   1c6fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c6fe:	e7d7      	b.n	1c6b0 <hts221_init_interrupt+0xcc>
		return -ENOTSUP;
   1c700:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1c704:	e7ea      	b.n	1c6dc <hts221_init_interrupt+0xf8>
	status = hts221_drdy_on_int_set(ctx, 1);
   1c706:	4649      	mov	r1, r9
   1c708:	4628      	mov	r0, r5
   1c70a:	f006 fe9d 	bl	23448 <hts221_drdy_on_int_set>
	if (status < 0) {
   1c70e:	1e04      	subs	r4, r0, #0
   1c710:	da09      	bge.n	1c726 <hts221_init_interrupt+0x142>
		LOG_ERR("Could not enable data-ready interrupt.");
   1c712:	4809      	ldr	r0, [pc, #36]	; (1c738 <hts221_init_interrupt+0x154>)
   1c714:	6803      	ldr	r3, [r0, #0]
   1c716:	075b      	lsls	r3, r3, #29
   1c718:	f43f af79 	beq.w	1c60e <hts221_init_interrupt+0x2a>
   1c71c:	466d      	mov	r5, sp
   1c71e:	b088      	sub	sp, #32
   1c720:	466a      	mov	r2, sp
   1c722:	4b0d      	ldr	r3, [pc, #52]	; (1c758 <hts221_init_interrupt+0x174>)
   1c724:	e7e2      	b.n	1c6ec <hts221_init_interrupt+0x108>
	data->work.handler = hts221_work_cb;
   1c726:	4b0d      	ldr	r3, [pc, #52]	; (1c75c <hts221_init_interrupt+0x178>)
   1c728:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	setup_drdy(dev, true);
   1c72c:	6870      	ldr	r0, [r6, #4]
   1c72e:	4649      	mov	r1, r9
   1c730:	f009 fb50 	bl	25dd4 <setup_drdy.isra.0>
		return 0;
   1c734:	2400      	movs	r4, #0
   1c736:	e76a      	b.n	1c60e <hts221_init_interrupt+0x2a>
   1c738:	20000ac4 	.word	0x20000ac4
   1c73c:	0002da83 	.word	0x0002da83
   1c740:	0002db0a 	.word	0x0002db0a
   1c744:	01000004 	.word	0x01000004
   1c748:	0002da9e 	.word	0x0002da9e
   1c74c:	01000005 	.word	0x01000005
   1c750:	00025e0f 	.word	0x00025e0f
   1c754:	0002dabe 	.word	0x0002dabe
   1c758:	0002dadf 	.word	0x0002dadf
   1c75c:	00025e2b 	.word	0x00025e2b

0001c760 <lis2dh_channel_get>:
{
   1c760:	b570      	push	{r4, r5, r6, lr}
   1c762:	2903      	cmp	r1, #3
	struct lis2dh_data *lis2dh = dev->data;
   1c764:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
   1c766:	d81c      	bhi.n	1c7a2 <lis2dh_channel_get+0x42>
   1c768:	4b0f      	ldr	r3, [pc, #60]	; (1c7a8 <lis2dh_channel_get+0x48>)
   1c76a:	5658      	ldrsb	r0, [r3, r1]
   1c76c:	4b0f      	ldr	r3, [pc, #60]	; (1c7ac <lis2dh_channel_get+0x4c>)
   1c76e:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
   1c770:	490f      	ldr	r1, [pc, #60]	; (1c7b0 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   1c772:	42b0      	cmp	r0, r6
   1c774:	f102 0208 	add.w	r2, r2, #8
   1c778:	dd01      	ble.n	1c77e <lis2dh_channel_get+0x1e>
	return 0;
   1c77a:	2000      	movs	r0, #0
}
   1c77c:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
   1c77e:	1d03      	adds	r3, r0, #4
   1c780:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
   1c784:	6925      	ldr	r5, [r4, #16]
   1c786:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   1c78a:	111b      	asrs	r3, r3, #4
   1c78c:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
   1c78e:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
   1c792:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
   1c796:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
   1c79a:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   1c79e:	3001      	adds	r0, #1
   1c7a0:	e7e7      	b.n	1c772 <lis2dh_channel_get+0x12>
		return -ENOTSUP;
   1c7a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c7a6:	e7e9      	b.n	1c77c <lis2dh_channel_get+0x1c>
   1c7a8:	0002dc73 	.word	0x0002dc73
   1c7ac:	0002dc6f 	.word	0x0002dc6f
   1c7b0:	000f4240 	.word	0x000f4240

0001c7b4 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
   1c7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c7b8:	b085      	sub	sp, #20
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
   1c7ba:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
   1c7be:	f8d0 8010 	ldr.w	r8, [r0, #16]
	int status;
	uint8_t id;
	uint8_t raw[6];

	status = cfg->bus_init(dev);
   1c7c2:	f8d9 3000 	ldr.w	r3, [r9]
{
   1c7c6:	af00      	add	r7, sp, #0
   1c7c8:	4605      	mov	r5, r0
	status = cfg->bus_init(dev);
   1c7ca:	4798      	blx	r3
	if (status < 0) {
   1c7cc:	1e04      	subs	r4, r0, #0
   1c7ce:	db26      	blt.n	1c81e <lis2dh_init+0x6a>
		return status;
	}

	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
   1c7d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c7d4:	4e60      	ldr	r6, [pc, #384]	; (1c958 <lis2dh_init+0x1a4>)
   1c7d6:	689b      	ldr	r3, [r3, #8]
   1c7d8:	1dfa      	adds	r2, r7, #7
   1c7da:	210f      	movs	r1, #15
   1c7dc:	4628      	mov	r0, r5
   1c7de:	4798      	blx	r3
	if (status < 0) {
   1c7e0:	1e04      	subs	r4, r0, #0
   1c7e2:	da14      	bge.n	1c80e <lis2dh_init+0x5a>
		LOG_ERR("Failed to read chip id.");
   1c7e4:	6833      	ldr	r3, [r6, #0]
   1c7e6:	0759      	lsls	r1, r3, #29
   1c7e8:	d019      	beq.n	1c81e <lis2dh_init+0x6a>
   1c7ea:	466d      	mov	r5, sp
   1c7ec:	b088      	sub	sp, #32
   1c7ee:	466a      	mov	r2, sp
   1c7f0:	4b5a      	ldr	r3, [pc, #360]	; (1c95c <lis2dh_init+0x1a8>)
   1c7f2:	6153      	str	r3, [r2, #20]
   1c7f4:	4b5a      	ldr	r3, [pc, #360]	; (1c960 <lis2dh_init+0x1ac>)
   1c7f6:	6193      	str	r3, [r2, #24]
   1c7f8:	2303      	movs	r3, #3
   1c7fa:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7fe:	2300      	movs	r3, #0
   1c800:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c804:	4630      	mov	r0, r6
   1c806:	f7e7 fca3 	bl	4150 <z_impl_z_log_msg_static_create>
   1c80a:	46ad      	mov	sp, r5
#else
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
#endif

	if (status < 0) {
		LOG_ERR("Failed to set full scale ctrl register.");
   1c80c:	e007      	b.n	1c81e <lis2dh_init+0x6a>
	if (id != LIS2DH_CHIP_ID) {
   1c80e:	79fb      	ldrb	r3, [r7, #7]
   1c810:	2b33      	cmp	r3, #51	; 0x33
   1c812:	d01c      	beq.n	1c84e <lis2dh_init+0x9a>
		LOG_ERR("Invalid chip ID: %02x\n", id);
   1c814:	6832      	ldr	r2, [r6, #0]
   1c816:	0752      	lsls	r2, r2, #29
   1c818:	d106      	bne.n	1c828 <lis2dh_init+0x74>
		return -EINVAL;
   1c81a:	f06f 0415 	mvn.w	r4, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
   1c81e:	4620      	mov	r0, r4
   1c820:	3714      	adds	r7, #20
   1c822:	46bd      	mov	sp, r7
   1c824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Invalid chip ID: %02x\n", id);
   1c828:	466c      	mov	r4, sp
   1c82a:	b088      	sub	sp, #32
   1c82c:	466a      	mov	r2, sp
   1c82e:	494d      	ldr	r1, [pc, #308]	; (1c964 <lis2dh_init+0x1b0>)
   1c830:	6151      	str	r1, [r2, #20]
   1c832:	494b      	ldr	r1, [pc, #300]	; (1c960 <lis2dh_init+0x1ac>)
   1c834:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1c838:	2304      	movs	r3, #4
   1c83a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c83e:	2300      	movs	r3, #0
   1c840:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c844:	4630      	mov	r0, r6
   1c846:	f7e7 fc83 	bl	4150 <z_impl_z_log_msg_static_create>
   1c84a:	46a5      	mov	sp, r4
   1c84c:	e7e5      	b.n	1c81a <lis2dh_init+0x66>
	if (cfg->hw.is_lsm303agr_dev) {
   1c84e:	f899 200c 	ldrb.w	r2, [r9, #12]
   1c852:	07d3      	lsls	r3, r2, #31
   1c854:	d50b      	bpl.n	1c86e <lis2dh_init+0xba>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
   1c856:	4b44      	ldr	r3, [pc, #272]	; (1c968 <lis2dh_init+0x1b4>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
   1c858:	f644 1116 	movw	r1, #18710	; 0x4916
   1c85c:	f242 408b 	movw	r0, #9355	; 0x248b
   1c860:	e9c3 0100 	strd	r0, r1, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
   1c864:	4941      	ldr	r1, [pc, #260]	; (1c96c <lis2dh_init+0x1b8>)
   1c866:	f249 242d 	movw	r4, #37421	; 0x922d
   1c86a:	e9c3 4102 	strd	r4, r1, [r3, #8]
	if (cfg->hw.disc_pull_up) {
   1c86e:	0792      	lsls	r2, r2, #30
   1c870:	d51b      	bpl.n	1c8aa <lis2dh_init+0xf6>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
   1c872:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c876:	691c      	ldr	r4, [r3, #16]
   1c878:	2380      	movs	r3, #128	; 0x80
   1c87a:	461a      	mov	r2, r3
   1c87c:	211e      	movs	r1, #30
   1c87e:	4628      	mov	r0, r5
   1c880:	47a0      	blx	r4
		if (status < 0) {
   1c882:	1e04      	subs	r4, r0, #0
   1c884:	da11      	bge.n	1c8aa <lis2dh_init+0xf6>
			LOG_ERR("Failed to disconnect SDO/SA0 pull-up.");
   1c886:	6833      	ldr	r3, [r6, #0]
   1c888:	075b      	lsls	r3, r3, #29
   1c88a:	d0c8      	beq.n	1c81e <lis2dh_init+0x6a>
   1c88c:	466d      	mov	r5, sp
   1c88e:	b088      	sub	sp, #32
   1c890:	466a      	mov	r2, sp
   1c892:	4b37      	ldr	r3, [pc, #220]	; (1c970 <lis2dh_init+0x1bc>)
		LOG_ERR("Failed to set full scale ctrl register.");
   1c894:	6153      	str	r3, [r2, #20]
   1c896:	4b32      	ldr	r3, [pc, #200]	; (1c960 <lis2dh_init+0x1ac>)
   1c898:	6193      	str	r3, [r2, #24]
   1c89a:	2303      	movs	r3, #3
   1c89c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8a0:	482d      	ldr	r0, [pc, #180]	; (1c958 <lis2dh_init+0x1a4>)
   1c8a2:	2300      	movs	r3, #0
   1c8a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c8a8:	e7ad      	b.n	1c806 <lis2dh_init+0x52>
	(void)memset(raw, 0, sizeof(raw));
   1c8aa:	2206      	movs	r2, #6
   1c8ac:	2100      	movs	r1, #0
   1c8ae:	f107 0008 	add.w	r0, r7, #8
   1c8b2:	f007 f9b6 	bl	23c22 <memset>
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   1c8b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   1c8ba:	f04f 0907 	mov.w	r9, #7
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   1c8be:	685c      	ldr	r4, [r3, #4]
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   1c8c0:	f887 9008 	strb.w	r9, [r7, #8]
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   1c8c4:	2306      	movs	r3, #6
   1c8c6:	f107 0208 	add.w	r2, r7, #8
   1c8ca:	2120      	movs	r1, #32
   1c8cc:	4628      	mov	r0, r5
   1c8ce:	47a0      	blx	r4
	if (status < 0) {
   1c8d0:	1e04      	subs	r4, r0, #0
   1c8d2:	da07      	bge.n	1c8e4 <lis2dh_init+0x130>
		LOG_ERR("Failed to reset ctrl registers.");
   1c8d4:	6833      	ldr	r3, [r6, #0]
   1c8d6:	075e      	lsls	r6, r3, #29
   1c8d8:	d0a1      	beq.n	1c81e <lis2dh_init+0x6a>
   1c8da:	466d      	mov	r5, sp
   1c8dc:	b088      	sub	sp, #32
   1c8de:	466a      	mov	r2, sp
   1c8e0:	4b24      	ldr	r3, [pc, #144]	; (1c974 <lis2dh_init+0x1c0>)
   1c8e2:	e7d7      	b.n	1c894 <lis2dh_init+0xe0>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   1c8e4:	4b20      	ldr	r3, [pc, #128]	; (1c968 <lis2dh_init+0x1b4>)
   1c8e6:	681b      	ldr	r3, [r3, #0]
   1c8e8:	f8c8 3010 	str.w	r3, [r8, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
   1c8ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c8f0:	2200      	movs	r2, #0
   1c8f2:	68db      	ldr	r3, [r3, #12]
   1c8f4:	2123      	movs	r1, #35	; 0x23
   1c8f6:	4628      	mov	r0, r5
   1c8f8:	4798      	blx	r3
	if (status < 0) {
   1c8fa:	1e04      	subs	r4, r0, #0
		LOG_ERR("Failed to set full scale ctrl register.");
   1c8fc:	6833      	ldr	r3, [r6, #0]
	if (status < 0) {
   1c8fe:	da06      	bge.n	1c90e <lis2dh_init+0x15a>
		LOG_ERR("Failed to set full scale ctrl register.");
   1c900:	075d      	lsls	r5, r3, #29
   1c902:	d08c      	beq.n	1c81e <lis2dh_init+0x6a>
   1c904:	466d      	mov	r5, sp
   1c906:	b088      	sub	sp, #32
   1c908:	466a      	mov	r2, sp
   1c90a:	4b1b      	ldr	r3, [pc, #108]	; (1c978 <lis2dh_init+0x1c4>)
   1c90c:	e7c2      	b.n	1c894 <lis2dh_init+0xe0>
	LOG_INF("fs=%d, odr=0x%x lp_en=0x%x scale=%d", 1 << (LIS2DH_FS_IDX + 1), LIS2DH_ODR_IDX,
   1c90e:	f003 0307 	and.w	r3, r3, #7
   1c912:	2b02      	cmp	r3, #2
   1c914:	d917      	bls.n	1c946 <lis2dh_init+0x192>
   1c916:	466c      	mov	r4, sp
   1c918:	b08c      	sub	sp, #48	; 0x30
   1c91a:	f8d8 1010 	ldr.w	r1, [r8, #16]
   1c91e:	466a      	mov	r2, sp
   1c920:	4b16      	ldr	r3, [pc, #88]	; (1c97c <lis2dh_init+0x1c8>)
   1c922:	6153      	str	r3, [r2, #20]
   1c924:	4b0e      	ldr	r3, [pc, #56]	; (1c960 <lis2dh_init+0x1ac>)
   1c926:	6193      	str	r3, [r2, #24]
   1c928:	2002      	movs	r0, #2
   1c92a:	2304      	movs	r3, #4
   1c92c:	e9c2 0307 	strd	r0, r3, [r2, #28]
   1c930:	2300      	movs	r3, #0
   1c932:	e9c2 3109 	strd	r3, r1, [r2, #36]	; 0x24
   1c936:	f842 9f10 	str.w	r9, [r2, #16]!
   1c93a:	4807      	ldr	r0, [pc, #28]	; (1c958 <lis2dh_init+0x1a4>)
   1c93c:	f44f 5163 	mov.w	r1, #14528	; 0x38c0
   1c940:	f7e7 fc06 	bl	4150 <z_impl_z_log_msg_static_create>
   1c944:	46a5      	mov	sp, r4
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   1c946:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c94a:	2247      	movs	r2, #71	; 0x47
   1c94c:	68db      	ldr	r3, [r3, #12]
   1c94e:	2120      	movs	r1, #32
   1c950:	4628      	mov	r0, r5
   1c952:	4798      	blx	r3
   1c954:	4604      	mov	r4, r0
   1c956:	e762      	b.n	1c81e <lis2dh_init+0x6a>
   1c958:	20000b24 	.word	0x20000b24
   1c95c:	0002db20 	.word	0x0002db20
   1c960:	0002dcb1 	.word	0x0002dcb1
   1c964:	0002db3c 	.word	0x0002db3c
   1c968:	200007ec 	.word	0x200007ec
   1c96c:	0001b694 	.word	0x0001b694
   1c970:	0002db57 	.word	0x0002db57
   1c974:	0002db81 	.word	0x0002db81
   1c978:	0002dba5 	.word	0x0002dba5
   1c97c:	0002dbd1 	.word	0x0002dbd1

0001c980 <lis2dh_attr_set.part.0>:
static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
   1c980:	b598      	push	{r3, r4, r7, lr}
		LOG_WRN("attr_set() not supported on this channel.");
   1c982:	480d      	ldr	r0, [pc, #52]	; (1c9b8 <lis2dh_attr_set.part.0+0x38>)
   1c984:	6803      	ldr	r3, [r0, #0]
   1c986:	f013 0f06 	tst.w	r3, #6
static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
   1c98a:	af00      	add	r7, sp, #0
		LOG_WRN("attr_set() not supported on this channel.");
   1c98c:	d00f      	beq.n	1c9ae <lis2dh_attr_set.part.0+0x2e>
   1c98e:	466c      	mov	r4, sp
   1c990:	b088      	sub	sp, #32
   1c992:	466a      	mov	r2, sp
   1c994:	4b09      	ldr	r3, [pc, #36]	; (1c9bc <lis2dh_attr_set.part.0+0x3c>)
   1c996:	6153      	str	r3, [r2, #20]
   1c998:	4b09      	ldr	r3, [pc, #36]	; (1c9c0 <lis2dh_attr_set.part.0+0x40>)
   1c99a:	6193      	str	r3, [r2, #24]
   1c99c:	2303      	movs	r3, #3
   1c99e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c9a2:	2300      	movs	r3, #0
   1c9a4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c9a8:	f7e7 fbd2 	bl	4150 <z_impl_z_log_msg_static_create>
   1c9ac:	46a5      	mov	sp, r4
}
   1c9ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c9b2:	46bd      	mov	sp, r7
   1c9b4:	bd98      	pop	{r3, r4, r7, pc}
   1c9b6:	bf00      	nop
   1c9b8:	20000b24 	.word	0x20000b24
   1c9bc:	0002dbf9 	.word	0x0002dbf9
   1c9c0:	0002dc77 	.word	0x0002dc77

0001c9c4 <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
   1c9c4:	b5b0      	push	{r4, r5, r7, lr}
	struct lis2dh_data *lis2dh = dev->data;
   1c9c6:	6905      	ldr	r5, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   1c9c8:	686b      	ldr	r3, [r5, #4]
static int lis2dh_fetch_xyz(const struct device *dev,
   1c9ca:	af00      	add	r7, sp, #0
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   1c9cc:	681c      	ldr	r4, [r3, #0]
   1c9ce:	f105 0208 	add.w	r2, r5, #8
   1c9d2:	2307      	movs	r3, #7
   1c9d4:	2127      	movs	r1, #39	; 0x27
   1c9d6:	47a0      	blx	r4
	if (status < 0) {
   1c9d8:	1e04      	subs	r4, r0, #0
   1c9da:	da17      	bge.n	1ca0c <lis2dh_fetch_xyz.constprop.0+0x48>
		LOG_WRN("Could not read accel axis data");
   1c9dc:	480e      	ldr	r0, [pc, #56]	; (1ca18 <lis2dh_fetch_xyz.constprop.0+0x54>)
   1c9de:	6803      	ldr	r3, [r0, #0]
   1c9e0:	f013 0f06 	tst.w	r3, #6
   1c9e4:	d00f      	beq.n	1ca06 <lis2dh_fetch_xyz.constprop.0+0x42>
   1c9e6:	466d      	mov	r5, sp
   1c9e8:	b088      	sub	sp, #32
   1c9ea:	466a      	mov	r2, sp
   1c9ec:	4b0b      	ldr	r3, [pc, #44]	; (1ca1c <lis2dh_fetch_xyz.constprop.0+0x58>)
   1c9ee:	6153      	str	r3, [r2, #20]
   1c9f0:	4b0b      	ldr	r3, [pc, #44]	; (1ca20 <lis2dh_fetch_xyz.constprop.0+0x5c>)
   1c9f2:	6193      	str	r3, [r2, #24]
   1c9f4:	2303      	movs	r3, #3
   1c9f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1c9fa:	2300      	movs	r3, #0
   1c9fc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ca00:	f7e7 fba6 	bl	4150 <z_impl_z_log_msg_static_create>
   1ca04:	46ad      	mov	sp, r5
}
   1ca06:	4620      	mov	r0, r4
   1ca08:	46bd      	mov	sp, r7
   1ca0a:	bdb0      	pop	{r4, r5, r7, pc}
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
   1ca0c:	7a2b      	ldrb	r3, [r5, #8]
		status = 0;
   1ca0e:	f013 0f0f 	tst.w	r3, #15
   1ca12:	bf18      	it	ne
   1ca14:	2400      	movne	r4, #0
   1ca16:	e7f6      	b.n	1ca06 <lis2dh_fetch_xyz.constprop.0+0x42>
   1ca18:	20000b24 	.word	0x20000b24
   1ca1c:	0002dc27 	.word	0x0002dc27
   1ca20:	0002dca0 	.word	0x0002dca0

0001ca24 <lis2dh_sample_fetch>:
{
   1ca24:	b598      	push	{r3, r4, r7, lr}
	if (chan == SENSOR_CHAN_ALL) {
   1ca26:	2939      	cmp	r1, #57	; 0x39
{
   1ca28:	af00      	add	r7, sp, #0
	if (chan == SENSOR_CHAN_ALL) {
   1ca2a:	d103      	bne.n	1ca34 <lis2dh_sample_fetch+0x10>
		status = lis2dh_fetch_xyz(dev, chan);
   1ca2c:	f7ff ffca 	bl	1c9c4 <lis2dh_fetch_xyz.constprop.0>
}
   1ca30:	46bd      	mov	sp, r7
   1ca32:	bd98      	pop	{r3, r4, r7, pc}
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
   1ca34:	2903      	cmp	r1, #3
   1ca36:	d0f9      	beq.n	1ca2c <lis2dh_sample_fetch+0x8>
	} else if (chan == SENSOR_CHAN_DIE_TEMP) {
   1ca38:	290c      	cmp	r1, #12
   1ca3a:	d118      	bne.n	1ca6e <lis2dh_sample_fetch+0x4a>
	LOG_WRN("Temperature measurement disabled");
   1ca3c:	480d      	ldr	r0, [pc, #52]	; (1ca74 <lis2dh_sample_fetch+0x50>)
   1ca3e:	6803      	ldr	r3, [r0, #0]
   1ca40:	f013 0f06 	tst.w	r3, #6
   1ca44:	d102      	bne.n	1ca4c <lis2dh_sample_fetch+0x28>
		status = lis2dh_sample_fetch_temp(dev);
   1ca46:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ca4a:	e7f1      	b.n	1ca30 <lis2dh_sample_fetch+0xc>
	LOG_WRN("Temperature measurement disabled");
   1ca4c:	466c      	mov	r4, sp
   1ca4e:	b088      	sub	sp, #32
   1ca50:	466a      	mov	r2, sp
   1ca52:	4b09      	ldr	r3, [pc, #36]	; (1ca78 <lis2dh_sample_fetch+0x54>)
   1ca54:	6153      	str	r3, [r2, #20]
   1ca56:	4b09      	ldr	r3, [pc, #36]	; (1ca7c <lis2dh_sample_fetch+0x58>)
   1ca58:	6193      	str	r3, [r2, #24]
   1ca5a:	2303      	movs	r3, #3
   1ca5c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ca60:	2300      	movs	r3, #0
   1ca62:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ca66:	f7e7 fb73 	bl	4150 <z_impl_z_log_msg_static_create>
   1ca6a:	46a5      	mov	sp, r4
   1ca6c:	e7eb      	b.n	1ca46 <lis2dh_sample_fetch+0x22>
	int status = -ENODATA;
   1ca6e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	return status;
   1ca72:	e7dd      	b.n	1ca30 <lis2dh_sample_fetch+0xc>
   1ca74:	20000b24 	.word	0x20000b24
   1ca78:	0002dc4a 	.word	0x0002dc4a
   1ca7c:	0002dc87 	.word	0x0002dc87

0001ca80 <lis2dh_i2c_init>:
	.write_reg  = lis2dh_i2c_write_reg,
	.update_reg = lis2dh_i2c_update_reg,
};

int lis2dh_i2c_init(const struct device *dev)
{
   1ca80:	b598      	push	{r3, r4, r7, lr}
	struct lis2dh_data *data = dev->data;
	const struct lis2dh_config *cfg = dev->config;

	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
   1ca82:	6843      	ldr	r3, [r0, #4]
	struct lis2dh_data *data = dev->data;
   1ca84:	6904      	ldr	r4, [r0, #16]
	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
   1ca86:	6858      	ldr	r0, [r3, #4]
{
   1ca88:	af00      	add	r7, sp, #0
   1ca8a:	f009 ff2d 	bl	268e8 <z_device_is_ready>
	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
   1ca8e:	4603      	mov	r3, r0
   1ca90:	b9b8      	cbnz	r0, 1cac2 <lis2dh_i2c_init+0x42>
		LOG_ERR("Bus device is not ready");
   1ca92:	480e      	ldr	r0, [pc, #56]	; (1cacc <lis2dh_i2c_init+0x4c>)
   1ca94:	6802      	ldr	r2, [r0, #0]
   1ca96:	0752      	lsls	r2, r2, #29
   1ca98:	d103      	bne.n	1caa2 <lis2dh_i2c_init+0x22>
		return -ENODEV;
   1ca9a:	f06f 0012 	mvn.w	r0, #18
	}

	data->hw_tf = &lis2dh_i2c_transfer_fn;

	return 0;
}
   1ca9e:	46bd      	mov	sp, r7
   1caa0:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Bus device is not ready");
   1caa2:	466c      	mov	r4, sp
   1caa4:	b088      	sub	sp, #32
   1caa6:	466a      	mov	r2, sp
   1caa8:	4909      	ldr	r1, [pc, #36]	; (1cad0 <lis2dh_i2c_init+0x50>)
   1caaa:	6151      	str	r1, [r2, #20]
   1caac:	4909      	ldr	r1, [pc, #36]	; (1cad4 <lis2dh_i2c_init+0x54>)
   1caae:	6191      	str	r1, [r2, #24]
   1cab0:	2103      	movs	r1, #3
   1cab2:	f842 1f10 	str.w	r1, [r2, #16]!
   1cab6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1caba:	f7e7 fb49 	bl	4150 <z_impl_z_log_msg_static_create>
   1cabe:	46a5      	mov	sp, r4
   1cac0:	e7eb      	b.n	1ca9a <lis2dh_i2c_init+0x1a>
	data->hw_tf = &lis2dh_i2c_transfer_fn;
   1cac2:	4b05      	ldr	r3, [pc, #20]	; (1cad8 <lis2dh_i2c_init+0x58>)
   1cac4:	6063      	str	r3, [r4, #4]
	return 0;
   1cac6:	2000      	movs	r0, #0
   1cac8:	e7e9      	b.n	1ca9e <lis2dh_i2c_init+0x1e>
   1caca:	bf00      	nop
   1cacc:	20000b24 	.word	0x20000b24
   1cad0:	0002dcd0 	.word	0x0002dcd0
   1cad4:	0002dcec 	.word	0x0002dcec
   1cad8:	00029a04 	.word	0x00029a04

0001cadc <lps22hb_channel_get>:
}

static int lps22hb_channel_get(const struct device *dev,
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
   1cadc:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
   1cade:	290e      	cmp	r1, #14
	struct lps22hb_data *data = dev->data;
   1cae0:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
   1cae2:	d111      	bne.n	1cb08 <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
   1cae4:	6819      	ldr	r1, [r3, #0]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   1cae6:	4c11      	ldr	r4, [pc, #68]	; (1cb2c <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
   1cae8:	130b      	asrs	r3, r1, #12
   1caea:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   1caec:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
   1caf0:	fb93 f0f5 	sdiv	r0, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   1caf4:	fb05 3310 	mls	r3, r5, r0, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   1caf8:	4361      	muls	r1, r4
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   1cafa:	4363      	muls	r3, r4
   1cafc:	eb03 3311 	add.w	r3, r3, r1, lsr #12
   1cb00:	e9c2 0300 	strd	r0, r3, [r2]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
   1cb04:	2000      	movs	r0, #0
}
   1cb06:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   1cb08:	290d      	cmp	r1, #13
   1cb0a:	d10c      	bne.n	1cb26 <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
   1cb0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	val->val1 = raw_val / 100;
   1cb10:	2464      	movs	r4, #100	; 0x64
   1cb12:	fb93 f1f4 	sdiv	r1, r3, r4
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   1cb16:	fb04 3311 	mls	r3, r4, r1, r3
	val->val1 = raw_val / 100;
   1cb1a:	b208      	sxth	r0, r1
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   1cb1c:	f242 7110 	movw	r1, #10000	; 0x2710
   1cb20:	fb13 f301 	smulbb	r3, r3, r1
}
   1cb24:	e7ec      	b.n	1cb00 <lps22hb_channel_get+0x24>
		return -ENOTSUP;
   1cb26:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cb2a:	e7ec      	b.n	1cb06 <lps22hb_channel_get+0x2a>
   1cb2c:	000186a0 	.word	0x000186a0

0001cb30 <lps22hb_init.part.0>:

err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
   1cb30:	b598      	push	{r3, r4, r7, lr}
{
	const struct lps22hb_config * const config = dev->config;

	if (!device_is_ready(config->i2c.bus)) {
		LOG_ERR("I2C bus device not ready");
   1cb32:	480c      	ldr	r0, [pc, #48]	; (1cb64 <lps22hb_init.part.0+0x34>)
   1cb34:	6803      	ldr	r3, [r0, #0]
   1cb36:	075b      	lsls	r3, r3, #29
static int lps22hb_init(const struct device *dev)
   1cb38:	af00      	add	r7, sp, #0
		LOG_ERR("I2C bus device not ready");
   1cb3a:	d00f      	beq.n	1cb5c <lps22hb_init.part.0+0x2c>
   1cb3c:	466c      	mov	r4, sp
   1cb3e:	b088      	sub	sp, #32
   1cb40:	466a      	mov	r2, sp
   1cb42:	4b09      	ldr	r3, [pc, #36]	; (1cb68 <lps22hb_init.part.0+0x38>)
   1cb44:	6153      	str	r3, [r2, #20]
   1cb46:	4b09      	ldr	r3, [pc, #36]	; (1cb6c <lps22hb_init.part.0+0x3c>)
   1cb48:	6193      	str	r3, [r2, #24]
   1cb4a:	2303      	movs	r3, #3
   1cb4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb50:	2300      	movs	r3, #0
   1cb52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cb56:	f7e7 fafb 	bl	4150 <z_impl_z_log_msg_static_create>
   1cb5a:	46a5      	mov	sp, r4
		LOG_DBG("Failed to initialize chip");
		return -EIO;
	}

	return 0;
}
   1cb5c:	f06f 0012 	mvn.w	r0, #18
   1cb60:	46bd      	mov	sp, r7
   1cb62:	bd98      	pop	{r3, r4, r7, pc}
   1cb64:	20000ac8 	.word	0x20000ac8
   1cb68:	0002d748 	.word	0x0002d748
   1cb6c:	0002dcfc 	.word	0x0002dcfc

0001cb70 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   1cb70:	4b01      	ldr	r3, [pc, #4]	; (1cb78 <hfclk_on_callback+0x8>)
   1cb72:	2201      	movs	r2, #1
   1cb74:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   1cb76:	4770      	bx	lr
   1cb78:	4000c000 	.word	0x4000c000

0001cb7c <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1cb7c:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   1cb7e:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1cb80:	d10b      	bne.n	1cb9a <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   1cb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb84:	4906      	ldr	r1, [pc, #24]	; (1cba0 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   1cb86:	4807      	ldr	r0, [pc, #28]	; (1cba4 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   1cb88:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
   1cb8a:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
   1cb8e:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
   1cb92:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
   1cb94:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   1cb96:	2000      	movs	r0, #0
   1cb98:	4770      	bx	lr
		return -ENOTSUP;
   1cb9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1cb9e:	4770      	bx	lr
   1cba0:	0003d090 	.word	0x0003d090
   1cba4:	000f4240 	.word	0x000f4240

0001cba8 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cba8:	4b04      	ldr	r3, [pc, #16]	; (1cbbc <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   1cbaa:	6900      	ldr	r0, [r0, #16]
   1cbac:	2200      	movs	r2, #0
   1cbae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1cbb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
   1cbb6:	f003 b8b9 	b.w	1fd2c <z_impl_k_sem_give>
   1cbba:	bf00      	nop
   1cbbc:	4000c000 	.word	0x4000c000

0001cbc0 <temp_nrf5_sample_fetch>:
{
   1cbc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   1cbc2:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   1cbc4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1cbc6:	b363      	cbz	r3, 1cc22 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   1cbc8:	2939      	cmp	r1, #57	; 0x39
   1cbca:	d001      	beq.n	1cbd0 <temp_nrf5_sample_fetch+0x10>
   1cbcc:	290c      	cmp	r1, #12
   1cbce:	d12b      	bne.n	1cc28 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
   1cbd0:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   1cbd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cbd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cbdc:	4630      	mov	r0, r6
   1cbde:	f002 ffb9 	bl	1fb54 <z_impl_k_mutex_lock>
	*notify = (struct sys_notify){
   1cbe2:	4b13      	ldr	r3, [pc, #76]	; (1cc30 <temp_nrf5_sample_fetch+0x70>)
   1cbe4:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   1cbe6:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1cbe8:	2303      	movs	r3, #3
   1cbea:	2400      	movs	r4, #0
   1cbec:	4669      	mov	r1, sp
   1cbee:	9403      	str	r4, [sp, #12]
   1cbf0:	9302      	str	r3, [sp, #8]
   1cbf2:	f004 fbcd 	bl	21390 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   1cbf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cbfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cbfe:	4628      	mov	r0, r5
   1cc00:	f003 f8ba 	bl	1fd78 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   1cc04:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1cc06:	f004 fc1b 	bl	21440 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   1cc0a:	4b0a      	ldr	r3, [pc, #40]	; (1cc34 <temp_nrf5_sample_fetch+0x74>)
   1cc0c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   1cc10:	62ea      	str	r2, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   1cc12:	2201      	movs	r2, #1
   1cc14:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
   1cc16:	4630      	mov	r0, r6
   1cc18:	f003 f816 	bl	1fc48 <z_impl_k_mutex_unlock>
	return 0;
   1cc1c:	4620      	mov	r0, r4
}
   1cc1e:	b004      	add	sp, #16
   1cc20:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1cc22:	f06f 000a 	mvn.w	r0, #10
   1cc26:	e7fa      	b.n	1cc1e <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
   1cc28:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cc2c:	e7f7      	b.n	1cc1e <temp_nrf5_sample_fetch+0x5e>
   1cc2e:	bf00      	nop
   1cc30:	0001cb71 	.word	0x0001cb71
   1cc34:	4000c000 	.word	0x4000c000

0001cc38 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   1cc38:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   1cc3a:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1cc3c:	2000      	movs	r0, #0
   1cc3e:	f7fe fa97 	bl	1b170 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   1cc42:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cc44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cc48:	2100      	movs	r1, #0
   1cc4a:	4620      	mov	r0, r4
   1cc4c:	f00a f818 	bl	26c80 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   1cc50:	f104 0018 	add.w	r0, r4, #24
   1cc54:	f009 ff54 	bl	26b00 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   1cc58:	2200      	movs	r2, #0
   1cc5a:	2101      	movs	r1, #1
   1cc5c:	200c      	movs	r0, #12
   1cc5e:	f7ea fac1 	bl	71e4 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   1cc62:	200c      	movs	r0, #12
   1cc64:	f7ea fa8e 	bl	7184 <arch_irq_enable>
    p_reg->INTENSET = mask;
   1cc68:	4b02      	ldr	r3, [pc, #8]	; (1cc74 <temp_nrf5_init+0x3c>)
   1cc6a:	2201      	movs	r2, #1
   1cc6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   1cc70:	2000      	movs	r0, #0
   1cc72:	bd10      	pop	{r4, pc}
   1cc74:	4000c000 	.word	0x4000c000

0001cc78 <attribute_name_get>:

static void attribute_name_get(size_t idx, struct shell_static_entry *entry)
{
	int cnt = 0;

	entry->syntax = NULL;
   1cc78:	2300      	movs	r3, #0
	entry->handler = NULL;
	entry->help = NULL;
	entry->subcmd = &dsub_channel_name;
   1cc7a:	4a0a      	ldr	r2, [pc, #40]	; (1cca4 <attribute_name_get+0x2c>)
   1cc7c:	608a      	str	r2, [r1, #8]
{
   1cc7e:	b530      	push	{r4, r5, lr}
   1cc80:	4c09      	ldr	r4, [pc, #36]	; (1cca8 <attribute_name_get+0x30>)
	entry->syntax = NULL;
   1cc82:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   1cc84:	60cb      	str	r3, [r1, #12]
	entry->help = NULL;
   1cc86:	604b      	str	r3, [r1, #4]
	int cnt = 0;
   1cc88:	461a      	mov	r2, r3

	for (int i = 0; i < SENSOR_ATTR_COMMON_COUNT; i++) {
		if (sensor_attribute_name[i] != NULL) {
   1cc8a:	f854 5b04 	ldr.w	r5, [r4], #4
   1cc8e:	b125      	cbz	r5, 1cc9a <attribute_name_get+0x22>
			if (cnt == idx) {
   1cc90:	4282      	cmp	r2, r0
   1cc92:	d101      	bne.n	1cc98 <attribute_name_get+0x20>
				entry->syntax = sensor_attribute_name[i];
   1cc94:	600d      	str	r5, [r1, #0]
				break;
			}
			cnt++;
		}
	}
}
   1cc96:	bd30      	pop	{r4, r5, pc}
			cnt++;
   1cc98:	3201      	adds	r2, #1
	for (int i = 0; i < SENSOR_ATTR_COMMON_COUNT; i++) {
   1cc9a:	3301      	adds	r3, #1
   1cc9c:	2b0f      	cmp	r3, #15
   1cc9e:	d1f4      	bne.n	1cc8a <attribute_name_get+0x12>
   1cca0:	e7f9      	b.n	1cc96 <attribute_name_get+0x1e>
   1cca2:	bf00      	nop
   1cca4:	00027b14 	.word	0x00027b14
   1cca8:	200007fc 	.word	0x200007fc

0001ccac <channel_name_get>:
SHELL_DYNAMIC_CMD_CREATE(dsub_attribute_name, attribute_name_get);

static void channel_name_get(size_t idx, struct shell_static_entry *entry)
{
   1ccac:	b530      	push	{r4, r5, lr}
	int cnt = 0;

	entry->syntax = NULL;
   1ccae:	2300      	movs	r3, #0
   1ccb0:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   1ccb2:	60cb      	str	r3, [r1, #12]
	entry->help = NULL;
   1ccb4:	604b      	str	r3, [r1, #4]
	if (current_cmd_ctx == CTX_GET) {
   1ccb6:	4b0d      	ldr	r3, [pc, #52]	; (1ccec <channel_name_get+0x40>)
   1ccb8:	781b      	ldrb	r3, [r3, #0]
   1ccba:	2b01      	cmp	r3, #1
   1ccbc:	d00e      	beq.n	1ccdc <channel_name_get+0x30>
		entry->subcmd = &dsub_channel_name;
	} else if (current_cmd_ctx == CTX_ATTR_GET_SET) {
   1ccbe:	2b02      	cmp	r3, #2
   1ccc0:	4b0b      	ldr	r3, [pc, #44]	; (1ccf0 <channel_name_get+0x44>)
   1ccc2:	bf18      	it	ne
   1ccc4:	2300      	movne	r3, #0
		entry->subcmd = &dsub_channel_name;
   1ccc6:	608b      	str	r3, [r1, #8]
		entry->subcmd = &dsub_attribute_name;
	} else {
		entry->subcmd = NULL;
	}

	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
   1ccc8:	4c0a      	ldr	r4, [pc, #40]	; (1ccf4 <channel_name_get+0x48>)
   1ccca:	2300      	movs	r3, #0
	int cnt = 0;
   1cccc:	461a      	mov	r2, r3
		if (sensor_channel_name[i] != NULL) {
   1ccce:	f854 5b04 	ldr.w	r5, [r4], #4
   1ccd2:	b135      	cbz	r5, 1cce2 <channel_name_get+0x36>
			if (cnt == idx) {
   1ccd4:	4282      	cmp	r2, r0
   1ccd6:	d103      	bne.n	1cce0 <channel_name_get+0x34>
				entry->syntax = sensor_channel_name[i];
   1ccd8:	600d      	str	r5, [r1, #0]
				break;
			}
			cnt++;
		}
	}
}
   1ccda:	bd30      	pop	{r4, r5, pc}
   1ccdc:	4b06      	ldr	r3, [pc, #24]	; (1ccf8 <channel_name_get+0x4c>)
   1ccde:	e7f2      	b.n	1ccc6 <channel_name_get+0x1a>
			cnt++;
   1cce0:	3201      	adds	r2, #1
	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
   1cce2:	3301      	adds	r3, #1
   1cce4:	2b39      	cmp	r3, #57	; 0x39
   1cce6:	d1f2      	bne.n	1ccce <channel_name_get+0x22>
   1cce8:	e7f7      	b.n	1ccda <channel_name_get+0x2e>
   1ccea:	bf00      	nop
   1ccec:	20003bff 	.word	0x20003bff
   1ccf0:	00027b10 	.word	0x00027b10
   1ccf4:	20000838 	.word	0x20000838
   1ccf8:	00027b14 	.word	0x00027b14

0001ccfc <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
   1ccfc:	b510      	push	{r4, lr}
   1ccfe:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
   1cd00:	2100      	movs	r1, #0
   1cd02:	f005 fd9a 	bl	2283a <shell_device_lookup>

	current_cmd_ctx = CTX_GET;
   1cd06:	4b06      	ldr	r3, [pc, #24]	; (1cd20 <device_name_get+0x24>)
   1cd08:	2201      	movs	r2, #1
   1cd0a:	701a      	strb	r2, [r3, #0]
	entry->syntax = (dev != NULL) ? dev->name : NULL;
   1cd0c:	b100      	cbz	r0, 1cd10 <device_name_get+0x14>
   1cd0e:	6800      	ldr	r0, [r0, #0]
   1cd10:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
   1cd12:	2300      	movs	r3, #0
   1cd14:	60e3      	str	r3, [r4, #12]
	entry->help = NULL;
   1cd16:	6063      	str	r3, [r4, #4]
	entry->subcmd = &dsub_channel_name;
   1cd18:	4b02      	ldr	r3, [pc, #8]	; (1cd24 <device_name_get+0x28>)
   1cd1a:	60a3      	str	r3, [r4, #8]
}
   1cd1c:	bd10      	pop	{r4, pc}
   1cd1e:	bf00      	nop
   1cd20:	20003bff 	.word	0x20003bff
   1cd24:	00027b14 	.word	0x00027b14

0001cd28 <device_name_get_for_attr>:

static void device_name_get_for_attr(size_t idx, struct shell_static_entry *entry)
{
   1cd28:	b510      	push	{r4, lr}
   1cd2a:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
   1cd2c:	2100      	movs	r1, #0
   1cd2e:	f005 fd84 	bl	2283a <shell_device_lookup>

	current_cmd_ctx = CTX_ATTR_GET_SET;
   1cd32:	4b06      	ldr	r3, [pc, #24]	; (1cd4c <device_name_get_for_attr+0x24>)
   1cd34:	2202      	movs	r2, #2
   1cd36:	701a      	strb	r2, [r3, #0]
	entry->syntax = (dev != NULL) ? dev->name : NULL;
   1cd38:	b100      	cbz	r0, 1cd3c <device_name_get_for_attr+0x14>
   1cd3a:	6800      	ldr	r0, [r0, #0]
   1cd3c:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
   1cd3e:	2300      	movs	r3, #0
   1cd40:	60e3      	str	r3, [r4, #12]
	entry->help = NULL;
   1cd42:	6063      	str	r3, [r4, #4]
	entry->subcmd = &dsub_channel_name;
   1cd44:	4b02      	ldr	r3, [pc, #8]	; (1cd50 <device_name_get_for_attr+0x28>)
   1cd46:	60a3      	str	r3, [r4, #8]
}
   1cd48:	bd10      	pop	{r4, pc}
   1cd4a:	bf00      	nop
   1cd4c:	20003bff 	.word	0x20003bff
   1cd50:	00027b14 	.word	0x00027b14

0001cd54 <cmd_sensor_attr_get>:
{
   1cd54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd58:	4606      	mov	r6, r0
   1cd5a:	460f      	mov	r7, r1
	dev = device_get_binding(argv[1]);
   1cd5c:	6850      	ldr	r0, [r2, #4]
{
   1cd5e:	4614      	mov	r4, r2
   1cd60:	f002 fb22 	bl	1f3a8 <z_impl_device_get_binding>
	if (dev == NULL) {
   1cd64:	4605      	mov	r5, r0
   1cd66:	b950      	cbnz	r0, 1cd7e <cmd_sensor_attr_get+0x2a>
		shell_error(shell_ptr, "Device unknown (%s)", argv[1]);
   1cd68:	4630      	mov	r0, r6
   1cd6a:	6863      	ldr	r3, [r4, #4]
   1cd6c:	4a1b      	ldr	r2, [pc, #108]	; (1cddc <cmd_sensor_attr_get+0x88>)
   1cd6e:	2101      	movs	r1, #1
   1cd70:	f005 fb10 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1cd74:	f06f 0012 	mvn.w	r0, #18
}
   1cd78:	b003      	add	sp, #12
   1cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (argc > 2) {
   1cd7e:	2f02      	cmp	r7, #2
   1cd80:	d927      	bls.n	1cdd2 <cmd_sensor_attr_get+0x7e>
		for (size_t i = 2; i < argc; i += 2) {
   1cd82:	f04f 0802 	mov.w	r8, #2
			cmd_sensor_attr_get_handler(shell_ptr, dev, argv[i], argv[i + 1],
   1cd86:	f04f 0901 	mov.w	r9, #1
   1cd8a:	f8cd 9000 	str.w	r9, [sp]
   1cd8e:	68e3      	ldr	r3, [r4, #12]
   1cd90:	f854 2f08 	ldr.w	r2, [r4, #8]!
   1cd94:	4629      	mov	r1, r5
   1cd96:	4630      	mov	r0, r6
		for (size_t i = 2; i < argc; i += 2) {
   1cd98:	f108 0802 	add.w	r8, r8, #2
			cmd_sensor_attr_get_handler(shell_ptr, dev, argv[i], argv[i + 1],
   1cd9c:	f7e5 f848 	bl	1e30 <cmd_sensor_attr_get_handler>
		for (size_t i = 2; i < argc; i += 2) {
   1cda0:	4547      	cmp	r7, r8
   1cda2:	d8f2      	bhi.n	1cd8a <cmd_sensor_attr_get+0x36>
	return 0;
   1cda4:	2000      	movs	r0, #0
   1cda6:	e7e7      	b.n	1cd78 <cmd_sensor_attr_get+0x24>
				cmd_sensor_attr_get_handler(shell_ptr, dev,
   1cda8:	f8cd b000 	str.w	fp, [sp]
   1cdac:	f857 3b04 	ldr.w	r3, [r7], #4
   1cdb0:	f8d8 2000 	ldr.w	r2, [r8]
   1cdb4:	4629      	mov	r1, r5
   1cdb6:	4630      	mov	r0, r6
   1cdb8:	f7e5 f83a 	bl	1e30 <cmd_sensor_attr_get_handler>
			for (size_t attr_idx = 0; attr_idx < ARRAY_SIZE(sensor_attribute_name);
   1cdbc:	4557      	cmp	r7, sl
   1cdbe:	d1f3      	bne.n	1cda8 <cmd_sensor_attr_get+0x54>
		     ++channel_idx) {
   1cdc0:	3401      	adds	r4, #1
		for (size_t channel_idx = 0; channel_idx < ARRAY_SIZE(sensor_channel_name);
   1cdc2:	2c39      	cmp	r4, #57	; 0x39
   1cdc4:	d0ee      	beq.n	1cda4 <cmd_sensor_attr_get+0x50>
			for (size_t attr_idx = 0; attr_idx < ARRAY_SIZE(sensor_attribute_name);
   1cdc6:	4f06      	ldr	r7, [pc, #24]	; (1cde0 <cmd_sensor_attr_get+0x8c>)
				cmd_sensor_attr_get_handler(shell_ptr, dev,
   1cdc8:	eb09 0884 	add.w	r8, r9, r4, lsl #2
   1cdcc:	f107 0a3c 	add.w	sl, r7, #60	; 0x3c
   1cdd0:	e7ea      	b.n	1cda8 <cmd_sensor_attr_get+0x54>
		for (size_t channel_idx = 0; channel_idx < ARRAY_SIZE(sensor_channel_name);
   1cdd2:	2400      	movs	r4, #0
				cmd_sensor_attr_get_handler(shell_ptr, dev,
   1cdd4:	f8df 900c 	ldr.w	r9, [pc, #12]	; 1cde4 <cmd_sensor_attr_get+0x90>
   1cdd8:	46a3      	mov	fp, r4
   1cdda:	e7f4      	b.n	1cdc6 <cmd_sensor_attr_get+0x72>
   1cddc:	0002ddb9 	.word	0x0002ddb9
   1cde0:	200007fc 	.word	0x200007fc
   1cde4:	20000838 	.word	0x20000838

0001cde8 <cmd_sensor_attr_set>:
{
   1cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdec:	b08d      	sub	sp, #52	; 0x34
   1cdee:	4605      	mov	r5, r0
   1cdf0:	9106      	str	r1, [sp, #24]
	dev = device_get_binding(argv[1]);
   1cdf2:	6850      	ldr	r0, [r2, #4]
{
   1cdf4:	4614      	mov	r4, r2
   1cdf6:	f002 fad7 	bl	1f3a8 <z_impl_device_get_binding>
	if (dev == NULL) {
   1cdfa:	4606      	mov	r6, r0
   1cdfc:	b160      	cbz	r0, 1ce18 <cmd_sensor_attr_set+0x30>
	for (size_t i = 2; i < argc; i += 3) {
   1cdfe:	2302      	movs	r3, #2
		int channel = parse_named_int(argv[i], sensor_channel_name,
   1ce00:	f8df a12c 	ldr.w	sl, [pc, #300]	; 1cf30 <cmd_sensor_attr_set+0x148>
		int attr = parse_named_int(argv[i + 1], sensor_attribute_name,
   1ce04:	f8df b12c 	ldr.w	fp, [pc, #300]	; 1cf34 <cmd_sensor_attr_set+0x14c>
	for (size_t i = 2; i < argc; i += 3) {
   1ce08:	9304      	str	r3, [sp, #16]
   1ce0a:	3408      	adds	r4, #8
   1ce0c:	9b04      	ldr	r3, [sp, #16]
   1ce0e:	9a06      	ldr	r2, [sp, #24]
   1ce10:	4293      	cmp	r3, r2
   1ce12:	d30c      	bcc.n	1ce2e <cmd_sensor_attr_set+0x46>
	return 0;
   1ce14:	2000      	movs	r0, #0
   1ce16:	e007      	b.n	1ce28 <cmd_sensor_attr_set+0x40>
		shell_error(shell_ptr, "Device unknown (%s)", argv[1]);
   1ce18:	4628      	mov	r0, r5
   1ce1a:	6863      	ldr	r3, [r4, #4]
   1ce1c:	4a46      	ldr	r2, [pc, #280]	; (1cf38 <cmd_sensor_attr_set+0x150>)
   1ce1e:	2101      	movs	r1, #1
   1ce20:	f005 fab8 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1ce24:	f06f 0012 	mvn.w	r0, #18
}
   1ce28:	b00d      	add	sp, #52	; 0x34
   1ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int channel = parse_named_int(argv[i], sensor_channel_name,
   1ce2e:	2239      	movs	r2, #57	; 0x39
   1ce30:	4651      	mov	r1, sl
   1ce32:	6820      	ldr	r0, [r4, #0]
   1ce34:	f009 f9db 	bl	261ee <parse_named_int>
		int attr = parse_named_int(argv[i + 1], sensor_attribute_name,
   1ce38:	220f      	movs	r2, #15
		int channel = parse_named_int(argv[i], sensor_channel_name,
   1ce3a:	4607      	mov	r7, r0
		int attr = parse_named_int(argv[i + 1], sensor_attribute_name,
   1ce3c:	4659      	mov	r1, fp
   1ce3e:	6860      	ldr	r0, [r4, #4]
   1ce40:	f009 f9d5 	bl	261ee <parse_named_int>
		struct sensor_value value = {0};
   1ce44:	2200      	movs	r2, #0
		if (channel < 0) {
   1ce46:	4297      	cmp	r7, r2
		struct sensor_value value = {0};
   1ce48:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
		int attr = parse_named_int(argv[i + 1], sensor_attribute_name,
   1ce4c:	4680      	mov	r8, r0
		if (channel < 0) {
   1ce4e:	da08      	bge.n	1ce62 <cmd_sensor_attr_set+0x7a>
			shell_error(shell_ptr, "Channel '%s' unknown", argv[i]);
   1ce50:	6823      	ldr	r3, [r4, #0]
   1ce52:	4a3a      	ldr	r2, [pc, #232]	; (1cf3c <cmd_sensor_attr_set+0x154>)
			shell_error(shell_ptr, "Sensor value '%s' invalid", argv[i + 2]);
   1ce54:	4628      	mov	r0, r5
   1ce56:	2101      	movs	r1, #1
   1ce58:	f005 fa9c 	bl	22394 <shell_fprintf>
			return -EINVAL;
   1ce5c:	f06f 0015 	mvn.w	r0, #21
   1ce60:	e7e2      	b.n	1ce28 <cmd_sensor_attr_set+0x40>
		if (attr < 0) {
   1ce62:	2800      	cmp	r0, #0
   1ce64:	da02      	bge.n	1ce6c <cmd_sensor_attr_set+0x84>
			shell_error(shell_ptr, "Attribute '%s' unknown", argv[i + 1]);
   1ce66:	6863      	ldr	r3, [r4, #4]
   1ce68:	4a35      	ldr	r2, [pc, #212]	; (1cf40 <cmd_sensor_attr_set+0x158>)
   1ce6a:	e7f3      	b.n	1ce54 <cmd_sensor_attr_set+0x6c>
		if (parse_sensor_value(argv[i + 2], &value)) {
   1ce6c:	68a3      	ldr	r3, [r4, #8]
	const char *decimal_pos = strchr(val_str, '.');
   1ce6e:	9307      	str	r3, [sp, #28]
	const bool is_negative = val_str[0] == '-';
   1ce70:	781a      	ldrb	r2, [r3, #0]
   1ce72:	9205      	str	r2, [sp, #20]
	const char *decimal_pos = strchr(val_str, '.');
   1ce74:	212e      	movs	r1, #46	; 0x2e
   1ce76:	4618      	mov	r0, r3
   1ce78:	f006 fe63 	bl	23b42 <strchr>
	value = strtol(val_str, &endptr, 0);
   1ce7c:	9b07      	ldr	r3, [sp, #28]
	const char *decimal_pos = strchr(val_str, '.');
   1ce7e:	4681      	mov	r9, r0
	value = strtol(val_str, &endptr, 0);
   1ce80:	2200      	movs	r2, #0
   1ce82:	4618      	mov	r0, r3
   1ce84:	a909      	add	r1, sp, #36	; 0x24
   1ce86:	f006 fd32 	bl	238ee <strtol>
	if (*endptr != '\0' && *endptr != '.') {
   1ce8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ce8c:	781b      	ldrb	r3, [r3, #0]
   1ce8e:	b123      	cbz	r3, 1ce9a <cmd_sensor_attr_set+0xb2>
   1ce90:	2b2e      	cmp	r3, #46	; 0x2e
   1ce92:	d002      	beq.n	1ce9a <cmd_sensor_attr_set+0xb2>
			shell_error(shell_ptr, "Sensor value '%s' invalid", argv[i + 2]);
   1ce94:	68a3      	ldr	r3, [r4, #8]
   1ce96:	4a2b      	ldr	r2, [pc, #172]	; (1cf44 <cmd_sensor_attr_set+0x15c>)
   1ce98:	e7dc      	b.n	1ce54 <cmd_sensor_attr_set+0x6c>
	out->val1 = (int32_t)value;
   1ce9a:	900a      	str	r0, [sp, #40]	; 0x28
	if (decimal_pos == NULL) {
   1ce9c:	f1b9 0f00 	cmp.w	r9, #0
   1cea0:	d015      	beq.n	1cece <cmd_sensor_attr_set+0xe6>
	value = strtoul(decimal_pos + 1, &endptr, 0);
   1cea2:	2200      	movs	r2, #0
   1cea4:	a909      	add	r1, sp, #36	; 0x24
   1cea6:	f109 0001 	add.w	r0, r9, #1
   1ceaa:	f006 fd95 	bl	239d8 <strtoul>
	if (*endptr != '\0') {
   1ceae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ceb0:	781b      	ldrb	r3, [r3, #0]
   1ceb2:	2b00      	cmp	r3, #0
   1ceb4:	d1ee      	bne.n	1ce94 <cmd_sensor_attr_set+0xac>
		value *= 10;
   1ceb6:	230a      	movs	r3, #10
	while (value < 100000) {
   1ceb8:	4a23      	ldr	r2, [pc, #140]	; (1cf48 <cmd_sensor_attr_set+0x160>)
   1ceba:	4290      	cmp	r0, r2
   1cebc:	dd24      	ble.n	1cf08 <cmd_sensor_attr_set+0x120>
	if (value > INT32_C(999999)) {
   1cebe:	4b23      	ldr	r3, [pc, #140]	; (1cf4c <cmd_sensor_attr_set+0x164>)
   1cec0:	4298      	cmp	r0, r3
   1cec2:	dce7      	bgt.n	1ce94 <cmd_sensor_attr_set+0xac>
	if (is_negative) {
   1cec4:	9b05      	ldr	r3, [sp, #20]
   1cec6:	2b2d      	cmp	r3, #45	; 0x2d
		out->val2 *= -1;
   1cec8:	bf08      	it	eq
   1ceca:	4240      	negeq	r0, r0
   1cecc:	900b      	str	r0, [sp, #44]	; 0x2c
		rc = sensor_attr_set(dev, channel, attr, &value);
   1cece:	b2b9      	uxth	r1, r7
   1ced0:	fa1f f288 	uxth.w	r2, r8
	if (api->attr_set == NULL) {
   1ced4:	68b3      	ldr	r3, [r6, #8]
   1ced6:	f8d3 9000 	ldr.w	r9, [r3]
   1ceda:	f1b9 0f00 	cmp.w	r9, #0
   1cede:	d015      	beq.n	1cf0c <cmd_sensor_attr_set+0x124>
	return api->attr_set(dev, chan, attr, val);
   1cee0:	ab0a      	add	r3, sp, #40	; 0x28
   1cee2:	4630      	mov	r0, r6
   1cee4:	47c8      	blx	r9
		if (rc) {
   1cee6:	b1a0      	cbz	r0, 1cf12 <cmd_sensor_attr_set+0x12a>
			shell_error(shell_ptr, "Failed to set channel(%s) attribute(%s): %d",
   1cee8:	9001      	str	r0, [sp, #4]
   1ceea:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   1ceee:	9300      	str	r3, [sp, #0]
   1cef0:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
   1cef4:	4a16      	ldr	r2, [pc, #88]	; (1cf50 <cmd_sensor_attr_set+0x168>)
   1cef6:	2101      	movs	r1, #1
   1cef8:	4628      	mov	r0, r5
   1cefa:	f005 fa4b 	bl	22394 <shell_fprintf>
	for (size_t i = 2; i < argc; i += 3) {
   1cefe:	9b04      	ldr	r3, [sp, #16]
   1cf00:	3303      	adds	r3, #3
   1cf02:	9304      	str	r3, [sp, #16]
   1cf04:	340c      	adds	r4, #12
   1cf06:	e781      	b.n	1ce0c <cmd_sensor_attr_set+0x24>
		value *= 10;
   1cf08:	4358      	muls	r0, r3
   1cf0a:	e7d5      	b.n	1ceb8 <cmd_sensor_attr_set+0xd0>
		return -ENOSYS;
   1cf0c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1cf10:	e7ea      	b.n	1cee8 <cmd_sensor_attr_set+0x100>
		shell_info(shell_ptr, "%s channel=%s, attr=%s set to value=%s", dev->name,
   1cf12:	68a3      	ldr	r3, [r4, #8]
   1cf14:	9302      	str	r3, [sp, #8]
   1cf16:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   1cf1a:	9301      	str	r3, [sp, #4]
   1cf1c:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
   1cf20:	9300      	str	r3, [sp, #0]
   1cf22:	6833      	ldr	r3, [r6, #0]
   1cf24:	4a0b      	ldr	r2, [pc, #44]	; (1cf54 <cmd_sensor_attr_set+0x16c>)
   1cf26:	2102      	movs	r1, #2
   1cf28:	4628      	mov	r0, r5
   1cf2a:	f005 fa33 	bl	22394 <shell_fprintf>
   1cf2e:	e7e6      	b.n	1cefe <cmd_sensor_attr_set+0x116>
   1cf30:	20000838 	.word	0x20000838
   1cf34:	200007fc 	.word	0x200007fc
   1cf38:	0002ddb9 	.word	0x0002ddb9
   1cf3c:	0002dd3a 	.word	0x0002dd3a
   1cf40:	0002dd50 	.word	0x0002dd50
   1cf44:	0002de59 	.word	0x0002de59
   1cf48:	0001869f 	.word	0x0001869f
   1cf4c:	000f423f 	.word	0x000f423f
   1cf50:	0002de74 	.word	0x0002de74
   1cf54:	0002dea1 	.word	0x0002dea1

0001cf58 <cmd_get_sensor>:
{
   1cf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cf5c:	4604      	mov	r4, r0
   1cf5e:	4688      	mov	r8, r1
	dev = device_get_binding(argv[1]);
   1cf60:	6850      	ldr	r0, [r2, #4]
{
   1cf62:	4616      	mov	r6, r2
   1cf64:	f002 fa20 	bl	1f3a8 <z_impl_device_get_binding>
	if (dev == NULL) {
   1cf68:	4605      	mov	r5, r0
   1cf6a:	b948      	cbnz	r0, 1cf80 <cmd_get_sensor+0x28>
		shell_error(shell, "Device unknown (%s)", argv[1]);
   1cf6c:	4620      	mov	r0, r4
   1cf6e:	6873      	ldr	r3, [r6, #4]
   1cf70:	4a1d      	ldr	r2, [pc, #116]	; (1cfe8 <cmd_get_sensor+0x90>)
   1cf72:	2101      	movs	r1, #1
   1cf74:	f005 fa0e 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1cf78:	f06f 0012 	mvn.w	r0, #18
}
   1cf7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   1cf80:	6883      	ldr	r3, [r0, #8]
   1cf82:	2139      	movs	r1, #57	; 0x39
   1cf84:	68db      	ldr	r3, [r3, #12]
   1cf86:	4798      	blx	r3
	if (err < 0) {
   1cf88:	1e03      	subs	r3, r0, #0
   1cf8a:	da04      	bge.n	1cf96 <cmd_get_sensor+0x3e>
		shell_error(shell, "Failed to read sensor: %d", err);
   1cf8c:	4a17      	ldr	r2, [pc, #92]	; (1cfec <cmd_get_sensor+0x94>)
   1cf8e:	2101      	movs	r1, #1
   1cf90:	4620      	mov	r0, r4
   1cf92:	f005 f9ff 	bl	22394 <shell_fprintf>
	if (argc == 2) {
   1cf96:	f1b8 0f02 	cmp.w	r8, #2
   1cf9a:	d120      	bne.n	1cfde <cmd_get_sensor+0x86>
   1cf9c:	4f14      	ldr	r7, [pc, #80]	; (1cff0 <cmd_get_sensor+0x98>)
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
   1cf9e:	2600      	movs	r6, #0
			if (sensor_channel_name[i]) {
   1cfa0:	f857 2b04 	ldr.w	r2, [r7], #4
   1cfa4:	b11a      	cbz	r2, 1cfae <cmd_get_sensor+0x56>
				handle_channel_by_name(shell, dev, sensor_channel_name[i]);
   1cfa6:	4629      	mov	r1, r5
   1cfa8:	4620      	mov	r0, r4
   1cfaa:	f7e4 ffc1 	bl	1f30 <handle_channel_by_name>
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
   1cfae:	3601      	adds	r6, #1
   1cfb0:	2e39      	cmp	r6, #57	; 0x39
   1cfb2:	d1f5      	bne.n	1cfa0 <cmd_get_sensor+0x48>
	return 0;
   1cfb4:	2000      	movs	r0, #0
   1cfb6:	e7e1      	b.n	1cf7c <cmd_get_sensor+0x24>
			err = handle_channel_by_name(shell, dev, argv[i]);
   1cfb8:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
   1cfbc:	4629      	mov	r1, r5
   1cfbe:	4620      	mov	r0, r4
   1cfc0:	f7e4 ffb6 	bl	1f30 <handle_channel_by_name>
			if (err < 0) {
   1cfc4:	2800      	cmp	r0, #0
   1cfc6:	da06      	bge.n	1cfd6 <cmd_get_sensor+0x7e>
				shell_error(shell, "Failed to read channel (%s)", argv[i]);
   1cfc8:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   1cfcc:	464a      	mov	r2, r9
   1cfce:	2101      	movs	r1, #1
   1cfd0:	4620      	mov	r0, r4
   1cfd2:	f005 f9df 	bl	22394 <shell_fprintf>
		for (int i = 2; i < argc; i++) {
   1cfd6:	3701      	adds	r7, #1
   1cfd8:	4547      	cmp	r7, r8
   1cfda:	d3ed      	bcc.n	1cfb8 <cmd_get_sensor+0x60>
   1cfdc:	e7ea      	b.n	1cfb4 <cmd_get_sensor+0x5c>
				shell_error(shell, "Failed to read channel (%s)", argv[i]);
   1cfde:	f8df 9014 	ldr.w	r9, [pc, #20]	; 1cff4 <cmd_get_sensor+0x9c>
		for (int i = 2; i < argc; i++) {
   1cfe2:	2702      	movs	r7, #2
   1cfe4:	e7f8      	b.n	1cfd8 <cmd_get_sensor+0x80>
   1cfe6:	bf00      	nop
   1cfe8:	0002ddb9 	.word	0x0002ddb9
   1cfec:	0002dec9 	.word	0x0002dec9
   1cff0:	20000838 	.word	0x20000838
   1cff4:	0002dee4 	.word	0x0002dee4

0001cff8 <regulator_fixed_init>:
	.enable = regulator_fixed_enable,
	.disable = regulator_fixed_disable,
};

static int regulator_fixed_init(const struct device *dev)
{
   1cff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   1cffc:	6844      	ldr	r4, [r0, #4]
{
   1cffe:	af00      	add	r7, sp, #0
   1d000:	4605      	mov	r5, r0
	int ret;

	regulator_common_data_init(dev);
   1d002:	f009 f90f 	bl	26224 <regulator_common_data_init>

	if (!device_is_ready(cfg->enable.port)) {
   1d006:	6a20      	ldr	r0, [r4, #32]
   1d008:	f009 fc6e 	bl	268e8 <z_device_is_ready>
   1d00c:	4603      	mov	r3, r0
   1d00e:	b9d8      	cbnz	r0, 1d048 <regulator_fixed_init+0x50>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
   1d010:	4828      	ldr	r0, [pc, #160]	; (1d0b4 <regulator_fixed_init+0xbc>)
   1d012:	6802      	ldr	r2, [r0, #0]
   1d014:	0751      	lsls	r1, r2, #29
   1d016:	d014      	beq.n	1d042 <regulator_fixed_init+0x4a>
   1d018:	6a22      	ldr	r2, [r4, #32]
   1d01a:	466c      	mov	r4, sp
   1d01c:	b08a      	sub	sp, #40	; 0x28
   1d01e:	6811      	ldr	r1, [r2, #0]
   1d020:	466a      	mov	r2, sp
   1d022:	4d25      	ldr	r5, [pc, #148]	; (1d0b8 <regulator_fixed_init+0xc0>)
   1d024:	6155      	str	r5, [r2, #20]
   1d026:	4d25      	ldr	r5, [pc, #148]	; (1d0bc <regulator_fixed_init+0xc4>)
   1d028:	e9c2 5106 	strd	r5, r1, [r2, #24]
   1d02c:	f240 3101 	movw	r1, #769	; 0x301
   1d030:	8411      	strh	r1, [r2, #32]
   1d032:	4923      	ldr	r1, [pc, #140]	; (1d0c0 <regulator_fixed_init+0xc8>)
   1d034:	f842 1f10 	str.w	r1, [r2, #16]!
   1d038:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d03c:	f7e7 f888 	bl	4150 <z_impl_z_log_msg_static_create>
   1d040:	46a5      	mov	sp, r4
		return -ENODEV;
   1d042:	f06f 0012 	mvn.w	r0, #18
   1d046:	e02d      	b.n	1d0a4 <regulator_fixed_init+0xac>
	return gpio_pin_configure(spec->port,
   1d048:	6a20      	ldr	r0, [r4, #32]
				  spec->pin,
   1d04a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
				  spec->dt_flags | extra_flags);
   1d04e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	struct gpio_driver_data *data =
   1d050:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   1d054:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d058:	f8de 6000 	ldr.w	r6, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d05c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1d05e:	bf54      	ite	pl
   1d060:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d064:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d068:	f04f 0c01 	mov.w	ip, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d06c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d070:	fa0c fc01 	lsl.w	ip, ip, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d074:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d076:	bf4c      	ite	mi
   1d078:	ea46 060c 	orrmi.w	r6, r6, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d07c:	ea26 060c 	bicpl.w	r6, r6, ip
   1d080:	f8ce 6000 	str.w	r6, [lr]
	return api->pin_configure(port, pin, flags);
   1d084:	f8d8 3000 	ldr.w	r3, [r8]
   1d088:	4798      	blx	r3
	}

	ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_INACTIVE);
	if (ret < 0) {
   1d08a:	2800      	cmp	r0, #0
   1d08c:	db0a      	blt.n	1d0a4 <regulator_fixed_init+0xac>
		return ret;
	}

	ret = regulator_common_init(dev, false);
   1d08e:	2100      	movs	r1, #0
   1d090:	4628      	mov	r0, r5
   1d092:	f009 f979 	bl	26388 <regulator_common_init>
	if (ret < 0) {
   1d096:	2800      	cmp	r0, #0
   1d098:	db04      	blt.n	1d0a4 <regulator_fixed_init+0xac>
		return ret;
	}

	if (regulator_is_enabled(dev)) {
   1d09a:	4628      	mov	r0, r5
   1d09c:	f009 f8f1 	bl	26282 <regulator_is_enabled>
   1d0a0:	b918      	cbnz	r0, 1d0aa <regulator_fixed_init+0xb2>
		k_busy_wait(cfg->startup_delay_us);
	}

	return 0;
   1d0a2:	2000      	movs	r0, #0
}
   1d0a4:	46bd      	mov	sp, r7
   1d0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_busy_wait(cfg->startup_delay_us);
   1d0aa:	69a0      	ldr	r0, [r4, #24]
	z_impl_k_busy_wait(usec_to_wait);
   1d0ac:	f00a f85f 	bl	2716e <z_impl_k_busy_wait>
}
   1d0b0:	e7f7      	b.n	1d0a2 <regulator_fixed_init+0xaa>
   1d0b2:	bf00      	nop
   1d0b4:	20000b40 	.word	0x20000b40
   1d0b8:	0002e39f 	.word	0x0002e39f
   1d0bc:	0002e3bb 	.word	0x0002e3bb
   1d0c0:	01000004 	.word	0x01000004

0001d0c4 <regulator_fixed_enable>:
{
   1d0c4:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   1d0c6:	6844      	ldr	r4, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   1d0c8:	2201      	movs	r2, #1
   1d0ca:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   1d0ce:	6a20      	ldr	r0, [r4, #32]
   1d0d0:	f009 f98b 	bl	263ea <gpio_pin_set>
	if (ret < 0) {
   1d0d4:	2800      	cmp	r0, #0
   1d0d6:	db02      	blt.n	1d0de <regulator_fixed_enable+0x1a>
	if (cfg->off_on_delay_us > 0U) {
   1d0d8:	69e4      	ldr	r4, [r4, #28]
   1d0da:	b90c      	cbnz	r4, 1d0e0 <regulator_fixed_enable+0x1c>
	return 0;
   1d0dc:	2000      	movs	r0, #0
}
   1d0de:	bd38      	pop	{r3, r4, r5, pc}
   1d0e0:	4806      	ldr	r0, [pc, #24]	; (1d0fc <regulator_fixed_enable+0x38>)
   1d0e2:	4a07      	ldr	r2, [pc, #28]	; (1d100 <regulator_fixed_enable+0x3c>)
   1d0e4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1d0e8:	2100      	movs	r1, #0
   1d0ea:	2300      	movs	r3, #0
   1d0ec:	fbe4 0105 	umlal	r0, r1, r4, r5
   1d0f0:	f7e3 fc14 	bl	91c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1d0f4:	f003 fb24 	bl	20740 <z_impl_k_sleep>
   1d0f8:	e7f0      	b.n	1d0dc <regulator_fixed_enable+0x18>
   1d0fa:	bf00      	nop
   1d0fc:	000f423f 	.word	0x000f423f
   1d100:	000f4240 	.word	0x000f4240

0001d104 <cmd_errors>:

	return 0;
}

static int cmd_errors(const struct shell *sh, size_t argc, char **argv)
{
   1d104:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d106:	4605      	mov	r5, r0
	regulator_error_flags_t errors;
	int ret;

	ARG_UNUSED(argc);

	dev = device_get_binding(argv[1]);
   1d108:	6850      	ldr	r0, [r2, #4]
{
   1d10a:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   1d10c:	f009 f984 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d110:	b950      	cbnz	r0, 1d128 <cmd_errors+0x24>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d112:	6863      	ldr	r3, [r4, #4]
   1d114:	4a21      	ldr	r2, [pc, #132]	; (1d19c <cmd_errors+0x98>)
   1d116:	2101      	movs	r1, #1
   1d118:	4628      	mov	r0, r5
   1d11a:	f005 f93b 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1d11e:	f06f 0412 	mvn.w	r4, #18
								    : " ");
	shell_print(sh, "Overtemp.:\t[%s]",
		    ((errors & REGULATOR_ERROR_OVER_TEMP) != 0U) ? "X" : " ");

	return 0;
}
   1d122:	4620      	mov	r0, r4
   1d124:	b002      	add	sp, #8
   1d126:	bd70      	pop	{r4, r5, r6, pc}
					    regulator_error_flags_t *flags)
{
	const struct regulator_driver_api *api =
		(const struct regulator_driver_api *)dev->api;

	if (api->get_error_flags == NULL) {
   1d128:	6883      	ldr	r3, [r0, #8]
   1d12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d12c:	b15b      	cbz	r3, 1d146 <cmd_errors+0x42>
		return -ENOSYS;
	}

	return api->get_error_flags(dev, flags);
   1d12e:	f10d 0107 	add.w	r1, sp, #7
   1d132:	4798      	blx	r3
	if (ret < 0) {
   1d134:	1e04      	subs	r4, r0, #0
   1d136:	da09      	bge.n	1d14c <cmd_errors+0x48>
		shell_error(sh, "Could not get error flags (%d)", ret);
   1d138:	4a19      	ldr	r2, [pc, #100]	; (1d1a0 <cmd_errors+0x9c>)
   1d13a:	4623      	mov	r3, r4
   1d13c:	2101      	movs	r1, #1
   1d13e:	4628      	mov	r0, r5
   1d140:	f005 f928 	bl	22394 <shell_fprintf>
		return ret;
   1d144:	e7ed      	b.n	1d122 <cmd_errors+0x1e>
		return -ENOSYS;
   1d146:	f06f 0457 	mvn.w	r4, #87	; 0x57
   1d14a:	e7f5      	b.n	1d138 <cmd_errors+0x34>
	shell_print(sh, "Overvoltage:\t[%s]",
   1d14c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d150:	4c14      	ldr	r4, [pc, #80]	; (1d1a4 <cmd_errors+0xa0>)
   1d152:	4e15      	ldr	r6, [pc, #84]	; (1d1a8 <cmd_errors+0xa4>)
   1d154:	4a15      	ldr	r2, [pc, #84]	; (1d1ac <cmd_errors+0xa8>)
   1d156:	f013 0f01 	tst.w	r3, #1
   1d15a:	bf14      	ite	ne
   1d15c:	4623      	movne	r3, r4
   1d15e:	4633      	moveq	r3, r6
   1d160:	2108      	movs	r1, #8
   1d162:	4628      	mov	r0, r5
   1d164:	f005 f916 	bl	22394 <shell_fprintf>
	shell_print(sh, "Overcurrent:\t[%s]",
   1d168:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d16c:	4a10      	ldr	r2, [pc, #64]	; (1d1b0 <cmd_errors+0xac>)
   1d16e:	f013 0f02 	tst.w	r3, #2
   1d172:	bf14      	ite	ne
   1d174:	4623      	movne	r3, r4
   1d176:	4633      	moveq	r3, r6
   1d178:	2108      	movs	r1, #8
   1d17a:	4628      	mov	r0, r5
   1d17c:	f005 f90a 	bl	22394 <shell_fprintf>
	shell_print(sh, "Overtemp.:\t[%s]",
   1d180:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d184:	4a0b      	ldr	r2, [pc, #44]	; (1d1b4 <cmd_errors+0xb0>)
   1d186:	f013 0f04 	tst.w	r3, #4
   1d18a:	bf14      	ite	ne
   1d18c:	4623      	movne	r3, r4
   1d18e:	4633      	moveq	r3, r6
   1d190:	2108      	movs	r1, #8
   1d192:	4628      	mov	r0, r5
   1d194:	f005 f8fe 	bl	22394 <shell_fprintf>
	return 0;
   1d198:	2400      	movs	r4, #0
   1d19a:	e7c2      	b.n	1d122 <cmd_errors+0x1e>
   1d19c:	0002e3fa 	.word	0x0002e3fa
   1d1a0:	0002e41d 	.word	0x0002e41d
   1d1a4:	0002c0bf 	.word	0x0002c0bf
   1d1a8:	0002a06a 	.word	0x0002a06a
   1d1ac:	0002e43d 	.word	0x0002e43d
   1d1b0:	0002e450 	.word	0x0002e450
   1d1b4:	0002e463 	.word	0x0002e463

0001d1b8 <cmd_modeget>:
{
   1d1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d1ba:	4605      	mov	r5, r0
	dev = device_get_binding(argv[1]);
   1d1bc:	6850      	ldr	r0, [r2, #4]
{
   1d1be:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   1d1c0:	f009 f92a 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d1c4:	b950      	cbnz	r0, 1d1dc <cmd_modeget+0x24>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d1c6:	6863      	ldr	r3, [r4, #4]
   1d1c8:	4a12      	ldr	r2, [pc, #72]	; (1d214 <cmd_modeget+0x5c>)
   1d1ca:	2101      	movs	r1, #1
   1d1cc:	4628      	mov	r0, r5
   1d1ce:	f005 f8e1 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1d1d2:	f06f 0412 	mvn.w	r4, #18
}
   1d1d6:	4620      	mov	r0, r4
   1d1d8:	b003      	add	sp, #12
   1d1da:	bd30      	pop	{r4, r5, pc}
	if (api->get_mode == NULL) {
   1d1dc:	6883      	ldr	r3, [r0, #8]
   1d1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d1e0:	b15b      	cbz	r3, 1d1fa <cmd_modeget+0x42>
	return api->get_mode(dev, mode);
   1d1e2:	f10d 0107 	add.w	r1, sp, #7
   1d1e6:	4798      	blx	r3
	if (ret < 0) {
   1d1e8:	1e04      	subs	r4, r0, #0
   1d1ea:	da09      	bge.n	1d200 <cmd_modeget+0x48>
		shell_error(sh, "Could not get mode (%d)", ret);
   1d1ec:	4a0a      	ldr	r2, [pc, #40]	; (1d218 <cmd_modeget+0x60>)
   1d1ee:	4623      	mov	r3, r4
   1d1f0:	2101      	movs	r1, #1
   1d1f2:	4628      	mov	r0, r5
   1d1f4:	f005 f8ce 	bl	22394 <shell_fprintf>
		return ret;
   1d1f8:	e7ed      	b.n	1d1d6 <cmd_modeget+0x1e>
		return -ENOSYS;
   1d1fa:	f06f 0457 	mvn.w	r4, #87	; 0x57
   1d1fe:	e7f5      	b.n	1d1ec <cmd_modeget+0x34>
	shell_print(sh, "Mode: %u", (unsigned int)mode);
   1d200:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d204:	4a05      	ldr	r2, [pc, #20]	; (1d21c <cmd_modeget+0x64>)
   1d206:	2108      	movs	r1, #8
   1d208:	4628      	mov	r0, r5
   1d20a:	f005 f8c3 	bl	22394 <shell_fprintf>
	return 0;
   1d20e:	2400      	movs	r4, #0
   1d210:	e7e1      	b.n	1d1d6 <cmd_modeget+0x1e>
   1d212:	bf00      	nop
   1d214:	0002e3fa 	.word	0x0002e3fa
   1d218:	0002e474 	.word	0x0002e474
   1d21c:	0002e48d 	.word	0x0002e48d

0001d220 <cmd_modeset>:
{
   1d220:	b570      	push	{r4, r5, r6, lr}
   1d222:	4605      	mov	r5, r0
	dev = device_get_binding(argv[1]);
   1d224:	6850      	ldr	r0, [r2, #4]
{
   1d226:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   1d228:	f009 f8f6 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d22c:	4606      	mov	r6, r0
   1d22e:	b948      	cbnz	r0, 1d244 <cmd_modeset+0x24>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d230:	6863      	ldr	r3, [r4, #4]
   1d232:	4a0e      	ldr	r2, [pc, #56]	; (1d26c <cmd_modeset+0x4c>)
   1d234:	2101      	movs	r1, #1
   1d236:	4628      	mov	r0, r5
   1d238:	f005 f8ac 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1d23c:	f06f 0412 	mvn.w	r4, #18
}
   1d240:	4620      	mov	r0, r4
   1d242:	bd70      	pop	{r4, r5, r6, pc}
	mode = (regulator_mode_t)strtoul(argv[2], NULL, 10);
   1d244:	68a0      	ldr	r0, [r4, #8]
   1d246:	220a      	movs	r2, #10
   1d248:	2100      	movs	r1, #0
   1d24a:	f006 fbc5 	bl	239d8 <strtoul>
	ret = regulator_set_mode(dev, mode);
   1d24e:	b2c1      	uxtb	r1, r0
   1d250:	4630      	mov	r0, r6
   1d252:	f009 f87b 	bl	2634c <regulator_set_mode>
	if (ret < 0) {
   1d256:	1e04      	subs	r4, r0, #0
   1d258:	da06      	bge.n	1d268 <cmd_modeset+0x48>
		shell_error(sh, "Could not set mode (%d)", ret);
   1d25a:	4a05      	ldr	r2, [pc, #20]	; (1d270 <cmd_modeset+0x50>)
   1d25c:	4623      	mov	r3, r4
   1d25e:	2101      	movs	r1, #1
   1d260:	4628      	mov	r0, r5
   1d262:	f005 f897 	bl	22394 <shell_fprintf>
		return ret;
   1d266:	e7eb      	b.n	1d240 <cmd_modeset+0x20>
	return 0;
   1d268:	2400      	movs	r4, #0
   1d26a:	e7e9      	b.n	1d240 <cmd_modeset+0x20>
   1d26c:	0002e3fa 	.word	0x0002e3fa
   1d270:	0002e497 	.word	0x0002e497

0001d274 <strtomicro>:
{
   1d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d276:	4605      	mov	r5, r0
   1d278:	460c      	mov	r4, r1
   1d27a:	4616      	mov	r6, r2
	len = strlen(inp);
   1d27c:	f006 fc6f 	bl	23b5e <strlen>
	if (len < 2) {
   1d280:	2801      	cmp	r0, #1
   1d282:	d802      	bhi.n	1d28a <strtomicro+0x16>
		return -EINVAL;
   1d284:	f06f 0015 	mvn.w	r0, #21
}
   1d288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tolower(inp[len - 1]) != units) {
   1d28a:	182b      	adds	r3, r5, r0
   1d28c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   1d290:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   1d294:	2a19      	cmp	r2, #25
   1d296:	bf98      	it	ls
   1d298:	3320      	addls	r3, #32
   1d29a:	429c      	cmp	r4, r3
   1d29c:	d1f2      	bne.n	1d284 <strtomicro+0x10>
	if ((len > 2) && (inp[len - 2] == 'u')) {
   1d29e:	1e87      	subs	r7, r0, #2
   1d2a0:	2802      	cmp	r0, #2
   1d2a2:	5deb      	ldrb	r3, [r5, r7]
   1d2a4:	d02d      	beq.n	1d302 <strtomicro+0x8e>
   1d2a6:	2b75      	cmp	r3, #117	; 0x75
   1d2a8:	d125      	bne.n	1d2f6 <strtomicro+0x82>
		end = len - 3;
   1d2aa:	1ec7      	subs	r7, r0, #3
		mult = 1;
   1d2ac:	2101      	movs	r1, #1
	if (inp[0] == '-') {
   1d2ae:	782b      	ldrb	r3, [r5, #0]
   1d2b0:	2b2d      	cmp	r3, #45	; 0x2d
   1d2b2:	d12b      	bne.n	1d30c <strtomicro+0x98>
		mult *= -1;
   1d2b4:	4249      	negs	r1, r1
		start = 1;
   1d2b6:	2301      	movs	r3, #1
	*val = 0;
   1d2b8:	2200      	movs	r2, #0
   1d2ba:	6032      	str	r2, [r6, #0]
			decdiv = 10;
   1d2bc:	f04f 0c0a 	mov.w	ip, #10
	int32_t mult, decdiv = 1;
   1d2c0:	2201      	movs	r2, #1
	for (size_t i = start; (i <= end) && (decdiv <= mult); i++) {
   1d2c2:	429f      	cmp	r7, r3
   1d2c4:	d315      	bcc.n	1d2f2 <strtomicro+0x7e>
   1d2c6:	4291      	cmp	r1, r2
   1d2c8:	db13      	blt.n	1d2f2 <strtomicro+0x7e>
		if (isdigit((unsigned char)inp[i]) > 0) {
   1d2ca:	5cec      	ldrb	r4, [r5, r3]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d2cc:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   1d2d0:	2809      	cmp	r0, #9
   1d2d2:	d824      	bhi.n	1d31e <strtomicro+0xaa>
			*val = *val * 10 / decdiv +
   1d2d4:	6834      	ldr	r4, [r6, #0]
			       (int32_t)(inp[i] - '0') * mult / decdiv;
   1d2d6:	4348      	muls	r0, r1
			*val = *val * 10 / decdiv +
   1d2d8:	fb0c f404 	mul.w	r4, ip, r4
			       (int32_t)(inp[i] - '0') * mult / decdiv;
   1d2dc:	fbb0 f0f2 	udiv	r0, r0, r2
			*val = *val * 10 / decdiv +
   1d2e0:	fb94 f4f2 	sdiv	r4, r4, r2
			if (decdiv > 1) {
   1d2e4:	2a01      	cmp	r2, #1
			*val = *val * 10 / decdiv +
   1d2e6:	4404      	add	r4, r0
   1d2e8:	6034      	str	r4, [r6, #0]
			if (decdiv > 1) {
   1d2ea:	d114      	bne.n	1d316 <strtomicro+0xa2>
	for (size_t i = start; (i <= end) && (decdiv <= mult); i++) {
   1d2ec:	3301      	adds	r3, #1
   1d2ee:	42bb      	cmp	r3, r7
   1d2f0:	d9eb      	bls.n	1d2ca <strtomicro+0x56>
	return 0;
   1d2f2:	2000      	movs	r0, #0
   1d2f4:	e7c8      	b.n	1d288 <strtomicro+0x14>
	} else if ((len > 2) && (inp[len - 2] == 'm')) {
   1d2f6:	2b6d      	cmp	r3, #109	; 0x6d
   1d2f8:	d103      	bne.n	1d302 <strtomicro+0x8e>
		end = len - 3;
   1d2fa:	1ec7      	subs	r7, r0, #3
		mult = 1000;
   1d2fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		end = len - 3;
   1d300:	e7d5      	b.n	1d2ae <strtomicro+0x3a>
   1d302:	3b30      	subs	r3, #48	; 0x30
	} else if (isdigit((unsigned char)inp[len - 2]) > 0) {
   1d304:	2b09      	cmp	r3, #9
   1d306:	d8bd      	bhi.n	1d284 <strtomicro+0x10>
		mult = 1000000;
   1d308:	4907      	ldr	r1, [pc, #28]	; (1d328 <strtomicro+0xb4>)
   1d30a:	e7d0      	b.n	1d2ae <strtomicro+0x3a>
	} else if (inp[0] == '+') {
   1d30c:	f1a3 022b 	sub.w	r2, r3, #43	; 0x2b
   1d310:	4253      	negs	r3, r2
   1d312:	4153      	adcs	r3, r2
   1d314:	e7d0      	b.n	1d2b8 <strtomicro+0x44>
				mult /= 10;
   1d316:	fbb1 f1fc 	udiv	r1, r1, ip
	for (size_t i = start; (i <= end) && (decdiv <= mult); i++) {
   1d31a:	3301      	adds	r3, #1
   1d31c:	e7d1      	b.n	1d2c2 <strtomicro+0x4e>
		} else if (inp[i] == '.') {
   1d31e:	2c2e      	cmp	r4, #46	; 0x2e
   1d320:	d1b0      	bne.n	1d284 <strtomicro+0x10>
			decdiv = 10;
   1d322:	220a      	movs	r2, #10
   1d324:	e7f9      	b.n	1d31a <strtomicro+0xa6>
   1d326:	bf00      	nop
   1d328:	000f4240 	.word	0x000f4240

0001d32c <cmd_iset>:
{
   1d32c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d330:	4606      	mov	r6, r0
	dev = device_get_binding(argv[1]);
   1d332:	6850      	ldr	r0, [r2, #4]
{
   1d334:	4688      	mov	r8, r1
   1d336:	4615      	mov	r5, r2
	dev = device_get_binding(argv[1]);
   1d338:	f009 f86e 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d33c:	4607      	mov	r7, r0
   1d33e:	b958      	cbnz	r0, 1d358 <cmd_iset+0x2c>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d340:	686b      	ldr	r3, [r5, #4]
   1d342:	4a1a      	ldr	r2, [pc, #104]	; (1d3ac <cmd_iset+0x80>)
   1d344:	2101      	movs	r1, #1
   1d346:	4630      	mov	r0, r6
   1d348:	f005 f824 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1d34c:	f06f 0412 	mvn.w	r4, #18
}
   1d350:	4620      	mov	r0, r4
   1d352:	b002      	add	sp, #8
   1d354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = strtomicro(argv[2], 'a', &min_ua);
   1d358:	68a8      	ldr	r0, [r5, #8]
   1d35a:	466a      	mov	r2, sp
   1d35c:	2161      	movs	r1, #97	; 0x61
   1d35e:	f7ff ff89 	bl	1d274 <strtomicro>
	if (ret < 0) {
   1d362:	1e04      	subs	r4, r0, #0
   1d364:	da06      	bge.n	1d374 <cmd_iset+0x48>
		shell_error(sh, "Invalid min. current: %s", argv[2]);
   1d366:	68ab      	ldr	r3, [r5, #8]
   1d368:	4a11      	ldr	r2, [pc, #68]	; (1d3b0 <cmd_iset+0x84>)
		shell_error(sh, "Could not set current limit (%d)", ret);
   1d36a:	2101      	movs	r1, #1
   1d36c:	4630      	mov	r0, r6
   1d36e:	f005 f811 	bl	22394 <shell_fprintf>
		return ret;
   1d372:	e7ed      	b.n	1d350 <cmd_iset+0x24>
	if (argc == 4) {
   1d374:	f1b8 0f04 	cmp.w	r8, #4
   1d378:	d109      	bne.n	1d38e <cmd_iset+0x62>
		ret = strtomicro(argv[3], 'a', &max_ua);
   1d37a:	68e8      	ldr	r0, [r5, #12]
   1d37c:	aa01      	add	r2, sp, #4
   1d37e:	2161      	movs	r1, #97	; 0x61
   1d380:	f7ff ff78 	bl	1d274 <strtomicro>
		if (ret < 0) {
   1d384:	1e04      	subs	r4, r0, #0
   1d386:	da04      	bge.n	1d392 <cmd_iset+0x66>
			shell_error(sh, "Invalid max. current: %s", argv[3]);
   1d388:	68eb      	ldr	r3, [r5, #12]
   1d38a:	4a0a      	ldr	r2, [pc, #40]	; (1d3b4 <cmd_iset+0x88>)
   1d38c:	e7ed      	b.n	1d36a <cmd_iset+0x3e>
		max_ua = min_ua;
   1d38e:	9b00      	ldr	r3, [sp, #0]
   1d390:	9301      	str	r3, [sp, #4]
	ret = regulator_set_current_limit(dev, min_ua, max_ua);
   1d392:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d396:	4638      	mov	r0, r7
   1d398:	f008 ffc4 	bl	26324 <regulator_set_current_limit>
	if (ret < 0) {
   1d39c:	1e04      	subs	r4, r0, #0
   1d39e:	da02      	bge.n	1d3a6 <cmd_iset+0x7a>
		shell_error(sh, "Could not set current limit (%d)", ret);
   1d3a0:	4a05      	ldr	r2, [pc, #20]	; (1d3b8 <cmd_iset+0x8c>)
   1d3a2:	4623      	mov	r3, r4
   1d3a4:	e7e1      	b.n	1d36a <cmd_iset+0x3e>
	return 0;
   1d3a6:	2400      	movs	r4, #0
   1d3a8:	e7d2      	b.n	1d350 <cmd_iset+0x24>
   1d3aa:	bf00      	nop
   1d3ac:	0002e3fa 	.word	0x0002e3fa
   1d3b0:	0002e4b0 	.word	0x0002e4b0
   1d3b4:	0002e4ca 	.word	0x0002e4ca
   1d3b8:	0002e4e4 	.word	0x0002e4e4

0001d3bc <cmd_vset>:
{
   1d3bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d3c0:	4606      	mov	r6, r0
	dev = device_get_binding(argv[1]);
   1d3c2:	6850      	ldr	r0, [r2, #4]
{
   1d3c4:	4688      	mov	r8, r1
   1d3c6:	4615      	mov	r5, r2
	dev = device_get_binding(argv[1]);
   1d3c8:	f009 f826 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d3cc:	4607      	mov	r7, r0
   1d3ce:	b958      	cbnz	r0, 1d3e8 <cmd_vset+0x2c>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d3d0:	686b      	ldr	r3, [r5, #4]
   1d3d2:	4a1a      	ldr	r2, [pc, #104]	; (1d43c <cmd_vset+0x80>)
   1d3d4:	2101      	movs	r1, #1
   1d3d6:	4630      	mov	r0, r6
   1d3d8:	f004 ffdc 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1d3dc:	f06f 0412 	mvn.w	r4, #18
}
   1d3e0:	4620      	mov	r0, r4
   1d3e2:	b002      	add	sp, #8
   1d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = strtomicro(argv[2], 'v', &min_uv);
   1d3e8:	68a8      	ldr	r0, [r5, #8]
   1d3ea:	466a      	mov	r2, sp
   1d3ec:	2176      	movs	r1, #118	; 0x76
   1d3ee:	f7ff ff41 	bl	1d274 <strtomicro>
	if (ret < 0) {
   1d3f2:	1e04      	subs	r4, r0, #0
   1d3f4:	da06      	bge.n	1d404 <cmd_vset+0x48>
		shell_error(sh, "Invalid min. voltage: %s", argv[2]);
   1d3f6:	68ab      	ldr	r3, [r5, #8]
   1d3f8:	4a11      	ldr	r2, [pc, #68]	; (1d440 <cmd_vset+0x84>)
		shell_error(sh, "Could not set voltage (%d)", ret);
   1d3fa:	2101      	movs	r1, #1
   1d3fc:	4630      	mov	r0, r6
   1d3fe:	f004 ffc9 	bl	22394 <shell_fprintf>
		return ret;
   1d402:	e7ed      	b.n	1d3e0 <cmd_vset+0x24>
	if (argc == 4) {
   1d404:	f1b8 0f04 	cmp.w	r8, #4
   1d408:	d109      	bne.n	1d41e <cmd_vset+0x62>
		ret = strtomicro(argv[3], 'v', &max_uv);
   1d40a:	68e8      	ldr	r0, [r5, #12]
   1d40c:	aa01      	add	r2, sp, #4
   1d40e:	2176      	movs	r1, #118	; 0x76
   1d410:	f7ff ff30 	bl	1d274 <strtomicro>
		if (ret < 0) {
   1d414:	1e04      	subs	r4, r0, #0
   1d416:	da04      	bge.n	1d422 <cmd_vset+0x66>
			shell_error(sh, "Invalid max. voltage: %s", argv[3]);
   1d418:	68eb      	ldr	r3, [r5, #12]
   1d41a:	4a0a      	ldr	r2, [pc, #40]	; (1d444 <cmd_vset+0x88>)
   1d41c:	e7ed      	b.n	1d3fa <cmd_vset+0x3e>
		max_uv = min_uv;
   1d41e:	9b00      	ldr	r3, [sp, #0]
   1d420:	9301      	str	r3, [sp, #4]
	ret = regulator_set_voltage(dev, min_uv, max_uv);
   1d422:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d426:	4638      	mov	r0, r7
   1d428:	f008 ff68 	bl	262fc <regulator_set_voltage>
	if (ret < 0) {
   1d42c:	1e04      	subs	r4, r0, #0
   1d42e:	da02      	bge.n	1d436 <cmd_vset+0x7a>
		shell_error(sh, "Could not set voltage (%d)", ret);
   1d430:	4a05      	ldr	r2, [pc, #20]	; (1d448 <cmd_vset+0x8c>)
   1d432:	4623      	mov	r3, r4
   1d434:	e7e1      	b.n	1d3fa <cmd_vset+0x3e>
	return 0;
   1d436:	2400      	movs	r4, #0
   1d438:	e7d2      	b.n	1d3e0 <cmd_vset+0x24>
   1d43a:	bf00      	nop
   1d43c:	0002e3fa 	.word	0x0002e3fa
   1d440:	0002e506 	.word	0x0002e506
   1d444:	0002e520 	.word	0x0002e520
   1d448:	0002e53a 	.word	0x0002e53a

0001d44c <microtoshell>:
	if (val > 100000) {
   1d44c:	4b14      	ldr	r3, [pc, #80]	; (1d4a0 <microtoshell+0x54>)
   1d44e:	429a      	cmp	r2, r3
{
   1d450:	b513      	push	{r0, r1, r4, lr}
	if (val > 100000) {
   1d452:	dd10      	ble.n	1d476 <microtoshell+0x2a>
		shell_print(sh, "%d.%03d %c", val / 1000000,
   1d454:	4c13      	ldr	r4, [pc, #76]	; (1d4a4 <microtoshell+0x58>)
   1d456:	9101      	str	r1, [sp, #4]
   1d458:	fb92 f3f4 	sdiv	r3, r2, r4
   1d45c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1d460:	fb04 2213 	mls	r2, r4, r3, r2
   1d464:	fbb2 f2f1 	udiv	r2, r2, r1
   1d468:	9200      	str	r2, [sp, #0]
   1d46a:	4a0f      	ldr	r2, [pc, #60]	; (1d4a8 <microtoshell+0x5c>)
		shell_print(sh, "%d.%03d m%c", val / 1000, val % 1000, unit);
   1d46c:	2108      	movs	r1, #8
   1d46e:	f004 ff91 	bl	22394 <shell_fprintf>
}
   1d472:	b002      	add	sp, #8
   1d474:	bd10      	pop	{r4, pc}
	} else if (val > 1000) {
   1d476:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d47a:	dd09      	ble.n	1d490 <microtoshell+0x44>
		shell_print(sh, "%d.%03d m%c", val / 1000, val % 1000, unit);
   1d47c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d480:	fb92 f3f4 	sdiv	r3, r2, r4
   1d484:	fb04 2213 	mls	r2, r4, r3, r2
   1d488:	9200      	str	r2, [sp, #0]
   1d48a:	9101      	str	r1, [sp, #4]
   1d48c:	4a07      	ldr	r2, [pc, #28]	; (1d4ac <microtoshell+0x60>)
   1d48e:	e7ed      	b.n	1d46c <microtoshell+0x20>
		shell_print(sh, "%d u%c", val, unit);
   1d490:	9100      	str	r1, [sp, #0]
   1d492:	4613      	mov	r3, r2
   1d494:	2108      	movs	r1, #8
   1d496:	4a06      	ldr	r2, [pc, #24]	; (1d4b0 <microtoshell+0x64>)
   1d498:	f004 ff7c 	bl	22394 <shell_fprintf>
}
   1d49c:	e7e9      	b.n	1d472 <microtoshell+0x26>
   1d49e:	bf00      	nop
   1d4a0:	000186a0 	.word	0x000186a0
   1d4a4:	000f4240 	.word	0x000f4240
   1d4a8:	0002e556 	.word	0x0002e556
   1d4ac:	0002e562 	.word	0x0002e562
   1d4b0:	0002e56f 	.word	0x0002e56f

0001d4b4 <cmd_iget>:
{
   1d4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d4b6:	4605      	mov	r5, r0
	dev = device_get_binding(argv[1]);
   1d4b8:	6850      	ldr	r0, [r2, #4]
{
   1d4ba:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   1d4bc:	f008 ffac 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d4c0:	b950      	cbnz	r0, 1d4d8 <cmd_iget+0x24>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d4c2:	6863      	ldr	r3, [r4, #4]
   1d4c4:	4a10      	ldr	r2, [pc, #64]	; (1d508 <cmd_iget+0x54>)
   1d4c6:	2101      	movs	r1, #1
   1d4c8:	4628      	mov	r0, r5
   1d4ca:	f004 ff63 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1d4ce:	f06f 0412 	mvn.w	r4, #18
}
   1d4d2:	4620      	mov	r0, r4
   1d4d4:	b003      	add	sp, #12
   1d4d6:	bd30      	pop	{r4, r5, pc}
	if (api->get_current_limit == NULL) {
   1d4d8:	6883      	ldr	r3, [r0, #8]
   1d4da:	69db      	ldr	r3, [r3, #28]
   1d4dc:	b153      	cbz	r3, 1d4f4 <cmd_iget+0x40>
	return api->get_current_limit(dev, curr_ua);
   1d4de:	a901      	add	r1, sp, #4
   1d4e0:	4798      	blx	r3
	if (ret < 0) {
   1d4e2:	1e04      	subs	r4, r0, #0
   1d4e4:	da09      	bge.n	1d4fa <cmd_iget+0x46>
		shell_error(sh, "Could not get current limit (%d)", ret);
   1d4e6:	4a09      	ldr	r2, [pc, #36]	; (1d50c <cmd_iget+0x58>)
   1d4e8:	4623      	mov	r3, r4
   1d4ea:	2101      	movs	r1, #1
   1d4ec:	4628      	mov	r0, r5
   1d4ee:	f004 ff51 	bl	22394 <shell_fprintf>
		return ret;
   1d4f2:	e7ee      	b.n	1d4d2 <cmd_iget+0x1e>
		return -ENOSYS;
   1d4f4:	f06f 0457 	mvn.w	r4, #87	; 0x57
   1d4f8:	e7f5      	b.n	1d4e6 <cmd_iget+0x32>
	microtoshell(sh, 'A', curr_ua);
   1d4fa:	9a01      	ldr	r2, [sp, #4]
   1d4fc:	2141      	movs	r1, #65	; 0x41
   1d4fe:	4628      	mov	r0, r5
   1d500:	f7ff ffa4 	bl	1d44c <microtoshell>
	return 0;
   1d504:	2400      	movs	r4, #0
   1d506:	e7e4      	b.n	1d4d2 <cmd_iget+0x1e>
   1d508:	0002e3fa 	.word	0x0002e3fa
   1d50c:	0002e577 	.word	0x0002e577

0001d510 <cmd_vget>:
{
   1d510:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d512:	4605      	mov	r5, r0
	dev = device_get_binding(argv[1]);
   1d514:	6850      	ldr	r0, [r2, #4]
{
   1d516:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   1d518:	f008 ff7e 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d51c:	b950      	cbnz	r0, 1d534 <cmd_vget+0x24>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d51e:	6863      	ldr	r3, [r4, #4]
   1d520:	4a10      	ldr	r2, [pc, #64]	; (1d564 <cmd_vget+0x54>)
   1d522:	2101      	movs	r1, #1
   1d524:	4628      	mov	r0, r5
   1d526:	f004 ff35 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1d52a:	f06f 0412 	mvn.w	r4, #18
}
   1d52e:	4620      	mov	r0, r4
   1d530:	b003      	add	sp, #12
   1d532:	bd30      	pop	{r4, r5, pc}
	if (api->get_voltage == NULL) {
   1d534:	6883      	ldr	r3, [r0, #8]
   1d536:	695b      	ldr	r3, [r3, #20]
   1d538:	b153      	cbz	r3, 1d550 <cmd_vget+0x40>
	return api->get_voltage(dev, volt_uv);
   1d53a:	a901      	add	r1, sp, #4
   1d53c:	4798      	blx	r3
	if (ret < 0) {
   1d53e:	1e04      	subs	r4, r0, #0
   1d540:	da09      	bge.n	1d556 <cmd_vget+0x46>
		shell_error(sh, "Could not get voltage (%d)", ret);
   1d542:	4a09      	ldr	r2, [pc, #36]	; (1d568 <cmd_vget+0x58>)
   1d544:	4623      	mov	r3, r4
   1d546:	2101      	movs	r1, #1
   1d548:	4628      	mov	r0, r5
   1d54a:	f004 ff23 	bl	22394 <shell_fprintf>
		return ret;
   1d54e:	e7ee      	b.n	1d52e <cmd_vget+0x1e>
		return -ENOSYS;
   1d550:	f06f 0457 	mvn.w	r4, #87	; 0x57
   1d554:	e7f5      	b.n	1d542 <cmd_vget+0x32>
	microtoshell(sh, 'V', volt_uv);
   1d556:	9a01      	ldr	r2, [sp, #4]
   1d558:	2156      	movs	r1, #86	; 0x56
   1d55a:	4628      	mov	r0, r5
   1d55c:	f7ff ff76 	bl	1d44c <microtoshell>
	return 0;
   1d560:	2400      	movs	r4, #0
   1d562:	e7e4      	b.n	1d52e <cmd_vget+0x1e>
   1d564:	0002e3fa 	.word	0x0002e3fa
   1d568:	0002e599 	.word	0x0002e599

0001d56c <cmd_enable>:
{
   1d56c:	b538      	push	{r3, r4, r5, lr}
   1d56e:	4605      	mov	r5, r0
	dev = device_get_binding(argv[1]);
   1d570:	6850      	ldr	r0, [r2, #4]
{
   1d572:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   1d574:	f008 ff50 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d578:	b948      	cbnz	r0, 1d58e <cmd_enable+0x22>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d57a:	6863      	ldr	r3, [r4, #4]
   1d57c:	4a0a      	ldr	r2, [pc, #40]	; (1d5a8 <cmd_enable+0x3c>)
   1d57e:	2101      	movs	r1, #1
   1d580:	4628      	mov	r0, r5
   1d582:	f004 ff07 	bl	22394 <shell_fprintf>
   1d586:	f06f 0412 	mvn.w	r4, #18
}
   1d58a:	4620      	mov	r0, r4
   1d58c:	bd38      	pop	{r3, r4, r5, pc}
	ret = regulator_enable(dev);
   1d58e:	f008 fe51 	bl	26234 <regulator_enable>
	if (ret < 0) {
   1d592:	1e04      	subs	r4, r0, #0
   1d594:	da06      	bge.n	1d5a4 <cmd_enable+0x38>
		shell_error(sh, "Could not enable regulator (%d)", ret);
   1d596:	4a05      	ldr	r2, [pc, #20]	; (1d5ac <cmd_enable+0x40>)
   1d598:	4623      	mov	r3, r4
   1d59a:	2101      	movs	r1, #1
   1d59c:	4628      	mov	r0, r5
   1d59e:	f004 fef9 	bl	22394 <shell_fprintf>
		return ret;
   1d5a2:	e7f2      	b.n	1d58a <cmd_enable+0x1e>
	return 0;
   1d5a4:	2400      	movs	r4, #0
   1d5a6:	e7f0      	b.n	1d58a <cmd_enable+0x1e>
   1d5a8:	0002e3fa 	.word	0x0002e3fa
   1d5ac:	0002e5b5 	.word	0x0002e5b5

0001d5b0 <cmd_vlist>:
{
   1d5b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d5b4:	4606      	mov	r6, r0
	dev = device_get_binding(argv[1]);
   1d5b6:	6850      	ldr	r0, [r2, #4]
{
   1d5b8:	4615      	mov	r5, r2
	dev = device_get_binding(argv[1]);
   1d5ba:	f008 ff2d 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d5be:	4604      	mov	r4, r0
   1d5c0:	b950      	cbnz	r0, 1d5d8 <cmd_vlist+0x28>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d5c2:	4630      	mov	r0, r6
   1d5c4:	686b      	ldr	r3, [r5, #4]
   1d5c6:	4a13      	ldr	r2, [pc, #76]	; (1d614 <cmd_vlist+0x64>)
   1d5c8:	2101      	movs	r1, #1
   1d5ca:	f004 fee3 	bl	22394 <shell_fprintf>
		return -ENODEV;
   1d5ce:	f06f 0012 	mvn.w	r0, #18
}
   1d5d2:	b002      	add	sp, #8
   1d5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->count_voltages == NULL) {
   1d5d8:	6883      	ldr	r3, [r0, #8]
   1d5da:	689b      	ldr	r3, [r3, #8]
   1d5dc:	b123      	cbz	r3, 1d5e8 <cmd_vlist+0x38>
	return api->count_voltages(dev);
   1d5de:	4798      	blx	r3
	for (unsigned int i = 0U; i < volt_cnt; i++) {
   1d5e0:	2500      	movs	r5, #0
   1d5e2:	4607      	mov	r7, r0
   1d5e4:	42bd      	cmp	r5, r7
   1d5e6:	d101      	bne.n	1d5ec <cmd_vlist+0x3c>
	return 0;
   1d5e8:	2000      	movs	r0, #0
   1d5ea:	e7f2      	b.n	1d5d2 <cmd_vlist+0x22>
	if (api->list_voltage == NULL) {
   1d5ec:	68a3      	ldr	r3, [r4, #8]
   1d5ee:	68db      	ldr	r3, [r3, #12]
   1d5f0:	b11b      	cbz	r3, 1d5fa <cmd_vlist+0x4a>
	return api->list_voltage(dev, idx, volt_uv);
   1d5f2:	aa01      	add	r2, sp, #4
   1d5f4:	4629      	mov	r1, r5
   1d5f6:	4620      	mov	r0, r4
   1d5f8:	4798      	blx	r3
		if ((i == 0U) || (last_volt_uv != volt_uv)) {
   1d5fa:	9a01      	ldr	r2, [sp, #4]
   1d5fc:	b10d      	cbz	r5, 1d602 <cmd_vlist+0x52>
   1d5fe:	4590      	cmp	r8, r2
   1d600:	d003      	beq.n	1d60a <cmd_vlist+0x5a>
			microtoshell(sh, 'V', volt_uv);
   1d602:	2156      	movs	r1, #86	; 0x56
   1d604:	4630      	mov	r0, r6
   1d606:	f7ff ff21 	bl	1d44c <microtoshell>
		last_volt_uv = volt_uv;
   1d60a:	f8dd 8004 	ldr.w	r8, [sp, #4]
	for (unsigned int i = 0U; i < volt_cnt; i++) {
   1d60e:	3501      	adds	r5, #1
   1d610:	e7e8      	b.n	1d5e4 <cmd_vlist+0x34>
   1d612:	bf00      	nop
   1d614:	0002e3fa 	.word	0x0002e3fa

0001d618 <cmd_disable>:
{
   1d618:	b538      	push	{r3, r4, r5, lr}
   1d61a:	4605      	mov	r5, r0
	dev = device_get_binding(argv[1]);
   1d61c:	6850      	ldr	r0, [r2, #4]
{
   1d61e:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
   1d620:	f008 fefa 	bl	26418 <device_get_binding>
	if (dev == NULL) {
   1d624:	b948      	cbnz	r0, 1d63a <cmd_disable+0x22>
		shell_error(sh, "Regulator device %s not available", argv[1]);
   1d626:	6863      	ldr	r3, [r4, #4]
   1d628:	4a0a      	ldr	r2, [pc, #40]	; (1d654 <cmd_disable+0x3c>)
   1d62a:	2101      	movs	r1, #1
   1d62c:	4628      	mov	r0, r5
   1d62e:	f004 feb1 	bl	22394 <shell_fprintf>
   1d632:	f06f 0412 	mvn.w	r4, #18
}
   1d636:	4620      	mov	r0, r4
   1d638:	bd38      	pop	{r3, r4, r5, pc}
	ret = regulator_disable(dev);
   1d63a:	f008 fe3a 	bl	262b2 <regulator_disable>
	if (ret < 0) {
   1d63e:	1e04      	subs	r4, r0, #0
   1d640:	da06      	bge.n	1d650 <cmd_disable+0x38>
		shell_error(sh, "Could not disable regulator (%d)", ret);
   1d642:	4a05      	ldr	r2, [pc, #20]	; (1d658 <cmd_disable+0x40>)
   1d644:	4623      	mov	r3, r4
   1d646:	2101      	movs	r1, #1
   1d648:	4628      	mov	r0, r5
   1d64a:	f004 fea3 	bl	22394 <shell_fprintf>
		return ret;
   1d64e:	e7f2      	b.n	1d636 <cmd_disable+0x1e>
	return 0;
   1d650:	2400      	movs	r4, #0
   1d652:	e7f0      	b.n	1d636 <cmd_disable+0x1e>
   1d654:	0002e3fa 	.word	0x0002e3fa
   1d658:	0002e5d6 	.word	0x0002e5d6

0001d65c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1d65c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1d65e:	794b      	ldrb	r3, [r1, #5]
   1d660:	2b01      	cmp	r3, #1
   1d662:	d120      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d664:	798b      	ldrb	r3, [r1, #6]
   1d666:	2b03      	cmp	r3, #3
   1d668:	d11d      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1d66a:	79cd      	ldrb	r5, [r1, #7]
   1d66c:	b10d      	cbz	r5, 1d672 <uarte_nrfx_configure+0x16>
   1d66e:	2d01      	cmp	r5, #1
   1d670:	d119      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1d672:	790a      	ldrb	r2, [r1, #4]
   1d674:	b112      	cbz	r2, 1d67c <uarte_nrfx_configure+0x20>
   1d676:	2a02      	cmp	r2, #2
   1d678:	d115      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
   1d67a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d67c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d67e:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1d680:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d684:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   1d686:	d064      	beq.n	1d752 <uarte_nrfx_configure+0xf6>
   1d688:	d82b      	bhi.n	1d6e2 <uarte_nrfx_configure+0x86>
   1d68a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d68e:	d063      	beq.n	1d758 <uarte_nrfx_configure+0xfc>
   1d690:	d814      	bhi.n	1d6bc <uarte_nrfx_configure+0x60>
   1d692:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d696:	d061      	beq.n	1d75c <uarte_nrfx_configure+0x100>
   1d698:	d808      	bhi.n	1d6ac <uarte_nrfx_configure+0x50>
   1d69a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d69e:	d060      	beq.n	1d762 <uarte_nrfx_configure+0x106>
   1d6a0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d6a4:	d060      	beq.n	1d768 <uarte_nrfx_configure+0x10c>
   1d6a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d6aa:	e051      	b.n	1d750 <uarte_nrfx_configure+0xf4>
   1d6ac:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d6b0:	d05d      	beq.n	1d76e <uarte_nrfx_configure+0x112>
   1d6b2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d6b6:	d1f6      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d6b8:	4b37      	ldr	r3, [pc, #220]	; (1d798 <uarte_nrfx_configure+0x13c>)
   1d6ba:	e03c      	b.n	1d736 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d6bc:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d6c0:	d058      	beq.n	1d774 <uarte_nrfx_configure+0x118>
   1d6c2:	d807      	bhi.n	1d6d4 <uarte_nrfx_configure+0x78>
   1d6c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d6c8:	d056      	beq.n	1d778 <uarte_nrfx_configure+0x11c>
   1d6ca:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d6ce:	d1ea      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d6d0:	4b32      	ldr	r3, [pc, #200]	; (1d79c <uarte_nrfx_configure+0x140>)
   1d6d2:	e030      	b.n	1d736 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d6d4:	f647 2412 	movw	r4, #31250	; 0x7a12
   1d6d8:	42a3      	cmp	r3, r4
   1d6da:	d1e4      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d6dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d6e0:	e029      	b.n	1d736 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d6e2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d6e6:	d049      	beq.n	1d77c <uarte_nrfx_configure+0x120>
   1d6e8:	d813      	bhi.n	1d712 <uarte_nrfx_configure+0xb6>
   1d6ea:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d6ee:	d048      	beq.n	1d782 <uarte_nrfx_configure+0x126>
   1d6f0:	d809      	bhi.n	1d706 <uarte_nrfx_configure+0xaa>
   1d6f2:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1d6f6:	42a3      	cmp	r3, r4
   1d6f8:	d045      	beq.n	1d786 <uarte_nrfx_configure+0x12a>
   1d6fa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d6fe:	d1d2      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d700:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d704:	e017      	b.n	1d736 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d706:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d70a:	d1cc      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d70c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d710:	e011      	b.n	1d736 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d712:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d716:	d039      	beq.n	1d78c <uarte_nrfx_configure+0x130>
   1d718:	d808      	bhi.n	1d72c <uarte_nrfx_configure+0xd0>
   1d71a:	4c21      	ldr	r4, [pc, #132]	; (1d7a0 <uarte_nrfx_configure+0x144>)
   1d71c:	42a3      	cmp	r3, r4
   1d71e:	d038      	beq.n	1d792 <uarte_nrfx_configure+0x136>
   1d720:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d724:	d1bf      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d726:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d72a:	e004      	b.n	1d736 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d72c:	4c1d      	ldr	r4, [pc, #116]	; (1d7a4 <uarte_nrfx_configure+0x148>)
   1d72e:	42a3      	cmp	r3, r4
   1d730:	d1b9      	bne.n	1d6a6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d732:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d736:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d738:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   1d73c:	6843      	ldr	r3, [r0, #4]
   1d73e:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1d740:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d742:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1d746:	c903      	ldmia	r1, {r0, r1}
   1d748:	1d23      	adds	r3, r4, #4
   1d74a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1d74e:	2000      	movs	r0, #0
}
   1d750:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d752:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d756:	e7ee      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d758:	4b13      	ldr	r3, [pc, #76]	; (1d7a8 <uarte_nrfx_configure+0x14c>)
   1d75a:	e7ec      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d75c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d760:	e7e9      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1d762:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d766:	e7e6      	b.n	1d736 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d768:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d76c:	e7e3      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d76e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d772:	e7e0      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d774:	4b0d      	ldr	r3, [pc, #52]	; (1d7ac <uarte_nrfx_configure+0x150>)
   1d776:	e7de      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d778:	4b0d      	ldr	r3, [pc, #52]	; (1d7b0 <uarte_nrfx_configure+0x154>)
   1d77a:	e7dc      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d77c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d780:	e7d9      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d782:	4b0c      	ldr	r3, [pc, #48]	; (1d7b4 <uarte_nrfx_configure+0x158>)
   1d784:	e7d7      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d786:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d78a:	e7d4      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d78c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d790:	e7d1      	b.n	1d736 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d792:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d796:	e7ce      	b.n	1d736 <uarte_nrfx_configure+0xda>
   1d798:	0013b000 	.word	0x0013b000
   1d79c:	004ea000 	.word	0x004ea000
   1d7a0:	0003d090 	.word	0x0003d090
   1d7a4:	000f4240 	.word	0x000f4240
   1d7a8:	00275000 	.word	0x00275000
   1d7ac:	0075c000 	.word	0x0075c000
   1d7b0:	003af000 	.word	0x003af000
   1d7b4:	013a9000 	.word	0x013a9000

0001d7b8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d7bc:	b082      	sub	sp, #8
   1d7be:	4681      	mov	r9, r0
   1d7c0:	2200      	movs	r2, #0
   1d7c2:	2101      	movs	r1, #1
   1d7c4:	2002      	movs	r0, #2
   1d7c6:	af00      	add	r7, sp, #0
   1d7c8:	f7e9 fd0c 	bl	71e4 <z_arm_irq_priority_set>
   1d7cc:	2002      	movs	r0, #2
   1d7ce:	f7e9 fcd9 	bl	7184 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1d7d2:	f8d9 8004 	ldr.w	r8, [r9, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d7d6:	f8d9 6010 	ldr.w	r6, [r9, #16]
	return config->uarte_regs;
   1d7da:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d7de:	2100      	movs	r1, #0
   1d7e0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1d7e4:	f8c6 9000 	str.w	r9, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d7e8:	f8d8 a00c 	ldr.w	sl, [r8, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1d7ec:	1d3a      	adds	r2, r7, #4
   1d7ee:	4650      	mov	r0, sl
   1d7f0:	f008 ffa5 	bl	2673e <pinctrl_lookup_state>
	if (ret < 0) {
   1d7f4:	1e05      	subs	r5, r0, #0
   1d7f6:	db2f      	blt.n	1d858 <uarte_0_init+0xa0>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1d7f8:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d7fa:	f8da 2000 	ldr.w	r2, [sl]
   1d7fe:	7919      	ldrb	r1, [r3, #4]
   1d800:	6818      	ldr	r0, [r3, #0]
   1d802:	f008 ffaf 	bl	26764 <pinctrl_configure_pins>
	if (err < 0) {
   1d806:	1e05      	subs	r5, r0, #0
   1d808:	db26      	blt.n	1d858 <uarte_0_init+0xa0>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d80a:	1d31      	adds	r1, r6, #4
   1d80c:	4648      	mov	r0, r9
   1d80e:	f7ff ff25 	bl	1d65c <uarte_nrfx_configure>
	if (err) {
   1d812:	4605      	mov	r5, r0
   1d814:	bb00      	cbnz	r0, 1d858 <uarte_0_init+0xa0>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d816:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d81a:	0798      	lsls	r0, r3, #30
   1d81c:	d535      	bpl.n	1d88a <uarte_0_init+0xd2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d81e:	f106 001c 	add.w	r0, r6, #28
   1d822:	f001 f9cf 	bl	1ebc4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d826:	4b2e      	ldr	r3, [pc, #184]	; (1d8e0 <uarte_0_init+0x128>)
   1d828:	4298      	cmp	r0, r3
   1d82a:	d01a      	beq.n	1d862 <uarte_0_init+0xaa>
		LOG_ERR("Failed to allocate PPI Channel");
   1d82c:	482d      	ldr	r0, [pc, #180]	; (1d8e4 <uarte_0_init+0x12c>)
   1d82e:	6803      	ldr	r3, [r0, #0]
   1d830:	0759      	lsls	r1, r3, #29
   1d832:	d00f      	beq.n	1d854 <uarte_0_init+0x9c>
   1d834:	466c      	mov	r4, sp
   1d836:	b088      	sub	sp, #32
   1d838:	466a      	mov	r2, sp
   1d83a:	4b2b      	ldr	r3, [pc, #172]	; (1d8e8 <uarte_0_init+0x130>)
   1d83c:	6153      	str	r3, [r2, #20]
   1d83e:	4b2b      	ldr	r3, [pc, #172]	; (1d8ec <uarte_0_init+0x134>)
   1d840:	6193      	str	r3, [r2, #24]
   1d842:	2303      	movs	r3, #3
   1d844:	f842 3f10 	str.w	r3, [r2, #16]!
   1d848:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d84c:	462b      	mov	r3, r5
   1d84e:	f7e6 fc7f 	bl	4150 <z_impl_z_log_msg_static_create>
   1d852:	46a5      	mov	sp, r4
		return -EIO;
   1d854:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   1d858:	4628      	mov	r0, r5
   1d85a:	3708      	adds	r7, #8
   1d85c:	46bd      	mov	sp, r7
   1d85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d862:	7f33      	ldrb	r3, [r6, #28]
   1d864:	00db      	lsls	r3, r3, #3
   1d866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d86a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1d86e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d872:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1d876:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d87a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d87e:	7f32      	ldrb	r2, [r6, #28]
   1d880:	2301      	movs	r3, #1
   1d882:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1d884:	4a1a      	ldr	r2, [pc, #104]	; (1d8f0 <uarte_0_init+0x138>)
   1d886:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d88a:	2308      	movs	r3, #8
   1d88c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d890:	f898 3008 	ldrb.w	r3, [r8, #8]
   1d894:	b953      	cbnz	r3, 1d8ac <uarte_0_init+0xf4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d896:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d89a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d89e:	69b3      	ldr	r3, [r6, #24]
   1d8a0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d8a4:	2301      	movs	r3, #1
   1d8a6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8aa:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d8ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d8b0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d8b2:	bf5c      	itt	pl
   1d8b4:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d8b8:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d8bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d8c0:	06db      	lsls	r3, r3, #27
   1d8c2:	bf44      	itt	mi
   1d8c4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d8c8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d8cc:	6973      	ldr	r3, [r6, #20]
   1d8ce:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d8d2:	2300      	movs	r3, #0
   1d8d4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8d8:	2301      	movs	r3, #1
   1d8da:	60a3      	str	r3, [r4, #8]
   1d8dc:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1d8de:	e7bb      	b.n	1d858 <uarte_0_init+0xa0>
   1d8e0:	0bad0000 	.word	0x0bad0000
   1d8e4:	20000b58 	.word	0x20000b58
   1d8e8:	0002e8eb 	.word	0x0002e8eb
   1d8ec:	0002e90e 	.word	0x0002e90e
   1d8f0:	4001f000 	.word	0x4001f000

0001d8f4 <uarte_nrfx_poll_out>:
{
   1d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8f6:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1d8f8:	6907      	ldr	r7, [r0, #16]
{
   1d8fa:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d8fc:	f009 f8d6 	bl	26aac <k_is_in_isr>
   1d900:	b9b0      	cbnz	r0, 1d930 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1d902:	4b21      	ldr	r3, [pc, #132]	; (1d988 <uarte_nrfx_poll_out+0x94>)
   1d904:	781b      	ldrb	r3, [r3, #0]
   1d906:	b19b      	cbz	r3, 1d930 <uarte_nrfx_poll_out+0x3c>
{
   1d908:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d90a:	6860      	ldr	r0, [r4, #4]
   1d90c:	f008 fe55 	bl	265ba <is_tx_ready.isra.0>
   1d910:	bb00      	cbnz	r0, 1d954 <uarte_nrfx_poll_out+0x60>
   1d912:	2001      	movs	r0, #1
   1d914:	f008 ff91 	bl	2683a <nrfx_busy_wait>
   1d918:	3e01      	subs	r6, #1
   1d91a:	d1f6      	bne.n	1d90a <uarte_nrfx_poll_out+0x16>
   1d91c:	2100      	movs	r1, #0
   1d91e:	2021      	movs	r0, #33	; 0x21
   1d920:	f002 ff0e 	bl	20740 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d924:	e7f0      	b.n	1d908 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1d926:	f381 8811 	msr	BASEPRI, r1
   1d92a:	f3bf 8f6f 	isb	sy
}
   1d92e:	e7f5      	b.n	1d91c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1d930:	f04f 0320 	mov.w	r3, #32
   1d934:	f3ef 8111 	mrs	r1, BASEPRI
   1d938:	f383 8812 	msr	BASEPRI_MAX, r3
   1d93c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d940:	6860      	ldr	r0, [r4, #4]
   1d942:	460e      	mov	r6, r1
   1d944:	f008 fe39 	bl	265ba <is_tx_ready.isra.0>
   1d948:	b990      	cbnz	r0, 1d970 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1d94a:	f381 8811 	msr	BASEPRI, r1
   1d94e:	f3bf 8f6f 	isb	sy
}
   1d952:	e7ed      	b.n	1d930 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1d954:	f04f 0320 	mov.w	r3, #32
   1d958:	f3ef 8111 	mrs	r1, BASEPRI
   1d95c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d960:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d964:	6860      	ldr	r0, [r4, #4]
   1d966:	460e      	mov	r6, r1
   1d968:	f008 fe27 	bl	265ba <is_tx_ready.isra.0>
   1d96c:	2800      	cmp	r0, #0
   1d96e:	d0da      	beq.n	1d926 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1d970:	697b      	ldr	r3, [r7, #20]
   1d972:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1d974:	6979      	ldr	r1, [r7, #20]
   1d976:	2201      	movs	r2, #1
   1d978:	4620      	mov	r0, r4
   1d97a:	f008 fd5e 	bl	2643a <tx_start>
	__asm__ volatile(
   1d97e:	f386 8811 	msr	BASEPRI, r6
   1d982:	f3bf 8f6f 	isb	sy
}
   1d986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d988:	20004032 	.word	0x20004032

0001d98c <random_byte_get>:
	__asm__ volatile(
   1d98c:	f04f 0320 	mov.w	r3, #32
   1d990:	f3ef 8211 	mrs	r2, BASEPRI
   1d994:	f383 8812 	msr	BASEPRI_MAX, r3
   1d998:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1d99c:	4b09      	ldr	r3, [pc, #36]	; (1d9c4 <random_byte_get+0x38>)
   1d99e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1d9a2:	b161      	cbz	r1, 1d9be <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d9a4:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1d9a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d9aa:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1d9ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1d9b2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1d9b4:	f382 8811 	msr	BASEPRI, r2
   1d9b8:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1d9bc:	4770      	bx	lr
	int retval = -EAGAIN;
   1d9be:	f06f 000a 	mvn.w	r0, #10
   1d9c2:	e7f7      	b.n	1d9b4 <random_byte_get+0x28>
   1d9c4:	4000d000 	.word	0x4000d000

0001d9c8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1d9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9ca:	4603      	mov	r3, r0
   1d9cc:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1d9ce:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1d9d0:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1d9d4:	f04f 0520 	mov.w	r5, #32
   1d9d8:	f3ef 8211 	mrs	r2, BASEPRI
   1d9dc:	f385 8812 	msr	BASEPRI_MAX, r5
   1d9e0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1d9e4:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1d9e6:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1d9ea:	1be4      	subs	r4, r4, r7
   1d9ec:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1d9f0:	42a0      	cmp	r0, r4
		len = available;
   1d9f2:	bf88      	it	hi
   1d9f4:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1d9f6:	183e      	adds	r6, r7, r0
   1d9f8:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1d9fc:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1d9fe:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1da00:	f382 8811 	msr	BASEPRI, r2
   1da04:	f3bf 8f6f 	isb	sy
   1da08:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1da0a:	428a      	cmp	r2, r1
   1da0c:	d117      	bne.n	1da3e <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1da0e:	4577      	cmp	r7, lr
   1da10:	d10d      	bne.n	1da2e <rng_pool_get+0x66>
	__asm__ volatile(
   1da12:	f04f 0120 	mov.w	r1, #32
   1da16:	f3ef 8211 	mrs	r2, BASEPRI
   1da1a:	f381 8812 	msr	BASEPRI_MAX, r1
   1da1e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1da22:	7819      	ldrb	r1, [r3, #0]
   1da24:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1da26:	f382 8811 	msr	BASEPRI, r2
   1da2a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1da2e:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1da30:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1da32:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1da34:	bf22      	ittt	cs
   1da36:	4b06      	ldrcs	r3, [pc, #24]	; (1da50 <rng_pool_get+0x88>)
   1da38:	2201      	movcs	r2, #1
   1da3a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1da3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1da3e:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1da40:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1da42:	7976      	ldrb	r6, [r6, #5]
   1da44:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1da48:	ea05 050c 	and.w	r5, r5, ip
   1da4c:	e7dd      	b.n	1da0a <rng_pool_get+0x42>
   1da4e:	bf00      	nop
   1da50:	4000d000 	.word	0x4000d000

0001da54 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1da54:	43db      	mvns	r3, r3
{
   1da56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1da5a:	f013 0501 	ands.w	r5, r3, #1
{
   1da5e:	460e      	mov	r6, r1
   1da60:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1da62:	d004      	beq.n	1da6e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1da64:	4821      	ldr	r0, [pc, #132]	; (1daec <entropy_nrf5_get_entropy_isr+0x98>)
   1da66:	f7ff ffaf 	bl	1d9c8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1da6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1da6e:	b3a2      	cbz	r2, 1dada <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1da70:	f04f 0320 	mov.w	r3, #32
   1da74:	f3ef 8811 	mrs	r8, BASEPRI
   1da78:	f383 8812 	msr	BASEPRI_MAX, r3
   1da7c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1da80:	200d      	movs	r0, #13
   1da82:	f7e9 fba1 	bl	71c8 <arch_irq_is_enabled>
   1da86:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1da88:	200d      	movs	r0, #13
   1da8a:	f7e9 fb89 	bl	71a0 <arch_irq_disable>
	__asm__ volatile(
   1da8e:	f388 8811 	msr	BASEPRI, r8
   1da92:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1da96:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1daf0 <entropy_nrf5_get_entropy_isr+0x9c>
   1da9a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1daf4 <entropy_nrf5_get_entropy_isr+0xa0>
   1da9e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1daa2:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1daa6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1daaa:	2301      	movs	r3, #1
   1daac:	f8c8 3000 	str.w	r3, [r8]
   1dab0:	4625      	mov	r5, r4
   1dab2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1dab6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1daba:	b183      	cbz	r3, 1dade <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1dabc:	f7ff ff66 	bl	1d98c <random_byte_get>
			if (byte < 0) {
   1dac0:	1e03      	subs	r3, r0, #0
   1dac2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1dac6:	dbf6      	blt.n	1dab6 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1dac8:	3d01      	subs	r5, #1
   1daca:	b2ad      	uxth	r5, r5
   1dacc:	5573      	strb	r3, [r6, r5]
		} while (len);
   1dace:	2d00      	cmp	r5, #0
   1dad0:	d1f1      	bne.n	1dab6 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1dad2:	b117      	cbz	r7, 1dada <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1dad4:	200d      	movs	r0, #13
   1dad6:	f7e9 fb55 	bl	7184 <arch_irq_enable>
	return cnt;
   1dada:	4620      	mov	r0, r4
   1dadc:	e7c5      	b.n	1da6a <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1dade:	f3bf 8f4f 	dsb	sy
				__WFE();
   1dae2:	bf20      	wfe
				__SEV();
   1dae4:	bf40      	sev
				__WFE();
   1dae6:	bf20      	wfe
   1dae8:	e7e5      	b.n	1dab6 <entropy_nrf5_get_entropy_isr+0x62>
   1daea:	bf00      	nop
   1daec:	20003948 	.word	0x20003948
   1daf0:	4000d000 	.word	0x4000d000
   1daf4:	e000e100 	.word	0xe000e100

0001daf8 <entropy_nrf5_get_entropy>:
{
   1daf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   1dafc:	4f12      	ldr	r7, [pc, #72]	; (1db48 <entropy_nrf5_get_entropy+0x50>)
   1dafe:	460d      	mov	r5, r1
   1db00:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1db02:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1db06:	b914      	cbnz	r4, 1db0e <entropy_nrf5_get_entropy+0x16>
}
   1db08:	4620      	mov	r0, r4
   1db0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1db0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1db16:	4638      	mov	r0, r7
   1db18:	f002 f92e 	bl	1fd78 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1db1c:	4622      	mov	r2, r4
   1db1e:	4629      	mov	r1, r5
   1db20:	4640      	mov	r0, r8
   1db22:	f7ff ff51 	bl	1d9c8 <rng_pool_get>
   1db26:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1db28:	4638      	mov	r0, r7
   1db2a:	f002 f8ff 	bl	1fd2c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1db2e:	b93e      	cbnz	r6, 1db40 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1db30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1db34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db38:	4804      	ldr	r0, [pc, #16]	; (1db4c <entropy_nrf5_get_entropy+0x54>)
   1db3a:	f002 f91d 	bl	1fd78 <z_impl_k_sem_take>
	while (len) {
   1db3e:	e7e6      	b.n	1db0e <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   1db40:	1ba4      	subs	r4, r4, r6
   1db42:	b2a4      	uxth	r4, r4
		buf += bytes;
   1db44:	4435      	add	r5, r6
   1db46:	e7de      	b.n	1db06 <entropy_nrf5_get_entropy+0xe>
   1db48:	20003918 	.word	0x20003918
   1db4c:	20003930 	.word	0x20003930

0001db50 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1db50:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1db52:	4c19      	ldr	r4, [pc, #100]	; (1dbb8 <entropy_nrf5_init+0x68>)
   1db54:	2201      	movs	r2, #1
   1db56:	4611      	mov	r1, r2
   1db58:	4620      	mov	r0, r4
   1db5a:	f009 f891 	bl	26c80 <z_impl_k_sem_init>
   1db5e:	2201      	movs	r2, #1
   1db60:	2100      	movs	r1, #0
   1db62:	f104 0018 	add.w	r0, r4, #24
   1db66:	f009 f88b 	bl	26c80 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1db6a:	f240 4307 	movw	r3, #1031	; 0x407
   1db6e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1db72:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1db76:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1db78:	230c      	movs	r3, #12
   1db7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1db7e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1db80:	4b0e      	ldr	r3, [pc, #56]	; (1dbbc <entropy_nrf5_init+0x6c>)
   1db82:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1db86:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1db8a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1db8e:	f042 0201 	orr.w	r2, r2, #1
   1db92:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1db96:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1db98:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1db9c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1dba0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1dba4:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1dba6:	6019      	str	r1, [r3, #0]
   1dba8:	200d      	movs	r0, #13
   1dbaa:	f7e9 fb1b 	bl	71e4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1dbae:	200d      	movs	r0, #13
   1dbb0:	f7e9 fae8 	bl	7184 <arch_irq_enable>

	return 0;
}
   1dbb4:	4628      	mov	r0, r5
   1dbb6:	bd38      	pop	{r3, r4, r5, pc}
   1dbb8:	20003918 	.word	0x20003918
   1dbbc:	4000d000 	.word	0x4000d000

0001dbc0 <isr>:
{
   1dbc0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1dbc2:	f7ff fee3 	bl	1d98c <random_byte_get>
	if (byte < 0) {
   1dbc6:	2800      	cmp	r0, #0
   1dbc8:	db20      	blt.n	1dc0c <isr+0x4c>
	uint8_t last  = rngp->last;
   1dbca:	4b17      	ldr	r3, [pc, #92]	; (1dc28 <isr+0x68>)
   1dbcc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1dbd0:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1dbd4:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1dbd8:	1b14      	subs	r4, r2, r4
   1dbda:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1dbde:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1dbe0:	d10d      	bne.n	1dbfe <isr+0x3e>
	uint8_t last  = rngp->last;
   1dbe2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1dbe6:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1dbea:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1dbee:	1b14      	subs	r4, r2, r4
   1dbf0:	ea31 0404 	bics.w	r4, r1, r4
   1dbf4:	d10b      	bne.n	1dc0e <isr+0x4e>
   1dbf6:	4b0d      	ldr	r3, [pc, #52]	; (1dc2c <isr+0x6c>)
   1dbf8:	2201      	movs	r2, #1
   1dbfa:	605a      	str	r2, [r3, #4]
}
   1dbfc:	e00e      	b.n	1dc1c <isr+0x5c>
	rngp->buffer[last] = byte;
   1dbfe:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1dc00:	3201      	adds	r2, #1
   1dc02:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1dc04:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1dc08:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1dc0c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1dc0e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1dc10:	3201      	adds	r2, #1
   1dc12:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1dc14:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1dc18:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1dc1c:	4804      	ldr	r0, [pc, #16]	; (1dc30 <isr+0x70>)
}
   1dc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dc22:	f002 b883 	b.w	1fd2c <z_impl_k_sem_give>
   1dc26:	bf00      	nop
   1dc28:	20003918 	.word	0x20003918
   1dc2c:	4000d000 	.word	0x4000d000
   1dc30:	20003930 	.word	0x20003930

0001dc34 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1dc34:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1dc36:	2301      	movs	r3, #1
   1dc38:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dc3a:	4a0e      	ldr	r2, [pc, #56]	; (1dc74 <compare_int_lock+0x40>)
   1dc3c:	f3bf 8f5b 	dmb	ish
   1dc40:	43dc      	mvns	r4, r3
   1dc42:	e852 1f00 	ldrex	r1, [r2]
   1dc46:	ea01 0504 	and.w	r5, r1, r4
   1dc4a:	e842 5600 	strex	r6, r5, [r2]
   1dc4e:	2e00      	cmp	r6, #0
   1dc50:	d1f7      	bne.n	1dc42 <compare_int_lock+0xe>
   1dc52:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dc56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1dc5a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1dc5c:	4806      	ldr	r0, [pc, #24]	; (1dc78 <compare_int_lock+0x44>)
   1dc5e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1dc62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1dc66:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1dc6a:	420b      	tst	r3, r1
}
   1dc6c:	bf14      	ite	ne
   1dc6e:	2001      	movne	r0, #1
   1dc70:	2000      	moveq	r0, #0
   1dc72:	bd70      	pop	{r4, r5, r6, pc}
   1dc74:	20003970 	.word	0x20003970
   1dc78:	40011000 	.word	0x40011000

0001dc7c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1dc7c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1dc7e:	490e      	ldr	r1, [pc, #56]	; (1dcb8 <sys_clock_timeout_handler+0x3c>)
   1dc80:	e9d1 3400 	ldrd	r3, r4, [r1]
   1dc84:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1dc86:	18c3      	adds	r3, r0, r3
   1dc88:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1dc8c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1dc90:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1dc94:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1dc98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1dc9c:	d209      	bcs.n	1dcb2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1dc9e:	4b07      	ldr	r3, [pc, #28]	; (1dcbc <sys_clock_timeout_handler+0x40>)
   1dca0:	681b      	ldr	r3, [r3, #0]
   1dca2:	0a1a      	lsrs	r2, r3, #8
   1dca4:	061b      	lsls	r3, r3, #24
   1dca6:	199c      	adds	r4, r3, r6
   1dca8:	4b05      	ldr	r3, [pc, #20]	; (1dcc0 <sys_clock_timeout_handler+0x44>)
   1dcaa:	f142 0500 	adc.w	r5, r2, #0
   1dcae:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1dcb2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1dcb4:	f002 bec0 	b.w	20a38 <sys_clock_announce>
   1dcb8:	20001f08 	.word	0x20001f08
   1dcbc:	20003974 	.word	0x20003974
   1dcc0:	20001f10 	.word	0x20001f10

0001dcc4 <compare_int_unlock>:
	if (key) {
   1dcc4:	b311      	cbz	r1, 1dd0c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dcc6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1dcca:	2301      	movs	r3, #1
   1dccc:	4a10      	ldr	r2, [pc, #64]	; (1dd10 <compare_int_unlock+0x4c>)
   1dcce:	4083      	lsls	r3, r0
   1dcd0:	e852 cf00 	ldrex	ip, [r2]
   1dcd4:	ea4c 0c03 	orr.w	ip, ip, r3
   1dcd8:	e842 c100 	strex	r1, ip, [r2]
   1dcdc:	2900      	cmp	r1, #0
   1dcde:	d1f7      	bne.n	1dcd0 <compare_int_unlock+0xc>
   1dce0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1dce4:	4a0b      	ldr	r2, [pc, #44]	; (1dd14 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dcea:	4083      	lsls	r3, r0
   1dcec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dcf0:	4b09      	ldr	r3, [pc, #36]	; (1dd18 <compare_int_unlock+0x54>)
   1dcf2:	f3bf 8f5b 	dmb	ish
   1dcf6:	681b      	ldr	r3, [r3, #0]
   1dcf8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1dcfc:	40c3      	lsrs	r3, r0
   1dcfe:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dd00:	bf42      	ittt	mi
   1dd02:	4b06      	ldrmi	r3, [pc, #24]	; (1dd1c <compare_int_unlock+0x58>)
   1dd04:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1dd08:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1dd0c:	4770      	bx	lr
   1dd0e:	bf00      	nop
   1dd10:	20003970 	.word	0x20003970
   1dd14:	40011000 	.word	0x40011000
   1dd18:	2000396c 	.word	0x2000396c
   1dd1c:	e000e100 	.word	0xe000e100

0001dd20 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1dd20:	4b0d      	ldr	r3, [pc, #52]	; (1dd58 <z_nrf_rtc_timer_read+0x38>)
   1dd22:	6818      	ldr	r0, [r3, #0]
   1dd24:	0a01      	lsrs	r1, r0, #8
   1dd26:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1dd28:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1dd2c:	4b0b      	ldr	r3, [pc, #44]	; (1dd5c <z_nrf_rtc_timer_read+0x3c>)
   1dd2e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1dd32:	1818      	adds	r0, r3, r0
   1dd34:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1dd38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1dd3c:	d20a      	bcs.n	1dd54 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1dd3e:	4b08      	ldr	r3, [pc, #32]	; (1dd60 <z_nrf_rtc_timer_read+0x40>)
   1dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd44:	4290      	cmp	r0, r2
   1dd46:	eb71 0303 	sbcs.w	r3, r1, r3
   1dd4a:	d203      	bcs.n	1dd54 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1dd4c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1dd50:	f141 0100 	adc.w	r1, r1, #0
}
   1dd54:	4770      	bx	lr
   1dd56:	bf00      	nop
   1dd58:	20003974 	.word	0x20003974
   1dd5c:	40011000 	.word	0x40011000
   1dd60:	20001f10 	.word	0x20001f10

0001dd64 <compare_set>:
{
   1dd64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd68:	4614      	mov	r4, r2
   1dd6a:	461d      	mov	r5, r3
   1dd6c:	4606      	mov	r6, r0
	key = compare_int_lock(chan);
   1dd6e:	f7ff ff61 	bl	1dc34 <compare_int_lock>
   1dd72:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1dd74:	f7ff ffd4 	bl	1dd20 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1dd78:	42a0      	cmp	r0, r4
   1dd7a:	eb71 0305 	sbcs.w	r3, r1, r5
   1dd7e:	d241      	bcs.n	1de04 <compare_set+0xa0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1dd80:	4b32      	ldr	r3, [pc, #200]	; (1de4c <compare_set+0xe8>)
   1dd82:	1a20      	subs	r0, r4, r0
   1dd84:	eb65 0101 	sbc.w	r1, r5, r1
   1dd88:	4298      	cmp	r0, r3
   1dd8a:	f171 0100 	sbcs.w	r1, r1, #0
   1dd8e:	d259      	bcs.n	1de44 <compare_set+0xe0>
		if (target_time != cc_data[chan].target_time) {
   1dd90:	4b2f      	ldr	r3, [pc, #188]	; (1de50 <compare_set+0xec>)
   1dd92:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1dd96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1dd9a:	429d      	cmp	r5, r3
   1dd9c:	bf08      	it	eq
   1dd9e:	4294      	cmpeq	r4, r2
   1dda0:	d03e      	beq.n	1de20 <compare_set+0xbc>
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1dda2:	f106 0350 	add.w	r3, r6, #80	; 0x50
   1dda6:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dda8:	b29b      	uxth	r3, r3
   1ddaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ddae:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    p_reg->EVTENCLR = mask;
   1ddb2:	4828      	ldr	r0, [pc, #160]	; (1de54 <compare_set+0xf0>)
		if ((counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1ddb4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1de58 <compare_set+0xf4>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ddb8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ddbc:	2200      	movs	r2, #0
   1ddbe:	40b1      	lsls	r1, r6
    p_reg->EVTENCLR = mask;
   1ddc0:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ddc4:	601a      	str	r2, [r3, #0]
   1ddc6:	681a      	ldr	r2, [r3, #0]
	return absolute_time & COUNTER_MAX;
   1ddc8:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1ddcc:	f04f 0c03 	mov.w	ip, #3
    p_reg->CC[ch] = cc_val;
   1ddd0:	f506 78a8 	add.w	r8, r6, #336	; 0x150
	return (a - b) & COUNTER_MAX;
   1ddd4:	f06f 0902 	mvn.w	r9, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1ddd8:	f02b 427f 	bic.w	r2, fp, #4278190080	; 0xff000000
   1dddc:	f840 2028 	str.w	r2, [r0, r8, lsl #2]
    p_reg->EVTENSET = mask;
   1dde0:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
     return p_reg->COUNTER;
   1dde4:	f8d0 e504 	ldr.w	lr, [r0, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1dde8:	eba9 020e 	sub.w	r2, r9, lr
   1ddec:	445a      	add	r2, fp
   1ddee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if ((counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1ddf2:	4552      	cmp	r2, sl
   1ddf4:	d914      	bls.n	1de20 <compare_set+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ddf6:	681a      	ldr	r2, [r3, #0]
		    &&
   1ddf8:	b992      	cbnz	r2, 1de20 <compare_set+0xbc>
			cc_val = now + cc_inc;
   1ddfa:	eb0e 0b0c 	add.w	fp, lr, ip
			cc_inc++;
   1ddfe:	f10c 0c01 	add.w	ip, ip, #1
	for (;;) {
   1de02:	e7e9      	b.n	1ddd8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1de04:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1de06:	4a15      	ldr	r2, [pc, #84]	; (1de5c <compare_set+0xf8>)
   1de08:	f3bf 8f5b 	dmb	ish
   1de0c:	40b3      	lsls	r3, r6
   1de0e:	e852 0f00 	ldrex	r0, [r2]
   1de12:	4318      	orrs	r0, r3
   1de14:	e842 0100 	strex	r1, r0, [r2]
   1de18:	2900      	cmp	r1, #0
   1de1a:	d1f8      	bne.n	1de0e <compare_set+0xaa>
   1de1c:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1de20:	490b      	ldr	r1, [pc, #44]	; (1de50 <compare_set+0xec>)
	cc_data[chan].callback = handler;
   1de22:	980a      	ldr	r0, [sp, #40]	; 0x28
	cc_data[chan].target_time = target_time;
   1de24:	0133      	lsls	r3, r6, #4
   1de26:	eb01 1206 	add.w	r2, r1, r6, lsl #4
	cc_data[chan].callback = handler;
   1de2a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1de2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1de2e:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
   1de30:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1de34:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1de36:	4630      	mov	r0, r6
   1de38:	4639      	mov	r1, r7
   1de3a:	f7ff ff43 	bl	1dcc4 <compare_int_unlock>
}
   1de3e:	4620      	mov	r0, r4
   1de40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1de44:	f06f 0415 	mvn.w	r4, #21
   1de48:	e7f5      	b.n	1de36 <compare_set+0xd2>
   1de4a:	bf00      	nop
   1de4c:	00800001 	.word	0x00800001
   1de50:	20001ef8 	.word	0x20001ef8
   1de54:	40011000 	.word	0x40011000
   1de58:	007ffffd 	.word	0x007ffffd
   1de5c:	2000396c 	.word	0x2000396c

0001de60 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1de60:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1de62:	4b19      	ldr	r3, [pc, #100]	; (1dec8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1de64:	4d19      	ldr	r5, [pc, #100]	; (1decc <sys_clock_driver_init+0x6c>)
   1de66:	2400      	movs	r4, #0
   1de68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1de70:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1de74:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1de78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1de7c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1de80:	4b13      	ldr	r3, [pc, #76]	; (1ded0 <sys_clock_driver_init+0x70>)
   1de82:	2602      	movs	r6, #2
   1de84:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1de88:	2101      	movs	r1, #1
   1de8a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1de8e:	2011      	movs	r0, #17
   1de90:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1de94:	4622      	mov	r2, r4
   1de96:	f7e9 f9a5 	bl	71e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1de9a:	2011      	movs	r0, #17
   1de9c:	f7e9 f972 	bl	7184 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1dea0:	4a0c      	ldr	r2, [pc, #48]	; (1ded4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1dea2:	2301      	movs	r3, #1
   1dea4:	60ab      	str	r3, [r5, #8]
   1dea6:	602b      	str	r3, [r5, #0]
   1dea8:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1deaa:	4b0b      	ldr	r3, [pc, #44]	; (1ded8 <sys_clock_driver_init+0x78>)
   1deac:	4a0b      	ldr	r2, [pc, #44]	; (1dedc <sys_clock_driver_init+0x7c>)
   1deae:	9300      	str	r3, [sp, #0]
   1deb0:	9401      	str	r4, [sp, #4]
   1deb2:	2300      	movs	r3, #0
   1deb4:	4620      	mov	r0, r4
   1deb6:	f7ff ff55 	bl	1dd64 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1deba:	4630      	mov	r0, r6
   1debc:	f7fd f98e 	bl	1b1dc <z_nrf_clock_control_lf_on>

	return 0;
}
   1dec0:	4620      	mov	r0, r4
   1dec2:	b002      	add	sp, #8
   1dec4:	bd70      	pop	{r4, r5, r6, pc}
   1dec6:	bf00      	nop
   1dec8:	20001ef8 	.word	0x20001ef8
   1decc:	40011000 	.word	0x40011000
   1ded0:	e000e100 	.word	0xe000e100
   1ded4:	20003970 	.word	0x20003970
   1ded8:	0001dc7d 	.word	0x0001dc7d
   1dedc:	007fffff 	.word	0x007fffff

0001dee0 <rtc_nrf_isr>:
{
   1dee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1dee4:	4c2f      	ldr	r4, [pc, #188]	; (1dfa4 <rtc_nrf_isr+0xc4>)
   1dee6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1deea:	0799      	lsls	r1, r3, #30
   1deec:	d50b      	bpl.n	1df06 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1deee:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1def2:	b143      	cbz	r3, 1df06 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1def4:	4a2c      	ldr	r2, [pc, #176]	; (1dfa8 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1def6:	2300      	movs	r3, #0
   1def8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1defc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1df00:	6813      	ldr	r3, [r2, #0]
   1df02:	3301      	adds	r3, #1
   1df04:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1df06:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1df0a:	03da      	lsls	r2, r3, #15
   1df0c:	d52a      	bpl.n	1df64 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1df0e:	f3bf 8f5b 	dmb	ish
   1df12:	4b26      	ldr	r3, [pc, #152]	; (1dfac <rtc_nrf_isr+0xcc>)
   1df14:	e853 2f00 	ldrex	r2, [r3]
   1df18:	f022 0101 	bic.w	r1, r2, #1
   1df1c:	e843 1000 	strex	r0, r1, [r3]
   1df20:	2800      	cmp	r0, #0
   1df22:	d1f7      	bne.n	1df14 <rtc_nrf_isr+0x34>
   1df24:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1df28:	07d3      	lsls	r3, r2, #31
   1df2a:	d402      	bmi.n	1df32 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1df2c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1df30:	b1c3      	cbz	r3, 1df64 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1df32:	2500      	movs	r5, #0
   1df34:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1df38:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1df3c:	f7ff fef0 	bl	1dd20 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1df40:	f04f 0320 	mov.w	r3, #32
   1df44:	f3ef 8211 	mrs	r2, BASEPRI
   1df48:	f383 8812 	msr	BASEPRI_MAX, r3
   1df4c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1df50:	4b17      	ldr	r3, [pc, #92]	; (1dfb0 <rtc_nrf_isr+0xd0>)
   1df52:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1df56:	42b0      	cmp	r0, r6
   1df58:	41b9      	sbcs	r1, r7
   1df5a:	d206      	bcs.n	1df6a <rtc_nrf_isr+0x8a>
	__asm__ volatile(
   1df5c:	f382 8811 	msr	BASEPRI, r2
   1df60:	f3bf 8f6f 	isb	sy
}
   1df64:	b003      	add	sp, #12
   1df66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1df6a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1df6e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1df72:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1df76:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1df7a:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   1df7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1df80:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1df84:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1df88:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1df8c:	f382 8811 	msr	BASEPRI, r2
   1df90:	f3bf 8f6f 	isb	sy
		if (handler) {
   1df94:	2900      	cmp	r1, #0
   1df96:	d0e5      	beq.n	1df64 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
   1df98:	9000      	str	r0, [sp, #0]
   1df9a:	4632      	mov	r2, r6
   1df9c:	463b      	mov	r3, r7
   1df9e:	4628      	mov	r0, r5
   1dfa0:	4788      	blx	r1
   1dfa2:	e7df      	b.n	1df64 <rtc_nrf_isr+0x84>
   1dfa4:	40011000 	.word	0x40011000
   1dfa8:	20003974 	.word	0x20003974
   1dfac:	2000396c 	.word	0x2000396c
   1dfb0:	20001ef8 	.word	0x20001ef8

0001dfb4 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1dfb4:	1c43      	adds	r3, r0, #1
{
   1dfb6:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1dfb8:	d022      	beq.n	1e000 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1dfba:	2801      	cmp	r0, #1
   1dfbc:	dd22      	ble.n	1e004 <sys_clock_set_timeout+0x50>
   1dfbe:	4a12      	ldr	r2, [pc, #72]	; (1e008 <sys_clock_set_timeout+0x54>)
   1dfc0:	4b12      	ldr	r3, [pc, #72]	; (1e00c <sys_clock_set_timeout+0x58>)
   1dfc2:	4290      	cmp	r0, r2
   1dfc4:	bfd4      	ite	le
   1dfc6:	4604      	movle	r4, r0
   1dfc8:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1dfca:	f7ff fea9 	bl	1dd20 <z_nrf_rtc_timer_read>
   1dfce:	4b10      	ldr	r3, [pc, #64]	; (1e010 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1dfd0:	490e      	ldr	r1, [pc, #56]	; (1e00c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfd6:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1dfd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1dfdc:	bf28      	it	cs
   1dfde:	2400      	movcs	r4, #0
	cyc += unannounced;
   1dfe0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1dfe2:	428c      	cmp	r4, r1
   1dfe4:	bf28      	it	cs
   1dfe6:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1dfe8:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1dfea:	490a      	ldr	r1, [pc, #40]	; (1e014 <sys_clock_set_timeout+0x60>)
   1dfec:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1dfee:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1dff2:	9001      	str	r0, [sp, #4]
   1dff4:	f143 0300 	adc.w	r3, r3, #0
   1dff8:	f7ff feb4 	bl	1dd64 <compare_set>
}
   1dffc:	b002      	add	sp, #8
   1dffe:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1e000:	4c02      	ldr	r4, [pc, #8]	; (1e00c <sys_clock_set_timeout+0x58>)
   1e002:	e7e2      	b.n	1dfca <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1e004:	2401      	movs	r4, #1
   1e006:	e7e0      	b.n	1dfca <sys_clock_set_timeout+0x16>
   1e008:	007ffffe 	.word	0x007ffffe
   1e00c:	007fffff 	.word	0x007fffff
   1e010:	20001f08 	.word	0x20001f08
   1e014:	0001dc7d 	.word	0x0001dc7d

0001e018 <sys_clock_elapsed>:
{
   1e018:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e01a:	f7ff fe81 	bl	1dd20 <z_nrf_rtc_timer_read>
   1e01e:	4b02      	ldr	r3, [pc, #8]	; (1e028 <sys_clock_elapsed+0x10>)
   1e020:	681b      	ldr	r3, [r3, #0]
}
   1e022:	1ac0      	subs	r0, r0, r3
   1e024:	bd08      	pop	{r3, pc}
   1e026:	bf00      	nop
   1e028:	20001f08 	.word	0x20001f08

0001e02c <nrf52_errata_16>:
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1e02c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1e030:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
   1e034:	2a06      	cmp	r2, #6
   1e036:	d109      	bne.n	1e04c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1e038:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1e03c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1e040:	3b03      	subs	r3, #3
   1e042:	2b04      	cmp	r3, #4
   1e044:	d802      	bhi.n	1e04c <nrf52_errata_16+0x20>
   1e046:	4a02      	ldr	r2, [pc, #8]	; (1e050 <nrf52_errata_16+0x24>)
   1e048:	5cd0      	ldrb	r0, [r2, r3]
   1e04a:	4770      	bx	lr
                        return false;
   1e04c:	2000      	movs	r0, #0
}
   1e04e:	4770      	bx	lr
   1e050:	0002e970 	.word	0x0002e970

0001e054 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e054:	4a02      	ldr	r2, [pc, #8]	; (1e060 <nvmc_wait+0xc>)
   1e056:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1e05a:	2b00      	cmp	r3, #0
   1e05c:	d0fb      	beq.n	1e056 <nvmc_wait+0x2>
}
   1e05e:	4770      	bx	lr
   1e060:	4001e000 	.word	0x4001e000

0001e064 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1e064:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1e066:	f008 fbd9 	bl	2681c <nrf52_errata_108>
   1e06a:	b140      	cbz	r0, 1e07e <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1e06c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e070:	4a90      	ldr	r2, [pc, #576]	; (1e2b4 <SystemInit+0x250>)
   1e072:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1e076:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1e07a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1e07e:	f7ff ffd5 	bl	1e02c <nrf52_errata_16>
   1e082:	b110      	cbz	r0, 1e08a <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1e084:	4b8c      	ldr	r3, [pc, #560]	; (1e2b8 <SystemInit+0x254>)
   1e086:	4a8d      	ldr	r2, [pc, #564]	; (1e2bc <SystemInit+0x258>)
   1e088:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1e08a:	f008 fbc7 	bl	2681c <nrf52_errata_108>
   1e08e:	b148      	cbz	r0, 1e0a4 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1e090:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e098:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   1e09c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1e0a0:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1e0a4:	f7ff ffc2 	bl	1e02c <nrf52_errata_16>
   1e0a8:	b130      	cbz	r0, 1e0b8 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1e0aa:	4a85      	ldr	r2, [pc, #532]	; (1e2c0 <SystemInit+0x25c>)
   1e0ac:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1e0b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e0b4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1e0b8:	f008 fbb0 	bl	2681c <nrf52_errata_108>
   1e0bc:	b140      	cbz	r0, 1e0d0 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   1e0be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e0c2:	2200      	movs	r2, #0
   1e0c4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1e0c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1e0cc:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1e0d0:	f7ff ffac 	bl	1e02c <nrf52_errata_16>
   1e0d4:	b120      	cbz	r0, 1e0e0 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1e0d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e0da:	2203      	movs	r2, #3
   1e0dc:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1e0e0:	f7ff ffa4 	bl	1e02c <nrf52_errata_16>
   1e0e4:	b160      	cbz	r0, 1e100 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1e0e6:	4b77      	ldr	r3, [pc, #476]	; (1e2c4 <SystemInit+0x260>)
   1e0e8:	2205      	movs	r2, #5
   1e0ea:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1e0ee:	2201      	movs	r2, #1
   1e0f0:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1e0f4:	2200      	movs	r2, #0
   1e0f6:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1e0fa:	223f      	movs	r2, #63	; 0x3f
   1e0fc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1e100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e104:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e108:	1c51      	adds	r1, r2, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1e10a:	bf09      	itett	eq
   1e10c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = *(uint32_t *)0x10000134ul;
   1e110:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1e114:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1e118:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1e11c:	bf08      	it	eq
   1e11e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            if (var1 == 0x06)
   1e122:	2a06      	cmp	r2, #6
   1e124:	d14d      	bne.n	1e1c2 <SystemInit+0x15e>
                switch(var2)
   1e126:	3b03      	subs	r3, #3
   1e128:	2b04      	cmp	r3, #4
   1e12a:	d803      	bhi.n	1e134 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1e12c:	4a66      	ldr	r2, [pc, #408]	; (1e2c8 <SystemInit+0x264>)
   1e12e:	5cd3      	ldrb	r3, [r2, r3]
   1e130:	2b00      	cmp	r3, #0
   1e132:	d046      	beq.n	1e1c2 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1e134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e138:	4b64      	ldr	r3, [pc, #400]	; (1e2cc <SystemInit+0x268>)
   1e13a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1e13e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1e142:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1e146:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1e14a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1e14e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1e152:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1e156:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1e15a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1e15e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1e162:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1e166:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1e16a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1e16e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1e172:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1e176:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1e17a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1e17e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1e182:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1e186:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1e18a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1e18e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1e192:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1e196:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1e19a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1e19e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1e1a2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1e1a6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1e1aa:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1e1ae:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1e1b2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1e1b6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1e1ba:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1e1be:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1e1c2:	f008 fb2b 	bl	2681c <nrf52_errata_108>
   1e1c6:	b148      	cbz	r0, 1e1dc <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1e1c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e1cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e1d0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1e1d4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1e1d8:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1e1dc:	f008 fb1e 	bl	2681c <nrf52_errata_108>
   1e1e0:	b148      	cbz	r0, 1e1f6 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1e1e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e1e6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e1ea:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1e1ec:	bf44      	itt	mi
   1e1ee:	f06f 0201 	mvnmi.w	r2, #1
   1e1f2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e1f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1e1fa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e1fe:	2a06      	cmp	r2, #6
   1e200:	d126      	bne.n	1e250 <SystemInit+0x1ec>
            {
                switch(var2)
   1e202:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1e206:	3b03      	subs	r3, #3
   1e208:	2b04      	cmp	r3, #4
   1e20a:	d802      	bhi.n	1e212 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1e20c:	4a30      	ldr	r2, [pc, #192]	; (1e2d0 <SystemInit+0x26c>)
   1e20e:	5cd3      	ldrb	r3, [r2, r3]
   1e210:	b163      	cbz	r3, 1e22c <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1e212:	4a30      	ldr	r2, [pc, #192]	; (1e2d4 <SystemInit+0x270>)
   1e214:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1e218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1e21c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1e224:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1e228:	2b06      	cmp	r3, #6
   1e22a:	d111      	bne.n	1e250 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e22c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e230:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1e234:	3b03      	subs	r3, #3
   1e236:	2b04      	cmp	r3, #4
   1e238:	d802      	bhi.n	1e240 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1e23a:	4a27      	ldr	r2, [pc, #156]	; (1e2d8 <SystemInit+0x274>)
   1e23c:	5cd3      	ldrb	r3, [r2, r3]
   1e23e:	b13b      	cbz	r3, 1e250 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1e240:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e244:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1e248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e24c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e250:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e254:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1e258:	2a00      	cmp	r2, #0
   1e25a:	db03      	blt.n	1e264 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1e25c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e260:	2b00      	cmp	r3, #0
   1e262:	da22      	bge.n	1e2aa <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e264:	491d      	ldr	r1, [pc, #116]	; (1e2dc <SystemInit+0x278>)
   1e266:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e268:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e26c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e270:	2415      	movs	r4, #21
    nvmc_wait();
   1e272:	f7ff feef 	bl	1e054 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e276:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1e27a:	f7ff feeb 	bl	1e054 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1e27e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1e282:	f7ff fee7 	bl	1e054 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e286:	2300      	movs	r3, #0
   1e288:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1e28c:	f7ff fee2 	bl	1e054 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1e290:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1e294:	490a      	ldr	r1, [pc, #40]	; (1e2c0 <SystemInit+0x25c>)
   1e296:	4b12      	ldr	r3, [pc, #72]	; (1e2e0 <SystemInit+0x27c>)
   1e298:	68ca      	ldr	r2, [r1, #12]
   1e29a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e29e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1e2a0:	60cb      	str	r3, [r1, #12]
   1e2a2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1e2a6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1e2a8:	e7fd      	b.n	1e2a6 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1e2aa:	4b0e      	ldr	r3, [pc, #56]	; (1e2e4 <SystemInit+0x280>)
   1e2ac:	4a0e      	ldr	r2, [pc, #56]	; (1e2e8 <SystemInit+0x284>)
   1e2ae:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1e2b0:	bd10      	pop	{r4, pc}
   1e2b2:	bf00      	nop
   1e2b4:	40013000 	.word	0x40013000
   1e2b8:	4007c000 	.word	0x4007c000
   1e2bc:	baadf00d 	.word	0xbaadf00d
   1e2c0:	e000ed00 	.word	0xe000ed00
   1e2c4:	40005000 	.word	0x40005000
   1e2c8:	0002e96b 	.word	0x0002e96b
   1e2cc:	4000c000 	.word	0x4000c000
   1e2d0:	0002e966 	.word	0x0002e966
   1e2d4:	40001000 	.word	0x40001000
   1e2d8:	0002e961 	.word	0x0002e961
   1e2dc:	4001e000 	.word	0x4001e000
   1e2e0:	05fa0004 	.word	0x05fa0004
   1e2e4:	20000950 	.word	0x20000950
   1e2e8:	03d09000 	.word	0x03d09000

0001e2ec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1e2ec:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e2ee:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1e2f0:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e2f2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1e2f6:	fab2 f382 	clz	r3, r2
   1e2fa:	f1c3 031f 	rsb	r3, r3, #31
   1e2fe:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e300:	fa05 f403 	lsl.w	r4, r5, r3
   1e304:	ea22 0404 	bic.w	r4, r2, r4
   1e308:	e850 6f00 	ldrex	r6, [r0]
   1e30c:	4296      	cmp	r6, r2
   1e30e:	d104      	bne.n	1e31a <nrfx_flag32_alloc+0x2e>
   1e310:	e840 4c00 	strex	ip, r4, [r0]
   1e314:	f1bc 0f00 	cmp.w	ip, #0
   1e318:	d1f6      	bne.n	1e308 <nrfx_flag32_alloc+0x1c>
   1e31a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e31e:	d1e7      	bne.n	1e2f0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1e320:	4801      	ldr	r0, [pc, #4]	; (1e328 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1e322:	700b      	strb	r3, [r1, #0]
}
   1e324:	bd70      	pop	{r4, r5, r6, pc}
   1e326:	bf00      	nop
   1e328:	0bad0000 	.word	0x0bad0000

0001e32c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1e32c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1e32e:	6803      	ldr	r3, [r0, #0]
   1e330:	40cb      	lsrs	r3, r1
   1e332:	07db      	lsls	r3, r3, #31
   1e334:	d414      	bmi.n	1e360 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1e336:	2301      	movs	r3, #1
   1e338:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1e33a:	6802      	ldr	r2, [r0, #0]
   1e33c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1e340:	ea43 0102 	orr.w	r1, r3, r2
   1e344:	e850 4f00 	ldrex	r4, [r0]
   1e348:	4294      	cmp	r4, r2
   1e34a:	d104      	bne.n	1e356 <nrfx_flag32_free+0x2a>
   1e34c:	e840 1c00 	strex	ip, r1, [r0]
   1e350:	f1bc 0f00 	cmp.w	ip, #0
   1e354:	d1f6      	bne.n	1e344 <nrfx_flag32_free+0x18>
   1e356:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e35a:	d1ee      	bne.n	1e33a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1e35c:	4801      	ldr	r0, [pc, #4]	; (1e364 <nrfx_flag32_free+0x38>)
}
   1e35e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e360:	4801      	ldr	r0, [pc, #4]	; (1e368 <nrfx_flag32_free+0x3c>)
   1e362:	e7fc      	b.n	1e35e <nrfx_flag32_free+0x32>
   1e364:	0bad0000 	.word	0x0bad0000
   1e368:	0bad0004 	.word	0x0bad0004

0001e36c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   1e36c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   1e36e:	4604      	mov	r4, r0
   1e370:	b118      	cbz	r0, 1e37a <clock_stop+0xe>
   1e372:	2801      	cmp	r0, #1
   1e374:	d022      	beq.n	1e3bc <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1e376:	b003      	add	sp, #12
   1e378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   1e37a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e37e:	2202      	movs	r2, #2
   1e380:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e384:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1e388:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e38c:	2201      	movs	r2, #1
   1e38e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1e390:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1e392:	2301      	movs	r3, #1
   1e394:	f88d 3007 	strb.w	r3, [sp, #7]
   1e398:	f242 7510 	movw	r5, #10000	; 0x2710
   1e39c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   1e3a0:	b1cc      	cbz	r4, 1e3d6 <clock_stop+0x6a>
   1e3a2:	2c01      	cmp	r4, #1
   1e3a4:	d1e7      	bne.n	1e376 <clock_stop+0xa>
            if (p_clk_src != NULL)
   1e3a6:	b3c7      	cbz	r7, 1e41a <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1e3a8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e3ac:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1e3b0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e3b2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e3b6:	03da      	lsls	r2, r3, #15
   1e3b8:	d521      	bpl.n	1e3fe <clock_stop+0x92>
   1e3ba:	e016      	b.n	1e3ea <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
   1e3bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e3c0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1e3c2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e3c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e3ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e3ce:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1e3d0:	f10d 0707 	add.w	r7, sp, #7
   1e3d4:	e7dd      	b.n	1e392 <clock_stop+0x26>
            if (p_clk_src != NULL)
   1e3d6:	b1b7      	cbz	r7, 1e406 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e3d8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1e3dc:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1e3e0:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e3e2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1e3e6:	03d8      	lsls	r0, r3, #15
   1e3e8:	d5c5      	bpl.n	1e376 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1e3ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e3ee:	2801      	cmp	r0, #1
   1e3f0:	d103      	bne.n	1e3fa <clock_stop+0x8e>
   1e3f2:	f008 fa22 	bl	2683a <nrfx_busy_wait>
   1e3f6:	3d01      	subs	r5, #1
   1e3f8:	d1d2      	bne.n	1e3a0 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   1e3fa:	2c01      	cmp	r4, #1
   1e3fc:	d1bb      	bne.n	1e376 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   1e3fe:	4b0c      	ldr	r3, [pc, #48]	; (1e430 <clock_stop+0xc4>)
   1e400:	2200      	movs	r2, #0
   1e402:	715a      	strb	r2, [r3, #5]
   1e404:	e7b7      	b.n	1e376 <clock_stop+0xa>
   1e406:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1e40a:	03d9      	lsls	r1, r3, #15
   1e40c:	d5b3      	bpl.n	1e376 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1e40e:	2001      	movs	r0, #1
   1e410:	f008 fa13 	bl	2683a <nrfx_busy_wait>
   1e414:	3d01      	subs	r5, #1
   1e416:	d1f6      	bne.n	1e406 <clock_stop+0x9a>
   1e418:	e7ad      	b.n	1e376 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e41a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e41e:	03db      	lsls	r3, r3, #15
   1e420:	d5ed      	bpl.n	1e3fe <clock_stop+0x92>
   1e422:	2001      	movs	r0, #1
   1e424:	f008 fa09 	bl	2683a <nrfx_busy_wait>
   1e428:	3d01      	subs	r5, #1
   1e42a:	d1f6      	bne.n	1e41a <clock_stop+0xae>
   1e42c:	e7e7      	b.n	1e3fe <clock_stop+0x92>
   1e42e:	bf00      	nop
   1e430:	20003978 	.word	0x20003978

0001e434 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1e434:	4b04      	ldr	r3, [pc, #16]	; (1e448 <nrfx_clock_init+0x14>)
   1e436:	791a      	ldrb	r2, [r3, #4]
   1e438:	b922      	cbnz	r2, 1e444 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1e43a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1e43c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1e43e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1e440:	4802      	ldr	r0, [pc, #8]	; (1e44c <nrfx_clock_init+0x18>)
   1e442:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1e444:	4802      	ldr	r0, [pc, #8]	; (1e450 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e446:	4770      	bx	lr
   1e448:	20003978 	.word	0x20003978
   1e44c:	0bad0000 	.word	0x0bad0000
   1e450:	0bad000c 	.word	0x0bad000c

0001e454 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1e454:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1e456:	b110      	cbz	r0, 1e45e <nrfx_clock_start+0xa>
   1e458:	2801      	cmp	r0, #1
   1e45a:	d043      	beq.n	1e4e4 <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1e45c:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e45e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e462:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e466:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1e46a:	03c8      	lsls	r0, r1, #15
   1e46c:	d40b      	bmi.n	1e486 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1e46e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1e472:	07d9      	lsls	r1, r3, #31
   1e474:	d50f      	bpl.n	1e496 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e476:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e47a:	079b      	lsls	r3, r3, #30
   1e47c:	d408      	bmi.n	1e490 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
   1e47e:	2302      	movs	r3, #2
   1e480:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   1e484:	e7ea      	b.n	1e45c <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1e486:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e48a:	2b01      	cmp	r3, #1
   1e48c:	d004      	beq.n	1e498 <nrfx_clock_start+0x44>
   1e48e:	b113      	cbz	r3, 1e496 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e490:	2000      	movs	r0, #0
   1e492:	f7ff ff6b 	bl	1e36c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1e496:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e49c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4a0:	2300      	movs	r3, #0
   1e4a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1e4a6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1e4aa:	2302      	movs	r3, #2
   1e4ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   1e4b0:	4a12      	ldr	r2, [pc, #72]	; (1e4fc <nrfx_clock_start+0xa8>)
   1e4b2:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   1e4b6:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   1e4ba:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   1e4be:	4b10      	ldr	r3, [pc, #64]	; (1e500 <nrfx_clock_start+0xac>)
   1e4c0:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   1e4c2:	f044 0101 	orr.w	r1, r4, #1
   1e4c6:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   1e4c8:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   1e4ca:	6859      	ldr	r1, [r3, #4]
   1e4cc:	1b49      	subs	r1, r1, r5
   1e4ce:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   1e4d2:	d3fa      	bcc.n	1e4ca <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
   1e4d4:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e4d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   1e4da:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1e4de:	2201      	movs	r2, #1
   1e4e0:	609a      	str	r2, [r3, #8]
}
   1e4e2:	e7bb      	b.n	1e45c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e4e8:	2200      	movs	r2, #0
   1e4ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e4ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e4f2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e4f6:	6018      	str	r0, [r3, #0]
}
   1e4f8:	e7b0      	b.n	1e45c <nrfx_clock_start+0x8>
   1e4fa:	bf00      	nop
   1e4fc:	e000ed00 	.word	0xe000ed00
   1e500:	e0001000 	.word	0xe0001000

0001e504 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1e504:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e50a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1e50e:	b16a      	cbz	r2, 1e52c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e510:	2200      	movs	r2, #0
   1e512:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e516:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1e51a:	2201      	movs	r2, #1
   1e51c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1e520:	4b11      	ldr	r3, [pc, #68]	; (1e568 <nrfx_power_clock_irq_handler+0x64>)
   1e522:	7958      	ldrb	r0, [r3, #5]
   1e524:	b910      	cbnz	r0, 1e52c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1e526:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1e528:	681b      	ldr	r3, [r3, #0]
   1e52a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e52c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e530:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1e534:	b172      	cbz	r2, 1e554 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e536:	2200      	movs	r2, #0
   1e538:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e53c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e540:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e544:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1e548:	0792      	lsls	r2, r2, #30
   1e54a:	d104      	bne.n	1e556 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e54c:	2201      	movs	r2, #1
   1e54e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e552:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1e554:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1e556:	2202      	movs	r2, #2
   1e558:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e55c:	4b02      	ldr	r3, [pc, #8]	; (1e568 <nrfx_power_clock_irq_handler+0x64>)
}
   1e55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e562:	681b      	ldr	r3, [r3, #0]
   1e564:	2001      	movs	r0, #1
   1e566:	4718      	bx	r3
   1e568:	20003978 	.word	0x20003978

0001e56c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1e56c:	4b03      	ldr	r3, [pc, #12]	; (1e57c <pin_in_use_by_te+0x10>)
   1e56e:	3008      	adds	r0, #8
   1e570:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e574:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1e578:	4770      	bx	lr
   1e57a:	bf00      	nop
   1e57c:	20000954 	.word	0x20000954

0001e580 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1e580:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e582:	f100 0308 	add.w	r3, r0, #8
   1e586:	4c0c      	ldr	r4, [pc, #48]	; (1e5b8 <call_handler+0x38>)
   1e588:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1e58c:	05da      	lsls	r2, r3, #23
{
   1e58e:	4605      	mov	r5, r0
   1e590:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e592:	d507      	bpl.n	1e5a4 <call_handler+0x24>
   1e594:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1e598:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1e59c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1e5a0:	6852      	ldr	r2, [r2, #4]
   1e5a2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1e5a4:	68a3      	ldr	r3, [r4, #8]
   1e5a6:	b12b      	cbz	r3, 1e5b4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e5a8:	68e2      	ldr	r2, [r4, #12]
   1e5aa:	4631      	mov	r1, r6
   1e5ac:	4628      	mov	r0, r5
    }
}
   1e5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e5b2:	4718      	bx	r3
}
   1e5b4:	bd70      	pop	{r4, r5, r6, pc}
   1e5b6:	bf00      	nop
   1e5b8:	20000954 	.word	0x20000954

0001e5bc <release_handler>:
{
   1e5bc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e5be:	4a12      	ldr	r2, [pc, #72]	; (1e608 <release_handler+0x4c>)
   1e5c0:	3008      	adds	r0, #8
   1e5c2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1e5c6:	05d9      	lsls	r1, r3, #23
   1e5c8:	d51b      	bpl.n	1e602 <release_handler+0x46>
   1e5ca:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1e5ce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e5d2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e5d6:	f102 040e 	add.w	r4, r2, #14
   1e5da:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1e5dc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1e5e0:	f413 7f80 	tst.w	r3, #256	; 0x100
   1e5e4:	d003      	beq.n	1e5ee <release_handler+0x32>
   1e5e6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1e5ea:	4299      	cmp	r1, r3
   1e5ec:	d009      	beq.n	1e602 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e5ee:	3001      	adds	r0, #1
   1e5f0:	2820      	cmp	r0, #32
   1e5f2:	d1f3      	bne.n	1e5dc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1e5f4:	2300      	movs	r3, #0
   1e5f6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e5fa:	4804      	ldr	r0, [pc, #16]	; (1e60c <release_handler+0x50>)
}
   1e5fc:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e5fe:	f7ff be95 	b.w	1e32c <nrfx_flag32_free>
}
   1e602:	bc10      	pop	{r4}
   1e604:	4770      	bx	lr
   1e606:	bf00      	nop
   1e608:	20000954 	.word	0x20000954
   1e60c:	200009a8 	.word	0x200009a8

0001e610 <pin_handler_trigger_uninit>:
{
   1e610:	b538      	push	{r3, r4, r5, lr}
   1e612:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1e614:	f7ff ffaa 	bl	1e56c <pin_in_use_by_te>
   1e618:	4c09      	ldr	r4, [pc, #36]	; (1e640 <pin_handler_trigger_uninit+0x30>)
   1e61a:	f102 0508 	add.w	r5, r2, #8
   1e61e:	b140      	cbz	r0, 1e632 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e620:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1e624:	4907      	ldr	r1, [pc, #28]	; (1e644 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1e626:	0b5b      	lsrs	r3, r3, #13
   1e628:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1e62c:	2000      	movs	r0, #0
   1e62e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1e632:	4610      	mov	r0, r2
   1e634:	f7ff ffc2 	bl	1e5bc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1e638:	2300      	movs	r3, #0
   1e63a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1e63e:	bd38      	pop	{r3, r4, r5, pc}
   1e640:	20000954 	.word	0x20000954
   1e644:	40006000 	.word	0x40006000

0001e648 <nrfx_gpiote_input_configure>:
{
   1e648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e64c:	4604      	mov	r4, r0
   1e64e:	461d      	mov	r5, r3
    if (p_input_config)
   1e650:	b309      	cbz	r1, 1e696 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e652:	4f4f      	ldr	r7, [pc, #316]	; (1e790 <nrfx_gpiote_input_configure+0x148>)
   1e654:	f100 0808 	add.w	r8, r0, #8
   1e658:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1e65c:	07b3      	lsls	r3, r6, #30
   1e65e:	d506      	bpl.n	1e66e <nrfx_gpiote_input_configure+0x26>
   1e660:	f7ff ff84 	bl	1e56c <pin_in_use_by_te>
   1e664:	b118      	cbz	r0, 1e66e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   1e666:	484b      	ldr	r0, [pc, #300]	; (1e794 <nrfx_gpiote_input_configure+0x14c>)
}
   1e668:	b002      	add	sp, #8
   1e66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   1e66e:	f004 031f 	and.w	r3, r4, #31
   1e672:	009b      	lsls	r3, r3, #2
   1e674:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1e678:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e67a:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1e67e:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
   1e682:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1e686:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e68a:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
   1e68e:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   1e692:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
   1e696:	b19a      	cbz	r2, 1e6c0 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e698:	4b3d      	ldr	r3, [pc, #244]	; (1e790 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1e69a:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1e69c:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e69e:	f104 0608 	add.w	r6, r4, #8
   1e6a2:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   1e6a6:	f011 0f02 	tst.w	r1, #2
   1e6aa:	d00d      	beq.n	1e6c8 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
   1e6ac:	2800      	cmp	r0, #0
   1e6ae:	d1da      	bne.n	1e666 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1e6b0:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   1e6b4:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1e6b8:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
   1e6bc:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
   1e6c0:	2d00      	cmp	r5, #0
   1e6c2:	d13b      	bne.n	1e73c <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
   1e6c4:	4834      	ldr	r0, [pc, #208]	; (1e798 <nrfx_gpiote_input_configure+0x150>)
   1e6c6:	e7cf      	b.n	1e668 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1e6c8:	f021 0120 	bic.w	r1, r1, #32
   1e6cc:	04c9      	lsls	r1, r1, #19
   1e6ce:	0cc9      	lsrs	r1, r1, #19
   1e6d0:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   1e6d4:	2800      	cmp	r0, #0
   1e6d6:	d0eb      	beq.n	1e6b0 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   1e6d8:	2f03      	cmp	r7, #3
   1e6da:	d8c4      	bhi.n	1e666 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1e6dc:	6852      	ldr	r2, [r2, #4]
   1e6de:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1e6e2:	b92f      	cbnz	r7, 1e6f0 <nrfx_gpiote_input_configure+0xa8>
   1e6e4:	4a2d      	ldr	r2, [pc, #180]	; (1e79c <nrfx_gpiote_input_configure+0x154>)
   1e6e6:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
   1e6ea:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1e6ee:	e7df      	b.n	1e6b0 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e6f0:	ea4f 028c 	mov.w	r2, ip, lsl #2
   1e6f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e6f8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e6fc:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   1e700:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e704:	f020 0003 	bic.w	r0, r0, #3
   1e708:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e70c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e710:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1e714:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1e718:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e71c:	0220      	lsls	r0, r4, #8
   1e71e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1e722:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   1e726:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1e72a:	ea40 000e 	orr.w	r0, r0, lr
   1e72e:	f041 0120 	orr.w	r1, r1, #32
   1e732:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   1e736:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1e73a:	e7b9      	b.n	1e6b0 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1e73c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1e740:	4620      	mov	r0, r4
   1e742:	f7ff ff3b 	bl	1e5bc <release_handler>
    if (!handler)
   1e746:	2e00      	cmp	r6, #0
   1e748:	d0bc      	beq.n	1e6c4 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e74a:	4d11      	ldr	r5, [pc, #68]	; (1e790 <nrfx_gpiote_input_configure+0x148>)
   1e74c:	e9d5 2300 	ldrd	r2, r3, [r5]
   1e750:	4296      	cmp	r6, r2
   1e752:	d101      	bne.n	1e758 <nrfx_gpiote_input_configure+0x110>
   1e754:	429f      	cmp	r7, r3
   1e756:	d019      	beq.n	1e78c <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1e758:	4811      	ldr	r0, [pc, #68]	; (1e7a0 <nrfx_gpiote_input_configure+0x158>)
   1e75a:	f10d 0107 	add.w	r1, sp, #7
   1e75e:	f7ff fdc5 	bl	1e2ec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1e762:	4b0d      	ldr	r3, [pc, #52]	; (1e798 <nrfx_gpiote_input_configure+0x150>)
   1e764:	4298      	cmp	r0, r3
   1e766:	f47f af7f 	bne.w	1e668 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   1e76a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   1e76e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1e772:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e776:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1e778:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e77a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1e77e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1e782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1e786:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1e78a:	e79b      	b.n	1e6c4 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e78c:	2200      	movs	r2, #0
   1e78e:	e7ee      	b.n	1e76e <nrfx_gpiote_input_configure+0x126>
   1e790:	20000954 	.word	0x20000954
   1e794:	0bad0004 	.word	0x0bad0004
   1e798:	0bad0000 	.word	0x0bad0000
   1e79c:	40006000 	.word	0x40006000
   1e7a0:	200009a8 	.word	0x200009a8

0001e7a4 <nrfx_gpiote_output_configure>:
{
   1e7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7a6:	4604      	mov	r4, r0
    if (p_config)
   1e7a8:	b389      	cbz	r1, 1e80e <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e7aa:	4e3a      	ldr	r6, [pc, #232]	; (1e894 <nrfx_gpiote_output_configure+0xf0>)
   1e7ac:	f100 0708 	add.w	r7, r0, #8
   1e7b0:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1e7b4:	07ab      	lsls	r3, r5, #30
   1e7b6:	d404      	bmi.n	1e7c2 <nrfx_gpiote_output_configure+0x1e>
   1e7b8:	f7ff fed8 	bl	1e56c <pin_in_use_by_te>
   1e7bc:	b108      	cbz	r0, 1e7c2 <nrfx_gpiote_output_configure+0x1e>
{
   1e7be:	4836      	ldr	r0, [pc, #216]	; (1e898 <nrfx_gpiote_output_configure+0xf4>)
}
   1e7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1e7c2:	f015 0f1c 	tst.w	r5, #28
   1e7c6:	784b      	ldrb	r3, [r1, #1]
   1e7c8:	d124      	bne.n	1e814 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
   1e7ca:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e7ce:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
   1e7d2:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1e7d6:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e7d8:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1e7dc:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1e7e0:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   1e7e2:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   1e7e6:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
   1e7ea:	f02c 0c07 	bic.w	ip, ip, #7
   1e7ee:	ea43 030c 	orr.w	r3, r3, ip
   1e7f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1e7f6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   1e7fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e7fe:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1e802:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   1e806:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   1e80a:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   1e80e:	b922      	cbnz	r2, 1e81a <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
   1e810:	4822      	ldr	r0, [pc, #136]	; (1e89c <nrfx_gpiote_output_configure+0xf8>)
   1e812:	e7d5      	b.n	1e7c0 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1e814:	2b01      	cmp	r3, #1
   1e816:	d1d8      	bne.n	1e7ca <nrfx_gpiote_output_configure+0x26>
   1e818:	e7d1      	b.n	1e7be <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e81a:	4e1e      	ldr	r6, [pc, #120]	; (1e894 <nrfx_gpiote_output_configure+0xf0>)
   1e81c:	f104 0708 	add.w	r7, r4, #8
   1e820:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1e824:	0783      	lsls	r3, r0, #30
   1e826:	d5ca      	bpl.n	1e7be <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   1e828:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   1e82c:	4661      	mov	r1, ip
   1e82e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1e830:	f020 0020 	bic.w	r0, r0, #32
   1e834:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e838:	04c0      	lsls	r0, r0, #19
   1e83a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1e83e:	0cc0      	lsrs	r0, r0, #19
   1e840:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1e844:	2300      	movs	r3, #0
   1e846:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1e84a:	7855      	ldrb	r5, [r2, #1]
   1e84c:	2d00      	cmp	r5, #0
   1e84e:	d0df      	beq.n	1e810 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1e850:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1e854:	7892      	ldrb	r2, [r2, #2]
   1e856:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1e85a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e85e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e862:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1e866:	0223      	lsls	r3, r4, #8
   1e868:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1e86c:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e86e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1e872:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1e876:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e878:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1e87a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e87e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e882:	4313      	orrs	r3, r2
   1e884:	f040 0020 	orr.w	r0, r0, #32
   1e888:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1e88c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1e890:	e7be      	b.n	1e810 <nrfx_gpiote_output_configure+0x6c>
   1e892:	bf00      	nop
   1e894:	20000954 	.word	0x20000954
   1e898:	0bad0004 	.word	0x0bad0004
   1e89c:	0bad0000 	.word	0x0bad0000

0001e8a0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1e8a0:	4b01      	ldr	r3, [pc, #4]	; (1e8a8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1e8a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1e8a6:	4770      	bx	lr
   1e8a8:	20000954 	.word	0x20000954

0001e8ac <nrfx_gpiote_channel_get>:
{
   1e8ac:	b508      	push	{r3, lr}
   1e8ae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1e8b0:	f7ff fe5c 	bl	1e56c <pin_in_use_by_te>
   1e8b4:	b138      	cbz	r0, 1e8c6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e8b6:	4b05      	ldr	r3, [pc, #20]	; (1e8cc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1e8b8:	4805      	ldr	r0, [pc, #20]	; (1e8d0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e8ba:	3208      	adds	r2, #8
   1e8bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1e8c0:	0b5b      	lsrs	r3, r3, #13
   1e8c2:	700b      	strb	r3, [r1, #0]
}
   1e8c4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e8c6:	4803      	ldr	r0, [pc, #12]	; (1e8d4 <nrfx_gpiote_channel_get+0x28>)
   1e8c8:	e7fc      	b.n	1e8c4 <nrfx_gpiote_channel_get+0x18>
   1e8ca:	bf00      	nop
   1e8cc:	20000954 	.word	0x20000954
   1e8d0:	0bad0000 	.word	0x0bad0000
   1e8d4:	0bad0004 	.word	0x0bad0004

0001e8d8 <nrfx_gpiote_init>:
{
   1e8d8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e8da:	4c0f      	ldr	r4, [pc, #60]	; (1e918 <nrfx_gpiote_init+0x40>)
   1e8dc:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1e8e0:	b9bd      	cbnz	r5, 1e912 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1e8e2:	2240      	movs	r2, #64	; 0x40
   1e8e4:	4629      	mov	r1, r5
   1e8e6:	f104 0010 	add.w	r0, r4, #16
   1e8ea:	f005 f99a 	bl	23c22 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1e8ee:	2006      	movs	r0, #6
   1e8f0:	f7e8 fc48 	bl	7184 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e8f4:	4b09      	ldr	r3, [pc, #36]	; (1e91c <nrfx_gpiote_init+0x44>)
    return err_code;
   1e8f6:	480a      	ldr	r0, [pc, #40]	; (1e920 <nrfx_gpiote_init+0x48>)
   1e8f8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1e8fc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1e900:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e904:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e908:	2301      	movs	r3, #1
   1e90a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1e90e:	6563      	str	r3, [r4, #84]	; 0x54
}
   1e910:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1e912:	4804      	ldr	r0, [pc, #16]	; (1e924 <nrfx_gpiote_init+0x4c>)
   1e914:	e7fc      	b.n	1e910 <nrfx_gpiote_init+0x38>
   1e916:	bf00      	nop
   1e918:	20000954 	.word	0x20000954
   1e91c:	40006000 	.word	0x40006000
   1e920:	0bad0000 	.word	0x0bad0000
   1e924:	0bad0005 	.word	0x0bad0005

0001e928 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1e928:	4b03      	ldr	r3, [pc, #12]	; (1e938 <nrfx_gpiote_is_init+0x10>)
   1e92a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1e92e:	3800      	subs	r0, #0
   1e930:	bf18      	it	ne
   1e932:	2001      	movne	r0, #1
   1e934:	4770      	bx	lr
   1e936:	bf00      	nop
   1e938:	20000954 	.word	0x20000954

0001e93c <nrfx_gpiote_channel_free>:
{
   1e93c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1e93e:	4801      	ldr	r0, [pc, #4]	; (1e944 <nrfx_gpiote_channel_free+0x8>)
   1e940:	f7ff bcf4 	b.w	1e32c <nrfx_flag32_free>
   1e944:	200009a4 	.word	0x200009a4

0001e948 <nrfx_gpiote_channel_alloc>:
{
   1e948:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1e94a:	4801      	ldr	r0, [pc, #4]	; (1e950 <nrfx_gpiote_channel_alloc+0x8>)
   1e94c:	f7ff bcce 	b.w	1e2ec <nrfx_flag32_alloc>
   1e950:	200009a4 	.word	0x200009a4

0001e954 <nrfx_gpiote_trigger_enable>:
{
   1e954:	b510      	push	{r4, lr}
   1e956:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e958:	f7ff fe08 	bl	1e56c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e95c:	f102 0408 	add.w	r4, r2, #8
   1e960:	4b1c      	ldr	r3, [pc, #112]	; (1e9d4 <nrfx_gpiote_trigger_enable+0x80>)
   1e962:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e966:	b1e0      	cbz	r0, 1e9a2 <nrfx_gpiote_trigger_enable+0x4e>
   1e968:	f013 0402 	ands.w	r4, r3, #2
   1e96c:	d119      	bne.n	1e9a2 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e96e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1e970:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1e972:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1e976:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1e97a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e97e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e982:	6004      	str	r4, [r0, #0]
   1e984:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1e986:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e98a:	f040 0001 	orr.w	r0, r0, #1
   1e98e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1e992:	b129      	cbz	r1, 1e9a0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1e994:	2201      	movs	r2, #1
   1e996:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1e99a:	4a0f      	ldr	r2, [pc, #60]	; (1e9d8 <nrfx_gpiote_trigger_enable+0x84>)
   1e99c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e9a0:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e9a2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1e9a6:	2b04      	cmp	r3, #4
   1e9a8:	d010      	beq.n	1e9cc <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1e9aa:	2b05      	cmp	r3, #5
   1e9ac:	d010      	beq.n	1e9d0 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   1e9ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1e9b2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   1e9b6:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e9ba:	40d9      	lsrs	r1, r3
   1e9bc:	f001 0101 	and.w	r1, r1, #1
   1e9c0:	3102      	adds	r1, #2
}
   1e9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e9c6:	4610      	mov	r0, r2
   1e9c8:	f007 bf48 	b.w	2685c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1e9cc:	2103      	movs	r1, #3
   1e9ce:	e7f8      	b.n	1e9c2 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1e9d0:	2102      	movs	r1, #2
   1e9d2:	e7f6      	b.n	1e9c2 <nrfx_gpiote_trigger_enable+0x6e>
   1e9d4:	20000954 	.word	0x20000954
   1e9d8:	40006000 	.word	0x40006000

0001e9dc <nrfx_gpiote_trigger_disable>:
{
   1e9dc:	b508      	push	{r3, lr}
   1e9de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e9e0:	f7ff fdc4 	bl	1e56c <pin_in_use_by_te>
   1e9e4:	b1c0      	cbz	r0, 1ea18 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e9e6:	f102 0108 	add.w	r1, r2, #8
   1e9ea:	4b0e      	ldr	r3, [pc, #56]	; (1ea24 <nrfx_gpiote_trigger_disable+0x48>)
   1e9ec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e9f0:	0799      	lsls	r1, r3, #30
   1e9f2:	d411      	bmi.n	1ea18 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e9f4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1e9f6:	2201      	movs	r2, #1
   1e9f8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1e9fa:	009b      	lsls	r3, r3, #2
   1e9fc:	490a      	ldr	r1, [pc, #40]	; (1ea28 <nrfx_gpiote_trigger_disable+0x4c>)
   1e9fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ea02:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1ea06:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1ea0a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1ea0e:	f022 0203 	bic.w	r2, r2, #3
   1ea12:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1ea16:	bd08      	pop	{r3, pc}
   1ea18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ea1c:	2100      	movs	r1, #0
   1ea1e:	4610      	mov	r0, r2
   1ea20:	f007 bf1c 	b.w	2685c <nrf_gpio_cfg_sense_set>
   1ea24:	20000954 	.word	0x20000954
   1ea28:	40006000 	.word	0x40006000

0001ea2c <nrfx_gpiote_pin_uninit>:
{
   1ea2c:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1ea2e:	4b0d      	ldr	r3, [pc, #52]	; (1ea64 <nrfx_gpiote_pin_uninit+0x38>)
   1ea30:	f100 0208 	add.w	r2, r0, #8
{
   1ea34:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1ea36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1ea3a:	07db      	lsls	r3, r3, #31
   1ea3c:	d50f      	bpl.n	1ea5e <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   1ea3e:	f7ff ffcd 	bl	1e9dc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1ea42:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   1ea44:	f004 041f 	and.w	r4, r4, #31
   1ea48:	f7ff fde2 	bl	1e610 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   1ea4c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1ea50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ea54:	2202      	movs	r2, #2
   1ea56:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1ea5a:	4803      	ldr	r0, [pc, #12]	; (1ea68 <nrfx_gpiote_pin_uninit+0x3c>)
}
   1ea5c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ea5e:	4803      	ldr	r0, [pc, #12]	; (1ea6c <nrfx_gpiote_pin_uninit+0x40>)
   1ea60:	e7fc      	b.n	1ea5c <nrfx_gpiote_pin_uninit+0x30>
   1ea62:	bf00      	nop
   1ea64:	20000954 	.word	0x20000954
   1ea68:	0bad0000 	.word	0x0bad0000
   1ea6c:	0bad0004 	.word	0x0bad0004

0001ea70 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1ea70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea74:	4b4f      	ldr	r3, [pc, #316]	; (1ebb4 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
   1ea76:	4850      	ldr	r0, [pc, #320]	; (1ebb8 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ea78:	4950      	ldr	r1, [pc, #320]	; (1ebbc <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
   1ea7a:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1ea7c:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ea7e:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ea80:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1ea82:	b136      	cbz	r6, 1ea92 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   1ea84:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   1ea88:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ea8a:	bf1e      	ittt	ne
   1ea8c:	601c      	strne	r4, [r3, #0]
   1ea8e:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1ea90:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ea92:	3304      	adds	r3, #4
   1ea94:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1ea96:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ea9a:	d1f1      	bne.n	1ea80 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ea9c:	4b46      	ldr	r3, [pc, #280]	; (1ebb8 <nrfx_gpiote_irq_handler+0x148>)
   1ea9e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1eaa2:	b1bb      	cbz	r3, 1ead4 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   1eaa4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1eaa8:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   1eaac:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   1eaae:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1eab2:	af01      	add	r7, sp, #4
   1eab4:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   1eab8:	9c01      	ldr	r4, [sp, #4]
   1eaba:	b98c      	cbnz	r4, 1eae0 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1eabc:	4b3e      	ldr	r3, [pc, #248]	; (1ebb8 <nrfx_gpiote_irq_handler+0x148>)
   1eabe:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   1eac2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1eac6:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   1eaca:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   1eacc:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   1ead0:	2b00      	cmp	r3, #0
   1ead2:	d1ee      	bne.n	1eab2 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   1ead4:	2401      	movs	r4, #1
    while (mask)
   1ead6:	2d00      	cmp	r5, #0
   1ead8:	d153      	bne.n	1eb82 <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1eada:	b003      	add	sp, #12
   1eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1eae0:	fa94 f4a4 	rbit	r4, r4
   1eae4:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1eae8:	4a35      	ldr	r2, [pc, #212]	; (1ebc0 <nrfx_gpiote_irq_handler+0x150>)
   1eaea:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1eaee:	08e0      	lsrs	r0, r4, #3
   1eaf0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1eaf4:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1eaf6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1eafa:	fa08 f202 	lsl.w	r2, r8, r2
   1eafe:	ea23 0302 	bic.w	r3, r3, r2
   1eb02:	543b      	strb	r3, [r7, r0]
   1eb04:	00a3      	lsls	r3, r4, #2
   1eb06:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   1eb0a:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1eb0e:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   1eb12:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1eb14:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1eb16:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1eb1a:	d518      	bpl.n	1eb4e <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
   1eb1c:	4659      	mov	r1, fp
   1eb1e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1eb20:	fa5f fa82 	uxtb.w	sl, r2
   1eb24:	f7ff fd2c 	bl	1e580 <call_handler>
   1eb28:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1eb2c:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1eb30:	459a      	cmp	sl, r3
   1eb32:	d107      	bne.n	1eb44 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1eb34:	2100      	movs	r1, #0
   1eb36:	4620      	mov	r0, r4
   1eb38:	f007 fe90 	bl	2685c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1eb3c:	4651      	mov	r1, sl
   1eb3e:	4620      	mov	r0, r4
   1eb40:	f007 fe8c 	bl	2685c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   1eb44:	fa08 f404 	lsl.w	r4, r8, r4
   1eb48:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   1eb4c:	e7b4      	b.n	1eab8 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1eb4e:	2a02      	cmp	r2, #2
   1eb50:	d10c      	bne.n	1eb6c <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1eb52:	2103      	movs	r1, #3
   1eb54:	4620      	mov	r0, r4
   1eb56:	f007 fe81 	bl	2685c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1eb5a:	f00a 0305 	and.w	r3, sl, #5
   1eb5e:	2b01      	cmp	r3, #1
   1eb60:	d1f0      	bne.n	1eb44 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
   1eb62:	4659      	mov	r1, fp
   1eb64:	4620      	mov	r0, r4
   1eb66:	f7ff fd0b 	bl	1e580 <call_handler>
   1eb6a:	e7eb      	b.n	1eb44 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1eb6c:	2102      	movs	r1, #2
   1eb6e:	4620      	mov	r0, r4
   1eb70:	f007 fe74 	bl	2685c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1eb74:	f1ba 0f03 	cmp.w	sl, #3
   1eb78:	d0f3      	beq.n	1eb62 <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1eb7a:	2a03      	cmp	r2, #3
   1eb7c:	d1e2      	bne.n	1eb44 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1eb7e:	458a      	cmp	sl, r1
   1eb80:	e7ee      	b.n	1eb60 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
   1eb82:	fa95 f3a5 	rbit	r3, r5
   1eb86:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1eb8a:	fa04 f203 	lsl.w	r2, r4, r3
   1eb8e:	009b      	lsls	r3, r3, #2
   1eb90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eb94:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1eb98:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1eb9c:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1eba0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1eba4:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1eba8:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1ebac:	f7ff fce8 	bl	1e580 <call_handler>
   1ebb0:	e791      	b.n	1ead6 <nrfx_gpiote_irq_handler+0x66>
   1ebb2:	bf00      	nop
   1ebb4:	40006100 	.word	0x40006100
   1ebb8:	40006000 	.word	0x40006000
   1ebbc:	40006120 	.word	0x40006120
   1ebc0:	20000954 	.word	0x20000954

0001ebc4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1ebc4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1ebc6:	4801      	ldr	r0, [pc, #4]	; (1ebcc <nrfx_ppi_channel_alloc+0x8>)
   1ebc8:	f7ff bb90 	b.w	1e2ec <nrfx_flag32_alloc>
   1ebcc:	200009b0 	.word	0x200009b0

0001ebd0 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   1ebd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ebd2:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1ebd6:	b087      	sub	sp, #28
   1ebd8:	4604      	mov	r4, r0
   1ebda:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1ebdc:	b1f3      	cbz	r3, 1ec1c <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ebde:	2300      	movs	r3, #0
   1ebe0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1ebe4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ebe8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1ebec:	b9b3      	cbnz	r3, 1ec1c <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   1ebee:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
   1ebf0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1ebf4:	2302      	movs	r3, #2
   1ebf6:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1ebf8:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   1ebfa:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ebfe:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   1ec02:	b11b      	cbz	r3, 1ec0c <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   1ec04:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1ec08:	059f      	lsls	r7, r3, #22
   1ec0a:	d402      	bmi.n	1ec12 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec0c:	2301      	movs	r3, #1
   1ec0e:	6223      	str	r3, [r4, #32]
   1ec10:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   1ec12:	2301      	movs	r3, #1
   1ec14:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   1ec18:	b007      	add	sp, #28
   1ec1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ec1c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1ec20:	2b00      	cmp	r3, #0
   1ec22:	d041      	beq.n	1eca8 <twim_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec24:	2300      	movs	r3, #0
   1ec26:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1ec2a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   1ec2e:	6a2b      	ldr	r3, [r5, #32]
   1ec30:	065e      	lsls	r6, r3, #25
   1ec32:	d40a      	bmi.n	1ec4a <twim_irq_handler+0x7a>
   1ec34:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1ec38:	b93b      	cbnz	r3, 1ec4a <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1ec3a:	4629      	mov	r1, r5
   1ec3c:	4620      	mov	r0, r4
   1ec3e:	f007 fe1b 	bl	26878 <xfer_completeness_check>
   1ec42:	f080 0001 	eor.w	r0, r0, #1
   1ec46:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1ec4a:	6a2b      	ldr	r3, [r5, #32]
   1ec4c:	f013 0c04 	ands.w	ip, r3, #4
   1ec50:	d13b      	bne.n	1ecca <twim_irq_handler+0xfa>
            event.xfer_desc = p_cb->xfer_desc;
   1ec52:	f105 070c 	add.w	r7, r5, #12
   1ec56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1ec58:	ae01      	add	r6, sp, #4
   1ec5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ec5c:	683b      	ldr	r3, [r7, #0]
   1ec5e:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   1ec62:	6033      	str	r3, [r6, #0]
   1ec64:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1ec68:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   1ec6c:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   1ec70:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1ec74:	b113      	cbz	r3, 1ec7c <twim_irq_handler+0xac>
   1ec76:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1ec7a:	b333      	cbz	r3, 1ecca <twim_irq_handler+0xfa>
    p_reg->SHORTS = mask;
   1ec7c:	2300      	movs	r3, #0
   1ec7e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   1ec82:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   1ec84:	4b2d      	ldr	r3, [pc, #180]	; (1ed3c <twim_irq_handler+0x16c>)
   1ec86:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1ec8a:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   1ec8e:	2b00      	cmp	r3, #0
   1ec90:	db1b      	blt.n	1ecca <twim_irq_handler+0xfa>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ec92:	095a      	lsrs	r2, r3, #5
   1ec94:	2101      	movs	r1, #1
   1ec96:	f003 031f 	and.w	r3, r3, #31
   1ec9a:	4099      	lsls	r1, r3
   1ec9c:	f102 0360 	add.w	r3, r2, #96	; 0x60
   1eca0:	4a27      	ldr	r2, [pc, #156]	; (1ed40 <twim_irq_handler+0x170>)
   1eca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   1eca6:	e010      	b.n	1ecca <twim_irq_handler+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eca8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1ecac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   1ecb0:	7b2b      	ldrb	r3, [r5, #12]
   1ecb2:	bb5b      	cbnz	r3, 1ed0c <twim_irq_handler+0x13c>
            event.xfer_desc = p_cb->xfer_desc;
   1ecb4:	f105 070c 	add.w	r7, r5, #12
   1ecb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1ecba:	ae01      	add	r6, sp, #4
   1ecbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ecbe:	683b      	ldr	r3, [r7, #0]
   1ecc0:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1ecc2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1ecc6:	2b00      	cmp	r3, #0
   1ecc8:	d0d9      	beq.n	1ec7e <twim_irq_handler+0xae>
    uint32_t error_source = p_reg->ERRORSRC;
   1ecca:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1ecce:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   1ecd2:	0798      	lsls	r0, r3, #30
   1ecd4:	d42c      	bmi.n	1ed30 <twim_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1ecd6:	0759      	lsls	r1, r3, #29
   1ecd8:	d42c      	bmi.n	1ed34 <twim_irq_handler+0x164>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1ecda:	07da      	lsls	r2, r3, #31
   1ecdc:	d42c      	bmi.n	1ed38 <twim_irq_handler+0x168>
    else if (p_cb->error)
   1ecde:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1ece2:	009b      	lsls	r3, r3, #2
   1ece4:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   1ece6:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   1ecea:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1ecee:	b90b      	cbnz	r3, 1ecf4 <twim_irq_handler+0x124>
        p_cb->busy = false;
   1ecf0:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   1ecf4:	6a2b      	ldr	r3, [r5, #32]
   1ecf6:	075b      	lsls	r3, r3, #29
   1ecf8:	d503      	bpl.n	1ed02 <twim_irq_handler+0x132>
   1ecfa:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1ecfe:	2b00      	cmp	r3, #0
   1ed00:	d08a      	beq.n	1ec18 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   1ed02:	e9d5 3100 	ldrd	r3, r1, [r5]
   1ed06:	4668      	mov	r0, sp
   1ed08:	4798      	blx	r3
   1ed0a:	e785      	b.n	1ec18 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   1ed0c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ed10:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1ed14:	f240 2302 	movw	r3, #514	; 0x202
   1ed18:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   1ed1a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   1ed1e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1ed22:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   1ed24:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ed28:	2301      	movs	r3, #1
   1ed2a:	60a3      	str	r3, [r4, #8]
   1ed2c:	6223      	str	r3, [r4, #32]
            return;
   1ed2e:	e773      	b.n	1ec18 <twim_irq_handler+0x48>
   1ed30:	2301      	movs	r3, #1
   1ed32:	e7d8      	b.n	1ece6 <twim_irq_handler+0x116>
   1ed34:	2302      	movs	r3, #2
   1ed36:	e7d6      	b.n	1ece6 <twim_irq_handler+0x116>
   1ed38:	2303      	movs	r3, #3
   1ed3a:	e7d4      	b.n	1ece6 <twim_irq_handler+0x116>
   1ed3c:	019c0202 	.word	0x019c0202
   1ed40:	e000e100 	.word	0xe000e100

0001ed44 <nrfx_twim_init>:
{
   1ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ed46:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ed48:	4d24      	ldr	r5, [pc, #144]	; (1eddc <nrfx_twim_init+0x98>)
   1ed4a:	f04f 0e34 	mov.w	lr, #52	; 0x34
   1ed4e:	fb0e fe06 	mul.w	lr, lr, r6
   1ed52:	eb05 040e 	add.w	r4, r5, lr
   1ed56:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   1ed5a:	2f00      	cmp	r7, #0
   1ed5c:	d13c      	bne.n	1edd8 <nrfx_twim_init+0x94>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1ed5e:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
   1ed62:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
   1ed66:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
   1ed68:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
   1ed6a:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   1ed6e:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1ed72:	7b4b      	ldrb	r3, [r1, #13]
   1ed74:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1ed78:	7b8b      	ldrb	r3, [r1, #14]
   1ed7a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1ed7e:	b1c3      	cbz	r3, 1edb2 <nrfx_twim_init+0x6e>
   1ed80:	7bcb      	ldrb	r3, [r1, #15]
   1ed82:	b92b      	cbnz	r3, 1ed90 <nrfx_twim_init+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   1ed84:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1ed88:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1ed8c:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   1ed90:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   1ed92:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
   1ed96:	b122      	cbz	r2, 1eda2 <nrfx_twim_init+0x5e>
   1ed98:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1ed9a:	f340 3007 	sbfx	r0, r0, #12, #8
   1ed9e:	f7e8 f9f1 	bl	7184 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1eda2:	2334      	movs	r3, #52	; 0x34
   1eda4:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   1eda8:	480d      	ldr	r0, [pc, #52]	; (1ede0 <nrfx_twim_init+0x9c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1edaa:	2301      	movs	r3, #1
   1edac:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   1edb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   1edb2:	680b      	ldr	r3, [r1, #0]
   1edb4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   1edb8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1edbc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1edc0:	f240 670c 	movw	r7, #1548	; 0x60c
   1edc4:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   1edc8:	684b      	ldr	r3, [r1, #4]
   1edca:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   1edce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1edd2:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   1edd6:	e7d3      	b.n	1ed80 <nrfx_twim_init+0x3c>
        return err_code;
   1edd8:	4802      	ldr	r0, [pc, #8]	; (1ede4 <nrfx_twim_init+0xa0>)
   1edda:	e7e9      	b.n	1edb0 <nrfx_twim_init+0x6c>
   1eddc:	20003980 	.word	0x20003980
   1ede0:	0bad0000 	.word	0x0bad0000
   1ede4:	0bad0005 	.word	0x0bad0005

0001ede8 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   1ede8:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1edea:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1edec:	2106      	movs	r1, #6
   1edee:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1edf2:	4b04      	ldr	r3, [pc, #16]	; (1ee04 <nrfx_twim_enable+0x1c>)
   1edf4:	2134      	movs	r1, #52	; 0x34
   1edf6:	fb01 3302 	mla	r3, r1, r2, r3
   1edfa:	2202      	movs	r2, #2
   1edfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   1ee00:	4770      	bx	lr
   1ee02:	bf00      	nop
   1ee04:	20003980 	.word	0x20003980

0001ee08 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ee08:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   1ee0a:	4b0c      	ldr	r3, [pc, #48]	; (1ee3c <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1ee0c:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   1ee0e:	2034      	movs	r0, #52	; 0x34
   1ee10:	fb00 3301 	mla	r3, r0, r1, r3
   1ee14:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   1ee16:	480a      	ldr	r0, [pc, #40]	; (1ee40 <nrfx_twim_disable+0x38>)
   1ee18:	6099      	str	r1, [r3, #8]
   1ee1a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1ee1e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   1ee22:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   1ee26:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ee2a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ee2e:	2201      	movs	r2, #1
   1ee30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   1ee34:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   1ee38:	4770      	bx	lr
   1ee3a:	bf00      	nop
   1ee3c:	20003980 	.word	0x20003980
   1ee40:	019c0202 	.word	0x019c0202

0001ee44 <nrfx_twim_xfer>:
{
   1ee44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   1ee48:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 1f138 <nrfx_twim_xfer+0x2f4>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ee4c:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   1ee50:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   1ee52:	2334      	movs	r3, #52	; 0x34
   1ee54:	fb03 c30e 	mla	r3, r3, lr, ip
{
   1ee58:	4617      	mov	r7, r2
    p_cb->error = false;
   1ee5a:	2200      	movs	r2, #0
   1ee5c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1ee60:	684b      	ldr	r3, [r1, #4]
{
   1ee62:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1ee64:	b14b      	cbz	r3, 1ee7a <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1ee66:	68cb      	ldr	r3, [r1, #12]
   1ee68:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1ee6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ee70:	d003      	beq.n	1ee7a <nrfx_twim_xfer+0x36>
        return err_code;
   1ee72:	4eb2      	ldr	r6, [pc, #712]	; (1f13c <nrfx_twim_xfer+0x2f8>)
}
   1ee74:	4630      	mov	r0, r6
   1ee76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1ee7a:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   1ee7c:	4bb0      	ldr	r3, [pc, #704]	; (1f140 <nrfx_twim_xfer+0x2fc>)
   1ee7e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   1ee82:	fb06 c60e 	mla	r6, r6, lr, ip
   1ee86:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1ee8a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1ee8e:	b123      	cbz	r3, 1ee9a <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1ee90:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   1ee92:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1ee96:	4eab      	ldr	r6, [pc, #684]	; (1f144 <nrfx_twim_xfer+0x300>)
   1ee98:	e7ec      	b.n	1ee74 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1ee9a:	f017 0f14 	tst.w	r7, #20
   1ee9e:	bf0c      	ite	eq
   1eea0:	2301      	moveq	r3, #1
   1eea2:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1eea4:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1eea8:	46a9      	mov	r9, r5
   1eeaa:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1eeae:	f106 080c 	add.w	r8, r6, #12
   1eeb2:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   1eeb6:	f8d9 3000 	ldr.w	r3, [r9]
   1eeba:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1eebe:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1eec2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   1eec6:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   1eec8:	786b      	ldrb	r3, [r5, #1]
   1eeca:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eece:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   1eed2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1eed6:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   1eeda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1eede:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   1eee2:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1eee6:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   1eeea:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1eeee:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1eef2:	bf18      	it	ne
   1eef4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   1eef6:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   1eefa:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1eefe:	bf18      	it	ne
   1ef00:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1ef02:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   1ef06:	782b      	ldrb	r3, [r5, #0]
   1ef08:	2b03      	cmp	r3, #3
   1ef0a:	f200 80b9 	bhi.w	1f080 <nrfx_twim_xfer+0x23c>
   1ef0e:	e8df f003 	tbb	[pc, r3]
   1ef12:	a48b      	.short	0xa48b
   1ef14:	026d      	.short	0x026d
   1ef16:	692b      	ldr	r3, [r5, #16]
   1ef18:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1ef1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ef20:	d1a7      	bne.n	1ee72 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   1ef22:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ef26:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1ef2a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ef2c:	68ea      	ldr	r2, [r5, #12]
   1ef2e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ef32:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef36:	2300      	movs	r3, #0
   1ef38:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1ef3c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef40:	2201      	movs	r2, #1
   1ef42:	6222      	str	r2, [r4, #32]
   1ef44:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ef46:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1ef4a:	2a00      	cmp	r2, #0
   1ef4c:	d0fb      	beq.n	1ef46 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef4e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1ef52:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ef56:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1ef58:	68ab      	ldr	r3, [r5, #8]
   1ef5a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ef5e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1ef62:	2334      	movs	r3, #52	; 0x34
   1ef64:	fb03 c30e 	mla	r3, r3, lr, ip
   1ef68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1ef6c:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1ef6e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ef70:	4e75      	ldr	r6, [pc, #468]	; (1f148 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1ef72:	0738      	lsls	r0, r7, #28
   1ef74:	d407      	bmi.n	1ef86 <nrfx_twim_xfer+0x142>
   1ef76:	782a      	ldrb	r2, [r5, #0]
   1ef78:	2a03      	cmp	r2, #3
   1ef7a:	d004      	beq.n	1ef86 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef7c:	2201      	movs	r2, #1
   1ef7e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   1ef80:	686b      	ldr	r3, [r5, #4]
   1ef82:	b903      	cbnz	r3, 1ef86 <nrfx_twim_xfer+0x142>
   1ef84:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   1ef86:	2334      	movs	r3, #52	; 0x34
   1ef88:	fb03 f30e 	mul.w	r3, r3, lr
   1ef8c:	eb0c 0203 	add.w	r2, ip, r3
   1ef90:	f85c 1003 	ldr.w	r1, [ip, r3]
   1ef94:	2900      	cmp	r1, #0
   1ef96:	d176      	bne.n	1f086 <nrfx_twim_xfer+0x242>
   1ef98:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ef9a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   1ef9e:	2b00      	cmp	r3, #0
   1efa0:	f000 8089 	beq.w	1f0b6 <nrfx_twim_xfer+0x272>
   1efa4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	f040 8087 	bne.w	1f0bc <nrfx_twim_xfer+0x278>
   1efae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1efb2:	2b00      	cmp	r3, #0
   1efb4:	f000 8095 	beq.w	1f0e2 <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
   1efb8:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1efba:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   1efbe:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1efc2:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   1efc6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   1efca:	2d00      	cmp	r5, #0
   1efcc:	f000 8081 	beq.w	1f0d2 <nrfx_twim_xfer+0x28e>
   1efd0:	f412 7f00 	tst.w	r2, #512	; 0x200
   1efd4:	f402 7280 	and.w	r2, r2, #256	; 0x100
   1efd8:	d17e      	bne.n	1f0d8 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1efda:	6220      	str	r0, [r4, #32]
   1efdc:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1efde:	2a00      	cmp	r2, #0
   1efe0:	d0db      	beq.n	1ef9a <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1efe2:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   1efe6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   1efea:	e7d6      	b.n	1ef9a <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1efec:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1efee:	68ea      	ldr	r2, [r5, #12]
   1eff0:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1eff4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1eff8:	692b      	ldr	r3, [r5, #16]
   1effa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1effe:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1f002:	f47f af36 	bne.w	1ee72 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1f006:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1f008:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   1f00c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   1f010:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1f014:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1f018:	2334      	movs	r3, #52	; 0x34
   1f01a:	fb03 c30e 	mla	r3, r3, lr, ip
   1f01e:	2202      	movs	r2, #2
   1f020:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f022:	2301      	movs	r3, #1
   1f024:	6223      	str	r3, [r4, #32]
   1f026:	e7a2      	b.n	1ef6e <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1f028:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f02a:	68ea      	ldr	r2, [r5, #12]
   1f02c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1f030:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   1f034:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1f038:	f04f 0334 	mov.w	r3, #52	; 0x34
   1f03c:	d008      	beq.n	1f050 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
   1f03e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f042:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1f046:	fb03 c30e 	mla	r3, r3, lr, ip
   1f04a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1f04e:	e7e7      	b.n	1f020 <nrfx_twim_xfer+0x1dc>
   1f050:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f054:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1f058:	e7df      	b.n	1f01a <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1f05a:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1f05c:	68ea      	ldr	r2, [r5, #12]
   1f05e:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1f062:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1f066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1f06a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1f06e:	2334      	movs	r3, #52	; 0x34
   1f070:	fb03 c30e 	mla	r3, r3, lr, ip
   1f074:	2202      	movs	r2, #2
   1f076:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f078:	2301      	movs	r3, #1
   1f07a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   1f07c:	2300      	movs	r3, #0
   1f07e:	e777      	b.n	1ef70 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
   1f080:	4e32      	ldr	r6, [pc, #200]	; (1f14c <nrfx_twim_xfer+0x308>)
   1f082:	2308      	movs	r3, #8
   1f084:	e775      	b.n	1ef72 <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1f086:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   1f088:	bf44      	itt	mi
   1f08a:	2300      	movmi	r3, #0
   1f08c:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   1f08e:	067a      	lsls	r2, r7, #25
   1f090:	d406      	bmi.n	1f0a0 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1f092:	2334      	movs	r3, #52	; 0x34
   1f094:	fb03 c30e 	mla	r3, r3, lr, ip
   1f098:	689a      	ldr	r2, [r3, #8]
   1f09a:	f042 0202 	orr.w	r2, r2, #2
   1f09e:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   1f0a0:	2334      	movs	r3, #52	; 0x34
   1f0a2:	fb03 c30e 	mla	r3, r3, lr, ip
   1f0a6:	689a      	ldr	r2, [r3, #8]
   1f0a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1f0ac:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1f0ae:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   1f0b0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1f0b4:	e6de      	b.n	1ee74 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f0b6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1f0ba:	b123      	cbz	r3, 1f0c6 <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f0bc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1f0c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f0c4:	e773      	b.n	1efae <nrfx_twim_xfer+0x16a>
   1f0c6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1f0ca:	2a00      	cmp	r2, #0
   1f0cc:	f43f af65 	beq.w	1ef9a <nrfx_twim_xfer+0x156>
   1f0d0:	e773      	b.n	1efba <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f0d2:	6220      	str	r0, [r4, #32]
   1f0d4:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1f0d6:	e760      	b.n	1ef9a <nrfx_twim_xfer+0x156>
   1f0d8:	2a00      	cmp	r2, #0
   1f0da:	d182      	bne.n	1efe2 <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
   1f0dc:	2b00      	cmp	r3, #0
   1f0de:	f43f af5c 	beq.w	1ef9a <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
   1f0e2:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   1f0e4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1f0e8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   1f0ec:	fb01 c20e 	mla	r2, r1, lr, ip
   1f0f0:	2000      	movs	r0, #0
   1f0f2:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   1f0f6:	b18b      	cbz	r3, 1f11c <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1f0f8:	4a15      	ldr	r2, [pc, #84]	; (1f150 <nrfx_twim_xfer+0x30c>)
   1f0fa:	4e16      	ldr	r6, [pc, #88]	; (1f154 <nrfx_twim_xfer+0x310>)
   1f0fc:	f013 0f01 	tst.w	r3, #1
   1f100:	bf18      	it	ne
   1f102:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1f104:	f013 0f02 	tst.w	r3, #2
   1f108:	f102 0201 	add.w	r2, r2, #1
   1f10c:	bf18      	it	ne
   1f10e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1f110:	f013 0f04 	tst.w	r3, #4
   1f114:	4b10      	ldr	r3, [pc, #64]	; (1f158 <nrfx_twim_xfer+0x314>)
   1f116:	bf18      	it	ne
   1f118:	461e      	movne	r6, r3
   1f11a:	e6ab      	b.n	1ee74 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1f11c:	067b      	lsls	r3, r7, #25
   1f11e:	f53f aea9 	bmi.w	1ee74 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   1f122:	fb0e c101 	mla	r1, lr, r1, ip
   1f126:	4620      	mov	r0, r4
   1f128:	f007 fba6 	bl	26878 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   1f12c:	4b09      	ldr	r3, [pc, #36]	; (1f154 <nrfx_twim_xfer+0x310>)
   1f12e:	2800      	cmp	r0, #0
   1f130:	bf08      	it	eq
   1f132:	461e      	moveq	r6, r3
   1f134:	e69e      	b.n	1ee74 <nrfx_twim_xfer+0x30>
   1f136:	bf00      	nop
   1f138:	20003980 	.word	0x20003980
   1f13c:	0bad000a 	.word	0x0bad000a
   1f140:	019c0202 	.word	0x019c0202
   1f144:	0bad000b 	.word	0x0bad000b
   1f148:	0bad0000 	.word	0x0bad0000
   1f14c:	0bad0004 	.word	0x0bad0004
   1f150:	0bae0000 	.word	0x0bae0000
   1f154:	0bad0001 	.word	0x0bad0001
   1f158:	0bae0002 	.word	0x0bae0002

0001f15c <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   1f15c:	4901      	ldr	r1, [pc, #4]	; (1f164 <nrfx_twim_0_irq_handler+0x8>)
   1f15e:	4802      	ldr	r0, [pc, #8]	; (1f168 <nrfx_twim_0_irq_handler+0xc>)
   1f160:	f7ff bd36 	b.w	1ebd0 <twim_irq_handler>
   1f164:	20003980 	.word	0x20003980
   1f168:	40003000 	.word	0x40003000

0001f16c <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   1f16c:	4902      	ldr	r1, [pc, #8]	; (1f178 <nrfx_twim_1_irq_handler+0xc>)
   1f16e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1f172:	f7ff bd2d 	b.w	1ebd0 <twim_irq_handler>
   1f176:	bf00      	nop
   1f178:	200039b4 	.word	0x200039b4

0001f17c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1f17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   1f180:	f000 001f 	and.w	r0, r0, #31
   1f184:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f188:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
   1f18a:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f18e:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
   1f192:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   1f196:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   1f19a:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f19e:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
   1f1a0:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
   1f1a4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1f1a8:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
   1f1ac:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1f1b0:	2004      	movs	r0, #4
   1f1b2:	f007 fb42 	bl	2683a <nrfx_busy_wait>
   1f1b6:	2709      	movs	r7, #9
    return p_reg->IN;
   1f1b8:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1f1bc:	421c      	tst	r4, r3
   1f1be:	d10d      	bne.n	1f1dc <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1f1c0:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   1f1c2:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
   1f1c6:	f007 fb38 	bl	2683a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1f1ca:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
   1f1cc:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   1f1d0:	2004      	movs	r0, #4
   1f1d2:	f007 fb32 	bl	2683a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1f1d6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   1f1da:	d1ed      	bne.n	1f1b8 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
   1f1dc:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1f1e0:	2004      	movs	r0, #4
   1f1e2:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
   1f1e6:	f007 fb28 	bl	2683a <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   1f1ea:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   1f1ee:	2004      	movs	r0, #4
   1f1f0:	f007 fb23 	bl	2683a <nrfx_busy_wait>
    return p_reg->IN;
   1f1f4:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1f1f8:	4803      	ldr	r0, [pc, #12]	; (1f208 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f1fa:	40f3      	lsrs	r3, r6
   1f1fc:	f003 0301 	and.w	r3, r3, #1
   1f200:	1ac0      	subs	r0, r0, r3
   1f202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f206:	bf00      	nop
   1f208:	0bad0001 	.word	0x0bad0001

0001f20c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1f20c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f20e:	4c11      	ldr	r4, [pc, #68]	; (1f254 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1f210:	4a11      	ldr	r2, [pc, #68]	; (1f258 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1f212:	4912      	ldr	r1, [pc, #72]	; (1f25c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f214:	2303      	movs	r3, #3
   1f216:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1f218:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f21a:	4b11      	ldr	r3, [pc, #68]	; (1f260 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1f21c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f21e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1f220:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f224:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1f226:	2300      	movs	r3, #0
   1f228:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1f22a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f22c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1f22e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1f230:	4a0c      	ldr	r2, [pc, #48]	; (1f264 <_DoInit+0x58>)
   1f232:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1f234:	2210      	movs	r2, #16
   1f236:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   1f238:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   1f23a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1f23c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f23e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1f240:	f004 fc61 	bl	23b06 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1f244:	4908      	ldr	r1, [pc, #32]	; (1f268 <_DoInit+0x5c>)
   1f246:	4620      	mov	r0, r4
   1f248:	f004 fc5d 	bl	23b06 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1f24c:	2320      	movs	r3, #32
   1f24e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1f250:	bd10      	pop	{r4, pc}
   1f252:	bf00      	nop
   1f254:	200039e8 	.word	0x200039e8
   1f258:	0002e99f 	.word	0x0002e99f
   1f25c:	0002e9a8 	.word	0x0002e9a8
   1f260:	20003c32 	.word	0x20003c32
   1f264:	20003c22 	.word	0x20003c22
   1f268:	0002e9ac 	.word	0x0002e9ac

0001f26c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f26c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1f270:	4f21      	ldr	r7, [pc, #132]	; (1f2f8 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1f272:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f276:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1f278:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f27c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1f27e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1f280:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f282:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f284:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f286:	d831      	bhi.n	1f2ec <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1f288:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1f28c:	ebaa 0905 	sub.w	r9, sl, r5
   1f290:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   1f294:	4294      	cmp	r4, r2
   1f296:	d811      	bhi.n	1f2bc <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f298:	2318      	movs	r3, #24
   1f29a:	fb06 3303 	mla	r3, r6, r3, r3
   1f29e:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1f2a0:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f2a2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1f2a4:	4641      	mov	r1, r8
   1f2a6:	4428      	add	r0, r5
   1f2a8:	f004 fcb0 	bl	23c0c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1f2ac:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1f2ae:	2318      	movs	r3, #24
   1f2b0:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1f2b4:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1f2b6:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1f2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1f2bc:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1f2be:	429c      	cmp	r4, r3
   1f2c0:	d818      	bhi.n	1f2f4 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f2c2:	fb00 bb0b 	mla	fp, r0, fp, fp
   1f2c6:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1f2c8:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f2ca:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f2ce:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1f2d0:	4428      	add	r0, r5
   1f2d2:	f004 fc9b 	bl	23c0c <memcpy>
      if (NumBytes) {
   1f2d6:	ebb4 040a 	subs.w	r4, r4, sl
   1f2da:	d0e8      	beq.n	1f2ae <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1f2dc:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f2e0:	4622      	mov	r2, r4
   1f2e2:	eb08 0109 	add.w	r1, r8, r9
   1f2e6:	f004 fc91 	bl	23c0c <memcpy>
      return 1;
   1f2ea:	e7e0      	b.n	1f2ae <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1f2ec:	3b01      	subs	r3, #1
   1f2ee:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1f2f0:	42a3      	cmp	r3, r4
   1f2f2:	d2d1      	bcs.n	1f298 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1f2f4:	2000      	movs	r0, #0
   1f2f6:	e7df      	b.n	1f2b8 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1f2f8:	200039e8 	.word	0x200039e8

0001f2fc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1f2fc:	4b03      	ldr	r3, [pc, #12]	; (1f30c <SEGGER_RTT_HasDataUp+0x10>)
   1f2fe:	2218      	movs	r2, #24
   1f300:	fb02 3300 	mla	r3, r2, r0, r3
   1f304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1f306:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1f308:	1a80      	subs	r0, r0, r2
   1f30a:	4770      	bx	lr
   1f30c:	200039e8 	.word	0x200039e8

0001f310 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1f310:	4803      	ldr	r0, [pc, #12]	; (1f320 <zephyr_rtt_mutex_lock+0x10>)
   1f312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f31a:	f000 bc1b 	b.w	1fb54 <z_impl_k_mutex_lock>
   1f31e:	bf00      	nop
   1f320:	20000bb0 	.word	0x20000bb0

0001f324 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1f324:	4801      	ldr	r0, [pc, #4]	; (1f32c <zephyr_rtt_mutex_unlock+0x8>)
   1f326:	f000 bc8f 	b.w	1fc48 <z_impl_k_mutex_unlock>
   1f32a:	bf00      	nop
   1f32c:	20000bb0 	.word	0x20000bb0

0001f330 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
   1f330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
   1f334:	f8df b048 	ldr.w	fp, [pc, #72]	; 1f380 <device_visitor+0x50>
   1f338:	4d12      	ldr	r5, [pc, #72]	; (1f384 <device_visitor+0x54>)
   1f33a:	469a      	mov	sl, r3
   1f33c:	eba5 050b 	sub.w	r5, r5, fp
   1f340:	4b11      	ldr	r3, [pc, #68]	; (1f388 <device_visitor+0x58>)
   1f342:	10ed      	asrs	r5, r5, #3
   1f344:	4680      	mov	r8, r0
   1f346:	460f      	mov	r7, r1
   1f348:	4691      	mov	r9, r2
   1f34a:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
   1f34c:	2600      	movs	r6, #0
   1f34e:	42be      	cmp	r6, r7
   1f350:	d102      	bne.n	1f358 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   1f352:	4630      	mov	r0, r6
}
   1f354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
   1f358:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
   1f35c:	2c00      	cmp	r4, #0
   1f35e:	dd0d      	ble.n	1f37c <device_visitor+0x4c>
   1f360:	42a5      	cmp	r5, r4
   1f362:	d30b      	bcc.n	1f37c <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
   1f364:	3c01      	subs	r4, #1
   1f366:	b224      	sxth	r4, r4
   1f368:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1f36c:	eb0b 00c4 	add.w	r0, fp, r4, lsl #3
		int rc = visitor_cb(rdev, context);
   1f370:	4651      	mov	r1, sl
   1f372:	47c8      	blx	r9
		if (rc < 0) {
   1f374:	2800      	cmp	r0, #0
   1f376:	dbed      	blt.n	1f354 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
   1f378:	3601      	adds	r6, #1
   1f37a:	e7e8      	b.n	1f34e <device_visitor+0x1e>
	const struct device *dev = NULL;
   1f37c:	2000      	movs	r0, #0
   1f37e:	e7f7      	b.n	1f370 <device_visitor+0x40>
   1f380:	000275b8 	.word	0x000275b8
   1f384:	00027720 	.word	0x00027720
   1f388:	aaaaaaab 	.word	0xaaaaaaab

0001f38c <z_device_get_all_static>:
	*devices = __device_start;
   1f38c:	4a03      	ldr	r2, [pc, #12]	; (1f39c <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   1f38e:	4b04      	ldr	r3, [pc, #16]	; (1f3a0 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   1f390:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   1f392:	1a9b      	subs	r3, r3, r2
}
   1f394:	4803      	ldr	r0, [pc, #12]	; (1f3a4 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   1f396:	10db      	asrs	r3, r3, #3
}
   1f398:	4358      	muls	r0, r3
   1f39a:	4770      	bx	lr
   1f39c:	000275b8 	.word	0x000275b8
   1f3a0:	00027720 	.word	0x00027720
   1f3a4:	aaaaaaab 	.word	0xaaaaaaab

0001f3a8 <z_impl_device_get_binding>:
{
   1f3a8:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   1f3aa:	4605      	mov	r5, r0
   1f3ac:	b910      	cbnz	r0, 1f3b4 <z_impl_device_get_binding+0xc>
		return NULL;
   1f3ae:	2400      	movs	r4, #0
}
   1f3b0:	4620      	mov	r0, r4
   1f3b2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1f3b4:	7803      	ldrb	r3, [r0, #0]
   1f3b6:	2b00      	cmp	r3, #0
   1f3b8:	d0f9      	beq.n	1f3ae <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f3ba:	4c0e      	ldr	r4, [pc, #56]	; (1f3f4 <z_impl_device_get_binding+0x4c>)
   1f3bc:	4e0e      	ldr	r6, [pc, #56]	; (1f3f8 <z_impl_device_get_binding+0x50>)
   1f3be:	42b4      	cmp	r4, r6
   1f3c0:	d108      	bne.n	1f3d4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f3c2:	4c0c      	ldr	r4, [pc, #48]	; (1f3f4 <z_impl_device_get_binding+0x4c>)
   1f3c4:	42b4      	cmp	r4, r6
   1f3c6:	d0f2      	beq.n	1f3ae <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f3c8:	4620      	mov	r0, r4
   1f3ca:	f007 fa8d 	bl	268e8 <z_device_is_ready>
   1f3ce:	b950      	cbnz	r0, 1f3e6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f3d0:	3418      	adds	r4, #24
   1f3d2:	e7f7      	b.n	1f3c4 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1f3d4:	4620      	mov	r0, r4
   1f3d6:	f007 fa87 	bl	268e8 <z_device_is_ready>
   1f3da:	b110      	cbz	r0, 1f3e2 <z_impl_device_get_binding+0x3a>
   1f3dc:	6823      	ldr	r3, [r4, #0]
   1f3de:	42ab      	cmp	r3, r5
   1f3e0:	d0e6      	beq.n	1f3b0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f3e2:	3418      	adds	r4, #24
   1f3e4:	e7eb      	b.n	1f3be <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f3e6:	6821      	ldr	r1, [r4, #0]
   1f3e8:	4628      	mov	r0, r5
   1f3ea:	f004 fbc8 	bl	23b7e <strcmp>
   1f3ee:	2800      	cmp	r0, #0
   1f3f0:	d1ee      	bne.n	1f3d0 <z_impl_device_get_binding+0x28>
   1f3f2:	e7dd      	b.n	1f3b0 <z_impl_device_get_binding+0x8>
   1f3f4:	000275b8 	.word	0x000275b8
   1f3f8:	00027720 	.word	0x00027720

0001f3fc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f3fc:	4b01      	ldr	r3, [pc, #4]	; (1f404 <z_impl_z_errno+0x8>)
   1f3fe:	6898      	ldr	r0, [r3, #8]
}
   1f400:	3098      	adds	r0, #152	; 0x98
   1f402:	4770      	bx	lr
   1f404:	20003a90 	.word	0x20003a90

0001f408 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1f408:	b5b0      	push	{r4, r5, r7, lr}
   1f40a:	4604      	mov	r4, r0
   1f40c:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   1f40e:	f7e4 fcbb 	bl	3d88 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1f412:	480b      	ldr	r0, [pc, #44]	; (1f440 <k_sys_fatal_error_handler+0x38>)
   1f414:	6803      	ldr	r3, [r0, #0]
   1f416:	075b      	lsls	r3, r3, #29
   1f418:	d00f      	beq.n	1f43a <k_sys_fatal_error_handler+0x32>
   1f41a:	466d      	mov	r5, sp
   1f41c:	b088      	sub	sp, #32
   1f41e:	466a      	mov	r2, sp
   1f420:	4b08      	ldr	r3, [pc, #32]	; (1f444 <k_sys_fatal_error_handler+0x3c>)
   1f422:	6153      	str	r3, [r2, #20]
   1f424:	4b08      	ldr	r3, [pc, #32]	; (1f448 <k_sys_fatal_error_handler+0x40>)
   1f426:	6193      	str	r3, [r2, #24]
   1f428:	2303      	movs	r3, #3
   1f42a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f42e:	2300      	movs	r3, #0
   1f430:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f434:	f7e4 fe8c 	bl	4150 <z_impl_z_log_msg_static_create>
   1f438:	46ad      	mov	sp, r5
	arch_system_halt(reason);
   1f43a:	4620      	mov	r0, r4
   1f43c:	f007 fa77 	bl	2692e <arch_system_halt>
   1f440:	20000b38 	.word	0x20000b38
   1f444:	0002e9b3 	.word	0x0002e9b3
   1f448:	0002ea99 	.word	0x0002ea99

0001f44c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f450:	4605      	mov	r5, r0
   1f452:	af00      	add	r7, sp, #0
   1f454:	460e      	mov	r6, r1
	__asm__ volatile(
   1f456:	f04f 0320 	mov.w	r3, #32
   1f45a:	f3ef 8911 	mrs	r9, BASEPRI
   1f45e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f462:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f466:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1f554 <z_fatal_error+0x108>
	return z_impl_z_current_get();
   1f46a:	f001 f983 	bl	20774 <z_impl_z_current_get>
   1f46e:	f8d8 3000 	ldr.w	r3, [r8]
   1f472:	0759      	lsls	r1, r3, #29
   1f474:	4604      	mov	r4, r0
   1f476:	d069      	beq.n	1f54c <z_fatal_error+0x100>
	switch (reason) {
   1f478:	2d04      	cmp	r5, #4
   1f47a:	bf96      	itet	ls
   1f47c:	4b36      	ldrls	r3, [pc, #216]	; (1f558 <z_fatal_error+0x10c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f47e:	4b37      	ldrhi	r3, [pc, #220]	; (1f55c <z_fatal_error+0x110>)
   1f480:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1f484:	46ea      	mov	sl, sp
   1f486:	b08c      	sub	sp, #48	; 0x30
   1f488:	466a      	mov	r2, sp
   1f48a:	4935      	ldr	r1, [pc, #212]	; (1f560 <z_fatal_error+0x114>)
   1f48c:	6151      	str	r1, [r2, #20]
   1f48e:	4935      	ldr	r1, [pc, #212]	; (1f564 <z_fatal_error+0x118>)
   1f490:	6213      	str	r3, [r2, #32]
   1f492:	e9c2 1506 	strd	r1, r5, [r2, #24]
   1f496:	f240 4102 	movw	r1, #1026	; 0x402
   1f49a:	8511      	strh	r1, [r2, #40]	; 0x28
   1f49c:	2300      	movs	r3, #0
   1f49e:	4932      	ldr	r1, [pc, #200]	; (1f568 <z_fatal_error+0x11c>)
   1f4a0:	6253      	str	r3, [r2, #36]	; 0x24
   1f4a2:	f842 1f10 	str.w	r1, [r2, #16]!
   1f4a6:	482b      	ldr	r0, [pc, #172]	; (1f554 <z_fatal_error+0x108>)
   1f4a8:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   1f4ac:	f7e4 fe50 	bl	4150 <z_impl_z_log_msg_static_create>
   1f4b0:	46d5      	mov	sp, sl
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f4b2:	b1c6      	cbz	r6, 1f4e6 <z_fatal_error+0x9a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f4b4:	69f3      	ldr	r3, [r6, #28]
		LOG_ERR("Fault during interrupt handling\n");
   1f4b6:	f8d8 2000 	ldr.w	r2, [r8]
   1f4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f4be:	b193      	cbz	r3, 1f4e6 <z_fatal_error+0x9a>
		LOG_ERR("Fault during interrupt handling\n");
   1f4c0:	0752      	lsls	r2, r2, #29
   1f4c2:	d02c      	beq.n	1f51e <z_fatal_error+0xd2>
   1f4c4:	46ea      	mov	sl, sp
   1f4c6:	b088      	sub	sp, #32
   1f4c8:	466a      	mov	r2, sp
   1f4ca:	4b28      	ldr	r3, [pc, #160]	; (1f56c <z_fatal_error+0x120>)
   1f4cc:	6153      	str	r3, [r2, #20]
   1f4ce:	4b25      	ldr	r3, [pc, #148]	; (1f564 <z_fatal_error+0x118>)
   1f4d0:	6193      	str	r3, [r2, #24]
   1f4d2:	2303      	movs	r3, #3
   1f4d4:	f842 3f10 	str.w	r3, [r2, #16]!
   1f4d8:	481e      	ldr	r0, [pc, #120]	; (1f554 <z_fatal_error+0x108>)
   1f4da:	2300      	movs	r3, #0
   1f4dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f4e0:	f7e4 fe36 	bl	4150 <z_impl_z_log_msg_static_create>
   1f4e4:	46d5      	mov	sp, sl
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f4e6:	f8d8 3000 	ldr.w	r3, [r8]
   1f4ea:	075b      	lsls	r3, r3, #29
   1f4ec:	d017      	beq.n	1f51e <z_fatal_error+0xd2>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f4ee:	bb24      	cbnz	r4, 1f53a <z_fatal_error+0xee>
		thread_name = "unknown";
   1f4f0:	481f      	ldr	r0, [pc, #124]	; (1f570 <z_fatal_error+0x124>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1f4f2:	46e8      	mov	r8, sp
   1f4f4:	b08a      	sub	sp, #40	; 0x28
   1f4f6:	466a      	mov	r2, sp
   1f4f8:	4b1e      	ldr	r3, [pc, #120]	; (1f574 <z_fatal_error+0x128>)
   1f4fa:	6153      	str	r3, [r2, #20]
   1f4fc:	4b19      	ldr	r3, [pc, #100]	; (1f564 <z_fatal_error+0x118>)
   1f4fe:	6210      	str	r0, [r2, #32]
   1f500:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1f504:	f240 4302 	movw	r3, #1026	; 0x402
   1f508:	8493      	strh	r3, [r2, #36]	; 0x24
   1f50a:	4b1b      	ldr	r3, [pc, #108]	; (1f578 <z_fatal_error+0x12c>)
   1f50c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f510:	4810      	ldr	r0, [pc, #64]	; (1f554 <z_fatal_error+0x108>)
   1f512:	2300      	movs	r3, #0
   1f514:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1f518:	f7e4 fe1a 	bl	4150 <z_impl_z_log_msg_static_create>
   1f51c:	46c5      	mov	sp, r8

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1f51e:	4631      	mov	r1, r6
   1f520:	4628      	mov	r0, r5
   1f522:	f7ff ff71 	bl	1f408 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f526:	f389 8811 	msr	BASEPRI, r9
   1f52a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f52e:	4620      	mov	r0, r4
   1f530:	f7e8 fbb6 	bl	7ca0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1f534:	46bd      	mov	sp, r7
   1f536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f53a:	4620      	mov	r0, r4
   1f53c:	f007 fabc 	bl	26ab8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f540:	2800      	cmp	r0, #0
   1f542:	d0d5      	beq.n	1f4f0 <z_fatal_error+0xa4>
   1f544:	7803      	ldrb	r3, [r0, #0]
   1f546:	2b00      	cmp	r3, #0
   1f548:	d0d2      	beq.n	1f4f0 <z_fatal_error+0xa4>
   1f54a:	e7d2      	b.n	1f4f2 <z_fatal_error+0xa6>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f54c:	2e00      	cmp	r6, #0
   1f54e:	d1b1      	bne.n	1f4b4 <z_fatal_error+0x68>
   1f550:	e7e5      	b.n	1f51e <z_fatal_error+0xd2>
   1f552:	bf00      	nop
   1f554:	20000b38 	.word	0x20000b38
   1f558:	00029cc8 	.word	0x00029cc8
   1f55c:	0002e9c6 	.word	0x0002e9c6
   1f560:	0002e9d4 	.word	0x0002e9d4
   1f564:	0002ea8b 	.word	0x0002ea8b
   1f568:	01000006 	.word	0x01000006
   1f56c:	0002ea00 	.word	0x0002ea00
   1f570:	0002ba36 	.word	0x0002ba36
   1f574:	0002ea25 	.word	0x0002ea25
   1f578:	01000005 	.word	0x01000005

0001f57c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f57c:	4b0f      	ldr	r3, [pc, #60]	; (1f5bc <z_sys_init_run_level+0x40>)
{
   1f57e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f580:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f584:	3001      	adds	r0, #1
   1f586:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f58a:	42a6      	cmp	r6, r4
   1f58c:	d800      	bhi.n	1f590 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1f58e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1f590:	e9d4 3500 	ldrd	r3, r5, [r4]
   1f594:	4628      	mov	r0, r5
   1f596:	4798      	blx	r3
		if (dev != NULL) {
   1f598:	b16d      	cbz	r5, 1f5b6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1f59a:	b138      	cbz	r0, 1f5ac <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1f59c:	2800      	cmp	r0, #0
   1f59e:	bfb8      	it	lt
   1f5a0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1f5a2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1f5a4:	28ff      	cmp	r0, #255	; 0xff
   1f5a6:	bfa8      	it	ge
   1f5a8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1f5aa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1f5ac:	68ea      	ldr	r2, [r5, #12]
   1f5ae:	7853      	ldrb	r3, [r2, #1]
   1f5b0:	f043 0301 	orr.w	r3, r3, #1
   1f5b4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f5b6:	3408      	adds	r4, #8
   1f5b8:	e7e7      	b.n	1f58a <z_sys_init_run_level+0xe>
   1f5ba:	bf00      	nop
   1f5bc:	00029cdc 	.word	0x00029cdc

0001f5c0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f5c0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f5c2:	4b0a      	ldr	r3, [pc, #40]	; (1f5ec <bg_thread_main+0x2c>)
   1f5c4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f5c6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1f5c8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f5ca:	f7ff ffd7 	bl	1f57c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f5ce:	f001 fc13 	bl	20df8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1f5d2:	2004      	movs	r0, #4
   1f5d4:	f7ff ffd2 	bl	1f57c <z_sys_init_run_level>

	z_init_static_threads();
   1f5d8:	f000 fa40 	bl	1fa5c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1f5dc:	f7e2 fd7e 	bl	20dc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f5e0:	4a03      	ldr	r2, [pc, #12]	; (1f5f0 <bg_thread_main+0x30>)
   1f5e2:	7b13      	ldrb	r3, [r2, #12]
   1f5e4:	f023 0301 	bic.w	r3, r3, #1
   1f5e8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f5ea:	bd08      	pop	{r3, pc}
   1f5ec:	20004032 	.word	0x20004032
   1f5f0:	20001fd0 	.word	0x20001fd0

0001f5f4 <z_bss_zero>:
{
   1f5f4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1f5f6:	4803      	ldr	r0, [pc, #12]	; (1f604 <z_bss_zero+0x10>)
   1f5f8:	4a03      	ldr	r2, [pc, #12]	; (1f608 <z_bss_zero+0x14>)
   1f5fa:	2100      	movs	r1, #0
   1f5fc:	1a12      	subs	r2, r2, r0
   1f5fe:	f007 f99f 	bl	26940 <z_early_memset>
}
   1f602:	bd08      	pop	{r3, pc}
   1f604:	20000d18 	.word	0x20000d18
   1f608:	20004034 	.word	0x20004034

0001f60c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1f60c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1f60e:	4e17      	ldr	r6, [pc, #92]	; (1f66c <z_init_cpu+0x60>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f610:	4d17      	ldr	r5, [pc, #92]	; (1f670 <z_init_cpu+0x64>)
	z_setup_new_thread(thread, stack,
   1f612:	4918      	ldr	r1, [pc, #96]	; (1f674 <z_init_cpu+0x68>)
{
   1f614:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   1f616:	23b8      	movs	r3, #184	; 0xb8
   1f618:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1f61c:	4b16      	ldr	r3, [pc, #88]	; (1f678 <z_init_cpu+0x6c>)
   1f61e:	9305      	str	r3, [sp, #20]
   1f620:	2201      	movs	r2, #1
   1f622:	230f      	movs	r3, #15
   1f624:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1f628:	2300      	movs	r3, #0
   1f62a:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f62e:	2318      	movs	r3, #24
   1f630:	fb03 5500 	mla	r5, r3, r0, r5
{
   1f634:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1f636:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1f63a:	fb00 1104 	mla	r1, r0, r4, r1
   1f63e:	4b0f      	ldr	r3, [pc, #60]	; (1f67c <z_init_cpu+0x70>)
   1f640:	9500      	str	r5, [sp, #0]
   1f642:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f646:	4630      	mov	r0, r6
   1f648:	f000 f974 	bl	1f934 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f64c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f64e:	4a0c      	ldr	r2, [pc, #48]	; (1f680 <z_init_cpu+0x74>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1f650:	60ee      	str	r6, [r5, #12]
   1f652:	f023 0304 	bic.w	r3, r3, #4
   1f656:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f658:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1f65c:	fb04 3303 	mla	r3, r4, r3, r3
   1f660:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1f662:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1f664:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1f666:	b006      	add	sp, #24
   1f668:	bd70      	pop	{r4, r5, r6, pc}
   1f66a:	bf00      	nop
   1f66c:	20001f18 	.word	0x20001f18
   1f670:	20003a90 	.word	0x20003a90
   1f674:	200063c0 	.word	0x200063c0
   1f678:	0002eab3 	.word	0x0002eab3
   1f67c:	0001fb1d 	.word	0x0001fb1d
   1f680:	20005b80 	.word	0x20005b80

0001f684 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1f684:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f686:	2000      	movs	r0, #0
{
   1f688:	b0b4      	sub	sp, #208	; 0xd0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f68a:	f7ff ff77 	bl	1f57c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f68e:	4b2e      	ldr	r3, [pc, #184]	; (1f748 <z_cstart+0xc4>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f690:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f694:	4d2d      	ldr	r5, [pc, #180]	; (1f74c <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1f696:	4e2e      	ldr	r6, [pc, #184]	; (1f750 <z_cstart+0xcc>)
   1f698:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f69a:	4f2e      	ldr	r7, [pc, #184]	; (1f754 <z_cstart+0xd0>)
   1f69c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1f6a0:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f6a2:	2400      	movs	r4, #0
   1f6a4:	23e0      	movs	r3, #224	; 0xe0
   1f6a6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f6aa:	77ec      	strb	r4, [r5, #31]
   1f6ac:	762c      	strb	r4, [r5, #24]
   1f6ae:	766c      	strb	r4, [r5, #25]
   1f6b0:	76ac      	strb	r4, [r5, #26]
   1f6b2:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f6b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f6b8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f6bc:	626b      	str	r3, [r5, #36]	; 0x24
   1f6be:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f6c2:	f7e8 fab1 	bl	7c28 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f6c6:	f7e7 fcc3 	bl	7050 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f6ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f6ce:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f6d0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1f6d2:	f7e8 fbc7 	bl	7e64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1f6d6:	f7e8 faf9 	bl	7ccc <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1f6da:	f7e4 faa3 	bl	3c24 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f6de:	f240 1301 	movw	r3, #257	; 0x101
   1f6e2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f6e6:	ab06      	add	r3, sp, #24
   1f6e8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1f6ea:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
   1f6ee:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1f6f0:	f007 f8f9 	bl	268e6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1f6f4:	2001      	movs	r0, #1
   1f6f6:	f7ff ff41 	bl	1f57c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f6fa:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1f6fc:	4d16      	ldr	r5, [pc, #88]	; (1f758 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f6fe:	f7ff ff3d 	bl	1f57c <z_sys_init_run_level>
	z_sched_init();
   1f702:	f000 ff8f 	bl	20624 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f706:	4b15      	ldr	r3, [pc, #84]	; (1f75c <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   1f708:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f70a:	9305      	str	r3, [sp, #20]
   1f70c:	2301      	movs	r3, #1
   1f70e:	4914      	ldr	r1, [pc, #80]	; (1f760 <z_cstart+0xdc>)
   1f710:	9400      	str	r4, [sp, #0]
   1f712:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1f716:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f71a:	463b      	mov	r3, r7
   1f71c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f720:	4628      	mov	r0, r5
   1f722:	f000 f907 	bl	1f934 <z_setup_new_thread>
   1f726:	7b6a      	ldrb	r2, [r5, #13]
   1f728:	4606      	mov	r6, r0
   1f72a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1f72e:	4628      	mov	r0, r5
   1f730:	736a      	strb	r2, [r5, #13]
   1f732:	f007 fc23 	bl	26f7c <z_ready_thread>
	z_init_cpu(0);
   1f736:	4620      	mov	r0, r4
   1f738:	f7ff ff68 	bl	1f60c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f73c:	463a      	mov	r2, r7
   1f73e:	4631      	mov	r1, r6
   1f740:	4628      	mov	r0, r5
   1f742:	f7e7 fe29 	bl	7398 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f746:	bf00      	nop
   1f748:	200063c0 	.word	0x200063c0
   1f74c:	e000ed00 	.word	0xe000ed00
   1f750:	20003a90 	.word	0x20003a90
   1f754:	0001f5c1 	.word	0x0001f5c1
   1f758:	20001fd0 	.word	0x20001fd0
   1f75c:	0002eab8 	.word	0x0002eab8
   1f760:	20006540 	.word	0x20006540

0001f764 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1f764:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f766:	4c06      	ldr	r4, [pc, #24]	; (1f780 <statics_init+0x1c>)
   1f768:	4d06      	ldr	r5, [pc, #24]	; (1f784 <statics_init+0x20>)
   1f76a:	42ac      	cmp	r4, r5
   1f76c:	d301      	bcc.n	1f772 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1f76e:	2000      	movs	r0, #0
   1f770:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f772:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f776:	4620      	mov	r0, r4
   1f778:	f007 f8e6 	bl	26948 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f77c:	3414      	adds	r4, #20
   1f77e:	e7f4      	b.n	1f76a <statics_init+0x6>
   1f780:	20000bb0 	.word	0x20000bb0
   1f784:	20000bb0 	.word	0x20000bb0

0001f788 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1f788:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f78a:	4c06      	ldr	r4, [pc, #24]	; (1f7a4 <init_mem_slab_module+0x1c>)
   1f78c:	4d06      	ldr	r5, [pc, #24]	; (1f7a8 <init_mem_slab_module+0x20>)
	int rc = 0;
   1f78e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f790:	42ac      	cmp	r4, r5
   1f792:	d300      	bcc.n	1f796 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1f794:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1f796:	4620      	mov	r0, r4
   1f798:	f007 f948 	bl	26a2c <create_free_list>
		if (rc < 0) {
   1f79c:	2800      	cmp	r0, #0
   1f79e:	dbf9      	blt.n	1f794 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f7a0:	341c      	adds	r4, #28
   1f7a2:	e7f5      	b.n	1f790 <init_mem_slab_module+0x8>
   1f7a4:	20000b5c 	.word	0x20000b5c
   1f7a8:	20000bb0 	.word	0x20000bb0

0001f7ac <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f7ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f7ae:	460c      	mov	r4, r1
	__asm__ volatile(
   1f7b0:	f04f 0520 	mov.w	r5, #32
   1f7b4:	f3ef 8111 	mrs	r1, BASEPRI
   1f7b8:	f385 8812 	msr	BASEPRI_MAX, r5
   1f7bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1f7c0:	6945      	ldr	r5, [r0, #20]
   1f7c2:	b15d      	cbz	r5, 1f7dc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1f7c4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f7c6:	682b      	ldr	r3, [r5, #0]
   1f7c8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f7ca:	6983      	ldr	r3, [r0, #24]
   1f7cc:	3301      	adds	r3, #1
   1f7ce:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f7d0:	2000      	movs	r0, #0
	__asm__ volatile(
   1f7d2:	f381 8811 	msr	BASEPRI, r1
   1f7d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1f7da:	e011      	b.n	1f800 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1f7dc:	ea52 0603 	orrs.w	r6, r2, r3
   1f7e0:	d103      	bne.n	1f7ea <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1f7e2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1f7e4:	f06f 000b 	mvn.w	r0, #11
   1f7e8:	e7f3      	b.n	1f7d2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1f7ea:	e9cd 2300 	strd	r2, r3, [sp]
   1f7ee:	4602      	mov	r2, r0
   1f7f0:	3008      	adds	r0, #8
   1f7f2:	f000 fe21 	bl	20438 <z_pend_curr>
		if (result == 0) {
   1f7f6:	b918      	cbnz	r0, 1f800 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1f7f8:	4b02      	ldr	r3, [pc, #8]	; (1f804 <k_mem_slab_alloc+0x58>)
   1f7fa:	689b      	ldr	r3, [r3, #8]
   1f7fc:	695b      	ldr	r3, [r3, #20]
   1f7fe:	6023      	str	r3, [r4, #0]
}
   1f800:	b002      	add	sp, #8
   1f802:	bd70      	pop	{r4, r5, r6, pc}
   1f804:	20003a90 	.word	0x20003a90

0001f808 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   1f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f80a:	4605      	mov	r5, r0
   1f80c:	460e      	mov	r6, r1
	__asm__ volatile(
   1f80e:	f04f 0320 	mov.w	r3, #32
   1f812:	f3ef 8711 	mrs	r7, BASEPRI
   1f816:	f383 8812 	msr	BASEPRI_MAX, r3
   1f81a:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   1f81e:	4b06      	ldr	r3, [pc, #24]	; (1f838 <k_thread_foreach+0x30>)
   1f820:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1f822:	b924      	cbnz	r4, 1f82e <k_thread_foreach+0x26>
	__asm__ volatile(
   1f824:	f387 8811 	msr	BASEPRI, r7
   1f828:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   1f82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   1f82e:	4620      	mov	r0, r4
   1f830:	4631      	mov	r1, r6
   1f832:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   1f834:	6f64      	ldr	r4, [r4, #116]	; 0x74
   1f836:	e7f4      	b.n	1f822 <k_thread_foreach+0x1a>
   1f838:	20003a90 	.word	0x20003a90

0001f83c <z_thread_monitor_exit>:
	__asm__ volatile(
   1f83c:	f04f 0320 	mov.w	r3, #32
   1f840:	f3ef 8111 	mrs	r1, BASEPRI
   1f844:	f383 8812 	msr	BASEPRI_MAX, r3
   1f848:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1f84c:	4a09      	ldr	r2, [pc, #36]	; (1f874 <z_thread_monitor_exit+0x38>)
   1f84e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1f850:	4283      	cmp	r3, r0
   1f852:	d107      	bne.n	1f864 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   1f854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1f856:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
   1f858:	f381 8811 	msr	BASEPRI, r1
   1f85c:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1f860:	4770      	bx	lr
   1f862:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1f864:	2b00      	cmp	r3, #0
   1f866:	d0f7      	beq.n	1f858 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   1f868:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1f86a:	4282      	cmp	r2, r0
   1f86c:	d1f9      	bne.n	1f862 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   1f86e:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1f870:	675a      	str	r2, [r3, #116]	; 0x74
   1f872:	e7f1      	b.n	1f858 <z_thread_monitor_exit+0x1c>
   1f874:	20003a90 	.word	0x20003a90

0001f878 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1f878:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1f87a:	4604      	mov	r4, r0
   1f87c:	b908      	cbnz	r0, 1f882 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   1f87e:	4b05      	ldr	r3, [pc, #20]	; (1f894 <z_impl_k_thread_name_set+0x1c>)
   1f880:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   1f882:	221f      	movs	r2, #31
   1f884:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1f888:	f004 f947 	bl	23b1a <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1f88c:	2000      	movs	r0, #0
   1f88e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1f892:	bd10      	pop	{r4, pc}
   1f894:	20003a90 	.word	0x20003a90

0001f898 <k_thread_state_str>:

	return bytes_to_copy;
}

const char *k_thread_state_str(k_tid_t thread_id, char *buf, size_t buf_size)
{
   1f898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static const char  *states_str[8] = {"dummy", "pending", "prestart",
					     "dead", "suspended", "aborting",
					     "", "queued"};
	static const size_t states_sz[8] = {5, 7, 8, 4, 9, 8, 0, 6};

	if ((buf == NULL) || (buf_size == 0)) {
   1f89c:	460c      	mov	r4, r1
   1f89e:	2900      	cmp	r1, #0
   1f8a0:	d03d      	beq.n	1f91e <k_thread_state_str+0x86>
   1f8a2:	2a00      	cmp	r2, #0
   1f8a4:	d03b      	beq.n	1f91e <k_thread_state_str+0x86>
	uint8_t     thread_state = thread_id->base.thread_state;
   1f8a6:	7b47      	ldrb	r7, [r0, #13]
		return "";
	}

	buf_size--;   /* Reserve 1 byte for end-of-string character */
   1f8a8:	1e56      	subs	r6, r2, #1
		bit = BIT(index);
		if ((thread_state & bit) == 0) {
			continue;
		}

		off += copy_bytes(buf + off, buf_size - off,
   1f8aa:	4608      	mov	r0, r1
	for (uint8_t index = 0; thread_state != 0; index++) {
   1f8ac:	b38f      	cbz	r7, 1f912 <k_thread_state_str+0x7a>
   1f8ae:	f04f 0b00 	mov.w	fp, #0
				  states_str[index], states_sz[index]);
   1f8b2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 1f924 <k_thread_state_str+0x8c>
		off += copy_bytes(buf + off, buf_size - off,
   1f8b6:	f8df a070 	ldr.w	sl, [pc, #112]	; 1f928 <k_thread_state_str+0x90>
	size_t      off = 0;
   1f8ba:	465d      	mov	r5, fp
		bit = BIT(index);
   1f8bc:	fa5f f18b 	uxtb.w	r1, fp
   1f8c0:	f04f 0801 	mov.w	r8, #1
   1f8c4:	fa08 f801 	lsl.w	r8, r8, r1
		if ((thread_state & bit) == 0) {
   1f8c8:	ea17 0f08 	tst.w	r7, r8
   1f8cc:	d01d      	beq.n	1f90a <k_thread_state_str+0x72>
	bytes_to_copy = MIN(dest_size, src_size);
   1f8ce:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
	memcpy(dest, src, bytes_to_copy);
   1f8d2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
		off += copy_bytes(buf + off, buf_size - off,
   1f8d6:	1b72      	subs	r2, r6, r5
	bytes_to_copy = MIN(dest_size, src_size);
   1f8d8:	429a      	cmp	r2, r3
   1f8da:	bf28      	it	cs
   1f8dc:	461a      	movcs	r2, r3
	memcpy(dest, src, bytes_to_copy);
   1f8de:	9201      	str	r2, [sp, #4]
   1f8e0:	f004 f994 	bl	23c0c <memcpy>
		off += copy_bytes(buf + off, buf_size - off,
   1f8e4:	9a01      	ldr	r2, [sp, #4]

		thread_state &= ~bit;

		if (thread_state != 0) {
   1f8e6:	ea37 0708 	bics.w	r7, r7, r8
		off += copy_bytes(buf + off, buf_size - off,
   1f8ea:	4415      	add	r5, r2
		if (thread_state != 0) {
   1f8ec:	eb04 0005 	add.w	r0, r4, r5
   1f8f0:	d00f      	beq.n	1f912 <k_thread_state_str+0x7a>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
   1f8f2:	eba6 0805 	sub.w	r8, r6, r5
	bytes_to_copy = MIN(dest_size, src_size);
   1f8f6:	f1b8 0f01 	cmp.w	r8, #1
   1f8fa:	bf28      	it	cs
   1f8fc:	f04f 0801 	movcs.w	r8, #1
	memcpy(dest, src, bytes_to_copy);
   1f900:	490a      	ldr	r1, [pc, #40]	; (1f92c <k_thread_state_str+0x94>)
   1f902:	4642      	mov	r2, r8
   1f904:	f004 f982 	bl	23c0c <memcpy>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
   1f908:	4445      	add	r5, r8
	for (uint8_t index = 0; thread_state != 0; index++) {
   1f90a:	f10b 0b01 	add.w	fp, fp, #1
		off += copy_bytes(buf + off, buf_size - off,
   1f90e:	1960      	adds	r0, r4, r5
   1f910:	e7d4      	b.n	1f8bc <k_thread_state_str+0x24>
		}
	}

	buf[off] = '\0';
   1f912:	2300      	movs	r3, #0
   1f914:	7003      	strb	r3, [r0, #0]

	return (const char *)buf;
   1f916:	4620      	mov	r0, r4
}
   1f918:	b003      	add	sp, #12
   1f91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return "";
   1f91e:	4804      	ldr	r0, [pc, #16]	; (1f930 <k_thread_state_str+0x98>)
   1f920:	e7fa      	b.n	1f918 <k_thread_state_str+0x80>
   1f922:	bf00      	nop
   1f924:	00029cf4 	.word	0x00029cf4
   1f928:	00029d14 	.word	0x00029d14
   1f92c:	0002eac0 	.word	0x0002eac0
   1f930:	0002a598 	.word	0x0002a598

0001f934 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f938:	b085      	sub	sp, #20
   1f93a:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f93c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1f940:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f944:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1f946:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f948:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f94a:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   1f94e:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   1f950:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1f952:	f101 0b40 	add.w	fp, r1, #64	; 0x40
	thread_base->thread_state = (uint8_t)initial_state;
   1f956:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f958:	f10a 0740 	add.w	r7, sl, #64	; 0x40

	thread_base->prio = priority;
   1f95c:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
   1f95e:	6085      	str	r5, [r0, #8]
{
   1f960:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1f962:	e9c0 5506 	strd	r5, r5, [r0, #24]
   1f966:	460e      	mov	r6, r1
	thread_base->prio = priority;
   1f968:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
   1f96a:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
   1f96c:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
   1f96e:	4652      	mov	r2, sl
   1f970:	21aa      	movs	r1, #170	; 0xaa
   1f972:	4658      	mov	r0, fp
{
   1f974:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   1f978:	f004 f953 	bl	23c22 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f97c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->stack_info.delta = delta;
   1f97e:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	new_thread->stack_info.size = stack_buf_size;
   1f982:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f986:	9302      	str	r3, [sp, #8]
   1f988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f98a:	9301      	str	r3, [sp, #4]
   1f98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f98e:	9300      	str	r3, [sp, #0]
   1f990:	463a      	mov	r2, r7
   1f992:	4643      	mov	r3, r8
   1f994:	4631      	mov	r1, r6
   1f996:	4620      	mov	r0, r4
   1f998:	f7e7 fcca 	bl	7330 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
   1f99c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f99e:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1f9a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f9a2:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1f9a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   1f9a6:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   1f9a8:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
   1f9ac:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   1f9ae:	f04f 0220 	mov.w	r2, #32
   1f9b2:	f3ef 8311 	mrs	r3, BASEPRI
   1f9b6:	f382 8812 	msr	BASEPRI_MAX, r2
   1f9ba:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   1f9be:	4e10      	ldr	r6, [pc, #64]	; (1fa00 <z_setup_new_thread+0xcc>)
   1f9c0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1f9c2:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1f9c4:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
   1f9c6:	f383 8811 	msr	BASEPRI, r3
   1f9ca:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   1f9ce:	f1b9 0f00 	cmp.w	r9, #0
   1f9d2:	d011      	beq.n	1f9f8 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
   1f9d4:	221f      	movs	r2, #31
   1f9d6:	4649      	mov	r1, r9
   1f9d8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1f9dc:	f004 f89d 	bl	23b1a <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1f9e0:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
   1f9e4:	68b3      	ldr	r3, [r6, #8]
   1f9e6:	b10b      	cbz	r3, 1f9ec <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
   1f9e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
   1f9ec:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   1f9f0:	4638      	mov	r0, r7
   1f9f2:	b005      	add	sp, #20
   1f9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1f9f8:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
   1f9fc:	e7f2      	b.n	1f9e4 <z_setup_new_thread+0xb0>
   1f9fe:	bf00      	nop
   1fa00:	20003a90 	.word	0x20003a90

0001fa04 <z_impl_k_thread_create>:
{
   1fa04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa06:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fa08:	2500      	movs	r5, #0
   1fa0a:	9505      	str	r5, [sp, #20]
   1fa0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1fa0e:	9504      	str	r5, [sp, #16]
   1fa10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1fa12:	9503      	str	r5, [sp, #12]
   1fa14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1fa16:	9502      	str	r5, [sp, #8]
{
   1fa18:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fa1c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1fa1e:	9501      	str	r5, [sp, #4]
   1fa20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1fa22:	9500      	str	r5, [sp, #0]
{
   1fa24:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fa26:	f7ff ff85 	bl	1f934 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1fa2a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   1fa2e:	bf08      	it	eq
   1fa30:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   1fa34:	d005      	beq.n	1fa42 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fa36:	ea56 0307 	orrs.w	r3, r6, r7
   1fa3a:	d105      	bne.n	1fa48 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1fa3c:	4620      	mov	r0, r4
   1fa3e:	f000 fd71 	bl	20524 <z_sched_start>
}
   1fa42:	4620      	mov	r0, r4
   1fa44:	b007      	add	sp, #28
   1fa46:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1fa48:	4903      	ldr	r1, [pc, #12]	; (1fa58 <z_impl_k_thread_create+0x54>)
   1fa4a:	463a      	mov	r2, r7
   1fa4c:	4633      	mov	r3, r6
   1fa4e:	f104 0018 	add.w	r0, r4, #24
   1fa52:	f000 ff73 	bl	2093c <z_add_timeout>
   1fa56:	e7f4      	b.n	1fa42 <z_impl_k_thread_create+0x3e>
   1fa58:	00026ee9 	.word	0x00026ee9

0001fa5c <z_init_static_threads>:
{
   1fa5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fa60:	4c29      	ldr	r4, [pc, #164]	; (1fb08 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1fa62:	4d2a      	ldr	r5, [pc, #168]	; (1fb0c <z_init_static_threads+0xb0>)
{
   1fa64:	b087      	sub	sp, #28
   1fa66:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1fa68:	42ae      	cmp	r6, r5
   1fa6a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1fa6e:	d30f      	bcc.n	1fa90 <z_init_static_threads+0x34>
	k_sched_lock();
   1fa70:	f000 fda8 	bl	205c4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1fa74:	4c24      	ldr	r4, [pc, #144]	; (1fb08 <z_init_static_threads+0xac>)
   1fa76:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1fb10 <z_init_static_threads+0xb4>
   1fa7a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1fa7e:	f240 37e7 	movw	r7, #999	; 0x3e7
   1fa82:	42ac      	cmp	r4, r5
   1fa84:	d320      	bcc.n	1fac8 <z_init_static_threads+0x6c>
}
   1fa86:	b007      	add	sp, #28
   1fa88:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1fa8c:	f000 bdae 	b.w	205ec <k_sched_unlock>
		z_setup_new_thread(
   1fa90:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1fa94:	9305      	str	r3, [sp, #20]
   1fa96:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1fa9a:	9304      	str	r3, [sp, #16]
   1fa9c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1faa0:	9303      	str	r3, [sp, #12]
   1faa2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1faa6:	9302      	str	r3, [sp, #8]
   1faa8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1faac:	9301      	str	r3, [sp, #4]
   1faae:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1fab2:	9300      	str	r3, [sp, #0]
   1fab4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1fab8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1fabc:	f7ff ff3a 	bl	1f934 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1fac0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1fac4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1fac6:	e7ce      	b.n	1fa66 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1fac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1faca:	1c5a      	adds	r2, r3, #1
   1facc:	d00d      	beq.n	1faea <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1face:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fad2:	2100      	movs	r1, #0
   1fad4:	4638      	mov	r0, r7
   1fad6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fada:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1fade:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fae2:	d104      	bne.n	1faee <z_init_static_threads+0x92>
	z_sched_start(thread);
   1fae4:	4640      	mov	r0, r8
   1fae6:	f000 fd1d 	bl	20524 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1faea:	3430      	adds	r4, #48	; 0x30
   1faec:	e7c9      	b.n	1fa82 <z_init_static_threads+0x26>
   1faee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1faf2:	2300      	movs	r3, #0
   1faf4:	f7e0 ff12 	bl	91c <__aeabi_uldivmod>
   1faf8:	4602      	mov	r2, r0
   1fafa:	460b      	mov	r3, r1
   1fafc:	f108 0018 	add.w	r0, r8, #24
   1fb00:	4649      	mov	r1, r9
   1fb02:	f000 ff1b 	bl	2093c <z_add_timeout>
   1fb06:	e7f0      	b.n	1faea <z_init_static_threads+0x8e>
   1fb08:	00027858 	.word	0x00027858
   1fb0c:	00027858 	.word	0x00027858
   1fb10:	00026ee9 	.word	0x00026ee9

0001fb14 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   1fb14:	4800      	ldr	r0, [pc, #0]	; (1fb18 <sys_kernel_version_get+0x4>)
   1fb16:	4770      	bx	lr
   1fb18:	03030000 	.word	0x03030000

0001fb1c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1fb1c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1fb1e:	4c0b      	ldr	r4, [pc, #44]	; (1fb4c <idle+0x30>)
	return !z_sys_post_kernel;
   1fb20:	4d0b      	ldr	r5, [pc, #44]	; (1fb50 <idle+0x34>)
	__asm__ volatile(
   1fb22:	f04f 0220 	mov.w	r2, #32
   1fb26:	f3ef 8311 	mrs	r3, BASEPRI
   1fb2a:	f382 8812 	msr	BASEPRI_MAX, r2
   1fb2e:	f3bf 8f6f 	isb	sy
   1fb32:	f007 faea 	bl	2710a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1fb36:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1fb38:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1fb3a:	b913      	cbnz	r3, 1fb42 <idle+0x26>
	arch_cpu_idle();
   1fb3c:	f7e7 fa8e 	bl	705c <arch_cpu_idle>
}
   1fb40:	e7ef      	b.n	1fb22 <idle+0x6>
   1fb42:	f7e7 f959 	bl	6df8 <pm_system_suspend>
   1fb46:	2800      	cmp	r0, #0
   1fb48:	d1eb      	bne.n	1fb22 <idle+0x6>
   1fb4a:	e7f7      	b.n	1fb3c <idle+0x20>
   1fb4c:	20003a90 	.word	0x20003a90
   1fb50:	20004032 	.word	0x20004032

0001fb54 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1fb54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fb58:	4604      	mov	r4, r0
   1fb5a:	4617      	mov	r7, r2
   1fb5c:	461e      	mov	r6, r3
   1fb5e:	f04f 0320 	mov.w	r3, #32
   1fb62:	f3ef 8811 	mrs	r8, BASEPRI
   1fb66:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb6a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fb6e:	68c3      	ldr	r3, [r0, #12]
   1fb70:	4a33      	ldr	r2, [pc, #204]	; (1fc40 <z_impl_k_mutex_lock+0xec>)
   1fb72:	b17b      	cbz	r3, 1fb94 <z_impl_k_mutex_lock+0x40>
   1fb74:	6880      	ldr	r0, [r0, #8]
   1fb76:	6891      	ldr	r1, [r2, #8]
   1fb78:	4288      	cmp	r0, r1
   1fb7a:	d019      	beq.n	1fbb0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1fb7c:	ea57 0306 	orrs.w	r3, r7, r6
   1fb80:	d118      	bne.n	1fbb4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1fb82:	f388 8811 	msr	BASEPRI, r8
   1fb86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1fb8a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1fb8e:	b002      	add	sp, #8
   1fb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1fb94:	6891      	ldr	r1, [r2, #8]
   1fb96:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fb9a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1fb9c:	3301      	adds	r3, #1
   1fb9e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1fba0:	6893      	ldr	r3, [r2, #8]
   1fba2:	60a3      	str	r3, [r4, #8]
   1fba4:	f388 8811 	msr	BASEPRI, r8
   1fba8:	f3bf 8f6f 	isb	sy
		return 0;
   1fbac:	2000      	movs	r0, #0
   1fbae:	e7ee      	b.n	1fb8e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1fbb0:	6921      	ldr	r1, [r4, #16]
   1fbb2:	e7f2      	b.n	1fb9a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1fbb4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1fbb8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1fbbc:	4299      	cmp	r1, r3
   1fbbe:	bfa8      	it	ge
   1fbc0:	4619      	movge	r1, r3
   1fbc2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1fbc6:	4291      	cmp	r1, r2
   1fbc8:	bfb8      	it	lt
   1fbca:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1fbcc:	428b      	cmp	r3, r1
   1fbce:	dd2e      	ble.n	1fc2e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1fbd0:	f006 ff8e 	bl	26af0 <adjust_owner_prio.isra.0>
   1fbd4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1fbd6:	e9cd 7600 	strd	r7, r6, [sp]
   1fbda:	481a      	ldr	r0, [pc, #104]	; (1fc44 <z_impl_k_mutex_lock+0xf0>)
   1fbdc:	4622      	mov	r2, r4
   1fbde:	4641      	mov	r1, r8
   1fbe0:	f000 fc2a 	bl	20438 <z_pend_curr>
	if (got_mutex == 0) {
   1fbe4:	2800      	cmp	r0, #0
   1fbe6:	d0e1      	beq.n	1fbac <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1fbe8:	f04f 0320 	mov.w	r3, #32
   1fbec:	f3ef 8611 	mrs	r6, BASEPRI
   1fbf0:	f383 8812 	msr	BASEPRI_MAX, r3
   1fbf4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1fbf8:	68a0      	ldr	r0, [r4, #8]
   1fbfa:	b1d0      	cbz	r0, 1fc32 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1fbfc:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1fbfe:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fc00:	429c      	cmp	r4, r3
   1fc02:	d00a      	beq.n	1fc1a <z_impl_k_mutex_lock+0xc6>
   1fc04:	b14b      	cbz	r3, 1fc1a <z_impl_k_mutex_lock+0xc6>
   1fc06:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1fc0a:	4299      	cmp	r1, r3
   1fc0c:	bfa8      	it	ge
   1fc0e:	4619      	movge	r1, r3
   1fc10:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1fc14:	4299      	cmp	r1, r3
   1fc16:	bfb8      	it	lt
   1fc18:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fc1a:	f006 ff69 	bl	26af0 <adjust_owner_prio.isra.0>
   1fc1e:	b140      	cbz	r0, 1fc32 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1fc20:	4808      	ldr	r0, [pc, #32]	; (1fc44 <z_impl_k_mutex_lock+0xf0>)
   1fc22:	4631      	mov	r1, r6
   1fc24:	f000 fc6c 	bl	20500 <z_reschedule>
	return -EAGAIN;
   1fc28:	f06f 000a 	mvn.w	r0, #10
   1fc2c:	e7af      	b.n	1fb8e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1fc2e:	2500      	movs	r5, #0
   1fc30:	e7d1      	b.n	1fbd6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1fc32:	2d00      	cmp	r5, #0
   1fc34:	d1f4      	bne.n	1fc20 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1fc36:	f386 8811 	msr	BASEPRI, r6
   1fc3a:	f3bf 8f6f 	isb	sy
   1fc3e:	e7f3      	b.n	1fc28 <z_impl_k_mutex_lock+0xd4>
   1fc40:	20003a90 	.word	0x20003a90
   1fc44:	20004033 	.word	0x20004033

0001fc48 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1fc48:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1fc4a:	6883      	ldr	r3, [r0, #8]
{
   1fc4c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1fc4e:	b373      	cbz	r3, 1fcae <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1fc50:	4a1a      	ldr	r2, [pc, #104]	; (1fcbc <z_impl_k_mutex_unlock+0x74>)
   1fc52:	6892      	ldr	r2, [r2, #8]
   1fc54:	4293      	cmp	r3, r2
   1fc56:	d12d      	bne.n	1fcb4 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1fc58:	68c3      	ldr	r3, [r0, #12]
   1fc5a:	2b01      	cmp	r3, #1
   1fc5c:	d903      	bls.n	1fc66 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1fc5e:	3b01      	subs	r3, #1
   1fc60:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1fc62:	2000      	movs	r0, #0
}
   1fc64:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1fc66:	f04f 0320 	mov.w	r3, #32
   1fc6a:	f3ef 8511 	mrs	r5, BASEPRI
   1fc6e:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc72:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1fc76:	6901      	ldr	r1, [r0, #16]
   1fc78:	6880      	ldr	r0, [r0, #8]
   1fc7a:	f006 ff39 	bl	26af0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1fc7e:	4620      	mov	r0, r4
   1fc80:	f007 f9b3 	bl	26fea <z_unpend_first_thread>
	mutex->owner = new_owner;
   1fc84:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1fc86:	b160      	cbz	r0, 1fca2 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   1fc88:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1fc8c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1fc8e:	2200      	movs	r2, #0
   1fc90:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1fc94:	f007 f972 	bl	26f7c <z_ready_thread>
		z_reschedule(&lock, key);
   1fc98:	4809      	ldr	r0, [pc, #36]	; (1fcc0 <z_impl_k_mutex_unlock+0x78>)
   1fc9a:	4629      	mov	r1, r5
   1fc9c:	f000 fc30 	bl	20500 <z_reschedule>
   1fca0:	e7df      	b.n	1fc62 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1fca2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1fca4:	f385 8811 	msr	BASEPRI, r5
   1fca8:	f3bf 8f6f 	isb	sy
   1fcac:	e7d9      	b.n	1fc62 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1fcae:	f06f 0015 	mvn.w	r0, #21
   1fcb2:	e7d7      	b.n	1fc64 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1fcb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fcb8:	e7d4      	b.n	1fc64 <z_impl_k_mutex_unlock+0x1c>
   1fcba:	bf00      	nop
   1fcbc:	20003a90 	.word	0x20003a90
   1fcc0:	20004033 	.word	0x20004033

0001fcc4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1fcc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fcc6:	4611      	mov	r1, r2
	__asm__ volatile(
   1fcc8:	f04f 0220 	mov.w	r2, #32
   1fccc:	f3ef 8511 	mrs	r5, BASEPRI
   1fcd0:	f382 8812 	msr	BASEPRI_MAX, r2
   1fcd4:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1fcd8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1fcda:	b19c      	cbz	r4, 1fd04 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fcdc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fcde:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fce0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fce4:	4294      	cmp	r4, r2
	list->head = node;
   1fce6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1fce8:	bf08      	it	eq
   1fcea:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fcec:	2101      	movs	r1, #1
   1fcee:	4620      	mov	r0, r4
   1fcf0:	f006 ff74 	bl	26bdc <z_queue_node_peek>
   1fcf4:	4604      	mov	r4, r0
	__asm__ volatile(
   1fcf6:	f385 8811 	msr	BASEPRI, r5
   1fcfa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1fcfe:	4620      	mov	r0, r4
   1fd00:	b003      	add	sp, #12
   1fd02:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fd04:	ea51 0203 	orrs.w	r2, r1, r3
   1fd08:	d0f5      	beq.n	1fcf6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fd0a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fd0e:	e9cd 1300 	strd	r1, r3, [sp]
   1fd12:	4610      	mov	r0, r2
   1fd14:	4629      	mov	r1, r5
   1fd16:	f000 fb8f 	bl	20438 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1fd1a:	2800      	cmp	r0, #0
   1fd1c:	d1ef      	bne.n	1fcfe <z_impl_k_queue_get+0x3a>
   1fd1e:	4b02      	ldr	r3, [pc, #8]	; (1fd28 <z_impl_k_queue_get+0x64>)
   1fd20:	689b      	ldr	r3, [r3, #8]
   1fd22:	695c      	ldr	r4, [r3, #20]
   1fd24:	e7eb      	b.n	1fcfe <z_impl_k_queue_get+0x3a>
   1fd26:	bf00      	nop
   1fd28:	20003a90 	.word	0x20003a90

0001fd2c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1fd2c:	b538      	push	{r3, r4, r5, lr}
   1fd2e:	4604      	mov	r4, r0
	__asm__ volatile(
   1fd30:	f04f 0320 	mov.w	r3, #32
   1fd34:	f3ef 8511 	mrs	r5, BASEPRI
   1fd38:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1fd40:	f007 f953 	bl	26fea <z_unpend_first_thread>

	if (thread != NULL) {
   1fd44:	b150      	cbz	r0, 1fd5c <z_impl_k_sem_give+0x30>
   1fd46:	2200      	movs	r2, #0
   1fd48:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1fd4c:	f007 f916 	bl	26f7c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1fd50:	4629      	mov	r1, r5
   1fd52:	4808      	ldr	r0, [pc, #32]	; (1fd74 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1fd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1fd58:	f000 bbd2 	b.w	20500 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fd5c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1fd60:	429a      	cmp	r2, r3
   1fd62:	bf18      	it	ne
   1fd64:	3301      	addne	r3, #1
   1fd66:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fd68:	2102      	movs	r1, #2
   1fd6a:	f104 0010 	add.w	r0, r4, #16
   1fd6e:	f007 fb8d 	bl	2748c <z_handle_obj_poll_events>
}
   1fd72:	e7ed      	b.n	1fd50 <z_impl_k_sem_give+0x24>
   1fd74:	20004033 	.word	0x20004033

0001fd78 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1fd78:	b513      	push	{r0, r1, r4, lr}
   1fd7a:	f04f 0420 	mov.w	r4, #32
   1fd7e:	f3ef 8111 	mrs	r1, BASEPRI
   1fd82:	f384 8812 	msr	BASEPRI_MAX, r4
   1fd86:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1fd8a:	6884      	ldr	r4, [r0, #8]
   1fd8c:	b144      	cbz	r4, 1fda0 <z_impl_k_sem_take+0x28>
		sem->count--;
   1fd8e:	3c01      	subs	r4, #1
   1fd90:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1fd92:	f381 8811 	msr	BASEPRI, r1
   1fd96:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1fd9a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1fd9c:	b002      	add	sp, #8
   1fd9e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fda0:	ea52 0403 	orrs.w	r4, r2, r3
   1fda4:	d106      	bne.n	1fdb4 <z_impl_k_sem_take+0x3c>
   1fda6:	f381 8811 	msr	BASEPRI, r1
   1fdaa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1fdae:	f06f 000f 	mvn.w	r0, #15
   1fdb2:	e7f3      	b.n	1fd9c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1fdb4:	e9cd 2300 	strd	r2, r3, [sp]
   1fdb8:	4602      	mov	r2, r0
   1fdba:	4802      	ldr	r0, [pc, #8]	; (1fdc4 <z_impl_k_sem_take+0x4c>)
   1fdbc:	f000 fb3c 	bl	20438 <z_pend_curr>
	return ret;
   1fdc0:	e7ec      	b.n	1fd9c <z_impl_k_sem_take+0x24>
   1fdc2:	bf00      	nop
   1fdc4:	20004033 	.word	0x20004033

0001fdc8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   1fdc8:	b570      	push	{r4, r5, r6, lr}
   1fdca:	4604      	mov	r4, r0
	__asm__ volatile(
   1fdcc:	f04f 0320 	mov.w	r3, #32
   1fdd0:	f3ef 8511 	mrs	r5, BASEPRI
   1fdd4:	f383 8812 	msr	BASEPRI_MAX, r3
   1fdd8:	f3bf 8f6f 	isb	sy
   1fddc:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   1fde0:	4620      	mov	r0, r4
   1fde2:	f007 f902 	bl	26fea <z_unpend_first_thread>
		if (thread == NULL) {
   1fde6:	b120      	cbz	r0, 1fdf2 <z_impl_k_sem_reset+0x2a>
   1fde8:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   1fdec:	f007 f8c6 	bl	26f7c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   1fdf0:	e7f6      	b.n	1fde0 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   1fdf2:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fdf4:	2102      	movs	r1, #2
   1fdf6:	f104 0010 	add.w	r0, r4, #16
   1fdfa:	f007 fb47 	bl	2748c <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   1fdfe:	4629      	mov	r1, r5
   1fe00:	4802      	ldr	r0, [pc, #8]	; (1fe0c <z_impl_k_sem_reset+0x44>)
}
   1fe02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1fe06:	f000 bb7b 	b.w	20500 <z_reschedule>
   1fe0a:	bf00      	nop
   1fe0c:	20004033 	.word	0x20004033

0001fe10 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1fe10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1fe12:	4b09      	ldr	r3, [pc, #36]	; (1fe38 <k_sys_work_q_init+0x28>)
   1fe14:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1fe16:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1fe18:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1fe1a:	9300      	str	r3, [sp, #0]
   1fe1c:	4907      	ldr	r1, [pc, #28]	; (1fe3c <k_sys_work_q_init+0x2c>)
   1fe1e:	4808      	ldr	r0, [pc, #32]	; (1fe40 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1fe20:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1fe24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe28:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fe2c:	f000 f924 	bl	20078 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1fe30:	4620      	mov	r0, r4
   1fe32:	b004      	add	sp, #16
   1fe34:	bd10      	pop	{r4, pc}
   1fe36:	bf00      	nop
   1fe38:	0002eaf8 	.word	0x0002eaf8
   1fe3c:	20006980 	.word	0x20006980
   1fe40:	20002088 	.word	0x20002088

0001fe44 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1fe48:	4e4a      	ldr	r6, [pc, #296]	; (1ff74 <work_queue_main+0x130>)
   1fe4a:	b085      	sub	sp, #20
   1fe4c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1fe4e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fe52:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1fe56:	f04f 0320 	mov.w	r3, #32
   1fe5a:	f3ef 8711 	mrs	r7, BASEPRI
   1fe5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe62:	f3bf 8f6f 	isb	sy
   1fe66:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1fe6a:	b98d      	cbnz	r5, 1fe90 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1fe6c:	2102      	movs	r1, #2
   1fe6e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1fe72:	f006 ff15 	bl	26ca0 <flag_test_and_clear>
   1fe76:	2800      	cmp	r0, #0
   1fe78:	d143      	bne.n	1ff02 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1fe7a:	2300      	movs	r3, #0
   1fe7c:	e9cd 8900 	strd	r8, r9, [sp]
   1fe80:	9302      	str	r3, [sp, #8]
   1fe82:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   1fe86:	4639      	mov	r1, r7
   1fe88:	483b      	ldr	r0, [pc, #236]	; (1ff78 <work_queue_main+0x134>)
   1fe8a:	f000 fcdd 	bl	20848 <z_sched_wait>
			continue;
   1fe8e:	e7e2      	b.n	1fe56 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fe90:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
   1fe94:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1fe96:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fe9a:	4295      	cmp	r5, r2
	list->tail = node;
   1fe9c:	bf08      	it	eq
   1fe9e:	f8c4 30bc 	streq.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
   1fea2:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   1fea6:	f043 0302 	orr.w	r3, r3, #2
   1feaa:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1feae:	68eb      	ldr	r3, [r5, #12]
   1feb0:	f023 0304 	bic.w	r3, r3, #4
   1feb4:	f043 0301 	orr.w	r3, r3, #1
   1feb8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1feba:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1febc:	f387 8811 	msr	BASEPRI, r7
   1fec0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1fec4:	4628      	mov	r0, r5
   1fec6:	4798      	blx	r3
	__asm__ volatile(
   1fec8:	f04f 0320 	mov.w	r3, #32
   1fecc:	f3ef 8b11 	mrs	fp, BASEPRI
   1fed0:	f383 8812 	msr	BASEPRI_MAX, r3
   1fed4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1fed8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1feda:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1fedc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fee0:	d419      	bmi.n	1ff16 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1fee2:	60ea      	str	r2, [r5, #12]
   1fee4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   1fee8:	f023 0302 	bic.w	r3, r3, #2
   1feec:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
   1fef0:	f38b 8811 	msr	BASEPRI, fp
   1fef4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1fef8:	05db      	lsls	r3, r3, #23
   1fefa:	d4ac      	bmi.n	1fe56 <work_queue_main+0x12>
	z_impl_k_yield();
   1fefc:	f000 fb9e 	bl	2063c <z_impl_k_yield>
}
   1ff00:	e7a9      	b.n	1fe56 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1ff02:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1ff06:	2200      	movs	r2, #0
   1ff08:	2101      	movs	r1, #1
   1ff0a:	4628      	mov	r0, r5
   1ff0c:	f007 f8c3 	bl	27096 <z_sched_wake>
   1ff10:	2800      	cmp	r0, #0
   1ff12:	d1f8      	bne.n	1ff06 <work_queue_main+0xc2>
   1ff14:	e7b1      	b.n	1fe7a <work_queue_main+0x36>
	return list->head;
   1ff16:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1ff18:	f023 0303 	bic.w	r3, r3, #3
   1ff1c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ff1e:	2800      	cmp	r0, #0
   1ff20:	d0e0      	beq.n	1fee4 <work_queue_main+0xa0>
	return node->next;
   1ff22:	2700      	movs	r7, #0
   1ff24:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1ff28:	463b      	mov	r3, r7
   1ff2a:	2800      	cmp	r0, #0
   1ff2c:	d0da      	beq.n	1fee4 <work_queue_main+0xa0>
		if (wc->work == work) {
   1ff2e:	6842      	ldr	r2, [r0, #4]
   1ff30:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1ff32:	4601      	mov	r1, r0
		if (wc->work == work) {
   1ff34:	d10c      	bne.n	1ff50 <work_queue_main+0x10c>
	return node->next;
   1ff36:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ff38:	b99f      	cbnz	r7, 1ff62 <work_queue_main+0x11e>
   1ff3a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1ff3c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ff3e:	4282      	cmp	r2, r0
   1ff40:	d100      	bne.n	1ff44 <work_queue_main+0x100>
	list->tail = node;
   1ff42:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1ff44:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1ff48:	f7ff fef0 	bl	1fd2c <z_impl_k_sem_give>
}
   1ff4c:	4639      	mov	r1, r7
   1ff4e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ff50:	f1ba 0f00 	cmp.w	sl, #0
   1ff54:	d00b      	beq.n	1ff6e <work_queue_main+0x12a>
	return node->next;
   1ff56:	f8da 2000 	ldr.w	r2, [sl]
   1ff5a:	4650      	mov	r0, sl
   1ff5c:	460f      	mov	r7, r1
   1ff5e:	4692      	mov	sl, r2
   1ff60:	e7e3      	b.n	1ff2a <work_queue_main+0xe6>
	parent->next = child;
   1ff62:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ff64:	6872      	ldr	r2, [r6, #4]
   1ff66:	4282      	cmp	r2, r0
	list->tail = node;
   1ff68:	bf08      	it	eq
   1ff6a:	6077      	streq	r7, [r6, #4]
}
   1ff6c:	e7ea      	b.n	1ff44 <work_queue_main+0x100>
   1ff6e:	4652      	mov	r2, sl
   1ff70:	e7f3      	b.n	1ff5a <work_queue_main+0x116>
   1ff72:	bf00      	nop
   1ff74:	20003abc 	.word	0x20003abc
   1ff78:	20004033 	.word	0x20004033

0001ff7c <cancel_sync_locked>:
{
   1ff7c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ff7e:	68c3      	ldr	r3, [r0, #12]
   1ff80:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1ff84:	079b      	lsls	r3, r3, #30
{
   1ff86:	4605      	mov	r5, r0
   1ff88:	460c      	mov	r4, r1
	if (ret) {
   1ff8a:	d50d      	bpl.n	1ffa8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ff8c:	2201      	movs	r2, #1
   1ff8e:	2100      	movs	r1, #0
   1ff90:	f104 0008 	add.w	r0, r4, #8
   1ff94:	f006 fe74 	bl	26c80 <z_impl_k_sem_init>
	parent->next = child;
   1ff98:	2300      	movs	r3, #0
   1ff9a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ff9c:	4b05      	ldr	r3, [pc, #20]	; (1ffb4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1ff9e:	6065      	str	r5, [r4, #4]
   1ffa0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1ffa2:	b91a      	cbnz	r2, 1ffac <cancel_sync_locked+0x30>
	list->head = node;
   1ffa4:	e9c3 4400 	strd	r4, r4, [r3]
}
   1ffa8:	4630      	mov	r0, r6
   1ffaa:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1ffac:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1ffae:	605c      	str	r4, [r3, #4]
}
   1ffb0:	e7fa      	b.n	1ffa8 <cancel_sync_locked+0x2c>
   1ffb2:	bf00      	nop
   1ffb4:	20003abc 	.word	0x20003abc

0001ffb8 <submit_to_queue_locked>:
{
   1ffb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ffba:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ffbc:	079a      	lsls	r2, r3, #30
{
   1ffbe:	4604      	mov	r4, r0
   1ffc0:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ffc2:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1ffc6:	d42c      	bmi.n	20022 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1ffc8:	075b      	lsls	r3, r3, #29
   1ffca:	d41a      	bmi.n	20002 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1ffcc:	680b      	ldr	r3, [r1, #0]
   1ffce:	b90b      	cbnz	r3, 1ffd4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1ffd0:	6883      	ldr	r3, [r0, #8]
   1ffd2:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1ffd4:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1ffd6:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1ffd8:	bf44      	itt	mi
   1ffda:	68a3      	ldrmi	r3, [r4, #8]
   1ffdc:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1ffde:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1ffe0:	bf4c      	ite	mi
   1ffe2:	2602      	movmi	r6, #2
		ret = 1;
   1ffe4:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1ffe6:	2d00      	cmp	r5, #0
   1ffe8:	d03a      	beq.n	20060 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ffea:	4b1f      	ldr	r3, [pc, #124]	; (20068 <submit_to_queue_locked+0xb0>)
   1ffec:	689b      	ldr	r3, [r3, #8]
   1ffee:	42ab      	cmp	r3, r5
   1fff0:	d00a      	beq.n	20008 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1fff2:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1fff6:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1fff8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1fffc:	d414      	bmi.n	20028 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1fffe:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   20002:	2300      	movs	r3, #0
   20004:	603b      	str	r3, [r7, #0]
	return ret;
   20006:	e025      	b.n	20054 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20008:	f006 fd50 	bl	26aac <k_is_in_isr>
   2000c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   20010:	2800      	cmp	r0, #0
   20012:	d1f0      	bne.n	1fff6 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20014:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   20016:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2001a:	d5f0      	bpl.n	1fffe <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   2001c:	b152      	cbz	r2, 20034 <submit_to_queue_locked+0x7c>
   2001e:	075b      	lsls	r3, r3, #29
   20020:	d408      	bmi.n	20034 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   20022:	f06f 060f 	mvn.w	r6, #15
   20026:	e7ec      	b.n	20002 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   20028:	2a00      	cmp	r2, #0
   2002a:	d1fa      	bne.n	20022 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2002c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   20030:	2b00      	cmp	r3, #0
   20032:	d1f6      	bne.n	20022 <submit_to_queue_locked+0x6a>
	parent->next = child;
   20034:	2300      	movs	r3, #0
   20036:	6023      	str	r3, [r4, #0]
	return list->tail;
   20038:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   2003c:	b963      	cbnz	r3, 20058 <submit_to_queue_locked+0xa0>
	list->head = node;
   2003e:	e9c5 442e 	strd	r4, r4, [r5, #184]	; 0xb8
		(void)notify_queue_locked(queue);
   20042:	4628      	mov	r0, r5
   20044:	f006 fe45 	bl	26cd2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   20048:	68e3      	ldr	r3, [r4, #12]
   2004a:	f043 0304 	orr.w	r3, r3, #4
   2004e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   20050:	683b      	ldr	r3, [r7, #0]
   20052:	60a3      	str	r3, [r4, #8]
}
   20054:	4630      	mov	r0, r6
   20056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   20058:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2005a:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
}
   2005e:	e7f0      	b.n	20042 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   20060:	f06f 0615 	mvn.w	r6, #21
   20064:	e7cd      	b.n	20002 <submit_to_queue_locked+0x4a>
   20066:	bf00      	nop
   20068:	20003a90 	.word	0x20003a90

0002006c <k_work_submit>:
{
   2006c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2006e:	4801      	ldr	r0, [pc, #4]	; (20074 <k_work_submit+0x8>)
   20070:	f006 beb5 	b.w	26dde <k_work_submit_to_queue>
   20074:	20002088 	.word	0x20002088

00020078 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   20078:	b5f0      	push	{r4, r5, r6, r7, lr}
   2007a:	b089      	sub	sp, #36	; 0x24
   2007c:	4604      	mov	r4, r0
	list->head = NULL;
   2007e:	2000      	movs	r0, #0
	list->tail = NULL;
   20080:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
   20084:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   20086:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
   2008a:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
   2008e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   20092:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   20096:	b31d      	cbz	r5, 200e0 <k_work_queue_start+0x68>
   20098:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2009a:	2800      	cmp	r0, #0
   2009c:	f240 1001 	movw	r0, #257	; 0x101
   200a0:	bf08      	it	eq
   200a2:	2001      	moveq	r0, #1
	*flagp = flags;
   200a4:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   200a8:	2000      	movs	r0, #0
   200aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   200ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   200b2:	e9cd 3003 	strd	r3, r0, [sp, #12]
   200b6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   200ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
   200be:	4b09      	ldr	r3, [pc, #36]	; (200e4 <k_work_queue_start+0x6c>)
   200c0:	9400      	str	r4, [sp, #0]
   200c2:	4620      	mov	r0, r4
   200c4:	f7ff fc9e 	bl	1fa04 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   200c8:	b125      	cbz	r5, 200d4 <k_work_queue_start+0x5c>
   200ca:	6829      	ldr	r1, [r5, #0]
   200cc:	b111      	cbz	r1, 200d4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   200ce:	4620      	mov	r0, r4
   200d0:	f7ff fbd2 	bl	1f878 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   200d4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   200d6:	b009      	add	sp, #36	; 0x24
   200d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   200dc:	f006 bcee 	b.w	26abc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   200e0:	2001      	movs	r0, #1
   200e2:	e7df      	b.n	200a4 <k_work_queue_start+0x2c>
   200e4:	0001fe45 	.word	0x0001fe45

000200e8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   200e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   200ea:	9001      	str	r0, [sp, #4]
   200ec:	4608      	mov	r0, r1
	__asm__ volatile(
   200ee:	f04f 0120 	mov.w	r1, #32
   200f2:	f3ef 8411 	mrs	r4, BASEPRI
   200f6:	f381 8812 	msr	BASEPRI_MAX, r1
   200fa:	f3bf 8f6f 	isb	sy
	return *flagp;
   200fe:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   20100:	f011 0f0e 	tst.w	r1, #14
   20104:	d116      	bne.n	20134 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20106:	ea53 0502 	orrs.w	r5, r3, r2
   2010a:	d108      	bne.n	2011e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   2010c:	a901      	add	r1, sp, #4
   2010e:	f7ff ff53 	bl	1ffb8 <submit_to_queue_locked>
	__asm__ volatile(
   20112:	f384 8811 	msr	BASEPRI, r4
   20116:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2011a:	b003      	add	sp, #12
   2011c:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   2011e:	f041 0108 	orr.w	r1, r1, #8
   20122:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   20124:	9901      	ldr	r1, [sp, #4]
   20126:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20128:	3010      	adds	r0, #16
   2012a:	4903      	ldr	r1, [pc, #12]	; (20138 <k_work_schedule_for_queue+0x50>)
   2012c:	f000 fc06 	bl	2093c <z_add_timeout>
	return ret;
   20130:	2001      	movs	r0, #1
   20132:	e7ee      	b.n	20112 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   20134:	2000      	movs	r0, #0
   20136:	e7ec      	b.n	20112 <k_work_schedule_for_queue+0x2a>
   20138:	00026d47 	.word	0x00026d47

0002013c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2013c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2013e:	4801      	ldr	r0, [pc, #4]	; (20144 <k_work_schedule+0x8>)
   20140:	f7ff bfd2 	b.w	200e8 <k_work_schedule_for_queue>
   20144:	20002088 	.word	0x20002088

00020148 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   20148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2014a:	460c      	mov	r4, r1
   2014c:	9001      	str	r0, [sp, #4]
   2014e:	4616      	mov	r6, r2
   20150:	461d      	mov	r5, r3
	__asm__ volatile(
   20152:	f04f 0320 	mov.w	r3, #32
   20156:	f3ef 8711 	mrs	r7, BASEPRI
   2015a:	f383 8812 	msr	BASEPRI_MAX, r3
   2015e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   20162:	4608      	mov	r0, r1
   20164:	f006 fda7 	bl	26cb6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20168:	ea55 0306 	orrs.w	r3, r5, r6
   2016c:	d109      	bne.n	20182 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   2016e:	a901      	add	r1, sp, #4
   20170:	4620      	mov	r0, r4
   20172:	f7ff ff21 	bl	1ffb8 <submit_to_queue_locked>
	__asm__ volatile(
   20176:	f387 8811 	msr	BASEPRI, r7
   2017a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2017e:	b003      	add	sp, #12
   20180:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   20182:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20184:	4906      	ldr	r1, [pc, #24]	; (201a0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   20186:	f043 0308 	orr.w	r3, r3, #8
   2018a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2018c:	9b01      	ldr	r3, [sp, #4]
   2018e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20190:	f104 0010 	add.w	r0, r4, #16
   20194:	4632      	mov	r2, r6
   20196:	462b      	mov	r3, r5
   20198:	f000 fbd0 	bl	2093c <z_add_timeout>
	return ret;
   2019c:	2001      	movs	r0, #1
   2019e:	e7ea      	b.n	20176 <k_work_reschedule_for_queue+0x2e>
   201a0:	00026d47 	.word	0x00026d47

000201a4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   201a4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   201a6:	4801      	ldr	r0, [pc, #4]	; (201ac <k_work_reschedule+0x8>)
   201a8:	f7ff bfce 	b.w	20148 <k_work_reschedule_for_queue>
   201ac:	20002088 	.word	0x20002088

000201b0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   201b0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   201b2:	4d07      	ldr	r5, [pc, #28]	; (201d0 <z_reset_time_slice+0x20>)
   201b4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   201b6:	b154      	cbz	r4, 201ce <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   201b8:	f7fd ff2e 	bl	1e018 <sys_clock_elapsed>
   201bc:	4b05      	ldr	r3, [pc, #20]	; (201d4 <z_reset_time_slice+0x24>)
   201be:	4404      	add	r4, r0
   201c0:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   201c2:	6828      	ldr	r0, [r5, #0]
   201c4:	2100      	movs	r1, #0
	}
}
   201c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   201ca:	f006 bfae 	b.w	2712a <z_set_timeout_expiry>
}
   201ce:	bd38      	pop	{r3, r4, r5, pc}
   201d0:	20003acc 	.word	0x20003acc
   201d4:	20003a90 	.word	0x20003a90

000201d8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   201d8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   201da:	4d0d      	ldr	r5, [pc, #52]	; (20210 <update_cache+0x38>)
   201dc:	462b      	mov	r3, r5
   201de:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   201e2:	429c      	cmp	r4, r3
   201e4:	d000      	beq.n	201e8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   201e6:	b904      	cbnz	r4, 201ea <update_cache+0x12>
   201e8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   201ea:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   201ec:	b938      	cbnz	r0, 201fe <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   201ee:	7b5a      	ldrb	r2, [r3, #13]
   201f0:	06d2      	lsls	r2, r2, #27
   201f2:	d104      	bne.n	201fe <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   201f4:	69a2      	ldr	r2, [r4, #24]
   201f6:	b912      	cbnz	r2, 201fe <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   201f8:	89da      	ldrh	r2, [r3, #14]
   201fa:	2a7f      	cmp	r2, #127	; 0x7f
   201fc:	d805      	bhi.n	2020a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   201fe:	429c      	cmp	r4, r3
   20200:	d002      	beq.n	20208 <update_cache+0x30>
			z_reset_time_slice(thread);
   20202:	4620      	mov	r0, r4
   20204:	f7ff ffd4 	bl	201b0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   20208:	4623      	mov	r3, r4
   2020a:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2020c:	bd38      	pop	{r3, r4, r5, pc}
   2020e:	bf00      	nop
   20210:	20003a90 	.word	0x20003a90

00020214 <move_thread_to_end_of_prio_q>:
{
   20214:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   20216:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2021a:	7b43      	ldrb	r3, [r0, #13]
   2021c:	2a00      	cmp	r2, #0
{
   2021e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   20220:	da04      	bge.n	2022c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20226:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   20228:	f006 fe43 	bl	26eb2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2022c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2022e:	4a15      	ldr	r2, [pc, #84]	; (20284 <move_thread_to_end_of_prio_q+0x70>)
   20230:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20234:	4610      	mov	r0, r2
   20236:	734b      	strb	r3, [r1, #13]
   20238:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2023c:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2023e:	4283      	cmp	r3, r0
   20240:	bf08      	it	eq
   20242:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20244:	b923      	cbnz	r3, 20250 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   20246:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   2024a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   2024c:	6251      	str	r1, [r2, #36]	; 0x24
}
   2024e:	e00c      	b.n	2026a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   20250:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   20254:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   20258:	42b5      	cmp	r5, r6
   2025a:	d00e      	beq.n	2027a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2025c:	42ae      	cmp	r6, r5
   2025e:	dd0c      	ble.n	2027a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   20260:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   20262:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   20266:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   20268:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2026a:	6890      	ldr	r0, [r2, #8]
   2026c:	1a43      	subs	r3, r0, r1
   2026e:	4258      	negs	r0, r3
}
   20270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   20274:	4158      	adcs	r0, r3
   20276:	f7ff bfaf 	b.w	201d8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2027a:	429c      	cmp	r4, r3
   2027c:	d0e3      	beq.n	20246 <move_thread_to_end_of_prio_q+0x32>
   2027e:	681b      	ldr	r3, [r3, #0]
   20280:	e7e0      	b.n	20244 <move_thread_to_end_of_prio_q+0x30>
   20282:	bf00      	nop
   20284:	20003a90 	.word	0x20003a90

00020288 <ready_thread>:
{
   20288:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2028a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2028e:	7b42      	ldrb	r2, [r0, #13]
   20290:	2b00      	cmp	r3, #0
   20292:	db29      	blt.n	202e8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20294:	06d3      	lsls	r3, r2, #27
   20296:	d127      	bne.n	202e8 <ready_thread+0x60>
	return node->next != NULL;
   20298:	6983      	ldr	r3, [r0, #24]
   2029a:	bb2b      	cbnz	r3, 202e8 <ready_thread+0x60>
	return list->head == list;
   2029c:	4913      	ldr	r1, [pc, #76]	; (202ec <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2029e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   202a2:	7342      	strb	r2, [r0, #13]
   202a4:	460a      	mov	r2, r1
   202a6:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   202aa:	4294      	cmp	r4, r2
   202ac:	bf18      	it	ne
   202ae:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   202b0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   202b2:	b923      	cbnz	r3, 202be <ready_thread+0x36>
	node->prev = tail;
   202b4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   202b8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   202ba:	6248      	str	r0, [r1, #36]	; 0x24
}
   202bc:	e00c      	b.n	202d8 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   202be:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   202c2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   202c6:	42b5      	cmp	r5, r6
   202c8:	d00a      	beq.n	202e0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   202ca:	42ae      	cmp	r6, r5
   202cc:	dd08      	ble.n	202e0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   202ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   202d0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   202d4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   202d6:	6058      	str	r0, [r3, #4]
}
   202d8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   202da:	2000      	movs	r0, #0
   202dc:	f7ff bf7c 	b.w	201d8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   202e0:	42a3      	cmp	r3, r4
   202e2:	d0e7      	beq.n	202b4 <ready_thread+0x2c>
   202e4:	681b      	ldr	r3, [r3, #0]
   202e6:	e7e4      	b.n	202b2 <ready_thread+0x2a>
}
   202e8:	bc70      	pop	{r4, r5, r6}
   202ea:	4770      	bx	lr
   202ec:	20003a90 	.word	0x20003a90

000202f0 <unready_thread>:
{
   202f0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   202f2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   202f6:	7b43      	ldrb	r3, [r0, #13]
   202f8:	2a00      	cmp	r2, #0
{
   202fa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   202fc:	da04      	bge.n	20308 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   202fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20302:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   20304:	f006 fdd5 	bl	26eb2 <sys_dlist_remove>
	update_cache(thread == _current);
   20308:	4b04      	ldr	r3, [pc, #16]	; (2031c <unready_thread+0x2c>)
   2030a:	6898      	ldr	r0, [r3, #8]
   2030c:	1a43      	subs	r3, r0, r1
   2030e:	4258      	negs	r0, r3
   20310:	4158      	adcs	r0, r3
}
   20312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   20316:	f7ff bf5f 	b.w	201d8 <update_cache>
   2031a:	bf00      	nop
   2031c:	20003a90 	.word	0x20003a90

00020320 <pend_locked>:
{
   20320:	b570      	push	{r4, r5, r6, lr}
   20322:	4615      	mov	r5, r2
   20324:	461c      	mov	r4, r3
   20326:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   20328:	f006 fe00 	bl	26f2c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2032c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   20330:	bf08      	it	eq
   20332:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   20336:	d008      	beq.n	2034a <pend_locked+0x2a>
   20338:	462a      	mov	r2, r5
   2033a:	4623      	mov	r3, r4
   2033c:	f106 0018 	add.w	r0, r6, #24
   20340:	4902      	ldr	r1, [pc, #8]	; (2034c <pend_locked+0x2c>)
}
   20342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20346:	f000 baf9 	b.w	2093c <z_add_timeout>
   2034a:	bd70      	pop	{r4, r5, r6, pc}
   2034c:	00026ee9 	.word	0x00026ee9

00020350 <k_sched_time_slice_set>:
{
   20350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20352:	4604      	mov	r4, r0
   20354:	460d      	mov	r5, r1
	__asm__ volatile(
   20356:	f04f 0320 	mov.w	r3, #32
   2035a:	f3ef 8711 	mrs	r7, BASEPRI
   2035e:	f383 8812 	msr	BASEPRI_MAX, r3
   20362:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   20366:	2600      	movs	r6, #0
   20368:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2036c:	f240 30e7 	movw	r0, #999	; 0x3e7
   20370:	4631      	mov	r1, r6
   20372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20376:	2300      	movs	r3, #0
   20378:	fbe4 010c 	umlal	r0, r1, r4, ip
   2037c:	f7e0 face 	bl	91c <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   20380:	42b4      	cmp	r4, r6
   20382:	dd02      	ble.n	2038a <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   20384:	2802      	cmp	r0, #2
   20386:	bfb8      	it	lt
   20388:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2038a:	4a07      	ldr	r2, [pc, #28]	; (203a8 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   2038c:	4b07      	ldr	r3, [pc, #28]	; (203ac <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2038e:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   20390:	4a07      	ldr	r2, [pc, #28]	; (203b0 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   20392:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   20394:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   20396:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   20398:	f7ff ff0a 	bl	201b0 <z_reset_time_slice>
	__asm__ volatile(
   2039c:	f387 8811 	msr	BASEPRI, r7
   203a0:	f3bf 8f6f 	isb	sy
}
   203a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   203a6:	bf00      	nop
   203a8:	20003acc 	.word	0x20003acc
   203ac:	20003a90 	.word	0x20003a90
   203b0:	20003ac8 	.word	0x20003ac8

000203b4 <z_time_slice>:
{
   203b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   203b6:	f04f 0320 	mov.w	r3, #32
   203ba:	f3ef 8511 	mrs	r5, BASEPRI
   203be:	f383 8812 	msr	BASEPRI_MAX, r3
   203c2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   203c6:	4b17      	ldr	r3, [pc, #92]	; (20424 <z_time_slice+0x70>)
   203c8:	4a17      	ldr	r2, [pc, #92]	; (20428 <z_time_slice+0x74>)
   203ca:	689c      	ldr	r4, [r3, #8]
   203cc:	6811      	ldr	r1, [r2, #0]
   203ce:	428c      	cmp	r4, r1
   203d0:	d107      	bne.n	203e2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   203d2:	4620      	mov	r0, r4
   203d4:	f7ff feec 	bl	201b0 <z_reset_time_slice>
	__asm__ volatile(
   203d8:	f385 8811 	msr	BASEPRI, r5
   203dc:	f3bf 8f6f 	isb	sy
}
   203e0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   203e2:	2100      	movs	r1, #0
   203e4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   203e6:	4a11      	ldr	r2, [pc, #68]	; (2042c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   203e8:	6812      	ldr	r2, [r2, #0]
   203ea:	b1c2      	cbz	r2, 2041e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   203ec:	89e2      	ldrh	r2, [r4, #14]
   203ee:	2a7f      	cmp	r2, #127	; 0x7f
   203f0:	d815      	bhi.n	2041e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   203f2:	7b62      	ldrb	r2, [r4, #13]
   203f4:	06d2      	lsls	r2, r2, #27
   203f6:	d112      	bne.n	2041e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   203f8:	4a0d      	ldr	r2, [pc, #52]	; (20430 <z_time_slice+0x7c>)
   203fa:	f994 100e 	ldrsb.w	r1, [r4, #14]
   203fe:	6812      	ldr	r2, [r2, #0]
   20400:	4291      	cmp	r1, r2
   20402:	db0c      	blt.n	2041e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   20404:	4a0b      	ldr	r2, [pc, #44]	; (20434 <z_time_slice+0x80>)
   20406:	4294      	cmp	r4, r2
   20408:	d009      	beq.n	2041e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   2040a:	691a      	ldr	r2, [r3, #16]
   2040c:	4282      	cmp	r2, r0
   2040e:	dc03      	bgt.n	20418 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   20410:	4620      	mov	r0, r4
   20412:	f7ff feff 	bl	20214 <move_thread_to_end_of_prio_q>
   20416:	e7dc      	b.n	203d2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   20418:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   2041a:	611a      	str	r2, [r3, #16]
   2041c:	e7dc      	b.n	203d8 <z_time_slice+0x24>
   2041e:	2200      	movs	r2, #0
   20420:	e7fb      	b.n	2041a <z_time_slice+0x66>
   20422:	bf00      	nop
   20424:	20003a90 	.word	0x20003a90
   20428:	20003ac4 	.word	0x20003ac4
   2042c:	20003acc 	.word	0x20003acc
   20430:	20003ac8 	.word	0x20003ac8
   20434:	20001f18 	.word	0x20001f18

00020438 <z_pend_curr>:
{
   20438:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   2043a:	480c      	ldr	r0, [pc, #48]	; (2046c <z_pend_curr+0x34>)
   2043c:	4d0c      	ldr	r5, [pc, #48]	; (20470 <z_pend_curr+0x38>)
   2043e:	6886      	ldr	r6, [r0, #8]
   20440:	602e      	str	r6, [r5, #0]
{
   20442:	460c      	mov	r4, r1
   20444:	4611      	mov	r1, r2
   20446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   2044a:	f04f 0620 	mov.w	r6, #32
   2044e:	f3ef 8511 	mrs	r5, BASEPRI
   20452:	f386 8812 	msr	BASEPRI_MAX, r6
   20456:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   2045a:	6880      	ldr	r0, [r0, #8]
   2045c:	f7ff ff60 	bl	20320 <pend_locked>
	ret = arch_swap(key);
   20460:	4620      	mov	r0, r4
}
   20462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20466:	f7e6 bf0b 	b.w	7280 <arch_swap>
   2046a:	bf00      	nop
   2046c:	20003a90 	.word	0x20003a90
   20470:	20003ac4 	.word	0x20003ac4

00020474 <z_set_prio>:
{
   20474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20476:	4604      	mov	r4, r0
   20478:	f04f 0320 	mov.w	r3, #32
   2047c:	f3ef 8611 	mrs	r6, BASEPRI
   20480:	f383 8812 	msr	BASEPRI_MAX, r3
   20484:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   20488:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2048a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2048c:	b249      	sxtb	r1, r1
   2048e:	d119      	bne.n	204c4 <z_set_prio+0x50>
	return node->next != NULL;
   20490:	6985      	ldr	r5, [r0, #24]
   20492:	b9bd      	cbnz	r5, 204c4 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20498:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2049a:	f006 fd0a 	bl	26eb2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2049e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   204a0:	4a16      	ldr	r2, [pc, #88]	; (204fc <z_set_prio+0x88>)
				thread->base.prio = prio;
   204a2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   204a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   204a8:	7343      	strb	r3, [r0, #13]
   204aa:	4613      	mov	r3, r2
   204ac:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   204b0:	4298      	cmp	r0, r3
   204b2:	bf18      	it	ne
   204b4:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   204b6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   204b8:	b95d      	cbnz	r5, 204d2 <z_set_prio+0x5e>
	node->prev = tail;
   204ba:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   204be:	6004      	str	r4, [r0, #0]
	list->tail = node;
   204c0:	6254      	str	r4, [r2, #36]	; 0x24
}
   204c2:	e011      	b.n	204e8 <z_set_prio+0x74>
			thread->base.prio = prio;
   204c4:	73a1      	strb	r1, [r4, #14]
   204c6:	2000      	movs	r0, #0
	__asm__ volatile(
   204c8:	f386 8811 	msr	BASEPRI, r6
   204cc:	f3bf 8f6f 	isb	sy
}
   204d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   204d2:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   204d6:	42b9      	cmp	r1, r7
   204d8:	d00b      	beq.n	204f2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   204da:	428f      	cmp	r7, r1
   204dc:	dd09      	ble.n	204f2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   204de:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   204e0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   204e4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   204e6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   204e8:	2001      	movs	r0, #1
   204ea:	f7ff fe75 	bl	201d8 <update_cache>
   204ee:	2001      	movs	r0, #1
   204f0:	e7ea      	b.n	204c8 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   204f2:	42a8      	cmp	r0, r5
   204f4:	d0e1      	beq.n	204ba <z_set_prio+0x46>
   204f6:	682d      	ldr	r5, [r5, #0]
   204f8:	e7de      	b.n	204b8 <z_set_prio+0x44>
   204fa:	bf00      	nop
   204fc:	20003a90 	.word	0x20003a90

00020500 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20500:	b949      	cbnz	r1, 20516 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20502:	f3ef 8005 	mrs	r0, IPSR
   20506:	b930      	cbnz	r0, 20516 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   20508:	4b05      	ldr	r3, [pc, #20]	; (20520 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2050a:	69da      	ldr	r2, [r3, #28]
   2050c:	689b      	ldr	r3, [r3, #8]
   2050e:	429a      	cmp	r2, r3
   20510:	d001      	beq.n	20516 <z_reschedule+0x16>
   20512:	f7e6 beb5 	b.w	7280 <arch_swap>
   20516:	f381 8811 	msr	BASEPRI, r1
   2051a:	f3bf 8f6f 	isb	sy
}
   2051e:	4770      	bx	lr
   20520:	20003a90 	.word	0x20003a90

00020524 <z_sched_start>:
{
   20524:	b510      	push	{r4, lr}
	__asm__ volatile(
   20526:	f04f 0220 	mov.w	r2, #32
   2052a:	f3ef 8411 	mrs	r4, BASEPRI
   2052e:	f382 8812 	msr	BASEPRI_MAX, r2
   20532:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   20536:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   20538:	0751      	lsls	r1, r2, #29
   2053a:	d404      	bmi.n	20546 <z_sched_start+0x22>
	__asm__ volatile(
   2053c:	f384 8811 	msr	BASEPRI, r4
   20540:	f3bf 8f6f 	isb	sy
}
   20544:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20546:	f022 0204 	bic.w	r2, r2, #4
   2054a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2054c:	f7ff fe9c 	bl	20288 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20550:	4621      	mov	r1, r4
   20552:	4802      	ldr	r0, [pc, #8]	; (2055c <z_sched_start+0x38>)
}
   20554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   20558:	f7ff bfd2 	b.w	20500 <z_reschedule>
   2055c:	20004033 	.word	0x20004033

00020560 <z_impl_k_thread_suspend>:
{
   20560:	b570      	push	{r4, r5, r6, lr}
   20562:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20564:	3018      	adds	r0, #24
   20566:	f006 fdba 	bl	270de <z_abort_timeout>
	__asm__ volatile(
   2056a:	f04f 0320 	mov.w	r3, #32
   2056e:	f3ef 8611 	mrs	r6, BASEPRI
   20572:	f383 8812 	msr	BASEPRI_MAX, r3
   20576:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2057a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2057e:	7b63      	ldrb	r3, [r4, #13]
   20580:	2a00      	cmp	r2, #0
   20582:	da05      	bge.n	20590 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20588:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2058a:	4620      	mov	r0, r4
   2058c:	f006 fc91 	bl	26eb2 <sys_dlist_remove>
		update_cache(thread == _current);
   20590:	4d0b      	ldr	r5, [pc, #44]	; (205c0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20592:	7b63      	ldrb	r3, [r4, #13]
   20594:	68a8      	ldr	r0, [r5, #8]
   20596:	f043 0310 	orr.w	r3, r3, #16
   2059a:	7363      	strb	r3, [r4, #13]
   2059c:	1b03      	subs	r3, r0, r4
   2059e:	4258      	negs	r0, r3
   205a0:	4158      	adcs	r0, r3
   205a2:	f7ff fe19 	bl	201d8 <update_cache>
	__asm__ volatile(
   205a6:	f386 8811 	msr	BASEPRI, r6
   205aa:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   205ae:	68ab      	ldr	r3, [r5, #8]
   205b0:	42a3      	cmp	r3, r4
   205b2:	d103      	bne.n	205bc <z_impl_k_thread_suspend+0x5c>
}
   205b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   205b8:	f006 bd53 	b.w	27062 <z_reschedule_unlocked>
}
   205bc:	bd70      	pop	{r4, r5, r6, pc}
   205be:	bf00      	nop
   205c0:	20003a90 	.word	0x20003a90

000205c4 <k_sched_lock>:
	__asm__ volatile(
   205c4:	f04f 0320 	mov.w	r3, #32
   205c8:	f3ef 8111 	mrs	r1, BASEPRI
   205cc:	f383 8812 	msr	BASEPRI_MAX, r3
   205d0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   205d4:	4b04      	ldr	r3, [pc, #16]	; (205e8 <k_sched_lock+0x24>)
   205d6:	689a      	ldr	r2, [r3, #8]
   205d8:	7bd3      	ldrb	r3, [r2, #15]
   205da:	3b01      	subs	r3, #1
   205dc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   205de:	f381 8811 	msr	BASEPRI, r1
   205e2:	f3bf 8f6f 	isb	sy
}
   205e6:	4770      	bx	lr
   205e8:	20003a90 	.word	0x20003a90

000205ec <k_sched_unlock>:
{
   205ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   205ee:	f04f 0320 	mov.w	r3, #32
   205f2:	f3ef 8411 	mrs	r4, BASEPRI
   205f6:	f383 8812 	msr	BASEPRI_MAX, r3
   205fa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   205fe:	4b08      	ldr	r3, [pc, #32]	; (20620 <k_sched_unlock+0x34>)
   20600:	689a      	ldr	r2, [r3, #8]
   20602:	7bd3      	ldrb	r3, [r2, #15]
   20604:	3301      	adds	r3, #1
   20606:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20608:	2000      	movs	r0, #0
   2060a:	f7ff fde5 	bl	201d8 <update_cache>
	__asm__ volatile(
   2060e:	f384 8811 	msr	BASEPRI, r4
   20612:	f3bf 8f6f 	isb	sy
}
   20616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2061a:	f006 bd22 	b.w	27062 <z_reschedule_unlocked>
   2061e:	bf00      	nop
   20620:	20003a90 	.word	0x20003a90

00020624 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   20624:	4b04      	ldr	r3, [pc, #16]	; (20638 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   20626:	2100      	movs	r1, #0
   20628:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2062c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   20630:	4608      	mov	r0, r1
   20632:	f7ff be8d 	b.w	20350 <k_sched_time_slice_set>
   20636:	bf00      	nop
   20638:	20003a90 	.word	0x20003a90

0002063c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2063e:	f04f 0320 	mov.w	r3, #32
   20642:	f3ef 8511 	mrs	r5, BASEPRI
   20646:	f383 8812 	msr	BASEPRI_MAX, r3
   2064a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2064e:	4919      	ldr	r1, [pc, #100]	; (206b4 <z_impl_k_yield+0x78>)
   20650:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20652:	7b43      	ldrb	r3, [r0, #13]
   20654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20658:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2065a:	f006 fc2a 	bl	26eb2 <sys_dlist_remove>
	}
	queue_thread(_current);
   2065e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   20660:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   20662:	4608      	mov	r0, r1
   20664:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20668:	735a      	strb	r2, [r3, #13]
   2066a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   2066e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20670:	4282      	cmp	r2, r0
   20672:	bf08      	it	eq
   20674:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20676:	b922      	cbnz	r2, 20682 <z_impl_k_yield+0x46>
	node->prev = tail;
   20678:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   2067c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2067e:	624b      	str	r3, [r1, #36]	; 0x24
}
   20680:	e00c      	b.n	2069c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   20682:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   20686:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2068a:	42be      	cmp	r6, r7
   2068c:	d00e      	beq.n	206ac <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2068e:	42b7      	cmp	r7, r6
   20690:	dd0c      	ble.n	206ac <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   20692:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20694:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   20698:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2069a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2069c:	2001      	movs	r0, #1
   2069e:	f7ff fd9b 	bl	201d8 <update_cache>
   206a2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   206a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   206a8:	f7e6 bdea 	b.w	7280 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   206ac:	42a2      	cmp	r2, r4
   206ae:	d0e3      	beq.n	20678 <z_impl_k_yield+0x3c>
   206b0:	6812      	ldr	r2, [r2, #0]
   206b2:	e7e0      	b.n	20676 <z_impl_k_yield+0x3a>
   206b4:	20003a90 	.word	0x20003a90

000206b8 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   206b8:	ea50 0301 	orrs.w	r3, r0, r1
{
   206bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206c0:	4605      	mov	r5, r0
   206c2:	460e      	mov	r6, r1
	if (ticks == 0) {
   206c4:	d103      	bne.n	206ce <z_tick_sleep+0x16>
	z_impl_k_yield();
   206c6:	f7ff ffb9 	bl	2063c <z_impl_k_yield>
		k_yield();
		return 0;
   206ca:	2000      	movs	r0, #0
   206cc:	e02c      	b.n	20728 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   206ce:	1c83      	adds	r3, r0, #2
   206d0:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   206d4:	db2a      	blt.n	2072c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   206d6:	f006 fd44 	bl	27162 <sys_clock_tick_get_32>
   206da:	182c      	adds	r4, r5, r0
   206dc:	f04f 0320 	mov.w	r3, #32
   206e0:	f3ef 8811 	mrs	r8, BASEPRI
   206e4:	f383 8812 	msr	BASEPRI_MAX, r3
   206e8:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   206ec:	4f11      	ldr	r7, [pc, #68]	; (20734 <z_tick_sleep+0x7c>)
   206ee:	4b12      	ldr	r3, [pc, #72]	; (20738 <z_tick_sleep+0x80>)
   206f0:	68b8      	ldr	r0, [r7, #8]
   206f2:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   206f4:	f7ff fdfc 	bl	202f0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   206f8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   206fa:	4910      	ldr	r1, [pc, #64]	; (2073c <z_tick_sleep+0x84>)
   206fc:	462a      	mov	r2, r5
   206fe:	4633      	mov	r3, r6
   20700:	3018      	adds	r0, #24
   20702:	f000 f91b 	bl	2093c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   20706:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20708:	7b53      	ldrb	r3, [r2, #13]
   2070a:	f043 0310 	orr.w	r3, r3, #16
   2070e:	7353      	strb	r3, [r2, #13]
   20710:	4640      	mov	r0, r8
   20712:	f7e6 fdb5 	bl	7280 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   20716:	f006 fd24 	bl	27162 <sys_clock_tick_get_32>
   2071a:	1a20      	subs	r0, r4, r0
   2071c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   20720:	2801      	cmp	r0, #1
   20722:	f173 0300 	sbcs.w	r3, r3, #0
   20726:	dbd0      	blt.n	206ca <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   20728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2072c:	f06f 0401 	mvn.w	r4, #1
   20730:	1a24      	subs	r4, r4, r0
   20732:	e7d3      	b.n	206dc <z_tick_sleep+0x24>
   20734:	20003a90 	.word	0x20003a90
   20738:	20003ac4 	.word	0x20003ac4
   2073c:	00026ee9 	.word	0x00026ee9

00020740 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20740:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   20744:	bf08      	it	eq
   20746:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2074a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2074c:	d106      	bne.n	2075c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2074e:	4b08      	ldr	r3, [pc, #32]	; (20770 <z_impl_k_sleep+0x30>)
   20750:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   20752:	f7ff ff05 	bl	20560 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   20756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2075a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2075c:	f7ff ffac 	bl	206b8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   20760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20764:	fb80 0303 	smull	r0, r3, r0, r3
   20768:	0bc0      	lsrs	r0, r0, #15
   2076a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2076e:	e7f4      	b.n	2075a <z_impl_k_sleep+0x1a>
   20770:	20003a90 	.word	0x20003a90

00020774 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20774:	4b01      	ldr	r3, [pc, #4]	; (2077c <z_impl_z_current_get+0x8>)
   20776:	6898      	ldr	r0, [r3, #8]
   20778:	4770      	bx	lr
   2077a:	bf00      	nop
   2077c:	20003a90 	.word	0x20003a90

00020780 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   20780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20784:	4604      	mov	r4, r0
   20786:	f04f 0320 	mov.w	r3, #32
   2078a:	f3ef 8611 	mrs	r6, BASEPRI
   2078e:	f383 8812 	msr	BASEPRI_MAX, r3
   20792:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   20796:	7b03      	ldrb	r3, [r0, #12]
   20798:	07d9      	lsls	r1, r3, #31
   2079a:	d50b      	bpl.n	207b4 <z_thread_abort+0x34>
	__asm__ volatile(
   2079c:	f386 8811 	msr	BASEPRI, r6
   207a0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   207a4:	4040      	eors	r0, r0
   207a6:	f380 8811 	msr	BASEPRI, r0
   207aa:	f04f 0004 	mov.w	r0, #4
   207ae:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   207b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   207b4:	7b43      	ldrb	r3, [r0, #13]
   207b6:	071a      	lsls	r2, r3, #28
   207b8:	d504      	bpl.n	207c4 <z_thread_abort+0x44>
   207ba:	f386 8811 	msr	BASEPRI, r6
   207be:	f3bf 8f6f 	isb	sy
   207c2:	e7f5      	b.n	207b0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   207c4:	f023 0220 	bic.w	r2, r3, #32
   207c8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   207cc:	09d2      	lsrs	r2, r2, #7
   207ce:	d123      	bne.n	20818 <z_thread_abort+0x98>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   207d0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   207d2:	68a3      	ldr	r3, [r4, #8]
   207d4:	b113      	cbz	r3, 207dc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   207d6:	4620      	mov	r0, r4
   207d8:	f006 fb73 	bl	26ec2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   207dc:	f104 0018 	add.w	r0, r4, #24
   207e0:	f006 fc7d 	bl	270de <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   207e4:	f104 0758 	add.w	r7, r4, #88	; 0x58
   207e8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   207ec:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   207ee:	42bd      	cmp	r5, r7
   207f0:	d000      	beq.n	207f4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   207f2:	b9cd      	cbnz	r5, 20828 <z_thread_abort+0xa8>
		update_cache(1);
   207f4:	2001      	movs	r0, #1
   207f6:	f7ff fcef 	bl	201d8 <update_cache>
		z_thread_monitor_exit(thread);
   207fa:	4620      	mov	r0, r4
   207fc:	f7ff f81e 	bl	1f83c <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   20800:	4b10      	ldr	r3, [pc, #64]	; (20844 <z_thread_abort+0xc4>)
   20802:	689b      	ldr	r3, [r3, #8]
   20804:	42a3      	cmp	r3, r4
   20806:	d1d8      	bne.n	207ba <z_thread_abort+0x3a>
   20808:	f3ef 8305 	mrs	r3, IPSR
   2080c:	2b00      	cmp	r3, #0
   2080e:	d1d4      	bne.n	207ba <z_thread_abort+0x3a>
   20810:	4630      	mov	r0, r6
   20812:	f7e6 fd35 	bl	7280 <arch_swap>
	return ret;
   20816:	e7d0      	b.n	207ba <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20818:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2081c:	f043 0308 	orr.w	r3, r3, #8
   20820:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   20822:	f006 fb46 	bl	26eb2 <sys_dlist_remove>
}
   20826:	e7d4      	b.n	207d2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   20828:	4628      	mov	r0, r5
   2082a:	f006 fb4a 	bl	26ec2 <unpend_thread_no_timeout>
   2082e:	f105 0018 	add.w	r0, r5, #24
   20832:	f006 fc54 	bl	270de <z_abort_timeout>
   20836:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
   2083a:	4628      	mov	r0, r5
   2083c:	f7ff fd24 	bl	20288 <ready_thread>
   20840:	e7d4      	b.n	207ec <z_thread_abort+0x6c>
   20842:	bf00      	nop
   20844:	20003a90 	.word	0x20003a90

00020848 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   20848:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2084a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2084e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   20850:	e9cd 6700 	strd	r6, r7, [sp]
   20854:	f7ff fdf0 	bl	20438 <z_pend_curr>

	if (data != NULL) {
   20858:	b11c      	cbz	r4, 20862 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2085a:	4b03      	ldr	r3, [pc, #12]	; (20868 <z_sched_wait+0x20>)
   2085c:	689b      	ldr	r3, [r3, #8]
   2085e:	695b      	ldr	r3, [r3, #20]
   20860:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   20862:	b002      	add	sp, #8
   20864:	bdd0      	pop	{r4, r6, r7, pc}
   20866:	bf00      	nop
   20868:	20003a90 	.word	0x20003a90

0002086c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2086c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2086e:	4806      	ldr	r0, [pc, #24]	; (20888 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   20870:	4a06      	ldr	r2, [pc, #24]	; (2088c <z_data_copy+0x20>)
   20872:	4907      	ldr	r1, [pc, #28]	; (20890 <z_data_copy+0x24>)
   20874:	1a12      	subs	r2, r2, r0
   20876:	f006 f865 	bl	26944 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2087a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2087e:	4a05      	ldr	r2, [pc, #20]	; (20894 <z_data_copy+0x28>)
   20880:	4905      	ldr	r1, [pc, #20]	; (20898 <z_data_copy+0x2c>)
   20882:	4806      	ldr	r0, [pc, #24]	; (2089c <z_data_copy+0x30>)
   20884:	f006 b85e 	b.w	26944 <z_early_memcpy>
   20888:	20000000 	.word	0x20000000
   2088c:	20000d14 	.word	0x20000d14
   20890:	0002eb40 	.word	0x0002eb40
   20894:	00000000 	.word	0x00000000
   20898:	0002eb40 	.word	0x0002eb40
   2089c:	20000000 	.word	0x20000000

000208a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   208a0:	4b03      	ldr	r3, [pc, #12]	; (208b0 <elapsed+0x10>)
   208a2:	681b      	ldr	r3, [r3, #0]
   208a4:	b90b      	cbnz	r3, 208aa <elapsed+0xa>
   208a6:	f7fd bbb7 	b.w	1e018 <sys_clock_elapsed>
}
   208aa:	2000      	movs	r0, #0
   208ac:	4770      	bx	lr
   208ae:	bf00      	nop
   208b0:	20003ad0 	.word	0x20003ad0

000208b4 <next_timeout>:

static int32_t next_timeout(void)
{
   208b4:	b510      	push	{r4, lr}
	return list->head == list;
   208b6:	4b11      	ldr	r3, [pc, #68]	; (208fc <next_timeout+0x48>)
   208b8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208ba:	429c      	cmp	r4, r3
   208bc:	d10a      	bne.n	208d4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   208be:	f7ff ffef 	bl	208a0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   208c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   208c6:	4b0e      	ldr	r3, [pc, #56]	; (20900 <next_timeout+0x4c>)
   208c8:	691b      	ldr	r3, [r3, #16]
   208ca:	b113      	cbz	r3, 208d2 <next_timeout+0x1e>
   208cc:	4298      	cmp	r0, r3
   208ce:	bfa8      	it	ge
   208d0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   208d2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   208d4:	f7ff ffe4 	bl	208a0 <elapsed>
	if ((to == NULL) ||
   208d8:	2c00      	cmp	r4, #0
   208da:	d0f2      	beq.n	208c2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   208dc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   208e0:	1a1b      	subs	r3, r3, r0
   208e2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   208e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   208ea:	f172 0100 	sbcs.w	r1, r2, #0
   208ee:	dae8      	bge.n	208c2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   208f0:	2a00      	cmp	r2, #0
   208f2:	bfac      	ite	ge
   208f4:	4618      	movge	r0, r3
   208f6:	2000      	movlt	r0, #0
   208f8:	e7e5      	b.n	208c6 <next_timeout+0x12>
   208fa:	bf00      	nop
   208fc:	200009b4 	.word	0x200009b4
   20900:	20003a90 	.word	0x20003a90

00020904 <remove_timeout>:
{
   20904:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20906:	b170      	cbz	r0, 20926 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   20908:	4b0b      	ldr	r3, [pc, #44]	; (20938 <remove_timeout+0x34>)
   2090a:	685b      	ldr	r3, [r3, #4]
   2090c:	4298      	cmp	r0, r3
   2090e:	d00a      	beq.n	20926 <remove_timeout+0x22>
   20910:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   20912:	b143      	cbz	r3, 20926 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   20914:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   20918:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2091c:	1912      	adds	r2, r2, r4
   2091e:	eb41 0105 	adc.w	r1, r1, r5
   20922:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   20926:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   2092a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2092c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2092e:	2300      	movs	r3, #0
	node->prev = NULL;
   20930:	e9c0 3300 	strd	r3, r3, [r0]
}
   20934:	bd30      	pop	{r4, r5, pc}
   20936:	bf00      	nop
   20938:	200009b4 	.word	0x200009b4

0002093c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2093c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20940:	bf08      	it	eq
   20942:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   20946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20948:	4604      	mov	r4, r0
   2094a:	461d      	mov	r5, r3
   2094c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2094e:	d061      	beq.n	20a14 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   20950:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   20952:	f04f 0320 	mov.w	r3, #32
   20956:	f3ef 8711 	mrs	r7, BASEPRI
   2095a:	f383 8812 	msr	BASEPRI_MAX, r3
   2095e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   20962:	3201      	adds	r2, #1
   20964:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   20968:	da24      	bge.n	209b4 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2096a:	4930      	ldr	r1, [pc, #192]	; (20a2c <z_add_timeout+0xf0>)
   2096c:	e9d1 2000 	ldrd	r2, r0, [r1]
   20970:	f06f 0301 	mvn.w	r3, #1
   20974:	1a9b      	subs	r3, r3, r2
   20976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2097a:	eb62 0000 	sbc.w	r0, r2, r0
   2097e:	1b9e      	subs	r6, r3, r6
   20980:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   20984:	2e01      	cmp	r6, #1
   20986:	f170 0300 	sbcs.w	r3, r0, #0
   2098a:	da01      	bge.n	20990 <z_add_timeout+0x54>
   2098c:	2601      	movs	r6, #1
   2098e:	2000      	movs	r0, #0
   20990:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   20994:	4e26      	ldr	r6, [pc, #152]	; (20a30 <z_add_timeout+0xf4>)
   20996:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2099a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2099c:	45b4      	cmp	ip, r6
   2099e:	bf08      	it	eq
   209a0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   209a4:	f1bc 0f00 	cmp.w	ip, #0
   209a8:	d10d      	bne.n	209c6 <z_add_timeout+0x8a>
	node->prev = tail;
   209aa:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   209ae:	602c      	str	r4, [r5, #0]
	list->tail = node;
   209b0:	6074      	str	r4, [r6, #4]
}
   209b2:	e01c      	b.n	209ee <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   209b4:	f7ff ff74 	bl	208a0 <elapsed>
   209b8:	3601      	adds	r6, #1
   209ba:	f145 0500 	adc.w	r5, r5, #0
   209be:	1836      	adds	r6, r6, r0
   209c0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   209c4:	e7e4      	b.n	20990 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   209c6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   209ca:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   209ce:	4293      	cmp	r3, r2
   209d0:	eb71 0e00 	sbcs.w	lr, r1, r0
   209d4:	da1f      	bge.n	20a16 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   209d6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   209d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   209dc:	eb60 0001 	sbc.w	r0, r0, r1
   209e0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   209e4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   209e8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   209ea:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   209ee:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   209f0:	42b3      	cmp	r3, r6
   209f2:	d00b      	beq.n	20a0c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   209f4:	429c      	cmp	r4, r3
   209f6:	d109      	bne.n	20a0c <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   209f8:	f7ff ff5c 	bl	208b4 <next_timeout>

			if (next_time == 0 ||
   209fc:	b118      	cbz	r0, 20a06 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   209fe:	4b0d      	ldr	r3, [pc, #52]	; (20a34 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   20a00:	691b      	ldr	r3, [r3, #16]
   20a02:	4283      	cmp	r3, r0
   20a04:	d002      	beq.n	20a0c <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   20a06:	2100      	movs	r1, #0
   20a08:	f7fd fad4 	bl	1dfb4 <sys_clock_set_timeout>
	__asm__ volatile(
   20a0c:	f387 8811 	msr	BASEPRI, r7
   20a10:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   20a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   20a16:	1a9b      	subs	r3, r3, r2
   20a18:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   20a1c:	45ac      	cmp	ip, r5
   20a1e:	e9c4 3104 	strd	r3, r1, [r4, #16]
   20a22:	d0c2      	beq.n	209aa <z_add_timeout+0x6e>
   20a24:	f8dc c000 	ldr.w	ip, [ip]
   20a28:	e7bc      	b.n	209a4 <z_add_timeout+0x68>
   20a2a:	bf00      	nop
   20a2c:	20002160 	.word	0x20002160
   20a30:	200009b4 	.word	0x200009b4
   20a34:	20003a90 	.word	0x20003a90

00020a38 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   20a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a3c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20a3e:	f7ff fcb9 	bl	203b4 <z_time_slice>
	__asm__ volatile(
   20a42:	f04f 0320 	mov.w	r3, #32
   20a46:	f3ef 8c11 	mrs	ip, BASEPRI
   20a4a:	f383 8812 	msr	BASEPRI_MAX, r3
   20a4e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   20a52:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 20b04 <sys_clock_announce+0xcc>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   20a56:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 20b08 <sys_clock_announce+0xd0>
   20a5a:	f8da 0000 	ldr.w	r0, [sl]
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   20a5e:	4f2b      	ldr	r7, [pc, #172]	; (20b0c <sys_clock_announce+0xd4>)
	announce_remaining = ticks;
   20a60:	f8c9 4000 	str.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a64:	4550      	cmp	r0, sl
   20a66:	bf08      	it	eq
   20a68:	2000      	moveq	r0, #0
		t->dticks = 0;
   20a6a:	2400      	movs	r4, #0
   20a6c:	2500      	movs	r5, #0
		curr_tick += dt;
   20a6e:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   20a72:	f8d9 3000 	ldr.w	r3, [r9]
   20a76:	46e0      	mov	r8, ip
   20a78:	b380      	cbz	r0, 20adc <sys_clock_announce+0xa4>
   20a7a:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   20a7e:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   20a82:	42b3      	cmp	r3, r6
   20a84:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   20a88:	da05      	bge.n	20a96 <sys_clock_announce+0x5e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   20a8a:	1af6      	subs	r6, r6, r3
   20a8c:	eb6c 040e 	sbc.w	r4, ip, lr
   20a90:	e9c0 6404 	strd	r6, r4, [r0, #16]
   20a94:	e022      	b.n	20adc <sys_clock_announce+0xa4>
		curr_tick += dt;
   20a96:	18b2      	adds	r2, r6, r2
   20a98:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   20a9c:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   20aa0:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   20aa4:	f7ff ff2e 	bl	20904 <remove_timeout>
	__asm__ volatile(
   20aa8:	f388 8811 	msr	BASEPRI, r8
   20aac:	f3bf 8f6f 	isb	sy
		t->fn(t);
   20ab0:	6883      	ldr	r3, [r0, #8]
   20ab2:	4798      	blx	r3
	__asm__ volatile(
   20ab4:	f04f 0320 	mov.w	r3, #32
   20ab8:	f3ef 8811 	mrs	r8, BASEPRI
   20abc:	f383 8812 	msr	BASEPRI_MAX, r3
   20ac0:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   20ac4:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   20ac8:	f8da 0000 	ldr.w	r0, [sl]
   20acc:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ace:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   20ad0:	46c4      	mov	ip, r8
   20ad2:	f8c9 3000 	str.w	r3, [r9]
   20ad6:	d1ca      	bne.n	20a6e <sys_clock_announce+0x36>
		curr_tick += dt;
   20ad8:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   20adc:	189a      	adds	r2, r3, r2
   20ade:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   20ae2:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   20ae4:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   20ae8:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   20aec:	f7ff fee2 	bl	208b4 <next_timeout>
   20af0:	4621      	mov	r1, r4
   20af2:	f7fd fa5f 	bl	1dfb4 <sys_clock_set_timeout>
	__asm__ volatile(
   20af6:	f388 8811 	msr	BASEPRI, r8
   20afa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b02:	bf00      	nop
   20b04:	200009b4 	.word	0x200009b4
   20b08:	20003ad0 	.word	0x20003ad0
   20b0c:	20002160 	.word	0x20002160

00020b10 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   20b10:	b510      	push	{r4, lr}
	__asm__ volatile(
   20b12:	f04f 0320 	mov.w	r3, #32
   20b16:	f3ef 8411 	mrs	r4, BASEPRI
   20b1a:	f383 8812 	msr	BASEPRI_MAX, r3
   20b1e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   20b22:	f7ff febd 	bl	208a0 <elapsed>
   20b26:	4a06      	ldr	r2, [pc, #24]	; (20b40 <sys_clock_tick_get+0x30>)
   20b28:	4603      	mov	r3, r0
   20b2a:	e9d2 0100 	ldrd	r0, r1, [r2]
   20b2e:	1818      	adds	r0, r3, r0
   20b30:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   20b34:	f384 8811 	msr	BASEPRI, r4
   20b38:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   20b3c:	bd10      	pop	{r4, pc}
   20b3e:	bf00      	nop
   20b40:	20002160 	.word	0x20002160

00020b44 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20b44:	b570      	push	{r4, r5, r6, lr}
   20b46:	4604      	mov	r4, r0
	__asm__ volatile(
   20b48:	f04f 0320 	mov.w	r3, #32
   20b4c:	f3ef 8511 	mrs	r5, BASEPRI
   20b50:	f383 8812 	msr	BASEPRI_MAX, r3
   20b54:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20b58:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   20b5c:	3301      	adds	r3, #1
   20b5e:	f142 0200 	adc.w	r2, r2, #0
   20b62:	2b02      	cmp	r3, #2
   20b64:	f172 0200 	sbcs.w	r2, r2, #0
   20b68:	d322      	bcc.n	20bb0 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   20b6a:	f006 fafe 	bl	2716a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   20b6e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   20b72:	3001      	adds	r0, #1
   20b74:	f141 0100 	adc.w	r1, r1, #0
   20b78:	18c0      	adds	r0, r0, r3
   20b7a:	eb41 0102 	adc.w	r1, r1, r2
   20b7e:	2801      	cmp	r0, #1
   20b80:	f171 0100 	sbcs.w	r1, r1, #0
   20b84:	db32      	blt.n	20bec <z_timer_expiration_handler+0xa8>
   20b86:	f006 faf0 	bl	2716a <z_impl_k_uptime_ticks>
   20b8a:	3001      	adds	r0, #1
   20b8c:	f141 0300 	adc.w	r3, r1, #0
   20b90:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   20b94:	1880      	adds	r0, r0, r2
   20b96:	f06f 0201 	mvn.w	r2, #1
   20b9a:	eb43 0301 	adc.w	r3, r3, r1
   20b9e:	1a12      	subs	r2, r2, r0
   20ba0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20ba4:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20ba8:	491a      	ldr	r1, [pc, #104]	; (20c14 <z_timer_expiration_handler+0xd0>)
   20baa:	4620      	mov	r0, r4
   20bac:	f7ff fec6 	bl	2093c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   20bb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20bb2:	3301      	adds	r3, #1
   20bb4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20bb6:	6a23      	ldr	r3, [r4, #32]
   20bb8:	b173      	cbz	r3, 20bd8 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   20bba:	f385 8811 	msr	BASEPRI, r5
   20bbe:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   20bc2:	6a23      	ldr	r3, [r4, #32]
   20bc4:	4620      	mov	r0, r4
   20bc6:	4798      	blx	r3
	__asm__ volatile(
   20bc8:	f04f 0320 	mov.w	r3, #32
   20bcc:	f3ef 8511 	mrs	r5, BASEPRI
   20bd0:	f383 8812 	msr	BASEPRI_MAX, r3
   20bd4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   20bd8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20bdc:	42a6      	cmp	r6, r4
   20bde:	d000      	beq.n	20be2 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20be0:	b94e      	cbnz	r6, 20bf6 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   20be2:	f385 8811 	msr	BASEPRI, r5
   20be6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   20bea:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   20bec:	f06f 0201 	mvn.w	r2, #1
   20bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20bf4:	e7d8      	b.n	20ba8 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   20bf6:	4630      	mov	r0, r6
   20bf8:	f006 f9d0 	bl	26f9c <z_unpend_thread_no_timeout>
   20bfc:	2300      	movs	r3, #0
   20bfe:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
   20c02:	f385 8811 	msr	BASEPRI, r5
   20c06:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   20c0a:	4630      	mov	r0, r6
}
   20c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   20c10:	f006 b9b4 	b.w	26f7c <z_ready_thread>
   20c14:	00020b45 	.word	0x00020b45

00020c18 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20c20:	bf08      	it	eq
   20c22:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   20c26:	4605      	mov	r5, r0
   20c28:	4614      	mov	r4, r2
   20c2a:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   20c2e:	4619      	mov	r1, r3
   20c30:	4691      	mov	r9, r2
   20c32:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20c34:	d037      	beq.n	20ca6 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   20c36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20c3a:	bf08      	it	eq
   20c3c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   20c40:	4637      	mov	r7, r6
   20c42:	4682      	mov	sl, r0
   20c44:	d011      	beq.n	20c6a <z_impl_k_timer_start+0x52>
   20c46:	ea50 0306 	orrs.w	r3, r0, r6
   20c4a:	d00e      	beq.n	20c6a <z_impl_k_timer_start+0x52>
   20c4c:	1c72      	adds	r2, r6, #1
   20c4e:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   20c52:	db0a      	blt.n	20c6a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   20c54:	2e02      	cmp	r6, #2
   20c56:	4684      	mov	ip, r0
   20c58:	f170 0000 	sbcs.w	r0, r0, #0
   20c5c:	bfbc      	itt	lt
   20c5e:	2702      	movlt	r7, #2
   20c60:	f04f 0c00 	movlt.w	ip, #0
   20c64:	3f01      	subs	r7, #1
   20c66:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   20c6a:	1c63      	adds	r3, r4, #1
   20c6c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   20c70:	db0a      	blt.n	20c88 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   20c72:	2c01      	cmp	r4, #1
   20c74:	f171 0300 	sbcs.w	r3, r1, #0
   20c78:	4622      	mov	r2, r4
   20c7a:	bfbc      	itt	lt
   20c7c:	2201      	movlt	r2, #1
   20c7e:	2100      	movlt	r1, #0
   20c80:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   20c84:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   20c88:	4628      	mov	r0, r5
   20c8a:	f006 fa28 	bl	270de <z_abort_timeout>
	timer->period = period;
   20c8e:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   20c92:	2300      	movs	r3, #0
   20c94:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20c96:	464a      	mov	r2, r9
   20c98:	4643      	mov	r3, r8
   20c9a:	4628      	mov	r0, r5
   20c9c:	4903      	ldr	r1, [pc, #12]	; (20cac <z_impl_k_timer_start+0x94>)
		     duration);
}
   20c9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20ca2:	f7ff be4b 	b.w	2093c <z_add_timeout>
}
   20ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20caa:	bf00      	nop
   20cac:	00020b45 	.word	0x00020b45

00020cb0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   20cb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20cb4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   20cb6:	4b29      	ldr	r3, [pc, #164]	; (20d5c <z_impl_k_poll+0xac>)
   20cb8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   20cba:	2301      	movs	r3, #1
   20cbc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   20cc0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   20cc4:	ea52 0305 	orrs.w	r3, r2, r5
{
   20cc8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   20cca:	bf0c      	ite	eq
   20ccc:	2301      	moveq	r3, #1
   20cce:	2300      	movne	r3, #0
   20cd0:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   20cd4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   20cd6:	f006 faca 	bl	2726e <register_events>
   20cda:	4681      	mov	r9, r0
	__asm__ volatile(
   20cdc:	f04f 0320 	mov.w	r3, #32
   20ce0:	f3ef 8a11 	mrs	sl, BASEPRI
   20ce4:	f383 8812 	msr	BASEPRI_MAX, r3
   20ce8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   20cec:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   20cf0:	b964      	cbnz	r4, 20d0c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   20cf2:	4601      	mov	r1, r0
   20cf4:	4652      	mov	r2, sl
   20cf6:	4640      	mov	r0, r8
   20cf8:	f006 fb8a 	bl	27410 <clear_event_registrations>
	__asm__ volatile(
   20cfc:	f38a 8811 	msr	BASEPRI, sl
   20d00:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   20d04:	4620      	mov	r0, r4
   20d06:	b002      	add	sp, #8
   20d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   20d0c:	2300      	movs	r3, #0
   20d0e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20d12:	ea56 0305 	orrs.w	r3, r6, r5
   20d16:	d106      	bne.n	20d26 <z_impl_k_poll+0x76>
   20d18:	f38a 8811 	msr	BASEPRI, sl
   20d1c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20d20:	f06f 040a 	mvn.w	r4, #10
   20d24:	e7ee      	b.n	20d04 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20d26:	e9cd 6500 	strd	r6, r5, [sp]
   20d2a:	4a0d      	ldr	r2, [pc, #52]	; (20d60 <z_impl_k_poll+0xb0>)
   20d2c:	480d      	ldr	r0, [pc, #52]	; (20d64 <z_impl_k_poll+0xb4>)
   20d2e:	4651      	mov	r1, sl
   20d30:	f7ff fb82 	bl	20438 <z_pend_curr>
   20d34:	4604      	mov	r4, r0
	__asm__ volatile(
   20d36:	f04f 0320 	mov.w	r3, #32
   20d3a:	f3ef 8511 	mrs	r5, BASEPRI
   20d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   20d42:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   20d46:	462a      	mov	r2, r5
   20d48:	4649      	mov	r1, r9
   20d4a:	4640      	mov	r0, r8
   20d4c:	f006 fb60 	bl	27410 <clear_event_registrations>
	__asm__ volatile(
   20d50:	f385 8811 	msr	BASEPRI, r5
   20d54:	f3bf 8f6f 	isb	sy
	return swap_rc;
   20d58:	e7d4      	b.n	20d04 <z_impl_k_poll+0x54>
   20d5a:	bf00      	nop
   20d5c:	20003a90 	.word	0x20003a90
   20d60:	200009bc 	.word	0x200009bc
   20d64:	20004033 	.word	0x20004033

00020d68 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   20d68:	b538      	push	{r3, r4, r5, lr}
   20d6a:	4603      	mov	r3, r0
	__asm__ volatile(
   20d6c:	f04f 0220 	mov.w	r2, #32
   20d70:	f3ef 8511 	mrs	r5, BASEPRI
   20d74:	f382 8812 	msr	BASEPRI_MAX, r2
   20d78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   20d7c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   20d7e:	2101      	movs	r1, #1
   20d80:	6081      	str	r1, [r0, #8]
	return list->head == list;
   20d82:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   20d84:	4283      	cmp	r3, r0
   20d86:	d106      	bne.n	20d96 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   20d88:	f385 8811 	msr	BASEPRI, r5
   20d8c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   20d90:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   20d92:	4620      	mov	r0, r4
   20d94:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   20d96:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20d9a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20d9c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20d9e:	2300      	movs	r3, #0
	node->prev = NULL;
   20da0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20da4:	f006 fada 	bl	2735c <signal_poll_event>
	z_reschedule(&lock, key);
   20da8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20daa:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   20dac:	4801      	ldr	r0, [pc, #4]	; (20db4 <z_impl_k_poll_signal_raise+0x4c>)
   20dae:	f7ff fba7 	bl	20500 <z_reschedule>
	return rc;
   20db2:	e7ee      	b.n	20d92 <z_impl_k_poll_signal_raise+0x2a>
   20db4:	20004033 	.word	0x20004033

00020db8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   20db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20dba:	4606      	mov	r6, r0
   20dbc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   20dbe:	f005 fe75 	bl	26aac <k_is_in_isr>
   20dc2:	b980      	cbnz	r0, 20de6 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   20dc4:	4b0b      	ldr	r3, [pc, #44]	; (20df4 <z_thread_aligned_alloc+0x3c>)
   20dc6:	689b      	ldr	r3, [r3, #8]
   20dc8:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   20dcc:	b17c      	cbz	r4, 20dee <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20dce:	1d2a      	adds	r2, r5, #4
   20dd0:	d209      	bcs.n	20de6 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   20dd2:	2000      	movs	r0, #0
   20dd4:	2100      	movs	r1, #0
   20dd6:	e9cd 0100 	strd	r0, r1, [sp]
   20dda:	f046 0104 	orr.w	r1, r6, #4
   20dde:	4620      	mov	r0, r4
   20de0:	f005 fdba 	bl	26958 <k_heap_aligned_alloc>
	if (mem == NULL) {
   20de4:	b908      	cbnz	r0, 20dea <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   20de6:	2400      	movs	r4, #0
	}

	return ret;
   20de8:	e001      	b.n	20dee <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   20dea:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   20dec:	1d04      	adds	r4, r0, #4
}
   20dee:	4620      	mov	r0, r4
   20df0:	b002      	add	sp, #8
   20df2:	bd70      	pop	{r4, r5, r6, pc}
   20df4:	20003a90 	.word	0x20003a90

00020df8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   20df8:	4801      	ldr	r0, [pc, #4]	; (20e00 <boot_banner+0x8>)
   20dfa:	f000 b87d 	b.w	20ef8 <printk>
   20dfe:	bf00      	nop
   20e00:	0002eb01 	.word	0x0002eb01

00020e04 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   20e04:	4770      	bx	lr

00020e06 <read_ultra>:
                          uint16_t len, uint16_t offset) {
   20e06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   20e08:	2410      	movs	r4, #16
   20e0a:	9402      	str	r4, [sp, #8]
   20e0c:	68cc      	ldr	r4, [r1, #12]
   20e0e:	9401      	str	r4, [sp, #4]
   20e10:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   20e14:	9400      	str	r4, [sp, #0]
   20e16:	f004 f9da 	bl	251ce <bt_gatt_attr_read>
}
   20e1a:	b004      	add	sp, #16
   20e1c:	bd10      	pop	{r4, pc}

00020e1e <cbpprintf_external>:
{
   20e1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20e22:	4606      	mov	r6, r0
   20e24:	460d      	mov	r5, r1
   20e26:	4617      	mov	r7, r2
	if (buf == NULL) {
   20e28:	4698      	mov	r8, r3
   20e2a:	b32b      	cbz	r3, 20e78 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   20e2c:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   20e30:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   20e34:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   20e36:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   20e38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   20e3c:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   20e40:	441c      	add	r4, r3
   20e42:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   20e44:	f04f 0a00 	mov.w	sl, #0
   20e48:	45ca      	cmp	sl, r9
   20e4a:	d309      	bcc.n	20e60 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   20e4c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   20e50:	f108 0308 	add.w	r3, r8, #8
   20e54:	4639      	mov	r1, r7
   20e56:	4630      	mov	r0, r6
   20e58:	46ac      	mov	ip, r5
}
   20e5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   20e5e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   20e60:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   20e64:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   20e68:	4620      	mov	r0, r4
   20e6a:	f002 fe78 	bl	23b5e <strlen>
   20e6e:	3001      	adds	r0, #1
   20e70:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   20e72:	f10a 0a01 	add.w	sl, sl, #1
   20e76:	e7e7      	b.n	20e48 <cbpprintf_external+0x2a>
}
   20e78:	f06f 0015 	mvn.w	r0, #21
   20e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020e80 <is_ptr>:
{
   20e80:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   20e82:	2500      	movs	r5, #0
{
   20e84:	4602      	mov	r2, r0
	bool mod = false;
   20e86:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   20e88:	4614      	mov	r4, r2
   20e8a:	f814 3b01 	ldrb.w	r3, [r4], #1
   20e8e:	b90b      	cbnz	r3, 20e94 <is_ptr+0x14>
					return false;
   20e90:	4618      	mov	r0, r3
   20e92:	e009      	b.n	20ea8 <is_ptr+0x28>
		if (mod) {
   20e94:	b198      	cbz	r0, 20ebe <is_ptr+0x3e>
			if (cnt == n) {
   20e96:	428d      	cmp	r5, r1
   20e98:	d107      	bne.n	20eaa <is_ptr+0x2a>
				if (c == 'p') {
   20e9a:	2b70      	cmp	r3, #112	; 0x70
   20e9c:	d004      	beq.n	20ea8 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   20e9e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   20ea2:	2a3a      	cmp	r2, #58	; 0x3a
   20ea4:	d80b      	bhi.n	20ebe <is_ptr+0x3e>
					return false;
   20ea6:	2000      	movs	r0, #0
}
   20ea8:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   20eaa:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   20eae:	2e3a      	cmp	r6, #58	; 0x3a
   20eb0:	d805      	bhi.n	20ebe <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   20eb2:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   20eb4:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   20eb6:	1c94      	adds	r4, r2, #2
   20eb8:	2b00      	cmp	r3, #0
   20eba:	d0e9      	beq.n	20e90 <is_ptr+0x10>
   20ebc:	2000      	movs	r0, #0
		if (c == '%') {
   20ebe:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   20ec0:	bf08      	it	eq
   20ec2:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   20ec6:	4622      	mov	r2, r4
   20ec8:	e7de      	b.n	20e88 <is_ptr+0x8>

00020eca <arch_printk_char_out>:
}
   20eca:	2000      	movs	r0, #0
   20ecc:	4770      	bx	lr

00020ece <str_out>:
{
   20ece:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   20ed0:	688a      	ldr	r2, [r1, #8]
   20ed2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   20ed4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   20ed6:	b114      	cbz	r4, 20ede <str_out+0x10>
   20ed8:	684b      	ldr	r3, [r1, #4]
   20eda:	4293      	cmp	r3, r2
   20edc:	dc01      	bgt.n	20ee2 <str_out+0x14>
		ctx->count++;
   20ede:	608d      	str	r5, [r1, #8]
}
   20ee0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   20ee2:	3b01      	subs	r3, #1
   20ee4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   20ee6:	bf08      	it	eq
   20ee8:	2200      	moveq	r2, #0
   20eea:	608d      	str	r5, [r1, #8]
   20eec:	bf0c      	ite	eq
   20eee:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   20ef0:	54a0      	strbne	r0, [r4, r2]
   20ef2:	e7f5      	b.n	20ee0 <str_out+0x12>

00020ef4 <vprintk>:
		z_log_vprintk(fmt, ap);
   20ef4:	f000 bff5 	b.w	21ee2 <z_log_vprintk>

00020ef8 <printk>:
{
   20ef8:	b40f      	push	{r0, r1, r2, r3}
   20efa:	b507      	push	{r0, r1, r2, lr}
   20efc:	a904      	add	r1, sp, #16
   20efe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   20f02:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   20f04:	f000 ffed 	bl	21ee2 <z_log_vprintk>
}
   20f08:	b003      	add	sp, #12
   20f0a:	f85d eb04 	ldr.w	lr, [sp], #4
   20f0e:	b004      	add	sp, #16
   20f10:	4770      	bx	lr

00020f12 <snprintk>:
{
   20f12:	b40c      	push	{r2, r3}
   20f14:	b507      	push	{r0, r1, r2, lr}
   20f16:	ab04      	add	r3, sp, #16
   20f18:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   20f1c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   20f1e:	f7e1 fdcd 	bl	2abc <vsnprintk>
}
   20f22:	b003      	add	sp, #12
   20f24:	f85d eb04 	ldr.w	lr, [sp], #4
   20f28:	b002      	add	sp, #8
   20f2a:	4770      	bx	lr

00020f2c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   20f2c:	4604      	mov	r4, r0
   20f2e:	b508      	push	{r3, lr}
   20f30:	4608      	mov	r0, r1
   20f32:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   20f34:	461a      	mov	r2, r3
   20f36:	47a0      	blx	r4
	return z_impl_z_current_get();
   20f38:	f7ff fc1c 	bl	20774 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   20f3c:	f7e6 feb0 	bl	7ca0 <z_impl_k_thread_abort>

00020f40 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   20f40:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   20f44:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   20f46:	0840      	lsrs	r0, r0, #1
   20f48:	4770      	bx	lr

00020f4a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   20f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f4c:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   20f4e:	f7ff fff7 	bl	20f40 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   20f52:	fab0 f080 	clz	r0, r0
   20f56:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   20f5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   20f5e:	00ca      	lsls	r2, r1, #3
   20f60:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   20f64:	1d17      	adds	r7, r2, #4
{
   20f66:	460c      	mov	r4, r1
   20f68:	3206      	adds	r2, #6
   20f6a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   20f6c:	b956      	cbnz	r6, 20f84 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   20f6e:	2101      	movs	r1, #1
   20f70:	fa01 f000 	lsl.w	r0, r1, r0
   20f74:	68d9      	ldr	r1, [r3, #12]
   20f76:	4301      	orrs	r1, r0
   20f78:	60d9      	str	r1, [r3, #12]
		b->next = c;
   20f7a:	f8cc 4010 	str.w	r4, [ip, #16]
   20f7e:	53dd      	strh	r5, [r3, r7]
   20f80:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   20f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   20f84:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   20f86:	3104      	adds	r1, #4
   20f88:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   20f8a:	53d8      	strh	r0, [r3, r7]
   20f8c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   20f90:	529e      	strh	r6, [r3, r2]
   20f92:	80c5      	strh	r5, [r0, #6]
   20f94:	525d      	strh	r5, [r3, r1]
   20f96:	e7f4      	b.n	20f82 <free_list_add+0x38>

00020f98 <free_list_remove_bidx>:
{
   20f98:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   20f9a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   20f9e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   20fa0:	4299      	cmp	r1, r3
   20fa2:	f102 0104 	add.w	r1, r2, #4
   20fa6:	d10a      	bne.n	20fbe <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   20fa8:	2301      	movs	r3, #1
   20faa:	fa03 f202 	lsl.w	r2, r3, r2
   20fae:	68c3      	ldr	r3, [r0, #12]
   20fb0:	ea23 0302 	bic.w	r3, r3, r2
   20fb4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   20fb6:	2300      	movs	r3, #0
   20fb8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   20fbc:	bd10      	pop	{r4, pc}
   20fbe:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   20fc0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   20fc4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   20fc8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   20fcc:	80cb      	strh	r3, [r1, #6]
   20fce:	8082      	strh	r2, [r0, #4]
}
   20fd0:	e7f4      	b.n	20fbc <free_list_remove_bidx+0x24>

00020fd2 <free_list_remove>:
{
   20fd2:	b508      	push	{r3, lr}
   20fd4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   20fd6:	f7ff ffb3 	bl	20f40 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   20fda:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   20fde:	f1c2 021f 	rsb	r2, r2, #31
   20fe2:	4618      	mov	r0, r3
}
   20fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   20fe8:	f7ff bfd6 	b.w	20f98 <free_list_remove_bidx>

00020fec <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   20fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20ff0:	fab1 f581 	clz	r5, r1
   20ff4:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   20ff8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   20ffc:	4603      	mov	r3, r0
	if (b->next) {
   20ffe:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   21002:	460e      	mov	r6, r1
	if (b->next) {
   21004:	b1c2      	cbz	r2, 21038 <alloc_chunk+0x4c>
   21006:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   21008:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2100c:	4618      	mov	r0, r3
   2100e:	4621      	mov	r1, r4
   21010:	f7ff ff96 	bl	20f40 <chunk_size>
   21014:	42b0      	cmp	r0, r6
   21016:	d306      	bcc.n	21026 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   21018:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2101a:	4618      	mov	r0, r3
   2101c:	f7ff ffbc 	bl	20f98 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   21020:	4620      	mov	r0, r4
   21022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   21026:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2102a:	3f01      	subs	r7, #1
   2102c:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   2102e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   21032:	d001      	beq.n	21038 <alloc_chunk+0x4c>
   21034:	4282      	cmp	r2, r0
   21036:	d1e7      	bne.n	21008 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   21038:	f1c5 0220 	rsb	r2, r5, #32
   2103c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21040:	4094      	lsls	r4, r2
   21042:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   21044:	4014      	ands	r4, r2
   21046:	d0eb      	beq.n	21020 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   21048:	fa94 f2a4 	rbit	r2, r4
   2104c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21050:	1d11      	adds	r1, r2, #4
   21052:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   21056:	4621      	mov	r1, r4
   21058:	e7df      	b.n	2101a <alloc_chunk+0x2e>

0002105a <merge_chunks>:
{
   2105a:	b538      	push	{r3, r4, r5, lr}
   2105c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2105e:	f7ff ff6f 	bl	20f40 <chunk_size>
{
   21062:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21064:	4604      	mov	r4, r0
   21066:	4611      	mov	r1, r2
   21068:	4618      	mov	r0, r3
   2106a:	f7ff ff69 	bl	20f40 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2106e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   21072:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21074:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   21076:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   21078:	4618      	mov	r0, r3
   2107a:	f7ff ff61 	bl	20f40 <chunk_size>
	void *cmem = &buf[c];
   2107e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   21080:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   21084:	bd38      	pop	{r3, r4, r5, pc}

00021086 <split_chunks>:
{
   21086:	b538      	push	{r3, r4, r5, lr}
   21088:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2108a:	f7ff ff59 	bl	20f40 <chunk_size>
{
   2108e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   21090:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   21092:	1a51      	subs	r1, r2, r1
   21094:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   21098:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2109a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2109c:	8060      	strh	r0, [r4, #2]
   2109e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   210a2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   210a4:	8044      	strh	r4, [r0, #2]
   210a6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   210aa:	4618      	mov	r0, r3
   210ac:	4611      	mov	r1, r2
   210ae:	f7ff ff47 	bl	20f40 <chunk_size>
	void *cmem = &buf[c];
   210b2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   210b4:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   210b8:	bd38      	pop	{r3, r4, r5, pc}

000210ba <free_chunk>:
{
   210ba:	b538      	push	{r3, r4, r5, lr}
   210bc:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   210be:	f7ff ff3f 	bl	20f40 <chunk_size>
   210c2:	460c      	mov	r4, r1
   210c4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   210c6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   210ca:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   210cc:	07da      	lsls	r2, r3, #31
   210ce:	d40a      	bmi.n	210e6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   210d0:	4628      	mov	r0, r5
   210d2:	f7ff ff7e 	bl	20fd2 <free_list_remove>
	return c + chunk_size(h, c);
   210d6:	4621      	mov	r1, r4
   210d8:	4628      	mov	r0, r5
   210da:	f7ff ff31 	bl	20f40 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   210de:	1822      	adds	r2, r4, r0
   210e0:	4628      	mov	r0, r5
   210e2:	f7ff ffba 	bl	2105a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   210e6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   210ea:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   210ec:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   210f0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   210f2:	07db      	lsls	r3, r3, #31
   210f4:	d40c      	bmi.n	21110 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   210f6:	4628      	mov	r0, r5
   210f8:	f7ff ff6b 	bl	20fd2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   210fc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   21100:	4622      	mov	r2, r4
   21102:	1a61      	subs	r1, r4, r1
   21104:	4628      	mov	r0, r5
   21106:	f7ff ffa8 	bl	2105a <merge_chunks>
   2110a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2110e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   21110:	4621      	mov	r1, r4
   21112:	4628      	mov	r0, r5
}
   21114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   21118:	f7ff bf17 	b.w	20f4a <free_list_add>

0002111c <sys_heap_free>:
	if (mem == NULL) {
   2111c:	b161      	cbz	r1, 21138 <sys_heap_free+0x1c>
   2111e:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21120:	3904      	subs	r1, #4
   21122:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   21124:	f021 0307 	bic.w	r3, r1, #7
   21128:	4403      	add	r3, r0
	free_chunk(h, c);
   2112a:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2112c:	885a      	ldrh	r2, [r3, #2]
   2112e:	f022 0201 	bic.w	r2, r2, #1
   21132:	805a      	strh	r2, [r3, #2]
   21134:	f7ff bfc1 	b.w	210ba <free_chunk>
}
   21138:	4770      	bx	lr

0002113a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2113a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2113c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2113e:	b909      	cbnz	r1, 21144 <sys_heap_alloc+0xa>
		return NULL;
   21140:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   21142:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   21144:	68ab      	ldr	r3, [r5, #8]
   21146:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2114a:	d9f9      	bls.n	21140 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2114c:	310b      	adds	r1, #11
   2114e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   21150:	4621      	mov	r1, r4
   21152:	4628      	mov	r0, r5
   21154:	f7ff ff4a 	bl	20fec <alloc_chunk>
	if (c == 0U) {
   21158:	4606      	mov	r6, r0
   2115a:	2800      	cmp	r0, #0
   2115c:	d0f0      	beq.n	21140 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2115e:	4601      	mov	r1, r0
   21160:	4628      	mov	r0, r5
   21162:	f7ff feed 	bl	20f40 <chunk_size>
   21166:	42a0      	cmp	r0, r4
   21168:	d907      	bls.n	2117a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2116a:	1932      	adds	r2, r6, r4
   2116c:	4628      	mov	r0, r5
   2116e:	f7ff ff8a 	bl	21086 <split_chunks>
		free_list_add(h, c + chunk_sz);
   21172:	4611      	mov	r1, r2
   21174:	4628      	mov	r0, r5
   21176:	f7ff fee8 	bl	20f4a <free_list_add>
	void *cmem = &buf[c];
   2117a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2117e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21180:	8853      	ldrh	r3, [r2, #2]
   21182:	f043 0301 	orr.w	r3, r3, #1
   21186:	8053      	strh	r3, [r2, #2]
   21188:	3004      	adds	r0, #4
	return mem;
   2118a:	e7da      	b.n	21142 <sys_heap_alloc+0x8>

0002118c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2118c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21190:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   21194:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   21198:	6806      	ldr	r6, [r0, #0]
{
   2119a:	460f      	mov	r7, r1
   2119c:	4614      	mov	r4, r2
	if (align != rew) {
   2119e:	d00c      	beq.n	211ba <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   211a0:	424b      	negs	r3, r1
   211a2:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   211a4:	2b04      	cmp	r3, #4
   211a6:	461a      	mov	r2, r3
   211a8:	464f      	mov	r7, r9
   211aa:	bf28      	it	cs
   211ac:	2204      	movcs	r2, #4
	rew = align & -align;
   211ae:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   211b0:	b964      	cbnz	r4, 211cc <sys_heap_aligned_alloc+0x40>
		return NULL;
   211b2:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   211b4:	4628      	mov	r0, r5
   211b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   211ba:	2904      	cmp	r1, #4
   211bc:	d804      	bhi.n	211c8 <sys_heap_aligned_alloc+0x3c>
}
   211be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   211c2:	4611      	mov	r1, r2
   211c4:	f7ff bfb9 	b.w	2113a <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   211c8:	2204      	movs	r2, #4
   211ca:	e7f1      	b.n	211b0 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   211cc:	68b3      	ldr	r3, [r6, #8]
   211ce:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   211d2:	d9ee      	bls.n	211b2 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   211d4:	f104 010b 	add.w	r1, r4, #11
   211d8:	4439      	add	r1, r7
   211da:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   211dc:	08c9      	lsrs	r1, r1, #3
   211de:	4630      	mov	r0, r6
   211e0:	f7ff ff04 	bl	20fec <alloc_chunk>
	if (c0 == 0) {
   211e4:	4680      	mov	r8, r0
   211e6:	2800      	cmp	r0, #0
   211e8:	d0e3      	beq.n	211b2 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   211ea:	f109 0504 	add.w	r5, r9, #4
   211ee:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   211f2:	1e7b      	subs	r3, r7, #1
   211f4:	4435      	add	r5, r6
   211f6:	441d      	add	r5, r3
   211f8:	427f      	negs	r7, r7
   211fa:	403d      	ands	r5, r7
   211fc:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21200:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21202:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21204:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21206:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21208:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2120c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2120e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21212:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   21216:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2121a:	d208      	bcs.n	2122e <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   2121c:	4601      	mov	r1, r0
   2121e:	463a      	mov	r2, r7
   21220:	4630      	mov	r0, r6
   21222:	f7ff ff30 	bl	21086 <split_chunks>
		free_list_add(h, c0);
   21226:	4641      	mov	r1, r8
   21228:	4630      	mov	r0, r6
   2122a:	f7ff fe8e 	bl	20f4a <free_list_add>
	return c + chunk_size(h, c);
   2122e:	4639      	mov	r1, r7
   21230:	4630      	mov	r0, r6
   21232:	f7ff fe85 	bl	20f40 <chunk_size>
   21236:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   21238:	4284      	cmp	r4, r0
   2123a:	d207      	bcs.n	2124c <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   2123c:	4630      	mov	r0, r6
   2123e:	4622      	mov	r2, r4
   21240:	f7ff ff21 	bl	21086 <split_chunks>
		free_list_add(h, c_end);
   21244:	4621      	mov	r1, r4
   21246:	4630      	mov	r0, r6
   21248:	f7ff fe7f 	bl	20f4a <free_list_add>
	void *cmem = &buf[c];
   2124c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21250:	8873      	ldrh	r3, [r6, #2]
   21252:	f043 0301 	orr.w	r3, r3, #1
   21256:	8073      	strh	r3, [r6, #2]
   21258:	e7ac      	b.n	211b4 <sys_heap_aligned_alloc+0x28>

0002125a <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2125a:	3a04      	subs	r2, #4
{
   2125c:	b4f0      	push	{r4, r5, r6, r7}
   2125e:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21260:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21262:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21264:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21268:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2126c:	1a0e      	subs	r6, r1, r0
   2126e:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   21270:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   21272:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   21276:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   21278:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   2127c:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   2127e:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   21280:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   21282:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21286:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21288:	f1c2 0220 	rsb	r2, r2, #32
   2128c:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2128e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   21292:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   21296:	4294      	cmp	r4, r2
   21298:	d1fb      	bne.n	21292 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2129a:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2129c:	f042 0201 	orr.w	r2, r2, #1
   212a0:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   212a2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   212a6:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   212a8:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   212aa:	8007      	strh	r7, [r0, #0]
   212ac:	8065      	strh	r5, [r4, #2]
   212ae:	1984      	adds	r4, r0, r6
   212b0:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   212b4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   212b8:	8067      	strh	r7, [r4, #2]
   212ba:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   212bc:	885a      	ldrh	r2, [r3, #2]
   212be:	f042 0201 	orr.w	r2, r2, #1
   212c2:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   212c4:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   212c6:	f7ff be40 	b.w	20f4a <free_list_add>

000212ca <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   212ca:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   212cc:	f013 0307 	ands.w	r3, r3, #7
   212d0:	d105      	bne.n	212de <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   212d2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   212d4:	2b00      	cmp	r3, #0
   212d6:	bf0c      	ite	eq
   212d8:	2000      	moveq	r0, #0
   212da:	2003      	movne	r0, #3
   212dc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   212de:	2b02      	cmp	r3, #2
   212e0:	d105      	bne.n	212ee <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   212e2:	8b40      	ldrh	r0, [r0, #26]
   212e4:	fab0 f080 	clz	r0, r0
   212e8:	0940      	lsrs	r0, r0, #5
   212ea:	0080      	lsls	r0, r0, #2
   212ec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   212ee:	2b01      	cmp	r3, #1
   212f0:	d105      	bne.n	212fe <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   212f2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   212f4:	2b00      	cmp	r3, #0
   212f6:	bf0c      	ite	eq
   212f8:	2000      	moveq	r0, #0
   212fa:	2005      	movne	r0, #5
   212fc:	4770      	bx	lr
	int evt = EVT_NOP;
   212fe:	2000      	movs	r0, #0
}
   21300:	4770      	bx	lr

00021302 <validate_args>:
{
   21302:	b510      	push	{r4, lr}
   21304:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21306:	b100      	cbz	r0, 2130a <validate_args+0x8>
   21308:	b911      	cbnz	r1, 21310 <validate_args+0xe>
		return -EINVAL;
   2130a:	f06f 0015 	mvn.w	r0, #21
}
   2130e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   21310:	1d08      	adds	r0, r1, #4
   21312:	f000 f8ba 	bl	2148a <sys_notify_validate>
	if ((rv == 0)
   21316:	2800      	cmp	r0, #0
   21318:	d1f9      	bne.n	2130e <validate_args+0xc>
	    && ((cli->notify.flags
   2131a:	68a3      	ldr	r3, [r4, #8]
   2131c:	2b03      	cmp	r3, #3
   2131e:	d9f6      	bls.n	2130e <validate_args+0xc>
   21320:	e7f3      	b.n	2130a <validate_args+0x8>

00021322 <notify_one>:
{
   21322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21326:	460d      	mov	r5, r1
   21328:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2132a:	4619      	mov	r1, r3
   2132c:	1d28      	adds	r0, r5, #4
{
   2132e:	4690      	mov	r8, r2
   21330:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21332:	f000 f8be 	bl	214b2 <sys_notify_finalize>
	if (cb) {
   21336:	4604      	mov	r4, r0
   21338:	b138      	cbz	r0, 2134a <notify_one+0x28>
		cb(mgr, cli, state, res);
   2133a:	4633      	mov	r3, r6
   2133c:	4642      	mov	r2, r8
   2133e:	4629      	mov	r1, r5
   21340:	4638      	mov	r0, r7
   21342:	46a4      	mov	ip, r4
}
   21344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   21348:	4760      	bx	ip
}
   2134a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002134e <transition_complete>:
{
   2134e:	b410      	push	{r4}
	__asm__ volatile(
   21350:	f04f 0420 	mov.w	r4, #32
   21354:	f3ef 8211 	mrs	r2, BASEPRI
   21358:	f384 8812 	msr	BASEPRI_MAX, r4
   2135c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21360:	6141      	str	r1, [r0, #20]
}
   21362:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   21364:	2101      	movs	r1, #1
   21366:	f7e1 bbbf 	b.w	2ae8 <process_event>

0002136a <onoff_manager_init>:
{
   2136a:	b538      	push	{r3, r4, r5, lr}
   2136c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2136e:	4605      	mov	r5, r0
   21370:	b158      	cbz	r0, 2138a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21372:	b151      	cbz	r1, 2138a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21374:	680b      	ldr	r3, [r1, #0]
   21376:	b143      	cbz	r3, 2138a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   21378:	684b      	ldr	r3, [r1, #4]
   2137a:	b133      	cbz	r3, 2138a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2137c:	221c      	movs	r2, #28
   2137e:	2100      	movs	r1, #0
   21380:	f002 fc4f 	bl	23c22 <memset>
   21384:	612c      	str	r4, [r5, #16]
	return 0;
   21386:	2000      	movs	r0, #0
}
   21388:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2138a:	f06f 0015 	mvn.w	r0, #21
   2138e:	e7fb      	b.n	21388 <onoff_manager_init+0x1e>

00021390 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21390:	b570      	push	{r4, r5, r6, lr}
   21392:	4605      	mov	r5, r0
   21394:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21396:	f7ff ffb4 	bl	21302 <validate_args>

	if (rv < 0) {
   2139a:	1e04      	subs	r4, r0, #0
   2139c:	db15      	blt.n	213ca <onoff_request+0x3a>
   2139e:	f04f 0320 	mov.w	r3, #32
   213a2:	f3ef 8211 	mrs	r2, BASEPRI
   213a6:	f383 8812 	msr	BASEPRI_MAX, r3
   213aa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   213ae:	8b6b      	ldrh	r3, [r5, #26]
   213b0:	8b2c      	ldrh	r4, [r5, #24]
   213b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   213b6:	428b      	cmp	r3, r1
   213b8:	f004 0407 	and.w	r4, r4, #7
   213bc:	d107      	bne.n	213ce <onoff_request+0x3e>
	__asm__ volatile(
   213be:	f382 8811 	msr	BASEPRI, r2
   213c2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   213c6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   213ca:	4620      	mov	r0, r4
   213cc:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   213ce:	2c02      	cmp	r4, #2
   213d0:	d10c      	bne.n	213ec <onoff_request+0x5c>
		mgr->refs += 1U;
   213d2:	3301      	adds	r3, #1
   213d4:	836b      	strh	r3, [r5, #26]
   213d6:	f382 8811 	msr	BASEPRI, r2
   213da:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   213de:	2300      	movs	r3, #0
   213e0:	4622      	mov	r2, r4
   213e2:	4631      	mov	r1, r6
   213e4:	4628      	mov	r0, r5
   213e6:	f7ff ff9c 	bl	21322 <notify_one>
   213ea:	e7ee      	b.n	213ca <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   213ec:	2c06      	cmp	r4, #6
   213ee:	d814      	bhi.n	2141a <onoff_request+0x8a>
   213f0:	e8df f004 	tbb	[pc, r4]
   213f4:	13131304 	.word	0x13131304
   213f8:	1a04      	.short	0x1a04
   213fa:	04          	.byte	0x04
   213fb:	00          	.byte	0x00
	parent->next = child;
   213fc:	2300      	movs	r3, #0
   213fe:	6033      	str	r3, [r6, #0]
	return list->tail;
   21400:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   21402:	b93b      	cbnz	r3, 21414 <onoff_request+0x84>
	list->head = node;
   21404:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   21408:	b9ac      	cbnz	r4, 21436 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2140a:	2102      	movs	r1, #2
   2140c:	4628      	mov	r0, r5
   2140e:	f7e1 fb6b 	bl	2ae8 <process_event>
   21412:	e7da      	b.n	213ca <onoff_request+0x3a>
	parent->next = child;
   21414:	601e      	str	r6, [r3, #0]
	list->tail = node;
   21416:	606e      	str	r6, [r5, #4]
}
   21418:	e7f6      	b.n	21408 <onoff_request+0x78>
   2141a:	f382 8811 	msr	BASEPRI, r2
   2141e:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   21422:	f06f 0404 	mvn.w	r4, #4
   21426:	e7d0      	b.n	213ca <onoff_request+0x3a>
   21428:	f382 8811 	msr	BASEPRI, r2
   2142c:	f3bf 8f6f 	isb	sy
   21430:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21434:	e7c9      	b.n	213ca <onoff_request+0x3a>
   21436:	f382 8811 	msr	BASEPRI, r2
   2143a:	f3bf 8f6f 	isb	sy
		if (notify) {
   2143e:	e7c4      	b.n	213ca <onoff_request+0x3a>

00021440 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   21440:	b510      	push	{r4, lr}
	__asm__ volatile(
   21442:	f04f 0320 	mov.w	r3, #32
   21446:	f3ef 8211 	mrs	r2, BASEPRI
   2144a:	f383 8812 	msr	BASEPRI_MAX, r3
   2144e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21452:	8b04      	ldrh	r4, [r0, #24]
   21454:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   21458:	2c02      	cmp	r4, #2
   2145a:	d00a      	beq.n	21472 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2145c:	2c01      	cmp	r4, #1
   2145e:	bf0c      	ite	eq
   21460:	f06f 0004 	mvneq.w	r0, #4
   21464:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   21468:	f382 8811 	msr	BASEPRI, r2
   2146c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   21470:	e008      	b.n	21484 <onoff_release+0x44>
	mgr->refs -= 1U;
   21472:	8b43      	ldrh	r3, [r0, #26]
   21474:	3b01      	subs	r3, #1
   21476:	b29b      	uxth	r3, r3
   21478:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2147a:	b923      	cbnz	r3, 21486 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2147c:	4621      	mov	r1, r4
   2147e:	f7e1 fb33 	bl	2ae8 <process_event>
	int rv = state;
   21482:	4620      	mov	r0, r4
}
   21484:	bd10      	pop	{r4, pc}
	int rv = state;
   21486:	4620      	mov	r0, r4
   21488:	e7ee      	b.n	21468 <onoff_release+0x28>

0002148a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2148a:	4603      	mov	r3, r0
   2148c:	b140      	cbz	r0, 214a0 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2148e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21490:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   21494:	2a02      	cmp	r2, #2
   21496:	d006      	beq.n	214a6 <sys_notify_validate+0x1c>
   21498:	2a03      	cmp	r2, #3
   2149a:	d004      	beq.n	214a6 <sys_notify_validate+0x1c>
   2149c:	2a01      	cmp	r2, #1
   2149e:	d005      	beq.n	214ac <sys_notify_validate+0x22>
   214a0:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   214a4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   214a6:	681a      	ldr	r2, [r3, #0]
   214a8:	2a00      	cmp	r2, #0
   214aa:	d0f9      	beq.n	214a0 <sys_notify_validate+0x16>
		notify->result = 0;
   214ac:	2000      	movs	r0, #0
   214ae:	6098      	str	r0, [r3, #8]
   214b0:	4770      	bx	lr

000214b2 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   214b2:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   214b4:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   214b6:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   214b8:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   214bc:	2a02      	cmp	r2, #2
{
   214be:	4603      	mov	r3, r0
	switch (method) {
   214c0:	f04f 0400 	mov.w	r4, #0
   214c4:	d007      	beq.n	214d6 <sys_notify_finalize+0x24>
   214c6:	2a03      	cmp	r2, #3
   214c8:	d002      	beq.n	214d0 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   214ca:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   214cc:	2000      	movs	r0, #0
   214ce:	e001      	b.n	214d4 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   214d0:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   214d2:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   214d4:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   214d6:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   214d8:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   214da:	2800      	cmp	r0, #0
   214dc:	d0f6      	beq.n	214cc <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   214de:	f7ff fc43 	bl	20d68 <z_impl_k_poll_signal_raise>
   214e2:	e7f3      	b.n	214cc <sys_notify_finalize+0x1a>

000214e4 <_ldiv5>:
	uint32_t v_lo = *v;
   214e4:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   214e8:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   214ea:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   214ee:	fba2 2403 	umull	r2, r4, r2, r3
   214f2:	18d5      	adds	r5, r2, r3
   214f4:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   214f8:	fba1 1303 	umull	r1, r3, r1, r3
   214fc:	1852      	adds	r2, r2, r1
   214fe:	eb44 0403 	adc.w	r4, r4, r3
   21502:	1952      	adds	r2, r2, r5
   21504:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   21508:	1889      	adds	r1, r1, r2
   2150a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   2150e:	e9c0 1300 	strd	r1, r3, [r0]
}
   21512:	bd30      	pop	{r4, r5, pc}

00021514 <_get_digit>:
{
   21514:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   21516:	680a      	ldr	r2, [r1, #0]
   21518:	2a00      	cmp	r2, #0
{
   2151a:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   2151c:	dd0f      	ble.n	2153e <_get_digit+0x2a>
		--*digit_count;
   2151e:	3a01      	subs	r2, #1
   21520:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   21522:	681a      	ldr	r2, [r3, #0]
   21524:	6844      	ldr	r4, [r0, #4]
   21526:	200a      	movs	r0, #10
   21528:	fba2 1200 	umull	r1, r2, r2, r0
   2152c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   21530:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   21532:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   21536:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   2153a:	3030      	adds	r0, #48	; 0x30
}
   2153c:	bd10      	pop	{r4, pc}
		rval = '0';
   2153e:	2030      	movs	r0, #48	; 0x30
   21540:	e7fc      	b.n	2153c <_get_digit+0x28>

00021542 <encode_uint>:
{
   21542:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21546:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   21548:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2154a:	2b6f      	cmp	r3, #111	; 0x6f
{
   2154c:	4680      	mov	r8, r0
   2154e:	460f      	mov	r7, r1
   21550:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   21552:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   21556:	d029      	beq.n	215ac <encode_uint+0x6a>
   21558:	d824      	bhi.n	215a4 <encode_uint+0x62>
		return 10;
   2155a:	2b58      	cmp	r3, #88	; 0x58
   2155c:	bf0c      	ite	eq
   2155e:	2610      	moveq	r6, #16
   21560:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   21562:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   21566:	4632      	mov	r2, r6
   21568:	2300      	movs	r3, #0
   2156a:	4640      	mov	r0, r8
   2156c:	4639      	mov	r1, r7
   2156e:	f7df f9d5 	bl	91c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21572:	2a09      	cmp	r2, #9
   21574:	b2d4      	uxtb	r4, r2
   21576:	d81e      	bhi.n	215b6 <encode_uint+0x74>
   21578:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2157a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2157c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2157e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21582:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   21586:	d301      	bcc.n	2158c <encode_uint+0x4a>
   21588:	45d1      	cmp	r9, sl
   2158a:	d811      	bhi.n	215b0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2158c:	782b      	ldrb	r3, [r5, #0]
   2158e:	069b      	lsls	r3, r3, #26
   21590:	d505      	bpl.n	2159e <encode_uint+0x5c>
		if (radix == 8) {
   21592:	2e08      	cmp	r6, #8
   21594:	d115      	bne.n	215c2 <encode_uint+0x80>
			conv->altform_0 = true;
   21596:	78ab      	ldrb	r3, [r5, #2]
   21598:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2159c:	70ab      	strb	r3, [r5, #2]
}
   2159e:	4648      	mov	r0, r9
   215a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   215a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   215a8:	2b70      	cmp	r3, #112	; 0x70
   215aa:	e7d7      	b.n	2155c <encode_uint+0x1a>
	switch (specifier) {
   215ac:	2608      	movs	r6, #8
   215ae:	e7d8      	b.n	21562 <encode_uint+0x20>
		value /= radix;
   215b0:	4680      	mov	r8, r0
   215b2:	460f      	mov	r7, r1
   215b4:	e7d7      	b.n	21566 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   215b6:	f1bb 0f19 	cmp.w	fp, #25
   215ba:	bf94      	ite	ls
   215bc:	3437      	addls	r4, #55	; 0x37
   215be:	3457      	addhi	r4, #87	; 0x57
   215c0:	e7db      	b.n	2157a <encode_uint+0x38>
		} else if (radix == 16) {
   215c2:	2e10      	cmp	r6, #16
   215c4:	d1eb      	bne.n	2159e <encode_uint+0x5c>
			conv->altform_0c = true;
   215c6:	78ab      	ldrb	r3, [r5, #2]
   215c8:	f043 0310 	orr.w	r3, r3, #16
   215cc:	e7e6      	b.n	2159c <encode_uint+0x5a>

000215ce <outs>:
{
   215ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215d2:	4607      	mov	r7, r0
   215d4:	4688      	mov	r8, r1
   215d6:	4615      	mov	r5, r2
   215d8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   215da:	4614      	mov	r4, r2
   215dc:	42b4      	cmp	r4, r6
   215de:	d305      	bcc.n	215ec <outs+0x1e>
   215e0:	b10e      	cbz	r6, 215e6 <outs+0x18>
	return (int)count;
   215e2:	1b60      	subs	r0, r4, r5
   215e4:	e008      	b.n	215f8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   215e6:	7823      	ldrb	r3, [r4, #0]
   215e8:	2b00      	cmp	r3, #0
   215ea:	d0fa      	beq.n	215e2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   215ec:	f814 0b01 	ldrb.w	r0, [r4], #1
   215f0:	4641      	mov	r1, r8
   215f2:	47b8      	blx	r7
		if (rc < 0) {
   215f4:	2800      	cmp	r0, #0
   215f6:	daf1      	bge.n	215dc <outs+0xe>
}
   215f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000215fc <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   215fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
   215fe:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
   21600:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
   21602:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
   21604:	1baf      	subs	r7, r5, r6
{
   21606:	4604      	mov	r4, r0
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   21608:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
   2160a:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
   2160c:	bf98      	it	ls
   2160e:	1aff      	subls	r7, r7, r3
   21610:	eba5 0000 	sub.w	r0, r5, r0
{
   21614:	4694      	mov	ip, r2
		base += buf->size;
   21616:	bf98      	it	ls
   21618:	18f6      	addls	r6, r6, r3
   2161a:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
   2161c:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
   2161e:	6823      	ldr	r3, [r4, #0]
   21620:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
   21622:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   21624:	442b      	add	r3, r5
	size = MIN(size, free_space);
   21626:	bf28      	it	cs
   21628:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2162a:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
   2162c:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
   2162e:	4290      	cmp	r0, r2
   21630:	bf28      	it	cs
   21632:	4610      	movcs	r0, r2
	buf->put_head += size;
   21634:	4403      	add	r3, r0
   21636:	6063      	str	r3, [r4, #4]

	return size;
}
   21638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002163a <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   2163a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2163e:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   21640:	428a      	cmp	r2, r1
   21642:	d30c      	bcc.n	2165e <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
   21644:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
   21646:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
   21648:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
   2164a:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
   2164e:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   21650:	428a      	cmp	r2, r1
   21652:	d901      	bls.n	21658 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
   21654:	2000      	movs	r0, #0
   21656:	4770      	bx	lr
		buf->put_base += buf->size;
   21658:	4413      	add	r3, r2
   2165a:	60c3      	str	r3, [r0, #12]
   2165c:	e7fa      	b.n	21654 <ring_buf_put_finish+0x1a>
		return -EINVAL;
   2165e:	f06f 0015 	mvn.w	r0, #21
}
   21662:	4770      	bx	lr

00021664 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   21664:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21668:	4680      	mov	r8, r0
   2166a:	460e      	mov	r6, r1
   2166c:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2166e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   21670:	462a      	mov	r2, r5
   21672:	a901      	add	r1, sp, #4
   21674:	4640      	mov	r0, r8
   21676:	f7ff ffc1 	bl	215fc <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   2167a:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2167c:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   2167e:	4602      	mov	r2, r0
   21680:	9801      	ldr	r0, [sp, #4]
   21682:	f002 fac3 	bl	23c0c <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   21686:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   21688:	4427      	add	r7, r4
		data += partial_size;
   2168a:	4426      	add	r6, r4
	} while (size && partial_size);
   2168c:	d001      	beq.n	21692 <ring_buf_put+0x2e>
   2168e:	2c00      	cmp	r4, #0
   21690:	d1ee      	bne.n	21670 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   21692:	4639      	mov	r1, r7
   21694:	4640      	mov	r0, r8
   21696:	f7ff ffd0 	bl	2163a <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2169a:	4638      	mov	r0, r7
   2169c:	b002      	add	sp, #8
   2169e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000216a2 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   216a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   216a4:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   216a6:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   216a8:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
   216aa:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   216ac:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
   216ae:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   216b0:	42b8      	cmp	r0, r7
{
   216b2:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
   216b4:	bf98      	it	ls
   216b6:	1836      	addls	r6, r6, r0
   216b8:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
   216bc:	6823      	ldr	r3, [r4, #0]
   216be:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
   216c2:	bf98      	it	ls
   216c4:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
   216c6:	442b      	add	r3, r5
	size = MIN(size, available_size);
   216c8:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
   216ca:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
   216ce:	bf28      	it	cs
   216d0:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
   216d2:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
   216d4:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
   216d6:	4290      	cmp	r0, r2
   216d8:	bf28      	it	cs
   216da:	4610      	movcs	r0, r2
	buf->get_head += size;
   216dc:	4403      	add	r3, r0
   216de:	6123      	str	r3, [r4, #16]

	return size;
}
   216e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000216e2 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   216e2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   216e6:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   216e8:	428a      	cmp	r2, r1
   216ea:	d30c      	bcc.n	21706 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
   216ec:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
   216ee:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
   216f2:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
   216f6:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   216f8:	428a      	cmp	r2, r1
   216fa:	d901      	bls.n	21700 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
   216fc:	2000      	movs	r0, #0
   216fe:	4770      	bx	lr
		buf->get_base += buf->size;
   21700:	4413      	add	r3, r2
   21702:	6183      	str	r3, [r0, #24]
   21704:	e7fa      	b.n	216fc <ring_buf_get_finish+0x1a>
		return -EINVAL;
   21706:	f06f 0015 	mvn.w	r0, #21
}
   2170a:	4770      	bx	lr

0002170c <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   2170c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21710:	4680      	mov	r8, r0
   21712:	460d      	mov	r5, r1
   21714:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   21716:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   21718:	4632      	mov	r2, r6
   2171a:	a901      	add	r1, sp, #4
   2171c:	4640      	mov	r0, r8
   2171e:	f7ff ffc0 	bl	216a2 <ring_buf_get_claim>
   21722:	4604      	mov	r4, r0
		if (data) {
   21724:	b12d      	cbz	r5, 21732 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   21726:	4602      	mov	r2, r0
   21728:	9901      	ldr	r1, [sp, #4]
   2172a:	4628      	mov	r0, r5
   2172c:	f002 fa6e 	bl	23c0c <memcpy>
			data += partial_size;
   21730:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   21732:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   21734:	4427      	add	r7, r4
	} while (size && partial_size);
   21736:	d001      	beq.n	2173c <ring_buf_get+0x30>
   21738:	2c00      	cmp	r4, #0
   2173a:	d1ed      	bne.n	21718 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   2173c:	4639      	mov	r1, r7
   2173e:	4640      	mov	r0, r8
   21740:	f7ff ffcf 	bl	216e2 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   21744:	4638      	mov	r0, r7
   21746:	b002      	add	sp, #8
   21748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002174c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   2174c:	b40f      	push	{r0, r1, r2, r3}
   2174e:	b507      	push	{r0, r1, r2, lr}
   21750:	a904      	add	r1, sp, #16
   21752:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   21756:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   21758:	f7ff fbcc 	bl	20ef4 <vprintk>

	va_end(ap);
}
   2175c:	b003      	add	sp, #12
   2175e:	f85d eb04 	ldr.w	lr, [sp], #4
   21762:	b004      	add	sp, #16
   21764:	4770      	bx	lr

00021766 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   21766:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   21768:	6903      	ldr	r3, [r0, #16]
{
   2176a:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   2176c:	f013 0008 	ands.w	r0, r3, #8
   21770:	d109      	bne.n	21786 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   21772:	6813      	ldr	r3, [r2, #0]
   21774:	68d4      	ldr	r4, [r2, #12]
   21776:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   21778:	bf97      	itett	ls
   2177a:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2177c:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2177e:	1ad3      	subls	r3, r2, r3

	return true;
   21780:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   21782:	600b      	str	r3, [r1, #0]
}
   21784:	bd10      	pop	{r4, pc}
   21786:	2300      	movs	r3, #0
		return false;
   21788:	4618      	mov	r0, r3
   2178a:	e7fa      	b.n	21782 <free_space+0x1c>

0002178c <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   2178c:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   2178e:	a901      	add	r1, sp, #4
{
   21790:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   21792:	f7ff ffe8 	bl	21766 <free_space>
   21796:	b120      	cbz	r0, 217a2 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   21798:	9b01      	ldr	r3, [sp, #4]
   2179a:	68e2      	ldr	r2, [r4, #12]
   2179c:	3b01      	subs	r3, #1
   2179e:	4413      	add	r3, r2
   217a0:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   217a2:	6a20      	ldr	r0, [r4, #32]
   217a4:	9b01      	ldr	r3, [sp, #4]
   217a6:	1ac0      	subs	r0, r0, r3
}
   217a8:	3801      	subs	r0, #1
   217aa:	b002      	add	sp, #8
   217ac:	bd10      	pop	{r4, pc}

000217ae <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   217ae:	b510      	push	{r4, lr}
   217b0:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   217b2:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   217b4:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   217b6:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   217b8:	07d2      	lsls	r2, r2, #31
   217ba:	d502      	bpl.n	217c2 <idx_inc+0x14>
		return i & (buffer->size - 1);
   217bc:	3b01      	subs	r3, #1
   217be:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   217c0:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   217c2:	4298      	cmp	r0, r3
   217c4:	bf28      	it	cs
   217c6:	1ac0      	subcs	r0, r0, r3
   217c8:	e7fa      	b.n	217c0 <idx_inc+0x12>

000217ca <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   217ca:	b510      	push	{r4, lr}
   217cc:	4604      	mov	r4, r0
   217ce:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   217d0:	68c1      	ldr	r1, [r0, #12]
   217d2:	f7ff ffec 	bl	217ae <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   217d6:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   217d8:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   217da:	f023 0308 	bic.w	r3, r3, #8
   217de:	6123      	str	r3, [r4, #16]
}
   217e0:	bd10      	pop	{r4, pc}

000217e2 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   217e2:	b538      	push	{r3, r4, r5, lr}
   217e4:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   217e6:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   217e8:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   217ea:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   217ec:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   217f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   217f4:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   217f6:	6801      	ldr	r1, [r0, #0]
   217f8:	462a      	mov	r2, r5
   217fa:	f7ff ffd8 	bl	217ae <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   217fe:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   21800:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   21802:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   21804:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   21806:	bf02      	ittt	eq
   21808:	6923      	ldreq	r3, [r4, #16]
   2180a:	f043 0308 	orreq.w	r3, r3, #8
   2180e:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   21810:	462a      	mov	r2, r5
   21812:	4620      	mov	r0, r4
   21814:	f7ff ffcb 	bl	217ae <idx_inc>
   21818:	6060      	str	r0, [r4, #4]
}
   2181a:	bd38      	pop	{r3, r4, r5, pc}

0002181c <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   2181c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   21820:	68c7      	ldr	r7, [r0, #12]
   21822:	69c6      	ldr	r6, [r0, #28]
{
   21824:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   21826:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2182a:	f003 0303 	and.w	r3, r3, #3
   2182e:	2b02      	cmp	r3, #2
{
   21830:	4604      	mov	r4, r0
   21832:	4688      	mov	r8, r1
   21834:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   21836:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2183a:	f04f 0300 	mov.w	r3, #0
   2183e:	d009      	beq.n	21854 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   21840:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   21842:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   21846:	6923      	ldr	r3, [r4, #16]
   21848:	0799      	lsls	r1, r3, #30
   2184a:	d410      	bmi.n	2186e <drop_item_locked+0x52>
		return false;
   2184c:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   2184e:	b003      	add	sp, #12
   21850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   21854:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   21858:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   2185a:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   2185c:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   21860:	d0f1      	beq.n	21846 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   21862:	f7ff ffb2 	bl	217ca <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   21866:	68e3      	ldr	r3, [r4, #12]
   21868:	60a3      	str	r3, [r4, #8]
		return true;
   2186a:	2001      	movs	r0, #1
   2186c:	e7ef      	b.n	2184e <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   2186e:	69a3      	ldr	r3, [r4, #24]
   21870:	4650      	mov	r0, sl
   21872:	4798      	blx	r3
	return item->hdr.valid;
   21874:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   21878:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   2187a:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2187c:	d5e6      	bpl.n	2184c <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2187e:	f013 0302 	ands.w	r3, r3, #2
   21882:	d01d      	beq.n	218c0 <drop_item_locked+0xa4>
		if (free_wlen) {
   21884:	f1b8 0f00 	cmp.w	r8, #0
   21888:	d003      	beq.n	21892 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   2188a:	4641      	mov	r1, r8
   2188c:	4620      	mov	r0, r4
   2188e:	f7ff ffa8 	bl	217e2 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   21892:	6861      	ldr	r1, [r4, #4]
   21894:	462a      	mov	r2, r5
   21896:	4620      	mov	r0, r4
   21898:	f7ff ff89 	bl	217ae <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2189c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   218a0:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   218a2:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   218a4:	d104      	bne.n	218b0 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   218a6:	462a      	mov	r2, r5
   218a8:	4620      	mov	r0, r4
   218aa:	f7ff ff80 	bl	217ae <idx_inc>
   218ae:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   218b0:	68a3      	ldr	r3, [r4, #8]
   218b2:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   218b4:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   218b6:	6923      	ldr	r3, [r4, #16]
   218b8:	f043 0308 	orr.w	r3, r3, #8
   218bc:	6123      	str	r3, [r4, #16]
   218be:	e7d4      	b.n	2186a <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   218c0:	4601      	mov	r1, r0
   218c2:	4620      	mov	r0, r4
   218c4:	9301      	str	r3, [sp, #4]
   218c6:	f7ff ff80 	bl	217ca <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   218ca:	68e2      	ldr	r2, [r4, #12]
   218cc:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   218ce:	f1b8 0f00 	cmp.w	r8, #0
   218d2:	d004      	beq.n	218de <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   218d4:	6821      	ldr	r1, [r4, #0]
   218d6:	69e2      	ldr	r2, [r4, #28]
   218d8:	9b01      	ldr	r3, [sp, #4]
   218da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   218de:	eb05 0208 	add.w	r2, r5, r8
   218e2:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   218e6:	6821      	ldr	r1, [r4, #0]
   218e8:	4620      	mov	r0, r4
   218ea:	f7ff ff60 	bl	217ae <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   218ee:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   218f0:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   218f2:	f043 0308 	orr.w	r3, r3, #8
   218f6:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   218f8:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   218fc:	f36f 0300 	bfc	r3, #0, #1
   21900:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   21904:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   21908:	e7af      	b.n	2186a <drop_item_locked+0x4e>

0002190a <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   2190a:	b570      	push	{r4, r5, r6, lr}
   2190c:	4604      	mov	r4, r0
   2190e:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   21910:	f7ff ff4d 	bl	217ae <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   21914:	6823      	ldr	r3, [r4, #0]
   21916:	4283      	cmp	r3, r0
   21918:	d105      	bne.n	21926 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   2191a:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   2191c:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   2191e:	f023 0308 	bic.w	r3, r3, #8
   21922:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   21924:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   21926:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   21928:	00ab      	lsls	r3, r5, #2
   2192a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2192e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   21932:	4620      	mov	r0, r4
   21934:	6861      	ldr	r1, [r4, #4]
   21936:	462a      	mov	r2, r5
   21938:	f7ff ff39 	bl	217ae <idx_inc>
   2193c:	6060      	str	r0, [r4, #4]
   2193e:	e7f1      	b.n	21924 <post_drop_action+0x1a>

00021940 <max_utilization_update>:
{
   21940:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   21942:	6903      	ldr	r3, [r0, #16]
   21944:	075b      	lsls	r3, r3, #29
{
   21946:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   21948:	d506      	bpl.n	21958 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2194a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2194c:	f7ff ff1e 	bl	2178c <get_usage>
   21950:	4285      	cmp	r5, r0
   21952:	bf2c      	ite	cs
   21954:	6265      	strcs	r5, [r4, #36]	; 0x24
   21956:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   21958:	bd38      	pop	{r3, r4, r5, pc}

0002195a <mpsc_pbuf_init>:
{
   2195a:	b538      	push	{r3, r4, r5, lr}
   2195c:	460d      	mov	r5, r1
   2195e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   21960:	221c      	movs	r2, #28
   21962:	2100      	movs	r1, #0
   21964:	f002 f95d 	bl	23c22 <memset>
	buffer->get_wlen = cfg->get_wlen;
   21968:	68eb      	ldr	r3, [r5, #12]
   2196a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   2196c:	68ab      	ldr	r3, [r5, #8]
   2196e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   21970:	682b      	ldr	r3, [r5, #0]
   21972:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   21974:	686b      	ldr	r3, [r5, #4]
   21976:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   21978:	2200      	movs	r2, #0
   2197a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   2197c:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   2197e:	b123      	cbz	r3, 2198a <mpsc_pbuf_init+0x30>
   21980:	1e59      	subs	r1, r3, #1
   21982:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   21984:	bf08      	it	eq
   21986:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   2198a:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2198c:	2201      	movs	r2, #1
   2198e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   21992:	2100      	movs	r1, #0
}
   21994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21998:	f005 b972 	b.w	26c80 <z_impl_k_sem_init>

0002199c <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   2199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219a0:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   219a2:	2500      	movs	r5, #0
{
   219a4:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   219a6:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   219a8:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   219aa:	428b      	cmp	r3, r1
{
   219ac:	4604      	mov	r4, r0
   219ae:	460e      	mov	r6, r1
   219b0:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   219b2:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   219b4:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   219b6:	d33a      	bcc.n	21a2e <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   219b8:	f04f 0320 	mov.w	r3, #32
   219bc:	f3ef 8b11 	mrs	fp, BASEPRI
   219c0:	f383 8812 	msr	BASEPRI_MAX, r3
   219c4:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   219c8:	9a05      	ldr	r2, [sp, #20]
   219ca:	46d8      	mov	r8, fp
   219cc:	b12a      	cbz	r2, 219da <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   219ce:	4629      	mov	r1, r5
   219d0:	4620      	mov	r0, r4
   219d2:	f7ff ff9a 	bl	2190a <post_drop_action>
			tmp_wr_idx_shift = 0;
   219d6:	2300      	movs	r3, #0
   219d8:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   219da:	a904      	add	r1, sp, #16
   219dc:	4620      	mov	r0, r4
   219de:	f7ff fec2 	bl	21766 <free_space>

		if (free_wlen >= wlen) {
   219e2:	9904      	ldr	r1, [sp, #16]
   219e4:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   219e6:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   219e8:	d32a      	bcc.n	21a40 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   219ea:	6822      	ldr	r2, [r4, #0]
			item =
   219ec:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   219ee:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   219f2:	f021 0103 	bic.w	r1, r1, #3
   219f6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   219fa:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   219fe:	6821      	ldr	r1, [r4, #0]
   21a00:	4632      	mov	r2, r6
   21a02:	4620      	mov	r0, r4
   21a04:	f7ff fed3 	bl	217ae <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   21a08:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   21a0a:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   21a0c:	4298      	cmp	r0, r3
   21a0e:	d012      	beq.n	21a36 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   21a10:	2700      	movs	r7, #0
	__asm__ volatile(
   21a12:	f388 8811 	msr	BASEPRI, r8
   21a16:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   21a1a:	9903      	ldr	r1, [sp, #12]
   21a1c:	b129      	cbz	r1, 21a2a <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   21a1e:	6962      	ldr	r2, [r4, #20]
   21a20:	b10a      	cbz	r2, 21a26 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   21a22:	4620      	mov	r0, r4
   21a24:	4790      	blx	r2
			}
			dropped_item = NULL;
   21a26:	2300      	movs	r3, #0
   21a28:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   21a2a:	2f00      	cmp	r7, #0
   21a2c:	d1c4      	bne.n	219b8 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   21a2e:	4648      	mov	r0, r9
   21a30:	b007      	add	sp, #28
   21a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   21a36:	6923      	ldr	r3, [r4, #16]
   21a38:	f043 0308 	orr.w	r3, r3, #8
   21a3c:	6123      	str	r3, [r4, #16]
   21a3e:	e7e7      	b.n	21a10 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   21a40:	b118      	cbz	r0, 21a4a <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   21a42:	4620      	mov	r0, r4
   21a44:	f7ff fecd 	bl	217e2 <add_skip_item>
			cont = true;
   21a48:	e7e3      	b.n	21a12 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   21a4a:	9b00      	ldr	r3, [sp, #0]
   21a4c:	ea5a 0303 	orrs.w	r3, sl, r3
   21a50:	d01a      	beq.n	21a88 <mpsc_pbuf_alloc+0xec>
   21a52:	9101      	str	r1, [sp, #4]
   21a54:	f005 f82a 	bl	26aac <k_is_in_isr>
   21a58:	9901      	ldr	r1, [sp, #4]
   21a5a:	b9a8      	cbnz	r0, 21a88 <mpsc_pbuf_alloc+0xec>
   21a5c:	f38b 8811 	msr	BASEPRI, fp
   21a60:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   21a64:	9b00      	ldr	r3, [sp, #0]
   21a66:	4652      	mov	r2, sl
   21a68:	f104 0028 	add.w	r0, r4, #40	; 0x28
   21a6c:	f7fe f984 	bl	1fd78 <z_impl_k_sem_take>
	__asm__ volatile(
   21a70:	f04f 0320 	mov.w	r3, #32
   21a74:	f3ef 8811 	mrs	r8, BASEPRI
   21a78:	f383 8812 	msr	BASEPRI_MAX, r3
   21a7c:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   21a80:	fab0 f780 	clz	r7, r0
   21a84:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   21a86:	e7c4      	b.n	21a12 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   21a88:	ab05      	add	r3, sp, #20
   21a8a:	aa03      	add	r2, sp, #12
   21a8c:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   21a8e:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   21a90:	f7ff fec4 	bl	2181c <drop_item_locked>
   21a94:	4607      	mov	r7, r0
   21a96:	e7bc      	b.n	21a12 <mpsc_pbuf_alloc+0x76>

00021a98 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   21a98:	b570      	push	{r4, r5, r6, lr}
   21a9a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   21a9c:	6983      	ldr	r3, [r0, #24]
   21a9e:	4608      	mov	r0, r1
{
   21aa0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   21aa2:	4798      	blx	r3
   21aa4:	4602      	mov	r2, r0
   21aa6:	f04f 0320 	mov.w	r3, #32
   21aaa:	f3ef 8611 	mrs	r6, BASEPRI
   21aae:	f383 8812 	msr	BASEPRI_MAX, r3
   21ab2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   21ab6:	782b      	ldrb	r3, [r5, #0]
   21ab8:	f043 0301 	orr.w	r3, r3, #1
   21abc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   21abe:	6861      	ldr	r1, [r4, #4]
   21ac0:	4620      	mov	r0, r4
   21ac2:	f7ff fe74 	bl	217ae <idx_inc>
   21ac6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   21ac8:	4620      	mov	r0, r4
   21aca:	f7ff ff39 	bl	21940 <max_utilization_update>
	__asm__ volatile(
   21ace:	f386 8811 	msr	BASEPRI, r6
   21ad2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   21ad6:	bd70      	pop	{r4, r5, r6, pc}

00021ad8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   21ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ada:	4604      	mov	r4, r0
	__asm__ volatile(
   21adc:	f04f 0320 	mov.w	r3, #32
   21ae0:	f3ef 8611 	mrs	r6, BASEPRI
   21ae4:	f383 8812 	msr	BASEPRI_MAX, r3
   21ae8:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   21aec:	6923      	ldr	r3, [r4, #16]
   21aee:	f013 0f08 	tst.w	r3, #8
   21af2:	68a3      	ldr	r3, [r4, #8]
   21af4:	d102      	bne.n	21afc <mpsc_pbuf_claim+0x24>
   21af6:	6862      	ldr	r2, [r4, #4]
   21af8:	4293      	cmp	r3, r2
   21afa:	d900      	bls.n	21afe <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   21afc:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   21afe:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   21b00:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   21b02:	b92a      	cbnz	r2, 21b10 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   21b04:	f386 8811 	msr	BASEPRI, r6
   21b08:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   21b0c:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   21b0e:	e033      	b.n	21b78 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   21b10:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   21b14:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   21b18:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   21b1c:	d0f2      	beq.n	21b04 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   21b1e:	2802      	cmp	r0, #2
   21b20:	d103      	bne.n	21b2a <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   21b22:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   21b26:	08ad      	lsrs	r5, r5, #2
   21b28:	d105      	bne.n	21b36 <mpsc_pbuf_claim+0x5e>
   21b2a:	07d0      	lsls	r0, r2, #31
   21b2c:	d412      	bmi.n	21b54 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   21b2e:	69a3      	ldr	r3, [r4, #24]
   21b30:	4638      	mov	r0, r7
   21b32:	4798      	blx	r3
   21b34:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   21b36:	68a1      	ldr	r1, [r4, #8]
   21b38:	462a      	mov	r2, r5
   21b3a:	4620      	mov	r0, r4
   21b3c:	f7ff fe37 	bl	217ae <idx_inc>
				rd_idx_inc(buffer, inc);
   21b40:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   21b42:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   21b44:	4620      	mov	r0, r4
   21b46:	f7ff fe40 	bl	217ca <rd_idx_inc>
   21b4a:	f386 8811 	msr	BASEPRI, r6
   21b4e:	f3bf 8f6f 	isb	sy
	} while (cont);
   21b52:	e7c3      	b.n	21adc <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   21b54:	f042 0202 	orr.w	r2, r2, #2
   21b58:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   21b5c:	4638      	mov	r0, r7
   21b5e:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   21b60:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   21b62:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   21b64:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   21b66:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   21b68:	4620      	mov	r0, r4
   21b6a:	f7ff fe20 	bl	217ae <idx_inc>
				buffer->tmp_rd_idx =
   21b6e:	60a0      	str	r0, [r4, #8]
   21b70:	f386 8811 	msr	BASEPRI, r6
   21b74:	f3bf 8f6f 	isb	sy
}
   21b78:	4638      	mov	r0, r7
   21b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021b7c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   21b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b7e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   21b80:	6983      	ldr	r3, [r0, #24]
   21b82:	4608      	mov	r0, r1
{
   21b84:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   21b86:	4798      	blx	r3
   21b88:	4606      	mov	r6, r0
	__asm__ volatile(
   21b8a:	f04f 0320 	mov.w	r3, #32
   21b8e:	f3ef 8711 	mrs	r7, BASEPRI
   21b92:	f383 8812 	msr	BASEPRI_MAX, r3
   21b96:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   21b9a:	782b      	ldrb	r3, [r5, #0]
   21b9c:	f36f 0300 	bfc	r3, #0, #1
   21ba0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   21ba2:	6923      	ldr	r3, [r4, #16]
   21ba4:	079b      	lsls	r3, r3, #30
   21ba6:	d505      	bpl.n	21bb4 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   21ba8:	68e2      	ldr	r2, [r4, #12]
   21baa:	69e3      	ldr	r3, [r4, #28]
   21bac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   21bb0:	429d      	cmp	r5, r3
   21bb2:	d11a      	bne.n	21bea <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   21bb4:	782b      	ldrb	r3, [r5, #0]
   21bb6:	f36f 0341 	bfc	r3, #1, #1
   21bba:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   21bbc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   21bc0:	4299      	cmp	r1, r3
   21bc2:	d104      	bne.n	21bce <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   21bc4:	4632      	mov	r2, r6
   21bc6:	4620      	mov	r0, r4
   21bc8:	f7ff fdf1 	bl	217ae <idx_inc>
   21bcc:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   21bce:	4631      	mov	r1, r6
   21bd0:	4620      	mov	r0, r4
   21bd2:	f7ff fdfa 	bl	217ca <rd_idx_inc>
	__asm__ volatile(
   21bd6:	f387 8811 	msr	BASEPRI, r7
   21bda:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   21bde:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   21be2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21be6:	f7fe b8a1 	b.w	1fd2c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   21bea:	682b      	ldr	r3, [r5, #0]
   21bec:	f360 039f 	bfi	r3, r0, #2, #30
   21bf0:	602b      	str	r3, [r5, #0]
   21bf2:	e7f0      	b.n	21bd6 <mpsc_pbuf_free+0x5a>

00021bf4 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   21bf4:	6902      	ldr	r2, [r0, #16]
   21bf6:	6883      	ldr	r3, [r0, #8]
   21bf8:	0712      	lsls	r2, r2, #28
   21bfa:	d402      	bmi.n	21c02 <mpsc_pbuf_is_pending+0xe>
   21bfc:	6842      	ldr	r2, [r0, #4]
   21bfe:	429a      	cmp	r2, r3
   21c00:	d200      	bcs.n	21c04 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   21c02:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   21c04:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   21c06:	1e18      	subs	r0, r3, #0
   21c08:	bf18      	it	ne
   21c0a:	2001      	movne	r0, #1
   21c0c:	4770      	bx	lr

00021c0e <mpsc_pbuf_get_utilization>:

void mpsc_pbuf_get_utilization(struct mpsc_pbuf_buffer *buffer,
			       uint32_t *size, uint32_t *now)
{
   21c0e:	b510      	push	{r4, lr}
	/* One byte is left for full/empty distinction. */
	*size = (buffer->size - 1) * sizeof(int);
   21c10:	6a03      	ldr	r3, [r0, #32]
   21c12:	3b01      	subs	r3, #1
   21c14:	009b      	lsls	r3, r3, #2
   21c16:	600b      	str	r3, [r1, #0]
{
   21c18:	4614      	mov	r4, r2
	*now = get_usage(buffer) * sizeof(int);
   21c1a:	f7ff fdb7 	bl	2178c <get_usage>
   21c1e:	0080      	lsls	r0, r0, #2
   21c20:	6020      	str	r0, [r4, #0]
}
   21c22:	bd10      	pop	{r4, pc}

00021c24 <mpsc_pbuf_get_max_utilization>:

int mpsc_pbuf_get_max_utilization(struct mpsc_pbuf_buffer *buffer, uint32_t *max)
{

	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   21c24:	6903      	ldr	r3, [r0, #16]
   21c26:	075b      	lsls	r3, r3, #29
		return -ENOTSUP;
	}

	*max = buffer->max_usage * sizeof(int);
   21c28:	bf41      	itttt	mi
   21c2a:	6a43      	ldrmi	r3, [r0, #36]	; 0x24
   21c2c:	009b      	lslmi	r3, r3, #2
	return 0;
   21c2e:	2000      	movmi	r0, #0
	*max = buffer->max_usage * sizeof(int);
   21c30:	600b      	strmi	r3, [r1, #0]
		return -ENOTSUP;
   21c32:	bf58      	it	pl
   21c34:	f06f 0085 	mvnpl.w	r0, #133	; 0x85
}
   21c38:	4770      	bx	lr

00021c3a <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   21c3a:	070b      	lsls	r3, r1, #28
   21c3c:	d504      	bpl.n	21c48 <foldcase+0xe>
   21c3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   21c42:	2b19      	cmp	r3, #25
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   21c44:	bf98      	it	ls
   21c46:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   21c48:	4770      	bx	lr

00021c4a <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   21c4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c4e:	b087      	sub	sp, #28
   21c50:	4614      	mov	r4, r2
   21c52:	9101      	str	r1, [sp, #4]
   21c54:	9303      	str	r3, [sp, #12]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   21c56:	4605      	mov	r5, r0
   21c58:	b918      	cbnz	r0, 21c62 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   21c5a:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   21c5c:	b007      	add	sp, #28
   21c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   21c62:	9b01      	ldr	r3, [sp, #4]
   21c64:	2b00      	cmp	r3, #0
   21c66:	d0f8      	beq.n	21c5a <fnmatchx+0x10>
    if (recursion-- == 0)
   21c68:	9b03      	ldr	r3, [sp, #12]
   21c6a:	2b00      	cmp	r3, #0
   21c6c:	f000 810f 	beq.w	21e8e <fnmatchx+0x244>
   21c70:	9a01      	ldr	r2, [sp, #4]
        switch (c = FOLDCASE(*pattern++, flags)) {
   21c72:	46a9      	mov	r9, r5
   21c74:	4621      	mov	r1, r4
   21c76:	f819 0b01 	ldrb.w	r0, [r9], #1
   21c7a:	f7ff ffde 	bl	21c3a <foldcase>
   21c7e:	4603      	mov	r3, r0
   21c80:	b2c0      	uxtb	r0, r0
   21c82:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   21c84:	7816      	ldrb	r6, [r2, #0]
   21c86:	4607      	mov	r7, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
   21c88:	d025      	beq.n	21cd6 <fnmatchx+0x8c>
   21c8a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   21c8e:	d10b      	bne.n	21ca8 <fnmatchx+0x5e>
   21c90:	b1c8      	cbz	r0, 21cc6 <fnmatchx+0x7c>
   21c92:	282a      	cmp	r0, #42	; 0x2a
   21c94:	d036      	beq.n	21d04 <fnmatchx+0xba>
            if (c != FOLDCASE(*string++, flags))
   21c96:	4621      	mov	r1, r4
   21c98:	4630      	mov	r0, r6
   21c9a:	f7ff ffce 	bl	21c3a <foldcase>
   21c9e:	4287      	cmp	r7, r0
   21ca0:	f102 0201 	add.w	r2, r2, #1
   21ca4:	d01e      	beq.n	21ce4 <fnmatchx+0x9a>
   21ca6:	e7d8      	b.n	21c5a <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   21ca8:	285b      	cmp	r0, #91	; 0x5b
   21caa:	d07d      	beq.n	21da8 <fnmatchx+0x15e>
   21cac:	285c      	cmp	r0, #92	; 0x5c
   21cae:	d1f2      	bne.n	21c96 <fnmatchx+0x4c>
            if (!(flags & FNM_NOESCAPE)) {
   21cb0:	07e3      	lsls	r3, r4, #31
   21cb2:	d4f0      	bmi.n	21c96 <fnmatchx+0x4c>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   21cb4:	7868      	ldrb	r0, [r5, #1]
   21cb6:	f7ff ffc0 	bl	21c3a <foldcase>
   21cba:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
   21cbe:	bf18      	it	ne
   21cc0:	f105 0902 	addne.w	r9, r5, #2
   21cc4:	e7e7      	b.n	21c96 <fnmatchx+0x4c>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   21cc6:	06e7      	lsls	r7, r4, #27
   21cc8:	d501      	bpl.n	21cce <fnmatchx+0x84>
   21cca:	2e2f      	cmp	r6, #47	; 0x2f
   21ccc:	d0c6      	beq.n	21c5c <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   21cce:	1e30      	subs	r0, r6, #0
                        0 : FNM_NOMATCH;
   21cd0:	bf18      	it	ne
   21cd2:	2001      	movne	r0, #1
   21cd4:	e7c2      	b.n	21c5c <fnmatchx+0x12>
            if (*string == EOS)
   21cd6:	2e00      	cmp	r6, #0
   21cd8:	d0bf      	beq.n	21c5a <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   21cda:	2e2f      	cmp	r6, #47	; 0x2f
   21cdc:	d104      	bne.n	21ce8 <fnmatchx+0x9e>
   21cde:	07a5      	lsls	r5, r4, #30
   21ce0:	d4bb      	bmi.n	21c5a <fnmatchx+0x10>
            ++string;
   21ce2:	3201      	adds	r2, #1
            break;
   21ce4:	464d      	mov	r5, r9
   21ce6:	e7c4      	b.n	21c72 <fnmatchx+0x28>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   21ce8:	2e2e      	cmp	r6, #46	; 0x2e
   21cea:	d1fa      	bne.n	21ce2 <fnmatchx+0x98>
   21cec:	0760      	lsls	r0, r4, #29
   21cee:	d5f8      	bpl.n	21ce2 <fnmatchx+0x98>
   21cf0:	9b01      	ldr	r3, [sp, #4]
   21cf2:	429a      	cmp	r2, r3
   21cf4:	d0b1      	beq.n	21c5a <fnmatchx+0x10>
                (string == stringstart ||
   21cf6:	07a1      	lsls	r1, r4, #30
   21cf8:	d5f3      	bpl.n	21ce2 <fnmatchx+0x98>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   21cfa:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   21cfe:	2b2f      	cmp	r3, #47	; 0x2f
   21d00:	d1ef      	bne.n	21ce2 <fnmatchx+0x98>
   21d02:	e7aa      	b.n	21c5a <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   21d04:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   21d06:	f7ff ff98 	bl	21c3a <foldcase>
   21d0a:	b2c1      	uxtb	r1, r0
            while (c == '*')
   21d0c:	292a      	cmp	r1, #42	; 0x2a
   21d0e:	d019      	beq.n	21d44 <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   21d10:	2e2e      	cmp	r6, #46	; 0x2e
   21d12:	d10a      	bne.n	21d2a <fnmatchx+0xe0>
   21d14:	0763      	lsls	r3, r4, #29
   21d16:	d508      	bpl.n	21d2a <fnmatchx+0xe0>
   21d18:	9b01      	ldr	r3, [sp, #4]
   21d1a:	429a      	cmp	r2, r3
   21d1c:	d09d      	beq.n	21c5a <fnmatchx+0x10>
                (string == stringstart ||
   21d1e:	07a7      	lsls	r7, r4, #30
   21d20:	d503      	bpl.n	21d2a <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   21d22:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   21d26:	2b2f      	cmp	r3, #47	; 0x2f
   21d28:	d097      	beq.n	21c5a <fnmatchx+0x10>
            if (c == EOS) {
   21d2a:	b979      	cbnz	r1, 21d4c <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
   21d2c:	f014 0002 	ands.w	r0, r4, #2
   21d30:	d094      	beq.n	21c5c <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   21d32:	06e6      	lsls	r6, r4, #27
   21d34:	f100 80ad 	bmi.w	21e92 <fnmatchx+0x248>
                        strchr(string, '/') == NULL ?
   21d38:	212f      	movs	r1, #47	; 0x2f
   21d3a:	4610      	mov	r0, r2
   21d3c:	f001 ff01 	bl	23b42 <strchr>
                        0 : FNM_NOMATCH;
   21d40:	3800      	subs	r0, #0
   21d42:	e7c5      	b.n	21cd0 <fnmatchx+0x86>
                c = FOLDCASE(*++pattern, flags);
   21d44:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   21d48:	4621      	mov	r1, r4
   21d4a:	e7dc      	b.n	21d06 <fnmatchx+0xbc>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   21d4c:	292f      	cmp	r1, #47	; 0x2f
   21d4e:	d123      	bne.n	21d98 <fnmatchx+0x14e>
   21d50:	07a5      	lsls	r5, r4, #30
   21d52:	d521      	bpl.n	21d98 <fnmatchx+0x14e>
                if ((string = strchr(string, '/')) == NULL)
   21d54:	4610      	mov	r0, r2
   21d56:	f001 fef4 	bl	23b42 <strchr>
   21d5a:	4602      	mov	r2, r0
   21d5c:	2800      	cmp	r0, #0
   21d5e:	d1c1      	bne.n	21ce4 <fnmatchx+0x9a>
   21d60:	e77b      	b.n	21c5a <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   21d62:	463b      	mov	r3, r7
   21d64:	4642      	mov	r2, r8
   21d66:	4659      	mov	r1, fp
   21d68:	4648      	mov	r0, r9
   21d6a:	f7ff ff6e 	bl	21c4a <fnmatchx>
   21d6e:	2801      	cmp	r0, #1
   21d70:	f47f af74 	bne.w	21c5c <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   21d74:	2d2f      	cmp	r5, #47	; 0x2f
   21d76:	d103      	bne.n	21d80 <fnmatchx+0x136>
   21d78:	f1ba 0f00 	cmp.w	sl, #0
   21d7c:	f47f af6d 	bne.w	21c5a <fnmatchx+0x10>
   21d80:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   21d82:	4621      	mov	r1, r4
   21d84:	f89b 0000 	ldrb.w	r0, [fp]
   21d88:	f7ff ff57 	bl	21c3a <foldcase>
   21d8c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   21d90:	f106 0601 	add.w	r6, r6, #1
   21d94:	d1e5      	bne.n	21d62 <fnmatchx+0x118>
   21d96:	e760      	b.n	21c5a <fnmatchx+0x10>
    if (recursion-- == 0)
   21d98:	9b03      	ldr	r3, [sp, #12]
   21d9a:	4616      	mov	r6, r2
   21d9c:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
   21d9e:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
   21da2:	f004 0a02 	and.w	sl, r4, #2
   21da6:	e7eb      	b.n	21d80 <fnmatchx+0x136>
            if (*string == EOS)
   21da8:	2e00      	cmp	r6, #0
   21daa:	f43f af56 	beq.w	21c5a <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   21dae:	2e2f      	cmp	r6, #47	; 0x2f
   21db0:	d102      	bne.n	21db8 <fnmatchx+0x16e>
   21db2:	07a0      	lsls	r0, r4, #30
   21db4:	f53f af51 	bmi.w	21c5a <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   21db8:	4630      	mov	r0, r6
   21dba:	f7ff ff3e 	bl	21c3a <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   21dbe:	786b      	ldrb	r3, [r5, #1]
   21dc0:	2b21      	cmp	r3, #33	; 0x21
            if ((r = rangematch(pattern,
   21dc2:	4682      	mov	sl, r0
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   21dc4:	d001      	beq.n	21dca <fnmatchx+0x180>
   21dc6:	2b5e      	cmp	r3, #94	; 0x5e
   21dc8:	d123      	bne.n	21e12 <fnmatchx+0x1c8>
        ++pattern;
   21dca:	3502      	adds	r5, #2
   21dcc:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   21dce:	9302      	str	r3, [sp, #8]
    need = 1;
   21dd0:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   21dd2:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   21dd6:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   21dda:	9104      	str	r1, [sp, #16]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   21ddc:	462f      	mov	r7, r5
   21dde:	4621      	mov	r1, r4
   21de0:	f817 0b01 	ldrb.w	r0, [r7], #1
   21de4:	9305      	str	r3, [sp, #20]
   21de6:	f7ff ff28 	bl	21c3a <foldcase>
   21dea:	fa5f f880 	uxtb.w	r8, r0
   21dee:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   21df2:	9b05      	ldr	r3, [sp, #20]
   21df4:	d110      	bne.n	21e18 <fnmatchx+0x1ce>
   21df6:	bb0b      	cbnz	r3, 21e3c <fnmatchx+0x1f2>
    return ok == negate ? NULL : pattern;
   21df8:	9b02      	ldr	r3, [sp, #8]
   21dfa:	455b      	cmp	r3, fp
   21dfc:	f43f af2d 	beq.w	21c5a <fnmatchx+0x10>
            if (r == (void *)-1) {
   21e00:	1c79      	adds	r1, r7, #1
   21e02:	d103      	bne.n	21e0c <fnmatchx+0x1c2>
                if (*string != '[')
   21e04:	2e5b      	cmp	r6, #91	; 0x5b
   21e06:	f47f af28 	bne.w	21c5a <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   21e0a:	464f      	mov	r7, r9
            ++string;
   21e0c:	3201      	adds	r2, #1
            break;
   21e0e:	46b9      	mov	r9, r7
   21e10:	e768      	b.n	21ce4 <fnmatchx+0x9a>
   21e12:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   21e14:	2300      	movs	r3, #0
   21e16:	e7da      	b.n	21dce <fnmatchx+0x184>
        if (c == '/')
   21e18:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
   21e1c:	d0f2      	beq.n	21e04 <fnmatchx+0x1ba>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   21e1e:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
   21e22:	d107      	bne.n	21e34 <fnmatchx+0x1ea>
   21e24:	9b04      	ldr	r3, [sp, #16]
   21e26:	b94b      	cbnz	r3, 21e3c <fnmatchx+0x1f2>
            c = FOLDCASE(*pattern++, flags);
   21e28:	7868      	ldrb	r0, [r5, #1]
   21e2a:	f7ff ff06 	bl	21c3a <foldcase>
   21e2e:	1caf      	adds	r7, r5, #2
   21e30:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
   21e34:	f1b8 0f00 	cmp.w	r8, #0
   21e38:	f43f af0f 	beq.w	21c5a <fnmatchx+0x10>
        if (*pattern == '-' 
   21e3c:	783b      	ldrb	r3, [r7, #0]
   21e3e:	2b2d      	cmp	r3, #45	; 0x2d
   21e40:	d11f      	bne.n	21e82 <fnmatchx+0x238>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   21e42:	7878      	ldrb	r0, [r7, #1]
   21e44:	4621      	mov	r1, r4
   21e46:	f7ff fef8 	bl	21c3a <foldcase>
   21e4a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   21e4e:	d018      	beq.n	21e82 <fnmatchx+0x238>
   21e50:	285d      	cmp	r0, #93	; 0x5d
   21e52:	d016      	beq.n	21e82 <fnmatchx+0x238>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   21e54:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   21e56:	f107 0502 	add.w	r5, r7, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   21e5a:	d10a      	bne.n	21e72 <fnmatchx+0x228>
   21e5c:	07e3      	lsls	r3, r4, #31
   21e5e:	d408      	bmi.n	21e72 <fnmatchx+0x228>
                c2 = FOLDCASE(*pattern++, flags);
   21e60:	78b8      	ldrb	r0, [r7, #2]
   21e62:	f7ff feea 	bl	21c3a <foldcase>
            if (c2 == EOS)
   21e66:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   21e6a:	f107 0503 	add.w	r5, r7, #3
            if (c2 == EOS)
   21e6e:	f43f aef4 	beq.w	21c5a <fnmatchx+0x10>
            if (c <= test && test <= c2)
   21e72:	45d0      	cmp	r8, sl
   21e74:	dc03      	bgt.n	21e7e <fnmatchx+0x234>
                ok = 1;
   21e76:	4550      	cmp	r0, sl
   21e78:	bfa8      	it	ge
   21e7a:	f04f 0b01 	movge.w	fp, #1
        } else if (c == test)
   21e7e:	2300      	movs	r3, #0
   21e80:	e7ac      	b.n	21ddc <fnmatchx+0x192>
   21e82:	463d      	mov	r5, r7
   21e84:	45d0      	cmp	r8, sl
   21e86:	bf08      	it	eq
   21e88:	f04f 0b01 	moveq.w	fp, #1
   21e8c:	e7f7      	b.n	21e7e <fnmatchx+0x234>
        return FNM_NORES;
   21e8e:	2003      	movs	r0, #3
   21e90:	e6e4      	b.n	21c5c <fnmatchx+0x12>
                return 0;
   21e92:	4608      	mov	r0, r1
   21e94:	e6e2      	b.n	21c5c <fnmatchx+0x12>

00021e96 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   21e96:	2340      	movs	r3, #64	; 0x40
   21e98:	f7ff bed7 	b.w	21c4a <fnmatchx>

00021e9c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_TAINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   21e9c:	4770      	bx	lr

00021e9e <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   21e9e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   21ea0:	075b      	lsls	r3, r3, #29
   21ea2:	d40b      	bmi.n	21ebc <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   21ea4:	6803      	ldr	r3, [r0, #0]
   21ea6:	8842      	ldrh	r2, [r0, #2]
   21ea8:	f3c3 2349 	ubfx	r3, r3, #9, #10
   21eac:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   21eb0:	1898      	adds	r0, r3, r2
   21eb2:	3017      	adds	r0, #23
   21eb4:	f020 0007 	bic.w	r0, r0, #7
   21eb8:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   21eba:	4770      	bx	lr
	return 0;
   21ebc:	2000      	movs	r0, #0
}
   21ebe:	4770      	bx	lr

00021ec0 <dummy_timestamp>:
}
   21ec0:	2000      	movs	r0, #0
   21ec2:	4770      	bx	lr

00021ec4 <default_get_timestamp>:
   21ec4:	f004 bc37 	b.w	26736 <sys_clock_cycle_get_32>

00021ec8 <atomic_inc>:
{
   21ec8:	4603      	mov	r3, r0
}
   21eca:	f3bf 8f5b 	dmb	ish
   21ece:	e853 0f00 	ldrex	r0, [r3]
   21ed2:	1c42      	adds	r2, r0, #1
   21ed4:	e843 2100 	strex	r1, r2, [r3]
   21ed8:	2900      	cmp	r1, #0
   21eda:	d1f8      	bne.n	21ece <atomic_inc+0x6>
   21edc:	f3bf 8f5b 	dmb	ish
   21ee0:	4770      	bx	lr

00021ee2 <z_log_vprintk>:
{
   21ee2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   21ee4:	2300      	movs	r3, #0
   21ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   21eea:	e9cd 3300 	strd	r3, r3, [sp]
   21eee:	461a      	mov	r2, r3
   21ef0:	4619      	mov	r1, r3
   21ef2:	4618      	mov	r0, r3
   21ef4:	f7e2 f980 	bl	41f8 <z_impl_z_log_msg_runtime_vcreate>
}
   21ef8:	b005      	add	sp, #20
   21efa:	f85d fb04 	ldr.w	pc, [sp], #4

00021efe <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   21efe:	2001      	movs	r0, #1
   21f00:	f7e1 be40 	b.w	3b84 <z_log_dropped>

00021f04 <z_log_get_tag>:
}
   21f04:	2000      	movs	r0, #0
   21f06:	4770      	bx	lr

00021f08 <z_cbprintf_cpy>:
{
   21f08:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   21f0a:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   21f0e:	1b9b      	subs	r3, r3, r6
   21f10:	428b      	cmp	r3, r1
{
   21f12:	460c      	mov	r4, r1
   21f14:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   21f16:	d30a      	bcc.n	21f2e <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   21f18:	6813      	ldr	r3, [r2, #0]
   21f1a:	460a      	mov	r2, r1
   21f1c:	4601      	mov	r1, r0
   21f1e:	1998      	adds	r0, r3, r6
   21f20:	f001 fe74 	bl	23c0c <memcpy>
	desc->off += len;
   21f24:	68ab      	ldr	r3, [r5, #8]
   21f26:	4423      	add	r3, r4
   21f28:	60ab      	str	r3, [r5, #8]
	return len;
   21f2a:	4620      	mov	r0, r4
}
   21f2c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   21f2e:	f06f 001b 	mvn.w	r0, #27
   21f32:	e7fb      	b.n	21f2c <z_cbprintf_cpy+0x24>

00021f34 <z_log_msg_finalize>:
{
   21f34:	b570      	push	{r4, r5, r6, lr}
   21f36:	460e      	mov	r6, r1
   21f38:	4615      	mov	r5, r2
   21f3a:	4619      	mov	r1, r3
	if (!msg) {
   21f3c:	4604      	mov	r4, r0
   21f3e:	b918      	cbnz	r0, 21f48 <z_log_msg_finalize+0x14>
}
   21f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   21f44:	f7e1 be1e 	b.w	3b84 <z_log_dropped>
	if (data) {
   21f48:	b13b      	cbz	r3, 21f5a <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   21f4a:	f3c2 2349 	ubfx	r3, r2, #9, #10
   21f4e:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   21f50:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   21f54:	4418      	add	r0, r3
   21f56:	f001 fe59 	bl	23c0c <memcpy>
	msg->hdr.source = source;
   21f5a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   21f5e:	4620      	mov	r0, r4
}
   21f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   21f64:	f7e1 bfbc 	b.w	3ee0 <z_log_msg_commit>

00021f68 <buffer_write>:
{
   21f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f6a:	4606      	mov	r6, r0
   21f6c:	460d      	mov	r5, r1
   21f6e:	4614      	mov	r4, r2
   21f70:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   21f72:	4621      	mov	r1, r4
   21f74:	4628      	mov	r0, r5
   21f76:	463a      	mov	r2, r7
   21f78:	47b0      	blx	r6
	} while (len != 0);
   21f7a:	1a24      	subs	r4, r4, r0
		buf += processed;
   21f7c:	4405      	add	r5, r0
	} while (len != 0);
   21f7e:	d1f8      	bne.n	21f72 <buffer_write+0xa>
}
   21f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021f82 <cbvprintf>:
{
   21f82:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   21f84:	2400      	movs	r4, #0
   21f86:	9400      	str	r4, [sp, #0]
   21f88:	f7e0 febc 	bl	2d04 <z_cbvprintf_impl>
}
   21f8c:	b002      	add	sp, #8
   21f8e:	bd10      	pop	{r4, pc}

00021f90 <log_output_flush>:
{
   21f90:	b510      	push	{r4, lr}
		     output->control_block->offset,
   21f92:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   21f94:	6881      	ldr	r1, [r0, #8]
{
   21f96:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   21f98:	e9d2 2300 	ldrd	r2, r3, [r2]
   21f9c:	6800      	ldr	r0, [r0, #0]
   21f9e:	f7ff ffe3 	bl	21f68 <buffer_write>
	output->control_block->offset = 0;
   21fa2:	6863      	ldr	r3, [r4, #4]
   21fa4:	2200      	movs	r2, #0
   21fa6:	601a      	str	r2, [r3, #0]
}
   21fa8:	bd10      	pop	{r4, pc}

00021faa <out_func>:
{
   21faa:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   21fac:	684b      	ldr	r3, [r1, #4]
   21fae:	681a      	ldr	r2, [r3, #0]
   21fb0:	68cb      	ldr	r3, [r1, #12]
   21fb2:	429a      	cmp	r2, r3
{
   21fb4:	4605      	mov	r5, r0
   21fb6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   21fb8:	d102      	bne.n	21fc0 <out_func+0x16>
		log_output_flush(out_ctx);
   21fba:	4608      	mov	r0, r1
   21fbc:	f7ff ffe8 	bl	21f90 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21fc0:	6863      	ldr	r3, [r4, #4]
   21fc2:	f3bf 8f5b 	dmb	ish
   21fc6:	e853 2f00 	ldrex	r2, [r3]
   21fca:	1c51      	adds	r1, r2, #1
   21fcc:	e843 1000 	strex	r0, r1, [r3]
   21fd0:	2800      	cmp	r0, #0
   21fd2:	d1f8      	bne.n	21fc6 <out_func+0x1c>
   21fd4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   21fd8:	68a3      	ldr	r3, [r4, #8]
   21fda:	549d      	strb	r5, [r3, r2]
}
   21fdc:	2000      	movs	r0, #0
   21fde:	bd38      	pop	{r3, r4, r5, pc}

00021fe0 <cr_out_func>:
	if (c == '\n') {
   21fe0:	280a      	cmp	r0, #10
{
   21fe2:	b538      	push	{r3, r4, r5, lr}
   21fe4:	4604      	mov	r4, r0
   21fe6:	460d      	mov	r5, r1
	if (c == '\n') {
   21fe8:	d102      	bne.n	21ff0 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   21fea:	200d      	movs	r0, #13
   21fec:	f7ff ffdd 	bl	21faa <out_func>
	out_func(c, ctx);
   21ff0:	4629      	mov	r1, r5
   21ff2:	4620      	mov	r0, r4
   21ff4:	f7ff ffd9 	bl	21faa <out_func>
}
   21ff8:	2000      	movs	r0, #0
   21ffa:	bd38      	pop	{r3, r4, r5, pc}

00021ffc <log_halt>:
	backend->cb->active = false;
   21ffc:	684b      	ldr	r3, [r1, #4]
   21ffe:	2000      	movs	r0, #0
   22000:	7158      	strb	r0, [r3, #5]
}
   22002:	4770      	bx	lr

00022004 <log_go>:
	log_backend_activate(backend, backend->cb->ctx);
   22004:	684b      	ldr	r3, [r1, #4]
	backend->cb->active = true;
   22006:	2201      	movs	r2, #1
   22008:	715a      	strb	r2, [r3, #5]
}
   2200a:	2000      	movs	r0, #0
   2200c:	4770      	bx	lr

0002200e <cmd_log_self_status>:
{
   2200e:	b570      	push	{r4, r5, r6, lr}
   22010:	4604      	mov	r4, r0
   22012:	460d      	mov	r5, r1
   22014:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   22016:	f7e2 fc6b 	bl	48f0 <shell_state_precheck>
   2201a:	b130      	cbz	r0, 2202a <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   2201c:	69e1      	ldr	r1, [r4, #28]
   2201e:	4633      	mov	r3, r6
   22020:	6809      	ldr	r1, [r1, #0]
   22022:	462a      	mov	r2, r5
   22024:	4620      	mov	r0, r4
   22026:	f7e2 fb7b 	bl	4720 <log_status>
}
   2202a:	2000      	movs	r0, #0
   2202c:	bd70      	pop	{r4, r5, r6, pc}

0002202e <cmd_log_self_enable>:
{
   2202e:	b570      	push	{r4, r5, r6, lr}
   22030:	4604      	mov	r4, r0
   22032:	460d      	mov	r5, r1
   22034:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   22036:	f7e2 fc5b 	bl	48f0 <shell_state_precheck>
   2203a:	b140      	cbz	r0, 2204e <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   2203c:	69e1      	ldr	r1, [r4, #28]
   2203e:	4633      	mov	r3, r6
   22040:	462a      	mov	r2, r5
   22042:	4620      	mov	r0, r4
   22044:	6809      	ldr	r1, [r1, #0]
}
   22046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   2204a:	f7e2 bccf 	b.w	49ec <log_enable>
}
   2204e:	bd70      	pop	{r4, r5, r6, pc}

00022050 <log_disable>:
{
   22050:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   22052:	2400      	movs	r4, #0
   22054:	9400      	str	r4, [sp, #0]
   22056:	3304      	adds	r3, #4
   22058:	3a01      	subs	r2, #1
   2205a:	f7e2 fc59 	bl	4910 <filters_set>
}
   2205e:	4620      	mov	r0, r4
   22060:	b002      	add	sp, #8
   22062:	bd10      	pop	{r4, pc}

00022064 <cmd_log_self_disable>:
{
   22064:	b570      	push	{r4, r5, r6, lr}
   22066:	4604      	mov	r4, r0
   22068:	460d      	mov	r5, r1
   2206a:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   2206c:	f7e2 fc40 	bl	48f0 <shell_state_precheck>
   22070:	b140      	cbz	r0, 22084 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   22072:	69e1      	ldr	r1, [r4, #28]
   22074:	4633      	mov	r3, r6
   22076:	462a      	mov	r2, r5
   22078:	4620      	mov	r0, r4
   2207a:	6809      	ldr	r1, [r1, #0]
}
   2207c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   22080:	f7ff bfe6 	b.w	22050 <log_disable>
}
   22084:	bd70      	pop	{r4, r5, r6, pc}

00022086 <cmd_log_self_go>:
{
   22086:	b510      	push	{r4, lr}
   22088:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   2208a:	f7e2 fc31 	bl	48f0 <shell_state_precheck>
   2208e:	b120      	cbz	r0, 2209a <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   22090:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   22092:	681b      	ldr	r3, [r3, #0]
   22094:	685b      	ldr	r3, [r3, #4]
   22096:	2201      	movs	r2, #1
   22098:	715a      	strb	r2, [r3, #5]
}
   2209a:	2000      	movs	r0, #0
   2209c:	bd10      	pop	{r4, pc}

0002209e <cmd_log_self_halt>:
{
   2209e:	b510      	push	{r4, lr}
   220a0:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   220a2:	f7e2 fc25 	bl	48f0 <shell_state_precheck>
   220a6:	b120      	cbz	r0, 220b2 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   220a8:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
   220aa:	681b      	ldr	r3, [r3, #0]
   220ac:	685b      	ldr	r3, [r3, #4]
   220ae:	2200      	movs	r2, #0
   220b0:	715a      	strb	r2, [r3, #5]
}
   220b2:	2000      	movs	r0, #0
   220b4:	bd10      	pop	{r4, pc}

000220b6 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   220b6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   220b8:	075b      	lsls	r3, r3, #29
   220ba:	d40b      	bmi.n	220d4 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   220bc:	6803      	ldr	r3, [r0, #0]
   220be:	8842      	ldrh	r2, [r0, #2]
   220c0:	f3c3 2349 	ubfx	r3, r3, #9, #10
   220c4:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   220c8:	1898      	adds	r0, r3, r2
   220ca:	3017      	adds	r0, #23
   220cc:	f020 0007 	bic.w	r0, r0, #7
   220d0:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   220d2:	4770      	bx	lr
	return 0;
   220d4:	2000      	movs	r0, #0
}
   220d6:	4770      	bx	lr

000220d8 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   220d8:	6883      	ldr	r3, [r0, #8]
   220da:	6a1b      	ldr	r3, [r3, #32]
   220dc:	b103      	cbz	r3, 220e0 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   220de:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
   220e0:	4770      	bx	lr

000220e2 <uninit>:
{
   220e2:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   220e4:	6843      	ldr	r3, [r0, #4]
   220e6:	681b      	ldr	r3, [r3, #0]
   220e8:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
   220ea:	4620      	mov	r0, r4
   220ec:	f7ff fff4 	bl	220d8 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   220f0:	68a3      	ldr	r3, [r4, #8]
   220f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   220f4:	b10b      	cbz	r3, 220fa <uninit+0x18>
		api->irq_rx_disable(dev);
   220f6:	4620      	mov	r0, r4
   220f8:	4798      	blx	r3
}
   220fa:	2000      	movs	r0, #0
   220fc:	bd10      	pop	{r4, pc}

000220fe <enable>:
{
   220fe:	b508      	push	{r3, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   22100:	6843      	ldr	r3, [r0, #4]
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   22102:	681a      	ldr	r2, [r3, #0]
   22104:	7411      	strb	r1, [r2, #16]
	if (blocking_tx) {
   22106:	b119      	cbz	r1, 22110 <enable+0x12>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   22108:	681b      	ldr	r3, [r3, #0]
   2210a:	6818      	ldr	r0, [r3, #0]
   2210c:	f7ff ffe4 	bl	220d8 <uart_irq_tx_disable>
}
   22110:	2000      	movs	r0, #0
   22112:	bd08      	pop	{r3, pc}

00022114 <read>:
{
   22114:	b510      	push	{r4, lr}
   22116:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   22118:	6843      	ldr	r3, [r0, #4]
   2211a:	68d8      	ldr	r0, [r3, #12]
   2211c:	f7ff faf6 	bl	2170c <ring_buf_get>
   22120:	6020      	str	r0, [r4, #0]
}
   22122:	2000      	movs	r0, #0
   22124:	bd10      	pop	{r4, pc}

00022126 <write>:
{
   22126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   2212a:	6845      	ldr	r5, [r0, #4]
{
   2212c:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   2212e:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   22130:	7c1b      	ldrb	r3, [r3, #16]
{
   22132:	460c      	mov	r4, r1
   22134:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   22136:	b153      	cbz	r3, 2214e <write+0x28>
   22138:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   2213c:	45a0      	cmp	r8, r4
   2213e:	d121      	bne.n	22184 <write+0x5e>
		*cnt = length;
   22140:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   22142:	682b      	ldr	r3, [r5, #0]
   22144:	2001      	movs	r0, #1
   22146:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   2214a:	4790      	blx	r2
   2214c:	e017      	b.n	2217e <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   2214e:	68a8      	ldr	r0, [r5, #8]
   22150:	f7ff fa88 	bl	21664 <ring_buf_put>
   22154:	6030      	str	r0, [r6, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22156:	682b      	ldr	r3, [r5, #0]
   22158:	f3bf 8f5b 	dmb	ish
   2215c:	330c      	adds	r3, #12
   2215e:	2101      	movs	r1, #1
   22160:	e853 2f00 	ldrex	r2, [r3]
   22164:	e843 1000 	strex	r0, r1, [r3]
   22168:	2800      	cmp	r0, #0
   2216a:	d1f9      	bne.n	22160 <write+0x3a>
   2216c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   22170:	b92a      	cbnz	r2, 2217e <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   22172:	682b      	ldr	r3, [r5, #0]
   22174:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   22176:	6883      	ldr	r3, [r0, #8]
   22178:	69db      	ldr	r3, [r3, #28]
   2217a:	b103      	cbz	r3, 2217e <write+0x58>
		api->irq_tx_enable(dev);
   2217c:	4798      	blx	r3
}
   2217e:	2000      	movs	r0, #0
   22180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   22184:	682b      	ldr	r3, [r5, #0]
   22186:	f814 1b01 	ldrb.w	r1, [r4], #1
   2218a:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
   2218c:	6883      	ldr	r3, [r0, #8]
   2218e:	685b      	ldr	r3, [r3, #4]
   22190:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   22192:	e7d3      	b.n	2213c <write+0x16>

00022194 <cmd_buffer_clear>:
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   22194:	6882      	ldr	r2, [r0, #8]
   22196:	2300      	movs	r3, #0
   22198:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_pos = 0;
   2219c:	6882      	ldr	r2, [r0, #8]
   2219e:	87d3      	strh	r3, [r2, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
   221a0:	6882      	ldr	r2, [r0, #8]
   221a2:	8793      	strh	r3, [r2, #60]	; 0x3c
}
   221a4:	4770      	bx	lr

000221a6 <atomic_or>:
{
   221a6:	b510      	push	{r4, lr}
   221a8:	4603      	mov	r3, r0
}
   221aa:	f3bf 8f5b 	dmb	ish
   221ae:	e853 0f00 	ldrex	r0, [r3]
   221b2:	ea40 0201 	orr.w	r2, r0, r1
   221b6:	e843 2400 	strex	r4, r2, [r3]
   221ba:	2c00      	cmp	r4, #0
   221bc:	d1f7      	bne.n	221ae <atomic_or+0x8>
   221be:	f3bf 8f5b 	dmb	ish
   221c2:	bd10      	pop	{r4, pc}

000221c4 <atomic_and>:
{
   221c4:	b510      	push	{r4, lr}
   221c6:	4603      	mov	r3, r0
}
   221c8:	f3bf 8f5b 	dmb	ish
   221cc:	e853 0f00 	ldrex	r0, [r3]
   221d0:	ea00 0201 	and.w	r2, r0, r1
   221d4:	e843 2400 	strex	r4, r2, [r3]
   221d8:	2c00      	cmp	r4, #0
   221da:	d1f7      	bne.n	221cc <atomic_and+0x8>
   221dc:	f3bf 8f5b 	dmb	ish
   221e0:	bd10      	pop	{r4, pc}

000221e2 <shell_signal_handle>:
{
   221e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   221e4:	0109      	lsls	r1, r1, #4
   221e6:	6885      	ldr	r5, [r0, #8]
   221e8:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
   221ec:	4604      	mov	r4, r0
   221ee:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   221f0:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
   221f2:	aa01      	add	r2, sp, #4
   221f4:	4669      	mov	r1, sp
   221f6:	4628      	mov	r0, r5
   221f8:	f005 f95e 	bl	274b8 <z_impl_k_poll_signal_check>
	if (set) {
   221fc:	9b00      	ldr	r3, [sp, #0]
   221fe:	b123      	cbz	r3, 2220a <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
   22200:	4628      	mov	r0, r5
   22202:	f005 f956 	bl	274b2 <z_impl_k_poll_signal_reset>
		handler(shell);
   22206:	4620      	mov	r0, r4
   22208:	47b0      	blx	r6
}
   2220a:	b002      	add	sp, #8
   2220c:	bd70      	pop	{r4, r5, r6, pc}

0002220e <z_shell_strlen>:
{
   2220e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   22210:	b110      	cbz	r0, 22218 <z_shell_strlen+0xa>
   22212:	f001 fca4 	bl	23b5e <strlen>
   22216:	b280      	uxth	r0, r0
}
   22218:	bd08      	pop	{r3, pc}

0002221a <z_shell_raw_fprintf>:
{
   2221a:	b40e      	push	{r1, r2, r3}
   2221c:	b503      	push	{r0, r1, lr}
   2221e:	aa03      	add	r2, sp, #12
   22220:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   22224:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   22226:	f7e4 f929 	bl	647c <z_shell_fprintf_fmt>
}
   2222a:	b002      	add	sp, #8
   2222c:	f85d eb04 	ldr.w	lr, [sp], #4
   22230:	b003      	add	sp, #12
   22232:	4770      	bx	lr

00022234 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   22234:	f7fd bc8e 	b.w	1fb54 <z_impl_k_mutex_lock>

00022238 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   22238:	688b      	ldr	r3, [r1, #8]
   2223a:	b920      	cbnz	r0, 22246 <transport_evt_handler+0xe>
   2223c:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
   22240:	2100      	movs	r1, #0
   22242:	f7fe bd91 	b.w	20d68 <z_impl_k_poll_signal_raise>
   22246:	f503 7026 	add.w	r0, r3, #664	; 0x298
   2224a:	e7f9      	b.n	22240 <transport_evt_handler+0x8>

0002224c <kill_handler>:
{
   2224c:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
   2224e:	6883      	ldr	r3, [r0, #8]
   22250:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
   22254:	07db      	lsls	r3, r3, #31
{
   22256:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
   22258:	d41d      	bmi.n	22296 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
   2225a:	69c0      	ldr	r0, [r0, #28]
   2225c:	f000 fe36 	bl	22ecc <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   22260:	6860      	ldr	r0, [r4, #4]
   22262:	6803      	ldr	r3, [r0, #0]
   22264:	685b      	ldr	r3, [r3, #4]
   22266:	4798      	blx	r3
	if (err != 0) {
   22268:	4605      	mov	r5, r0
   2226a:	b920      	cbnz	r0, 22276 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
   2226c:	68e0      	ldr	r0, [r4, #12]
   2226e:	f000 ffd7 	bl	23220 <z_shell_history_purge>
	shell->ctx->state = state;
   22272:	68a3      	ldr	r3, [r4, #8]
   22274:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
   22276:	68a3      	ldr	r3, [r4, #8]
   22278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2227a:	b113      	cbz	r3, 22282 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
   2227c:	4629      	mov	r1, r5
   2227e:	4620      	mov	r0, r4
   22280:	4798      	blx	r3
	shell->ctx->tid = NULL;
   22282:	68a3      	ldr	r3, [r4, #8]
   22284:	2200      	movs	r2, #0
   22286:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
   2228a:	f7fe fa73 	bl	20774 <z_impl_z_current_get>
}
   2228e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   22292:	f7e5 bd05 	b.w	7ca0 <z_impl_k_thread_abort>
		return -EBUSY;
   22296:	f06f 050f 	mvn.w	r5, #15
   2229a:	e7ec      	b.n	22276 <kill_handler+0x2a>

0002229c <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   2229c:	f500 7019 	add.w	r0, r0, #612	; 0x264
   222a0:	b111      	cbz	r1, 222a8 <z_flag_history_exit_set.isra.0+0xc>
   222a2:	2104      	movs	r1, #4
   222a4:	f7ff bf7f 	b.w	221a6 <atomic_or>
   222a8:	f06f 0104 	mvn.w	r1, #4
   222ac:	f7ff bf8a 	b.w	221c4 <atomic_and>

000222b0 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
   222b0:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   222b2:	f500 7018 	add.w	r0, r0, #608	; 0x260
   222b6:	b129      	cbz	r1, 222c4 <z_flag_insert_mode_set.isra.0+0x14>
   222b8:	2101      	movs	r1, #1
   222ba:	f7ff ff74 	bl	221a6 <atomic_or>
}
   222be:	f000 0001 	and.w	r0, r0, #1
   222c2:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   222c4:	f06f 0101 	mvn.w	r1, #1
   222c8:	f7ff ff7c 	bl	221c4 <atomic_and>
   222cc:	e7f7      	b.n	222be <z_flag_insert_mode_set.isra.0+0xe>

000222ce <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   222ce:	f7fd bcbb 	b.w	1fc48 <z_impl_k_mutex_unlock>

000222d2 <shell_log_process>:
{
   222d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
   222d4:	2300      	movs	r3, #0
{
   222d6:	4604      	mov	r4, r0
	int signaled = 0;
   222d8:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   222da:	4620      	mov	r0, r4
   222dc:	f000 fc06 	bl	22aec <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   222e0:	69e0      	ldr	r0, [r4, #28]
   222e2:	f000 fe34 	bl	22f4e <z_shell_log_backend_process>
   222e6:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   222e8:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   222ea:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   222ec:	f7e4 fa6c 	bl	67c8 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   222f0:	68a3      	ldr	r3, [r4, #8]
   222f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
   222f4:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
   222f8:	b123      	cbz	r3, 22304 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   222fa:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   222fe:	2100      	movs	r1, #0
   22300:	f7fe fa1e 	bl	20740 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   22304:	aa01      	add	r2, sp, #4
   22306:	4669      	mov	r1, sp
   22308:	4630      	mov	r0, r6
   2230a:	f005 f8d5 	bl	274b8 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   2230e:	b115      	cbz	r5, 22316 <shell_log_process+0x44>
   22310:	9b00      	ldr	r3, [sp, #0]
   22312:	2b00      	cmp	r3, #0
   22314:	d0e1      	beq.n	222da <shell_log_process+0x8>
}
   22316:	b002      	add	sp, #8
   22318:	bd70      	pop	{r4, r5, r6, pc}

0002231a <shell_vfprintf>:
{
   2231a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2231c:	4604      	mov	r4, r0
	return shell->ctx->state;
   2231e:	6880      	ldr	r0, [r0, #8]
{
   22320:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   22322:	7903      	ldrb	r3, [r0, #4]
   22324:	2b02      	cmp	r3, #2
{
   22326:	460d      	mov	r5, r1
   22328:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   2232a:	d007      	beq.n	2233c <shell_vfprintf+0x22>
}
   2232c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   22330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   22334:	f500 7019 	add.w	r0, r0, #612	; 0x264
   22338:	f7ff bf35 	b.w	221a6 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   2233c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22344:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   22348:	f7ff ff74 	bl	22234 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   2234c:	68a3      	ldr	r3, [r4, #8]
   2234e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   22352:	0511      	lsls	r1, r2, #20
   22354:	d404      	bmi.n	22360 <shell_vfprintf+0x46>
   22356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22358:	b913      	cbnz	r3, 22360 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
   2235a:	4620      	mov	r0, r4
   2235c:	f000 fbc6 	bl	22aec <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
   22360:	463b      	mov	r3, r7
   22362:	4632      	mov	r2, r6
   22364:	4629      	mov	r1, r5
   22366:	4620      	mov	r0, r4
   22368:	f000 fc20 	bl	22bac <z_shell_vfprintf>
   2236c:	68a3      	ldr	r3, [r4, #8]
   2236e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   22372:	0512      	lsls	r2, r2, #20
   22374:	d404      	bmi.n	22380 <shell_vfprintf+0x66>
   22376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22378:	b913      	cbnz	r3, 22380 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
   2237a:	4620      	mov	r0, r4
   2237c:	f7e4 fa24 	bl	67c8 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   22380:	6960      	ldr	r0, [r4, #20]
   22382:	f000 f847 	bl	22414 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   22386:	68a0      	ldr	r0, [r4, #8]
}
   22388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
   2238c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   22390:	f7ff bf9d 	b.w	222ce <k_mutex_unlock.isra.0>

00022394 <shell_fprintf>:
{
   22394:	b40c      	push	{r2, r3}
   22396:	b507      	push	{r0, r1, r2, lr}
   22398:	ab04      	add	r3, sp, #16
   2239a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   2239e:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   223a0:	f7ff ffbb 	bl	2231a <shell_vfprintf>
}
   223a4:	b003      	add	sp, #12
   223a6:	f85d eb04 	ldr.w	lr, [sp], #4
   223aa:	b002      	add	sp, #8
   223ac:	4770      	bx	lr

000223ae <shell_hexdump>:
{
   223ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223b2:	4607      	mov	r7, r0
   223b4:	460e      	mov	r6, r1
   223b6:	4614      	mov	r4, r2
	const uint8_t *p = data;
   223b8:	460d      	mov	r5, r1
	while (len) {
   223ba:	b90c      	cbnz	r4, 223c0 <shell_hexdump+0x12>
}
   223bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
   223c0:	2c10      	cmp	r4, #16
   223c2:	46a0      	mov	r8, r4
   223c4:	bf28      	it	cs
   223c6:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
   223ca:	462a      	mov	r2, r5
   223cc:	1ba9      	subs	r1, r5, r6
   223ce:	4643      	mov	r3, r8
   223d0:	4638      	mov	r0, r7
   223d2:	f7e3 ffe1 	bl	6398 <shell_hexdump_line>
		len -= line_len;
   223d6:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
   223da:	4445      	add	r5, r8
   223dc:	e7ed      	b.n	223ba <shell_hexdump+0xc>

000223de <shell_help>:
{
   223de:	b510      	push	{r4, lr}
   223e0:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   223e2:	6880      	ldr	r0, [r0, #8]
   223e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   223e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   223ec:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   223f0:	f7ff ff20 	bl	22234 <k_mutex_lock.constprop.0.isra.0>
	shell_internal_help_print(shell);
   223f4:	4620      	mov	r0, r4
   223f6:	f7e3 f95f 	bl	56b8 <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   223fa:	68a0      	ldr	r0, [r4, #8]
}
   223fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   22400:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   22404:	f7ff bf63 	b.w	222ce <k_mutex_unlock.isra.0>

00022408 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
   22408:	6883      	ldr	r3, [r0, #8]
   2240a:	6399      	str	r1, [r3, #56]	; 0x38
	if (bypass == NULL) {
   2240c:	b909      	cbnz	r1, 22412 <shell_set_bypass+0xa>
		cmd_buffer_clear(sh);
   2240e:	f7ff bec1 	b.w	22194 <cmd_buffer_clear>
}
   22412:	4770      	bx	lr

00022414 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
   22414:	b510      	push	{r4, lr}
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   22416:	6902      	ldr	r2, [r0, #16]
   22418:	6883      	ldr	r3, [r0, #8]
   2241a:	6812      	ldr	r2, [r2, #0]
   2241c:	6801      	ldr	r1, [r0, #0]
{
   2241e:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   22420:	68c0      	ldr	r0, [r0, #12]
   22422:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   22424:	6923      	ldr	r3, [r4, #16]
   22426:	2200      	movs	r2, #0
   22428:	601a      	str	r2, [r3, #0]
}
   2242a:	bd10      	pop	{r4, pc}

0002242c <out_func>:
{
   2242c:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   2242e:	68cb      	ldr	r3, [r1, #12]
   22430:	7c1b      	ldrb	r3, [r3, #16]
   22432:	2b02      	cmp	r3, #2
{
   22434:	4605      	mov	r5, r0
   22436:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   22438:	d104      	bne.n	22444 <out_func+0x18>
   2243a:	280a      	cmp	r0, #10
   2243c:	d102      	bne.n	22444 <out_func+0x18>
		(void)out_func('\r', ctx);
   2243e:	200d      	movs	r0, #13
   22440:	f7ff fff4 	bl	2242c <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   22444:	6923      	ldr	r3, [r4, #16]
   22446:	6822      	ldr	r2, [r4, #0]
   22448:	681b      	ldr	r3, [r3, #0]
   2244a:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   2244c:	6922      	ldr	r2, [r4, #16]
   2244e:	6813      	ldr	r3, [r2, #0]
   22450:	3301      	adds	r3, #1
   22452:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   22454:	6923      	ldr	r3, [r4, #16]
   22456:	681a      	ldr	r2, [r3, #0]
   22458:	6863      	ldr	r3, [r4, #4]
   2245a:	429a      	cmp	r2, r3
   2245c:	d102      	bne.n	22464 <out_func+0x38>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   2245e:	4620      	mov	r0, r4
   22460:	f7ff ffd8 	bl	22414 <z_shell_fprintf_buffer_flush>
}
   22464:	2000      	movs	r0, #0
   22466:	bd38      	pop	{r3, r4, r5, pc}

00022468 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   22468:	2820      	cmp	r0, #32
   2246a:	d005      	beq.n	22478 <isspace+0x10>
   2246c:	3809      	subs	r0, #9
   2246e:	2804      	cmp	r0, #4
   22470:	bf8c      	ite	hi
   22472:	2000      	movhi	r0, #0
   22474:	2001      	movls	r0, #1
   22476:	4770      	bx	lr
   22478:	2001      	movs	r0, #1
}
   2247a:	4770      	bx	lr

0002247c <z_shell_strlen>:
{
   2247c:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   2247e:	b110      	cbz	r0, 22486 <z_shell_strlen+0xa>
   22480:	f001 fb6d 	bl	23b5e <strlen>
   22484:	b280      	uxth	r0, r0
}
   22486:	bd08      	pop	{r3, pc}

00022488 <z_column_span_with_buffer_offsets_get>:
{
   22488:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   2248a:	7b04      	ldrb	r4, [r0, #12]
   2248c:	8943      	ldrh	r3, [r0, #10]
   2248e:	4422      	add	r2, r4
   22490:	4421      	add	r1, r4
   22492:	fbb2 f0f3 	udiv	r0, r2, r3
   22496:	fb03 2210 	mls	r2, r3, r0, r2
   2249a:	fbb1 f0f3 	udiv	r0, r1, r3
   2249e:	fb03 1010 	mls	r0, r3, r0, r1
}
   224a2:	1a10      	subs	r0, r2, r0
   224a4:	bd10      	pop	{r4, pc}

000224a6 <z_row_span_with_buffer_offsets_get>:
{
   224a6:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   224a8:	7b04      	ldrb	r4, [r0, #12]
   224aa:	8943      	ldrh	r3, [r0, #10]
   224ac:	4421      	add	r1, r4
   224ae:	1910      	adds	r0, r2, r4
   224b0:	fbb1 f1f3 	udiv	r1, r1, r3
   224b4:	fbb0 f0f3 	udiv	r0, r0, r3
}
   224b8:	1a40      	subs	r0, r0, r1
   224ba:	bd10      	pop	{r4, pc}

000224bc <z_shell_multiline_data_calc>:
{
   224bc:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   224be:	7b05      	ldrb	r5, [r0, #12]
   224c0:	8943      	ldrh	r3, [r0, #10]
   224c2:	4429      	add	r1, r5
   224c4:	fbb1 f4f3 	udiv	r4, r1, r3
   224c8:	fb03 1114 	mls	r1, r3, r4, r1
   224cc:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   224ce:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   224d0:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   224d2:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   224d4:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   224d8:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   224dc:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   224de:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   224e0:	1c4c      	adds	r4, r1, #1
   224e2:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   224e4:	8042      	strh	r2, [r0, #2]
}
   224e6:	bd30      	pop	{r4, r5, pc}

000224e8 <z_shell_make_argv>:
{
   224e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   224ec:	2600      	movs	r6, #0
{
   224ee:	4607      	mov	r7, r0
   224f0:	4688      	mov	r8, r1
   224f2:	4614      	mov	r4, r2
   224f4:	4699      	mov	r9, r3
	*argc = 0;
   224f6:	6006      	str	r6, [r0, #0]
	char quote = 0;
   224f8:	46b2      	mov	sl, r6
		c = *cmd;
   224fa:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   224fc:	2800      	cmp	r0, #0
   224fe:	f000 80be 	beq.w	2267e <z_shell_make_argv+0x196>
		if (isspace((int) c)) {
   22502:	f7ff ffb1 	bl	22468 <isspace>
   22506:	b120      	cbz	r0, 22512 <z_shell_make_argv+0x2a>
			*cmd++ = '\0';
   22508:	f804 ab01 	strb.w	sl, [r4], #1
			continue;
   2250c:	e7f5      	b.n	224fa <z_shell_make_argv+0x12>
   2250e:	2600      	movs	r6, #0
   22510:	e7f3      	b.n	224fa <z_shell_make_argv+0x12>
		argv[(*argc)++] = cmd;
   22512:	683b      	ldr	r3, [r7, #0]
   22514:	1c5a      	adds	r2, r3, #1
   22516:	603a      	str	r2, [r7, #0]
   22518:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		if (*argc == max_argc) {
   2251c:	683b      	ldr	r3, [r7, #0]
   2251e:	454b      	cmp	r3, r9
   22520:	f000 80ad 	beq.w	2267e <z_shell_make_argv+0x196>
	char quote = 0;
   22524:	4606      	mov	r6, r0
		c = *cmd;
   22526:	7822      	ldrb	r2, [r4, #0]
		if (c == '\0') {
   22528:	2a00      	cmp	r2, #0
   2252a:	d0e6      	beq.n	224fa <z_shell_make_argv+0x12>
		if (!quote) {
   2252c:	b9a6      	cbnz	r6, 22558 <z_shell_make_argv+0x70>
		c = *cmd;
   2252e:	4616      	mov	r6, r2
		if (c == '\0') {
   22530:	4623      	mov	r3, r4
   22532:	461c      	mov	r4, r3
			switch (c) {
   22534:	2e27      	cmp	r6, #39	; 0x27
   22536:	d004      	beq.n	22542 <z_shell_make_argv+0x5a>
   22538:	2e5c      	cmp	r6, #92	; 0x5c
   2253a:	d020      	beq.n	2257e <z_shell_make_argv+0x96>
   2253c:	2e22      	cmp	r6, #34	; 0x22
   2253e:	f040 8091 	bne.w	22664 <z_shell_make_argv+0x17c>
						z_shell_strlen(cmd));
   22542:	4620      	mov	r0, r4
   22544:	f7ff ff9a 	bl	2247c <z_shell_strlen>
				memmove(cmd, cmd + 1,
   22548:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
   2254a:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   2254c:	4620      	mov	r0, r4
   2254e:	f001 fb46 	bl	23bde <memmove>
		c = *cmd;
   22552:	7822      	ldrb	r2, [r4, #0]
		if (c == '\0') {
   22554:	2a00      	cmp	r2, #0
   22556:	d0d0      	beq.n	224fa <z_shell_make_argv+0x12>
		if (quote == c) {
   22558:	42b2      	cmp	r2, r6
				cmd += 1;
   2255a:	46a3      	mov	fp, r4
				memmove(cmd, cmd + 1,
   2255c:	f104 0401 	add.w	r4, r4, #1
		if (quote == c) {
   22560:	d11b      	bne.n	2259a <z_shell_make_argv+0xb2>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   22562:	4658      	mov	r0, fp
   22564:	f7ff ff8a 	bl	2247c <z_shell_strlen>
   22568:	4621      	mov	r1, r4
   2256a:	4602      	mov	r2, r0
   2256c:	4658      	mov	r0, fp
   2256e:	f001 fb36 	bl	23bde <memmove>
		c = *cmd;
   22572:	f89b 6000 	ldrb.w	r6, [fp]
		if (c == '\0') {
   22576:	465c      	mov	r4, fp
   22578:	2e00      	cmp	r6, #0
   2257a:	d1d9      	bne.n	22530 <z_shell_make_argv+0x48>
   2257c:	e7bd      	b.n	224fa <z_shell_make_argv+0x12>
						z_shell_strlen(cmd));
   2257e:	4620      	mov	r0, r4
   22580:	f7ff ff7c 	bl	2247c <z_shell_strlen>
				memmove(cmd, cmd + 1,
   22584:	1c65      	adds	r5, r4, #1
						z_shell_strlen(cmd));
   22586:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   22588:	4629      	mov	r1, r5
   2258a:	4620      	mov	r0, r4
   2258c:	f001 fb27 	bl	23bde <memmove>
		c = *cmd;
   22590:	7866      	ldrb	r6, [r4, #1]
				cmd += 1;
   22592:	462c      	mov	r4, r5
		if (c == '\0') {
   22594:	2e00      	cmp	r6, #0
   22596:	d1cd      	bne.n	22534 <z_shell_make_argv+0x4c>
   22598:	e7af      	b.n	224fa <z_shell_make_argv+0x12>
		if (quote && c == '\\') {
   2259a:	2a5c      	cmp	r2, #92	; 0x5c
   2259c:	f89b 2001 	ldrb.w	r2, [fp, #1]
   225a0:	d1d8      	bne.n	22554 <z_shell_make_argv+0x6c>
			if (t == quote) {
   225a2:	42b2      	cmp	r2, r6
			char t = *(cmd + 1);
   225a4:	4610      	mov	r0, r2
			if (t == quote) {
   225a6:	d108      	bne.n	225ba <z_shell_make_argv+0xd2>
						z_shell_strlen(cmd));
   225a8:	4658      	mov	r0, fp
   225aa:	f7ff ff67 	bl	2247c <z_shell_strlen>
				memmove(cmd, cmd + 1,
   225ae:	4621      	mov	r1, r4
						z_shell_strlen(cmd));
   225b0:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   225b2:	4658      	mov	r0, fp
   225b4:	f001 fb13 	bl	23bde <memmove>
				continue;
   225b8:	e7b5      	b.n	22526 <z_shell_make_argv+0x3e>
			if (t == '0') {
   225ba:	2a30      	cmp	r2, #48	; 0x30
   225bc:	d125      	bne.n	2260a <z_shell_make_argv+0x122>
   225be:	2302      	movs	r3, #2
				uint8_t v = 0U;
   225c0:	2500      	movs	r5, #0
					t = *(cmd + i);
   225c2:	f81b 0003 	ldrb.w	r0, [fp, r3]
					if (t >= '0' && t <= '7') {
   225c6:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
   225ca:	b2c9      	uxtb	r1, r1
   225cc:	2907      	cmp	r1, #7
   225ce:	d819      	bhi.n	22604 <z_shell_make_argv+0x11c>
						v = (v << 3) | (t - '0');
   225d0:	00ed      	lsls	r5, r5, #3
				for (i = 2U; i < (2 + 3); i++) {
   225d2:	3301      	adds	r3, #1
   225d4:	b2ed      	uxtb	r5, r5
   225d6:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   225d8:	ea45 0501 	orr.w	r5, r5, r1
				for (i = 2U; i < (2 + 3); i++) {
   225dc:	d1f1      	bne.n	225c2 <z_shell_make_argv+0xda>
					memmove(cmd, cmd + (i - 1),
   225de:	1e59      	subs	r1, r3, #1
   225e0:	4459      	add	r1, fp
						z_shell_strlen(cmd) - (i - 2));
   225e2:	4658      	mov	r0, fp
					memmove(cmd, cmd + (i - 1),
   225e4:	9301      	str	r3, [sp, #4]
   225e6:	9100      	str	r1, [sp, #0]
						z_shell_strlen(cmd) - (i - 2));
   225e8:	f7ff ff48 	bl	2247c <z_shell_strlen>
   225ec:	9b01      	ldr	r3, [sp, #4]
					memmove(cmd, cmd + (i - 1),
   225ee:	9900      	ldr	r1, [sp, #0]
						z_shell_strlen(cmd) - (i - 2));
   225f0:	3b02      	subs	r3, #2
					memmove(cmd, cmd + (i - 1),
   225f2:	1ac2      	subs	r2, r0, r3
   225f4:	4658      	mov	r0, fp
   225f6:	f001 faf2 	bl	23bde <memmove>
		c = *cmd;
   225fa:	f89b 2001 	ldrb.w	r2, [fp, #1]
					*cmd++ = v;
   225fe:	f88b 5000 	strb.w	r5, [fp]
		if (c == '\0') {
   22602:	e7a7      	b.n	22554 <z_shell_make_argv+0x6c>
   22604:	b2db      	uxtb	r3, r3
				if (i > 2) {
   22606:	2b02      	cmp	r3, #2
   22608:	d1e9      	bne.n	225de <z_shell_make_argv+0xf6>
			if (t == 'x') {
   2260a:	2878      	cmp	r0, #120	; 0x78
   2260c:	d125      	bne.n	2265a <z_shell_make_argv+0x172>
   2260e:	2102      	movs	r1, #2
				uint8_t v = 0U;
   22610:	2500      	movs	r5, #0
					t = *(cmd + i);
   22612:	f81b 3001 	ldrb.w	r3, [fp, r1]
					if (t >= '0' && t <= '9') {
   22616:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2261a:	b2c0      	uxtb	r0, r0
   2261c:	2809      	cmp	r0, #9
   2261e:	d808      	bhi.n	22632 <z_shell_make_argv+0x14a>
						v = (v << 4) | (t - '0');
   22620:	012d      	lsls	r5, r5, #4
   22622:	b2ed      	uxtb	r5, r5
   22624:	4305      	orrs	r5, r0
				for (i = 2U; i < (2 + 2); i++) {
   22626:	2902      	cmp	r1, #2
   22628:	d001      	beq.n	2262e <z_shell_make_argv+0x146>
   2262a:	2304      	movs	r3, #4
   2262c:	e7d7      	b.n	225de <z_shell_make_argv+0xf6>
   2262e:	2103      	movs	r1, #3
   22630:	e7ef      	b.n	22612 <z_shell_make_argv+0x12a>
					} else if ((t >= 'a') &&
   22632:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
   22636:	2805      	cmp	r0, #5
   22638:	d805      	bhi.n	22646 <z_shell_make_argv+0x15e>
						v = (v << 4) | (t - 'a' + 10);
   2263a:	012d      	lsls	r5, r5, #4
   2263c:	b2ed      	uxtb	r5, r5
   2263e:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   22640:	431d      	orrs	r5, r3
   22642:	b2ed      	uxtb	r5, r5
   22644:	e7ef      	b.n	22626 <z_shell_make_argv+0x13e>
					} else if ((t >= 'A') && (t <= 'F')) {
   22646:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   2264a:	2805      	cmp	r0, #5
   2264c:	d803      	bhi.n	22656 <z_shell_make_argv+0x16e>
						v = (v << 4) | (t - 'A' + 10);
   2264e:	012d      	lsls	r5, r5, #4
   22650:	b2ed      	uxtb	r5, r5
   22652:	3b37      	subs	r3, #55	; 0x37
   22654:	e7f4      	b.n	22640 <z_shell_make_argv+0x158>
				if (i > 2) {
   22656:	2902      	cmp	r1, #2
   22658:	d102      	bne.n	22660 <z_shell_make_argv+0x178>
		cmd += 1;
   2265a:	f10b 0401 	add.w	r4, fp, #1
		c = *cmd;
   2265e:	e779      	b.n	22554 <z_shell_make_argv+0x6c>
   22660:	2303      	movs	r3, #3
   22662:	e7bc      	b.n	225de <z_shell_make_argv+0xf6>
		if (!quote && isspace((int) c)) {
   22664:	4630      	mov	r0, r6
   22666:	f7ff feff 	bl	22468 <isspace>
   2266a:	2800      	cmp	r0, #0
   2266c:	f47f af4f 	bne.w	2250e <z_shell_make_argv+0x26>
		c = *cmd;
   22670:	7866      	ldrb	r6, [r4, #1]
		cmd += 1;
   22672:	1c63      	adds	r3, r4, #1
		if (c == '\0') {
   22674:	2e00      	cmp	r6, #0
   22676:	f47f af5c 	bne.w	22532 <z_shell_make_argv+0x4a>
		cmd += 1;
   2267a:	461c      	mov	r4, r3
   2267c:	e73d      	b.n	224fa <z_shell_make_argv+0x12>
}
   2267e:	4630      	mov	r0, r6
   22680:	b003      	add	sp, #12
   22682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022686 <z_shell_pattern_remove>:
{
   22686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22688:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   2268a:	4611      	mov	r1, r2
{
   2268c:	4615      	mov	r5, r2
   2268e:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   22690:	f001 fa19 	bl	23ac6 <strstr>
   22694:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   22696:	4628      	mov	r0, r5
   22698:	f7ff fef0 	bl	2247c <z_shell_strlen>
   2269c:	4605      	mov	r5, r0
	if (!pattern_addr) {
   2269e:	b1c4      	cbz	r4, 226d2 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   226a0:	42a7      	cmp	r7, r4
   226a2:	d207      	bcs.n	226b4 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   226a4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   226a8:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   226aa:	bf02      	ittt	eq
   226ac:	3501      	addeq	r5, #1
   226ae:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   226b0:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   226b4:	4620      	mov	r0, r4
   226b6:	f7ff fee1 	bl	2247c <z_shell_strlen>
	*buff_len -= pattern_len;
   226ba:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   226bc:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
   226be:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   226c0:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
   226c2:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   226c4:	1961      	adds	r1, r4, r5
   226c6:	4620      	mov	r0, r4
   226c8:	b292      	uxth	r2, r2
}
   226ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   226ce:	f001 ba86 	b.w	23bde <memmove>
}
   226d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000226d4 <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   226d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226d8:	4688      	mov	r8, r1
   226da:	b086      	sub	sp, #24
   226dc:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
   226de:	4604      	mov	r4, r0
   226e0:	b128      	cbz	r0, 226ee <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
   226e2:	4601      	mov	r1, r0
   226e4:	2214      	movs	r2, #20
   226e6:	a801      	add	r0, sp, #4
   226e8:	f001 fa90 	bl	23c0c <memcpy>
		parent = &parent_cpy;
   226ec:	ac01      	add	r4, sp, #4
   226ee:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   226f0:	4631      	mov	r1, r6
   226f2:	463a      	mov	r2, r7
   226f4:	4620      	mov	r0, r4
   226f6:	f7e3 fed9 	bl	64ac <z_shell_cmd_get>
   226fa:	3601      	adds	r6, #1
   226fc:	4605      	mov	r5, r0
   226fe:	b128      	cbz	r0, 2270c <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   22700:	6829      	ldr	r1, [r5, #0]
   22702:	4640      	mov	r0, r8
   22704:	f001 fa3b 	bl	23b7e <strcmp>
   22708:	2800      	cmp	r0, #0
   2270a:	d1f1      	bne.n	226f0 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
   2270c:	4628      	mov	r0, r5
   2270e:	b006      	add	sp, #24
   22710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022714 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   22714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22718:	461c      	mov	r4, r3
   2271a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2271e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   22722:	2300      	movs	r3, #0
{
   22724:	460f      	mov	r7, r1
   22726:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   22728:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   2272a:	6823      	ldr	r3, [r4, #0]
   2272c:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   2272e:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   22730:	d21b      	bcs.n	2276a <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   22732:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   22736:	f000 fded 	bl	23314 <z_shell_has_wildcard>
   2273a:	6823      	ldr	r3, [r4, #0]
   2273c:	4682      	mov	sl, r0
   2273e:	b118      	cbz	r0, 22748 <z_shell_get_last_command+0x34>
				(*match_arg)++;
   22740:	3301      	adds	r3, #1
   22742:	6023      	str	r3, [r4, #0]
				continue;
   22744:	4628      	mov	r0, r5
   22746:	e7f0      	b.n	2272a <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   22748:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   2274c:	4642      	mov	r2, r8
   2274e:	4628      	mov	r0, r5
   22750:	f7ff ffc0 	bl	226d4 <z_shell_find_cmd>
		if (entry) {
   22754:	b148      	cbz	r0, 2276a <z_shell_get_last_command+0x56>
			(*match_arg)++;
   22756:	6823      	ldr	r3, [r4, #0]
   22758:	1c5a      	adds	r2, r3, #1
   2275a:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   2275c:	f1b9 0f00 	cmp.w	r9, #0
   22760:	d0e3      	beq.n	2272a <z_shell_get_last_command+0x16>
   22762:	4580      	cmp	r8, r0
   22764:	d1e1      	bne.n	2272a <z_shell_get_last_command+0x16>
			(*match_arg)--;
   22766:	6023      	str	r3, [r4, #0]
			return NULL;
   22768:	4655      	mov	r5, sl
		}
	}

	return entry;
}
   2276a:	4628      	mov	r0, r5
   2276c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022770 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   22770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22774:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
   22776:	f7ff fe81 	bl	2247c <z_shell_strlen>
   2277a:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
   2277c:	bb37      	cbnz	r7, 227cc <z_shell_spaces_trim+0x5c>

				break;
			}
		}
	}
}
   2277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
   22782:	b154      	cbz	r4, 2279a <z_shell_spaces_trim+0x2a>
						len - j + 1);
   22784:	b28a      	uxth	r2, r1
   22786:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
   22788:	3301      	adds	r3, #1
   2278a:	3201      	adds	r2, #1
   2278c:	4439      	add	r1, r7
   2278e:	18f8      	adds	r0, r7, r3
   22790:	f001 fa25 	bl	23bde <memmove>
					len -= shift;
   22794:	1b34      	subs	r4, r6, r4
   22796:	b2a6      	uxth	r6, r4
					shift = 0U;
   22798:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
   2279a:	1e73      	subs	r3, r6, #1
   2279c:	429d      	cmp	r5, r3
   2279e:	daee      	bge.n	2277e <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   227a0:	5d78      	ldrb	r0, [r7, r5]
   227a2:	f7ff fe61 	bl	22468 <isspace>
   227a6:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
   227a8:	3501      	adds	r5, #1
   227aa:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
   227ac:	2800      	cmp	r0, #0
   227ae:	d0f4      	beq.n	2279a <z_shell_spaces_trim+0x2a>
   227b0:	4629      	mov	r1, r5
			for (uint16_t j = i + 1; j < len; j++) {
   227b2:	b28a      	uxth	r2, r1
   227b4:	4296      	cmp	r6, r2
   227b6:	d9f0      	bls.n	2279a <z_shell_spaces_trim+0x2a>
				if (isspace((int)str[j])) {
   227b8:	5c78      	ldrb	r0, [r7, r1]
   227ba:	f7ff fe55 	bl	22468 <isspace>
   227be:	4680      	mov	r8, r0
   227c0:	2800      	cmp	r0, #0
   227c2:	d0de      	beq.n	22782 <z_shell_spaces_trim+0x12>
					shift++;
   227c4:	3401      	adds	r4, #1
				if (isspace((int)str[j])) {
   227c6:	3101      	adds	r1, #1
					shift++;
   227c8:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
   227ca:	e7f2      	b.n	227b2 <z_shell_spaces_trim+0x42>
	for (uint16_t i = 0; i < len - 1; i++) {
   227cc:	2500      	movs	r5, #0
	uint16_t shift = 0U;
   227ce:	462c      	mov	r4, r5
   227d0:	e7e3      	b.n	2279a <z_shell_spaces_trim+0x2a>

000227d2 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   227d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   227d4:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
   227d6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
   227da:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   227dc:	b953      	cbnz	r3, 227f4 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   227de:	68ab      	ldr	r3, [r5, #8]
   227e0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   227e2:	87da      	strh	r2, [r3, #62]	; 0x3e
}
   227e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   227e6:	3a01      	subs	r2, #1
   227e8:	b292      	uxth	r2, r2
   227ea:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
   227ec:	b922      	cbnz	r2, 227f8 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
   227ee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
   227f2:	e7f4      	b.n	227de <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   227f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
   227f8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   227fa:	18b3      	adds	r3, r6, r2
   227fc:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   22800:	f7ff fe32 	bl	22468 <isspace>
   22804:	4603      	mov	r3, r0
   22806:	2800      	cmp	r0, #0
   22808:	d1ed      	bne.n	227e6 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   2280a:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   2280c:	b29a      	uxth	r2, r3
   2280e:	fa16 f183 	uxtah	r1, r6, r3
   22812:	5cb0      	ldrb	r0, [r6, r2]
   22814:	f7ff fe28 	bl	22468 <isspace>
   22818:	461f      	mov	r7, r3
   2281a:	3301      	adds	r3, #1
   2281c:	2800      	cmp	r0, #0
   2281e:	d1f5      	bne.n	2280c <z_shell_cmd_trim+0x3a>
   22820:	b2bf      	uxth	r7, r7
	if (--i > 0) {
   22822:	2f00      	cmp	r7, #0
   22824:	d0db      	beq.n	227de <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   22826:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   22828:	3301      	adds	r3, #1
   2282a:	1a9a      	subs	r2, r3, r2
   2282c:	4630      	mov	r0, r6
   2282e:	f001 f9d6 	bl	23bde <memmove>
		*buff_len = *buff_len - i;
   22832:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   22834:	1bdb      	subs	r3, r3, r7
   22836:	87a3      	strh	r3, [r4, #60]	; 0x3c
   22838:	e7d1      	b.n	227de <z_shell_cmd_trim+0xc>

0002283a <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
   2283a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2283e:	4607      	mov	r7, r0
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
   22840:	a801      	add	r0, sp, #4
{
   22842:	460c      	mov	r4, r1
	size_t len = z_device_get_all_static(&dev);
   22844:	f7fc fda2 	bl	1f38c <z_device_get_all_static>
	const struct device *dev_end = dev + len;
   22848:	9d01      	ldr	r5, [sp, #4]
   2284a:	2318      	movs	r3, #24
   2284c:	fb03 5500 	mla	r5, r3, r0, r5
	size_t match_idx = 0;
   22850:	2600      	movs	r6, #0

	while (dev < dev_end) {
   22852:	9801      	ldr	r0, [sp, #4]
   22854:	42a8      	cmp	r0, r5
   22856:	d301      	bcc.n	2285c <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
   22858:	2000      	movs	r0, #0
   2285a:	e00d      	b.n	22878 <shell_device_lookup+0x3e>
	return z_device_is_ready(dev);
   2285c:	f004 f844 	bl	268e8 <z_device_is_ready>
		if (device_is_ready(dev)
   22860:	b1c8      	cbz	r0, 22896 <shell_device_lookup+0x5c>
		    && (dev->name != NULL)
   22862:	9b01      	ldr	r3, [sp, #4]
   22864:	6818      	ldr	r0, [r3, #0]
   22866:	b1b0      	cbz	r0, 22896 <shell_device_lookup+0x5c>
		    && (strlen(dev->name) != 0)
   22868:	f001 f979 	bl	23b5e <strlen>
   2286c:	b198      	cbz	r0, 22896 <shell_device_lookup+0x5c>
			|| (strncmp(prefix, dev->name,
   2286e:	9b01      	ldr	r3, [sp, #4]
		    && ((prefix == NULL)
   22870:	b92c      	cbnz	r4, 2287e <shell_device_lookup+0x44>
			if (match_idx == idx) {
   22872:	42be      	cmp	r6, r7
   22874:	d113      	bne.n	2289e <shell_device_lookup+0x64>
				return dev;
   22876:	9801      	ldr	r0, [sp, #4]
}
   22878:	b002      	add	sp, #8
   2287a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (strncmp(prefix, dev->name,
   2287e:	4620      	mov	r0, r4
   22880:	f8d3 8000 	ldr.w	r8, [r3]
   22884:	f001 f96b 	bl	23b5e <strlen>
   22888:	4641      	mov	r1, r8
   2288a:	4602      	mov	r2, r0
   2288c:	4620      	mov	r0, r4
   2288e:	f001 f982 	bl	23b96 <strncmp>
   22892:	2800      	cmp	r0, #0
   22894:	d0ed      	beq.n	22872 <shell_device_lookup+0x38>
		++dev;
   22896:	9b01      	ldr	r3, [sp, #4]
   22898:	3318      	adds	r3, #24
   2289a:	9301      	str	r3, [sp, #4]
   2289c:	e7d9      	b.n	22852 <shell_device_lookup+0x18>
			++match_idx;
   2289e:	3601      	adds	r6, #1
   228a0:	e7f9      	b.n	22896 <shell_device_lookup+0x5c>

000228a2 <shell_strtoul>:

	return val;
}

unsigned long shell_strtoul(const char *str, int base, int *err)
{
   228a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	unsigned long val;
	char *endptr = NULL;

	if (*str == '-') {
   228a4:	7803      	ldrb	r3, [r0, #0]
	char *endptr = NULL;
   228a6:	2700      	movs	r7, #0
	if (*str == '-') {
   228a8:	2b2d      	cmp	r3, #45	; 0x2d
{
   228aa:	4604      	mov	r4, r0
   228ac:	460d      	mov	r5, r1
   228ae:	4616      	mov	r6, r2
	char *endptr = NULL;
   228b0:	9701      	str	r7, [sp, #4]
	if (*str == '-') {
   228b2:	d106      	bne.n	228c2 <shell_strtoul+0x20>
		*err = -EINVAL;
		return 0;
   228b4:	f06f 0315 	mvn.w	r3, #21
	}

	errno = 0;
	val = strtoul(str, &endptr, base);
	if (errno == ERANGE) {
		*err = -ERANGE;
   228b8:	6033      	str	r3, [r6, #0]
		return 0;
   228ba:	2500      	movs	r5, #0
		*err = -EINVAL;
		return 0;
	}

	return val;
}
   228bc:	4628      	mov	r0, r5
   228be:	b003      	add	sp, #12
   228c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   228c2:	f7fc fd9b 	bl	1f3fc <z_impl_z_errno>
	val = strtoul(str, &endptr, base);
   228c6:	462a      	mov	r2, r5
	errno = 0;
   228c8:	6007      	str	r7, [r0, #0]
	val = strtoul(str, &endptr, base);
   228ca:	a901      	add	r1, sp, #4
   228cc:	4620      	mov	r0, r4
   228ce:	f001 f883 	bl	239d8 <strtoul>
   228d2:	4605      	mov	r5, r0
   228d4:	f7fc fd92 	bl	1f3fc <z_impl_z_errno>
	if (errno == ERANGE) {
   228d8:	6803      	ldr	r3, [r0, #0]
   228da:	2b22      	cmp	r3, #34	; 0x22
   228dc:	d102      	bne.n	228e4 <shell_strtoul+0x42>
   228de:	f06f 0321 	mvn.w	r3, #33	; 0x21
   228e2:	e7e9      	b.n	228b8 <shell_strtoul+0x16>
   228e4:	f7fc fd8a 	bl	1f3fc <z_impl_z_errno>
	} else if (errno || endptr == str || *endptr) {
   228e8:	6803      	ldr	r3, [r0, #0]
   228ea:	2b00      	cmp	r3, #0
   228ec:	d1e2      	bne.n	228b4 <shell_strtoul+0x12>
   228ee:	9b01      	ldr	r3, [sp, #4]
   228f0:	42a3      	cmp	r3, r4
   228f2:	d0df      	beq.n	228b4 <shell_strtoul+0x12>
   228f4:	781b      	ldrb	r3, [r3, #0]
   228f6:	2b00      	cmp	r3, #0
   228f8:	d0e0      	beq.n	228bc <shell_strtoul+0x1a>
   228fa:	e7db      	b.n	228b4 <shell_strtoul+0x12>

000228fc <z_shell_raw_fprintf>:
{
   228fc:	b40e      	push	{r1, r2, r3}
   228fe:	b503      	push	{r0, r1, lr}
   22900:	aa03      	add	r2, sp, #12
   22902:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   22906:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   22908:	f7e3 fdb8 	bl	647c <z_shell_fprintf_fmt>
}
   2290c:	b002      	add	sp, #8
   2290e:	f85d eb04 	ldr.w	lr, [sp], #4
   22912:	b003      	add	sp, #12
   22914:	4770      	bx	lr

00022916 <full_line_cmd>:
{
   22916:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   22918:	6883      	ldr	r3, [r0, #8]
{
   2291a:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2291c:	6818      	ldr	r0, [r3, #0]
   2291e:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
   22920:	b110      	cbz	r0, 22928 <full_line_cmd+0x12>
   22922:	f001 f91c 	bl	23b5e <strlen>
   22926:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   22928:	68a2      	ldr	r2, [r4, #8]
   2292a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2292c:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2292e:	fbb3 f1f2 	udiv	r1, r3, r2
   22932:	fb02 3011 	mls	r0, r2, r1, r3
}
   22936:	fab0 f080 	clz	r0, r0
   2293a:	0940      	lsrs	r0, r0, #5
   2293c:	bd38      	pop	{r3, r4, r5, pc}

0002293e <z_shell_cursor_in_empty_line>:
{
   2293e:	b538      	push	{r3, r4, r5, lr}
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
   22940:	6883      	ldr	r3, [r0, #8]
   22942:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   22946:	8fdd      	ldrh	r5, [r3, #62]	; 0x3e
{
   22948:	4604      	mov	r4, r0
		 z_shell_strlen(shell->ctx->prompt)) %
   2294a:	6818      	ldr	r0, [r3, #0]
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
   2294c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   22950:	4355      	muls	r5, r2
   22952:	b110      	cbz	r0, 2295a <z_shell_cursor_in_empty_line+0x1c>
   22954:	f001 f903 	bl	23b5e <strlen>
   22958:	b280      	uxth	r0, r0
			shell->ctx->vt100_ctx.cons.terminal_wid ==
   2295a:	68a2      	ldr	r2, [r4, #8]
   2295c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return (((shell->ctx->cmd_buff_pos * shell->ctx->cfg.flags.echo) +
   2295e:	1943      	adds	r3, r0, r5
		 z_shell_strlen(shell->ctx->prompt)) %
   22960:	fbb3 f1f2 	udiv	r1, r3, r2
   22964:	fb02 3011 	mls	r0, r2, r1, r3
}
   22968:	fab0 f080 	clz	r0, r0
   2296c:	0940      	lsrs	r0, r0, #5
   2296e:	bd38      	pop	{r3, r4, r5, pc}

00022970 <z_shell_op_cond_next_line>:
{
   22970:	b510      	push	{r4, lr}
   22972:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   22974:	f7ff ffe3 	bl	2293e <z_shell_cursor_in_empty_line>
   22978:	b120      	cbz	r0, 22984 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
   2297a:	6960      	ldr	r0, [r4, #20]
}
   2297c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
   22980:	f7e3 bdda 	b.w	6538 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   22984:	4620      	mov	r0, r4
   22986:	f7ff ffc6 	bl	22916 <full_line_cmd>
   2298a:	2800      	cmp	r0, #0
   2298c:	d1f5      	bne.n	2297a <z_shell_op_cond_next_line+0xa>
}
   2298e:	bd10      	pop	{r4, pc}

00022990 <z_shell_op_cursor_position_synchronize>:
{
   22990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   22992:	6884      	ldr	r4, [r0, #8]
{
   22994:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   22996:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   22998:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   2299a:	f104 0020 	add.w	r0, r4, #32
   2299e:	f7ff fd8d 	bl	224bc <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
   229a2:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
   229a4:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
   229a6:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   229a8:	f7ff ffb5 	bl	22916 <full_line_cmd>
   229ac:	b110      	cbz	r0, 229b4 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
   229ae:	6968      	ldr	r0, [r5, #20]
   229b0:	f7e3 fdc2 	bl	6538 <z_cursor_next_line_move.isra.0>
	if (last_line) {
   229b4:	42b7      	cmp	r7, r6
   229b6:	d107      	bne.n	229c8 <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   229b8:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   229ba:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   229bc:	4628      	mov	r0, r5
   229be:	1ac9      	subs	r1, r1, r3
}
   229c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   229c4:	f7e3 bdd4 	b.w	6570 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   229c8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   229ca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   229cc:	4628      	mov	r0, r5
   229ce:	1ac9      	subs	r1, r1, r3
   229d0:	f7e3 fdb8 	bl	6544 <z_shell_op_cursor_vert_move>
   229d4:	e7f0      	b.n	229b8 <z_shell_op_cursor_position_synchronize+0x28>

000229d6 <z_shell_op_cursor_move>:
{
   229d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229d8:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   229da:	6880      	ldr	r0, [r0, #8]
{
   229dc:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   229de:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   229e0:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   229e2:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   229e4:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   229e6:	f7ff fd69 	bl	224bc <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   229ea:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   229ec:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   229ee:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   229f0:	462a      	mov	r2, r5
   229f2:	3020      	adds	r0, #32
   229f4:	f7ff fd57 	bl	224a6 <z_row_span_with_buffer_offsets_get>
   229f8:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   229fa:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   229fc:	462a      	mov	r2, r5
   229fe:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   22a00:	3020      	adds	r0, #32
   22a02:	f7ff fd41 	bl	22488 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
   22a06:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
   22a08:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   22a0a:	4620      	mov	r0, r4
   22a0c:	f7e3 fd9a 	bl	6544 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   22a10:	4631      	mov	r1, r6
   22a12:	4620      	mov	r0, r4
   22a14:	f7e3 fdac 	bl	6570 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   22a18:	68a3      	ldr	r3, [r4, #8]
   22a1a:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
   22a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022a1e <z_shell_op_cursor_word_move>:
{
   22a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (val < 0) {
   22a22:	1e0c      	subs	r4, r1, #0
{
   22a24:	4606      	mov	r6, r0
	if (val < 0) {
   22a26:	da36      	bge.n	22a96 <z_shell_op_cursor_word_move+0x78>
		val = -val;
   22a28:	4264      	negs	r4, r4
   22a2a:	b224      	sxth	r4, r4
		sign = -1;
   22a2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22a30:	b2a4      	uxth	r4, r4
   22a32:	b2af      	uxth	r7, r5
   22a34:	e016      	b.n	22a64 <z_shell_op_cursor_word_move+0x46>
		shift = shift_calc(shell->ctx->cmd_buff,
   22a36:	68b3      	ldr	r3, [r6, #8]
   22a38:	f8b3 c03e 	ldrh.w	ip, [r3, #62]	; 0x3e
   22a3c:	f8b3 803c 	ldrh.w	r8, [r3, #60]	; 0x3c
   22a40:	f103 0e42 	add.w	lr, r3, #66	; 0x42
   22a44:	4661      	mov	r1, ip
	bool found = false;
   22a46:	2200      	movs	r2, #0
		if (((idx == 0U) && (sign < 0)) ||
   22a48:	b981      	cbnz	r1, 22a6c <z_shell_op_cursor_word_move+0x4e>
   22a4a:	1c6b      	adds	r3, r5, #1
   22a4c:	d002      	beq.n	22a54 <z_shell_op_cursor_word_move+0x36>
   22a4e:	f1b8 0f00 	cmp.w	r8, #0
   22a52:	d10f      	bne.n	22a74 <z_shell_op_cursor_word_move+0x56>
		idx = pos + ret * sign;
   22a54:	eba1 010c 	sub.w	r1, r1, ip
		z_shell_op_cursor_move(shell, sign * shift);
   22a58:	b209      	sxth	r1, r1
   22a5a:	4630      	mov	r0, r6
   22a5c:	f7ff ffbb 	bl	229d6 <z_shell_op_cursor_move>
   22a60:	3c01      	subs	r4, #1
   22a62:	b2a4      	uxth	r4, r4
	while (val--) {
   22a64:	2c00      	cmp	r4, #0
   22a66:	d1e6      	bne.n	22a36 <z_shell_op_cursor_word_move+0x18>
}
   22a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (((idx == 0U) && (sign < 0)) ||
   22a6c:	4588      	cmp	r8, r1
   22a6e:	d101      	bne.n	22a74 <z_shell_op_cursor_word_move+0x56>
		    ((idx == len) && (sign > 0))) {
   22a70:	2d01      	cmp	r5, #1
   22a72:	d0ef      	beq.n	22a54 <z_shell_op_cursor_word_move+0x36>
		if (isalnum((int)str[idx]) != 0) {
   22a74:	f81e 3001 	ldrb.w	r3, [lr, r1]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   22a78:	f043 0020 	orr.w	r0, r3, #32
   22a7c:	3861      	subs	r0, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   22a7e:	2819      	cmp	r0, #25
   22a80:	d907      	bls.n	22a92 <z_shell_op_cursor_word_move+0x74>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   22a82:	3b30      	subs	r3, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   22a84:	2b09      	cmp	r3, #9
   22a86:	d904      	bls.n	22a92 <z_shell_op_cursor_word_move+0x74>
			if (found) {
   22a88:	2a00      	cmp	r2, #0
   22a8a:	d1e3      	bne.n	22a54 <z_shell_op_cursor_word_move+0x36>
	while (1) {
   22a8c:	4439      	add	r1, r7
   22a8e:	b289      	uxth	r1, r1
		idx = pos + ret * sign;
   22a90:	e7da      	b.n	22a48 <z_shell_op_cursor_word_move+0x2a>
			found = true;
   22a92:	2201      	movs	r2, #1
   22a94:	e7fa      	b.n	22a8c <z_shell_op_cursor_word_move+0x6e>
		sign = 1;
   22a96:	2501      	movs	r5, #1
   22a98:	e7ca      	b.n	22a30 <z_shell_op_cursor_word_move+0x12>

00022a9a <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   22a9a:	6883      	ldr	r3, [r0, #8]
   22a9c:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
   22a9e:	4249      	negs	r1, r1
   22aa0:	b209      	sxth	r1, r1
   22aa2:	f7ff bf98 	b.w	229d6 <z_shell_op_cursor_move>

00022aa6 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   22aa6:	6883      	ldr	r3, [r0, #8]
   22aa8:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
   22aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   22aac:	1ac9      	subs	r1, r1, r3
   22aae:	b209      	sxth	r1, r1
   22ab0:	f7ff bf91 	b.w	229d6 <z_shell_op_cursor_move>

00022ab4 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   22ab4:	6883      	ldr	r3, [r0, #8]
   22ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   22ab8:	b11b      	cbz	r3, 22ac2 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   22aba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22abe:	f7ff bf8a 	b.w	229d6 <z_shell_op_cursor_move>
}
   22ac2:	4770      	bx	lr

00022ac4 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   22ac4:	6883      	ldr	r3, [r0, #8]
   22ac6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   22ac8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   22aca:	429a      	cmp	r2, r3
   22acc:	d202      	bcs.n	22ad4 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   22ace:	2101      	movs	r1, #1
   22ad0:	f7ff bf81 	b.w	229d6 <z_shell_op_cursor_move>
}
   22ad4:	4770      	bx	lr

00022ad6 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   22ad6:	6882      	ldr	r2, [r0, #8]
   22ad8:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
   22ada:	8791      	strh	r1, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   22adc:	6883      	ldr	r3, [r0, #8]
   22ade:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   22ae0:	4413      	add	r3, r2
   22ae2:	2200      	movs	r2, #0
   22ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
   22ae8:	f7e3 bd1a 	b.w	6520 <z_clear_eos>

00022aec <z_shell_cmd_line_erase>:
{
   22aec:	b510      	push	{r4, lr}
   22aee:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   22af0:	6880      	ldr	r0, [r0, #8]
   22af2:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   22af4:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   22af6:	3020      	adds	r0, #32
   22af8:	f7ff fce0 	bl	224bc <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   22afc:	68a3      	ldr	r3, [r4, #8]
   22afe:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   22b00:	4620      	mov	r0, r4
   22b02:	f1c1 0101 	rsb	r1, r1, #1
   22b06:	f7e3 fd33 	bl	6570 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   22b0a:	68a3      	ldr	r3, [r4, #8]
   22b0c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   22b0e:	4620      	mov	r0, r4
   22b10:	3901      	subs	r1, #1
   22b12:	f7e3 fd17 	bl	6544 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   22b16:	4620      	mov	r0, r4
}
   22b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   22b1c:	f7e3 bd00 	b.w	6520 <z_clear_eos>

00022b20 <z_shell_write>:
{
   22b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b24:	4605      	mov	r5, r0
   22b26:	b086      	sub	sp, #24
   22b28:	460f      	mov	r7, r1
   22b2a:	4614      	mov	r4, r2
	size_t offset = 0;
   22b2c:	2600      	movs	r6, #0
	while (length) {
   22b2e:	b9a4      	cbnz	r4, 22b5a <z_shell_write+0x3a>
}
   22b30:	b006      	add	sp, #24
   22b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return sh->ctx->ctx.flags.tx_rdy == 1;
   22b36:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
   22b3a:	0792      	lsls	r2, r2, #30
   22b3c:	d5fb      	bpl.n	22b36 <z_shell_write+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22b3e:	f3bf 8f5b 	dmb	ish
   22b42:	f503 7319 	add.w	r3, r3, #612	; 0x264
   22b46:	e853 1f00 	ldrex	r1, [r3]
   22b4a:	f021 0102 	bic.w	r1, r1, #2
   22b4e:	e843 1200 	strex	r2, r1, [r3]
   22b52:	2a00      	cmp	r2, #0
   22b54:	d1f7      	bne.n	22b46 <z_shell_write+0x26>
   22b56:	f3bf 8f5b 	dmb	ish
		int err = shell->iface->api->write(shell->iface,
   22b5a:	6868      	ldr	r0, [r5, #4]
   22b5c:	6803      	ldr	r3, [r0, #0]
   22b5e:	4622      	mov	r2, r4
   22b60:	f8d3 800c 	ldr.w	r8, [r3, #12]
   22b64:	19b9      	adds	r1, r7, r6
   22b66:	466b      	mov	r3, sp
   22b68:	47c0      	blx	r8
		offset += tmp_cnt;
   22b6a:	9a00      	ldr	r2, [sp, #0]
   22b6c:	4416      	add	r6, r2
		length -= tmp_cnt;
   22b6e:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
   22b70:	2a00      	cmp	r2, #0
   22b72:	d1dc      	bne.n	22b2e <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   22b74:	68ab      	ldr	r3, [r5, #8]
   22b76:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
   22b78:	2903      	cmp	r1, #3
   22b7a:	d0ee      	beq.n	22b5a <z_shell_write+0x3a>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   22b7c:	2902      	cmp	r1, #2
   22b7e:	d8da      	bhi.n	22b36 <z_shell_write+0x16>
		k_poll_event_init(&event,
   22b80:	f503 7326 	add.w	r3, r3, #664	; 0x298
   22b84:	2101      	movs	r1, #1
   22b86:	a801      	add	r0, sp, #4
   22b88:	f004 fc71 	bl	2746e <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
   22b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22b94:	2101      	movs	r1, #1
   22b96:	a801      	add	r0, sp, #4
   22b98:	f7fe f88a 	bl	20cb0 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   22b9c:	68a8      	ldr	r0, [r5, #8]
   22b9e:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
   22ba2:	f004 fc86 	bl	274b2 <z_impl_k_poll_signal_reset>
	while (length) {
   22ba6:	e7d8      	b.n	22b5a <z_shell_write+0x3a>

00022ba8 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   22ba8:	f7ff bfba 	b.w	22b20 <z_shell_write>

00022bac <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
   22bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22bae:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
   22bb0:	6881      	ldr	r1, [r0, #8]
   22bb2:	461e      	mov	r6, r3
   22bb4:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   22bb8:	06db      	lsls	r3, r3, #27
{
   22bba:	4604      	mov	r4, r0
   22bbc:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   22bbe:	d517      	bpl.n	22bf0 <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
   22bc0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   22bc4:	42bb      	cmp	r3, r7
   22bc6:	d013      	beq.n	22bf0 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   22bc8:	2202      	movs	r2, #2
   22bca:	312e      	adds	r1, #46	; 0x2e
   22bcc:	a801      	add	r0, sp, #4
   22bce:	f001 f81d 	bl	23c0c <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
   22bd2:	4639      	mov	r1, r7
   22bd4:	4620      	mov	r0, r4
   22bd6:	f7e3 fce9 	bl	65ac <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   22bda:	6960      	ldr	r0, [r4, #20]
   22bdc:	4632      	mov	r2, r6
   22bde:	4629      	mov	r1, r5
   22be0:	f7e3 fc4c 	bl	647c <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
   22be4:	a901      	add	r1, sp, #4
   22be6:	4620      	mov	r0, r4
   22be8:	f7e3 fd00 	bl	65ec <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   22bec:	b003      	add	sp, #12
   22bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   22bf0:	6960      	ldr	r0, [r4, #20]
   22bf2:	4632      	mov	r2, r6
   22bf4:	4629      	mov	r1, r5
}
   22bf6:	b003      	add	sp, #12
   22bf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   22bfc:	f7e3 bc3e 	b.w	647c <z_shell_fprintf_fmt>

00022c00 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
   22c00:	b40c      	push	{r2, r3}
   22c02:	b507      	push	{r0, r1, r2, lr}
   22c04:	ab04      	add	r3, sp, #16
   22c06:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
   22c0a:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
   22c0c:	f7ff ffce 	bl	22bac <z_shell_vfprintf>
	va_end(args);
}
   22c10:	b003      	add	sp, #12
   22c12:	f85d eb04 	ldr.w	lr, [sp], #4
   22c16:	b002      	add	sp, #8
   22c18:	4770      	bx	lr

00022c1a <data_insert>:
{
   22c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   22c1e:	6887      	ldr	r7, [r0, #8]
   22c20:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   22c22:	18b3      	adds	r3, r6, r2
   22c24:	2bff      	cmp	r3, #255	; 0xff
{
   22c26:	4605      	mov	r5, r0
   22c28:	4688      	mov	r8, r1
   22c2a:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   22c2c:	dc20      	bgt.n	22c70 <data_insert+0x56>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   22c2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   22c30:	1af6      	subs	r6, r6, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   22c32:	3342      	adds	r3, #66	; 0x42
   22c34:	441f      	add	r7, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   22c36:	b2b6      	uxth	r6, r6
	memmove(curr_pos + len, curr_pos, after);
   22c38:	4632      	mov	r2, r6
   22c3a:	4639      	mov	r1, r7
   22c3c:	1938      	adds	r0, r7, r4
   22c3e:	f000 ffce 	bl	23bde <memmove>
	memcpy(curr_pos, data, len);
   22c42:	4622      	mov	r2, r4
   22c44:	4641      	mov	r1, r8
   22c46:	4638      	mov	r0, r7
   22c48:	f000 ffe0 	bl	23c0c <memcpy>
	shell->ctx->cmd_buff_len += len;
   22c4c:	68aa      	ldr	r2, [r5, #8]
   22c4e:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
   22c50:	4423      	add	r3, r4
   22c52:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   22c54:	68ab      	ldr	r3, [r5, #8]
   22c56:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   22c58:	4413      	add	r3, r2
   22c5a:	2200      	movs	r2, #0
   22c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
   22c60:	68ab      	ldr	r3, [r5, #8]
   22c62:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
   22c66:	0789      	lsls	r1, r1, #30
   22c68:	d404      	bmi.n	22c74 <data_insert+0x5a>
		shell->ctx->cmd_buff_pos += len;
   22c6a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   22c6c:	4414      	add	r4, r2
   22c6e:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
   22c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   22c74:	4631      	mov	r1, r6
   22c76:	4628      	mov	r0, r5
}
   22c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   22c7c:	f7e3 bd34 	b.w	66e8 <reprint_from_cursor>

00022c80 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   22c80:	f7ff bfcb 	b.w	22c1a <data_insert>

00022c84 <z_shell_op_char_delete>:
{
   22c84:	b538      	push	{r3, r4, r5, lr}
   22c86:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   22c88:	6880      	ldr	r0, [r0, #8]
   22c8a:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
   22c8c:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
   22c8e:	1aa4      	subs	r4, r4, r2
   22c90:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   22c92:	b18c      	cbz	r4, 22cb8 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   22c94:	3242      	adds	r2, #66	; 0x42
   22c96:	4410      	add	r0, r2
	memmove(str, str + 1, diff);
   22c98:	1c41      	adds	r1, r0, #1
   22c9a:	4622      	mov	r2, r4
   22c9c:	f000 ff9f 	bl	23bde <memmove>
	--shell->ctx->cmd_buff_len;
   22ca0:	68aa      	ldr	r2, [r5, #8]
   22ca2:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
   22ca4:	3b01      	subs	r3, #1
   22ca6:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   22ca8:	1e61      	subs	r1, r4, #1
   22caa:	4628      	mov	r0, r5
   22cac:	2201      	movs	r2, #1
}
   22cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   22cb2:	b289      	uxth	r1, r1
   22cb4:	f7e3 bd18 	b.w	66e8 <reprint_from_cursor>
}
   22cb8:	bd38      	pop	{r3, r4, r5, pc}

00022cba <z_shell_op_char_backspace>:
{
   22cba:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
   22cbc:	6883      	ldr	r3, [r0, #8]
   22cbe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   22cc0:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   22cc2:	b152      	cbz	r2, 22cda <z_shell_op_char_backspace+0x20>
   22cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   22cc6:	b143      	cbz	r3, 22cda <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   22cc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22ccc:	f7ff fe83 	bl	229d6 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   22cd0:	4620      	mov	r0, r4
}
   22cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   22cd6:	f7ff bfd5 	b.w	22c84 <z_shell_op_char_delete>
}
   22cda:	bd10      	pop	{r4, pc}

00022cdc <process_msg_from_buffer>:
		}
	}
}

static bool process_msg_from_buffer(const struct shell *sh)
{
   22cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = sh->log_backend;
   22cde:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   22ce0:	695e      	ldr	r6, [r3, #20]
	const struct log_output *log_output = log_backend->log_output;
   22ce2:	685f      	ldr	r7, [r3, #4]
	return sh->ctx->cfg.flags.use_colors == 1;
   22ce4:	6883      	ldr	r3, [r0, #8]
	union log_msg_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(sh);

	msg = (union log_msg_generic *)mpsc_pbuf_claim(mpsc_buffer);
   22ce6:	4630      	mov	r0, r6
   22ce8:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
   22cec:	f7fe fef4 	bl	21ad8 <mpsc_pbuf_claim>
   22cf0:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
   22cf4:	4604      	mov	r4, r0
   22cf6:	b150      	cbz	r0, 22d0e <process_msg_from_buffer+0x32>
	log_output_msg_process(log_output, &msg->log, flags);
   22cf8:	4601      	mov	r1, r0
   22cfa:	f105 020e 	add.w	r2, r5, #14
   22cfe:	4638      	mov	r0, r7
   22d00:	f7e1 fc36 	bl	4570 <log_output_msg_process>
		return false;
	}

	process_log_msg(sh, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
   22d04:	4630      	mov	r0, r6
   22d06:	4621      	mov	r1, r4
   22d08:	f7fe ff38 	bl	21b7c <mpsc_pbuf_free>

	return true;
   22d0c:	2001      	movs	r0, #1
}
   22d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022d10 <dropped>:
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
   22d10:	6843      	ldr	r3, [r0, #4]
   22d12:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22d14:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   22d18:	f3bf 8f5b 	dmb	ish
   22d1c:	e853 cf00 	ldrex	ip, [r3]
   22d20:	448c      	add	ip, r1
   22d22:	e843 c000 	strex	r0, ip, [r3]
   22d26:	2800      	cmp	r0, #0
   22d28:	d1f8      	bne.n	22d1c <dropped+0xc>
   22d2a:	f3bf 8f5b 	dmb	ish
   22d2e:	6893      	ldr	r3, [r2, #8]
   22d30:	f3bf 8f5b 	dmb	ish
   22d34:	e853 0f00 	ldrex	r0, [r3]
   22d38:	4408      	add	r0, r1
   22d3a:	e843 0200 	strex	r2, r0, [r3]
   22d3e:	2a00      	cmp	r2, #0
   22d40:	d1f8      	bne.n	22d34 <dropped+0x24>
   22d42:	f3bf 8f5b 	dmb	ish
}
   22d46:	4770      	bx	lr

00022d48 <process>:

static void process(const struct log_backend *const backend,
		    union log_msg_generic *msg)
{
   22d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
   22d4c:	6843      	ldr	r3, [r0, #4]
   22d4e:	681e      	ldr	r6, [r3, #0]
	const struct shell_log_backend *log_backend = sh->log_backend;
   22d50:	69f3      	ldr	r3, [r6, #28]
   22d52:	68b2      	ldr	r2, [r6, #8]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   22d54:	f8d3 8014 	ldr.w	r8, [r3, #20]
   22d58:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(sh);
	struct k_poll_signal *signal;

	switch (sh->log_backend->control_block->state) {
   22d5c:	689a      	ldr	r2, [r3, #8]
	const struct log_output *log_output = log_backend->log_output;
   22d5e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	switch (sh->log_backend->control_block->state) {
   22d62:	7912      	ldrb	r2, [r2, #4]
   22d64:	2a01      	cmp	r2, #1
{
   22d66:	4607      	mov	r7, r0
   22d68:	460d      	mov	r5, r1
   22d6a:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (sh->log_backend->control_block->state) {
   22d6e:	d003      	beq.n	22d78 <process+0x30>
   22d70:	2a03      	cmp	r2, #3
   22d72:	d04a      	beq.n	22e0a <process+0xc2>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
   22d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (copy_to_pbuffer(mpsc_buffer, msg, log_backend->timeout)) {
   22d78:	68d8      	ldr	r0, [r3, #12]
	return msg->generic.type == Z_LOG_MSG2_LOG;
   22d7a:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
   22d7c:	0759      	lsls	r1, r3, #29
   22d7e:	d428      	bmi.n	22dd2 <process+0x8a>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   22d80:	682b      	ldr	r3, [r5, #0]
   22d82:	f3c3 2449 	ubfx	r4, r3, #9, #10
   22d86:	886b      	ldrh	r3, [r5, #2]
   22d88:	f3c3 03cb 	ubfx	r3, r3, #3, #12
   22d8c:	441c      	add	r4, r3
   22d8e:	3417      	adds	r4, #23
   22d90:	f024 0407 	bic.w	r4, r4, #7
   22d94:	08a4      	lsrs	r4, r4, #2
   22d96:	f240 31e7 	movw	r1, #999	; 0x3e7
   22d9a:	f04f 0a00 	mov.w	sl, #0
   22d9e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   22da2:	468e      	mov	lr, r1
   22da4:	4651      	mov	r1, sl
   22da6:	fbe0 e10c 	umlal	lr, r1, r0, ip
   22daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22dae:	2300      	movs	r3, #0
   22db0:	4670      	mov	r0, lr
   22db2:	f7dd fdb3 	bl	91c <__aeabi_uldivmod>
   22db6:	4602      	mov	r2, r0
   22db8:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
   22dba:	4640      	mov	r0, r8
   22dbc:	4621      	mov	r1, r4
   22dbe:	f7fe fded 	bl	2199c <mpsc_pbuf_alloc>
	if (!dst) {
   22dc2:	4681      	mov	r9, r0
   22dc4:	b938      	cbnz	r0, 22dd6 <process+0x8e>
				dropped(backend, 1);
   22dc6:	4638      	mov	r0, r7
   22dc8:	2101      	movs	r1, #1
}
   22dca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				dropped(backend, 1);
   22dce:	f7ff bf9f 	b.w	22d10 <dropped>
	return 0;
   22dd2:	2400      	movs	r4, #0
   22dd4:	e7df      	b.n	22d96 <process+0x4e>
	dst->hdr.data = msg->buf.hdr.data;
   22dd6:	4629      	mov	r1, r5
   22dd8:	6802      	ldr	r2, [r0, #0]
   22dda:	f851 3b04 	ldr.w	r3, [r1], #4
   22dde:	f3c3 039d 	ubfx	r3, r3, #2, #30
   22de2:	f363 029f 	bfi	r2, r3, #2, #30
   22de6:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
   22dea:	1e62      	subs	r2, r4, #1
   22dec:	0092      	lsls	r2, r2, #2
   22dee:	f000 ff0d 	bl	23c0c <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
   22df2:	4640      	mov	r0, r8
   22df4:	4649      	mov	r1, r9
   22df6:	f7fe fe4f 	bl	21a98 <mpsc_pbuf_commit>
					signal = &sh->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   22dfa:	68b0      	ldr	r0, [r6, #8]
   22dfc:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
   22e00:	4651      	mov	r1, sl
}
   22e02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e06:	f7fd bfaf 	b.w	20d68 <z_impl_k_poll_signal_raise>
		z_shell_cmd_line_erase(sh);
   22e0a:	4630      	mov	r0, r6
   22e0c:	f7ff fe6e 	bl	22aec <z_shell_cmd_line_erase>
		if (k_is_in_isr()) {
   22e10:	f003 fe4c 	bl	26aac <k_is_in_isr>
   22e14:	f104 070e 	add.w	r7, r4, #14
   22e18:	4604      	mov	r4, r0
   22e1a:	b308      	cbz	r0, 22e60 <process+0x118>
	__asm__ volatile(
   22e1c:	f04f 0320 	mov.w	r3, #32
   22e20:	f3ef 8411 	mrs	r4, BASEPRI
   22e24:	f383 8812 	msr	BASEPRI_MAX, r3
   22e28:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   22e2c:	68b3      	ldr	r3, [r6, #8]
   22e2e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(sh)) {
   22e32:	051a      	lsls	r2, r3, #20
   22e34:	d51e      	bpl.n	22e74 <process+0x12c>
	log_output_msg_process(log_output, &msg->log, flags);
   22e36:	463a      	mov	r2, r7
   22e38:	4629      	mov	r1, r5
   22e3a:	4648      	mov	r0, r9
   22e3c:	f7e1 fb98 	bl	4570 <log_output_msg_process>
   22e40:	68b3      	ldr	r3, [r6, #8]
   22e42:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(sh)) {
   22e46:	051b      	lsls	r3, r3, #20
   22e48:	d402      	bmi.n	22e50 <process+0x108>
			z_shell_print_prompt_and_cmd(sh);
   22e4a:	4630      	mov	r0, r6
   22e4c:	f7e3 fcbc 	bl	67c8 <z_shell_print_prompt_and_cmd>
		if (k_is_in_isr()) {
   22e50:	f003 fe2c 	bl	26aac <k_is_in_isr>
   22e54:	b190      	cbz	r0, 22e7c <process+0x134>
	__asm__ volatile(
   22e56:	f384 8811 	msr	BASEPRI, r4
   22e5a:	f3bf 8f6f 	isb	sy
}
   22e5e:	e789      	b.n	22d74 <process+0x2c>
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   22e60:	68b0      	ldr	r0, [r6, #8]
   22e62:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
   22e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22e6e:	f7fc fe71 	bl	1fb54 <z_impl_k_mutex_lock>
   22e72:	e7db      	b.n	22e2c <process+0xe4>
			z_shell_cmd_line_erase(sh);
   22e74:	4630      	mov	r0, r6
   22e76:	f7ff fe39 	bl	22aec <z_shell_cmd_line_erase>
   22e7a:	e7dc      	b.n	22e36 <process+0xee>
			k_mutex_unlock(&sh->ctx->wr_mtx);
   22e7c:	68b0      	ldr	r0, [r6, #8]
   22e7e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
}
   22e82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return z_impl_k_mutex_unlock(mutex);
   22e86:	f7fc bedf 	b.w	1fc48 <z_impl_k_mutex_unlock>

00022e8a <z_shell_log_backend_output_func>:
{
   22e8a:	b510      	push	{r4, lr}
   22e8c:	4613      	mov	r3, r2
   22e8e:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   22e90:	460a      	mov	r2, r1
   22e92:	4601      	mov	r1, r0
   22e94:	4618      	mov	r0, r3
   22e96:	f7ff fe87 	bl	22ba8 <z_shell_print_stream>
}
   22e9a:	4620      	mov	r0, r4
   22e9c:	bd10      	pop	{r4, pc}

00022e9e <z_shell_log_backend_enable>:
{
   22e9e:	b570      	push	{r4, r5, r6, lr}
   22ea0:	4604      	mov	r4, r0
   22ea2:	460d      	mov	r5, r1
   22ea4:	4616      	mov	r6, r2
	mpsc_pbuf_init(backend->mpsc_buffer, backend->mpsc_buffer_config);
   22ea6:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
   22eaa:	f7fe fd56 	bl	2195a <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
   22eae:	4632      	mov	r2, r6
   22eb0:	6820      	ldr	r0, [r4, #0]
   22eb2:	4629      	mov	r1, r5
   22eb4:	f7e1 f8de 	bl	4074 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   22eb8:	6863      	ldr	r3, [r4, #4]
   22eba:	685b      	ldr	r3, [r3, #4]
   22ebc:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   22ebe:	68a3      	ldr	r3, [r4, #8]
   22ec0:	2200      	movs	r2, #0
   22ec2:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   22ec4:	68a3      	ldr	r3, [r4, #8]
   22ec6:	2201      	movs	r2, #1
   22ec8:	711a      	strb	r2, [r3, #4]
}
   22eca:	bd70      	pop	{r4, r5, r6, pc}

00022ecc <z_shell_log_backend_disable>:
{
   22ecc:	b510      	push	{r4, lr}
   22ece:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
   22ed0:	6800      	ldr	r0, [r0, #0]
   22ed2:	f7e1 f8fd 	bl	40d0 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   22ed6:	68a3      	ldr	r3, [r4, #8]
   22ed8:	2202      	movs	r2, #2
   22eda:	711a      	strb	r2, [r3, #4]
}
   22edc:	bd10      	pop	{r4, pc}

00022ede <panic>:
{
   22ede:	b510      	push	{r4, lr}
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
   22ee0:	6843      	ldr	r3, [r0, #4]
   22ee2:	681c      	ldr	r4, [r3, #0]
	err = sh->iface->api->enable(sh->iface, true);
   22ee4:	6860      	ldr	r0, [r4, #4]
   22ee6:	6803      	ldr	r3, [r0, #0]
   22ee8:	2101      	movs	r1, #1
   22eea:	689b      	ldr	r3, [r3, #8]
   22eec:	4798      	blx	r3
	if (err == 0) {
   22eee:	bb48      	cbnz	r0, 22f44 <panic+0x66>
		sh->log_backend->control_block->state =
   22ef0:	69e3      	ldr	r3, [r4, #28]
   22ef2:	689b      	ldr	r3, [r3, #8]
   22ef4:	2203      	movs	r2, #3
   22ef6:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ef8:	68a3      	ldr	r3, [r4, #8]
   22efa:	f3bf 8f5b 	dmb	ish
   22efe:	f503 7319 	add.w	r3, r3, #612	; 0x264
   22f02:	e853 1f00 	ldrex	r1, [r3]
   22f06:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   22f0a:	e843 1200 	strex	r2, r1, [r3]
   22f0e:	2a00      	cmp	r2, #0
   22f10:	d1f7      	bne.n	22f02 <panic+0x24>
   22f12:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&sh->ctx->vt100_ctx.cons,
   22f16:	68a0      	ldr	r0, [r4, #8]
   22f18:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   22f1a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   22f1c:	3020      	adds	r0, #32
   22f1e:	f7ff facd 	bl	224bc <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(sh, -1);
   22f22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22f26:	4620      	mov	r0, r4
   22f28:	f7e3 fb0c 	bl	6544 <z_shell_op_cursor_vert_move>
					   -sh->ctx->vt100_ctx.cons.cur_x);
   22f2c:	68a3      	ldr	r3, [r4, #8]
   22f2e:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(sh,
   22f30:	4620      	mov	r0, r4
   22f32:	4249      	negs	r1, r1
   22f34:	f7e3 fb1c 	bl	6570 <z_shell_op_cursor_horiz_move>
		while (process_msg_from_buffer(sh)) {
   22f38:	4620      	mov	r0, r4
   22f3a:	f7ff fecf 	bl	22cdc <process_msg_from_buffer>
   22f3e:	2800      	cmp	r0, #0
   22f40:	d1fa      	bne.n	22f38 <panic+0x5a>
}
   22f42:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(sh->log_backend);
   22f44:	69e0      	ldr	r0, [r4, #28]
}
   22f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(sh->log_backend);
   22f4a:	f7ff bfbf 	b.w	22ecc <z_shell_log_backend_disable>

00022f4e <z_shell_log_backend_process>:
{
   22f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
			(const struct shell *)backend->backend->cb->ctx;
   22f50:	6803      	ldr	r3, [r0, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22f52:	6882      	ldr	r2, [r0, #8]
	const struct shell *sh =
   22f54:	685b      	ldr	r3, [r3, #4]
   22f56:	681d      	ldr	r5, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
   22f58:	68ab      	ldr	r3, [r5, #8]
   22f5a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   22f5e:	f3bf 8f5b 	dmb	ish
{
   22f62:	4604      	mov	r4, r0
   22f64:	f3c3 1300 	ubfx	r3, r3, #4, #1
   22f68:	2100      	movs	r1, #0
   22f6a:	e852 6f00 	ldrex	r6, [r2]
   22f6e:	e842 1000 	strex	r0, r1, [r2]
   22f72:	2800      	cmp	r0, #0
   22f74:	d1f9      	bne.n	22f6a <z_shell_log_backend_process+0x1c>
   22f76:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   22f7a:	b126      	cbz	r6, 22f86 <z_shell_log_backend_process+0x38>
		if (colors) {
   22f7c:	b94b      	cbnz	r3, 22f92 <z_shell_log_backend_process+0x44>
		log_output_dropped_process(backend->log_output, dropped);
   22f7e:	6860      	ldr	r0, [r4, #4]
   22f80:	4631      	mov	r1, r6
   22f82:	f7e1 fb2b 	bl	45dc <log_output_dropped_process>
	return process_msg_from_buffer(sh);
   22f86:	4628      	mov	r0, r5
}
   22f88:	b002      	add	sp, #8
   22f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return process_msg_from_buffer(sh);
   22f8e:	f7ff bea5 	b.w	22cdc <process_msg_from_buffer>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   22f92:	68a9      	ldr	r1, [r5, #8]
   22f94:	2202      	movs	r2, #2
   22f96:	312e      	adds	r1, #46	; 0x2e
   22f98:	a801      	add	r0, sp, #4
   22f9a:	f000 fe37 	bl	23c0c <memcpy>
			z_shell_vt100_color_set(sh, SHELL_VT100_COLOR_RED);
   22f9e:	4628      	mov	r0, r5
   22fa0:	2101      	movs	r1, #1
   22fa2:	f7e3 fb03 	bl	65ac <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   22fa6:	6860      	ldr	r0, [r4, #4]
   22fa8:	4631      	mov	r1, r6
   22faa:	f7e1 fb17 	bl	45dc <log_output_dropped_process>
			z_shell_vt100_colors_restore(sh, &col);
   22fae:	a901      	add	r1, sp, #4
   22fb0:	4628      	mov	r0, r5
   22fb2:	f7e3 fb1b 	bl	65ec <z_shell_vt100_colors_restore>
   22fb6:	e7e6      	b.n	22f86 <z_shell_log_backend_process+0x38>

00022fb8 <z_shell_raw_fprintf>:
{
   22fb8:	b40e      	push	{r1, r2, r3}
   22fba:	b503      	push	{r0, r1, lr}
   22fbc:	aa03      	add	r2, sp, #12
   22fbe:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   22fc2:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   22fc4:	f7e3 fa5a 	bl	647c <z_shell_fprintf_fmt>
}
   22fc8:	b002      	add	sp, #8
   22fca:	f85d eb04 	ldr.w	lr, [sp], #4
   22fce:	b003      	add	sp, #12
   22fd0:	4770      	bx	lr

00022fd2 <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *shell, const char *str,
   22fd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22fd6:	4605      	mov	r5, r0
   22fd8:	4690      	mov	r8, r2
	if (str == NULL) {
   22fda:	460e      	mov	r6, r1
   22fdc:	2900      	cmp	r1, #0
   22fde:	d066      	beq.n	230ae <formatted_text_print.constprop.0+0xdc>
   22fe0:	2400      	movs	r4, #0
	while (isspace((int) *(str + offset))) {
   22fe2:	5d33      	ldrb	r3, [r6, r4]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   22fe4:	2b20      	cmp	r3, #32
   22fe6:	d002      	beq.n	22fee <formatted_text_print.constprop.0+0x1c>
   22fe8:	3b09      	subs	r3, #9
   22fea:	2b04      	cmp	r3, #4
   22fec:	d83e      	bhi.n	2306c <formatted_text_print.constprop.0+0x9a>
		++offset;
   22fee:	3401      	adds	r4, #1
   22ff0:	e7f7      	b.n	22fe2 <formatted_text_print.constprop.0+0x10>
   22ff2:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
   22ff4:	2700      	movs	r7, #0
   22ff6:	42b8      	cmp	r0, r7
   22ff8:	d014      	beq.n	23024 <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
   22ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
   22ffe:	2a0a      	cmp	r2, #10
   23000:	d119      	bne.n	23036 <formatted_text_print.constprop.0+0x64>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   23002:	6968      	ldr	r0, [r5, #20]
   23004:	f7ff fa06 	bl	22414 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   23008:	4649      	mov	r1, r9
   2300a:	463a      	mov	r2, r7
   2300c:	4628      	mov	r0, r5
   2300e:	f7ff fd87 	bl	22b20 <z_shell_write>
					z_cursor_next_line_move(shell);
   23012:	6968      	ldr	r0, [r5, #20]
   23014:	f7e3 fbf0 	bl	67f8 <z_cursor_next_line_move.isra.0>
   23018:	3401      	adds	r4, #1
					z_shell_op_cursor_horiz_move(shell,
   2301a:	4641      	mov	r1, r8
   2301c:	4628      	mov	r0, r5
					offset += idx + 1;
   2301e:	443c      	add	r4, r7
					z_shell_op_cursor_horiz_move(shell,
   23020:	f7e3 faa6 	bl	6570 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   23024:	6968      	ldr	r0, [r5, #20]
   23026:	1931      	adds	r1, r6, r4
   23028:	f7ff ffc6 	bl	22fb8 <z_shell_raw_fprintf>
	z_cursor_next_line_move(shell);
   2302c:	6968      	ldr	r0, [r5, #20]
}
   2302e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	z_cursor_next_line_move(shell);
   23032:	f7e3 bbe1 	b.w	67f8 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
   23036:	3701      	adds	r7, #1
   23038:	e7dd      	b.n	22ff6 <formatted_text_print.constprop.0+0x24>
   2303a:	461f      	mov	r7, r3
   2303c:	6968      	ldr	r0, [r5, #20]
   2303e:	f7ff f9e9 	bl	22414 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   23042:	463a      	mov	r2, r7
   23044:	4649      	mov	r1, r9
   23046:	4628      	mov	r0, r5
   23048:	f7ff fd6a 	bl	22b20 <z_shell_write>
		offset += length;
   2304c:	443c      	add	r4, r7
		while (isspace((int) (*(str + offset)))) {
   2304e:	5d33      	ldrb	r3, [r6, r4]
   23050:	2b20      	cmp	r3, #32
   23052:	d002      	beq.n	2305a <formatted_text_print.constprop.0+0x88>
   23054:	3b09      	subs	r3, #9
   23056:	2b04      	cmp	r3, #4
   23058:	d801      	bhi.n	2305e <formatted_text_print.constprop.0+0x8c>
			++offset;
   2305a:	3401      	adds	r4, #1
   2305c:	e7f7      	b.n	2304e <formatted_text_print.constprop.0+0x7c>
		z_cursor_next_line_move(shell);
   2305e:	6968      	ldr	r0, [r5, #20]
   23060:	f7e3 fbca 	bl	67f8 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   23064:	4641      	mov	r1, r8
   23066:	4628      	mov	r0, r5
   23068:	f7e3 fa82 	bl	6570 <z_shell_op_cursor_horiz_move>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   2306c:	4630      	mov	r0, r6
   2306e:	f000 fd76 	bl	23b5e <strlen>
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   23072:	68ab      	ldr	r3, [r5, #8]
   23074:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   23076:	b280      	uxth	r0, r0
   23078:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   2307a:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   2307e:	4298      	cmp	r0, r3
   23080:	eb06 0904 	add.w	r9, r6, r4
   23084:	d9b5      	bls.n	22ff2 <formatted_text_print.constprop.0+0x20>
   23086:	4648      	mov	r0, r9
		size_t idx = 0;
   23088:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx)))) {
   2308a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2308e:	2a20      	cmp	r2, #32
   23090:	d006      	beq.n	230a0 <formatted_text_print.constprop.0+0xce>
   23092:	f1a2 0c09 	sub.w	ip, r2, #9
   23096:	f1bc 0f04 	cmp.w	ip, #4
   2309a:	d802      	bhi.n	230a2 <formatted_text_print.constprop.0+0xd0>
				if (*(str + offset + idx) == '\n') {
   2309c:	2a0a      	cmp	r2, #10
   2309e:	d0cd      	beq.n	2303c <formatted_text_print.constprop.0+0x6a>
   230a0:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
   230a2:	eb08 0207 	add.w	r2, r8, r7
   230a6:	4291      	cmp	r1, r2
   230a8:	d9c7      	bls.n	2303a <formatted_text_print.constprop.0+0x68>
			++idx;
   230aa:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   230ac:	e7ed      	b.n	2308a <formatted_text_print.constprop.0+0xb8>
}
   230ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000230b2 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   230b2:	6983      	ldr	r3, [r0, #24]
   230b4:	2000      	movs	r0, #0
   230b6:	6018      	str	r0, [r3, #0]
}
   230b8:	4770      	bx	lr

000230ba <z_shell_raw_fprintf>:
{
   230ba:	b40e      	push	{r1, r2, r3}
   230bc:	b503      	push	{r0, r1, lr}
   230be:	aa03      	add	r2, sp, #12
   230c0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   230c4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   230c6:	f7e3 f9d9 	bl	647c <z_shell_fprintf_fmt>
}
   230ca:	b002      	add	sp, #8
   230cc:	f85d eb04 	ldr.w	lr, [sp], #4
   230d0:	b003      	add	sp, #12
   230d2:	4770      	bx	lr

000230d4 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   230d4:	6883      	ldr	r3, [r0, #8]
   230d6:	f3bf 8f5b 	dmb	ish
   230da:	f503 7318 	add.w	r3, r3, #608	; 0x260
   230de:	e853 1f00 	ldrex	r1, [r3]
   230e2:	f021 0108 	bic.w	r1, r1, #8
   230e6:	e843 1200 	strex	r2, r1, [r3]
   230ea:	2a00      	cmp	r2, #0
   230ec:	d1f7      	bne.n	230de <cmd_bacskpace_mode_backspace+0xa>
   230ee:	f3bf 8f5b 	dmb	ish
}
   230f2:	2000      	movs	r0, #0
   230f4:	4770      	bx	lr

000230f6 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   230f6:	6883      	ldr	r3, [r0, #8]
   230f8:	f3bf 8f5b 	dmb	ish
   230fc:	f503 7318 	add.w	r3, r3, #608	; 0x260
   23100:	e853 1f00 	ldrex	r1, [r3]
   23104:	f041 0108 	orr.w	r1, r1, #8
   23108:	e843 1200 	strex	r2, r1, [r3]
   2310c:	2a00      	cmp	r2, #0
   2310e:	d1f7      	bne.n	23100 <cmd_bacskpace_mode_delete+0xa>
   23110:	f3bf 8f5b 	dmb	ish
}
   23114:	2000      	movs	r0, #0
   23116:	4770      	bx	lr

00023118 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23118:	6883      	ldr	r3, [r0, #8]
   2311a:	f3bf 8f5b 	dmb	ish
   2311e:	f503 7318 	add.w	r3, r3, #608	; 0x260
   23122:	e853 1f00 	ldrex	r1, [r3]
   23126:	f021 0102 	bic.w	r1, r1, #2
   2312a:	e843 1200 	strex	r2, r1, [r3]
   2312e:	2a00      	cmp	r2, #0
   23130:	d1f7      	bne.n	23122 <cmd_echo_off+0xa>
   23132:	f3bf 8f5b 	dmb	ish
}
   23136:	2000      	movs	r0, #0
   23138:	4770      	bx	lr

0002313a <cmd_colors_off>:
   2313a:	6883      	ldr	r3, [r0, #8]
   2313c:	f3bf 8f5b 	dmb	ish
   23140:	f503 7318 	add.w	r3, r3, #608	; 0x260
   23144:	e853 1f00 	ldrex	r1, [r3]
   23148:	f021 0110 	bic.w	r1, r1, #16
   2314c:	e843 1200 	strex	r2, r1, [r3]
   23150:	2a00      	cmp	r2, #0
   23152:	d1f7      	bne.n	23144 <cmd_colors_off+0xa>
   23154:	f3bf 8f5b 	dmb	ish
}
   23158:	2000      	movs	r0, #0
   2315a:	4770      	bx	lr

0002315c <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2315c:	6883      	ldr	r3, [r0, #8]
   2315e:	f3bf 8f5b 	dmb	ish
   23162:	f503 7318 	add.w	r3, r3, #608	; 0x260
   23166:	e853 1f00 	ldrex	r1, [r3]
   2316a:	f041 0110 	orr.w	r1, r1, #16
   2316e:	e843 1200 	strex	r2, r1, [r3]
   23172:	2a00      	cmp	r2, #0
   23174:	d1f7      	bne.n	23166 <cmd_colors_on+0xa>
   23176:	f3bf 8f5b 	dmb	ish
}
   2317a:	2000      	movs	r0, #0
   2317c:	4770      	bx	lr

0002317e <cmd_echo_on>:
   2317e:	6883      	ldr	r3, [r0, #8]
   23180:	f3bf 8f5b 	dmb	ish
   23184:	f503 7318 	add.w	r3, r3, #608	; 0x260
   23188:	e853 1f00 	ldrex	r1, [r3]
   2318c:	f041 0102 	orr.w	r1, r1, #2
   23190:	e843 1200 	strex	r2, r1, [r3]
   23194:	2a00      	cmp	r2, #0
   23196:	d1f7      	bne.n	23188 <cmd_echo_on+0xa>
   23198:	f3bf 8f5b 	dmb	ish
}
   2319c:	2000      	movs	r0, #0
   2319e:	4770      	bx	lr

000231a0 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   231a0:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   231a2:	6883      	ldr	r3, [r0, #8]
	sys_dnode_t *const next = node->next;
   231a4:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   231a8:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   231aa:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   231ac:	2100      	movs	r1, #0
	node->prev = NULL;
   231ae:	e9c3 1100 	strd	r1, r1, [r3]
	sys_dlist_remove(l_item);

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
   231b2:	891a      	ldrh	r2, [r3, #8]
   231b4:	895b      	ldrh	r3, [r3, #10]
	ring_buf_get(history->ring_buf, NULL, total_len);
   231b6:	6800      	ldr	r0, [r0, #0]
			h_item->len + h_item->padding;
   231b8:	441a      	add	r2, r3
	ring_buf_get(history->ring_buf, NULL, total_len);
   231ba:	320c      	adds	r2, #12
   231bc:	f7fe faa6 	bl	2170c <ring_buf_get>

	return true;
}
   231c0:	2001      	movs	r0, #1
   231c2:	bd08      	pop	{r3, pc}

000231c4 <z_shell_history_mode_exit>:
	history->current = NULL;
   231c4:	2300      	movs	r3, #0
   231c6:	60c3      	str	r3, [r0, #12]
}
   231c8:	4770      	bx	lr

000231ca <z_shell_history_get>:
{
   231ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   231cc:	461f      	mov	r7, r3
	return list->head == list;
   231ce:	4603      	mov	r3, r0
   231d0:	4616      	mov	r6, r2
   231d2:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
   231d6:	429c      	cmp	r4, r3
   231d8:	d102      	bne.n	231e0 <z_shell_history_get+0x16>
		*len = 0U;
   231da:	2000      	movs	r0, #0
   231dc:	8038      	strh	r0, [r7, #0]
}
   231de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
   231e0:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
   231e2:	b9b1      	cbnz	r1, 23212 <z_shell_history_get+0x48>
		if (history->current == NULL) {
   231e4:	2d00      	cmp	r5, #0
   231e6:	d0f8      	beq.n	231da <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   231e8:	42ac      	cmp	r4, r5
   231ea:	d102      	bne.n	231f2 <z_shell_history_get+0x28>
	history->current = l_item;
   231ec:	2300      	movs	r3, #0
   231ee:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   231f0:	e7f3      	b.n	231da <z_shell_history_get+0x10>
   231f2:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   231f4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   231f6:	2c00      	cmp	r4, #0
   231f8:	d0ef      	beq.n	231da <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   231fa:	8922      	ldrh	r2, [r4, #8]
   231fc:	f104 010c 	add.w	r1, r4, #12
   23200:	4630      	mov	r0, r6
   23202:	f000 fd03 	bl	23c0c <memcpy>
		*len = h_item->len;
   23206:	8923      	ldrh	r3, [r4, #8]
   23208:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   2320a:	2200      	movs	r2, #0
   2320c:	54f2      	strb	r2, [r6, r3]
		return true;
   2320e:	2001      	movs	r0, #1
   23210:	e7e5      	b.n	231de <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   23212:	2d00      	cmp	r5, #0
   23214:	d0ee      	beq.n	231f4 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   23216:	6883      	ldr	r3, [r0, #8]
   23218:	42ab      	cmp	r3, r5
   2321a:	d0e7      	beq.n	231ec <z_shell_history_get+0x22>
   2321c:	682c      	ldr	r4, [r5, #0]
   2321e:	e7e9      	b.n	231f4 <z_shell_history_get+0x2a>

00023220 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
   23220:	b538      	push	{r3, r4, r5, lr}
   23222:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   23224:	1d05      	adds	r5, r0, #4
   23226:	6863      	ldr	r3, [r4, #4]
   23228:	42ab      	cmp	r3, r5
   2322a:	d004      	beq.n	23236 <z_shell_history_purge+0x16>
   2322c:	4620      	mov	r0, r4
   2322e:	f7ff ffb7 	bl	231a0 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   23232:	2800      	cmp	r0, #0
   23234:	d1f7      	bne.n	23226 <z_shell_history_purge+0x6>
	}
}
   23236:	bd38      	pop	{r3, r4, r5, pc}

00023238 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   23238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item, *h_prev_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   2323c:	f102 050c 	add.w	r5, r2, #12
	return buf->size;
   23240:	6803      	ldr	r3, [r0, #0]
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   23242:	f1c5 0900 	rsb	r9, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   23246:	69db      	ldr	r3, [r3, #28]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   23248:	f009 0903 	and.w	r9, r9, #3
{
   2324c:	b085      	sub	sp, #20
	total_len += padding;
   2324e:	444d      	add	r5, r9
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   23250:	429d      	cmp	r5, r3
{
   23252:	4604      	mov	r4, r0
   23254:	9101      	str	r1, [sp, #4]
   23256:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   23258:	d810      	bhi.n	2327c <z_shell_history_put+0x44>
	history->current = NULL;
   2325a:	2300      	movs	r3, #0
   2325c:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   2325e:	b16a      	cbz	r2, 2327c <z_shell_history_put+0x44>
	return list->head == list;
   23260:	6846      	ldr	r6, [r0, #4]
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   23262:	f100 0a04 	add.w	sl, r0, #4
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23266:	45b2      	cmp	sl, r6
   23268:	d00b      	beq.n	23282 <z_shell_history_put+0x4a>
	h_prev_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	if (l_item &&
   2326a:	b15e      	cbz	r6, 23284 <z_shell_history_put+0x4c>
	   (h_prev_item->len == len) &&
   2326c:	8933      	ldrh	r3, [r6, #8]
	if (l_item &&
   2326e:	4293      	cmp	r3, r2
   23270:	d108      	bne.n	23284 <z_shell_history_put+0x4c>
	   (memcmp(h_prev_item->data, line, len) == 0)) {
   23272:	f106 000c 	add.w	r0, r6, #12
   23276:	f000 fca2 	bl	23bbe <memcmp>
	   (h_prev_item->len == len) &&
   2327a:	b918      	cbnz	r0, 23284 <z_shell_history_put+0x4c>
		}

		ring_buf_put_finish(history->ring_buf, 0);
		remove_from_tail(history);
	} while (1);
}
   2327c:	b005      	add	sp, #20
   2327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23282:	461e      	mov	r6, r3
		ring_buf_put_finish(history->ring_buf, 0);
   23284:	f04f 0800 	mov.w	r8, #0
		if (ring_buf_is_empty(history->ring_buf)) {
   23288:	6823      	ldr	r3, [r4, #0]
   2328a:	6919      	ldr	r1, [r3, #16]
   2328c:	689a      	ldr	r2, [r3, #8]
   2328e:	4291      	cmp	r1, r2
	buf->put_head = buf->put_tail = buf->put_base = value;
   23290:	bf01      	itttt	eq
   23292:	e9c3 8802 	strdeq	r8, r8, [r3, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
   23296:	e9c3 8805 	strdeq	r8, r8, [r3, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
   2329a:	f8c3 8004 	streq.w	r8, [r3, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
   2329e:	f8c3 8010 	streq.w	r8, [r3, #16]
		claim_len = ring_buf_put_claim(history->ring_buf,
   232a2:	6820      	ldr	r0, [r4, #0]
   232a4:	462a      	mov	r2, r5
   232a6:	a903      	add	r1, sp, #12
   232a8:	f7fe f9a8 	bl	215fc <ring_buf_put_claim>
		if (claim_len < total_len) {
   232ac:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   232ae:	4683      	mov	fp, r0
		if (claim_len < total_len) {
   232b0:	d91e      	bls.n	232f0 <z_shell_history_put+0xb8>
				ring_buf_put_claim(history->ring_buf,
   232b2:	6820      	ldr	r0, [r4, #0]
   232b4:	462a      	mov	r2, r5
   232b6:	a903      	add	r1, sp, #12
   232b8:	f7fe f9a0 	bl	215fc <ring_buf_put_claim>
			if (claim2_len == total_len) {
   232bc:	4285      	cmp	r5, r0
   232be:	d118      	bne.n	232f2 <z_shell_history_put+0xba>
				h_prev_item->padding += claim_len;
   232c0:	8972      	ldrh	r2, [r6, #10]
   232c2:	445a      	add	r2, fp
   232c4:	8172      	strh	r2, [r6, #10]
				total_len += claim_len;
   232c6:	44ab      	add	fp, r5
			add_to_head(history, h_item, line, len, padding);
   232c8:	9d03      	ldr	r5, [sp, #12]
	memcpy(item->data, src, len);
   232ca:	9901      	ldr	r1, [sp, #4]
	item->len = len;
   232cc:	812f      	strh	r7, [r5, #8]
	memcpy(item->data, src, len);
   232ce:	463a      	mov	r2, r7
	item->padding = padding;
   232d0:	f8a5 900a 	strh.w	r9, [r5, #10]
	memcpy(item->data, src, len);
   232d4:	f105 000c 	add.w	r0, r5, #12
   232d8:	f000 fc98 	bl	23c0c <memcpy>
	sys_dnode_t *const head = list->head;
   232dc:	6862      	ldr	r2, [r4, #4]
	node->prev = list;
   232de:	e9c5 2a00 	strd	r2, sl, [r5]
	head->prev = node;
   232e2:	6055      	str	r5, [r2, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   232e4:	6820      	ldr	r0, [r4, #0]
	list->head = node;
   232e6:	6065      	str	r5, [r4, #4]
   232e8:	4659      	mov	r1, fp
   232ea:	f7fe f9a6 	bl	2163a <ring_buf_put_finish>
			break;
   232ee:	e7c5      	b.n	2327c <z_shell_history_put+0x44>
		if (claim_len == total_len) {
   232f0:	d0ea      	beq.n	232c8 <z_shell_history_put+0x90>
		ring_buf_put_finish(history->ring_buf, 0);
   232f2:	6820      	ldr	r0, [r4, #0]
   232f4:	2100      	movs	r1, #0
   232f6:	f7fe f9a0 	bl	2163a <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   232fa:	6863      	ldr	r3, [r4, #4]
   232fc:	459a      	cmp	sl, r3
   232fe:	d0c3      	beq.n	23288 <z_shell_history_put+0x50>
   23300:	4620      	mov	r0, r4
   23302:	f7ff ff4d 	bl	231a0 <remove_from_tail.part.0>
   23306:	e7bf      	b.n	23288 <z_shell_history_put+0x50>

00023308 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   23308:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   2330a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   2330e:	2300      	movs	r3, #0
   23310:	60c3      	str	r3, [r0, #12]
}
   23312:	4770      	bx	lr

00023314 <z_shell_has_wildcard>:
{
   23314:	b510      	push	{r4, lr}
   23316:	4604      	mov	r4, r0
   23318:	b128      	cbz	r0, 23326 <z_shell_has_wildcard+0x12>
   2331a:	f000 fc20 	bl	23b5e <strlen>
	for (size_t i = 0; i < str_len; i++) {
   2331e:	2300      	movs	r3, #0
   23320:	b280      	uxth	r0, r0
   23322:	4298      	cmp	r0, r3
   23324:	d801      	bhi.n	2332a <z_shell_has_wildcard+0x16>
	return false;
   23326:	2000      	movs	r0, #0
}
   23328:	bd10      	pop	{r4, pc}
		if ((str[i] == '?') || (str[i] == '*')) {
   2332a:	5ce2      	ldrb	r2, [r4, r3]
   2332c:	2a3f      	cmp	r2, #63	; 0x3f
   2332e:	d003      	beq.n	23338 <z_shell_has_wildcard+0x24>
   23330:	2a2a      	cmp	r2, #42	; 0x2a
   23332:	d001      	beq.n	23338 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   23334:	3301      	adds	r3, #1
   23336:	e7f4      	b.n	23322 <z_shell_has_wildcard+0xe>
			return true;
   23338:	2001      	movs	r0, #1
   2333a:	e7f5      	b.n	23328 <z_shell_has_wildcard+0x14>

0002333c <z_shell_wildcard_prepare>:
{
   2333c:	b510      	push	{r4, lr}
   2333e:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   23340:	6880      	ldr	r0, [r0, #8]
   23342:	f44f 7280 	mov.w	r2, #256	; 0x100
   23346:	2100      	movs	r1, #0
   23348:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2334c:	f000 fc69 	bl	23c22 <memset>
	memcpy(shell->ctx->temp_buff,
   23350:	68a0      	ldr	r0, [r4, #8]
   23352:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   23354:	f100 0142 	add.w	r1, r0, #66	; 0x42
   23358:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2335c:	f000 fc56 	bl	23c0c <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   23360:	68a0      	ldr	r0, [r4, #8]
   23362:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   23366:	f7ff fa03 	bl	22770 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   2336a:	68a0      	ldr	r0, [r4, #8]
   2336c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   23370:	f000 fbf5 	bl	23b5e <strlen>
   23374:	68a3      	ldr	r3, [r4, #8]
   23376:	3001      	adds	r0, #1
   23378:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
   2337c:	bd10      	pop	{r4, pc}

0002337e <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   2337e:	b510      	push	{r4, lr}
   23380:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   23382:	6880      	ldr	r0, [r0, #8]
   23384:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   23388:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   2338c:	3042      	adds	r0, #66	; 0x42
   2338e:	f000 fc3d 	bl	23c0c <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   23392:	68a3      	ldr	r3, [r4, #8]
   23394:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   23398:	879a      	strh	r2, [r3, #60]	; 0x3c
}
   2339a:	bd10      	pop	{r4, pc}

0002339c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
   2339c:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   2339e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
   233a2:	46a4      	mov	ip, r4

  return ret;
}
   233a4:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   233a6:	4760      	bx	ip

000233a8 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   233a8:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   233aa:	6804      	ldr	r4, [r0, #0]
   233ac:	6880      	ldr	r0, [r0, #8]
   233ae:	46a4      	mov	ip, r4

  return ret;
}
   233b0:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   233b2:	4760      	bx	ip

000233b4 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
   233b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   233b6:	2301      	movs	r3, #1
{
   233b8:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   233ba:	aa01      	add	r2, sp, #4
   233bc:	2120      	movs	r1, #32
{
   233be:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   233c0:	f7ff ffec 	bl	2339c <hts221_read_reg>

  if (ret == 0)
   233c4:	b958      	cbnz	r0, 233de <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
   233c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   233ca:	f365 0301 	bfi	r3, r5, #0, #2
   233ce:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   233d2:	aa01      	add	r2, sp, #4
   233d4:	2301      	movs	r3, #1
   233d6:	2120      	movs	r1, #32
   233d8:	4620      	mov	r0, r4
   233da:	f7ff ffe5 	bl	233a8 <hts221_write_reg>
  }

  return ret;
}
   233de:	b003      	add	sp, #12
   233e0:	bd30      	pop	{r4, r5, pc}

000233e2 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   233e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   233e4:	2301      	movs	r3, #1
{
   233e6:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   233e8:	aa01      	add	r2, sp, #4
   233ea:	2120      	movs	r1, #32
{
   233ec:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   233ee:	f7ff ffd5 	bl	2339c <hts221_read_reg>

  if (ret == 0)
   233f2:	b958      	cbnz	r0, 2340c <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
   233f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   233f8:	f365 0382 	bfi	r3, r5, #2, #1
   233fc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23400:	aa01      	add	r2, sp, #4
   23402:	2301      	movs	r3, #1
   23404:	2120      	movs	r1, #32
   23406:	4620      	mov	r0, r4
   23408:	f7ff ffce 	bl	233a8 <hts221_write_reg>
  }

  return ret;
}
   2340c:	b003      	add	sp, #12
   2340e:	bd30      	pop	{r4, r5, pc}

00023410 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   23410:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
   23412:	2301      	movs	r3, #1
   23414:	210f      	movs	r1, #15
   23416:	f7ff bfc1 	b.w	2339c <hts221_read_reg>

0002341a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
   2341a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   2341c:	2301      	movs	r3, #1
{
   2341e:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23420:	aa01      	add	r2, sp, #4
   23422:	2120      	movs	r1, #32
{
   23424:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23426:	f7ff ffb9 	bl	2339c <hts221_read_reg>

  if (ret == 0)
   2342a:	b958      	cbnz	r0, 23444 <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
   2342c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23430:	f365 13c7 	bfi	r3, r5, #7, #1
   23434:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   23438:	aa01      	add	r2, sp, #4
   2343a:	2301      	movs	r3, #1
   2343c:	2120      	movs	r1, #32
   2343e:	4620      	mov	r0, r4
   23440:	f7ff ffb2 	bl	233a8 <hts221_write_reg>
  }

  return ret;
}
   23444:	b003      	add	sp, #12
   23446:	bd30      	pop	{r4, r5, pc}

00023448 <hts221_drdy_on_int_set>:
  * @param  val     change the values of drdy in reg CTRL_REG3
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_drdy_on_int_set(stmdev_ctx_t *ctx, uint8_t val)
{
   23448:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg3_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   2344a:	2301      	movs	r3, #1
{
   2344c:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   2344e:	aa01      	add	r2, sp, #4
   23450:	2122      	movs	r1, #34	; 0x22
{
   23452:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   23454:	f7ff ffa2 	bl	2339c <hts221_read_reg>

  if (ret == 0)
   23458:	b958      	cbnz	r0, 23472 <hts221_drdy_on_int_set+0x2a>
  {
    reg.drdy = val;
   2345a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2345e:	f365 0382 	bfi	r3, r5, #2, #1
   23462:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   23466:	aa01      	add	r2, sp, #4
   23468:	2301      	movs	r3, #1
   2346a:	2122      	movs	r1, #34	; 0x22
   2346c:	4620      	mov	r0, r4
   2346e:	f7ff ff9b 	bl	233a8 <hts221_write_reg>
  }

  return ret;
}
   23472:	b003      	add	sp, #12
   23474:	bd30      	pop	{r4, r5, pc}

00023476 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   23476:	b538      	push	{r3, r4, r5, lr}
   23478:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2347a:	42ab      	cmp	r3, r5
{
   2347c:	4611      	mov	r1, r2
   2347e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   23480:	d804      	bhi.n	2348c <_copy+0x16>
		(void)memcpy(to, from, from_len);
   23482:	461a      	mov	r2, r3
   23484:	f000 fbc2 	bl	23c0c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   23488:	4620      	mov	r0, r4
   2348a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2348c:	2400      	movs	r4, #0
   2348e:	e7fb      	b.n	23488 <_copy+0x12>

00023490 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   23490:	f000 bbc7 	b.w	23c22 <memset>

00023494 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   23494:	09c3      	lsrs	r3, r0, #7
   23496:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2349a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2349e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   234a2:	b2c0      	uxtb	r0, r0
   234a4:	4770      	bx	lr

000234a6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   234a6:	78cb      	ldrb	r3, [r1, #3]
   234a8:	7802      	ldrb	r2, [r0, #0]
   234aa:	4053      	eors	r3, r2
   234ac:	7003      	strb	r3, [r0, #0]
   234ae:	884b      	ldrh	r3, [r1, #2]
   234b0:	7842      	ldrb	r2, [r0, #1]
   234b2:	4053      	eors	r3, r2
   234b4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   234b6:	680a      	ldr	r2, [r1, #0]
   234b8:	7883      	ldrb	r3, [r0, #2]
   234ba:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   234be:	7083      	strb	r3, [r0, #2]
   234c0:	680a      	ldr	r2, [r1, #0]
   234c2:	78c3      	ldrb	r3, [r0, #3]
   234c4:	4053      	eors	r3, r2
   234c6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   234c8:	79cb      	ldrb	r3, [r1, #7]
   234ca:	7902      	ldrb	r2, [r0, #4]
   234cc:	4053      	eors	r3, r2
   234ce:	7103      	strb	r3, [r0, #4]
   234d0:	88cb      	ldrh	r3, [r1, #6]
   234d2:	7942      	ldrb	r2, [r0, #5]
   234d4:	4053      	eors	r3, r2
   234d6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   234d8:	684a      	ldr	r2, [r1, #4]
   234da:	7983      	ldrb	r3, [r0, #6]
   234dc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   234e0:	7183      	strb	r3, [r0, #6]
   234e2:	684a      	ldr	r2, [r1, #4]
   234e4:	79c3      	ldrb	r3, [r0, #7]
   234e6:	4053      	eors	r3, r2
   234e8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   234ea:	7acb      	ldrb	r3, [r1, #11]
   234ec:	7a02      	ldrb	r2, [r0, #8]
   234ee:	4053      	eors	r3, r2
   234f0:	7203      	strb	r3, [r0, #8]
   234f2:	7a42      	ldrb	r2, [r0, #9]
   234f4:	894b      	ldrh	r3, [r1, #10]
   234f6:	4053      	eors	r3, r2
   234f8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   234fa:	688a      	ldr	r2, [r1, #8]
   234fc:	7a83      	ldrb	r3, [r0, #10]
   234fe:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23502:	7283      	strb	r3, [r0, #10]
   23504:	688a      	ldr	r2, [r1, #8]
   23506:	7ac3      	ldrb	r3, [r0, #11]
   23508:	4053      	eors	r3, r2
   2350a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2350c:	7bcb      	ldrb	r3, [r1, #15]
   2350e:	7b02      	ldrb	r2, [r0, #12]
   23510:	4053      	eors	r3, r2
   23512:	7303      	strb	r3, [r0, #12]
   23514:	89cb      	ldrh	r3, [r1, #14]
   23516:	7b42      	ldrb	r2, [r0, #13]
   23518:	4053      	eors	r3, r2
   2351a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2351c:	68ca      	ldr	r2, [r1, #12]
   2351e:	7b83      	ldrb	r3, [r0, #14]
   23520:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23524:	7383      	strb	r3, [r0, #14]
   23526:	68ca      	ldr	r2, [r1, #12]
   23528:	7bc3      	ldrb	r3, [r0, #15]
   2352a:	4053      	eors	r3, r2
   2352c:	73c3      	strb	r3, [r0, #15]
}
   2352e:	4770      	bx	lr

00023530 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   23530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   23532:	7802      	ldrb	r2, [r0, #0]
   23534:	f88d 2000 	strb.w	r2, [sp]
   23538:	7942      	ldrb	r2, [r0, #5]
   2353a:	f88d 2001 	strb.w	r2, [sp, #1]
   2353e:	7a82      	ldrb	r2, [r0, #10]
   23540:	f88d 2002 	strb.w	r2, [sp, #2]
   23544:	7bc2      	ldrb	r2, [r0, #15]
   23546:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2354a:	7902      	ldrb	r2, [r0, #4]
   2354c:	f88d 2004 	strb.w	r2, [sp, #4]
   23550:	7a42      	ldrb	r2, [r0, #9]
   23552:	f88d 2005 	strb.w	r2, [sp, #5]
   23556:	7b82      	ldrb	r2, [r0, #14]
   23558:	f88d 2006 	strb.w	r2, [sp, #6]
   2355c:	78c2      	ldrb	r2, [r0, #3]
   2355e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   23562:	7a02      	ldrb	r2, [r0, #8]
   23564:	f88d 2008 	strb.w	r2, [sp, #8]
   23568:	7b42      	ldrb	r2, [r0, #13]
   2356a:	f88d 2009 	strb.w	r2, [sp, #9]
   2356e:	7882      	ldrb	r2, [r0, #2]
   23570:	f88d 200a 	strb.w	r2, [sp, #10]
   23574:	79c2      	ldrb	r2, [r0, #7]
   23576:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2357a:	7b02      	ldrb	r2, [r0, #12]
   2357c:	f88d 200c 	strb.w	r2, [sp, #12]
   23580:	7842      	ldrb	r2, [r0, #1]
   23582:	7ac3      	ldrb	r3, [r0, #11]
   23584:	f88d 200d 	strb.w	r2, [sp, #13]
   23588:	7982      	ldrb	r2, [r0, #6]
   2358a:	f88d 200e 	strb.w	r2, [sp, #14]
   2358e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23592:	2310      	movs	r3, #16
   23594:	466a      	mov	r2, sp
   23596:	4619      	mov	r1, r3
   23598:	f7ff ff6d 	bl	23476 <_copy>
}
   2359c:	b005      	add	sp, #20
   2359e:	f85d fb04 	ldr.w	pc, [sp], #4

000235a2 <mult_row_column>:
{
   235a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235a4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   235a6:	7808      	ldrb	r0, [r1, #0]
{
   235a8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   235aa:	f7ff ff73 	bl	23494 <_double_byte>
   235ae:	4605      	mov	r5, r0
   235b0:	7860      	ldrb	r0, [r4, #1]
   235b2:	f7ff ff6f 	bl	23494 <_double_byte>
   235b6:	78a2      	ldrb	r2, [r4, #2]
   235b8:	7863      	ldrb	r3, [r4, #1]
   235ba:	4053      	eors	r3, r2
   235bc:	78e2      	ldrb	r2, [r4, #3]
   235be:	4053      	eors	r3, r2
   235c0:	405d      	eors	r5, r3
   235c2:	4068      	eors	r0, r5
   235c4:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   235c6:	7860      	ldrb	r0, [r4, #1]
   235c8:	7827      	ldrb	r7, [r4, #0]
   235ca:	f7ff ff63 	bl	23494 <_double_byte>
   235ce:	4605      	mov	r5, r0
   235d0:	78a0      	ldrb	r0, [r4, #2]
   235d2:	f7ff ff5f 	bl	23494 <_double_byte>
   235d6:	78a3      	ldrb	r3, [r4, #2]
   235d8:	405f      	eors	r7, r3
   235da:	78e3      	ldrb	r3, [r4, #3]
   235dc:	405f      	eors	r7, r3
   235de:	407d      	eors	r5, r7
   235e0:	4068      	eors	r0, r5
   235e2:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   235e4:	7863      	ldrb	r3, [r4, #1]
   235e6:	7827      	ldrb	r7, [r4, #0]
   235e8:	78a0      	ldrb	r0, [r4, #2]
   235ea:	405f      	eors	r7, r3
   235ec:	f7ff ff52 	bl	23494 <_double_byte>
   235f0:	4605      	mov	r5, r0
   235f2:	78e0      	ldrb	r0, [r4, #3]
   235f4:	f7ff ff4e 	bl	23494 <_double_byte>
   235f8:	78e3      	ldrb	r3, [r4, #3]
   235fa:	405f      	eors	r7, r3
   235fc:	407d      	eors	r5, r7
   235fe:	4068      	eors	r0, r5
   23600:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   23602:	7820      	ldrb	r0, [r4, #0]
   23604:	f7ff ff46 	bl	23494 <_double_byte>
   23608:	7862      	ldrb	r2, [r4, #1]
   2360a:	7823      	ldrb	r3, [r4, #0]
   2360c:	4053      	eors	r3, r2
   2360e:	78a2      	ldrb	r2, [r4, #2]
   23610:	4053      	eors	r3, r2
   23612:	ea80 0503 	eor.w	r5, r0, r3
   23616:	78e0      	ldrb	r0, [r4, #3]
   23618:	f7ff ff3c 	bl	23494 <_double_byte>
   2361c:	b2ed      	uxtb	r5, r5
   2361e:	4045      	eors	r5, r0
   23620:	70f5      	strb	r5, [r6, #3]
}
   23622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023624 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   23624:	b570      	push	{r4, r5, r6, lr}
   23626:	4614      	mov	r4, r2
   23628:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2362a:	4605      	mov	r5, r0
   2362c:	2800      	cmp	r0, #0
   2362e:	d049      	beq.n	236c4 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   23630:	2900      	cmp	r1, #0
   23632:	d049      	beq.n	236c8 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   23634:	2a00      	cmp	r2, #0
   23636:	d049      	beq.n	236cc <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   23638:	2310      	movs	r3, #16
   2363a:	460a      	mov	r2, r1
   2363c:	4668      	mov	r0, sp
   2363e:	4619      	mov	r1, r3
   23640:	f7ff ff19 	bl	23476 <_copy>
	add_round_key(state, s->words);
   23644:	4621      	mov	r1, r4
   23646:	4668      	mov	r0, sp
   23648:	f7ff ff2d 	bl	234a6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2364c:	3410      	adds	r4, #16
   2364e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   23652:	4668      	mov	r0, sp
   23654:	f7e3 fc9e 	bl	6f94 <sub_bytes>
		shift_rows(state);
   23658:	4668      	mov	r0, sp
   2365a:	f7ff ff69 	bl	23530 <shift_rows>
	mult_row_column(t, s);
   2365e:	4669      	mov	r1, sp
   23660:	a804      	add	r0, sp, #16
   23662:	f7ff ff9e 	bl	235a2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   23666:	a901      	add	r1, sp, #4
   23668:	a805      	add	r0, sp, #20
   2366a:	f7ff ff9a 	bl	235a2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2366e:	a902      	add	r1, sp, #8
   23670:	a806      	add	r0, sp, #24
   23672:	f7ff ff96 	bl	235a2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   23676:	a903      	add	r1, sp, #12
   23678:	a807      	add	r0, sp, #28
   2367a:	f7ff ff92 	bl	235a2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2367e:	2310      	movs	r3, #16
   23680:	4619      	mov	r1, r3
   23682:	eb0d 0203 	add.w	r2, sp, r3
   23686:	4668      	mov	r0, sp
   23688:	f7ff fef5 	bl	23476 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2368c:	4621      	mov	r1, r4
   2368e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   23690:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   23692:	f7ff ff08 	bl	234a6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   23696:	42b4      	cmp	r4, r6
   23698:	d1db      	bne.n	23652 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2369a:	f7e3 fc7b 	bl	6f94 <sub_bytes>
	shift_rows(state);
   2369e:	4668      	mov	r0, sp
   236a0:	f7ff ff46 	bl	23530 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   236a4:	4621      	mov	r1, r4
   236a6:	4668      	mov	r0, sp
   236a8:	f7ff fefd 	bl	234a6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   236ac:	2310      	movs	r3, #16
   236ae:	4619      	mov	r1, r3
   236b0:	466a      	mov	r2, sp
   236b2:	4628      	mov	r0, r5
   236b4:	f7ff fedf 	bl	23476 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   236b8:	4668      	mov	r0, sp
   236ba:	2210      	movs	r2, #16
   236bc:	2100      	movs	r1, #0
   236be:	f7ff fee7 	bl	23490 <_set>

	return TC_CRYPTO_SUCCESS;
   236c2:	2001      	movs	r0, #1
}
   236c4:	b008      	add	sp, #32
   236c6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   236c8:	4608      	mov	r0, r1
   236ca:	e7fb      	b.n	236c4 <tc_aes_encrypt+0xa0>
   236cc:	4610      	mov	r0, r2
   236ce:	e7f9      	b.n	236c4 <tc_aes_encrypt+0xa0>

000236d0 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   236d0:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   236d2:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   236d4:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   236d6:	f912 3b10 	ldrsb.w	r3, [r2], #16
   236da:	2b00      	cmp	r3, #0
   236dc:	bfac      	ite	ge
   236de:	2300      	movge	r3, #0
   236e0:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   236e2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   236e6:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   236ea:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   236ec:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   236f0:	d002      	beq.n	236f8 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   236f2:	7813      	ldrb	r3, [r2, #0]
   236f4:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   236f6:	e7f4      	b.n	236e2 <gf_double+0x12>
	}
}
   236f8:	bd10      	pop	{r4, pc}

000236fa <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   236fa:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   236fc:	b120      	cbz	r0, 23708 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   236fe:	2258      	movs	r2, #88	; 0x58
   23700:	2100      	movs	r1, #0
   23702:	f7ff fec5 	bl	23490 <_set>
   23706:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23708:	bd08      	pop	{r3, pc}

0002370a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2370a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2370c:	4604      	mov	r4, r0
   2370e:	b188      	cbz	r0, 23734 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23710:	2210      	movs	r2, #16
   23712:	2100      	movs	r1, #0
   23714:	f7ff febc 	bl	23490 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   23718:	2210      	movs	r2, #16
   2371a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2371e:	2100      	movs	r1, #0
   23720:	f7ff feb6 	bl	23490 <_set>
	s->leftover_offset = 0;
   23724:	2300      	movs	r3, #0
   23726:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   23728:	2200      	movs	r2, #0
   2372a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2372e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   23732:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23734:	bd10      	pop	{r4, pc}

00023736 <tc_cmac_setup>:
{
   23736:	b570      	push	{r4, r5, r6, lr}
   23738:	4604      	mov	r4, r0
   2373a:	460d      	mov	r5, r1
   2373c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2373e:	b310      	cbz	r0, 23786 <tc_cmac_setup+0x50>
   23740:	b311      	cbz	r1, 23788 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   23742:	2258      	movs	r2, #88	; 0x58
   23744:	2100      	movs	r1, #0
   23746:	f7ff fea3 	bl	23490 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2374a:	4629      	mov	r1, r5
	s->sched = sched;
   2374c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2374e:	4630      	mov	r0, r6
   23750:	f7e3 fc2c 	bl	6fac <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23754:	2210      	movs	r2, #16
   23756:	2100      	movs	r1, #0
   23758:	4620      	mov	r0, r4
   2375a:	f7ff fe99 	bl	23490 <_set>
	gf_double (s->K1, s->iv);
   2375e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   23762:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23764:	4621      	mov	r1, r4
   23766:	4620      	mov	r0, r4
   23768:	f7ff ff5c 	bl	23624 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2376c:	4621      	mov	r1, r4
   2376e:	4628      	mov	r0, r5
   23770:	f7ff ffae 	bl	236d0 <gf_double>
	gf_double (s->K2, s->K1);
   23774:	4629      	mov	r1, r5
   23776:	f104 0020 	add.w	r0, r4, #32
   2377a:	f7ff ffa9 	bl	236d0 <gf_double>
	tc_cmac_init(s);
   2377e:	4620      	mov	r0, r4
   23780:	f7ff ffc3 	bl	2370a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   23784:	2001      	movs	r0, #1
}
   23786:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   23788:	4608      	mov	r0, r1
   2378a:	e7fc      	b.n	23786 <tc_cmac_setup+0x50>

0002378c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23790:	460e      	mov	r6, r1
   23792:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23794:	4604      	mov	r4, r0
   23796:	2800      	cmp	r0, #0
   23798:	d060      	beq.n	2385c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2379a:	b1fa      	cbz	r2, 237dc <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2379c:	2900      	cmp	r1, #0
   2379e:	d05d      	beq.n	2385c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   237a0:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   237a4:	ea53 0102 	orrs.w	r1, r3, r2
   237a8:	d058      	beq.n	2385c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   237aa:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   237ac:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   237b0:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   237b4:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   237b8:	f1b8 0f00 	cmp.w	r8, #0
   237bc:	d02c      	beq.n	23818 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   237be:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   237c2:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   237c6:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   237c8:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   237ca:	d20a      	bcs.n	237e2 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   237cc:	462b      	mov	r3, r5
   237ce:	4632      	mov	r2, r6
   237d0:	4629      	mov	r1, r5
   237d2:	f7ff fe50 	bl	23476 <_copy>
			s->leftover_offset += data_length;
   237d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   237d8:	442b      	add	r3, r5
   237da:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   237dc:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   237de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   237e2:	463b      	mov	r3, r7
   237e4:	4632      	mov	r2, r6
   237e6:	4639      	mov	r1, r7
   237e8:	f7ff fe45 	bl	23476 <_copy>
		data_length -= remaining_space;
   237ec:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   237ee:	2300      	movs	r3, #0
   237f0:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   237f2:	4445      	add	r5, r8
		data += remaining_space;
   237f4:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   237f6:	1e63      	subs	r3, r4, #1
   237f8:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   237fc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23800:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23804:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   23806:	ea82 0200 	eor.w	r2, r2, r0
   2380a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2380c:	d1f6      	bne.n	237fc <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2380e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23810:	4621      	mov	r1, r4
   23812:	4620      	mov	r0, r4
   23814:	f7ff ff06 	bl	23624 <tc_aes_encrypt>
   23818:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2381c:	2d10      	cmp	r5, #16
   2381e:	d80a      	bhi.n	23836 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   23820:	2d00      	cmp	r5, #0
   23822:	d0db      	beq.n	237dc <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   23824:	462b      	mov	r3, r5
   23826:	4632      	mov	r2, r6
   23828:	4629      	mov	r1, r5
   2382a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2382e:	f7ff fe22 	bl	23476 <_copy>
		s->leftover_offset = data_length;
   23832:	6465      	str	r5, [r4, #68]	; 0x44
   23834:	e7d2      	b.n	237dc <tc_cmac_update+0x50>
   23836:	1e63      	subs	r3, r4, #1
   23838:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2383a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2383e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23842:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   23844:	ea82 0200 	eor.w	r2, r2, r0
   23848:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2384a:	d1f6      	bne.n	2383a <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2384c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2384e:	4621      	mov	r1, r4
   23850:	4620      	mov	r0, r4
   23852:	f7ff fee7 	bl	23624 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   23856:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   23858:	3d10      	subs	r5, #16
   2385a:	e7df      	b.n	2381c <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2385c:	2000      	movs	r0, #0
   2385e:	e7be      	b.n	237de <tc_cmac_update+0x52>

00023860 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   23860:	b570      	push	{r4, r5, r6, lr}
   23862:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   23864:	4605      	mov	r5, r0
   23866:	b1e8      	cbz	r0, 238a4 <tc_cmac_final+0x44>
   23868:	b369      	cbz	r1, 238c6 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2386a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2386c:	2a10      	cmp	r2, #16
   2386e:	d11a      	bne.n	238a6 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   23870:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23872:	1e63      	subs	r3, r4, #1
   23874:	3901      	subs	r1, #1
   23876:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2387a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2387e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   23882:	4072      	eors	r2, r6
   23884:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23888:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2388a:	ea82 0206 	eor.w	r2, r2, r6
   2388e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23890:	d1f3      	bne.n	2387a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   23892:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23894:	4621      	mov	r1, r4
   23896:	4628      	mov	r0, r5
   23898:	f7ff fec4 	bl	23624 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2389c:	4620      	mov	r0, r4
   2389e:	f7ff ff2c 	bl	236fa <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   238a2:	2001      	movs	r0, #1
}
   238a4:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   238a6:	f102 0030 	add.w	r0, r2, #48	; 0x30
   238aa:	2100      	movs	r1, #0
   238ac:	f1c2 0210 	rsb	r2, r2, #16
   238b0:	4420      	add	r0, r4
   238b2:	f7ff fded 	bl	23490 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   238b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   238b8:	4423      	add	r3, r4
   238ba:	2280      	movs	r2, #128	; 0x80
   238bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   238c0:	f104 0120 	add.w	r1, r4, #32
   238c4:	e7d5      	b.n	23872 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   238c6:	4608      	mov	r0, r1
   238c8:	e7ec      	b.n	238a4 <tc_cmac_final+0x44>

000238ca <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   238ca:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   238cc:	6800      	ldr	r0, [r0, #0]
   238ce:	f7e3 bbdd 	b.w	708c <z_arm_fatal_error>

000238d2 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   238d2:	2100      	movs	r1, #0
   238d4:	2001      	movs	r0, #1
   238d6:	f7e3 bbd9 	b.w	708c <z_arm_fatal_error>

000238da <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   238da:	b508      	push	{r3, lr}
	handler();
   238dc:	f7e3 fca8 	bl	7230 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   238e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   238e4:	f7e3 bd8e 	b.w	7404 <z_arm_exc_exit>

000238e8 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   238e8:	2300      	movs	r3, #0
   238ea:	f7e0 bc31 	b.w	4150 <z_impl_z_log_msg_static_create>

000238ee <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   238ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   238f2:	4684      	mov	ip, r0
   238f4:	4688      	mov	r8, r1
	register const char *s = nptr;
   238f6:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   238f8:	4621      	mov	r1, r4
   238fa:	f814 3b01 	ldrb.w	r3, [r4], #1
   238fe:	2b20      	cmp	r3, #32
   23900:	d0fa      	beq.n	238f8 <strtol+0xa>
   23902:	f1a3 0009 	sub.w	r0, r3, #9
   23906:	2804      	cmp	r0, #4
   23908:	d9f6      	bls.n	238f8 <strtol+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   2390a:	2b2d      	cmp	r3, #45	; 0x2d
   2390c:	d123      	bne.n	23956 <strtol+0x68>
		neg = 1;
		c = *s++;
   2390e:	784b      	ldrb	r3, [r1, #1]
   23910:	1c8c      	adds	r4, r1, #2
		neg = 1;
   23912:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   23914:	bb2a      	cbnz	r2, 23962 <strtol+0x74>
   23916:	2b30      	cmp	r3, #48	; 0x30
   23918:	d030      	beq.n	2397c <strtol+0x8e>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   2391a:	220a      	movs	r2, #10
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2391c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   23920:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   23922:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   23924:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   23928:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   2392a:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2392e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   23932:	2d09      	cmp	r5, #9
   23934:	d829      	bhi.n	2398a <strtol+0x9c>
			c -= '0';
   23936:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   23938:	429a      	cmp	r2, r3
   2393a:	dd36      	ble.n	239aa <strtol+0xbc>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2393c:	1c75      	adds	r5, r6, #1
   2393e:	d007      	beq.n	23950 <strtol+0x62>
   23940:	4570      	cmp	r0, lr
   23942:	d82f      	bhi.n	239a4 <strtol+0xb6>
   23944:	d101      	bne.n	2394a <strtol+0x5c>
   23946:	454b      	cmp	r3, r9
   23948:	dc2c      	bgt.n	239a4 <strtol+0xb6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2394a:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2394e:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   23950:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   23954:	e7eb      	b.n	2392e <strtol+0x40>
	} else if (c == '+') {
   23956:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   23958:	bf04      	itt	eq
   2395a:	784b      	ldrbeq	r3, [r1, #1]
   2395c:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2395e:	2100      	movs	r1, #0
   23960:	e7d8      	b.n	23914 <strtol+0x26>
	if ((base == 0 || base == 16) &&
   23962:	2a10      	cmp	r2, #16
   23964:	d1da      	bne.n	2391c <strtol+0x2e>
   23966:	2b30      	cmp	r3, #48	; 0x30
   23968:	d1d8      	bne.n	2391c <strtol+0x2e>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2396a:	7820      	ldrb	r0, [r4, #0]
   2396c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   23970:	2858      	cmp	r0, #88	; 0x58
   23972:	d1d3      	bne.n	2391c <strtol+0x2e>
		c = s[1];
   23974:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   23976:	2210      	movs	r2, #16
		s += 2;
   23978:	3402      	adds	r4, #2
	if (base == 0) {
   2397a:	e7cf      	b.n	2391c <strtol+0x2e>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2397c:	7822      	ldrb	r2, [r4, #0]
   2397e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   23982:	2a58      	cmp	r2, #88	; 0x58
   23984:	d0f6      	beq.n	23974 <strtol+0x86>
		base = c == '0' ? 8 : 10;
   23986:	2208      	movs	r2, #8
   23988:	e7c8      	b.n	2391c <strtol+0x2e>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2398a:	f043 0520 	orr.w	r5, r3, #32
   2398e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   23990:	2d19      	cmp	r5, #25
   23992:	d80a      	bhi.n	239aa <strtol+0xbc>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   23994:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   23998:	2d1a      	cmp	r5, #26
   2399a:	bf34      	ite	cc
   2399c:	2537      	movcc	r5, #55	; 0x37
   2399e:	2557      	movcs	r5, #87	; 0x57
   239a0:	1b5b      	subs	r3, r3, r5
   239a2:	e7c9      	b.n	23938 <strtol+0x4a>
			any = -1;
   239a4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   239a8:	e7d2      	b.n	23950 <strtol+0x62>
		}
	}

	if (any < 0) {
   239aa:	1c73      	adds	r3, r6, #1
   239ac:	d109      	bne.n	239c2 <strtol+0xd4>
   239ae:	f7fb fd25 	bl	1f3fc <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   239b2:	2322      	movs	r3, #34	; 0x22
   239b4:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   239b6:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   239b8:	f1b8 0f00 	cmp.w	r8, #0
   239bc:	d107      	bne.n	239ce <strtol+0xe0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   239be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   239c2:	b101      	cbz	r1, 239c6 <strtol+0xd8>
		acc = -acc;
   239c4:	4240      	negs	r0, r0
	if (endptr != NULL) {
   239c6:	f1b8 0f00 	cmp.w	r8, #0
   239ca:	d0f8      	beq.n	239be <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
   239cc:	b10e      	cbz	r6, 239d2 <strtol+0xe4>
   239ce:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   239d2:	f8c8 c000 	str.w	ip, [r8]
   239d6:	e7f2      	b.n	239be <strtol+0xd0>

000239d8 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   239d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239dc:	4684      	mov	ip, r0
   239de:	460f      	mov	r7, r1
	register const char *s = nptr;
   239e0:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   239e2:	4621      	mov	r1, r4
   239e4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   239e8:	2b20      	cmp	r3, #32
   239ea:	d0fa      	beq.n	239e2 <strtoul+0xa>
   239ec:	f1a3 0009 	sub.w	r0, r3, #9
   239f0:	2804      	cmp	r0, #4
   239f2:	d9f6      	bls.n	239e2 <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   239f4:	2b2d      	cmp	r3, #45	; 0x2d
   239f6:	d125      	bne.n	23a44 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   239f8:	784b      	ldrb	r3, [r1, #1]
   239fa:	1c8c      	adds	r4, r1, #2
		neg = 1;
   239fc:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   23a00:	bb3a      	cbnz	r2, 23a52 <strtoul+0x7a>
   23a02:	2b30      	cmp	r3, #48	; 0x30
   23a04:	d032      	beq.n	23a6c <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   23a06:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   23a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   23a0c:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   23a0e:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   23a12:	fb02 f801 	mul.w	r8, r2, r1
   23a16:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   23a1a:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   23a1c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   23a20:	2e09      	cmp	r6, #9
   23a22:	d82a      	bhi.n	23a7a <strtoul+0xa2>
			c -= '0';
   23a24:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   23a26:	429a      	cmp	r2, r3
   23a28:	dd37      	ble.n	23a9a <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   23a2a:	1c6e      	adds	r6, r5, #1
   23a2c:	d007      	beq.n	23a3e <strtoul+0x66>
   23a2e:	4288      	cmp	r0, r1
   23a30:	d830      	bhi.n	23a94 <strtoul+0xbc>
   23a32:	d101      	bne.n	23a38 <strtoul+0x60>
   23a34:	4543      	cmp	r3, r8
   23a36:	dc2d      	bgt.n	23a94 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   23a38:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   23a3c:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   23a3e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   23a42:	e7eb      	b.n	23a1c <strtoul+0x44>
	} else if (c == '+') {
   23a44:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   23a46:	bf04      	itt	eq
   23a48:	784b      	ldrbeq	r3, [r1, #1]
   23a4a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   23a4c:	f04f 0e00 	mov.w	lr, #0
   23a50:	e7d6      	b.n	23a00 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   23a52:	2a10      	cmp	r2, #16
   23a54:	d1d8      	bne.n	23a08 <strtoul+0x30>
   23a56:	2b30      	cmp	r3, #48	; 0x30
   23a58:	d1d6      	bne.n	23a08 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   23a5a:	7821      	ldrb	r1, [r4, #0]
   23a5c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   23a60:	2958      	cmp	r1, #88	; 0x58
   23a62:	d1d1      	bne.n	23a08 <strtoul+0x30>
		c = s[1];
   23a64:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   23a66:	2210      	movs	r2, #16
		s += 2;
   23a68:	3402      	adds	r4, #2
	if (base == 0) {
   23a6a:	e7cd      	b.n	23a08 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   23a6c:	7822      	ldrb	r2, [r4, #0]
   23a6e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   23a72:	2a58      	cmp	r2, #88	; 0x58
   23a74:	d0f6      	beq.n	23a64 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   23a76:	2208      	movs	r2, #8
   23a78:	e7c6      	b.n	23a08 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   23a7a:	f043 0620 	orr.w	r6, r3, #32
   23a7e:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   23a80:	2e19      	cmp	r6, #25
   23a82:	d80a      	bhi.n	23a9a <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   23a84:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   23a88:	2e1a      	cmp	r6, #26
   23a8a:	bf34      	ite	cc
   23a8c:	2637      	movcc	r6, #55	; 0x37
   23a8e:	2657      	movcs	r6, #87	; 0x57
   23a90:	1b9b      	subs	r3, r3, r6
   23a92:	e7c8      	b.n	23a26 <strtoul+0x4e>
			any = -1;
   23a94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23a98:	e7d1      	b.n	23a3e <strtoul+0x66>
		}
	}
	if (any < 0) {
   23a9a:	1c6b      	adds	r3, r5, #1
   23a9c:	d107      	bne.n	23aae <strtoul+0xd6>
   23a9e:	f7fb fcad 	bl	1f3fc <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   23aa2:	2322      	movs	r3, #34	; 0x22
   23aa4:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   23aa6:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   23aa8:	b947      	cbnz	r7, 23abc <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   23aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   23aae:	f1be 0f00 	cmp.w	lr, #0
   23ab2:	d000      	beq.n	23ab6 <strtoul+0xde>
		acc = -acc;
   23ab4:	4240      	negs	r0, r0
	if (endptr != NULL) {
   23ab6:	2f00      	cmp	r7, #0
   23ab8:	d0f7      	beq.n	23aaa <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   23aba:	b10d      	cbz	r5, 23ac0 <strtoul+0xe8>
   23abc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   23ac0:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   23ac4:	e7f1      	b.n	23aaa <strtoul+0xd2>

00023ac6 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   23ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   23aca:	f891 8000 	ldrb.w	r8, [r1]
{
   23ace:	4605      	mov	r5, r0
	if (c != 0) {
   23ad0:	f1b8 0f00 	cmp.w	r8, #0
   23ad4:	d010      	beq.n	23af8 <strstr+0x32>
	c = *find++;
   23ad6:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   23ad8:	4620      	mov	r0, r4
   23ada:	f000 f840 	bl	23b5e <strlen>
   23ade:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   23ae0:	462e      	mov	r6, r5
   23ae2:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   23ae6:	b163      	cbz	r3, 23b02 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   23ae8:	4598      	cmp	r8, r3
   23aea:	d108      	bne.n	23afe <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   23aec:	463a      	mov	r2, r7
   23aee:	4621      	mov	r1, r4
   23af0:	4630      	mov	r0, r6
   23af2:	f000 f850 	bl	23b96 <strncmp>
   23af6:	b910      	cbnz	r0, 23afe <strstr+0x38>
		s--;
	}
	return (char *)s;
}
   23af8:	4628      	mov	r0, r5
   23afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   23afe:	4635      	mov	r5, r6
   23b00:	e7ee      	b.n	23ae0 <strstr+0x1a>
					return NULL;
   23b02:	461d      	mov	r5, r3
   23b04:	e7f8      	b.n	23af8 <strstr+0x32>

00023b06 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   23b06:	3901      	subs	r1, #1
   23b08:	4603      	mov	r3, r0
   23b0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   23b0e:	b90a      	cbnz	r2, 23b14 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   23b10:	701a      	strb	r2, [r3, #0]

	return dest;
}
   23b12:	4770      	bx	lr
		*d = *s;
   23b14:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   23b18:	e7f7      	b.n	23b0a <strcpy+0x4>

00023b1a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   23b1a:	b510      	push	{r4, lr}
   23b1c:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   23b1e:	4603      	mov	r3, r0
   23b20:	b922      	cbnz	r2, 23b2c <strncpy+0x12>
   23b22:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   23b24:	2100      	movs	r1, #0
	while (n > 0) {
   23b26:	4293      	cmp	r3, r2
   23b28:	d108      	bne.n	23b3c <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   23b2a:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   23b2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23b30:	2c00      	cmp	r4, #0
   23b32:	d0f6      	beq.n	23b22 <strncpy+0x8>
		*d = *s;
   23b34:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   23b38:	3a01      	subs	r2, #1
   23b3a:	e7f1      	b.n	23b20 <strncpy+0x6>
		*d = '\0';
   23b3c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   23b40:	e7f1      	b.n	23b26 <strncpy+0xc>

00023b42 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   23b42:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   23b44:	4603      	mov	r3, r0
   23b46:	781a      	ldrb	r2, [r3, #0]
   23b48:	428a      	cmp	r2, r1
   23b4a:	4618      	mov	r0, r3
   23b4c:	f103 0301 	add.w	r3, r3, #1
   23b50:	d004      	beq.n	23b5c <strchr+0x1a>
   23b52:	2a00      	cmp	r2, #0
   23b54:	d1f7      	bne.n	23b46 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   23b56:	2900      	cmp	r1, #0
   23b58:	bf18      	it	ne
   23b5a:	2000      	movne	r0, #0
}
   23b5c:	4770      	bx	lr

00023b5e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   23b5e:	4603      	mov	r3, r0
	size_t n = 0;
   23b60:	2000      	movs	r0, #0

	while (*s != '\0') {
   23b62:	5c1a      	ldrb	r2, [r3, r0]
   23b64:	b902      	cbnz	r2, 23b68 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   23b66:	4770      	bx	lr
		n++;
   23b68:	3001      	adds	r0, #1
   23b6a:	e7fa      	b.n	23b62 <strlen+0x4>

00023b6c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   23b6c:	4603      	mov	r3, r0
	size_t n = 0;
   23b6e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   23b70:	5c1a      	ldrb	r2, [r3, r0]
   23b72:	b10a      	cbz	r2, 23b78 <strnlen+0xc>
   23b74:	4288      	cmp	r0, r1
   23b76:	d100      	bne.n	23b7a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   23b78:	4770      	bx	lr
		n++;
   23b7a:	3001      	adds	r0, #1
   23b7c:	e7f8      	b.n	23b70 <strnlen+0x4>

00023b7e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   23b7e:	1e43      	subs	r3, r0, #1
   23b80:	3901      	subs	r1, #1
   23b82:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23b86:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   23b8a:	4282      	cmp	r2, r0
   23b8c:	d101      	bne.n	23b92 <strcmp+0x14>
   23b8e:	2a00      	cmp	r2, #0
   23b90:	d1f7      	bne.n	23b82 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   23b92:	1a10      	subs	r0, r2, r0
   23b94:	4770      	bx	lr

00023b96 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   23b96:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   23b98:	460b      	mov	r3, r1
   23b9a:	4605      	mov	r5, r0
   23b9c:	b16a      	cbz	r2, 23bba <strncmp+0x24>
   23b9e:	f810 6b01 	ldrb.w	r6, [r0], #1
   23ba2:	781c      	ldrb	r4, [r3, #0]
   23ba4:	42b4      	cmp	r4, r6
   23ba6:	f101 0101 	add.w	r1, r1, #1
   23baa:	d100      	bne.n	23bae <strncmp+0x18>
   23bac:	b91c      	cbnz	r4, 23bb6 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   23bae:	782a      	ldrb	r2, [r5, #0]
   23bb0:	781b      	ldrb	r3, [r3, #0]
   23bb2:	1ad0      	subs	r0, r2, r3
   23bb4:	e002      	b.n	23bbc <strncmp+0x26>
		n--;
   23bb6:	3a01      	subs	r2, #1
   23bb8:	e7ee      	b.n	23b98 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   23bba:	4610      	mov	r0, r2
}
   23bbc:	bd70      	pop	{r4, r5, r6, pc}

00023bbe <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   23bbe:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   23bc0:	b15a      	cbz	r2, 23bda <memcmp+0x1c>
   23bc2:	3901      	subs	r1, #1
   23bc4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   23bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
   23bca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   23bce:	42a0      	cmp	r0, r4
   23bd0:	d001      	beq.n	23bd6 <memcmp+0x18>
   23bd2:	429a      	cmp	r2, r3
   23bd4:	d0f7      	beq.n	23bc6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   23bd6:	1ad0      	subs	r0, r2, r3
}
   23bd8:	bd10      	pop	{r4, pc}
		return 0;
   23bda:	4610      	mov	r0, r2
   23bdc:	e7fc      	b.n	23bd8 <memcmp+0x1a>

00023bde <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   23bde:	1a43      	subs	r3, r0, r1
   23be0:	4293      	cmp	r3, r2
{
   23be2:	b510      	push	{r4, lr}
   23be4:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   23be8:	d308      	bcc.n	23bfc <memmove+0x1e>
   23bea:	3901      	subs	r1, #1
	char *dest = d;
   23bec:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   23bee:	429a      	cmp	r2, r3
   23bf0:	d00b      	beq.n	23c0a <memmove+0x2c>
			*dest = *src;
   23bf2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23bf6:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   23bfa:	e7f8      	b.n	23bee <memmove+0x10>
   23bfc:	440a      	add	r2, r1
			dest[n] = src[n];
   23bfe:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   23c02:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   23c06:	428a      	cmp	r2, r1
   23c08:	d1f9      	bne.n	23bfe <memmove+0x20>
		}
	}

	return d;
}
   23c0a:	bd10      	pop	{r4, pc}

00023c0c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   23c0c:	b510      	push	{r4, lr}
   23c0e:	1e43      	subs	r3, r0, #1
   23c10:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   23c12:	4291      	cmp	r1, r2
   23c14:	d100      	bne.n	23c18 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   23c16:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   23c18:	f811 4b01 	ldrb.w	r4, [r1], #1
   23c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   23c20:	e7f7      	b.n	23c12 <memcpy+0x6>

00023c22 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   23c22:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   23c24:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   23c26:	4603      	mov	r3, r0
	while (n > 0) {
   23c28:	4293      	cmp	r3, r2
   23c2a:	d100      	bne.n	23c2e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   23c2c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   23c2e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   23c32:	e7f9      	b.n	23c28 <memset+0x6>

00023c34 <_stdout_hook_default>:
}
   23c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c38:	4770      	bx	lr

00023c3a <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   23c3a:	f7e4 b949 	b.w	7ed0 <z_impl_zephyr_fputc>

00023c3e <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   23c3e:	684b      	ldr	r3, [r1, #4]
   23c40:	2b01      	cmp	r3, #1
   23c42:	dd07      	ble.n	23c54 <sprintf_out+0x16>
		*(p->ptr) = c;
   23c44:	680b      	ldr	r3, [r1, #0]
   23c46:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   23c48:	680b      	ldr	r3, [r1, #0]
   23c4a:	3301      	adds	r3, #1
   23c4c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   23c4e:	684b      	ldr	r3, [r1, #4]
   23c50:	3b01      	subs	r3, #1
   23c52:	604b      	str	r3, [r1, #4]
}
   23c54:	2000      	movs	r0, #0
   23c56:	4770      	bx	lr

00023c58 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   23c58:	2806      	cmp	r0, #6
   23c5a:	d108      	bne.n	23c6e <pm_state_set+0x16>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   23c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23c60:	2201      	movs	r2, #1
   23c62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   23c66:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   23c6a:	bf20      	wfe
    while (true)
   23c6c:	e7fd      	b.n	23c6a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   23c6e:	4770      	bx	lr

00023c70 <pm_state_exit_post_ops>:
	__asm__ volatile(
   23c70:	2300      	movs	r3, #0
   23c72:	f383 8811 	msr	BASEPRI, r3
   23c76:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   23c7a:	4770      	bx	lr

00023c7c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   23c7c:	b510      	push	{r4, lr}
   23c7e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   23c80:	7801      	ldrb	r1, [r0, #0]
   23c82:	7822      	ldrb	r2, [r4, #0]
   23c84:	428a      	cmp	r2, r1
{
   23c86:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   23c88:	d00f      	beq.n	23caa <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   23c8a:	4669      	mov	r1, sp
   23c8c:	f7e4 fa1a 	bl	80c4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   23c90:	a905      	add	r1, sp, #20
   23c92:	4620      	mov	r0, r4
   23c94:	f7e4 fa16 	bl	80c4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   23c98:	2210      	movs	r2, #16
   23c9a:	f10d 0115 	add.w	r1, sp, #21
   23c9e:	f10d 0001 	add.w	r0, sp, #1
   23ca2:	f7ff ff8c 	bl	23bbe <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   23ca6:	b00a      	add	sp, #40	; 0x28
   23ca8:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   23caa:	2a01      	cmp	r2, #1
   23cac:	d006      	beq.n	23cbc <bt_uuid_cmp+0x40>
   23cae:	2a02      	cmp	r2, #2
   23cb0:	d007      	beq.n	23cc2 <bt_uuid_cmp+0x46>
   23cb2:	b972      	cbnz	r2, 23cd2 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   23cb4:	8840      	ldrh	r0, [r0, #2]
   23cb6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   23cb8:	1ac0      	subs	r0, r0, r3
   23cba:	e7f4      	b.n	23ca6 <bt_uuid_cmp+0x2a>
   23cbc:	6840      	ldr	r0, [r0, #4]
   23cbe:	6863      	ldr	r3, [r4, #4]
   23cc0:	e7fa      	b.n	23cb8 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23cc2:	2210      	movs	r2, #16
   23cc4:	1c61      	adds	r1, r4, #1
   23cc6:	3001      	adds	r0, #1
}
   23cc8:	b00a      	add	sp, #40	; 0x28
   23cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23cce:	f7ff bf76 	b.w	23bbe <memcmp>
	switch (u1->type) {
   23cd2:	f06f 0015 	mvn.w	r0, #21
   23cd6:	e7e6      	b.n	23ca6 <bt_uuid_cmp+0x2a>

00023cd8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   23cd8:	2a04      	cmp	r2, #4
{
   23cda:	b510      	push	{r4, lr}
	switch (data_len) {
   23cdc:	d00a      	beq.n	23cf4 <bt_uuid_create+0x1c>
   23cde:	2a10      	cmp	r2, #16
   23ce0:	d00d      	beq.n	23cfe <bt_uuid_create+0x26>
   23ce2:	2a02      	cmp	r2, #2
   23ce4:	f04f 0300 	mov.w	r3, #0
   23ce8:	d10f      	bne.n	23d0a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   23cea:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   23cec:	880b      	ldrh	r3, [r1, #0]
   23cee:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   23cf0:	2001      	movs	r0, #1
}
   23cf2:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   23cf4:	2301      	movs	r3, #1
   23cf6:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23cf8:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   23cfa:	6043      	str	r3, [r0, #4]
		break;
   23cfc:	e7f8      	b.n	23cf0 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   23cfe:	2302      	movs	r3, #2
   23d00:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   23d04:	f7ff ff82 	bl	23c0c <memcpy>
		break;
   23d08:	e7f2      	b.n	23cf0 <bt_uuid_create+0x18>
	switch (data_len) {
   23d0a:	4618      	mov	r0, r3
   23d0c:	e7f1      	b.n	23cf2 <bt_uuid_create+0x1a>

00023d0e <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   23d0e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   23d10:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   23d12:	2106      	movs	r1, #6
{
   23d14:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   23d16:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   23d1a:	f7ec ff79 	bl	10c10 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   23d1e:	b918      	cbnz	r0, 23d28 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   23d20:	79a3      	ldrb	r3, [r4, #6]
   23d22:	f063 033f 	orn	r3, r3, #63	; 0x3f
   23d26:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   23d28:	bd10      	pop	{r4, pc}

00023d2a <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   23d2a:	b510      	push	{r4, lr}
   23d2c:	4604      	mov	r4, r0
   23d2e:	2207      	movs	r2, #7
   23d30:	f7ff ff6c 	bl	23c0c <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   23d34:	7823      	ldrb	r3, [r4, #0]
   23d36:	f023 0302 	bic.w	r3, r3, #2
   23d3a:	7023      	strb	r3, [r4, #0]
}
   23d3c:	bd10      	pop	{r4, pc}

00023d3e <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   23d3e:	7800      	ldrb	r0, [r0, #0]
}
   23d40:	f3c0 0040 	ubfx	r0, r0, #1, #1
   23d44:	4770      	bx	lr

00023d46 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   23d46:	280f      	cmp	r0, #15
   23d48:	d807      	bhi.n	23d5a <bt_hci_evt_get_flags+0x14>
   23d4a:	280d      	cmp	r0, #13
   23d4c:	d80b      	bhi.n	23d66 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   23d4e:	2805      	cmp	r0, #5
   23d50:	bf08      	it	eq
   23d52:	2003      	moveq	r0, #3
   23d54:	bf18      	it	ne
   23d56:	2002      	movne	r0, #2
   23d58:	4770      	bx	lr
	switch (evt) {
   23d5a:	2813      	cmp	r0, #19
   23d5c:	d003      	beq.n	23d66 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   23d5e:	281a      	cmp	r0, #26
   23d60:	bf08      	it	eq
   23d62:	2001      	moveq	r0, #1
   23d64:	e7f6      	b.n	23d54 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   23d66:	2001      	movs	r0, #1
	}
}
   23d68:	4770      	bx	lr

00023d6a <hci_vendor_event>:
}
   23d6a:	4770      	bx	lr

00023d6c <atomic_or>:
{
   23d6c:	b510      	push	{r4, lr}
   23d6e:	4603      	mov	r3, r0
}
   23d70:	f3bf 8f5b 	dmb	ish
   23d74:	e853 0f00 	ldrex	r0, [r3]
   23d78:	ea40 0201 	orr.w	r2, r0, r1
   23d7c:	e843 2400 	strex	r4, r2, [r3]
   23d80:	2c00      	cmp	r4, #0
   23d82:	d1f7      	bne.n	23d74 <atomic_or+0x8>
   23d84:	f3bf 8f5b 	dmb	ish
   23d88:	bd10      	pop	{r4, pc}

00023d8a <z_log_msg_static_create.constprop.0>:
   23d8a:	2300      	movs	r3, #0
   23d8c:	f7e0 b9e0 	b.w	4150 <z_impl_z_log_msg_static_create>

00023d90 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23d90:	f3bf 8f5b 	dmb	ish
   23d94:	e850 3f00 	ldrex	r3, [r0]
   23d98:	400b      	ands	r3, r1
   23d9a:	e840 3200 	strex	r2, r3, [r0]
   23d9e:	2a00      	cmp	r2, #0
   23da0:	d1f8      	bne.n	23d94 <atomic_and.isra.0+0x4>
   23da2:	f3bf 8f5b 	dmb	ish
}
   23da6:	4770      	bx	lr

00023da8 <bt_hci_disconnect>:
{
   23da8:	b570      	push	{r4, r5, r6, lr}
   23daa:	4606      	mov	r6, r0
   23dac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   23dae:	f240 4006 	movw	r0, #1030	; 0x406
   23db2:	2103      	movs	r1, #3
   23db4:	f7e4 fdf4 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
   23db8:	4604      	mov	r4, r0
   23dba:	b168      	cbz	r0, 23dd8 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   23dbc:	2103      	movs	r1, #3
   23dbe:	300c      	adds	r0, #12
   23dc0:	f001 fc17 	bl	255f2 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   23dc4:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   23dc6:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   23dc8:	4621      	mov	r1, r4
   23dca:	2200      	movs	r2, #0
}
   23dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   23dd0:	f240 4006 	movw	r0, #1030	; 0x406
   23dd4:	f7e4 be1e 	b.w	8a14 <bt_hci_cmd_send_sync>
}
   23dd8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23ddc:	bd70      	pop	{r4, r5, r6, pc}

00023dde <bt_le_set_data_len>:
{
   23dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23de0:	4607      	mov	r7, r0
   23de2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   23de4:	f242 0022 	movw	r0, #8226	; 0x2022
   23de8:	2106      	movs	r1, #6
{
   23dea:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   23dec:	f7e4 fdd8 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
   23df0:	4604      	mov	r4, r0
   23df2:	b178      	cbz	r0, 23e14 <bt_le_set_data_len+0x36>
   23df4:	2106      	movs	r1, #6
   23df6:	300c      	adds	r0, #12
   23df8:	f001 fbfb 	bl	255f2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   23dfc:	883b      	ldrh	r3, [r7, #0]
   23dfe:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   23e00:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   23e02:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   23e04:	4621      	mov	r1, r4
   23e06:	2200      	movs	r2, #0
}
   23e08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   23e0c:	f242 0022 	movw	r0, #8226	; 0x2022
   23e10:	f7e4 be00 	b.w	8a14 <bt_hci_cmd_send_sync>
}
   23e14:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023e1a <bt_le_set_phy>:
{
   23e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23e1e:	4681      	mov	r9, r0
   23e20:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   23e22:	f242 0032 	movw	r0, #8242	; 0x2032
   23e26:	2107      	movs	r1, #7
{
   23e28:	f89d a020 	ldrb.w	sl, [sp, #32]
   23e2c:	4617      	mov	r7, r2
   23e2e:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   23e30:	f7e4 fdb6 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
   23e34:	4605      	mov	r5, r0
   23e36:	b1a0      	cbz	r0, 23e62 <bt_le_set_phy+0x48>
   23e38:	2107      	movs	r1, #7
   23e3a:	300c      	adds	r0, #12
   23e3c:	f001 fbd9 	bl	255f2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   23e40:	f8b9 3000 	ldrh.w	r3, [r9]
   23e44:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   23e46:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   23e4a:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   23e4c:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   23e4e:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   23e52:	4629      	mov	r1, r5
   23e54:	2200      	movs	r2, #0
}
   23e56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   23e5a:	f242 0032 	movw	r0, #8242	; 0x2032
   23e5e:	f7e4 bdd9 	b.w	8a14 <bt_hci_cmd_send_sync>
}
   23e62:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023e6a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   23e6a:	68c0      	ldr	r0, [r0, #12]
   23e6c:	f7e4 beb8 	b.w	8be0 <bt_hci_le_enh_conn_complete>

00023e70 <bt_le_conn_params_valid>:
{
   23e70:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   23e72:	8803      	ldrh	r3, [r0, #0]
   23e74:	8842      	ldrh	r2, [r0, #2]
   23e76:	4293      	cmp	r3, r2
   23e78:	d819      	bhi.n	23eae <bt_le_conn_params_valid+0x3e>
   23e7a:	2b05      	cmp	r3, #5
   23e7c:	d917      	bls.n	23eae <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   23e7e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   23e82:	d814      	bhi.n	23eae <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   23e84:	8883      	ldrh	r3, [r0, #4]
   23e86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   23e8a:	d210      	bcs.n	23eae <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   23e8c:	88c0      	ldrh	r0, [r0, #6]
   23e8e:	f1a0 010a 	sub.w	r1, r0, #10
   23e92:	b289      	uxth	r1, r1
   23e94:	f640 4476 	movw	r4, #3190	; 0xc76
   23e98:	42a1      	cmp	r1, r4
   23e9a:	d808      	bhi.n	23eae <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   23e9c:	3301      	adds	r3, #1
   23e9e:	b29b      	uxth	r3, r3
   23ea0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   23ea2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   23ea6:	bf34      	ite	cc
   23ea8:	2001      	movcc	r0, #1
   23eaa:	2000      	movcs	r0, #0
}
   23eac:	bd10      	pop	{r4, pc}
		return false;
   23eae:	2000      	movs	r0, #0
   23eb0:	e7fc      	b.n	23eac <bt_le_conn_params_valid+0x3c>

00023eb2 <le_conn_param_neg_reply>:
{
   23eb2:	b570      	push	{r4, r5, r6, lr}
   23eb4:	4606      	mov	r6, r0
   23eb6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   23eb8:	f242 0021 	movw	r0, #8225	; 0x2021
   23ebc:	2103      	movs	r1, #3
   23ebe:	f7e4 fd6f 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
   23ec2:	4604      	mov	r4, r0
   23ec4:	b918      	cbnz	r0, 23ece <le_conn_param_neg_reply+0x1c>
}
   23ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23eca:	f7e4 b9f9 	b.w	82c0 <le_conn_param_neg_reply.part.0>
   23ece:	2103      	movs	r1, #3
   23ed0:	300c      	adds	r0, #12
   23ed2:	f001 fb8e 	bl	255f2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   23ed6:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   23ed8:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   23eda:	4621      	mov	r1, r4
   23edc:	f242 0021 	movw	r0, #8225	; 0x2021
}
   23ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   23ee4:	f7e5 b864 	b.w	8fb0 <bt_hci_cmd_send>

00023ee8 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   23ee8:	2000      	movs	r0, #0
   23eea:	4770      	bx	lr

00023eec <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   23eec:	2000      	movs	r0, #0
   23eee:	4770      	bx	lr

00023ef0 <bt_hci_evt_create>:
#include <stdint.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   23ef0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   23ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   23ef6:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   23ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23efc:	2100      	movs	r1, #0
{
   23efe:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   23f00:	f7e4 f940 	bl	8184 <bt_buf_get_evt>
   23f04:	2102      	movs	r1, #2
   23f06:	4604      	mov	r4, r0
   23f08:	300c      	adds	r0, #12
   23f0a:	f001 fb72 	bl	255f2 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   23f0e:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   23f10:	7045      	strb	r5, [r0, #1]

	return buf;
}
   23f12:	4620      	mov	r0, r4
   23f14:	bd70      	pop	{r4, r5, r6, pc}

00023f16 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   23f16:	3103      	adds	r1, #3
{
   23f18:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   23f1a:	b2c9      	uxtb	r1, r1
{
   23f1c:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   23f1e:	200e      	movs	r0, #14
   23f20:	f7ff ffe6 	bl	23ef0 <bt_hci_evt_create>
   23f24:	2103      	movs	r1, #3
   23f26:	4604      	mov	r4, r0
   23f28:	300c      	adds	r0, #12
   23f2a:	f001 fb62 	bl	255f2 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   23f2e:	2301      	movs	r3, #1
   23f30:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   23f32:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   23f36:	4620      	mov	r0, r4
   23f38:	bd38      	pop	{r3, r4, r5, pc}

00023f3a <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   23f3a:	b570      	push	{r4, r5, r6, lr}
   23f3c:	4605      	mov	r5, r0
   23f3e:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   23f40:	200f      	movs	r0, #15
   23f42:	2104      	movs	r1, #4
   23f44:	f7ff ffd4 	bl	23ef0 <bt_hci_evt_create>
   23f48:	2104      	movs	r1, #4
   23f4a:	4604      	mov	r4, r0
   23f4c:	300c      	adds	r0, #12
   23f4e:	f001 fb50 	bl	255f2 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   23f52:	2201      	movs	r2, #1
	cs->status = status;
   23f54:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   23f56:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   23f58:	8045      	strh	r5, [r0, #2]

	return buf;
}
   23f5a:	4620      	mov	r0, r4
   23f5c:	bd70      	pop	{r4, r5, r6, pc}

00023f5e <bt_addr_le_eq>:
{
   23f5e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   23f60:	2207      	movs	r2, #7
   23f62:	f7ff fe2c 	bl	23bbe <memcmp>
}
   23f66:	fab0 f080 	clz	r0, r0
   23f6a:	0940      	lsrs	r0, r0, #5
   23f6c:	bd08      	pop	{r3, pc}

00023f6e <z_log_msg_static_create.constprop.0>:
   23f6e:	2300      	movs	r3, #0
   23f70:	f7e0 b8ee 	b.w	4150 <z_impl_z_log_msg_static_create>

00023f74 <bt_lookup_id_addr>:
	return addr;
   23f74:	2800      	cmp	r0, #0
}
   23f76:	bf0c      	ite	eq
   23f78:	4608      	moveq	r0, r1
   23f7a:	2000      	movne	r0, #0
   23f7c:	4770      	bx	lr

00023f7e <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   23f7e:	b118      	cbz	r0, 23f88 <bt_id_set_adv_random_addr+0xa>
   23f80:	b111      	cbz	r1, 23f88 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   23f82:	4608      	mov	r0, r1
   23f84:	f7e5 bf48 	b.w	9e18 <set_random_address>
}
   23f88:	f06f 0015 	mvn.w	r0, #21
   23f8c:	4770      	bx	lr

00023f8e <bt_id_set_adv_private_addr>:
{
   23f8e:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   23f90:	4604      	mov	r4, r0
   23f92:	b180      	cbz	r0, 23fb6 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   23f94:	2106      	movs	r1, #6
   23f96:	4668      	mov	r0, sp
   23f98:	f7ec fe3a 	bl	10c10 <bt_rand>
	if (err) {
   23f9c:	b948      	cbnz	r0, 23fb2 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   23f9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   23fa2:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   23fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   23fa8:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   23faa:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   23fae:	f7ff ffe6 	bl	23f7e <bt_id_set_adv_random_addr>
}
   23fb2:	b002      	add	sp, #8
   23fb4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   23fb6:	f06f 0015 	mvn.w	r0, #21
   23fba:	e7fa      	b.n	23fb2 <bt_id_set_adv_private_addr+0x24>

00023fbc <bt_id_adv_random_addr_check>:
}
   23fbc:	3800      	subs	r0, #0
   23fbe:	bf18      	it	ne
   23fc0:	2001      	movne	r0, #1
   23fc2:	4770      	bx	lr

00023fc4 <get_adv_channel_map>:
{
   23fc4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   23fc6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   23fca:	bf0c      	ite	eq
   23fcc:	2007      	moveq	r0, #7
   23fce:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   23fd0:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   23fd2:	bf48      	it	mi
   23fd4:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   23fd8:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   23fda:	bf48      	it	mi
   23fdc:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   23fe0:	4770      	bx	lr

00023fe2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23fe2:	f3bf 8f5b 	dmb	ish
   23fe6:	6800      	ldr	r0, [r0, #0]
   23fe8:	f3bf 8f5b 	dmb	ish
}
   23fec:	4770      	bx	lr

00023fee <atomic_and>:
{
   23fee:	b510      	push	{r4, lr}
   23ff0:	4603      	mov	r3, r0
}
   23ff2:	f3bf 8f5b 	dmb	ish
   23ff6:	e853 0f00 	ldrex	r0, [r3]
   23ffa:	ea00 0201 	and.w	r2, r0, r1
   23ffe:	e843 2400 	strex	r4, r2, [r3]
   24002:	2c00      	cmp	r4, #0
   24004:	d1f7      	bne.n	23ff6 <atomic_and+0x8>
   24006:	f3bf 8f5b 	dmb	ish
   2400a:	bd10      	pop	{r4, pc}

0002400c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2400c:	2301      	movs	r3, #1
{
   2400e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24010:	fa03 f101 	lsl.w	r1, r3, r1
{
   24014:	4604      	mov	r4, r0
	if (val) {
   24016:	b162      	cbz	r2, 24032 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24018:	f3bf 8f5b 	dmb	ish
   2401c:	e854 3f00 	ldrex	r3, [r4]
   24020:	430b      	orrs	r3, r1
   24022:	e844 3200 	strex	r2, r3, [r4]
   24026:	2a00      	cmp	r2, #0
   24028:	d1f8      	bne.n	2401c <atomic_set_bit_to+0x10>
   2402a:	f3bf 8f5b 	dmb	ish
	}
}
   2402e:	bc10      	pop	{r4}
   24030:	4770      	bx	lr
   24032:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24034:	43c9      	mvns	r1, r1
   24036:	f7ff bfda 	b.w	23fee <atomic_and>

0002403a <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2403a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2403e:	b087      	sub	sp, #28
   24040:	4605      	mov	r5, r0
   24042:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   24046:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2404a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2404e:	460c      	mov	r4, r1
   24050:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   24052:	2100      	movs	r1, #0
   24054:	2210      	movs	r2, #16
   24056:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   24058:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   2405a:	f7ff fde2 	bl	23c22 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2405e:	b9ee      	cbnz	r6, 2409c <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   24060:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   24064:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   24066:	a902      	add	r1, sp, #8
   24068:	f242 0008 	movw	r0, #8200	; 0x2008
   2406c:	f7e6 f92e 	bl	a2cc <hci_set_ad>
		if (err) {
   24070:	4604      	mov	r4, r0
   24072:	b978      	cbnz	r0, 24094 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   24074:	f1ba 0f00 	cmp.w	sl, #0
   24078:	d13e      	bne.n	240f8 <le_adv_update.constprop.0+0xbe>
   2407a:	3510      	adds	r5, #16
   2407c:	f3bf 8f5b 	dmb	ish
   24080:	e855 3f00 	ldrex	r3, [r5]
   24084:	f043 0304 	orr.w	r3, r3, #4
   24088:	e845 3200 	strex	r2, r3, [r5]
   2408c:	2a00      	cmp	r2, #0
   2408e:	d1f7      	bne.n	24080 <le_adv_update.constprop.0+0x46>
   24090:	f3bf 8f5b 	dmb	ish
}
   24094:	4620      	mov	r0, r4
   24096:	b007      	add	sp, #28
   24098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2409c:	f7e5 fea0 	bl	9de0 <bt_get_name>
   240a0:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   240a2:	b9e4      	cbnz	r4, 240de <le_adv_update.constprop.0+0xa4>
   240a4:	bb37      	cbnz	r7, 240f4 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   240a6:	4658      	mov	r0, fp
   240a8:	f7ff fd59 	bl	23b5e <strlen>
   240ac:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   240ae:	2e01      	cmp	r6, #1
		d[0].data = ad;
   240b0:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   240b4:	f88d 3000 	strb.w	r3, [sp]
   240b8:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   240bc:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   240c0:	d1d0      	bne.n	24064 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   240c2:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   240c6:	9605      	str	r6, [sp, #20]
			d_len = 2;
   240c8:	2202      	movs	r2, #2
   240ca:	e7cc      	b.n	24066 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   240cc:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   240d0:	3a08      	subs	r2, #8
   240d2:	2a01      	cmp	r2, #1
   240d4:	d925      	bls.n	24122 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   240d6:	3301      	adds	r3, #1
   240d8:	4598      	cmp	r8, r3
   240da:	d1f7      	bne.n	240cc <le_adv_update.constprop.0+0x92>
   240dc:	e7e2      	b.n	240a4 <le_adv_update.constprop.0+0x6a>
   240de:	2300      	movs	r3, #0
   240e0:	e7fa      	b.n	240d8 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   240e2:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   240e6:	3a08      	subs	r2, #8
   240e8:	2a01      	cmp	r2, #1
   240ea:	d91a      	bls.n	24122 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   240ec:	3301      	adds	r3, #1
   240ee:	4599      	cmp	r9, r3
   240f0:	d1f7      	bne.n	240e2 <le_adv_update.constprop.0+0xa8>
   240f2:	e7d8      	b.n	240a6 <le_adv_update.constprop.0+0x6c>
   240f4:	2300      	movs	r3, #0
   240f6:	e7fa      	b.n	240ee <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   240f8:	2e02      	cmp	r6, #2
   240fa:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   240fe:	bf08      	it	eq
   24100:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24102:	a902      	add	r1, sp, #8
			d_len = 2;
   24104:	bf08      	it	eq
   24106:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24108:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2410c:	bf08      	it	eq
   2410e:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   24112:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24116:	f7e6 f8d9 	bl	a2cc <hci_set_ad>
		if (err) {
   2411a:	2800      	cmp	r0, #0
   2411c:	d0ad      	beq.n	2407a <le_adv_update.constprop.0+0x40>
   2411e:	4604      	mov	r4, r0
   24120:	e7b8      	b.n	24094 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   24122:	f06f 0415 	mvn.w	r4, #21
   24126:	e7b5      	b.n	24094 <le_adv_update.constprop.0+0x5a>

00024128 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   24128:	6843      	ldr	r3, [r0, #4]
   2412a:	f013 0008 	ands.w	r0, r3, #8
   2412e:	d00a      	beq.n	24146 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   24130:	035a      	lsls	r2, r3, #13
   24132:	d407      	bmi.n	24144 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   24134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   24138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2413c:	bf14      	ite	ne
   2413e:	2002      	movne	r0, #2
   24140:	2001      	moveq	r0, #1
   24142:	4770      	bx	lr
   24144:	2001      	movs	r0, #1
}
   24146:	4770      	bx	lr

00024148 <bt_le_adv_set_enable_legacy>:
{
   24148:	b570      	push	{r4, r5, r6, lr}
   2414a:	4606      	mov	r6, r0
   2414c:	b086      	sub	sp, #24
   2414e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   24150:	f242 000a 	movw	r0, #8202	; 0x200a
   24154:	2101      	movs	r1, #1
   24156:	f7e4 fc23 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
   2415a:	4604      	mov	r4, r0
   2415c:	b1b0      	cbz	r0, 2418c <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   2415e:	300c      	adds	r0, #12
	if (enable) {
   24160:	b195      	cbz	r5, 24188 <bt_le_adv_set_enable_legacy+0x40>
   24162:	2101      	movs	r1, #1
   24164:	f001 fa54 	bl	25610 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   24168:	f106 0210 	add.w	r2, r6, #16
   2416c:	a903      	add	r1, sp, #12
   2416e:	4620      	mov	r0, r4
   24170:	9500      	str	r5, [sp, #0]
   24172:	2307      	movs	r3, #7
   24174:	f7e4 fc02 	bl	897c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   24178:	2200      	movs	r2, #0
   2417a:	4621      	mov	r1, r4
   2417c:	f242 000a 	movw	r0, #8202	; 0x200a
   24180:	f7e4 fc48 	bl	8a14 <bt_hci_cmd_send_sync>
}
   24184:	b006      	add	sp, #24
   24186:	bd70      	pop	{r4, r5, r6, pc}
   24188:	4629      	mov	r1, r5
   2418a:	e7eb      	b.n	24164 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2418c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24190:	e7f8      	b.n	24184 <bt_le_adv_set_enable_legacy+0x3c>

00024192 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   24192:	3018      	adds	r0, #24
   24194:	f002 be48 	b.w	26e28 <k_work_cancel_delayable>

00024198 <z_log_msg_static_create.constprop.0>:
   24198:	2300      	movs	r3, #0
   2419a:	f7df bfd9 	b.w	4150 <z_impl_z_log_msg_static_create>

0002419e <tx_complete_work>:
	tx_notify(conn);
   2419e:	3828      	subs	r0, #40	; 0x28
   241a0:	f7e6 bc34 	b.w	aa0c <tx_notify>

000241a4 <bt_conn_reset_rx_state>:
{
   241a4:	b510      	push	{r4, lr}
   241a6:	4604      	mov	r4, r0
	if (!conn->rx) {
   241a8:	6900      	ldr	r0, [r0, #16]
   241aa:	b118      	cbz	r0, 241b4 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   241ac:	f7f6 fdee 	bl	1ad8c <net_buf_unref>
	conn->rx = NULL;
   241b0:	2300      	movs	r3, #0
   241b2:	6123      	str	r3, [r4, #16]
}
   241b4:	bd10      	pop	{r4, pc}

000241b6 <conn_cleanup>:
{
   241b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   241ba:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   241bc:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   241be:	f104 0638 	add.w	r6, r4, #56	; 0x38
   241c2:	2300      	movs	r3, #0
   241c4:	2200      	movs	r2, #0
   241c6:	4630      	mov	r0, r6
   241c8:	f001 f9d3 	bl	25572 <net_buf_get>
   241cc:	4603      	mov	r3, r0
   241ce:	b950      	cbnz	r0, 241e6 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   241d0:	4620      	mov	r0, r4
   241d2:	f7ff ffe7 	bl	241a4 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   241d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   241da:	2200      	movs	r2, #0
}
   241dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   241e0:	2300      	movs	r3, #0
   241e2:	f7fb bfdf 	b.w	201a4 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   241e6:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   241e8:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   241ea:	f7f6 fdcf 	bl	1ad8c <net_buf_unref>
		if (tx) {
   241ee:	2d00      	cmp	r5, #0
   241f0:	d0e7      	beq.n	241c2 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   241f2:	4629      	mov	r1, r5
   241f4:	4620      	mov	r0, r4
   241f6:	f7e6 fc39 	bl	aa6c <conn_tx_destroy>
   241fa:	e7e0      	b.n	241be <conn_cleanup+0x8>

000241fc <bt_conn_ref>:
{
   241fc:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   241fe:	f3bf 8f5b 	dmb	ish
   24202:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   24206:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   2420a:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   2420e:	b17b      	cbz	r3, 24230 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24210:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   24214:	1c59      	adds	r1, r3, #1
   24216:	e852 4f00 	ldrex	r4, [r2]
   2421a:	429c      	cmp	r4, r3
   2421c:	d104      	bne.n	24228 <bt_conn_ref+0x2c>
   2421e:	e842 1c00 	strex	ip, r1, [r2]
   24222:	f1bc 0f00 	cmp.w	ip, #0
   24226:	d1f6      	bne.n	24216 <bt_conn_ref+0x1a>
   24228:	f3bf 8f5b 	dmb	ish
   2422c:	d1e7      	bne.n	241fe <bt_conn_ref+0x2>
}
   2422e:	bd10      	pop	{r4, pc}
			return NULL;
   24230:	4618      	mov	r0, r3
   24232:	e7fc      	b.n	2422e <bt_conn_ref+0x32>

00024234 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   24234:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24238:	f3bf 8f5b 	dmb	ish
   2423c:	e853 1f00 	ldrex	r1, [r3]
   24240:	3901      	subs	r1, #1
   24242:	e843 1200 	strex	r2, r1, [r3]
   24246:	2a00      	cmp	r2, #0
   24248:	d1f8      	bne.n	2423c <bt_conn_unref+0x8>
   2424a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2424e:	8842      	ldrh	r2, [r0, #2]
   24250:	f240 1301 	movw	r3, #257	; 0x101
   24254:	429a      	cmp	r2, r3
   24256:	d108      	bne.n	2426a <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24258:	f3bf 8f5b 	dmb	ish
   2425c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   24260:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   24264:	b90b      	cbnz	r3, 2426a <bt_conn_unref+0x36>
		bt_le_adv_resume();
   24266:	f7e6 bb0d 	b.w	a884 <bt_le_adv_resume>
}
   2426a:	4770      	bx	lr

0002426c <conn_lookup_handle>:
{
   2426c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24270:	4607      	mov	r7, r0
   24272:	460e      	mov	r6, r1
   24274:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24276:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24278:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2427c:	42b4      	cmp	r4, r6
   2427e:	d103      	bne.n	24288 <conn_lookup_handle+0x1c>
	return NULL;
   24280:	2300      	movs	r3, #0
}
   24282:	4618      	mov	r0, r3
   24284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24288:	fb09 7004 	mla	r0, r9, r4, r7
   2428c:	f7ff ffb6 	bl	241fc <bt_conn_ref>
   24290:	4603      	mov	r3, r0
		if (!conn) {
   24292:	b158      	cbz	r0, 242ac <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24294:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24296:	2d01      	cmp	r5, #1
   24298:	d002      	beq.n	242a0 <conn_lookup_handle+0x34>
   2429a:	3d07      	subs	r5, #7
   2429c:	2d01      	cmp	r5, #1
   2429e:	d803      	bhi.n	242a8 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   242a0:	881a      	ldrh	r2, [r3, #0]
   242a2:	4542      	cmp	r2, r8
   242a4:	d0ed      	beq.n	24282 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   242a6:	4618      	mov	r0, r3
   242a8:	f7ff ffc4 	bl	24234 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   242ac:	3401      	adds	r4, #1
   242ae:	e7e5      	b.n	2427c <conn_lookup_handle+0x10>

000242b0 <bt_conn_connected>:
{
   242b0:	b510      	push	{r4, lr}
   242b2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   242b4:	f7e7 faf6 	bl	b8a4 <bt_l2cap_connected>
	notify_connected(conn);
   242b8:	4620      	mov	r0, r4
}
   242ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   242be:	f7e6 bb67 	b.w	a990 <notify_connected>

000242c2 <bt_conn_get_security>:
}
   242c2:	2001      	movs	r0, #1
   242c4:	4770      	bx	lr

000242c6 <bt_conn_is_peer_addr_le>:
{
   242c6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   242c8:	7a03      	ldrb	r3, [r0, #8]
   242ca:	428b      	cmp	r3, r1
{
   242cc:	4604      	mov	r4, r0
   242ce:	4615      	mov	r5, r2
	if (id != conn->id) {
   242d0:	d115      	bne.n	242fe <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   242d2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   242d6:	2207      	movs	r2, #7
   242d8:	4628      	mov	r0, r5
   242da:	f7ff fc70 	bl	23bbe <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   242de:	b180      	cbz	r0, 24302 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   242e0:	78e3      	ldrb	r3, [r4, #3]
   242e2:	2207      	movs	r2, #7
   242e4:	b943      	cbnz	r3, 242f8 <bt_conn_is_peer_addr_le+0x32>
   242e6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   242ea:	4628      	mov	r0, r5
   242ec:	f7ff fc67 	bl	23bbe <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   242f0:	fab0 f080 	clz	r0, r0
   242f4:	0940      	lsrs	r0, r0, #5
}
   242f6:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   242f8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   242fc:	e7f5      	b.n	242ea <bt_conn_is_peer_addr_le+0x24>
		return false;
   242fe:	2000      	movs	r0, #0
   24300:	e7f9      	b.n	242f6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   24302:	2001      	movs	r0, #1
   24304:	e7f7      	b.n	242f6 <bt_conn_is_peer_addr_le+0x30>

00024306 <bt_conn_le_conn_update>:
{
   24306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24308:	4607      	mov	r7, r0
   2430a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2430c:	f242 0013 	movw	r0, #8211	; 0x2013
   24310:	210e      	movs	r1, #14
   24312:	f7e4 fb45 	bl	89a0 <bt_hci_cmd_create>
	if (!buf) {
   24316:	4606      	mov	r6, r0
   24318:	b1d0      	cbz	r0, 24350 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2431a:	210e      	movs	r1, #14
   2431c:	300c      	adds	r0, #12
   2431e:	f001 f968 	bl	255f2 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   24322:	220e      	movs	r2, #14
   24324:	4604      	mov	r4, r0
   24326:	2100      	movs	r1, #0
   24328:	f7ff fc7b 	bl	23c22 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2432c:	883b      	ldrh	r3, [r7, #0]
   2432e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24330:	882b      	ldrh	r3, [r5, #0]
   24332:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24334:	886b      	ldrh	r3, [r5, #2]
   24336:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24338:	88ab      	ldrh	r3, [r5, #4]
   2433a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2433c:	88eb      	ldrh	r3, [r5, #6]
   2433e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24340:	4631      	mov	r1, r6
   24342:	2200      	movs	r2, #0
}
   24344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24348:	f242 0013 	movw	r0, #8211	; 0x2013
   2434c:	f7e4 bb62 	b.w	8a14 <bt_hci_cmd_send_sync>
}
   24350:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024356 <l2cap_connected>:
}
   24356:	4770      	bx	lr

00024358 <z_log_msg_static_create.constprop.0>:
   24358:	2300      	movs	r3, #0
   2435a:	f7df bef9 	b.w	4150 <z_impl_z_log_msg_static_create>

0002435e <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2435e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24360:	4605      	mov	r5, r0
   24362:	460f      	mov	r7, r1
   24364:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   24366:	2300      	movs	r3, #0
   24368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2436c:	2104      	movs	r1, #4
   2436e:	2000      	movs	r0, #0
   24370:	f7e6 ff80 	bl	b274 <bt_conn_create_pdu_timeout>
	if (!buf) {
   24374:	4604      	mov	r4, r0
   24376:	b920      	cbnz	r0, 24382 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   24378:	4628      	mov	r0, r5
}
   2437a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2437e:	f7e7 ba41 	b.w	b804 <l2cap_create_le_sig_pdu.part.0>
   24382:	2104      	movs	r1, #4
   24384:	300c      	adds	r0, #12
   24386:	f001 f934 	bl	255f2 <net_buf_simple_add>
	hdr->code = code;
   2438a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2438c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2438e:	8046      	strh	r6, [r0, #2]
}
   24390:	4620      	mov	r0, r4
   24392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024394 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   24394:	4770      	bx	lr

00024396 <bt_l2cap_chan_del>:
{
   24396:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   24398:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2439c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2439e:	b123      	cbz	r3, 243aa <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   243a0:	686b      	ldr	r3, [r5, #4]
   243a2:	b103      	cbz	r3, 243a6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   243a4:	4798      	blx	r3
	chan->conn = NULL;
   243a6:	2300      	movs	r3, #0
   243a8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   243aa:	68e3      	ldr	r3, [r4, #12]
   243ac:	b10b      	cbz	r3, 243b2 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   243ae:	4620      	mov	r0, r4
   243b0:	4798      	blx	r3
	if (ops->released) {
   243b2:	6a2b      	ldr	r3, [r5, #32]
   243b4:	b11b      	cbz	r3, 243be <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   243b6:	4620      	mov	r0, r4
}
   243b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   243bc:	4718      	bx	r3
}
   243be:	bd70      	pop	{r4, r5, r6, pc}

000243c0 <bt_l2cap_disconnected>:
{
   243c0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   243c2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   243c4:	b130      	cbz	r0, 243d4 <bt_l2cap_disconnected+0x14>
	return node->next;
   243c6:	f850 4908 	ldr.w	r4, [r0], #-8
   243ca:	b104      	cbz	r4, 243ce <bt_l2cap_disconnected+0xe>
   243cc:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   243ce:	f7ff ffe2 	bl	24396 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   243d2:	b904      	cbnz	r4, 243d6 <bt_l2cap_disconnected+0x16>
}
   243d4:	bd38      	pop	{r3, r4, r5, pc}
   243d6:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   243d8:	b12d      	cbz	r5, 243e6 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   243da:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   243dc:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   243de:	f7ff ffda 	bl	24396 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   243e2:	462c      	mov	r4, r5
   243e4:	e7f7      	b.n	243d6 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   243e6:	4620      	mov	r0, r4
}
   243e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   243ec:	f7ff bfd3 	b.w	24396 <bt_l2cap_chan_del>

000243f0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   243f0:	3104      	adds	r1, #4
   243f2:	f7e6 bf3f 	b.w	b274 <bt_conn_create_pdu_timeout>

000243f6 <bt_l2cap_send_cb>:
{
   243f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243fa:	4614      	mov	r4, r2
   243fc:	4605      	mov	r5, r0
   243fe:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   24400:	f102 000c 	add.w	r0, r2, #12
   24404:	2104      	movs	r1, #4
   24406:	461e      	mov	r6, r3
   24408:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2440c:	f001 f912 	bl	25634 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24410:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   24412:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24414:	3a04      	subs	r2, #4
   24416:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24418:	4643      	mov	r3, r8
   2441a:	4632      	mov	r2, r6
   2441c:	4621      	mov	r1, r4
   2441e:	4628      	mov	r0, r5
}
   24420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24424:	f7e6 bd1e 	b.w	ae64 <bt_conn_send_cb>

00024428 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   24428:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2442a:	b130      	cbz	r0, 2443a <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2442c:	8983      	ldrh	r3, [r0, #12]
   2442e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24430:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24434:	d001      	beq.n	2443a <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   24436:	6880      	ldr	r0, [r0, #8]
   24438:	e7f7      	b.n	2442a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2443a:	4770      	bx	lr

0002443c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2443c:	4770      	bx	lr

0002443e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2443e:	4603      	mov	r3, r0
	return list->head;
   24440:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24442:	b128      	cbz	r0, 24450 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24444:	6859      	ldr	r1, [r3, #4]
	return node->next;
   24446:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24448:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2444a:	4288      	cmp	r0, r1
	list->tail = node;
   2444c:	bf08      	it	eq
   2444e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   24450:	4770      	bx	lr

00024452 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24452:	4603      	mov	r3, r0
	size_t bytes = 0;
   24454:	2000      	movs	r0, #0

	while (buf) {
   24456:	b903      	cbnz	r3, 2445a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   24458:	4770      	bx	lr
		bytes += buf->len;
   2445a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2445c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2445e:	4410      	add	r0, r2
		buf = buf->frags;
   24460:	e7f9      	b.n	24456 <net_buf_frags_len+0x4>

00024462 <attr_read_type_cb>:
{
   24462:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   24464:	68d4      	ldr	r4, [r2, #12]
   24466:	7823      	ldrb	r3, [r4, #0]
   24468:	3102      	adds	r1, #2
   2446a:	b913      	cbnz	r3, 24472 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2446c:	7021      	strb	r1, [r4, #0]
	return true;
   2446e:	2001      	movs	r0, #1
}
   24470:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   24472:	428b      	cmp	r3, r1
   24474:	d0fb      	beq.n	2446e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24476:	8a03      	ldrh	r3, [r0, #16]
   24478:	3b02      	subs	r3, #2
   2447a:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2447c:	2000      	movs	r0, #0
   2447e:	6110      	str	r0, [r2, #16]
		return false;
   24480:	e7f6      	b.n	24470 <attr_read_type_cb+0xe>

00024482 <att_prepare_write_req>:
}
   24482:	2006      	movs	r0, #6
   24484:	4770      	bx	lr

00024486 <atomic_test_bit>:
   24486:	f3bf 8f5b 	dmb	ish
   2448a:	6800      	ldr	r0, [r0, #0]
   2448c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24490:	4108      	asrs	r0, r1
}
   24492:	f000 0001 	and.w	r0, r0, #1
   24496:	4770      	bx	lr

00024498 <att_notify_mult>:
{
   24498:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2449a:	6803      	ldr	r3, [r0, #0]
   2449c:	8a0a      	ldrh	r2, [r1, #16]
   2449e:	6818      	ldr	r0, [r3, #0]
   244a0:	68c9      	ldr	r1, [r1, #12]
   244a2:	f7e9 fc4f 	bl	dd44 <bt_gatt_mult_notification>
}
   244a6:	2000      	movs	r0, #0
   244a8:	bd08      	pop	{r3, pc}

000244aa <att_notify>:
{
   244aa:	b538      	push	{r3, r4, r5, lr}
   244ac:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   244ae:	f101 000c 	add.w	r0, r1, #12
   244b2:	460c      	mov	r4, r1
   244b4:	f001 f8d6 	bl	25664 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   244b8:	682d      	ldr	r5, [r5, #0]
   244ba:	8a23      	ldrh	r3, [r4, #16]
   244bc:	68e2      	ldr	r2, [r4, #12]
   244be:	4601      	mov	r1, r0
   244c0:	6828      	ldr	r0, [r5, #0]
   244c2:	f000 ffc2 	bl	2544a <bt_gatt_notification>
}
   244c6:	2000      	movs	r0, #0
   244c8:	bd38      	pop	{r3, r4, r5, pc}

000244ca <att_chan_mtu_updated>:
{
   244ca:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   244cc:	6805      	ldr	r5, [r0, #0]
	return list->head;
   244ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   244d0:	b352      	cbz	r2, 24528 <att_chan_mtu_updated+0x5e>
	return node->next;
   244d2:	6813      	ldr	r3, [r2, #0]
   244d4:	b103      	cbz	r3, 244d8 <att_chan_mtu_updated+0xe>
   244d6:	3be0      	subs	r3, #224	; 0xe0
   244d8:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   244dc:	2200      	movs	r2, #0
   244de:	4611      	mov	r1, r2
   244e0:	e000      	b.n	244e4 <att_chan_mtu_updated+0x1a>
   244e2:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   244e4:	4284      	cmp	r4, r0
   244e6:	d007      	beq.n	244f8 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   244e8:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   244ea:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   244ec:	42b1      	cmp	r1, r6
   244ee:	bf38      	it	cc
   244f0:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   244f2:	42a2      	cmp	r2, r4
   244f4:	bf38      	it	cc
   244f6:	4622      	movcc	r2, r4
   244f8:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   244fa:	b12b      	cbz	r3, 24508 <att_chan_mtu_updated+0x3e>
   244fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   24500:	2b00      	cmp	r3, #0
   24502:	d1ee      	bne.n	244e2 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   24504:	4284      	cmp	r4, r0
   24506:	d1ef      	bne.n	244e8 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   24508:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2450a:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2450c:	428b      	cmp	r3, r1
   2450e:	d801      	bhi.n	24514 <att_chan_mtu_updated+0x4a>
   24510:	4290      	cmp	r0, r2
   24512:	d90b      	bls.n	2452c <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   24514:	4282      	cmp	r2, r0
   24516:	bf38      	it	cc
   24518:	4602      	movcc	r2, r0
   2451a:	4299      	cmp	r1, r3
   2451c:	6828      	ldr	r0, [r5, #0]
   2451e:	bf38      	it	cc
   24520:	4619      	movcc	r1, r3
}
   24522:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   24524:	f7e9 bc8c 	b.w	de40 <bt_gatt_att_max_mtu_changed>
   24528:	4611      	mov	r1, r2
   2452a:	e7ed      	b.n	24508 <att_chan_mtu_updated+0x3e>
}
   2452c:	bc70      	pop	{r4, r5, r6}
   2452e:	4770      	bx	lr

00024530 <write_cb>:
{
   24530:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24532:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   24534:	4601      	mov	r1, r0
{
   24536:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   24538:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2453c:	6820      	ldr	r0, [r4, #0]
   2453e:	f000 feb8 	bl	252b2 <bt_gatt_check_perm>
   24542:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   24544:	bb00      	cbnz	r0, 24588 <write_cb+0x58>
	if (!data->req) {
   24546:	7a23      	ldrb	r3, [r4, #8]
   24548:	b1b3      	cbz	r3, 24578 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2454a:	f1a3 0218 	sub.w	r2, r3, #24
   2454e:	4253      	negs	r3, r2
   24550:	4153      	adcs	r3, r2
   24552:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   24554:	9301      	str	r3, [sp, #4]
   24556:	8a63      	ldrh	r3, [r4, #18]
   24558:	9300      	str	r3, [sp, #0]
   2455a:	68ae      	ldr	r6, [r5, #8]
   2455c:	8a23      	ldrh	r3, [r4, #16]
   2455e:	68e2      	ldr	r2, [r4, #12]
   24560:	6820      	ldr	r0, [r4, #0]
   24562:	4629      	mov	r1, r5
   24564:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   24566:	2800      	cmp	r0, #0
   24568:	db08      	blt.n	2457c <write_cb+0x4c>
   2456a:	8a23      	ldrh	r3, [r4, #16]
   2456c:	4298      	cmp	r0, r3
   2456e:	d10e      	bne.n	2458e <write_cb+0x5e>
	data->err = 0U;
   24570:	2300      	movs	r3, #0
   24572:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   24574:	2001      	movs	r0, #1
   24576:	e008      	b.n	2458a <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   24578:	2302      	movs	r3, #2
   2457a:	e7eb      	b.n	24554 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2457c:	f110 0fff 	cmn.w	r0, #255	; 0xff
   24580:	d305      	bcc.n	2458e <write_cb+0x5e>
		return -err;
   24582:	4240      	negs	r0, r0
   24584:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   24586:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   24588:	2000      	movs	r0, #0
}
   2458a:	b002      	add	sp, #8
   2458c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2458e:	200e      	movs	r0, #14
   24590:	e7f9      	b.n	24586 <write_cb+0x56>

00024592 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   24592:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   24594:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24598:	2300      	movs	r3, #0
   2459a:	9300      	str	r3, [sp, #0]
   2459c:	461a      	mov	r2, r3
   2459e:	f7e8 ff63 	bl	d468 <bt_gatt_foreach_attr_type>
				  user_data);
}
   245a2:	b005      	add	sp, #20
   245a4:	f85d fb04 	ldr.w	pc, [sp], #4

000245a8 <find_info_cb>:
{
   245a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   245aa:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   245ac:	6817      	ldr	r7, [r2, #0]
{
   245ae:	4605      	mov	r5, r0
   245b0:	460e      	mov	r6, r1
   245b2:	4614      	mov	r4, r2
	if (!data->rsp) {
   245b4:	b963      	cbnz	r3, 245d0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   245b6:	6850      	ldr	r0, [r2, #4]
   245b8:	2101      	movs	r1, #1
   245ba:	300c      	adds	r0, #12
   245bc:	f001 f819 	bl	255f2 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   245c0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   245c2:	682b      	ldr	r3, [r5, #0]
   245c4:	781b      	ldrb	r3, [r3, #0]
   245c6:	2b00      	cmp	r3, #0
   245c8:	bf14      	ite	ne
   245ca:	2302      	movne	r3, #2
   245cc:	2301      	moveq	r3, #1
   245ce:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   245d0:	68a3      	ldr	r3, [r4, #8]
   245d2:	781b      	ldrb	r3, [r3, #0]
   245d4:	2b01      	cmp	r3, #1
   245d6:	d003      	beq.n	245e0 <find_info_cb+0x38>
   245d8:	2b02      	cmp	r3, #2
   245da:	d019      	beq.n	24610 <find_info_cb+0x68>
   245dc:	2000      	movs	r0, #0
   245de:	e016      	b.n	2460e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   245e0:	682b      	ldr	r3, [r5, #0]
   245e2:	781b      	ldrb	r3, [r3, #0]
   245e4:	2b00      	cmp	r3, #0
   245e6:	d1f9      	bne.n	245dc <find_info_cb+0x34>
   245e8:	6860      	ldr	r0, [r4, #4]
   245ea:	2104      	movs	r1, #4
   245ec:	300c      	adds	r0, #12
   245ee:	f001 f800 	bl	255f2 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   245f2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   245f4:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   245f6:	682a      	ldr	r2, [r5, #0]
   245f8:	68e3      	ldr	r3, [r4, #12]
   245fa:	8852      	ldrh	r2, [r2, #2]
   245fc:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   245fe:	6863      	ldr	r3, [r4, #4]
   24600:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   24602:	8a1b      	ldrh	r3, [r3, #16]
   24604:	1ac0      	subs	r0, r0, r3
   24606:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   24608:	bf94      	ite	ls
   2460a:	2000      	movls	r0, #0
   2460c:	2001      	movhi	r0, #1
}
   2460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   24610:	682b      	ldr	r3, [r5, #0]
   24612:	781b      	ldrb	r3, [r3, #0]
   24614:	2b02      	cmp	r3, #2
   24616:	d1e1      	bne.n	245dc <find_info_cb+0x34>
   24618:	6860      	ldr	r0, [r4, #4]
   2461a:	2112      	movs	r1, #18
   2461c:	300c      	adds	r0, #12
   2461e:	f000 ffe8 	bl	255f2 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   24622:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   24624:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24626:	6829      	ldr	r1, [r5, #0]
   24628:	68e0      	ldr	r0, [r4, #12]
   2462a:	2210      	movs	r2, #16
   2462c:	3101      	adds	r1, #1
   2462e:	3002      	adds	r0, #2
   24630:	f7ff faec 	bl	23c0c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   24634:	6863      	ldr	r3, [r4, #4]
   24636:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   24638:	8a1b      	ldrh	r3, [r3, #16]
   2463a:	1ac0      	subs	r0, r0, r3
   2463c:	2812      	cmp	r0, #18
   2463e:	e7e3      	b.n	24608 <find_info_cb+0x60>

00024640 <attr_read_group_cb>:
	if (!data->rsp->len) {
   24640:	68d0      	ldr	r0, [r2, #12]
   24642:	7803      	ldrb	r3, [r0, #0]
   24644:	3104      	adds	r1, #4
   24646:	b913      	cbnz	r3, 2464e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   24648:	7001      	strb	r1, [r0, #0]
	return true;
   2464a:	2001      	movs	r0, #1
   2464c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2464e:	428b      	cmp	r3, r1
   24650:	d0fb      	beq.n	2464a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   24652:	6891      	ldr	r1, [r2, #8]
   24654:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   24656:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   24658:	3b04      	subs	r3, #4
   2465a:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2465c:	6110      	str	r0, [r2, #16]
}
   2465e:	4770      	bx	lr

00024660 <z_log_msg_static_create.constprop.0>:
   24660:	2300      	movs	r3, #0
   24662:	f7df bd75 	b.w	4150 <z_impl_z_log_msg_static_create>

00024666 <chan_req_send>:
{
   24666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24668:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2466a:	6888      	ldr	r0, [r1, #8]
   2466c:	f7ff fef1 	bl	24452 <net_buf_frags_len>
   24670:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   24672:	4283      	cmp	r3, r0
{
   24674:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24676:	d30d      	bcc.n	24694 <chan_req_send+0x2e>
	chan->req = req;
   24678:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   2467c:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   2467e:	2600      	movs	r6, #0
   24680:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   24682:	4628      	mov	r0, r5
   24684:	4639      	mov	r1, r7
   24686:	f7e7 fb93 	bl	bdb0 <chan_send>
	if (err) {
   2468a:	b110      	cbz	r0, 24692 <chan_req_send+0x2c>
		req->buf = buf;
   2468c:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2468e:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   24692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   24694:	f06f 0079 	mvn.w	r0, #121	; 0x79
   24698:	e7fb      	b.n	24692 <chan_req_send+0x2c>

0002469a <process_queue>:
{
   2469a:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2469c:	2200      	movs	r2, #0
{
   2469e:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   246a0:	2300      	movs	r3, #0
   246a2:	4608      	mov	r0, r1
{
   246a4:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   246a6:	f000 ff64 	bl	25572 <net_buf_get>
	if (buf) {
   246aa:	4605      	mov	r5, r0
   246ac:	b158      	cbz	r0, 246c6 <process_queue+0x2c>
	return chan_send(chan, buf);
   246ae:	4601      	mov	r1, r0
   246b0:	4620      	mov	r0, r4
   246b2:	f7e7 fb7d 	bl	bdb0 <chan_send>
		if (err) {
   246b6:	4604      	mov	r4, r0
   246b8:	b118      	cbz	r0, 246c2 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   246ba:	4629      	mov	r1, r5
   246bc:	4630      	mov	r0, r6
   246be:	f002 fad1 	bl	26c64 <k_queue_prepend>
}
   246c2:	4620      	mov	r0, r4
   246c4:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   246c6:	f06f 0401 	mvn.w	r4, #1
   246ca:	e7fa      	b.n	246c2 <process_queue+0x28>

000246cc <bt_att_chan_send_rsp>:
{
   246cc:	b538      	push	{r3, r4, r5, lr}
   246ce:	4604      	mov	r4, r0
   246d0:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   246d2:	f7e7 fb6d 	bl	bdb0 <chan_send>
	if (err) {
   246d6:	b130      	cbz	r0, 246e6 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   246d8:	4629      	mov	r1, r5
   246da:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   246de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   246e2:	f000 bf52 	b.w	2558a <net_buf_put>
}
   246e6:	bd38      	pop	{r3, r4, r5, pc}

000246e8 <att_chan_read>:
{
   246e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246ec:	4680      	mov	r8, r0
   246ee:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   246f0:	4610      	mov	r0, r2
{
   246f2:	4699      	mov	r9, r3
   246f4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   246f6:	f7ff feac 	bl	24452 <net_buf_frags_len>
   246fa:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   246fe:	4283      	cmp	r3, r0
{
   24700:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   24702:	d97a      	bls.n	247fa <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   24704:	f8d8 3004 	ldr.w	r3, [r8, #4]
   24708:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2470a:	4630      	mov	r0, r6
   2470c:	f000 ff43 	bl	25596 <net_buf_frag_last>
	size_t len, total = 0;
   24710:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   24714:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24716:	4630      	mov	r0, r6
   24718:	f7ff fe9b 	bl	24452 <net_buf_frags_len>
   2471c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   24720:	f105 070c 	add.w	r7, r5, #12
   24724:	1a24      	subs	r4, r4, r0
   24726:	4638      	mov	r0, r7
   24728:	f000 ffa8 	bl	2567c <net_buf_simple_tailroom>
   2472c:	4284      	cmp	r4, r0
   2472e:	d211      	bcs.n	24754 <att_chan_read+0x6c>
   24730:	4630      	mov	r0, r6
   24732:	f7ff fe8e 	bl	24452 <net_buf_frags_len>
   24736:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2473a:	1a24      	subs	r4, r4, r0
		if (!len) {
   2473c:	bb34      	cbnz	r4, 2478c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2473e:	7ab0      	ldrb	r0, [r6, #10]
   24740:	f7f6 fa62 	bl	1ac08 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   24744:	2200      	movs	r2, #0
   24746:	2300      	movs	r3, #0
   24748:	f000 ff0e 	bl	25568 <net_buf_alloc_fixed>
			if (!frag) {
   2474c:	4605      	mov	r5, r0
   2474e:	b930      	cbnz	r0, 2475e <att_chan_read+0x76>
	return total;
   24750:	4657      	mov	r7, sl
   24752:	e02c      	b.n	247ae <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   24754:	4638      	mov	r0, r7
   24756:	f000 ff91 	bl	2567c <net_buf_simple_tailroom>
   2475a:	4604      	mov	r4, r0
   2475c:	e7ee      	b.n	2473c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2475e:	4601      	mov	r1, r0
   24760:	4630      	mov	r0, r6
   24762:	f000 ff29 	bl	255b8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24766:	4630      	mov	r0, r6
   24768:	f7ff fe73 	bl	24452 <net_buf_frags_len>
   2476c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   24770:	f105 070c 	add.w	r7, r5, #12
   24774:	1a24      	subs	r4, r4, r0
   24776:	4638      	mov	r0, r7
   24778:	f000 ff80 	bl	2567c <net_buf_simple_tailroom>
   2477c:	4284      	cmp	r4, r0
   2477e:	d21a      	bcs.n	247b6 <att_chan_read+0xce>
   24780:	4630      	mov	r0, r6
   24782:	f7ff fe66 	bl	24452 <net_buf_frags_len>
   24786:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2478a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2478c:	68e9      	ldr	r1, [r5, #12]
   2478e:	8a2a      	ldrh	r2, [r5, #16]
   24790:	f8cd 9000 	str.w	r9, [sp]
   24794:	f8db 7004 	ldr.w	r7, [fp, #4]
   24798:	9803      	ldr	r0, [sp, #12]
   2479a:	440a      	add	r2, r1
   2479c:	b2a3      	uxth	r3, r4
   2479e:	4659      	mov	r1, fp
   247a0:	47b8      	blx	r7
		if (read < 0) {
   247a2:	1e07      	subs	r7, r0, #0
   247a4:	da0c      	bge.n	247c0 <att_chan_read+0xd8>
				return total;
   247a6:	f1ba 0f00 	cmp.w	sl, #0
   247aa:	bf18      	it	ne
   247ac:	4657      	movne	r7, sl
}
   247ae:	4638      	mov	r0, r7
   247b0:	b005      	add	sp, #20
   247b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247b6:	4638      	mov	r0, r7
   247b8:	f000 ff60 	bl	2567c <net_buf_simple_tailroom>
   247bc:	4604      	mov	r4, r0
   247be:	e7e5      	b.n	2478c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   247c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   247c2:	b993      	cbnz	r3, 247ea <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   247c4:	4639      	mov	r1, r7
   247c6:	f105 000c 	add.w	r0, r5, #12
   247ca:	f000 ff12 	bl	255f2 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   247ce:	4630      	mov	r0, r6
   247d0:	f7ff fe3f 	bl	24452 <net_buf_frags_len>
   247d4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   247d8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   247da:	4283      	cmp	r3, r0
		total += read;
   247dc:	44ba      	add	sl, r7
		offset += read;
   247de:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   247e2:	d9b5      	bls.n	24750 <att_chan_read+0x68>
   247e4:	42a7      	cmp	r7, r4
   247e6:	d096      	beq.n	24716 <att_chan_read+0x2e>
   247e8:	e7b2      	b.n	24750 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   247ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   247ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   247ee:	4639      	mov	r1, r7
   247f0:	4628      	mov	r0, r5
   247f2:	4798      	blx	r3
   247f4:	2800      	cmp	r0, #0
   247f6:	d1e5      	bne.n	247c4 <att_chan_read+0xdc>
   247f8:	e7aa      	b.n	24750 <att_chan_read+0x68>
		return 0;
   247fa:	2700      	movs	r7, #0
   247fc:	e7d7      	b.n	247ae <att_chan_read+0xc6>

000247fe <sys_slist_find_and_remove.isra.0>:
	return list->head;
   247fe:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24800:	2200      	movs	r2, #0
   24802:	b903      	cbnz	r3, 24806 <sys_slist_find_and_remove.isra.0+0x8>
   24804:	4770      	bx	lr
   24806:	428b      	cmp	r3, r1
   24808:	d10f      	bne.n	2482a <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2480a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2480c:	b93a      	cbnz	r2, 2481e <sys_slist_find_and_remove.isra.0+0x20>
   2480e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   24810:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24812:	4291      	cmp	r1, r2
   24814:	d100      	bne.n	24818 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   24816:	6043      	str	r3, [r0, #4]
	parent->next = child;
   24818:	2300      	movs	r3, #0
   2481a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2481c:	4770      	bx	lr
	parent->next = child;
   2481e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24820:	6843      	ldr	r3, [r0, #4]
   24822:	4299      	cmp	r1, r3
	list->tail = node;
   24824:	bf08      	it	eq
   24826:	6042      	streq	r2, [r0, #4]
}
   24828:	e7f6      	b.n	24818 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2482a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2482c:	681b      	ldr	r3, [r3, #0]
   2482e:	e7e8      	b.n	24802 <sys_slist_find_and_remove.isra.0+0x4>

00024830 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24830:	2301      	movs	r3, #1
   24832:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24834:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24836:	f3bf 8f5b 	dmb	ish
   2483a:	e850 2f00 	ldrex	r2, [r0]
   2483e:	401a      	ands	r2, r3
   24840:	e840 2100 	strex	r1, r2, [r0]
   24844:	2900      	cmp	r1, #0
   24846:	d1f8      	bne.n	2483a <atomic_clear_bit+0xa>
   24848:	f3bf 8f5b 	dmb	ish
}
   2484c:	4770      	bx	lr

0002484e <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2484e:	2006      	movs	r0, #6
   24850:	4770      	bx	lr

00024852 <atomic_test_and_set_bit>:
{
   24852:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24854:	2301      	movs	r3, #1
   24856:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2485a:	f3bf 8f5b 	dmb	ish
   2485e:	e850 3f00 	ldrex	r3, [r0]
   24862:	ea43 0201 	orr.w	r2, r3, r1
   24866:	e840 2400 	strex	r4, r2, [r0]
   2486a:	2c00      	cmp	r4, #0
   2486c:	d1f7      	bne.n	2485e <atomic_test_and_set_bit+0xc>
   2486e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   24872:	4219      	tst	r1, r3
}
   24874:	bf14      	ite	ne
   24876:	2001      	movne	r0, #1
   24878:	2000      	moveq	r0, #0
   2487a:	bd10      	pop	{r4, pc}

0002487c <read_cb>:
{
   2487c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2487e:	6816      	ldr	r6, [r2, #0]
{
   24880:	4605      	mov	r5, r0
	data->err = 0x00;
   24882:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   24884:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   24886:	7313      	strb	r3, [r2, #12]
{
   24888:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2488a:	4629      	mov	r1, r5
   2488c:	2295      	movs	r2, #149	; 0x95
   2488e:	f000 fd10 	bl	252b2 <bt_gatt_check_perm>
   24892:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   24894:	b980      	cbnz	r0, 248b8 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   24896:	e9cd 0000 	strd	r0, r0, [sp]
   2489a:	4629      	mov	r1, r5
   2489c:	88a3      	ldrh	r3, [r4, #4]
   2489e:	68a2      	ldr	r2, [r4, #8]
   248a0:	4630      	mov	r0, r6
   248a2:	f7ff ff21 	bl	246e8 <att_chan_read>
	if (ret < 0) {
   248a6:	2800      	cmp	r0, #0
   248a8:	da09      	bge.n	248be <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   248aa:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   248ae:	bf26      	itte	cs
   248b0:	4240      	negcs	r0, r0
   248b2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   248b4:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   248b6:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   248b8:	2000      	movs	r0, #0
}
   248ba:	b002      	add	sp, #8
   248bc:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   248be:	2001      	movs	r0, #1
   248c0:	e7fb      	b.n	248ba <read_cb+0x3e>

000248c2 <read_vl_cb>:
{
   248c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   248c6:	f8d2 8000 	ldr.w	r8, [r2]
{
   248ca:	4606      	mov	r6, r0
	data->err = 0x00;
   248cc:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   248ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   248d2:	7313      	strb	r3, [r2, #12]
{
   248d4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   248d6:	4631      	mov	r1, r6
   248d8:	2295      	movs	r2, #149	; 0x95
   248da:	f000 fcea 	bl	252b2 <bt_gatt_check_perm>
   248de:	4605      	mov	r5, r0
   248e0:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   248e2:	b9e0      	cbnz	r0, 2491e <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   248e4:	68a0      	ldr	r0, [r4, #8]
   248e6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   248ea:	8a02      	ldrh	r2, [r0, #16]
   248ec:	1a9b      	subs	r3, r3, r2
   248ee:	2b01      	cmp	r3, #1
   248f0:	dd15      	ble.n	2491e <read_vl_cb+0x5c>
   248f2:	2102      	movs	r1, #2
   248f4:	300c      	adds	r0, #12
   248f6:	f000 fe7c 	bl	255f2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   248fa:	e9cd 5500 	strd	r5, r5, [sp]
   248fe:	4607      	mov	r7, r0
   24900:	88a3      	ldrh	r3, [r4, #4]
   24902:	68a2      	ldr	r2, [r4, #8]
   24904:	4631      	mov	r1, r6
   24906:	4640      	mov	r0, r8
   24908:	f7ff feee 	bl	246e8 <att_chan_read>
	if (read < 0) {
   2490c:	1e03      	subs	r3, r0, #0
   2490e:	da0a      	bge.n	24926 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   24910:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   24914:	bf26      	itte	cs
   24916:	425b      	negcs	r3, r3
   24918:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2491a:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   2491c:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2491e:	2000      	movs	r0, #0
}
   24920:	b002      	add	sp, #8
   24922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   24926:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   24928:	2001      	movs	r0, #1
   2492a:	e7f9      	b.n	24920 <read_vl_cb+0x5e>

0002492c <bt_att_sent>:
{
   2492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   2492e:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   24932:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   24934:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   24936:	2104      	movs	r1, #4
   24938:	308c      	adds	r0, #140	; 0x8c
   2493a:	f7ff ff79 	bl	24830 <atomic_clear_bit>
	if (!att) {
   2493e:	b30c      	cbz	r4, 24984 <bt_att_sent+0x58>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   24940:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   24944:	b98b      	cbnz	r3, 2496a <bt_att_sent+0x3e>
   24946:	6863      	ldr	r3, [r4, #4]
   24948:	b17b      	cbz	r3, 2496a <bt_att_sent+0x3e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2494a:	1d20      	adds	r0, r4, #4
   2494c:	f7ff fd77 	bl	2443e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24950:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   24952:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24954:	4638      	mov	r0, r7
   24956:	f7ff fe86 	bl	24666 <chan_req_send>
   2495a:	2800      	cmp	r0, #0
   2495c:	da12      	bge.n	24984 <bt_att_sent+0x58>
	return list->head;
   2495e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   24960:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   24962:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   24964:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   24966:	b903      	cbnz	r3, 2496a <bt_att_sent+0x3e>
	list->tail = node;
   24968:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2496a:	f105 0194 	add.w	r1, r5, #148	; 0x94
   2496e:	4638      	mov	r0, r7
   24970:	f7ff fe93 	bl	2469a <process_queue>
	if (!err) {
   24974:	b130      	cbz	r0, 24984 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   24976:	f104 010c 	add.w	r1, r4, #12
   2497a:	4638      	mov	r0, r7
}
   2497c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   24980:	f7ff be8b 	b.w	2469a <process_queue>
}
   24984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024986 <att_req_send_process>:
{
   24986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2498a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2498c:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2498e:	2c00      	cmp	r4, #0
   24990:	d03b      	beq.n	24a0a <att_req_send_process+0x84>
	return node->next;
   24992:	f854 69e0 	ldr.w	r6, [r4], #-224
   24996:	b106      	cbz	r6, 2499a <att_req_send_process+0x14>
   24998:	3ee0      	subs	r6, #224	; 0xe0
{
   2499a:	2300      	movs	r3, #0
   2499c:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2499e:	f108 0704 	add.w	r7, r8, #4
   249a2:	e013      	b.n	249cc <att_req_send_process+0x46>
		if (!req && prev &&
   249a4:	b1c3      	cbz	r3, 249d8 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   249a6:	2103      	movs	r1, #3
   249a8:	f104 0090 	add.w	r0, r4, #144	; 0x90
   249ac:	f7ff fd6b 	bl	24486 <atomic_test_bit>
   249b0:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   249b2:	f103 0090 	add.w	r0, r3, #144	; 0x90
   249b6:	f7ff fd66 	bl	24486 <atomic_test_bit>
		if (!req && prev &&
   249ba:	4282      	cmp	r2, r0
   249bc:	d10c      	bne.n	249d8 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   249be:	b326      	cbz	r6, 24a0a <att_req_send_process+0x84>
   249c0:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   249c4:	b102      	cbz	r2, 249c8 <att_req_send_process+0x42>
   249c6:	3ae0      	subs	r2, #224	; 0xe0
{
   249c8:	4634      	mov	r4, r6
   249ca:	4616      	mov	r6, r2
		if (chan->req) {
   249cc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   249d0:	2a00      	cmp	r2, #0
   249d2:	d1f4      	bne.n	249be <att_req_send_process+0x38>
		if (!req && prev &&
   249d4:	2d00      	cmp	r5, #0
   249d6:	d0e5      	beq.n	249a4 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   249d8:	4638      	mov	r0, r7
   249da:	f7ff fd30 	bl	2443e <sys_slist_get>
	if (node) {
   249de:	4605      	mov	r5, r0
   249e0:	b908      	cbnz	r0, 249e6 <att_req_send_process+0x60>
   249e2:	4623      	mov	r3, r4
   249e4:	e7eb      	b.n	249be <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   249e6:	4601      	mov	r1, r0
   249e8:	4620      	mov	r0, r4
   249ea:	f7ff fe3c 	bl	24666 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   249ee:	2800      	cmp	r0, #0
   249f0:	da0b      	bge.n	24a0a <att_req_send_process+0x84>
	return list->head;
   249f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   249f6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   249f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   249fc:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   24a00:	2b00      	cmp	r3, #0
   24a02:	d1ee      	bne.n	249e2 <att_req_send_process+0x5c>
	list->tail = node;
   24a04:	f8c8 5008 	str.w	r5, [r8, #8]
}
   24a08:	e7eb      	b.n	249e2 <att_req_send_process+0x5c>
}
   24a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024a0e <bt_att_status>:
{
   24a0e:	b538      	push	{r3, r4, r5, lr}
   24a10:	4605      	mov	r5, r0
   24a12:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24a14:	2100      	movs	r1, #0
   24a16:	f7ff fd36 	bl	24486 <atomic_test_bit>
   24a1a:	b1c0      	cbz	r0, 24a4e <bt_att_status+0x40>
	if (!chan->att) {
   24a1c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   24a20:	b1a8      	cbz	r0, 24a4e <bt_att_status+0x40>
	if (chan->req) {
   24a22:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   24a26:	b993      	cbnz	r3, 24a4e <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   24a28:	3004      	adds	r0, #4
   24a2a:	f7ff fd08 	bl	2443e <sys_slist_get>
	if (!node) {
   24a2e:	4604      	mov	r4, r0
   24a30:	b168      	cbz	r0, 24a4e <bt_att_status+0x40>
	return chan_req_send(chan, req);
   24a32:	4601      	mov	r1, r0
   24a34:	1f28      	subs	r0, r5, #4
   24a36:	f7ff fe16 	bl	24666 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24a3a:	2800      	cmp	r0, #0
   24a3c:	da07      	bge.n	24a4e <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   24a3e:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   24a42:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   24a44:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   24a46:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   24a48:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   24a4a:	b902      	cbnz	r2, 24a4e <bt_att_status+0x40>
	list->tail = node;
   24a4c:	609c      	str	r4, [r3, #8]
}
   24a4e:	bd38      	pop	{r3, r4, r5, pc}

00024a50 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   24a50:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   24a52:	6883      	ldr	r3, [r0, #8]
   24a54:	699b      	ldr	r3, [r3, #24]
   24a56:	b10b      	cbz	r3, 24a5c <att_sent+0xc>
		chan->ops->sent(chan);
   24a58:	3004      	adds	r0, #4
   24a5a:	4718      	bx	r3
}
   24a5c:	4770      	bx	lr

00024a5e <att_unknown>:
{
   24a5e:	b510      	push	{r4, lr}
   24a60:	460c      	mov	r4, r1
	if (!err) {
   24a62:	b90a      	cbnz	r2, 24a68 <att_unknown+0xa>
		att_sent(conn, user_data);
   24a64:	f7ff fff4 	bl	24a50 <att_sent>
	tx_meta_data_free(user_data);
   24a68:	4620      	mov	r0, r4
}
   24a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   24a6e:	f7e7 b8c3 	b.w	bbf8 <tx_meta_data_free>

00024a72 <att_tx_complete>:
{
   24a72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24a76:	4606      	mov	r6, r0
   24a78:	460d      	mov	r5, r1
	if (!err) {
   24a7a:	4614      	mov	r4, r2
   24a7c:	b122      	cbz	r2, 24a88 <att_tx_complete+0x16>
}
   24a7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   24a82:	4608      	mov	r0, r1
   24a84:	f7e7 b8b8 	b.w	bbf8 <tx_meta_data_free>
		att_sent(conn, user_data);
   24a88:	f7ff ffe2 	bl	24a50 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   24a8c:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   24a8e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   24a92:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   24a96:	4628      	mov	r0, r5
   24a98:	f7e7 f8ae 	bl	bbf8 <tx_meta_data_free>
	if (!err && func) {
   24a9c:	b92f      	cbnz	r7, 24aaa <att_tx_complete+0x38>
}
   24a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   24aa2:	4649      	mov	r1, r9
   24aa4:	4630      	mov	r0, r6
   24aa6:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   24aa8:	3401      	adds	r4, #1
   24aaa:	b2a3      	uxth	r3, r4
   24aac:	4543      	cmp	r3, r8
   24aae:	d3f8      	bcc.n	24aa2 <att_tx_complete+0x30>
   24ab0:	e7f5      	b.n	24a9e <att_tx_complete+0x2c>

00024ab2 <att_req_sent>:
{
   24ab2:	b510      	push	{r4, lr}
   24ab4:	460c      	mov	r4, r1
	if (!err) {
   24ab6:	b90a      	cbnz	r2, 24abc <att_req_sent+0xa>
		att_sent(conn, user_data);
   24ab8:	f7ff ffca 	bl	24a50 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   24abc:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   24abe:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   24ac2:	b12b      	cbz	r3, 24ad0 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   24ac4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   24ac8:	2300      	movs	r3, #0
   24aca:	30b0      	adds	r0, #176	; 0xb0
   24acc:	f7fb fb6a 	bl	201a4 <k_work_reschedule>
	tx_meta_data_free(user_data);
   24ad0:	4620      	mov	r0, r4
}
   24ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   24ad6:	f7e7 b88f 	b.w	bbf8 <tx_meta_data_free>

00024ada <att_cfm_sent>:
{
   24ada:	b510      	push	{r4, lr}
   24adc:	460c      	mov	r4, r1
	if (!err) {
   24ade:	b90a      	cbnz	r2, 24ae4 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   24ae0:	f7ff ffb6 	bl	24a50 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   24ae4:	6820      	ldr	r0, [r4, #0]
   24ae6:	2101      	movs	r1, #1
   24ae8:	3090      	adds	r0, #144	; 0x90
   24aea:	f7ff fea1 	bl	24830 <atomic_clear_bit>
	tx_meta_data_free(data);
   24aee:	4620      	mov	r0, r4
}
   24af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   24af4:	f7e7 b880 	b.w	bbf8 <tx_meta_data_free>

00024af8 <att_rsp_sent>:
{
   24af8:	b510      	push	{r4, lr}
   24afa:	460c      	mov	r4, r1
	if (!err) {
   24afc:	b90a      	cbnz	r2, 24b02 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   24afe:	f7ff ffa7 	bl	24a50 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   24b02:	6820      	ldr	r0, [r4, #0]
   24b04:	2100      	movs	r1, #0
   24b06:	3090      	adds	r0, #144	; 0x90
   24b08:	f7ff fe92 	bl	24830 <atomic_clear_bit>
	tx_meta_data_free(data);
   24b0c:	4620      	mov	r0, r4
}
   24b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   24b12:	f7e7 b871 	b.w	bbf8 <tx_meta_data_free>

00024b16 <att_indicate>:
{
   24b16:	b570      	push	{r4, r5, r6, lr}
   24b18:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   24b1a:	f101 000c 	add.w	r0, r1, #12
   24b1e:	460d      	mov	r5, r1
   24b20:	f000 fda0 	bl	25664 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   24b24:	6826      	ldr	r6, [r4, #0]
   24b26:	8a2b      	ldrh	r3, [r5, #16]
   24b28:	68ea      	ldr	r2, [r5, #12]
   24b2a:	4601      	mov	r1, r0
   24b2c:	6830      	ldr	r0, [r6, #0]
   24b2e:	f000 fc8c 	bl	2544a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   24b32:	211e      	movs	r1, #30
   24b34:	2200      	movs	r2, #0
   24b36:	4620      	mov	r0, r4
   24b38:	f7e7 fb6a 	bl	c210 <bt_att_chan_create_pdu>
	if (!buf) {
   24b3c:	4601      	mov	r1, r0
   24b3e:	b110      	cbz	r0, 24b46 <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   24b40:	4620      	mov	r0, r4
   24b42:	f7ff fdc3 	bl	246cc <bt_att_chan_send_rsp>
}
   24b46:	2000      	movs	r0, #0
   24b48:	bd70      	pop	{r4, r5, r6, pc}

00024b4a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   24b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b4e:	4688      	mov	r8, r1
   24b50:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   24b52:	2101      	movs	r1, #1
   24b54:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   24b56:	4605      	mov	r5, r0
   24b58:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   24b5a:	f7e7 fb59 	bl	c210 <bt_att_chan_create_pdu>
	if (!buf) {
   24b5e:	4604      	mov	r4, r0
   24b60:	b170      	cbz	r0, 24b80 <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   24b62:	2104      	movs	r1, #4
   24b64:	300c      	adds	r0, #12
   24b66:	f000 fd44 	bl	255f2 <net_buf_simple_add>
	rsp->request = req;
   24b6a:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   24b6e:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   24b72:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   24b74:	4621      	mov	r1, r4
   24b76:	4628      	mov	r0, r5
}
   24b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   24b7c:	f7ff bda6 	b.w	246cc <bt_att_chan_send_rsp>
}
   24b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024b84 <att_write_req>:
{
   24b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24b86:	460c      	mov	r4, r1
   24b88:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   24b8a:	f101 000c 	add.w	r0, r1, #12
   24b8e:	f000 fd69 	bl	25664 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   24b92:	8a22      	ldrh	r2, [r4, #16]
   24b94:	9201      	str	r2, [sp, #4]
   24b96:	68e2      	ldr	r2, [r4, #12]
   24b98:	9200      	str	r2, [sp, #0]
   24b9a:	4603      	mov	r3, r0
   24b9c:	2213      	movs	r2, #19
   24b9e:	2112      	movs	r1, #18
   24ba0:	4628      	mov	r0, r5
   24ba2:	f7e7 fc95 	bl	c4d0 <att_write_rsp.constprop.0>
}
   24ba6:	b003      	add	sp, #12
   24ba8:	bd30      	pop	{r4, r5, pc}

00024baa <att_write_cmd>:
{
   24baa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24bac:	460c      	mov	r4, r1
   24bae:	4605      	mov	r5, r0
   24bb0:	f101 000c 	add.w	r0, r1, #12
   24bb4:	f000 fd56 	bl	25664 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   24bb8:	8a22      	ldrh	r2, [r4, #16]
   24bba:	9201      	str	r2, [sp, #4]
   24bbc:	68e2      	ldr	r2, [r4, #12]
   24bbe:	9200      	str	r2, [sp, #0]
   24bc0:	2200      	movs	r2, #0
   24bc2:	4603      	mov	r3, r0
   24bc4:	4611      	mov	r1, r2
   24bc6:	4628      	mov	r0, r5
   24bc8:	f7e7 fc82 	bl	c4d0 <att_write_rsp.constprop.0>
}
   24bcc:	b003      	add	sp, #12
   24bce:	bd30      	pop	{r4, r5, pc}

00024bd0 <att_read_blob_req>:
{
   24bd0:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   24bd2:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   24bd4:	8813      	ldrh	r3, [r2, #0]
   24bd6:	8852      	ldrh	r2, [r2, #2]
   24bd8:	9200      	str	r2, [sp, #0]
   24bda:	210c      	movs	r1, #12
   24bdc:	220d      	movs	r2, #13
   24bde:	f7e7 fe43 	bl	c868 <att_read_rsp>
}
   24be2:	b003      	add	sp, #12
   24be4:	f85d fb04 	ldr.w	pc, [sp], #4

00024be8 <att_read_req>:
{
   24be8:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   24bea:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   24bec:	2200      	movs	r2, #0
   24bee:	881b      	ldrh	r3, [r3, #0]
   24bf0:	9200      	str	r2, [sp, #0]
   24bf2:	210a      	movs	r1, #10
   24bf4:	220b      	movs	r2, #11
   24bf6:	f7e7 fe37 	bl	c868 <att_read_rsp>
}
   24bfa:	b003      	add	sp, #12
   24bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00024c00 <att_mtu_req>:
{
   24c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24c04:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   24c06:	f850 2b90 	ldr.w	r2, [r0], #144
{
   24c0a:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   24c0c:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   24c0e:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   24c10:	f7ff fc39 	bl	24486 <atomic_test_bit>
   24c14:	4604      	mov	r4, r0
   24c16:	bb68      	cbnz	r0, 24c74 <att_mtu_req+0x74>
	mtu_client = sys_le16_to_cpu(req->mtu);
   24c18:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   24c1a:	881b      	ldrh	r3, [r3, #0]
   24c1c:	2b16      	cmp	r3, #22
   24c1e:	d92b      	bls.n	24c78 <att_mtu_req+0x78>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   24c20:	2202      	movs	r2, #2
   24c22:	4630      	mov	r0, r6
   24c24:	f7e7 fcb8 	bl	c598 <bt_att_create_pdu>
	if (!pdu) {
   24c28:	4607      	mov	r7, r0
   24c2a:	b338      	cbz	r0, 24c7c <att_mtu_req+0x7c>
	return net_buf_simple_add(&buf->b, len);
   24c2c:	2102      	movs	r1, #2
   24c2e:	300c      	adds	r0, #12
   24c30:	f000 fcdf 	bl	255f2 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   24c34:	f04f 0817 	mov.w	r8, #23
   24c38:	f880 8000 	strb.w	r8, [r0]
   24c3c:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   24c3e:	4639      	mov	r1, r7
   24c40:	4628      	mov	r0, r5
   24c42:	f7ff fd43 	bl	246cc <bt_att_chan_send_rsp>
   24c46:	3604      	adds	r6, #4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   24c48:	f8a5 801a 	strh.w	r8, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   24c4c:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
   24c50:	f3bf 8f5b 	dmb	ish
   24c54:	e856 3f00 	ldrex	r3, [r6]
   24c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   24c5c:	e846 3200 	strex	r2, r3, [r6]
   24c60:	2a00      	cmp	r2, #0
   24c62:	d1f7      	bne.n	24c54 <att_mtu_req+0x54>
   24c64:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   24c68:	4628      	mov	r0, r5
   24c6a:	f7ff fc2e 	bl	244ca <att_chan_mtu_updated>
	return 0;
   24c6e:	4620      	mov	r0, r4
}
   24c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   24c74:	2006      	movs	r0, #6
   24c76:	e7fb      	b.n	24c70 <att_mtu_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
   24c78:	2004      	movs	r0, #4
   24c7a:	e7f9      	b.n	24c70 <att_mtu_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
   24c7c:	200e      	movs	r0, #14
   24c7e:	e7f7      	b.n	24c70 <att_mtu_req+0x70>

00024c80 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24c80:	8a0a      	ldrh	r2, [r1, #16]
   24c82:	68c9      	ldr	r1, [r1, #12]
   24c84:	2300      	movs	r3, #0
   24c86:	f7e7 bf9b 	b.w	cbc0 <att_handle_rsp>

00024c8a <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   24c8a:	f7ff bff9 	b.w	24c80 <att_handle_find_info_rsp>

00024c8e <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   24c8e:	f7ff bff7 	b.w	24c80 <att_handle_find_info_rsp>

00024c92 <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   24c92:	f7ff bff5 	b.w	24c80 <att_handle_find_info_rsp>

00024c96 <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   24c96:	f7ff bff3 	b.w	24c80 <att_handle_find_info_rsp>

00024c9a <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   24c9a:	f7ff bff1 	b.w	24c80 <att_handle_find_info_rsp>

00024c9e <att_handle_read_mult_vl_rsp>:
static uint8_t att_handle_read_mult_vl_rsp(struct bt_att_chan *chan,
   24c9e:	f7ff bfef 	b.w	24c80 <att_handle_find_info_rsp>

00024ca2 <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   24ca2:	f7ff bfed 	b.w	24c80 <att_handle_find_info_rsp>

00024ca6 <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   24ca6:	f7ff bfeb 	b.w	24c80 <att_handle_find_info_rsp>

00024caa <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   24caa:	f7ff bfe9 	b.w	24c80 <att_handle_find_info_rsp>

00024cae <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   24cae:	f7ff bfe7 	b.w	24c80 <att_handle_find_info_rsp>

00024cb2 <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   24cb2:	f7ff bfe5 	b.w	24c80 <att_handle_find_info_rsp>

00024cb6 <att_mtu_rsp>:
{
   24cb6:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   24cb8:	68ce      	ldr	r6, [r1, #12]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   24cba:	8833      	ldrh	r3, [r6, #0]
   24cbc:	2b16      	cmp	r3, #22
{
   24cbe:	4604      	mov	r4, r0
   24cc0:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   24cc2:	d806      	bhi.n	24cd2 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   24cc4:	2200      	movs	r2, #0
   24cc6:	2304      	movs	r3, #4
   24cc8:	4611      	mov	r1, r2
}
   24cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   24cce:	f7e7 bf77 	b.w	cbc0 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   24cd2:	2317      	movs	r3, #23
   24cd4:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   24cd6:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   24cd8:	f7ff fbf7 	bl	244ca <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   24cdc:	8a2a      	ldrh	r2, [r5, #16]
   24cde:	2300      	movs	r3, #0
   24ce0:	4631      	mov	r1, r6
   24ce2:	4620      	mov	r0, r4
   24ce4:	e7f1      	b.n	24cca <att_mtu_rsp+0x14>

00024ce6 <bt_att_send>:
{
   24ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ce8:	460d      	mov	r5, r1
	att = att_get(conn);
   24cea:	f7e7 f8df 	bl	beac <att_get>
	if (!att) {
   24cee:	4604      	mov	r4, r0
   24cf0:	b940      	cbnz	r0, 24d04 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   24cf2:	69a8      	ldr	r0, [r5, #24]
   24cf4:	f7e6 ff80 	bl	bbf8 <tx_meta_data_free>
		net_buf_unref(buf);
   24cf8:	4628      	mov	r0, r5
   24cfa:	f7f6 f847 	bl	1ad8c <net_buf_unref>
		return -ENOTCONN;
   24cfe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   24d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   24d04:	f100 060c 	add.w	r6, r0, #12
   24d08:	4629      	mov	r1, r5
   24d0a:	4630      	mov	r0, r6
   24d0c:	f000 fc3d 	bl	2558a <net_buf_put>
	return list->head;
   24d10:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24d12:	b14d      	cbz	r5, 24d28 <bt_att_send+0x42>
	return node->next;
   24d14:	f855 49e0 	ldr.w	r4, [r5], #-224
   24d18:	b104      	cbz	r4, 24d1c <bt_att_send+0x36>
   24d1a:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   24d1c:	4631      	mov	r1, r6
   24d1e:	4628      	mov	r0, r5
   24d20:	f7ff fcbb 	bl	2469a <process_queue>
		if (!err) {
   24d24:	4603      	mov	r3, r0
   24d26:	b980      	cbnz	r0, 24d4a <bt_att_send+0x64>
	return 0;
   24d28:	2000      	movs	r0, #0
   24d2a:	e7ea      	b.n	24d02 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   24d2c:	2103      	movs	r1, #3
   24d2e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   24d32:	f7ff fba8 	bl	24486 <atomic_test_bit>
   24d36:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   24d38:	f105 0090 	add.w	r0, r5, #144	; 0x90
   24d3c:	f7ff fba3 	bl	24486 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   24d40:	4287      	cmp	r7, r0
   24d42:	f06f 0301 	mvn.w	r3, #1
   24d46:	d107      	bne.n	24d58 <bt_att_send+0x72>
   24d48:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24d4a:	2c00      	cmp	r4, #0
   24d4c:	d0ec      	beq.n	24d28 <bt_att_send+0x42>
   24d4e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   24d52:	b922      	cbnz	r2, 24d5e <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   24d54:	3302      	adds	r3, #2
   24d56:	d0e9      	beq.n	24d2c <bt_att_send+0x46>
{
   24d58:	4625      	mov	r5, r4
   24d5a:	4614      	mov	r4, r2
   24d5c:	e7de      	b.n	24d1c <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24d5e:	3ae0      	subs	r2, #224	; 0xe0
   24d60:	e7f8      	b.n	24d54 <bt_att_send+0x6e>

00024d62 <bt_att_req_send>:
{
   24d62:	b510      	push	{r4, lr}
   24d64:	460c      	mov	r4, r1
	att = att_get(conn);
   24d66:	f7e7 f8a1 	bl	beac <att_get>
	if (!att) {
   24d6a:	b160      	cbz	r0, 24d86 <bt_att_req_send+0x24>
	parent->next = child;
   24d6c:	2300      	movs	r3, #0
   24d6e:	6023      	str	r3, [r4, #0]
	return list->tail;
   24d70:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   24d72:	b92b      	cbnz	r3, 24d80 <bt_att_req_send+0x1e>
	list->head = node;
   24d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   24d78:	f7ff fe05 	bl	24986 <att_req_send_process>
	return 0;
   24d7c:	2000      	movs	r0, #0
}
   24d7e:	bd10      	pop	{r4, pc}
	parent->next = child;
   24d80:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24d82:	6084      	str	r4, [r0, #8]
}
   24d84:	e7f8      	b.n	24d78 <bt_att_req_send+0x16>
		return -ENOTCONN;
   24d86:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   24d8a:	e7f8      	b.n	24d7e <bt_att_req_send+0x1c>

00024d8c <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   24d8c:	b510      	push	{r4, lr}
   24d8e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   24d90:	f7e7 f88c 	bl	beac <att_get>
	if (!att) {
   24d94:	b198      	cbz	r0, 24dbe <bt_att_find_req_by_user_data+0x32>
	return list->head;
   24d96:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   24d98:	b14b      	cbz	r3, 24dae <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   24d9a:	f853 2c4c 	ldr.w	r2, [r3, #-76]
   24d9e:	68d1      	ldr	r1, [r2, #12]
   24da0:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   24da2:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (chan->req->user_data == user_data) {
   24da6:	d009      	beq.n	24dbc <bt_att_find_req_by_user_data+0x30>
	return node->next;
   24da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   24dac:	e7f4      	b.n	24d98 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   24dae:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   24db0:	b128      	cbz	r0, 24dbe <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   24db2:	68c3      	ldr	r3, [r0, #12]
   24db4:	42a3      	cmp	r3, r4
   24db6:	d002      	beq.n	24dbe <bt_att_find_req_by_user_data+0x32>
	return node->next;
   24db8:	6800      	ldr	r0, [r0, #0]
   24dba:	e7f9      	b.n	24db0 <bt_att_find_req_by_user_data+0x24>
		if (chan->req->user_data == user_data) {
   24dbc:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   24dbe:	bd10      	pop	{r4, pc}

00024dc0 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   24dc0:	2001      	movs	r0, #1
   24dc2:	4770      	bx	lr

00024dc4 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   24dc4:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   24dc6:	f7e7 f871 	bl	beac <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   24dca:	b150      	cbz	r0, 24de2 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   24dcc:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   24dce:	b144      	cbz	r4, 24de2 <bt_att_clear_out_of_sync_sent+0x1e>
   24dd0:	3ce0      	subs	r4, #224	; 0xe0
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   24dd2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   24dd6:	2105      	movs	r1, #5
   24dd8:	f7ff fd2a 	bl	24830 <atomic_clear_bit>
	return node->next;
   24ddc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   24de0:	e7f5      	b.n	24dce <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   24de2:	bd10      	pop	{r4, pc}

00024de4 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   24de4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   24de6:	2104      	movs	r1, #4
   24de8:	f7ff fb1e 	bl	24428 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   24dec:	b128      	cbz	r0, 24dfa <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   24dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   24df2:	2105      	movs	r1, #5
   24df4:	308c      	adds	r0, #140	; 0x8c
   24df6:	f7ff bb46 	b.w	24486 <atomic_test_bit>
}
   24dfa:	bd08      	pop	{r3, pc}

00024dfc <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   24dfc:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   24dfe:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   24e02:	2201      	movs	r2, #1
   24e04:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   24e06:	7403      	strb	r3, [r0, #16]
}
   24e08:	4770      	bx	lr

00024e0a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   24e0a:	6010      	str	r0, [r2, #0]
}
   24e0c:	2000      	movs	r0, #0
   24e0e:	4770      	bx	lr

00024e10 <gatt_ccc_changed>:
{
   24e10:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   24e12:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   24e14:	895a      	ldrh	r2, [r3, #10]
   24e16:	428a      	cmp	r2, r1
   24e18:	d003      	beq.n	24e22 <gatt_ccc_changed+0x12>
		ccc->value = value;
   24e1a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   24e1c:	68db      	ldr	r3, [r3, #12]
   24e1e:	b103      	cbz	r3, 24e22 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   24e20:	4718      	bx	r3
}
   24e22:	4770      	bx	lr

00024e24 <gatt_indicate_rsp>:
{
   24e24:	b510      	push	{r4, lr}
   24e26:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   24e28:	68a3      	ldr	r3, [r4, #8]
{
   24e2a:	460a      	mov	r2, r1
	if (params->func) {
   24e2c:	b10b      	cbz	r3, 24e32 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   24e2e:	4621      	mov	r1, r4
   24e30:	4798      	blx	r3
	params->_ref--;
   24e32:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   24e34:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   24e36:	3b01      	subs	r3, #1
   24e38:	b2db      	uxtb	r3, r3
   24e3a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   24e3c:	b122      	cbz	r2, 24e48 <gatt_indicate_rsp+0x24>
   24e3e:	b91b      	cbnz	r3, 24e48 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   24e40:	4620      	mov	r0, r4
}
   24e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   24e46:	4710      	bx	r2
}
   24e48:	bd10      	pop	{r4, pc}

00024e4a <match_uuid>:
	data->attr = attr;
   24e4a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   24e4c:	8091      	strh	r1, [r2, #4]
}
   24e4e:	2000      	movs	r0, #0
   24e50:	4770      	bx	lr

00024e52 <gen_hash_m>:
{
   24e52:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24e54:	6807      	ldr	r7, [r0, #0]
   24e56:	783d      	ldrb	r5, [r7, #0]
{
   24e58:	b089      	sub	sp, #36	; 0x24
   24e5a:	4606      	mov	r6, r0
   24e5c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24e5e:	b9dd      	cbnz	r5, 24e98 <gen_hash_m+0x46>
	switch (u16->val) {
   24e60:	887b      	ldrh	r3, [r7, #2]
   24e62:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   24e66:	d004      	beq.n	24e72 <gen_hash_m+0x20>
   24e68:	d810      	bhi.n	24e8c <gen_hash_m+0x3a>
   24e6a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   24e6e:	2b03      	cmp	r3, #3
   24e70:	d812      	bhi.n	24e98 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   24e72:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24e76:	2202      	movs	r2, #2
   24e78:	f10d 010a 	add.w	r1, sp, #10
   24e7c:	4620      	mov	r0, r4
   24e7e:	f7fe fc85 	bl	2378c <tc_cmac_update>
   24e82:	b968      	cbnz	r0, 24ea0 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   24e84:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   24e88:	65a2      	str	r2, [r4, #88]	; 0x58
   24e8a:	e006      	b.n	24e9a <gen_hash_m+0x48>
	switch (u16->val) {
   24e8c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   24e90:	33ff      	adds	r3, #255	; 0xff
   24e92:	b29b      	uxth	r3, r3
   24e94:	2b04      	cmp	r3, #4
   24e96:	d91e      	bls.n	24ed6 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   24e98:	2501      	movs	r5, #1
}
   24e9a:	4628      	mov	r0, r5
   24e9c:	b009      	add	sp, #36	; 0x24
   24e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   24ea0:	887b      	ldrh	r3, [r7, #2]
   24ea2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24ea6:	2202      	movs	r2, #2
   24ea8:	f10d 010a 	add.w	r1, sp, #10
   24eac:	4620      	mov	r0, r4
   24eae:	f7fe fc6d 	bl	2378c <tc_cmac_update>
   24eb2:	2800      	cmp	r0, #0
   24eb4:	d0e6      	beq.n	24e84 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   24eb6:	2000      	movs	r0, #0
   24eb8:	9000      	str	r0, [sp, #0]
   24eba:	aa03      	add	r2, sp, #12
   24ebc:	6877      	ldr	r7, [r6, #4]
   24ebe:	2313      	movs	r3, #19
   24ec0:	4631      	mov	r1, r6
   24ec2:	47b8      	blx	r7
		if (len < 0) {
   24ec4:	1e02      	subs	r2, r0, #0
   24ec6:	dbdf      	blt.n	24e88 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   24ec8:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24eca:	4620      	mov	r0, r4
   24ecc:	f7fe fc5e 	bl	2378c <tc_cmac_update>
   24ed0:	2800      	cmp	r0, #0
   24ed2:	d1e1      	bne.n	24e98 <gen_hash_m+0x46>
   24ed4:	e7d6      	b.n	24e84 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   24ed6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24eda:	2202      	movs	r2, #2
   24edc:	f10d 010a 	add.w	r1, sp, #10
   24ee0:	4620      	mov	r0, r4
   24ee2:	f7fe fc53 	bl	2378c <tc_cmac_update>
   24ee6:	2800      	cmp	r0, #0
   24ee8:	d0cc      	beq.n	24e84 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   24eea:	887b      	ldrh	r3, [r7, #2]
   24eec:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24ef0:	2202      	movs	r2, #2
   24ef2:	f10d 010a 	add.w	r1, sp, #10
   24ef6:	e7e8      	b.n	24eca <gen_hash_m+0x78>

00024ef8 <bt_addr_le_eq>:
{
   24ef8:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   24efa:	2207      	movs	r2, #7
   24efc:	f7fe fe5f 	bl	23bbe <memcmp>
}
   24f00:	fab0 f080 	clz	r0, r0
   24f04:	0940      	lsrs	r0, r0, #5
   24f06:	bd08      	pop	{r3, pc}

00024f08 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24f08:	f3bf 8f5b 	dmb	ish
   24f0c:	6800      	ldr	r0, [r0, #0]
   24f0e:	f3bf 8f5b 	dmb	ish
}
   24f12:	4770      	bx	lr

00024f14 <atomic_or>:
{
   24f14:	b510      	push	{r4, lr}
   24f16:	4603      	mov	r3, r0
}
   24f18:	f3bf 8f5b 	dmb	ish
   24f1c:	e853 0f00 	ldrex	r0, [r3]
   24f20:	ea40 0201 	orr.w	r2, r0, r1
   24f24:	e843 2400 	strex	r4, r2, [r3]
   24f28:	2c00      	cmp	r4, #0
   24f2a:	d1f7      	bne.n	24f1c <atomic_or+0x8>
   24f2c:	f3bf 8f5b 	dmb	ish
   24f30:	bd10      	pop	{r4, pc}

00024f32 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24f32:	2207      	movs	r2, #7
   24f34:	f7fe be6a 	b.w	23c0c <memcpy>

00024f38 <atomic_and>:
{
   24f38:	b510      	push	{r4, lr}
   24f3a:	4603      	mov	r3, r0
}
   24f3c:	f3bf 8f5b 	dmb	ish
   24f40:	e853 0f00 	ldrex	r0, [r3]
   24f44:	ea00 0201 	and.w	r2, r0, r1
   24f48:	e843 2400 	strex	r4, r2, [r3]
   24f4c:	2c00      	cmp	r4, #0
   24f4e:	d1f7      	bne.n	24f40 <atomic_and+0x8>
   24f50:	f3bf 8f5b 	dmb	ish
   24f54:	bd10      	pop	{r4, pc}

00024f56 <z_log_msg_static_create.constprop.0>:
   24f56:	2300      	movs	r3, #0
   24f58:	f7df b8fa 	b.w	4150 <z_impl_z_log_msg_static_create>

00024f5c <sc_clear>:
{
   24f5c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   24f5e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   24f62:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   24f64:	4631      	mov	r1, r6
   24f66:	7a00      	ldrb	r0, [r0, #8]
   24f68:	f7fe ffc0 	bl	23eec <bt_addr_le_is_bonded>
   24f6c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   24f6e:	4631      	mov	r1, r6
   24f70:	f7e7 ff60 	bl	ce34 <find_sc_cfg>
	if (!cfg) {
   24f74:	b128      	cbz	r0, 24f82 <sc_clear+0x26>
}
   24f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   24f7a:	220c      	movs	r2, #12
   24f7c:	2100      	movs	r1, #0
   24f7e:	f7fe be50 	b.w	23c22 <memset>
}
   24f82:	bd70      	pop	{r4, r5, r6, pc}

00024f84 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   24f84:	2a02      	cmp	r2, #2
{
   24f86:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   24f88:	d108      	bne.n	24f9c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   24f8a:	2300      	movs	r3, #0
   24f8c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24f90:	461a      	mov	r2, r3
   24f92:	7a00      	ldrb	r0, [r0, #8]
   24f94:	f7e8 f8f6 	bl	d184 <sc_save>
}
   24f98:	2002      	movs	r0, #2
   24f9a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   24f9c:	f7ff ffde 	bl	24f5c <sc_clear>
   24fa0:	e7fa      	b.n	24f98 <sc_ccc_cfg_write+0x14>

00024fa2 <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   24fa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24fa6:	4606      	mov	r6, r0
   24fa8:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   24faa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   24fae:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   24fb0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   24fb4:	4617      	mov	r7, r2
   24fb6:	4698      	mov	r8, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   24fb8:	f7e7 fdc8 	bl	cb4c <bt_att_req_alloc>
	if (!req) {
   24fbc:	4604      	mov	r4, r0
   24fbe:	b160      	cbz	r0, 24fda <gatt_req_send.constprop.0+0x38>
	req->func = func;
   24fc0:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   24fc2:	60c7      	str	r7, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   24fc4:	f89d 1020 	ldrb.w	r1, [sp, #32]
   24fc8:	464a      	mov	r2, r9
   24fca:	4630      	mov	r0, r6
   24fcc:	f7e7 fae4 	bl	c598 <bt_att_create_pdu>
   24fd0:	4605      	mov	r5, r0
	if (!buf) {
   24fd2:	b938      	cbnz	r0, 24fe4 <gatt_req_send.constprop.0+0x42>
		bt_att_req_free(req);
   24fd4:	4620      	mov	r0, r4
   24fd6:	f7e7 fddb 	bl	cb90 <bt_att_req_free>
		return -ENOMEM;
   24fda:	f06f 050b 	mvn.w	r5, #11
}
   24fde:	4628      	mov	r0, r5
   24fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   24fe4:	2200      	movs	r2, #0
   24fe6:	4611      	mov	r1, r2
   24fe8:	2301      	movs	r3, #1
   24fea:	f7ff ff07 	bl	24dfc <bt_att_set_tx_meta_data>
	req->buf = buf;
   24fee:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   24ff0:	4628      	mov	r0, r5
   24ff2:	463a      	mov	r2, r7
   24ff4:	4649      	mov	r1, r9
   24ff6:	47c0      	blx	r8
	if (err) {
   24ff8:	4605      	mov	r5, r0
   24ffa:	b118      	cbz	r0, 25004 <gatt_req_send.constprop.0+0x62>
		bt_att_req_free(req);
   24ffc:	4620      	mov	r0, r4
   24ffe:	f7e7 fdc7 	bl	cb90 <bt_att_req_free>
   25002:	e7ec      	b.n	24fde <gatt_req_send.constprop.0+0x3c>
	err = bt_att_req_send(conn, req);
   25004:	4621      	mov	r1, r4
   25006:	4630      	mov	r0, r6
   25008:	f7ff feab 	bl	24d62 <bt_att_req_send>
	if (err) {
   2500c:	4605      	mov	r5, r0
   2500e:	2800      	cmp	r0, #0
   25010:	d0e5      	beq.n	24fde <gatt_req_send.constprop.0+0x3c>
   25012:	e7f3      	b.n	24ffc <gatt_req_send.constprop.0+0x5a>

00025014 <read_appearance>:
{
   25014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25016:	4615      	mov	r5, r2
   25018:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2501c:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2501e:	f7fe ff63 	bl	23ee8 <bt_get_appearance>
	if (offset > value_len) {
   25022:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25024:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25028:	d80e      	bhi.n	25048 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2502a:	f1c6 0402 	rsb	r4, r6, #2
   2502e:	42bc      	cmp	r4, r7
   25030:	bfa8      	it	ge
   25032:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25034:	f10d 0306 	add.w	r3, sp, #6
   25038:	4622      	mov	r2, r4
   2503a:	1999      	adds	r1, r3, r6
   2503c:	4628      	mov	r0, r5
   2503e:	f7fe fde5 	bl	23c0c <memcpy>
}
   25042:	4620      	mov	r0, r4
   25044:	b003      	add	sp, #12
   25046:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25048:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2504c:	e7f9      	b.n	25042 <read_appearance+0x2e>

0002504e <read_name>:
{
   2504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25052:	4698      	mov	r8, r3
   25054:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   25058:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2505a:	f7e4 fec1 	bl	9de0 <bt_get_name>
   2505e:	4607      	mov	r7, r0
				 strlen(name));
   25060:	f7fe fd7d 	bl	23b5e <strlen>
	if (offset > value_len) {
   25064:	b283      	uxth	r3, r0
   25066:	42b3      	cmp	r3, r6
   25068:	d30c      	bcc.n	25084 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2506a:	1b9c      	subs	r4, r3, r6
   2506c:	4544      	cmp	r4, r8
   2506e:	bfa8      	it	ge
   25070:	4644      	movge	r4, r8
   25072:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25074:	4622      	mov	r2, r4
   25076:	19b9      	adds	r1, r7, r6
   25078:	4628      	mov	r0, r5
   2507a:	f7fe fdc7 	bl	23c0c <memcpy>
}
   2507e:	4620      	mov	r0, r4
   25080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25084:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25088:	e7f9      	b.n	2507e <read_name+0x30>

0002508a <cf_read>:
{
   2508a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2508c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2508e:	2300      	movs	r3, #0
{
   25090:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   25094:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25098:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2509a:	f7e7 feb3 	bl	ce04 <find_cf_cfg>
	if (cfg) {
   2509e:	b128      	cbz	r0, 250ac <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   250a0:	f100 0108 	add.w	r1, r0, #8
   250a4:	2201      	movs	r2, #1
   250a6:	a801      	add	r0, sp, #4
   250a8:	f7fe fdb0 	bl	23c0c <memcpy>
	if (offset > value_len) {
   250ac:	2e01      	cmp	r6, #1
   250ae:	d80d      	bhi.n	250cc <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   250b0:	f1c6 0401 	rsb	r4, r6, #1
   250b4:	42bc      	cmp	r4, r7
   250b6:	bfa8      	it	ge
   250b8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   250ba:	ab01      	add	r3, sp, #4
   250bc:	4622      	mov	r2, r4
   250be:	1999      	adds	r1, r3, r6
   250c0:	4628      	mov	r0, r5
   250c2:	f7fe fda3 	bl	23c0c <memcpy>
}
   250c6:	4620      	mov	r0, r4
   250c8:	b003      	add	sp, #12
   250ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   250cc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   250d0:	e7f9      	b.n	250c6 <cf_read+0x3c>

000250d2 <bt_gatt_attr_read_service>:
{
   250d2:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   250d4:	68c9      	ldr	r1, [r1, #12]
{
   250d6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   250d8:	780a      	ldrb	r2, [r1, #0]
{
   250da:	461c      	mov	r4, r3
   250dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   250e0:	b992      	cbnz	r2, 25108 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   250e2:	884a      	ldrh	r2, [r1, #2]
   250e4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   250e8:	2b02      	cmp	r3, #2
   250ea:	d818      	bhi.n	2511e <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   250ec:	f1c3 0202 	rsb	r2, r3, #2
   250f0:	4294      	cmp	r4, r2
   250f2:	bfa8      	it	ge
   250f4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   250f6:	4622      	mov	r2, r4
   250f8:	f10d 0106 	add.w	r1, sp, #6
   250fc:	4419      	add	r1, r3
   250fe:	f7fe fd85 	bl	23c0c <memcpy>
}
   25102:	4620      	mov	r0, r4
   25104:	b002      	add	sp, #8
   25106:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   25108:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   2510a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2510e:	d806      	bhi.n	2511e <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   25110:	f1c3 0210 	rsb	r2, r3, #16
   25114:	4294      	cmp	r4, r2
   25116:	bfa8      	it	ge
   25118:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2511a:	4622      	mov	r2, r4
   2511c:	e7ee      	b.n	250fc <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2511e:	f06f 0406 	mvn.w	r4, #6
   25122:	e7ee      	b.n	25102 <bt_gatt_attr_read_service+0x30>

00025124 <bt_gatt_attr_read_ccc>:
{
   25124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   25126:	68c9      	ldr	r1, [r1, #12]
{
   25128:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2512c:	4615      	mov	r5, r2
   2512e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   25130:	f7e7 fe90 	bl	ce54 <find_ccc_cfg>
	if (cfg) {
   25134:	b100      	cbz	r0, 25138 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   25136:	8900      	ldrh	r0, [r0, #8]
   25138:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2513c:	2e02      	cmp	r6, #2
   2513e:	d80e      	bhi.n	2515e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   25140:	f1c6 0402 	rsb	r4, r6, #2
   25144:	42bc      	cmp	r4, r7
   25146:	bfa8      	it	ge
   25148:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2514a:	f10d 0306 	add.w	r3, sp, #6
   2514e:	4622      	mov	r2, r4
   25150:	1999      	adds	r1, r3, r6
   25152:	4628      	mov	r0, r5
   25154:	f7fe fd5a 	bl	23c0c <memcpy>
}
   25158:	4620      	mov	r0, r4
   2515a:	b003      	add	sp, #12
   2515c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2515e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25162:	e7f9      	b.n	25158 <bt_gatt_attr_read_ccc+0x34>

00025164 <gatt_write_ccc_buf>:
{
   25164:	b538      	push	{r3, r4, r5, lr}
   25166:	f100 050c 	add.w	r5, r0, #12
   2516a:	2102      	movs	r1, #2
   2516c:	4628      	mov	r0, r5
   2516e:	4614      	mov	r4, r2
   25170:	f000 fa3f 	bl	255f2 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   25174:	89e3      	ldrh	r3, [r4, #14]
   25176:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   25178:	8a21      	ldrh	r1, [r4, #16]
   2517a:	4628      	mov	r0, r5
   2517c:	f000 fa50 	bl	25620 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25180:	2104      	movs	r1, #4
   25182:	f104 0014 	add.w	r0, r4, #20
   25186:	f7ff fec5 	bl	24f14 <atomic_or>
}
   2518a:	2000      	movs	r0, #0
   2518c:	bd38      	pop	{r3, r4, r5, pc}

0002518e <sc_restore_rsp>:
{
   2518e:	b538      	push	{r3, r4, r5, lr}
   25190:	4604      	mov	r4, r0
   25192:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   25194:	f7ff fe14 	bl	24dc0 <bt_att_fixed_chan_only>
   25198:	b150      	cbz	r0, 251b0 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2519a:	4620      	mov	r0, r4
   2519c:	f7e7 fe32 	bl	ce04 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   251a0:	b130      	cbz	r0, 251b0 <sc_restore_rsp+0x22>
   251a2:	7a03      	ldrb	r3, [r0, #8]
   251a4:	07db      	lsls	r3, r3, #31
   251a6:	d503      	bpl.n	251b0 <sc_restore_rsp+0x22>
   251a8:	2101      	movs	r1, #1
   251aa:	300c      	adds	r0, #12
   251ac:	f7ff feb2 	bl	24f14 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   251b0:	b965      	cbnz	r5, 251cc <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   251b2:	7a20      	ldrb	r0, [r4, #8]
   251b4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   251b8:	f7e7 fe3c 	bl	ce34 <find_sc_cfg>
		if (sc_cfg) {
   251bc:	b130      	cbz	r0, 251cc <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   251be:	4629      	mov	r1, r5
   251c0:	2204      	movs	r2, #4
}
   251c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   251c6:	3008      	adds	r0, #8
   251c8:	f7fe bd2b 	b.w	23c22 <memset>
}
   251cc:	bd38      	pop	{r3, r4, r5, pc}

000251ce <bt_gatt_attr_read>:
{
   251ce:	b510      	push	{r4, lr}
   251d0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   251d4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   251d8:	42a1      	cmp	r1, r4
{
   251da:	4610      	mov	r0, r2
	if (offset > value_len) {
   251dc:	d80b      	bhi.n	251f6 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   251de:	1a64      	subs	r4, r4, r1
   251e0:	429c      	cmp	r4, r3
   251e2:	bfa8      	it	ge
   251e4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   251e6:	9b03      	ldr	r3, [sp, #12]
   251e8:	b2a4      	uxth	r4, r4
   251ea:	4622      	mov	r2, r4
   251ec:	4419      	add	r1, r3
   251ee:	f7fe fd0d 	bl	23c0c <memcpy>
}
   251f2:	4620      	mov	r0, r4
   251f4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   251f6:	f06f 0406 	mvn.w	r4, #6
   251fa:	e7fa      	b.n	251f2 <bt_gatt_attr_read+0x24>

000251fc <bt_gatt_attr_value_handle>:
{
   251fc:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   251fe:	4604      	mov	r4, r0
   25200:	b910      	cbnz	r0, 25208 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   25202:	2000      	movs	r0, #0
}
   25204:	b002      	add	sp, #8
   25206:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25208:	2300      	movs	r3, #0
   2520a:	f88d 3004 	strb.w	r3, [sp, #4]
   2520e:	6800      	ldr	r0, [r0, #0]
   25210:	f642 0303 	movw	r3, #10243	; 0x2803
   25214:	a901      	add	r1, sp, #4
   25216:	f8ad 3006 	strh.w	r3, [sp, #6]
   2521a:	f7fe fd2f 	bl	23c7c <bt_uuid_cmp>
   2521e:	2800      	cmp	r0, #0
   25220:	d1ef      	bne.n	25202 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25222:	68e3      	ldr	r3, [r4, #12]
   25224:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   25226:	2800      	cmp	r0, #0
   25228:	d1ec      	bne.n	25204 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2522a:	4620      	mov	r0, r4
   2522c:	f7e8 f8ec 	bl	d408 <bt_gatt_attr_get_handle>
   25230:	3001      	adds	r0, #1
   25232:	b280      	uxth	r0, r0
	return handle;
   25234:	e7e6      	b.n	25204 <bt_gatt_attr_value_handle+0x8>

00025236 <bt_gatt_attr_read_chrc>:
{
   25236:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25238:	68cc      	ldr	r4, [r1, #12]
{
   2523a:	b087      	sub	sp, #28
   2523c:	4608      	mov	r0, r1
   2523e:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   25240:	79a3      	ldrb	r3, [r4, #6]
   25242:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25246:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2524a:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2524c:	f7ff ffd6 	bl	251fc <bt_gatt_attr_value_handle>
   25250:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25254:	6821      	ldr	r1, [r4, #0]
   25256:	780b      	ldrb	r3, [r1, #0]
   25258:	b99b      	cbnz	r3, 25282 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2525a:	884b      	ldrh	r3, [r1, #2]
   2525c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   25260:	2405      	movs	r4, #5
	if (offset > value_len) {
   25262:	42b4      	cmp	r4, r6
   25264:	d315      	bcc.n	25292 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   25266:	1ba4      	subs	r4, r4, r6
   25268:	42bc      	cmp	r4, r7
   2526a:	bfa8      	it	ge
   2526c:	463c      	movge	r4, r7
   2526e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25270:	ab01      	add	r3, sp, #4
   25272:	4622      	mov	r2, r4
   25274:	1999      	adds	r1, r3, r6
   25276:	4628      	mov	r0, r5
   25278:	f7fe fcc8 	bl	23c0c <memcpy>
}
   2527c:	4620      	mov	r0, r4
   2527e:	b007      	add	sp, #28
   25280:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25282:	2210      	movs	r2, #16
   25284:	3101      	adds	r1, #1
   25286:	f10d 0007 	add.w	r0, sp, #7
   2528a:	f7fe fcbf 	bl	23c0c <memcpy>
		value_len += 16U;
   2528e:	2413      	movs	r4, #19
   25290:	e7e7      	b.n	25262 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25292:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25296:	e7f1      	b.n	2527c <bt_gatt_attr_read_chrc+0x46>

00025298 <bt_gatt_foreach_attr>:
{
   25298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2529a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2529e:	2300      	movs	r3, #0
   252a0:	9300      	str	r3, [sp, #0]
   252a2:	461a      	mov	r2, r3
   252a4:	f7e8 f8e0 	bl	d468 <bt_gatt_foreach_attr_type>
}
   252a8:	b005      	add	sp, #20
   252aa:	f85d fb04 	ldr.w	pc, [sp], #4

000252ae <db_hash_process>:
	db_hash_gen(true);
   252ae:	f7e8 b935 	b.w	d51c <db_hash_gen.constprop.0>

000252b2 <bt_gatt_check_perm>:
{
   252b2:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   252b4:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   252b6:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   252b8:	d504      	bpl.n	252c4 <bt_gatt_check_perm+0x12>
   252ba:	f013 0f95 	tst.w	r3, #149	; 0x95
   252be:	d01d      	beq.n	252fc <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   252c0:	684c      	ldr	r4, [r1, #4]
   252c2:	b1dc      	cbz	r4, 252fc <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   252c4:	0794      	lsls	r4, r2, #30
   252c6:	d504      	bpl.n	252d2 <bt_gatt_check_perm+0x20>
   252c8:	f413 7f95 	tst.w	r3, #298	; 0x12a
   252cc:	d018      	beq.n	25300 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   252ce:	6889      	ldr	r1, [r1, #8]
   252d0:	b1b1      	cbz	r1, 25300 <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   252d2:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   252d6:	f414 7fc0 	tst.w	r4, #384	; 0x180
   252da:	d001      	beq.n	252e0 <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   252dc:	2005      	movs	r0, #5
}
   252de:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   252e0:	f014 0f30 	tst.w	r4, #48	; 0x30
   252e4:	d105      	bne.n	252f2 <bt_gatt_check_perm+0x40>
	return 0;
   252e6:	f014 0f0c 	tst.w	r4, #12
   252ea:	bf14      	ite	ne
   252ec:	200f      	movne	r0, #15
   252ee:	2000      	moveq	r0, #0
   252f0:	e7f5      	b.n	252de <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   252f2:	f7fe ffe6 	bl	242c2 <bt_conn_get_security>
   252f6:	2802      	cmp	r0, #2
   252f8:	d8f5      	bhi.n	252e6 <bt_gatt_check_perm+0x34>
   252fa:	e7ef      	b.n	252dc <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   252fc:	2002      	movs	r0, #2
   252fe:	e7ee      	b.n	252de <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25300:	2003      	movs	r0, #3
   25302:	e7ec      	b.n	252de <bt_gatt_check_perm+0x2c>

00025304 <bt_gatt_is_subscribed>:
{
   25304:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25308:	7a83      	ldrb	r3, [r0, #10]
   2530a:	2b07      	cmp	r3, #7
{
   2530c:	4605      	mov	r5, r0
   2530e:	460c      	mov	r4, r1
   25310:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   25312:	d110      	bne.n	25336 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   25314:	2300      	movs	r3, #0
   25316:	f88d 300c 	strb.w	r3, [sp, #12]
   2531a:	6820      	ldr	r0, [r4, #0]
   2531c:	f642 0303 	movw	r3, #10243	; 0x2803
   25320:	a903      	add	r1, sp, #12
   25322:	f8ad 300e 	strh.w	r3, [sp, #14]
   25326:	f7fe fca9 	bl	23c7c <bt_uuid_cmp>
   2532a:	b960      	cbnz	r0, 25346 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2532c:	68e3      	ldr	r3, [r4, #12]
   2532e:	799b      	ldrb	r3, [r3, #6]
   25330:	f013 0f30 	tst.w	r3, #48	; 0x30
   25334:	d103      	bne.n	2533e <bt_gatt_is_subscribed+0x3a>
		return false;
   25336:	2000      	movs	r0, #0
}
   25338:	b004      	add	sp, #16
   2533a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2533e:	4620      	mov	r0, r4
   25340:	f7e8 f986 	bl	d650 <bt_gatt_attr_next>
   25344:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   25346:	2300      	movs	r3, #0
   25348:	6820      	ldr	r0, [r4, #0]
   2534a:	f88d 300c 	strb.w	r3, [sp, #12]
   2534e:	a903      	add	r1, sp, #12
   25350:	f642 1302 	movw	r3, #10498	; 0x2902
   25354:	f8ad 300e 	strh.w	r3, [sp, #14]
   25358:	f7fe fc90 	bl	23c7c <bt_uuid_cmp>
   2535c:	b118      	cbz	r0, 25366 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2535e:	4620      	mov	r0, r4
   25360:	f7e8 f976 	bl	d650 <bt_gatt_attr_next>
   25364:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   25366:	2600      	movs	r6, #0
   25368:	f642 1802 	movw	r8, #10498	; 0x2902
   2536c:	6820      	ldr	r0, [r4, #0]
   2536e:	f88d 6000 	strb.w	r6, [sp]
   25372:	4669      	mov	r1, sp
   25374:	f8ad 8002 	strh.w	r8, [sp, #2]
   25378:	f7fe fc80 	bl	23c7c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2537c:	b9d8      	cbnz	r0, 253b6 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2537e:	2300      	movs	r3, #0
   25380:	6820      	ldr	r0, [r4, #0]
   25382:	f88d 300c 	strb.w	r3, [sp, #12]
   25386:	a903      	add	r1, sp, #12
   25388:	f642 1302 	movw	r3, #10498	; 0x2902
   2538c:	f8ad 300e 	strh.w	r3, [sp, #14]
   25390:	f7fe fc74 	bl	23c7c <bt_uuid_cmp>
   25394:	2800      	cmp	r0, #0
   25396:	d1ce      	bne.n	25336 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   25398:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2539a:	4622      	mov	r2, r4
   2539c:	4628      	mov	r0, r5
   2539e:	f812 1b01 	ldrb.w	r1, [r2], #1
   253a2:	f7fe ff90 	bl	242c6 <bt_conn_is_peer_addr_le>
   253a6:	2800      	cmp	r0, #0
   253a8:	d0c5      	beq.n	25336 <bt_gatt_is_subscribed+0x32>
   253aa:	8923      	ldrh	r3, [r4, #8]
   253ac:	421f      	tst	r7, r3
   253ae:	bf14      	ite	ne
   253b0:	2001      	movne	r0, #1
   253b2:	2000      	moveq	r0, #0
   253b4:	e7c0      	b.n	25338 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   253b6:	6820      	ldr	r0, [r4, #0]
   253b8:	f88d 6004 	strb.w	r6, [sp, #4]
   253bc:	f642 0303 	movw	r3, #10243	; 0x2803
   253c0:	a901      	add	r1, sp, #4
   253c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   253c6:	f7fe fc59 	bl	23c7c <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   253ca:	2800      	cmp	r0, #0
   253cc:	d0d7      	beq.n	2537e <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   253ce:	6820      	ldr	r0, [r4, #0]
   253d0:	f88d 6008 	strb.w	r6, [sp, #8]
   253d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   253d8:	a902      	add	r1, sp, #8
   253da:	f8ad 300a 	strh.w	r3, [sp, #10]
   253de:	f7fe fc4d 	bl	23c7c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   253e2:	2800      	cmp	r0, #0
   253e4:	d0cb      	beq.n	2537e <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   253e6:	6820      	ldr	r0, [r4, #0]
   253e8:	f88d 600c 	strb.w	r6, [sp, #12]
   253ec:	f642 0301 	movw	r3, #10241	; 0x2801
   253f0:	a903      	add	r1, sp, #12
   253f2:	f8ad 300e 	strh.w	r3, [sp, #14]
   253f6:	f7fe fc41 	bl	23c7c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   253fa:	2800      	cmp	r0, #0
   253fc:	d0bf      	beq.n	2537e <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   253fe:	4620      	mov	r0, r4
   25400:	f7e8 f926 	bl	d650 <bt_gatt_attr_next>
		if (!attr) {
   25404:	4604      	mov	r4, r0
   25406:	2800      	cmp	r0, #0
   25408:	d1b0      	bne.n	2536c <bt_gatt_is_subscribed+0x68>
   2540a:	e794      	b.n	25336 <bt_gatt_is_subscribed+0x32>

0002540c <bt_gatt_cancel>:
{
   2540c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2540e:	4604      	mov	r4, r0
   25410:	460d      	mov	r5, r1
	k_sched_lock();
   25412:	f7fb f8d7 	bl	205c4 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   25416:	4629      	mov	r1, r5
   25418:	4620      	mov	r0, r4
   2541a:	f7ff fcb7 	bl	24d8c <bt_att_find_req_by_user_data>
	if (req) {
   2541e:	4601      	mov	r1, r0
   25420:	b920      	cbnz	r0, 2542c <bt_gatt_cancel+0x20>
}
   25422:	b002      	add	sp, #8
   25424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   25428:	f7fb b8e0 	b.w	205ec <k_sched_unlock>
		func = req->func;
   2542c:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2542e:	4620      	mov	r0, r4
   25430:	f7e7 fcba 	bl	cda8 <bt_att_req_cancel>
	k_sched_unlock();
   25434:	f7fb f8da 	bl	205ec <k_sched_unlock>
	if (func) {
   25438:	b12e      	cbz	r6, 25446 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2543a:	2300      	movs	r3, #0
   2543c:	9500      	str	r5, [sp, #0]
   2543e:	461a      	mov	r2, r3
   25440:	210e      	movs	r1, #14
   25442:	4620      	mov	r0, r4
   25444:	47b0      	blx	r6
}
   25446:	b002      	add	sp, #8
   25448:	bd70      	pop	{r4, r5, r6, pc}

0002544a <bt_gatt_notification>:
{
   2544a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2544e:	4680      	mov	r8, r0
   25450:	460e      	mov	r6, r1
   25452:	4691      	mov	r9, r2
   25454:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   25456:	f7e7 fd11 	bl	ce7c <gatt_sub_find>
	if (!sub) {
   2545a:	b300      	cbz	r0, 2549e <bt_gatt_notification+0x54>
	return list->head;
   2545c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2545e:	b1f4      	cbz	r4, 2549e <bt_gatt_notification+0x54>
	return node->next;
   25460:	6825      	ldr	r5, [r4, #0]
   25462:	b105      	cbz	r5, 25466 <bt_gatt_notification+0x1c>
   25464:	3d18      	subs	r5, #24
		if (handle != params->value_handle) {
   25466:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   2546a:	42b3      	cmp	r3, r6
   2546c:	d114      	bne.n	25498 <bt_gatt_notification+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2546e:	3c18      	subs	r4, #24
   25470:	e007      	b.n	25482 <bt_gatt_notification+0x38>
   25472:	462c      	mov	r4, r5
   25474:	69ad      	ldr	r5, [r5, #24]
   25476:	89a3      	ldrh	r3, [r4, #12]
   25478:	b19d      	cbz	r5, 254a2 <bt_gatt_notification+0x58>
		if (handle != params->value_handle) {
   2547a:	42b3      	cmp	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2547c:	f1a5 0518 	sub.w	r5, r5, #24
		if (handle != params->value_handle) {
   25480:	d1f7      	bne.n	25472 <bt_gatt_notification+0x28>
			if (params->notify(conn, params, data, length) ==
   25482:	6827      	ldr	r7, [r4, #0]
   25484:	4653      	mov	r3, sl
   25486:	464a      	mov	r2, r9
   25488:	4621      	mov	r1, r4
   2548a:	4640      	mov	r0, r8
   2548c:	47b8      	blx	r7
   2548e:	b918      	cbnz	r0, 25498 <bt_gatt_notification+0x4e>
				bt_gatt_unsubscribe(conn, params);
   25490:	4621      	mov	r1, r4
   25492:	4640      	mov	r0, r8
   25494:	f7e8 fbea 	bl	dc6c <bt_gatt_unsubscribe>
   25498:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2549a:	2d00      	cmp	r5, #0
   2549c:	d1ea      	bne.n	25474 <bt_gatt_notification+0x2a>
}
   2549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   254a2:	42b3      	cmp	r3, r6
   254a4:	d0ed      	beq.n	25482 <bt_gatt_notification+0x38>
   254a6:	e7fa      	b.n	2549e <bt_gatt_notification+0x54>

000254a8 <bt_gatt_change_aware>:
{
   254a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   254aa:	4605      	mov	r5, r0
   254ac:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   254ae:	f7e7 fca9 	bl	ce04 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   254b2:	b1d0      	cbz	r0, 254ea <bt_gatt_change_aware+0x42>
   254b4:	7a03      	ldrb	r3, [r0, #8]
   254b6:	07db      	lsls	r3, r3, #31
   254b8:	d517      	bpl.n	254ea <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   254ba:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   254be:	4620      	mov	r0, r4
   254c0:	f7ff fd22 	bl	24f08 <atomic_get>
   254c4:	f010 0601 	ands.w	r6, r0, #1
   254c8:	d10f      	bne.n	254ea <bt_gatt_change_aware+0x42>
	if (!req) {
   254ca:	b17f      	cbz	r7, 254ec <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   254cc:	f06f 0102 	mvn.w	r1, #2
   254d0:	4620      	mov	r0, r4
   254d2:	f7ff fd31 	bl	24f38 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   254d6:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   254da:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   254dc:	d008      	beq.n	254f0 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   254de:	f7ff fc71 	bl	24dc4 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   254e2:	2101      	movs	r1, #1
   254e4:	4620      	mov	r0, r4
   254e6:	f7ff fd15 	bl	24f14 <atomic_or>
		return true;
   254ea:	2601      	movs	r6, #1
}
   254ec:	4630      	mov	r0, r6
   254ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   254f0:	f7ff fc66 	bl	24dc0 <bt_att_fixed_chan_only>
   254f4:	2800      	cmp	r0, #0
   254f6:	d0f9      	beq.n	254ec <bt_gatt_change_aware+0x44>
   254f8:	4628      	mov	r0, r5
   254fa:	f7ff fc73 	bl	24de4 <bt_att_out_of_sync_sent_on_fixed>
   254fe:	2800      	cmp	r0, #0
   25500:	d0f4      	beq.n	254ec <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25502:	f06f 0102 	mvn.w	r1, #2
   25506:	4620      	mov	r0, r4
   25508:	f7ff fd16 	bl	24f38 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2550c:	4628      	mov	r0, r5
   2550e:	e7e6      	b.n	254de <bt_gatt_change_aware+0x36>

00025510 <bt_smp_recv>:
{
   25510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   25512:	2100      	movs	r1, #0
   25514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   2551c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2551e:	4608      	mov	r0, r1
   25520:	f7fe ff66 	bl	243f0 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   25524:	f100 060c 	add.w	r6, r0, #12
   25528:	4604      	mov	r4, r0
   2552a:	2101      	movs	r1, #1
   2552c:	4630      	mov	r0, r6
   2552e:	f000 f860 	bl	255f2 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   25532:	2505      	movs	r5, #5
   25534:	7005      	strb	r5, [r0, #0]
   25536:	2101      	movs	r1, #1
   25538:	4630      	mov	r0, r6
   2553a:	f000 f85a 	bl	255f2 <net_buf_simple_add>
   2553e:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   25540:	7005      	strb	r5, [r0, #0]
   25542:	4622      	mov	r2, r4
   25544:	9300      	str	r3, [sp, #0]
   25546:	2106      	movs	r1, #6
   25548:	4638      	mov	r0, r7
   2554a:	f7fe ff54 	bl	243f6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2554e:	b110      	cbz	r0, 25556 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   25550:	4620      	mov	r0, r4
   25552:	f7f5 fc1b 	bl	1ad8c <net_buf_unref>
}
   25556:	2000      	movs	r0, #0
   25558:	b003      	add	sp, #12
   2555a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002555c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2555c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25560:	4770      	bx	lr

00025562 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   25562:	2000      	movs	r0, #0
   25564:	4770      	bx	lr

00025566 <fixed_data_unref>:
}
   25566:	4770      	bx	lr

00025568 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25568:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2556a:	6849      	ldr	r1, [r1, #4]
   2556c:	6809      	ldr	r1, [r1, #0]
   2556e:	f7f5 bb7b 	b.w	1ac68 <net_buf_alloc_len>

00025572 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   25572:	f7fa bba7 	b.w	1fcc4 <z_impl_k_queue_get>

00025576 <net_buf_simple_init_with_data>:
	buf->size  = size;
   25576:	b292      	uxth	r2, r2
	buf->__buf = data;
   25578:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2557a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2557c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2557e:	8082      	strh	r2, [r0, #4]
}
   25580:	4770      	bx	lr

00025582 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   25582:	6883      	ldr	r3, [r0, #8]
   25584:	440b      	add	r3, r1
   25586:	6003      	str	r3, [r0, #0]
}
   25588:	4770      	bx	lr

0002558a <net_buf_put>:
	k_fifo_put(fifo, buf);
   2558a:	f001 bb60 	b.w	26c4e <k_queue_append>

0002558e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2558e:	7a02      	ldrb	r2, [r0, #8]
   25590:	3201      	adds	r2, #1
   25592:	7202      	strb	r2, [r0, #8]
	return buf;
}
   25594:	4770      	bx	lr

00025596 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   25596:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   25598:	4618      	mov	r0, r3
   2559a:	685b      	ldr	r3, [r3, #4]
   2559c:	2b00      	cmp	r3, #0
   2559e:	d1fb      	bne.n	25598 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   255a0:	4770      	bx	lr

000255a2 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   255a2:	6842      	ldr	r2, [r0, #4]
{
   255a4:	b510      	push	{r4, lr}
	if (parent->frags) {
   255a6:	b12a      	cbz	r2, 255b4 <net_buf_frag_insert+0x12>
   255a8:	460b      	mov	r3, r1
	while (buf->frags) {
   255aa:	461c      	mov	r4, r3
   255ac:	685b      	ldr	r3, [r3, #4]
   255ae:	2b00      	cmp	r3, #0
   255b0:	d1fb      	bne.n	255aa <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   255b2:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   255b4:	6041      	str	r1, [r0, #4]
}
   255b6:	bd10      	pop	{r4, pc}

000255b8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   255b8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   255ba:	4604      	mov	r4, r0
   255bc:	b920      	cbnz	r0, 255c8 <net_buf_frag_add+0x10>
	buf->ref++;
   255be:	7a0b      	ldrb	r3, [r1, #8]
   255c0:	3301      	adds	r3, #1
   255c2:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   255c4:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   255c6:	bd10      	pop	{r4, pc}
   255c8:	4603      	mov	r3, r0
	while (buf->frags) {
   255ca:	4618      	mov	r0, r3
   255cc:	685b      	ldr	r3, [r3, #4]
   255ce:	2b00      	cmp	r3, #0
   255d0:	d1fb      	bne.n	255ca <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   255d2:	f7ff ffe6 	bl	255a2 <net_buf_frag_insert>
   255d6:	4620      	mov	r0, r4
   255d8:	e7f5      	b.n	255c6 <net_buf_frag_add+0xe>

000255da <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   255da:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   255dc:	b108      	cbz	r0, 255e2 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   255de:	684b      	ldr	r3, [r1, #4]
   255e0:	6043      	str	r3, [r0, #4]
	}

	next_frag = frag->frags;
   255e2:	684c      	ldr	r4, [r1, #4]

	frag->frags = NULL;
   255e4:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   255e6:	4608      	mov	r0, r1
	frag->frags = NULL;
   255e8:	604b      	str	r3, [r1, #4]
	net_buf_unref(frag);
   255ea:	f7f5 fbcf 	bl	1ad8c <net_buf_unref>
#endif

	return next_frag;
}
   255ee:	4620      	mov	r0, r4
   255f0:	bd10      	pop	{r4, pc}

000255f2 <net_buf_simple_add>:
	return buf->data + buf->len;
   255f2:	8883      	ldrh	r3, [r0, #4]
   255f4:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   255f6:	4419      	add	r1, r3
   255f8:	8081      	strh	r1, [r0, #4]
	return tail;
}
   255fa:	18d0      	adds	r0, r2, r3
   255fc:	4770      	bx	lr

000255fe <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   255fe:	b430      	push	{r4, r5}
   25600:	8884      	ldrh	r4, [r0, #4]
   25602:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   25604:	18a3      	adds	r3, r4, r2
   25606:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25608:	1928      	adds	r0, r5, r4
}
   2560a:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2560c:	f7fe bafe 	b.w	23c0c <memcpy>

00025610 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   25610:	b510      	push	{r4, lr}
   25612:	8883      	ldrh	r3, [r0, #4]
   25614:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   25616:	1c5c      	adds	r4, r3, #1
   25618:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2561a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2561c:	18d0      	adds	r0, r2, r3
   2561e:	bd10      	pop	{r4, pc}

00025620 <net_buf_simple_add_le16>:
   25620:	8883      	ldrh	r3, [r0, #4]
   25622:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   25624:	b530      	push	{r4, r5, lr}
   25626:	18d4      	adds	r4, r2, r3
	buf->len += len;
   25628:	1c9d      	adds	r5, r3, #2
   2562a:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   2562c:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   2562e:	0a09      	lsrs	r1, r1, #8
   25630:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   25632:	bd30      	pop	{r4, r5, pc}

00025634 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   25634:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   25636:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   25638:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2563a:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2563c:	4411      	add	r1, r2
	buf->data -= len;
   2563e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   25640:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   25642:	4770      	bx	lr

00025644 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25644:	8882      	ldrh	r2, [r0, #4]
   25646:	1a52      	subs	r2, r2, r1
{
   25648:	4603      	mov	r3, r0
	buf->len -= len;
   2564a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2564c:	6800      	ldr	r0, [r0, #0]
   2564e:	4408      	add	r0, r1
   25650:	6018      	str	r0, [r3, #0]
}
   25652:	4770      	bx	lr

00025654 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   25654:	4603      	mov	r3, r0
	void *data = buf->data;
   25656:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25658:	889a      	ldrh	r2, [r3, #4]
   2565a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2565c:	4401      	add	r1, r0
	buf->len -= len;
   2565e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   25660:	6019      	str	r1, [r3, #0]

	return data;
}
   25662:	4770      	bx	lr

00025664 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   25664:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   25666:	6803      	ldr	r3, [r0, #0]
   25668:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2566a:	2102      	movs	r1, #2
   2566c:	f7ff ffea 	bl	25644 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   25670:	4620      	mov	r0, r4
   25672:	bd10      	pop	{r4, pc}

00025674 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   25674:	6802      	ldr	r2, [r0, #0]
   25676:	6880      	ldr	r0, [r0, #8]
}
   25678:	1a10      	subs	r0, r2, r0
   2567a:	4770      	bx	lr

0002567c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2567c:	8883      	ldrh	r3, [r0, #4]
   2567e:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   25680:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25682:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   25684:	6803      	ldr	r3, [r0, #0]
   25686:	1a5b      	subs	r3, r3, r1
}
   25688:	1ad0      	subs	r0, r2, r3
   2568a:	4770      	bx	lr

0002568c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2568c:	6903      	ldr	r3, [r0, #16]
   2568e:	b2c9      	uxtb	r1, r1
   25690:	220c      	movs	r2, #12
   25692:	fb01 3302 	mla	r3, r1, r2, r3
   25696:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   25698:	f000 0007 	and.w	r0, r0, #7
   2569c:	4770      	bx	lr

0002569e <set_on_state>:
	__asm__ volatile(
   2569e:	f04f 0320 	mov.w	r3, #32
   256a2:	f3ef 8211 	mrs	r2, BASEPRI
   256a6:	f383 8812 	msr	BASEPRI_MAX, r3
   256aa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   256ae:	6803      	ldr	r3, [r0, #0]
   256b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   256b4:	f043 0302 	orr.w	r3, r3, #2
   256b8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   256ba:	f382 8811 	msr	BASEPRI, r2
   256be:	f3bf 8f6f 	isb	sy
}
   256c2:	4770      	bx	lr

000256c4 <stop>:
{
   256c4:	b570      	push	{r4, r5, r6, lr}
   256c6:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   256c8:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   256ca:	f04f 0420 	mov.w	r4, #32
   256ce:	f3ef 8511 	mrs	r5, BASEPRI
   256d2:	f384 8812 	msr	BASEPRI_MAX, r4
   256d6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   256da:	260c      	movs	r6, #12
   256dc:	fb06 3401 	mla	r4, r6, r1, r3
   256e0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   256e2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   256e6:	d008      	beq.n	256fa <stop+0x36>
   256e8:	42a2      	cmp	r2, r4
   256ea:	d006      	beq.n	256fa <stop+0x36>
	__asm__ volatile(
   256ec:	f385 8811 	msr	BASEPRI, r5
   256f0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   256f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   256f8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   256fa:	4371      	muls	r1, r6
   256fc:	440b      	add	r3, r1
   256fe:	2201      	movs	r2, #1
   25700:	641a      	str	r2, [r3, #64]	; 0x40
   25702:	f385 8811 	msr	BASEPRI, r5
   25706:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2570a:	6843      	ldr	r3, [r0, #4]
   2570c:	440b      	add	r3, r1
   2570e:	685b      	ldr	r3, [r3, #4]
   25710:	4798      	blx	r3
	return 0;
   25712:	2000      	movs	r0, #0
   25714:	e7f0      	b.n	256f8 <stop+0x34>

00025716 <api_stop>:
	return stop(dev, subsys, CTX_API);
   25716:	2280      	movs	r2, #128	; 0x80
   25718:	f7ff bfd4 	b.w	256c4 <stop>

0002571c <async_start>:
{
   2571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2571e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   25720:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   25722:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   25724:	f04f 0520 	mov.w	r5, #32
   25728:	f3ef 8611 	mrs	r6, BASEPRI
   2572c:	f385 8812 	msr	BASEPRI_MAX, r5
   25730:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   25734:	250c      	movs	r5, #12
   25736:	4369      	muls	r1, r5
   25738:	440c      	add	r4, r1
   2573a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2573c:	f005 0c07 	and.w	ip, r5, #7
   25740:	f1bc 0f01 	cmp.w	ip, #1
   25744:	d10b      	bne.n	2575e <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   25746:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   25748:	f386 8811 	msr	BASEPRI, r6
   2574c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   25750:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   25754:	6843      	ldr	r3, [r0, #4]
   25756:	585b      	ldr	r3, [r3, r1]
   25758:	4798      	blx	r3
	return 0;
   2575a:	2000      	movs	r0, #0
}
   2575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2575e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   25762:	42af      	cmp	r7, r5
   25764:	f386 8811 	msr	BASEPRI, r6
   25768:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2576c:	bf0c      	ite	eq
   2576e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   25772:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   25776:	e7f1      	b.n	2575c <async_start+0x40>

00025778 <api_start>:
{
   25778:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2577a:	2480      	movs	r4, #128	; 0x80
   2577c:	9400      	str	r4, [sp, #0]
   2577e:	f7ff ffcd 	bl	2571c <async_start>
}
   25782:	b002      	add	sp, #8
   25784:	bd10      	pop	{r4, pc}

00025786 <onoff_started_callback>:
{
   25786:	b410      	push	{r4}
	return &data->mgr[type];
   25788:	6900      	ldr	r0, [r0, #16]
   2578a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2578c:	241c      	movs	r4, #28
   2578e:	fb03 0004 	mla	r0, r3, r4, r0
   25792:	2100      	movs	r1, #0
}
   25794:	bc10      	pop	{r4}
	notify(mgr, 0);
   25796:	4710      	bx	r2

00025798 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   25798:	2000      	movs	r0, #0
   2579a:	f001 b85d 	b.w	26858 <nrfx_clock_stop>

0002579e <blocking_start_callback>:
{
   2579e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   257a0:	f7fa bac4 	b.w	1fd2c <z_impl_k_sem_give>

000257a4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   257a4:	6843      	ldr	r3, [r0, #4]
   257a6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   257a8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   257ac:	600b      	str	r3, [r1, #0]
}
   257ae:	2000      	movs	r0, #0
   257b0:	4770      	bx	lr

000257b2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   257b2:	6843      	ldr	r3, [r0, #4]
   257b4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   257b6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   257ba:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   257be:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   257c2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   257c6:	2000      	movs	r0, #0
   257c8:	4770      	bx	lr

000257ca <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   257ca:	6843      	ldr	r3, [r0, #4]
   257cc:	685b      	ldr	r3, [r3, #4]
}
   257ce:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   257d0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   257d4:	4770      	bx	lr

000257d6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   257d6:	6843      	ldr	r3, [r0, #4]
   257d8:	685b      	ldr	r3, [r3, #4]
}
   257da:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   257dc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   257e0:	4770      	bx	lr

000257e2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   257e2:	6843      	ldr	r3, [r0, #4]
   257e4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   257e6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   257ea:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   257ee:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   257f0:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   257f4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   257f8:	2000      	movs	r0, #0
   257fa:	4770      	bx	lr

000257fc <gpio_nrfx_manage_callback>:
{
   257fc:	b510      	push	{r4, lr}
	return port->data;
   257fe:	6903      	ldr	r3, [r0, #16]
	return list->head;
   25800:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   25802:	b1f8      	cbz	r0, 25844 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25804:	4288      	cmp	r0, r1
   25806:	d119      	bne.n	2583c <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   25808:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2580a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   2580c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2580e:	42a1      	cmp	r1, r4
   25810:	d100      	bne.n	25814 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   25812:	6098      	str	r0, [r3, #8]
	parent->next = child;
   25814:	2000      	movs	r0, #0
   25816:	6008      	str	r0, [r1, #0]
	if (set) {
   25818:	b12a      	cbz	r2, 25826 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2581a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2581c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2581e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25820:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25822:	b902      	cbnz	r2, 25826 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   25824:	6099      	str	r1, [r3, #8]
	return 0;
   25826:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25828:	e010      	b.n	2584c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2582a:	4281      	cmp	r1, r0
   2582c:	d106      	bne.n	2583c <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2582e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   25830:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   25832:	6898      	ldr	r0, [r3, #8]
   25834:	4281      	cmp	r1, r0
   25836:	d1ed      	bne.n	25814 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   25838:	609c      	str	r4, [r3, #8]
}
   2583a:	e7eb      	b.n	25814 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2583c:	4604      	mov	r4, r0
   2583e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25840:	2800      	cmp	r0, #0
   25842:	d1f2      	bne.n	2582a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   25844:	2a00      	cmp	r2, #0
   25846:	d1e8      	bne.n	2581a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   25848:	f06f 0015 	mvn.w	r0, #21
}
   2584c:	bd10      	pop	{r4, pc}

0002584e <pin_interrupt_configure>:
	return rc;
   2584e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
}
   25852:	bf14      	ite	ne
   25854:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   25858:	2000      	moveq	r0, #0
   2585a:	4770      	bx	lr

0002585c <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2585c:	f7fa ba8c 	b.w	1fd78 <z_impl_k_sem_take>

00025860 <i2c_write>:
{
   25860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   25862:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   25866:	2202      	movs	r2, #2
   25868:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2586c:	6882      	ldr	r2, [r0, #8]
   2586e:	a901      	add	r1, sp, #4
   25870:	6894      	ldr	r4, [r2, #8]
   25872:	2201      	movs	r2, #1
   25874:	47a0      	blx	r4
}
   25876:	b004      	add	sp, #16
   25878:	bd10      	pop	{r4, pc}

0002587a <i2c_write_dt>:
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
   2587a:	8883      	ldrh	r3, [r0, #4]
   2587c:	6800      	ldr	r0, [r0, #0]
   2587e:	f7ff bfef 	b.w	25860 <i2c_write>

00025882 <i2c_reg_write_word_be>:
{
   25882:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   25884:	0a13      	lsrs	r3, r2, #8
   25886:	f88d 1004 	strb.w	r1, [sp, #4]
   2588a:	f88d 2006 	strb.w	r2, [sp, #6]
	return i2c_write_dt(bus, tx_buf, 3);
   2588e:	a901      	add	r1, sp, #4
   25890:	2203      	movs	r2, #3
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   25892:	f88d 3005 	strb.w	r3, [sp, #5]
	return i2c_write_dt(bus, tx_buf, 3);
   25896:	f7ff fff0 	bl	2587a <i2c_write_dt>
}
   2589a:	b003      	add	sp, #12
   2589c:	f85d fb04 	ldr.w	pc, [sp], #4

000258a0 <port_write>:
{
   258a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   258a4:	4606      	mov	r6, r0
   258a6:	4689      	mov	r9, r1
   258a8:	4614      	mov	r4, r2
   258aa:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   258ac:	f001 f8fe 	bl	26aac <k_is_in_isr>
   258b0:	bb00      	cbnz	r0, 258f4 <port_write+0x54>
	const struct sx1509b_config *cfg = dev->config;
   258b2:	6875      	ldr	r5, [r6, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   258b4:	6936      	ldr	r6, [r6, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   258b6:	f106 071c 	add.w	r7, r6, #28
   258ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   258be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   258c2:	4638      	mov	r0, r7
   258c4:	f7ff ffca 	bl	2585c <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   258c8:	8ab2      	ldrh	r2, [r6, #20]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   258ca:	4054      	eors	r4, r2
   258cc:	ea04 0409 	and.w	r4, r4, r9
   258d0:	ea82 0208 	eor.w	r2, r2, r8
   258d4:	4054      	eors	r4, r2
   258d6:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA, out);
   258d8:	1d28      	adds	r0, r5, #4
   258da:	4622      	mov	r2, r4
   258dc:	2110      	movs	r1, #16
   258de:	f7ff ffd0 	bl	25882 <i2c_reg_write_word_be>
	if (rc == 0) {
   258e2:	4605      	mov	r5, r0
   258e4:	b900      	cbnz	r0, 258e8 <port_write+0x48>
		*outp = out;
   258e6:	82b4      	strh	r4, [r6, #20]
	z_impl_k_sem_give(sem);
   258e8:	4638      	mov	r0, r7
   258ea:	f7fa fa1f 	bl	1fd2c <z_impl_k_sem_give>
}
   258ee:	4628      	mov	r0, r5
   258f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   258f4:	f06f 050a 	mvn.w	r5, #10
   258f8:	e7f9      	b.n	258ee <port_write+0x4e>

000258fa <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   258fa:	2200      	movs	r2, #0
{
   258fc:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   258fe:	4611      	mov	r1, r2
   25900:	f7ff bfce 	b.w	258a0 <port_write>

00025904 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   25904:	2300      	movs	r3, #0
   25906:	461a      	mov	r2, r3
   25908:	f7ff bfca 	b.w	258a0 <port_write>

0002590c <port_set_bits>:
{
   2590c:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   2590e:	2300      	movs	r3, #0
   25910:	f7ff bfc6 	b.w	258a0 <port_write>

00025914 <port_set_masked>:
	return port_write(dev, mask, value, 0);
   25914:	2300      	movs	r3, #0
   25916:	f7ff bfc3 	b.w	258a0 <port_write>

0002591a <write_pin_state.constprop.0>:
static int write_pin_state(const struct sx1509b_config *cfg,
   2591a:	b510      	push	{r4, lr}
   2591c:	b086      	sub	sp, #24
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   2591e:	2300      	movs	r3, #0
   25920:	f88d 3004 	strb.w	r3, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   25924:	880b      	ldrh	r3, [r1, #0]
   25926:	ba5b      	rev16	r3, r3
   25928:	f8ad 3005 	strh.w	r3, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   2592c:	884b      	ldrh	r3, [r1, #2]
   2592e:	ba5b      	rev16	r3, r3
   25930:	f8ad 3007 	strh.w	r3, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   25934:	888b      	ldrh	r3, [r1, #4]
   25936:	ba5b      	rev16	r3, r3
   25938:	f8ad 3009 	strh.w	r3, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   2593c:	88cb      	ldrh	r3, [r1, #6]
   2593e:	ba5b      	rev16	r3, r3
   25940:	f8ad 300b 	strh.w	r3, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   25944:	890b      	ldrh	r3, [r1, #8]
   25946:	ba5b      	rev16	r3, r3
   25948:	f8ad 300d 	strh.w	r3, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   2594c:	894b      	ldrh	r3, [r1, #10]
   2594e:	ba5b      	rev16	r3, r3
   25950:	f8ad 300f 	strh.w	r3, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   25954:	898b      	ldrh	r3, [r1, #12]
   25956:	ba5b      	rev16	r3, r3
   25958:	f8ad 3011 	strh.w	r3, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   2595c:	89cb      	ldrh	r3, [r1, #14]
   2595e:	ba5b      	rev16	r3, r3
   25960:	f8ad 3013 	strh.w	r3, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   25964:	8a0b      	ldrh	r3, [r1, #16]
   25966:	ba59      	rev16	r1, r3
   25968:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   2596c:	1d04      	adds	r4, r0, #4
	if (data_first) {
   2596e:	b162      	cbz	r2, 2598a <write_pin_state.constprop.0+0x70>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   25970:	461a      	mov	r2, r3
   25972:	2110      	movs	r1, #16
   25974:	4620      	mov	r0, r4
   25976:	f7ff ff84 	bl	25882 <i2c_reg_write_word_be>
		if (rc == 0) {
   2597a:	b920      	cbnz	r0, 25986 <write_pin_state.constprop.0+0x6c>
			rc = i2c_write_dt(&cfg->bus, &pin_buf.reg,
   2597c:	2211      	movs	r2, #17
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
   2597e:	a901      	add	r1, sp, #4
   25980:	4620      	mov	r0, r4
   25982:	f7ff ff7a 	bl	2587a <i2c_write_dt>
}
   25986:	b006      	add	sp, #24
   25988:	bd10      	pop	{r4, pc}
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
   2598a:	2213      	movs	r2, #19
   2598c:	e7f7      	b.n	2597e <write_pin_state.constprop.0+0x64>

0002598e <sx1509b_config>:
{
   2598e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25992:	460d      	mov	r5, r1
	const struct sx1509b_config *cfg = dev->config;
   25994:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   25998:	6904      	ldr	r4, [r0, #16]
{
   2599a:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   2599c:	f001 f886 	bl	26aac <k_is_in_isr>
   259a0:	4682      	mov	sl, r0
   259a2:	2800      	cmp	r0, #0
   259a4:	f040 8084 	bne.w	25ab0 <sx1509b_config+0x122>
	k_sem_take(&drv_data->lock, K_FOREVER);
   259a8:	f104 081c 	add.w	r8, r4, #28
   259ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   259b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   259b4:	4640      	mov	r0, r8
   259b6:	f7ff ff51 	bl	2585c <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   259ba:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   259bc:	8ae2      	ldrh	r2, [r4, #22]
		drv_data->led_drv_enable &= ~BIT(pin);
   259be:	40ae      	lsls	r6, r5
   259c0:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   259c2:	fa22 f505 	lsr.w	r5, r2, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   259c6:	ea6f 0b06 	mvn.w	fp, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   259ca:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   259cc:	fa1f fb8b 	uxth.w	fp, fp
	if (drv_data->led_drv_enable & BIT(pin)) {
   259d0:	d44c      	bmi.n	25a6c <sx1509b_config+0xde>
	pins->open_drain &= ~BIT(pin);
   259d2:	89e3      	ldrh	r3, [r4, #14]
   259d4:	ea03 020b 	and.w	r2, r3, fp
   259d8:	81e2      	strh	r2, [r4, #14]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   259da:	07ba      	lsls	r2, r7, #30
   259dc:	d458      	bmi.n	25a90 <sx1509b_config+0x102>
		pins->pull_up |= BIT(pin);
   259de:	8963      	ldrh	r3, [r4, #10]
	if ((flags & GPIO_PULL_UP) != 0) {
   259e0:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   259e2:	bf4c      	ite	mi
   259e4:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   259e6:	ea0b 0303 	andpl.w	r3, fp, r3
   259ea:	8163      	strh	r3, [r4, #10]
		pins->pull_down |= BIT(pin);
   259ec:	89a3      	ldrh	r3, [r4, #12]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   259ee:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   259f0:	bf4c      	ite	mi
   259f2:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   259f4:	ea0b 0303 	andpl.w	r3, fp, r3
   259f8:	81a3      	strh	r3, [r4, #12]
		pins->input_disable &= ~BIT(pin);
   259fa:	88a3      	ldrh	r3, [r4, #4]
	if ((flags & GPIO_INPUT) != 0) {
   259fc:	03fa      	lsls	r2, r7, #15
		pins->input_disable &= ~BIT(pin);
   259fe:	bf4c      	ite	mi
   25a00:	ea0b 0303 	andmi.w	r3, fp, r3
		pins->input_disable |= BIT(pin);
   25a04:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   25a06:	03bd      	lsls	r5, r7, #14
   25a08:	80a3      	strh	r3, [r4, #4]
		pins->dir &= ~BIT(pin);
   25a0a:	8a63      	ldrh	r3, [r4, #18]
	if ((flags & GPIO_OUTPUT) != 0) {
   25a0c:	d54a      	bpl.n	25aa4 <sx1509b_config+0x116>
		pins->dir &= ~BIT(pin);
   25a0e:	ea0b 0303 	and.w	r3, fp, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   25a12:	0378      	lsls	r0, r7, #13
		pins->dir &= ~BIT(pin);
   25a14:	8263      	strh	r3, [r4, #18]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   25a16:	d540      	bpl.n	25a9a <sx1509b_config+0x10c>
			pins->data &= ~BIT(pin);
   25a18:	8aa3      	ldrh	r3, [r4, #20]
   25a1a:	ea0b 0303 	and.w	r3, fp, r3
			pins->data |= BIT(pin);
   25a1e:	82a3      	strh	r3, [r4, #20]
			data_first = true;
   25a20:	f04f 0a01 	mov.w	sl, #1
		debounce->debounce_enable |= BIT(pin);
   25a24:	f8b4 3019 	ldrh.w	r3, [r4, #25]
	if ((flags & SX1509B_GPIO_DEBOUNCE) != 0) {
   25a28:	05fa      	lsls	r2, r7, #23
		debounce->debounce_enable |= BIT(pin);
   25a2a:	bf4c      	ite	mi
   25a2c:	4333      	orrmi	r3, r6
		debounce->debounce_enable &= ~BIT(pin);
   25a2e:	ea0b 0303 	andpl.w	r3, fp, r3
   25a32:	f8a4 3019 	strh.w	r3, [r4, #25]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   25a36:	4652      	mov	r2, sl
   25a38:	1d21      	adds	r1, r4, #4
   25a3a:	4648      	mov	r0, r9
   25a3c:	f7ff ff6d 	bl	2591a <write_pin_state.constprop.0>
	if (rc == 0) {
   25a40:	4605      	mov	r5, r0
   25a42:	b9f0      	cbnz	r0, 25a82 <sx1509b_config+0xf4>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   25a44:	2322      	movs	r3, #34	; 0x22
   25a46:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   25a4a:	7e23      	ldrb	r3, [r4, #24]
   25a4c:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   25a50:	f8b4 3019 	ldrh.w	r3, [r4, #25]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   25a54:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   25a56:	ba5b      	rev16	r3, r3
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   25a58:	eb0d 0102 	add.w	r1, sp, r2
   25a5c:	eb09 0002 	add.w	r0, r9, r2
			= sys_cpu_to_be16(debounce->debounce_enable);
   25a60:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   25a64:	f7ff ff09 	bl	2587a <i2c_write_dt>
   25a68:	4605      	mov	r5, r0
   25a6a:	e00a      	b.n	25a82 <sx1509b_config+0xf4>
		drv_data->led_drv_enable &= ~BIT(pin);
   25a6c:	ea02 020b 	and.w	r2, r2, fp
   25a70:	82e2      	strh	r2, [r4, #22]
		rc = i2c_reg_write_word_be(&cfg->bus,
   25a72:	2120      	movs	r1, #32
   25a74:	f109 0004 	add.w	r0, r9, #4
   25a78:	f7ff ff03 	bl	25882 <i2c_reg_write_word_be>
		if (rc) {
   25a7c:	4605      	mov	r5, r0
   25a7e:	2800      	cmp	r0, #0
   25a80:	d0a7      	beq.n	259d2 <sx1509b_config+0x44>
   25a82:	4640      	mov	r0, r8
   25a84:	f7fa f952 	bl	1fd2c <z_impl_k_sem_give>
}
   25a88:	4628      	mov	r0, r5
   25a8a:	b003      	add	sp, #12
   25a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   25a90:	077d      	lsls	r5, r7, #29
   25a92:	d50a      	bpl.n	25aaa <sx1509b_config+0x11c>
			pins->open_drain |= BIT(pin);
   25a94:	4333      	orrs	r3, r6
   25a96:	81e3      	strh	r3, [r4, #14]
   25a98:	e7a1      	b.n	259de <sx1509b_config+0x50>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   25a9a:	0339      	lsls	r1, r7, #12
   25a9c:	d5c2      	bpl.n	25a24 <sx1509b_config+0x96>
			pins->data |= BIT(pin);
   25a9e:	8aa3      	ldrh	r3, [r4, #20]
   25aa0:	4333      	orrs	r3, r6
			data_first = true;
   25aa2:	e7bc      	b.n	25a1e <sx1509b_config+0x90>
		pins->dir |= BIT(pin);
   25aa4:	4333      	orrs	r3, r6
   25aa6:	8263      	strh	r3, [r4, #18]
   25aa8:	e7bc      	b.n	25a24 <sx1509b_config+0x96>
			rc = -ENOTSUP;
   25aaa:	f06f 0585 	mvn.w	r5, #133	; 0x85
   25aae:	e7e8      	b.n	25a82 <sx1509b_config+0xf4>
		return -EWOULDBLOCK;
   25ab0:	f06f 050a 	mvn.w	r5, #10
   25ab4:	e7e8      	b.n	25a88 <sx1509b_config+0xfa>

00025ab6 <port_get>:
{
   25ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ab8:	b089      	sub	sp, #36	; 0x24
	const struct sx1509b_config *cfg = dev->config;
   25aba:	6847      	ldr	r7, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   25abc:	6905      	ldr	r5, [r0, #16]
{
   25abe:	460e      	mov	r6, r1
	if (k_is_in_isr()) {
   25ac0:	f000 fff4 	bl	26aac <k_is_in_isr>
   25ac4:	4604      	mov	r4, r0
   25ac6:	bb60      	cbnz	r0, 25b22 <port_get+0x6c>
	k_sem_take(&drv_data->lock, K_FOREVER);
   25ac8:	351c      	adds	r5, #28
   25aca:	4628      	mov	r0, r5
   25acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25ad4:	f7ff fec2 	bl	2585c <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   25ad8:	f10d 0205 	add.w	r2, sp, #5
   25adc:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   25ade:	2201      	movs	r2, #1
	return i2c_write_read(spec->bus, spec->addr,
   25ae0:	6878      	ldr	r0, [r7, #4]
	msg[0].len = num_write;
   25ae2:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   25ae4:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   25ae6:	f10d 0206 	add.w	r2, sp, #6
   25aea:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25aee:	2107      	movs	r1, #7
	return i2c_write_read(spec->bus, spec->addr,
   25af0:	893b      	ldrh	r3, [r7, #8]
	msg[1].buf = (uint8_t *)read_buf;
   25af2:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   25af4:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   25af6:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   25afa:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25afc:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   25b00:	6881      	ldr	r1, [r0, #8]
   25b02:	688c      	ldr	r4, [r1, #8]
   25b04:	a902      	add	r1, sp, #8
   25b06:	47a0      	blx	r4
	if (rc != 0) {
   25b08:	4604      	mov	r4, r0
   25b0a:	b920      	cbnz	r0, 25b16 <port_get+0x60>
	*value = sys_be16_to_cpu(pin_data);
   25b0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   25b10:	ba5b      	rev16	r3, r3
   25b12:	b29b      	uxth	r3, r3
   25b14:	6033      	str	r3, [r6, #0]
   25b16:	4628      	mov	r0, r5
   25b18:	f7fa f908 	bl	1fd2c <z_impl_k_sem_give>
}
   25b1c:	4620      	mov	r0, r4
   25b1e:	b009      	add	sp, #36	; 0x24
   25b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EWOULDBLOCK;
   25b22:	f06f 040a 	mvn.w	r4, #10
   25b26:	e7f9      	b.n	25b1c <port_get+0x66>

00025b28 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
   25b28:	b410      	push	{r4}
   25b2a:	6884      	ldr	r4, [r0, #8]
   25b2c:	68a4      	ldr	r4, [r4, #8]
   25b2e:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
   25b30:	bc10      	pop	{r4}
   25b32:	4760      	bx	ip

00025b34 <device_name_get>:

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
   25b34:	b510      	push	{r4, lr}
   25b36:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
   25b38:	2100      	movs	r1, #0
   25b3a:	f7fc fe7e 	bl	2283a <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
   25b3e:	b100      	cbz	r0, 25b42 <device_name_get+0xe>
   25b40:	6800      	ldr	r0, [r0, #0]
   25b42:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
   25b44:	2300      	movs	r3, #0
	entry->help = NULL;
	entry->subcmd = NULL;
   25b46:	e9c4 3301 	strd	r3, r3, [r4, #4]
	entry->handler = NULL;
   25b4a:	60e3      	str	r3, [r4, #12]
}
   25b4c:	bd10      	pop	{r4, pc}

00025b4e <get_bytes_count_for_hex>:
{
   25b4e:	b510      	push	{r4, lr}
   25b50:	4604      	mov	r4, r0
	int length = (strlen(arg) + 1) / 2;
   25b52:	f7fe f804 	bl	23b5e <strlen>
   25b56:	1c43      	adds	r3, r0, #1
	if (length > 1 && arg[0] == '0' && (arg[1] == 'x' || arg[1] == 'X')) {
   25b58:	2b03      	cmp	r3, #3
	int length = (strlen(arg) + 1) / 2;
   25b5a:	ea4f 0053 	mov.w	r0, r3, lsr #1
	if (length > 1 && arg[0] == '0' && (arg[1] == 'x' || arg[1] == 'X')) {
   25b5e:	d909      	bls.n	25b74 <get_bytes_count_for_hex+0x26>
   25b60:	7823      	ldrb	r3, [r4, #0]
   25b62:	2b30      	cmp	r3, #48	; 0x30
   25b64:	d106      	bne.n	25b74 <get_bytes_count_for_hex+0x26>
   25b66:	7863      	ldrb	r3, [r4, #1]
   25b68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25b6c:	2b58      	cmp	r3, #88	; 0x58
		length -= 1;
   25b6e:	bf08      	it	eq
   25b70:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
}
   25b74:	2804      	cmp	r0, #4
   25b76:	bfa8      	it	ge
   25b78:	2004      	movge	r0, #4
   25b7a:	bd10      	pop	{r4, pc}

00025b7c <cmd_i2c_read>:
{
   25b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (argc > 4) {
   25b7e:	2904      	cmp	r1, #4
{
   25b80:	b087      	sub	sp, #28
   25b82:	4606      	mov	r6, r0
   25b84:	4614      	mov	r4, r2
	if (argc > 4) {
   25b86:	d91c      	bls.n	25bc2 <cmd_i2c_read+0x46>
		num_bytes = strtol(argv[4], NULL, 16);
   25b88:	6920      	ldr	r0, [r4, #16]
   25b8a:	2210      	movs	r2, #16
   25b8c:	2100      	movs	r1, #0
   25b8e:	f7fd feae 	bl	238ee <strtol>
		if (num_bytes > MAX_I2C_BYTES) {
   25b92:	2810      	cmp	r0, #16
   25b94:	bfa8      	it	ge
   25b96:	2010      	movge	r0, #16
   25b98:	4605      	mov	r5, r0
	ret = i2c_read_to_buffer(shell_ctx, argv[ARGV_DEV],
   25b9a:	b2eb      	uxtb	r3, r5
   25b9c:	af02      	add	r7, sp, #8
   25b9e:	9301      	str	r3, [sp, #4]
   25ba0:	9700      	str	r7, [sp, #0]
   25ba2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   25ba6:	6861      	ldr	r1, [r4, #4]
   25ba8:	4630      	mov	r0, r6
   25baa:	f7f5 fe1f 	bl	1b7ec <i2c_read_to_buffer>
	if (ret == 0) {
   25bae:	4604      	mov	r4, r0
   25bb0:	b920      	cbnz	r0, 25bbc <cmd_i2c_read+0x40>
		shell_hexdump(shell_ctx, buf, num_bytes);
   25bb2:	462a      	mov	r2, r5
   25bb4:	4639      	mov	r1, r7
   25bb6:	4630      	mov	r0, r6
   25bb8:	f7fc fbf9 	bl	223ae <shell_hexdump>
}
   25bbc:	4620      	mov	r0, r4
   25bbe:	b007      	add	sp, #28
   25bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			num_bytes = MAX_I2C_BYTES;
   25bc2:	2510      	movs	r5, #16
   25bc4:	e7e9      	b.n	25b9a <cmd_i2c_read+0x1e>

00025bc6 <cmd_i2c_write_byte>:
{
   25bc6:	b507      	push	{r0, r1, r2, lr}
	return i2c_write_from_buffer(shell_ctx, argv[ARGV_DEV],
   25bc8:	2301      	movs	r3, #1
   25bca:	9301      	str	r3, [sp, #4]
{
   25bcc:	4611      	mov	r1, r2
	return i2c_write_from_buffer(shell_ctx, argv[ARGV_DEV],
   25bce:	f102 0310 	add.w	r3, r2, #16
   25bd2:	9300      	str	r3, [sp, #0]
   25bd4:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   25bd8:	6849      	ldr	r1, [r1, #4]
   25bda:	f7f5 fe73 	bl	1b8c4 <i2c_write_from_buffer>
}
   25bde:	b003      	add	sp, #12
   25be0:	f85d fb04 	ldr.w	pc, [sp], #4

00025be4 <cmd_i2c_write>:
{
   25be4:	b513      	push	{r0, r1, r4, lr}
	return i2c_write_from_buffer(shell_ctx, argv[ARGV_DEV],
   25be6:	3904      	subs	r1, #4
{
   25be8:	4614      	mov	r4, r2
	return i2c_write_from_buffer(shell_ctx, argv[ARGV_DEV],
   25bea:	b2c9      	uxtb	r1, r1
   25bec:	f102 0310 	add.w	r3, r2, #16
   25bf0:	9101      	str	r1, [sp, #4]
   25bf2:	9300      	str	r3, [sp, #0]
   25bf4:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   25bf8:	6861      	ldr	r1, [r4, #4]
   25bfa:	f7f5 fe63 	bl	1b8c4 <i2c_write_from_buffer>
}
   25bfe:	b002      	add	sp, #8
   25c00:	bd10      	pop	{r4, pc}

00025c02 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   25c02:	2200      	movs	r2, #0
   25c04:	2101      	movs	r1, #1
   25c06:	2003      	movs	r0, #3
   25c08:	f7e1 baec 	b.w	71e4 <z_arm_irq_priority_set>

00025c0c <irq_connect1>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   25c0c:	2200      	movs	r2, #0
   25c0e:	2101      	movs	r1, #1
   25c10:	2004      	movs	r0, #4
   25c12:	f7e1 bae7 	b.w	71e4 <z_arm_irq_priority_set>

00025c16 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   25c16:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   25c18:	2100      	movs	r1, #0
   25c1a:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   25c1c:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   25c1e:	f000 fd8e 	bl	2673e <pinctrl_lookup_state>
	if (ret < 0) {
   25c22:	2800      	cmp	r0, #0
   25c24:	db05      	blt.n	25c32 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   25c26:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   25c28:	6822      	ldr	r2, [r4, #0]
   25c2a:	7919      	ldrb	r1, [r3, #4]
   25c2c:	6818      	ldr	r0, [r3, #0]
   25c2e:	f000 fd99 	bl	26764 <pinctrl_configure_pins>
}
   25c32:	b002      	add	sp, #8
   25c34:	bd10      	pop	{r4, pc}

00025c36 <z_log_msg_static_create.constprop.0>:
   25c36:	2300      	movs	r3, #0
   25c38:	f7de ba8a 	b.w	4150 <z_impl_z_log_msg_static_create>

00025c3c <i2c_write_read_dt.constprop.0>:
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
   25c3c:	b530      	push	{r4, r5, lr}
   25c3e:	b087      	sub	sp, #28
   25c40:	4604      	mov	r4, r0
   25c42:	461d      	mov	r5, r3
	msg[0].buf = (uint8_t *)write_buf;
   25c44:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
   25c46:	2101      	movs	r1, #1
	msg[1].len = num_read;
   25c48:	e9cd 2503 	strd	r2, r5, [sp, #12]
	msg[0].len = num_write;
   25c4c:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25c4e:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   25c50:	2100      	movs	r1, #0
	return i2c_write_read(spec->bus, spec->addr,
   25c52:	6800      	ldr	r0, [r0, #0]
   25c54:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   25c56:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25c5a:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   25c5e:	6882      	ldr	r2, [r0, #8]
   25c60:	4669      	mov	r1, sp
   25c62:	6894      	ldr	r4, [r2, #8]
   25c64:	2202      	movs	r2, #2
   25c66:	47a0      	blx	r4
}
   25c68:	b007      	add	sp, #28
   25c6a:	bd30      	pop	{r4, r5, pc}

00025c6c <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   25c6c:	4601      	mov	r1, r0
   25c6e:	f240 30e7 	movw	r0, #999	; 0x3e7
   25c72:	b508      	push	{r3, lr}
   25c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25c78:	2300      	movs	r3, #0
   25c7a:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   25c7e:	1449      	asrs	r1, r1, #17
   25c80:	f7da fe4c 	bl	91c <__aeabi_uldivmod>
}
   25c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   25c88:	f7fa bd5a 	b.w	20740 <z_impl_k_sleep>

00025c8c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   25c8c:	4603      	mov	r3, r0
   25c8e:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   25c90:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   25c92:	7919      	ldrb	r1, [r3, #4]
   25c94:	2301      	movs	r3, #1
   25c96:	fa03 f101 	lsl.w	r1, r3, r1
   25c9a:	6903      	ldr	r3, [r0, #16]
   25c9c:	681b      	ldr	r3, [r3, #0]
   25c9e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   25ca0:	bf18      	it	ne
   25ca2:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   25ca6:	b112      	cbz	r2, 25cae <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   25ca8:	6883      	ldr	r3, [r0, #8]
   25caa:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   25cac:	4718      	bx	r3
   25cae:	6883      	ldr	r3, [r0, #8]
   25cb0:	691b      	ldr	r3, [r3, #16]
   25cb2:	e7fb      	b.n	25cac <gpio_pin_set_dt.isra.0+0x20>

00025cb4 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   25cb4:	b4f0      	push	{r4, r5, r6, r7}
   25cb6:	4603      	mov	r3, r0
   25cb8:	460a      	mov	r2, r1
				  spec->pin,
   25cba:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   25cbc:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   25cbe:	6800      	ldr	r0, [r0, #0]
   25cc0:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   25cc2:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   25cc4:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   25cc6:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   25cc8:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   25cca:	bf48      	it	mi
   25ccc:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   25cd0:	2501      	movs	r5, #1
   25cd2:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   25cd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   25cd8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   25cda:	bf4c      	ite	mi
   25cdc:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   25cde:	43ac      	bicpl	r4, r5
   25ce0:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   25ce2:	683b      	ldr	r3, [r7, #0]
}
   25ce4:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   25ce6:	4718      	bx	r3

00025ce8 <i2c_reg_read_byte_dt>:
{
   25ce8:	b510      	push	{r4, lr}
   25cea:	b088      	sub	sp, #32
   25cec:	4603      	mov	r3, r0
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   25cee:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   25cf2:	f10d 0107 	add.w	r1, sp, #7
   25cf6:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   25cf8:	2101      	movs	r1, #1
	msg[1].len = num_read;
   25cfa:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   25cfe:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25d00:	2207      	movs	r2, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   25d02:	6800      	ldr	r0, [r0, #0]
   25d04:	889b      	ldrh	r3, [r3, #4]
	msg[0].len = num_write;
   25d06:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   25d08:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25d0c:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   25d10:	6882      	ldr	r2, [r0, #8]
   25d12:	a902      	add	r1, sp, #8
   25d14:	6894      	ldr	r4, [r2, #8]
   25d16:	2202      	movs	r2, #2
   25d18:	47a0      	blx	r4
}
   25d1a:	b008      	add	sp, #32
   25d1c:	bd10      	pop	{r4, pc}

00025d1e <i2c_write>:
{
   25d1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   25d20:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   25d24:	2202      	movs	r2, #2
   25d26:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   25d2a:	6882      	ldr	r2, [r0, #8]
   25d2c:	a901      	add	r1, sp, #4
   25d2e:	6894      	ldr	r4, [r2, #8]
   25d30:	2201      	movs	r2, #1
   25d32:	47a0      	blx	r4
}
   25d34:	b004      	add	sp, #16
   25d36:	bd10      	pop	{r4, pc}

00025d38 <set_wake.isra.0>:
static void set_wake(const struct device *dev, bool enable)
   25d38:	b510      	push	{r4, lr}
	gpio_pin_set_dt(&config->wake_gpio, enable);
   25d3a:	3018      	adds	r0, #24
static void set_wake(const struct device *dev, bool enable)
   25d3c:	460c      	mov	r4, r1
	gpio_pin_set_dt(&config->wake_gpio, enable);
   25d3e:	f7ff ffa5 	bl	25c8c <gpio_pin_set_dt.isra.0>
	if (enable) {
   25d42:	b124      	cbz	r4, 25d4e <set_wake.isra.0+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   25d44:	2032      	movs	r0, #50	; 0x32
}
   25d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25d4a:	f001 ba10 	b.w	2716e <z_impl_k_busy_wait>
   25d4e:	2014      	movs	r0, #20
   25d50:	e7f9      	b.n	25d46 <set_wake.isra.0+0xe>

00025d52 <ccs811_sample_fetch>:
{
   25d52:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct ccs811_config *config = dev->config;
   25d54:	6846      	ldr	r6, [r0, #4]
	struct ccs811_data *drv_data = dev->data;
   25d56:	6904      	ldr	r4, [r0, #16]
{
   25d58:	b085      	sub	sp, #20
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   25d5a:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
   25d5c:	2700      	movs	r7, #0
{
   25d5e:	4605      	mov	r5, r0
	set_wake(dev, true);
   25d60:	2101      	movs	r1, #1
   25d62:	4630      	mov	r0, r6
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   25d64:	f88d 3007 	strb.w	r3, [sp, #7]
	uint16_t buf[4] = { 0 };
   25d68:	e9cd 7702 	strd	r7, r7, [sp, #8]
	set_wake(dev, true);
   25d6c:	f7ff ffe4 	bl	25d38 <set_wake.isra.0>
	rc = i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), (uint8_t *)buf, sizeof(buf));
   25d70:	2308      	movs	r3, #8
   25d72:	eb0d 0203 	add.w	r2, sp, r3
   25d76:	f10d 0107 	add.w	r1, sp, #7
   25d7a:	4630      	mov	r0, r6
   25d7c:	f7ff ff5e 	bl	25c3c <i2c_write_read_dt.constprop.0>
	set_wake(dev, false);
   25d80:	4639      	mov	r1, r7
	rc = i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), (uint8_t *)buf, sizeof(buf));
   25d82:	4606      	mov	r6, r0
	set_wake(dev, false);
   25d84:	6868      	ldr	r0, [r5, #4]
   25d86:	f7ff ffd7 	bl	25d38 <set_wake.isra.0>
	if (rc < 0) {
   25d8a:	42be      	cmp	r6, r7
   25d8c:	db1c      	blt.n	25dc8 <ccs811_sample_fetch+0x76>
	rp->co2 = sys_be16_to_cpu(buf[0]);
   25d8e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   25d92:	ba4b      	rev16	r3, r1
   25d94:	8023      	strh	r3, [r4, #0]
	rp->voc = sys_be16_to_cpu(buf[1]);
   25d96:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   25d9a:	ba5b      	rev16	r3, r3
   25d9c:	8063      	strh	r3, [r4, #2]
	status = sys_le16_to_cpu(buf[2]); /* sic */
   25d9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	rp->status = status;
   25da2:	80e3      	strh	r3, [r4, #6]
	rp->raw = sys_be16_to_cpu(buf[3]);
   25da4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   25da8:	ba52      	rev16	r2, r2
   25daa:	80a2      	strh	r2, [r4, #4]
	if ((drv_data->app_fw_ver <= 0x11)
   25dac:	7a62      	ldrb	r2, [r4, #9]
   25dae:	2a11      	cmp	r2, #17
   25db0:	d802      	bhi.n	25db8 <ccs811_sample_fetch+0x66>
	    && (rp->co2 != 0)) {
   25db2:	b109      	cbz	r1, 25db8 <ccs811_sample_fetch+0x66>
		status |= CCS811_STATUS_DATA_READY;
   25db4:	f043 0308 	orr.w	r3, r3, #8
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   25db8:	f013 0f08 	tst.w	r3, #8
   25dbc:	bf0c      	ite	eq
   25dbe:	f06f 000a 	mvneq.w	r0, #10
   25dc2:	2000      	movne	r0, #0
}
   25dc4:	b005      	add	sp, #20
   25dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EIO;
   25dc8:	f06f 0004 	mvn.w	r0, #4
   25dcc:	e7fa      	b.n	25dc4 <ccs811_sample_fetch+0x72>

00025dce <z_log_msg_static_create.constprop.0>:
   25dce:	2300      	movs	r3, #0
   25dd0:	f7de b9be 	b.w	4150 <z_impl_z_log_msg_static_create>

00025dd4 <setup_drdy.isra.0>:
static inline void setup_drdy(const struct device *dev,
   25dd4:	b410      	push	{r4}
   25dd6:	4603      	mov	r3, r0
   25dd8:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   25dda:	6940      	ldr	r0, [r0, #20]
   25ddc:	7e19      	ldrb	r1, [r3, #24]
		: GPIO_INT_DISABLE;
   25dde:	b192      	cbz	r2, 25e06 <setup_drdy.isra.0+0x32>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   25de0:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   25de2:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   25de4:	6812      	ldr	r2, [r2, #0]
   25de6:	2301      	movs	r3, #1
   25de8:	408b      	lsls	r3, r1
   25dea:	4213      	tst	r3, r2
   25dec:	bf14      	ite	ne
   25dee:	f04f 7270 	movne.w	r2, #62914560	; 0x3c00000
   25df2:	f04f 62b8 	moveq.w	r2, #96468992	; 0x5c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   25df6:	69a4      	ldr	r4, [r4, #24]
   25df8:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   25dfc:	46a4      	mov	ip, r4
   25dfe:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
   25e02:	bc10      	pop	{r4}
   25e04:	4760      	bx	ip
		: GPIO_INT_DISABLE;
   25e06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	const struct gpio_driver_api *api =
   25e0a:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   25e0c:	e7f3      	b.n	25df6 <setup_drdy.isra.0+0x22>

00025e0e <hts221_drdy_callback>:
{
   25e0e:	b510      	push	{r4, lr}
	handle_drdy(data->dev);
   25e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
	struct hts221_data *data = dev->data;
   25e14:	691c      	ldr	r4, [r3, #16]
	setup_drdy(dev, false);
   25e16:	6858      	ldr	r0, [r3, #4]
   25e18:	2100      	movs	r1, #0
   25e1a:	f7ff ffdb 	bl	25dd4 <setup_drdy.isra.0>
	k_work_submit(&data->work);
   25e1e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
}
   25e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->work);
   25e26:	f7fa b921 	b.w	2006c <k_work_submit>

00025e2a <hts221_work_cb>:
{
   25e2a:	b538      	push	{r3, r4, r5, lr}
	process_drdy(data->dev);
   25e2c:	f850 4c18 	ldr.w	r4, [r0, #-24]
	struct hts221_data *data = dev->data;
   25e30:	6925      	ldr	r5, [r4, #16]
	if (data->data_ready_handler != NULL) {
   25e32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25e34:	b15b      	cbz	r3, 25e4e <hts221_work_cb+0x24>
		data->data_ready_handler(dev, &data->data_ready_trigger);
   25e36:	f105 0124 	add.w	r1, r5, #36	; 0x24
   25e3a:	4620      	mov	r0, r4
   25e3c:	4798      	blx	r3
	if (data->data_ready_handler != NULL) {
   25e3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25e40:	b12b      	cbz	r3, 25e4e <hts221_work_cb+0x24>
		setup_drdy(dev, true);
   25e42:	6860      	ldr	r0, [r4, #4]
   25e44:	2101      	movs	r1, #1
}
   25e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		setup_drdy(dev, true);
   25e4a:	f7ff bfc3 	b.w	25dd4 <setup_drdy.isra.0>
}
   25e4e:	bd38      	pop	{r3, r4, r5, pc}

00025e50 <hts221_trigger_set>:
{
   25e50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct hts221_config *cfg = dev->config;
   25e54:	6846      	ldr	r6, [r0, #4]
	struct hts221_data *data = dev->data;
   25e56:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
   25e5a:	4615      	mov	r5, r2
   25e5c:	4604      	mov	r4, r0
   25e5e:	460f      	mov	r7, r1
	setup_drdy(dev, false);
   25e60:	4630      	mov	r0, r6
   25e62:	2100      	movs	r1, #0
   25e64:	f7ff ffb6 	bl	25dd4 <setup_drdy.isra.0>
	data->data_ready_handler = handler;
   25e68:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
	if (handler == NULL) {
   25e6c:	b315      	cbz	r5, 25eb4 <hts221_trigger_set+0x64>
	data->data_ready_trigger = *trig;
   25e6e:	6838      	ldr	r0, [r7, #0]
   25e70:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
	setup_drdy(dev, true);
   25e74:	6860      	ldr	r0, [r4, #4]
   25e76:	2101      	movs	r1, #1
   25e78:	f7ff ffac 	bl	25dd4 <setup_drdy.isra.0>
	return gpio_pin_get(spec->port, spec->pin);
   25e7c:	6970      	ldr	r0, [r6, #20]
   25e7e:	7e35      	ldrb	r5, [r6, #24]
	const struct gpio_driver_data *const data =
   25e80:	6906      	ldr	r6, [r0, #16]
	return api->port_get_raw(port, value);
   25e82:	6883      	ldr	r3, [r0, #8]
   25e84:	a901      	add	r1, sp, #4
   25e86:	685b      	ldr	r3, [r3, #4]
   25e88:	4798      	blx	r3
	if (ret == 0) {
   25e8a:	b940      	cbnz	r0, 25e9e <hts221_trigger_set+0x4e>
		*value ^= data->invert;
   25e8c:	9b01      	ldr	r3, [sp, #4]
   25e8e:	6832      	ldr	r2, [r6, #0]
   25e90:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   25e92:	2301      	movs	r3, #1
   25e94:	40ab      	lsls	r3, r5
   25e96:	421a      	tst	r2, r3
   25e98:	bf14      	ite	ne
   25e9a:	2001      	movne	r0, #1
   25e9c:	2000      	moveq	r0, #0
	if (gpio_pin_get_dt(&cfg->gpio_drdy) > 0) {
   25e9e:	2800      	cmp	r0, #0
   25ea0:	dd08      	ble.n	25eb4 <hts221_trigger_set+0x64>
	struct hts221_data *data = dev->data;
   25ea2:	6925      	ldr	r5, [r4, #16]
	setup_drdy(dev, false);
   25ea4:	6860      	ldr	r0, [r4, #4]
   25ea6:	2100      	movs	r1, #0
   25ea8:	f7ff ff94 	bl	25dd4 <setup_drdy.isra.0>
	k_work_submit(&data->work);
   25eac:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   25eb0:	f7fa f8dc 	bl	2006c <k_work_submit>
}
   25eb4:	2000      	movs	r0, #0
   25eb6:	b002      	add	sp, #8
   25eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025ebc <i2c_transfer>:
{
   25ebc:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   25ebe:	6884      	ldr	r4, [r0, #8]
   25ec0:	68a4      	ldr	r4, [r4, #8]
   25ec2:	46a4      	mov	ip, r4
}
   25ec4:	bc10      	pop	{r4}
   25ec6:	4760      	bx	ip

00025ec8 <lis2dh_i2c_write_data>:
{
   25ec8:	b530      	push	{r4, r5, lr}
   25eca:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   25ecc:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
   25ed0:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   25ed2:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   25ed6:	f10d 0107 	add.w	r1, sp, #7
   25eda:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   25edc:	2101      	movs	r1, #1
	return i2c_burst_write(spec->bus, spec->addr,
   25ede:	6860      	ldr	r0, [r4, #4]
	msg[0].len = 1U;
   25ee0:	9103      	str	r1, [sp, #12]
{
   25ee2:	461d      	mov	r5, r3
	msg[0].flags = I2C_MSG_WRITE;
   25ee4:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   25ee6:	8923      	ldrh	r3, [r4, #8]
	msg[0].flags = I2C_MSG_WRITE;
   25ee8:	f88d 1010 	strb.w	r1, [sp, #16]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   25eec:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
   25ef0:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   25ef2:	2202      	movs	r2, #2
   25ef4:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
   25ef8:	f7ff ffe0 	bl	25ebc <i2c_transfer>
}
   25efc:	b009      	add	sp, #36	; 0x24
   25efe:	bd30      	pop	{r4, r5, pc}

00025f00 <lis2dh_i2c_read_data>:
{
   25f00:	b530      	push	{r4, r5, lr}
   25f02:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   25f04:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
   25f08:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   25f0a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   25f0e:	f10d 0107 	add.w	r1, sp, #7
{
   25f12:	461d      	mov	r5, r3
   25f14:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   25f16:	2101      	movs	r1, #1
	return i2c_burst_read(spec->bus, spec->addr,
   25f18:	6860      	ldr	r0, [r4, #4]
   25f1a:	8923      	ldrh	r3, [r4, #8]
	msg[0].len = num_write;
   25f1c:	9103      	str	r1, [sp, #12]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   25f1e:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   25f22:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25f24:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   25f26:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25f2a:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   25f2e:	a902      	add	r1, sp, #8
   25f30:	2202      	movs	r2, #2
   25f32:	f7ff ffc3 	bl	25ebc <i2c_transfer>
}
   25f36:	b009      	add	sp, #36	; 0x24
   25f38:	bd30      	pop	{r4, r5, pc}

00025f3a <lis2dh_i2c_write_reg>:
{
   25f3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct lis2dh_config *cfg = dev->config;
   25f3c:	6843      	ldr	r3, [r0, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   25f3e:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   25f42:	2202      	movs	r2, #2
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   25f44:	6858      	ldr	r0, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   25f46:	f88d 1000 	strb.w	r1, [sp]
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   25f4a:	891b      	ldrh	r3, [r3, #8]
	msg.len = num_bytes;
   25f4c:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   25f4e:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
   25f52:	a901      	add	r1, sp, #4
   25f54:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
   25f56:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   25f5a:	f7ff ffaf 	bl	25ebc <i2c_transfer>
}
   25f5e:	b005      	add	sp, #20
   25f60:	f85d fb04 	ldr.w	pc, [sp], #4

00025f64 <lis2dh_i2c_read_reg>:
{
   25f64:	b510      	push	{r4, lr}
   25f66:	b088      	sub	sp, #32
	const struct lis2dh_config *cfg = dev->config;
   25f68:	6843      	ldr	r3, [r0, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   25f6a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   25f6e:	f10d 0107 	add.w	r1, sp, #7
   25f72:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   25f74:	2101      	movs	r1, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   25f76:	6858      	ldr	r0, [r3, #4]
   25f78:	891b      	ldrh	r3, [r3, #8]
	msg[0].len = num_write;
   25f7a:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
   25f7c:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25f80:	2207      	movs	r2, #7
   25f82:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   25f86:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
   25f88:	2202      	movs	r2, #2
   25f8a:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
   25f8c:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   25f90:	f7ff ff94 	bl	25ebc <i2c_transfer>
}
   25f94:	b008      	add	sp, #32
   25f96:	bd10      	pop	{r4, pc}

00025f98 <lis2dh_i2c_update_reg>:
{
   25f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25f9c:	4698      	mov	r8, r3
	const struct lis2dh_config *cfg = dev->config;
   25f9e:	6843      	ldr	r3, [r0, #4]
{
   25fa0:	b088      	sub	sp, #32
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
   25fa2:	f8d3 9004 	ldr.w	r9, [r3, #4]
   25fa6:	f893 a008 	ldrb.w	sl, [r3, #8]
   25faa:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   25fae:	2300      	movs	r3, #0
	msg[0].len = num_write;
   25fb0:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   25fb2:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   25fb6:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   25fba:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25fbe:	2307      	movs	r3, #7
   25fc0:	460e      	mov	r6, r1
   25fc2:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
   25fc4:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   25fc6:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   25fca:	2202      	movs	r2, #2
   25fcc:	4653      	mov	r3, sl
   25fce:	a902      	add	r1, sp, #8
   25fd0:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
   25fd2:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   25fd4:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
   25fd6:	f7ff ff71 	bl	25ebc <i2c_transfer>
	if (rc != 0) {
   25fda:	b9b8      	cbnz	r0, 2600c <lis2dh_i2c_update_reg+0x74>
	new_value = (old_value & ~mask) | (value & mask);
   25fdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
   25fe0:	ea22 0304 	bic.w	r3, r2, r4
   25fe4:	ea04 0408 	and.w	r4, r4, r8
   25fe8:	431c      	orrs	r4, r3
	if (new_value == old_value) {
   25fea:	42a2      	cmp	r2, r4
   25fec:	d00e      	beq.n	2600c <lis2dh_i2c_update_reg+0x74>
	msg.len = num_bytes;
   25fee:	2302      	movs	r3, #2
   25ff0:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   25ff2:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
   25ff6:	463a      	mov	r2, r7
   25ff8:	4653      	mov	r3, sl
   25ffa:	a902      	add	r1, sp, #8
   25ffc:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
   25ffe:	f88d 6004 	strb.w	r6, [sp, #4]
   26002:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   26006:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
   26008:	f7ff ff58 	bl	25ebc <i2c_transfer>
}
   2600c:	b008      	add	sp, #32
   2600e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026012 <z_impl_i2c_transfer>:
{
   26012:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   26014:	6884      	ldr	r4, [r0, #8]
   26016:	68a4      	ldr	r4, [r4, #8]
   26018:	46a4      	mov	ip, r4
}
   2601a:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2601c:	4760      	bx	ip

0002601e <lps22hb_sample_fetch>:
{
   2601e:	b530      	push	{r4, r5, lr}
   26020:	b08b      	sub	sp, #44	; 0x2c
	const struct lps22hb_config *config = dev->config;
   26022:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
   26024:	6905      	ldr	r5, [r0, #16]
	return i2c_burst_read(spec->bus, spec->addr,
   26026:	6818      	ldr	r0, [r3, #0]
   26028:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
   2602a:	2228      	movs	r2, #40	; 0x28
   2602c:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   26030:	f10d 0207 	add.w	r2, sp, #7
   26034:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
   26036:	2201      	movs	r2, #1
   26038:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
   2603a:	aa02      	add	r2, sp, #8
   2603c:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
   2603e:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
   26040:	2400      	movs	r4, #0
	msg[1].len = num_read;
   26042:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   26044:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   26046:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2604a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
   2604e:	2202      	movs	r2, #2
   26050:	a904      	add	r1, sp, #16
   26052:	f7ff ffde 	bl	26012 <z_impl_i2c_transfer>
	if (i2c_burst_read_dt(&config->i2c, LPS22HB_REG_PRESS_OUT_XL,
   26056:	42a0      	cmp	r0, r4
   26058:	db10      	blt.n	2607c <lps22hb_sample_fetch+0x5e>
				     ((uint32_t)(out[2]) << 16));
   2605a:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
   2605e:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
   26062:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
   26064:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   26068:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
   2606c:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   2606e:	602b      	str	r3, [r5, #0]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
   26070:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   26074:	80ab      	strh	r3, [r5, #4]
	return 0;
   26076:	4620      	mov	r0, r4
}
   26078:	b00b      	add	sp, #44	; 0x2c
   2607a:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   2607c:	f06f 0004 	mvn.w	r0, #4
   26080:	e7fa      	b.n	26078 <lps22hb_sample_fetch+0x5a>

00026082 <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
   26082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26086:	b088      	sub	sp, #32
   26088:	4699      	mov	r9, r3
	msg[0].flags = I2C_MSG_WRITE;
   2608a:	2300      	movs	r3, #0
	msg[0].len = num_write;
   2608c:	f04f 0801 	mov.w	r8, #1
	msg[0].flags = I2C_MSG_WRITE;
   26090:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   26094:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   26098:	e9cd 3805 	strd	r3, r8, [sp, #20]
   2609c:	f04f 0a10 	mov.w	sl, #16
	msg[0].buf = (uint8_t *)write_buf;
   260a0:	ae01      	add	r6, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   260a2:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
   260a4:	4607      	mov	r7, r0
   260a6:	460d      	mov	r5, r1
   260a8:	4614      	mov	r4, r2
   260aa:	f88d a004 	strb.w	sl, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   260ae:	9602      	str	r6, [sp, #8]
	msg[0].len = num_write;
   260b0:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   260b4:	f88d 301c 	strb.w	r3, [sp, #28]
   260b8:	2202      	movs	r2, #2
   260ba:	460b      	mov	r3, r1
   260bc:	a902      	add	r1, sp, #8
   260be:	f7ff ffa8 	bl	26012 <z_impl_i2c_transfer>
	if (rc != 0) {
   260c2:	b9b8      	cbnz	r0, 260f4 <i2c_reg_update_byte.constprop.0+0x72>
	new_value = (old_value & ~mask) | (value & mask);
   260c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   260c8:	ea22 0304 	bic.w	r3, r2, r4
   260cc:	ea04 0409 	and.w	r4, r4, r9
   260d0:	431c      	orrs	r4, r3
	if (new_value == old_value) {
   260d2:	42a2      	cmp	r2, r4
   260d4:	d00e      	beq.n	260f4 <i2c_reg_update_byte.constprop.0+0x72>
	msg.len = num_bytes;
   260d6:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   260d8:	f88d a004 	strb.w	sl, [sp, #4]
   260dc:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   260e0:	9602      	str	r6, [sp, #8]
	msg.len = num_bytes;
   260e2:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   260e4:	f88d 3010 	strb.w	r3, [sp, #16]
   260e8:	462b      	mov	r3, r5
   260ea:	4642      	mov	r2, r8
   260ec:	a902      	add	r1, sp, #8
   260ee:	4638      	mov	r0, r7
   260f0:	f7ff ff8f 	bl	26012 <z_impl_i2c_transfer>
}
   260f4:	b008      	add	sp, #32
   260f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000260fa <lps22hb_init>:
{
   260fa:	b570      	push	{r4, r5, r6, lr}
	if (!device_is_ready(config->i2c.bus)) {
   260fc:	6843      	ldr	r3, [r0, #4]
{
   260fe:	b088      	sub	sp, #32
   26100:	4605      	mov	r5, r0
	if (!device_is_ready(config->i2c.bus)) {
   26102:	6818      	ldr	r0, [r3, #0]
   26104:	f000 fbf0 	bl	268e8 <z_device_is_ready>
   26108:	b920      	cbnz	r0, 26114 <lps22hb_init+0x1a>
}
   2610a:	b008      	add	sp, #32
   2610c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26110:	f7f6 bd0e 	b.w	1cb30 <lps22hb_init.part.0>
	const struct lps22hb_config *config = dev->config;
   26114:	686e      	ldr	r6, [r5, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   26116:	220f      	movs	r2, #15
   26118:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2611c:	f10d 0207 	add.w	r2, sp, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   26120:	6830      	ldr	r0, [r6, #0]
	msg[0].buf = (uint8_t *)write_buf;
   26122:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   26124:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
   26128:	2201      	movs	r2, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   2612a:	88b3      	ldrh	r3, [r6, #4]
	msg[0].len = num_write;
   2612c:	9203      	str	r2, [sp, #12]
	msg[1].len = num_read;
   2612e:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   26132:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   26134:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   26136:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2613a:	f88d 201c 	strb.w	r2, [sp, #28]
   2613e:	2202      	movs	r2, #2
   26140:	a902      	add	r1, sp, #8
   26142:	f7ff ff66 	bl	26012 <z_impl_i2c_transfer>
	if (i2c_reg_read_byte_dt(&config->i2c, LPS22HB_REG_WHO_AM_I,
   26146:	42a0      	cmp	r0, r4
   26148:	db03      	blt.n	26152 <lps22hb_init+0x58>
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
   2614a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2614e:	2bb1      	cmp	r3, #177	; 0xb1
   26150:	d003      	beq.n	2615a <lps22hb_init+0x60>
		return -EIO;
   26152:	f06f 0004 	mvn.w	r0, #4
}
   26156:	b008      	add	sp, #32
   26158:	bd70      	pop	{r4, r5, r6, pc}
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
   2615a:	6868      	ldr	r0, [r5, #4]
	return i2c_reg_update_byte(spec->bus, spec->addr,
   2615c:	2330      	movs	r3, #48	; 0x30
   2615e:	7901      	ldrb	r1, [r0, #4]
   26160:	6800      	ldr	r0, [r0, #0]
   26162:	2270      	movs	r2, #112	; 0x70
   26164:	f7ff ff8d 	bl	26082 <i2c_reg_update_byte.constprop.0>
   26168:	2800      	cmp	r0, #0
   2616a:	dbf2      	blt.n	26152 <lps22hb_init+0x58>
   2616c:	2302      	movs	r3, #2
   2616e:	7931      	ldrb	r1, [r6, #4]
   26170:	6830      	ldr	r0, [r6, #0]
   26172:	461a      	mov	r2, r3
   26174:	f7ff ff85 	bl	26082 <i2c_reg_update_byte.constprop.0>
	if (i2c_reg_update_byte_dt(&config->i2c, LPS22HB_REG_CTRL_REG1,
   26178:	2800      	cmp	r0, #0
   2617a:	dbea      	blt.n	26152 <lps22hb_init+0x58>
	return 0;
   2617c:	4620      	mov	r0, r4
   2617e:	e7ea      	b.n	26156 <lps22hb_init+0x5c>

00026180 <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   26180:	b530      	push	{r4, r5, lr}
   26182:	b089      	sub	sp, #36	; 0x24
   26184:	4604      	mov	r4, r0
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   26186:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2618a:	f10d 0107 	add.w	r1, sp, #7
{
   2618e:	461d      	mov	r5, r3
   26190:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   26192:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   26194:	e9cd 2505 	strd	r2, r5, [sp, #20]
   26198:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2619a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   2619c:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
   2619e:	6800      	ldr	r0, [r0, #0]
   261a0:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   261a2:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   261a6:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   261aa:	6882      	ldr	r2, [r0, #8]
   261ac:	a902      	add	r1, sp, #8
   261ae:	6894      	ldr	r4, [r2, #8]
   261b0:	2202      	movs	r2, #2
   261b2:	47a0      	blx	r4
}
   261b4:	b009      	add	sp, #36	; 0x24
   261b6:	bd30      	pop	{r4, r5, pc}

000261b8 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   261b8:	b530      	push	{r4, r5, lr}
   261ba:	b089      	sub	sp, #36	; 0x24
   261bc:	4604      	mov	r4, r0
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   261be:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   261c2:	f10d 0107 	add.w	r1, sp, #7
{
   261c6:	461d      	mov	r5, r3
   261c8:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   261ca:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   261cc:	e9cd 2505 	strd	r2, r5, [sp, #20]
   261d0:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   261d2:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   261d4:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   261d6:	6800      	ldr	r0, [r0, #0]
   261d8:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   261da:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   261de:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   261e2:	6881      	ldr	r1, [r0, #8]
   261e4:	688c      	ldr	r4, [r1, #8]
   261e6:	a902      	add	r1, sp, #8
   261e8:	47a0      	blx	r4
}
   261ea:	b009      	add	sp, #36	; 0x24
   261ec:	bd30      	pop	{r4, r5, pc}

000261ee <parse_named_int>:
{
   261ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   261f0:	460f      	mov	r7, r1
   261f2:	4615      	mov	r5, r2
	i = strtoul(name, &endptr, 0);
   261f4:	a901      	add	r1, sp, #4
   261f6:	2200      	movs	r2, #0
{
   261f8:	4606      	mov	r6, r0
	i = strtoul(name, &endptr, 0);
   261fa:	f7fd fbed 	bl	239d8 <strtoul>
	if (*endptr == '\0') {
   261fe:	9b01      	ldr	r3, [sp, #4]
   26200:	781b      	ldrb	r3, [r3, #0]
	i = strtoul(name, &endptr, 0);
   26202:	4604      	mov	r4, r0
	if (*endptr == '\0') {
   26204:	b15b      	cbz	r3, 2621e <parse_named_int+0x30>
	for (i = 0; i < count; i++) {
   26206:	2400      	movs	r4, #0
		if (strcmp(name, heystack[i]) == 0) {
   26208:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   2620c:	4630      	mov	r0, r6
   2620e:	f7fd fcb6 	bl	23b7e <strcmp>
   26212:	b120      	cbz	r0, 2621e <parse_named_int+0x30>
	for (i = 0; i < count; i++) {
   26214:	3401      	adds	r4, #1
   26216:	42a5      	cmp	r5, r4
   26218:	d1f6      	bne.n	26208 <parse_named_int+0x1a>
	return -ENOTSUP;
   2621a:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   2621e:	4620      	mov	r0, r4
   26220:	b003      	add	sp, #12
   26222:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026224 <regulator_common_data_init>:
 */

#include <zephyr/drivers/regulator.h>

void regulator_common_data_init(const struct device *dev)
{
   26224:	b510      	push	{r4, lr}
	struct regulator_common_data *data = dev->data;
   26226:	6904      	ldr	r4, [r0, #16]
	return z_impl_k_mutex_init(mutex);
   26228:	4620      	mov	r0, r4
   2622a:	f000 fc69 	bl	26b00 <z_impl_k_mutex_init>

	(void)k_mutex_init(&data->lock);
	data->refcnt = 0;
   2622e:	2300      	movs	r3, #0
   26230:	6163      	str	r3, [r4, #20]
}
   26232:	bd10      	pop	{r4, pc}

00026234 <regulator_enable>:

	return 0;
}

int regulator_enable(const struct device *dev)
{
   26234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct regulator_driver_api *api = dev->api;
   26236:	6887      	ldr	r7, [r0, #8]
	const struct regulator_common_config *config = dev->config;
	struct regulator_common_data *data = dev->data;
	int ret = 0;

	/* enable not supported (always on) */
	if (api->enable == NULL) {
   26238:	683c      	ldr	r4, [r7, #0]
{
   2623a:	4606      	mov	r6, r0
	if (api->enable == NULL) {
   2623c:	b1ec      	cbz	r4, 2627a <regulator_enable+0x46>
		return 0;
	}

	/* regulator must stay always on */
	if  ((config->flags & REGULATOR_ALWAYS_ON) != 0U) {
   2623e:	6843      	ldr	r3, [r0, #4]
   26240:	7d9c      	ldrb	r4, [r3, #22]
   26242:	f014 0401 	ands.w	r4, r4, #1
   26246:	d11a      	bne.n	2627e <regulator_enable+0x4a>
	struct regulator_common_data *data = dev->data;
   26248:	6905      	ldr	r5, [r0, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
   2624a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2624e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26252:	4628      	mov	r0, r5
   26254:	f7f9 fc7e 	bl	1fb54 <z_impl_k_mutex_lock>
		return 0;
	}

	(void)k_mutex_lock(&data->lock, K_FOREVER);

	data->refcnt++;
   26258:	696b      	ldr	r3, [r5, #20]
   2625a:	3301      	adds	r3, #1

	if (data->refcnt == 1) {
   2625c:	2b01      	cmp	r3, #1
	data->refcnt++;
   2625e:	616b      	str	r3, [r5, #20]
	if (data->refcnt == 1) {
   26260:	d108      	bne.n	26274 <regulator_enable+0x40>
		ret = api->enable(dev);
   26262:	683b      	ldr	r3, [r7, #0]
   26264:	4630      	mov	r0, r6
   26266:	4798      	blx	r3
		if (ret < 0) {
   26268:	1e04      	subs	r4, r0, #0
			data->refcnt--;
   2626a:	bfbe      	ittt	lt
   2626c:	696b      	ldrlt	r3, [r5, #20]
   2626e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   26272:	616b      	strlt	r3, [r5, #20]
	return z_impl_k_mutex_unlock(mutex);
   26274:	4628      	mov	r0, r5
   26276:	f7f9 fce7 	bl	1fc48 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&data->lock);

	return ret;
}
   2627a:	4620      	mov	r0, r4
   2627c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2627e:	2400      	movs	r4, #0
   26280:	e7fb      	b.n	2627a <regulator_enable+0x46>

00026282 <regulator_is_enabled>:

bool regulator_is_enabled(const struct device *dev)
{
   26282:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_common_config *config = dev->config;
	struct regulator_common_data *data = dev->data;
	bool enabled;

	if ((config->flags & REGULATOR_ALWAYS_ON) != 0U) {
   26284:	6843      	ldr	r3, [r0, #4]
   26286:	7d9b      	ldrb	r3, [r3, #22]
   26288:	07db      	lsls	r3, r3, #31
   2628a:	d410      	bmi.n	262ae <regulator_is_enabled+0x2c>
	struct regulator_common_data *data = dev->data;
   2628c:	6905      	ldr	r5, [r0, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
   2628e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26296:	4628      	mov	r0, r5
   26298:	f7f9 fc5c 	bl	1fb54 <z_impl_k_mutex_lock>
		enabled = true;
	} else {
		(void)k_mutex_lock(&data->lock, K_FOREVER);
		enabled = data->refcnt != 0;
   2629c:	696c      	ldr	r4, [r5, #20]
   2629e:	3c00      	subs	r4, #0
   262a0:	bf18      	it	ne
   262a2:	2401      	movne	r4, #1
	return z_impl_k_mutex_unlock(mutex);
   262a4:	4628      	mov	r0, r5
   262a6:	f7f9 fccf 	bl	1fc48 <z_impl_k_mutex_unlock>
		k_mutex_unlock(&data->lock);
	}

	return enabled;
}
   262aa:	4620      	mov	r0, r4
   262ac:	bd38      	pop	{r3, r4, r5, pc}
		enabled = true;
   262ae:	2401      	movs	r4, #1
   262b0:	e7fb      	b.n	262aa <regulator_is_enabled+0x28>

000262b2 <regulator_disable>:

int regulator_disable(const struct device *dev)
{
   262b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct regulator_driver_api *api = dev->api;
   262b4:	6887      	ldr	r7, [r0, #8]
	const struct regulator_common_config *config = dev->config;
	struct regulator_common_data *data = dev->data;
	int ret = 0;

	/* disable not supported (always on) */
	if (api->disable == NULL) {
   262b6:	687c      	ldr	r4, [r7, #4]
{
   262b8:	4606      	mov	r6, r0
	if (api->disable == NULL) {
   262ba:	b1dc      	cbz	r4, 262f4 <regulator_disable+0x42>
		return 0;
	}

	/* regulator must stay always on */
	if  ((config->flags & REGULATOR_ALWAYS_ON) != 0U) {
   262bc:	6843      	ldr	r3, [r0, #4]
   262be:	7d9c      	ldrb	r4, [r3, #22]
   262c0:	f014 0401 	ands.w	r4, r4, #1
   262c4:	d118      	bne.n	262f8 <regulator_disable+0x46>
	struct regulator_common_data *data = dev->data;
   262c6:	6905      	ldr	r5, [r0, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
   262c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   262cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   262d0:	4628      	mov	r0, r5
   262d2:	f7f9 fc3f 	bl	1fb54 <z_impl_k_mutex_lock>
		return 0;
	}

	(void)k_mutex_lock(&data->lock, K_FOREVER);

	data->refcnt--;
   262d6:	696b      	ldr	r3, [r5, #20]
   262d8:	3b01      	subs	r3, #1
   262da:	616b      	str	r3, [r5, #20]

	if (data->refcnt == 0) {
   262dc:	b93b      	cbnz	r3, 262ee <regulator_disable+0x3c>
		ret = api->disable(dev);
   262de:	687b      	ldr	r3, [r7, #4]
   262e0:	4630      	mov	r0, r6
   262e2:	4798      	blx	r3
		if (ret < 0) {
   262e4:	1e04      	subs	r4, r0, #0
			data->refcnt++;
   262e6:	bfbe      	ittt	lt
   262e8:	696b      	ldrlt	r3, [r5, #20]
   262ea:	3301      	addlt	r3, #1
   262ec:	616b      	strlt	r3, [r5, #20]
	return z_impl_k_mutex_unlock(mutex);
   262ee:	4628      	mov	r0, r5
   262f0:	f7f9 fcaa 	bl	1fc48 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&data->lock);

	return ret;
}
   262f4:	4620      	mov	r0, r4
   262f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   262f8:	2400      	movs	r4, #0
   262fa:	e7fb      	b.n	262f4 <regulator_disable+0x42>

000262fc <regulator_set_voltage>:
	return false;
}

int regulator_set_voltage(const struct device *dev, int32_t min_uv,
			  int32_t max_uv)
{
   262fc:	b4f0      	push	{r4, r5, r6, r7}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_voltage == NULL) {
   262fe:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   26302:	691b      	ldr	r3, [r3, #16]
   26304:	b13b      	cbz	r3, 26316 <regulator_set_voltage+0x1a>
		return -ENOSYS;
	}

	/* voltage may not be allowed, even if supported */
	if ((min_uv > config->max_uv) || (max_uv < config->min_uv)) {
   26306:	6877      	ldr	r7, [r6, #4]
   26308:	428f      	cmp	r7, r1
   2630a:	db08      	blt.n	2631e <regulator_set_voltage+0x22>
   2630c:	6835      	ldr	r5, [r6, #0]
   2630e:	4295      	cmp	r5, r2
   26310:	dc05      	bgt.n	2631e <regulator_set_voltage+0x22>
		return -EINVAL;
	}

	return api->set_voltage(dev, min_uv, max_uv);
}
   26312:	bcf0      	pop	{r4, r5, r6, r7}
	return api->set_voltage(dev, min_uv, max_uv);
   26314:	4718      	bx	r3
		return -ENOSYS;
   26316:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   2631a:	bcf0      	pop	{r4, r5, r6, r7}
   2631c:	4770      	bx	lr
		return -EINVAL;
   2631e:	f06f 0015 	mvn.w	r0, #21
   26322:	e7fa      	b.n	2631a <regulator_set_voltage+0x1e>

00026324 <regulator_set_current_limit>:

int regulator_set_current_limit(const struct device *dev, int32_t min_ua,
				int32_t max_ua)
{
   26324:	b4f0      	push	{r4, r5, r6, r7}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_current_limit == NULL) {
   26326:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   2632a:	699b      	ldr	r3, [r3, #24]
   2632c:	b13b      	cbz	r3, 2633e <regulator_set_current_limit+0x1a>
		return -ENOSYS;
	}

	/* current limit may not be allowed, even if supported */
	if ((min_ua > config->max_ua) || (max_ua < config->min_ua)) {
   2632e:	68f7      	ldr	r7, [r6, #12]
   26330:	428f      	cmp	r7, r1
   26332:	db08      	blt.n	26346 <regulator_set_current_limit+0x22>
   26334:	68b5      	ldr	r5, [r6, #8]
   26336:	4295      	cmp	r5, r2
   26338:	dc05      	bgt.n	26346 <regulator_set_current_limit+0x22>
		return -EINVAL;
	}

	return api->set_current_limit(dev, min_ua, max_ua);
}
   2633a:	bcf0      	pop	{r4, r5, r6, r7}
	return api->set_current_limit(dev, min_ua, max_ua);
   2633c:	4718      	bx	r3
		return -ENOSYS;
   2633e:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   26342:	bcf0      	pop	{r4, r5, r6, r7}
   26344:	4770      	bx	lr
		return -EINVAL;
   26346:	f06f 0015 	mvn.w	r0, #21
   2634a:	e7fa      	b.n	26342 <regulator_set_current_limit+0x1e>

0002634c <regulator_set_mode>:

int regulator_set_mode(const struct device *dev, regulator_mode_t mode)
{
   2634c:	b470      	push	{r4, r5, r6}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_mode == NULL) {
   2634e:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
   26352:	6a15      	ldr	r5, [r2, #32]
{
   26354:	4603      	mov	r3, r0
   26356:	460c      	mov	r4, r1
	if (api->set_mode == NULL) {
   26358:	b19d      	cbz	r5, 26382 <regulator_set_mode+0x36>
		return -ENOSYS;
	}

	/* no mode restrictions */
	if (config->allowed_modes_cnt == 0U) {
   2635a:	7d32      	ldrb	r2, [r6, #20]
   2635c:	b912      	cbnz	r2, 26364 <regulator_set_mode+0x18>
	}

	/* check if mode is allowed, apply if it is */
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
		if (mode == config->allowed_modes[i]) {
			return api->set_mode(dev, mode);
   2635e:	462b      	mov	r3, r5
		}
	}

	return -ENOTSUP;
}
   26360:	bc70      	pop	{r4, r5, r6}
			return api->set_mode(dev, mode);
   26362:	4718      	bx	r3
   26364:	6930      	ldr	r0, [r6, #16]
   26366:	4402      	add	r2, r0
		if (mode == config->allowed_modes[i]) {
   26368:	f810 1b01 	ldrb.w	r1, [r0], #1
   2636c:	42a1      	cmp	r1, r4
   2636e:	d102      	bne.n	26376 <regulator_set_mode+0x2a>
			return api->set_mode(dev, mode);
   26370:	4621      	mov	r1, r4
   26372:	4618      	mov	r0, r3
   26374:	e7f3      	b.n	2635e <regulator_set_mode+0x12>
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
   26376:	4290      	cmp	r0, r2
   26378:	d1f6      	bne.n	26368 <regulator_set_mode+0x1c>
	return -ENOTSUP;
   2637a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2637e:	bc70      	pop	{r4, r5, r6}
   26380:	4770      	bx	lr
		return -ENOSYS;
   26382:	f06f 0057 	mvn.w	r0, #87	; 0x57
   26386:	e7fa      	b.n	2637e <regulator_set_mode+0x32>

00026388 <regulator_common_init>:
{
   26388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct regulator_common_config *config = dev->config;
   2638c:	e9d0 6801 	ldrd	r6, r8, [r0, #4]
{
   26390:	460f      	mov	r7, r1
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   26392:	7d71      	ldrb	r1, [r6, #21]
	struct regulator_common_data *data = dev->data;
   26394:	6905      	ldr	r5, [r0, #16]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   26396:	29ff      	cmp	r1, #255	; 0xff
{
   26398:	4604      	mov	r4, r0
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   2639a:	d10d      	bne.n	263b8 <regulator_common_init+0x30>
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
   2639c:	e9d6 1200 	ldrd	r1, r2, [r6]
   263a0:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   263a4:	d00e      	beq.n	263c4 <regulator_common_init+0x3c>
		ret = regulator_set_voltage(dev, config->min_uv,
   263a6:	4620      	mov	r0, r4
   263a8:	f7ff ffa8 	bl	262fc <regulator_set_voltage>
		if ((ret < 0) && (ret != -ENOSYS)) {
   263ac:	2800      	cmp	r0, #0
   263ae:	da0d      	bge.n	263cc <regulator_common_init+0x44>
   263b0:	f110 0f58 	cmn.w	r0, #88	; 0x58
   263b4:	d104      	bne.n	263c0 <regulator_common_init+0x38>
   263b6:	e009      	b.n	263cc <regulator_common_init+0x44>
		ret = regulator_set_mode(dev, config->initial_mode);
   263b8:	f7ff ffc8 	bl	2634c <regulator_set_mode>
		if (ret < 0) {
   263bc:	2800      	cmp	r0, #0
   263be:	daed      	bge.n	2639c <regulator_common_init+0x14>
}
   263c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
   263c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   263c8:	429a      	cmp	r2, r3
   263ca:	d1ec      	bne.n	263a6 <regulator_common_init+0x1e>
	if (is_enabled) {
   263cc:	b947      	cbnz	r7, 263e0 <regulator_common_init+0x58>
	} else if ((config->flags & REGULATOR_INIT_ENABLED) != 0U) {
   263ce:	7db3      	ldrb	r3, [r6, #22]
   263d0:	079b      	lsls	r3, r3, #30
   263d2:	d008      	beq.n	263e6 <regulator_common_init+0x5e>
		ret = api->enable(dev);
   263d4:	f8d8 3000 	ldr.w	r3, [r8]
   263d8:	4620      	mov	r0, r4
   263da:	4798      	blx	r3
		if (ret < 0) {
   263dc:	2800      	cmp	r0, #0
   263de:	dbef      	blt.n	263c0 <regulator_common_init+0x38>
		data->refcnt++;
   263e0:	696b      	ldr	r3, [r5, #20]
   263e2:	3301      	adds	r3, #1
   263e4:	616b      	str	r3, [r5, #20]
	return 0;
   263e6:	2000      	movs	r0, #0
   263e8:	e7ea      	b.n	263c0 <regulator_common_init+0x38>

000263ea <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   263ea:	2301      	movs	r3, #1
   263ec:	fa03 f101 	lsl.w	r1, r3, r1
   263f0:	6903      	ldr	r3, [r0, #16]
   263f2:	681b      	ldr	r3, [r3, #0]
   263f4:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   263f6:	bf18      	it	ne
   263f8:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   263fc:	b112      	cbz	r2, 26404 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   263fe:	6883      	ldr	r3, [r0, #8]
   26400:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26402:	4718      	bx	r3
   26404:	6883      	ldr	r3, [r0, #8]
   26406:	691b      	ldr	r3, [r3, #16]
   26408:	e7fb      	b.n	26402 <gpio_pin_set+0x18>

0002640a <regulator_fixed_disable>:
	const struct regulator_fixed_config *cfg = dev->config;
   2640a:	6843      	ldr	r3, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   2640c:	2200      	movs	r2, #0
   2640e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   26412:	6a18      	ldr	r0, [r3, #32]
   26414:	f7ff bfe9 	b.w	263ea <gpio_pin_set>

00026418 <device_get_binding>:
   26418:	f7f8 bfc6 	b.w	1f3a8 <z_impl_device_get_binding>

0002641c <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2641c:	6902      	ldr	r2, [r0, #16]
{
   2641e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   26420:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   26424:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26428:	2000      	movs	r0, #0
   2642a:	4770      	bx	lr

0002642c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2642c:	6843      	ldr	r3, [r0, #4]
   2642e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26430:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26434:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26438:	4770      	bx	lr

0002643a <tx_start>:
{
   2643a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2643c:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2643e:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26440:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26444:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26448:	2200      	movs	r2, #0
   2644a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2644e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   26452:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   26456:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2645a:	6862      	ldr	r2, [r4, #4]
   2645c:	06d2      	lsls	r2, r2, #27
   2645e:	d508      	bpl.n	26472 <tx_start+0x38>
	return config->uarte_regs;
   26460:	6842      	ldr	r2, [r0, #4]
   26462:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   26464:	2108      	movs	r1, #8
   26466:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2646a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2646e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26472:	2201      	movs	r2, #1
   26474:	609a      	str	r2, [r3, #8]
}
   26476:	bd10      	pop	{r4, pc}

00026478 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26478:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2647a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2647c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2647e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26482:	b150      	cbz	r0, 2649a <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   26484:	6992      	ldr	r2, [r2, #24]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26486:	2000      	movs	r0, #0
   26488:	7812      	ldrb	r2, [r2, #0]
   2648a:	700a      	strb	r2, [r1, #0]
   2648c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26490:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26494:	2201      	movs	r2, #1
   26496:	601a      	str	r2, [r3, #0]
	return 0;
   26498:	4770      	bx	lr
		return -1;
   2649a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2649e:	4770      	bx	lr

000264a0 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   264a0:	2a00      	cmp	r2, #0
{
   264a2:	b510      	push	{r4, lr}
   264a4:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   264a6:	dd10      	ble.n	264ca <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   264a8:	6843      	ldr	r3, [r0, #4]
   264aa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   264ac:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   264b0:	b150      	cbz	r0, 264c8 <uarte_nrfx_fifo_read+0x28>
	const struct uarte_nrfx_data *data = dev->data;
   264b2:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   264b4:	2000      	movs	r0, #0
   264b6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
   264ba:	6992      	ldr	r2, [r2, #24]
   264bc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   264c0:	7812      	ldrb	r2, [r2, #0]
   264c2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   264c4:	2001      	movs	r0, #1
   264c6:	6018      	str	r0, [r3, #0]
}
   264c8:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   264ca:	2000      	movs	r0, #0
   264cc:	e7fc      	b.n	264c8 <uarte_nrfx_fifo_read+0x28>

000264ce <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   264ce:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   264d0:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   264d2:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   264d4:	f04f 0020 	mov.w	r0, #32
   264d8:	f3ef 8311 	mrs	r3, BASEPRI
   264dc:	f380 8812 	msr	BASEPRI_MAX, r0
   264e0:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   264e4:	68c9      	ldr	r1, [r1, #12]
   264e6:	2000      	movs	r0, #0
   264e8:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   264ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   264ee:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   264f2:	f383 8811 	msr	BASEPRI, r3
   264f6:	f3bf 8f6f 	isb	sy
}
   264fa:	4770      	bx	lr

000264fc <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   264fc:	6903      	ldr	r3, [r0, #16]
   264fe:	68db      	ldr	r3, [r3, #12]
   26500:	2201      	movs	r2, #1
   26502:	739a      	strb	r2, [r3, #14]
}
   26504:	4770      	bx	lr

00026506 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   26506:	6903      	ldr	r3, [r0, #16]
   26508:	68db      	ldr	r3, [r3, #12]
   2650a:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2650c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   26510:	b962      	cbnz	r2, 2652c <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   26512:	6842      	ldr	r2, [r0, #4]
   26514:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26516:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2651a:	b140      	cbz	r0, 2652e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2651c:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   26520:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   26524:	d003      	beq.n	2652e <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   26526:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   26528:	2001      	movs	r0, #1
   2652a:	4770      	bx	lr
   2652c:	2000      	movs	r0, #0
}
   2652e:	4770      	bx	lr

00026530 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   26530:	6843      	ldr	r3, [r0, #4]
   26532:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26534:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   26538:	3800      	subs	r0, #0
   2653a:	bf18      	it	ne
   2653c:	2001      	movne	r0, #1
   2653e:	4770      	bx	lr

00026540 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   26540:	6843      	ldr	r3, [r0, #4]
   26542:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   26544:	2210      	movs	r2, #16
   26546:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2654a:	4770      	bx	lr

0002654c <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2654c:	6843      	ldr	r3, [r0, #4]
   2654e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   26550:	2210      	movs	r2, #16
   26552:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   26556:	4770      	bx	lr

00026558 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   26558:	6843      	ldr	r3, [r0, #4]
   2655a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2655c:	f44f 7200 	mov.w	r2, #512	; 0x200
   26560:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26564:	4770      	bx	lr

00026566 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   26566:	6843      	ldr	r3, [r0, #4]
   26568:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2656a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2656e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   26572:	4770      	bx	lr

00026574 <uarte_nrfx_irq_is_pending>:
{
   26574:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   26576:	6843      	ldr	r3, [r0, #4]
   26578:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2657a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2657e:	025b      	lsls	r3, r3, #9
{
   26580:	4604      	mov	r4, r0
		||
   26582:	d405      	bmi.n	26590 <uarte_nrfx_irq_is_pending+0x1c>
   26584:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   26588:	f010 0010 	ands.w	r0, r0, #16
   2658c:	d106      	bne.n	2659c <uarte_nrfx_irq_is_pending+0x28>
}
   2658e:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   26590:	f7ff ffb9 	bl	26506 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   26594:	2800      	cmp	r0, #0
   26596:	d0f5      	beq.n	26584 <uarte_nrfx_irq_is_pending+0x10>
		||
   26598:	2001      	movs	r0, #1
   2659a:	e7f8      	b.n	2658e <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2659c:	4620      	mov	r0, r4
   2659e:	f7ff ffc7 	bl	26530 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   265a2:	3800      	subs	r0, #0
   265a4:	bf18      	it	ne
   265a6:	2001      	movne	r0, #1
   265a8:	e7f1      	b.n	2658e <uarte_nrfx_irq_is_pending+0x1a>

000265aa <uarte_nrfx_irq_update>:
}
   265aa:	2001      	movs	r0, #1
   265ac:	4770      	bx	lr

000265ae <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   265ae:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   265b0:	68d8      	ldr	r0, [r3, #12]
   265b2:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   265b4:	68db      	ldr	r3, [r3, #12]
   265b6:	605a      	str	r2, [r3, #4]
}
   265b8:	4770      	bx	lr

000265ba <is_tx_ready.isra.0>:
	return config->uarte_regs;
   265ba:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   265bc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   265be:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   265c2:	b940      	cbnz	r0, 265d6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   265c4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   265c6:	079b      	lsls	r3, r3, #30
   265c8:	d406      	bmi.n	265d8 <is_tx_ready.isra.0+0x1e>
   265ca:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   265ce:	3800      	subs	r0, #0
   265d0:	bf18      	it	ne
   265d2:	2001      	movne	r0, #1
   265d4:	4770      	bx	lr
   265d6:	2001      	movs	r0, #1
}
   265d8:	4770      	bx	lr

000265da <uarte_nrfx_fifo_fill>:
{
   265da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   265dc:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   265de:	68f3      	ldr	r3, [r6, #12]
   265e0:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   265e2:	f3bf 8f5b 	dmb	ish
   265e6:	4294      	cmp	r4, r2
   265e8:	bfa8      	it	ge
   265ea:	4614      	movge	r4, r2
{
   265ec:	4605      	mov	r5, r0
   265ee:	3310      	adds	r3, #16
   265f0:	2201      	movs	r2, #1
   265f2:	e853 0f00 	ldrex	r0, [r3]
   265f6:	2800      	cmp	r0, #0
   265f8:	d103      	bne.n	26602 <uarte_nrfx_fifo_fill+0x28>
   265fa:	e843 2700 	strex	r7, r2, [r3]
   265fe:	2f00      	cmp	r7, #0
   26600:	d1f7      	bne.n	265f2 <uarte_nrfx_fifo_fill+0x18>
   26602:	f3bf 8f5b 	dmb	ish
   26606:	bf0c      	ite	eq
   26608:	4613      	moveq	r3, r2
   2660a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2660c:	d11f      	bne.n	2664e <uarte_nrfx_fifo_fill+0x74>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   2660e:	68f3      	ldr	r3, [r6, #12]
   26610:	4622      	mov	r2, r4
   26612:	6898      	ldr	r0, [r3, #8]
   26614:	f7fd fafa 	bl	23c0c <memcpy>
	__asm__ volatile(
   26618:	f04f 0320 	mov.w	r3, #32
   2661c:	f3ef 8711 	mrs	r7, BASEPRI
   26620:	f383 8812 	msr	BASEPRI_MAX, r3
   26624:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   26628:	6868      	ldr	r0, [r5, #4]
   2662a:	f7ff ffc6 	bl	265ba <is_tx_ready.isra.0>
   2662e:	68f3      	ldr	r3, [r6, #12]
   26630:	b938      	cbnz	r0, 26642 <uarte_nrfx_fifo_fill+0x68>
		data->int_driven->fifo_fill_lock = 0;
   26632:	6118      	str	r0, [r3, #16]
		len = 0;
   26634:	4604      	mov	r4, r0
	__asm__ volatile(
   26636:	f387 8811 	msr	BASEPRI, r7
   2663a:	f3bf 8f6f 	isb	sy
}
   2663e:	4620      	mov	r0, r4
   26640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   26642:	6899      	ldr	r1, [r3, #8]
   26644:	4622      	mov	r2, r4
   26646:	4628      	mov	r0, r5
   26648:	f7ff fef7 	bl	2643a <tx_start>
   2664c:	e7f3      	b.n	26636 <uarte_nrfx_fifo_fill+0x5c>
		return 0;
   2664e:	461c      	mov	r4, r3
   26650:	e7f5      	b.n	2663e <uarte_nrfx_fifo_fill+0x64>

00026652 <uarte_nrfx_isr_int>:
{
   26652:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   26654:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   26656:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   26658:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2665c:	05c9      	lsls	r1, r1, #23
   2665e:	d518      	bpl.n	26692 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26660:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   26664:	b1a9      	cbz	r1, 26692 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   26666:	f04f 0420 	mov.w	r4, #32
   2666a:	f3ef 8111 	mrs	r1, BASEPRI
   2666e:	f384 8812 	msr	BASEPRI_MAX, r4
   26672:	f3bf 8f6f 	isb	sy
   26676:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2667a:	b134      	cbz	r4, 2668a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2667c:	2400      	movs	r4, #0
   2667e:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   26682:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26686:	2401      	movs	r4, #1
   26688:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   2668a:	f381 8811 	msr	BASEPRI, r1
   2668e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26692:	6852      	ldr	r2, [r2, #4]
   26694:	06d2      	lsls	r2, r2, #27
   26696:	d51a      	bpl.n	266ce <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   26698:	f04f 0220 	mov.w	r2, #32
   2669c:	f3ef 8111 	mrs	r1, BASEPRI
   266a0:	f382 8812 	msr	BASEPRI_MAX, r2
   266a4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   266a8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   266ac:	b112      	cbz	r2, 266b4 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   266ae:	2200      	movs	r2, #0
   266b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   266b4:	6902      	ldr	r2, [r0, #16]
   266b6:	68d2      	ldr	r2, [r2, #12]
   266b8:	b10a      	cbz	r2, 266be <uarte_nrfx_isr_int+0x6c>
   266ba:	6912      	ldr	r2, [r2, #16]
   266bc:	b91a      	cbnz	r2, 266c6 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   266be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   266c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   266c6:	f381 8811 	msr	BASEPRI, r1
   266ca:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   266ce:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   266d0:	68d4      	ldr	r4, [r2, #12]
   266d2:	b16c      	cbz	r4, 266f0 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   266d4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   266d8:	b161      	cbz	r1, 266f4 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
   266da:	2100      	movs	r1, #0
   266dc:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   266de:	68d4      	ldr	r4, [r2, #12]
   266e0:	7ba4      	ldrb	r4, [r4, #14]
   266e2:	b13c      	cbz	r4, 266f4 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
   266e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   266e8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   266ec:	68d3      	ldr	r3, [r2, #12]
   266ee:	7399      	strb	r1, [r3, #14]
}
   266f0:	bc10      	pop	{r4}
   266f2:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   266f4:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   266f8:	b121      	cbz	r1, 26704 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   266fa:	2100      	movs	r1, #0
   266fc:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   26700:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   26704:	68d2      	ldr	r2, [r2, #12]
   26706:	6813      	ldr	r3, [r2, #0]
   26708:	2b00      	cmp	r3, #0
   2670a:	d0f1      	beq.n	266f0 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2670c:	6851      	ldr	r1, [r2, #4]
}
   2670e:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   26710:	4718      	bx	r3

00026712 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   26712:	2000      	movs	r0, #0
   26714:	4770      	bx	lr

00026716 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   26716:	b538      	push	{r3, r4, r5, lr}
   26718:	460c      	mov	r4, r1
   2671a:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2671c:	f7e3 fb54 	bl	9dc8 <bt_is_ready>
   26720:	b128      	cbz	r0, 2672e <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   26722:	4629      	mov	r1, r5
   26724:	4620      	mov	r0, r4
}
   26726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2672a:	f7e2 ba2d 	b.w	8b88 <bt_hci_le_rand>
}
   2672e:	f06f 000a 	mvn.w	r0, #10
   26732:	bd38      	pop	{r3, r4, r5, pc}

00026734 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   26734:	4770      	bx	lr

00026736 <sys_clock_cycle_get_32>:
{
   26736:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   26738:	f7f7 faf2 	bl	1dd20 <z_nrf_rtc_timer_read>
}
   2673c:	bd08      	pop	{r3, pc}

0002673e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2673e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   26740:	6843      	ldr	r3, [r0, #4]
   26742:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   26744:	7a05      	ldrb	r5, [r0, #8]
   26746:	6844      	ldr	r4, [r0, #4]
   26748:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2674c:	42a3      	cmp	r3, r4
   2674e:	d302      	bcc.n	26756 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   26750:	f06f 0001 	mvn.w	r0, #1
}
   26754:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   26756:	795c      	ldrb	r4, [r3, #5]
   26758:	428c      	cmp	r4, r1
   2675a:	d001      	beq.n	26760 <pinctrl_lookup_state+0x22>
		(*state)++;
   2675c:	3308      	adds	r3, #8
   2675e:	e7f0      	b.n	26742 <pinctrl_lookup_state+0x4>
			return 0;
   26760:	2000      	movs	r0, #0
   26762:	e7f7      	b.n	26754 <pinctrl_lookup_state+0x16>

00026764 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   26764:	b5f0      	push	{r4, r5, r6, r7, lr}
   26766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2676a:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   2676c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   26770:	4281      	cmp	r1, r0
   26772:	d101      	bne.n	26778 <pinctrl_configure_pins+0x14>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   26774:	2000      	movs	r0, #0
}
   26776:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   26778:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2677a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2677e:	f3c5 2343 	ubfx	r3, r5, #9, #4
			pin = 0xFFFFFFFFU;
   26782:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   26784:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   26788:	bf08      	it	eq
   2678a:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   2678e:	2d0c      	cmp	r5, #12
   26790:	d841      	bhi.n	26816 <pinctrl_configure_pins+0xb2>
   26792:	e8df f005 	tbb	[pc, r5]
   26796:	1107      	.short	0x1107
   26798:	40401815 	.word	0x40401815
   2679c:	40404040 	.word	0x40404040
   267a0:	1b40      	.short	0x1b40
   267a2:	3d          	.byte	0x3d
   267a3:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   267a4:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   267a8:	f004 051f 	and.w	r5, r4, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   267ac:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   267b0:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
   267b4:	2501      	movs	r5, #1
   267b6:	e00f      	b.n	267d8 <pinctrl_configure_pins+0x74>
			NRF_PSEL_UART(reg, RXD) = pin;
   267b8:	f8c2 4514 	str.w	r4, [r2, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
   267bc:	2500      	movs	r5, #0
   267be:	e00b      	b.n	267d8 <pinctrl_configure_pins+0x74>
			NRF_PSEL_UART(reg, RTS) = pin;
   267c0:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   267c4:	e7f0      	b.n	267a8 <pinctrl_configure_pins+0x44>
			NRF_PSEL_UART(reg, CTS) = pin;
   267c6:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   267ca:	e7f7      	b.n	267bc <pinctrl_configure_pins+0x58>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   267cc:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   267d0:	2b00      	cmp	r3, #0
   267d2:	d1f3      	bne.n	267bc <pinctrl_configure_pins+0x58>
			dir = NRF_GPIO_PIN_DIR_INPUT;
   267d4:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
   267d6:	2306      	movs	r3, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   267d8:	f850 cb04 	ldr.w	ip, [r0], #4
   267dc:	f40c 5e00 	and.w	lr, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   267e0:	f1be 0f00 	cmp.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   267e4:	f3cc 1cc1 	ubfx	ip, ip, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   267e8:	ea4f 2303 	mov.w	r3, r3, lsl #8
   267ec:	bf18      	it	ne
   267ee:	2500      	movne	r5, #0
    *p_pin = pin_number & 0x1F;
   267f0:	f004 041f 	and.w	r4, r4, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   267f4:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
   267f8:	bf0c      	ite	eq
   267fa:	46ae      	moveq	lr, r5
   267fc:	f04f 0e01 	movne.w	lr, #1
   26800:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   26802:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   26806:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2680a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2680e:	e7af      	b.n	26770 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   26810:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   26814:	e7dc      	b.n	267d0 <pinctrl_configure_pins+0x6c>
		switch (NRF_GET_FUN(pins[i])) {
   26816:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2681a:	e7ac      	b.n	26776 <pinctrl_configure_pins+0x12>

0002681c <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   2681c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26820:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   26824:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   26826:	bf04      	itt	eq
   26828:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   2682c:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   26830:	1f83      	subs	r3, r0, #6
   26832:	4258      	negs	r0, r3
   26834:	4158      	adcs	r0, r3
   26836:	4770      	bx	lr

00026838 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   26838:	4700      	bx	r0

0002683a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2683a:	f000 bc98 	b.w	2716e <z_impl_k_busy_wait>

0002683e <nrfx_clock_enable>:
{
   2683e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   26840:	2000      	movs	r0, #0
   26842:	f7e0 fcc1 	bl	71c8 <arch_irq_is_enabled>
   26846:	b908      	cbnz	r0, 2684c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   26848:	f7e0 fc9c 	bl	7184 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2684c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26850:	2200      	movs	r2, #0
   26852:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   26856:	bd08      	pop	{r3, pc}

00026858 <nrfx_clock_stop>:
    clock_stop(domain);
   26858:	f7f7 bd88 	b.w	1e36c <clock_stop>

0002685c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   2685c:	f000 001f 	and.w	r0, r0, #31
   26860:	0080      	lsls	r0, r0, #2
   26862:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   26866:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   2686a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2686e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   26872:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   26876:	4770      	bx	lr

00026878 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   26878:	7b0a      	ldrb	r2, [r1, #12]
{
   2687a:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   2687c:	2a03      	cmp	r2, #3
   2687e:	d829      	bhi.n	268d4 <xfer_completeness_check+0x5c>
   26880:	e8df f002 	tbb	[pc, r2]
   26884:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   26888:	688a      	ldr	r2, [r1, #8]
   2688a:	0350      	lsls	r0, r2, #13
   2688c:	d504      	bpl.n	26898 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   2688e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   26892:	6908      	ldr	r0, [r1, #16]
   26894:	4290      	cmp	r0, r2
   26896:	d107      	bne.n	268a8 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   26898:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   2689a:	0352      	lsls	r2, r2, #13
   2689c:	d41a      	bmi.n	268d4 <xfer_completeness_check+0x5c>
   2689e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   268a2:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   268a4:	4291      	cmp	r1, r2
   268a6:	d015      	beq.n	268d4 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   268a8:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   268aa:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   268ac:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   268b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   268b4:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   268b6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   268ba:	6908      	ldr	r0, [r1, #16]
   268bc:	4290      	cmp	r0, r2
   268be:	d1f3      	bne.n	268a8 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   268c0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   268c4:	e7ed      	b.n	268a2 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   268c6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   268ca:	6909      	ldr	r1, [r1, #16]
   268cc:	e7ea      	b.n	268a4 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   268ce:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   268d2:	e7fa      	b.n	268ca <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   268d4:	2001      	movs	r0, #1
}
   268d6:	4770      	bx	lr

000268d8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   268d8:	f7f8 bc98 	b.w	1f20c <_DoInit>

000268dc <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   268dc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   268de:	f7ff fffb 	bl	268d8 <SEGGER_RTT_Init>

	return 0;
}
   268e2:	2000      	movs	r0, #0
   268e4:	bd08      	pop	{r3, pc}

000268e6 <z_device_state_init>:
}
   268e6:	4770      	bx	lr

000268e8 <z_device_is_ready>:
	if (dev == NULL) {
   268e8:	b140      	cbz	r0, 268fc <z_device_is_ready+0x14>
	return dev->state->initialized && (dev->state->init_res == 0U);
   268ea:	68c3      	ldr	r3, [r0, #12]
   268ec:	7858      	ldrb	r0, [r3, #1]
   268ee:	f010 0001 	ands.w	r0, r0, #1
   268f2:	bf1e      	ittt	ne
   268f4:	7818      	ldrbne	r0, [r3, #0]
   268f6:	fab0 f080 	clzne	r0, r0
   268fa:	0940      	lsrne	r0, r0, #5
}
   268fc:	4770      	bx	lr

000268fe <device_required_foreach>:

int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
   268fe:	b470      	push	{r4, r5, r6}
   26900:	6940      	ldr	r0, [r0, #20]
   26902:	460d      	mov	r5, r1
   26904:	4613      	mov	r3, r2
	if (rv != NULL) {
   26906:	b960      	cbnz	r0, 26922 <device_required_foreach+0x24>
	size_t handle_count = 0;
   26908:	4601      	mov	r1, r0
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);

	return device_visitor(handles, handle_count, visitor_cb, context);
   2690a:	462a      	mov	r2, r5
}
   2690c:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
   2690e:	f7f8 bd0f 	b.w	1f330 <device_visitor>
			++i;
   26912:	3101      	adds	r1, #1
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
   26914:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
   26918:	4434      	add	r4, r6
   2691a:	b2a4      	uxth	r4, r4
   2691c:	4294      	cmp	r4, r2
   2691e:	d9f8      	bls.n	26912 <device_required_foreach+0x14>
   26920:	e7f3      	b.n	2690a <device_required_foreach+0xc>
		size_t i = 0;
   26922:	2100      	movs	r1, #0
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
   26924:	f647 76ff 	movw	r6, #32767	; 0x7fff
   26928:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2692c:	e7f2      	b.n	26914 <device_required_foreach+0x16>

0002692e <arch_system_halt>:
	__asm__ volatile(
   2692e:	f04f 0220 	mov.w	r2, #32
   26932:	f3ef 8311 	mrs	r3, BASEPRI
   26936:	f382 8812 	msr	BASEPRI_MAX, r2
   2693a:	f3bf 8f6f 	isb	sy
	for (;;) {
   2693e:	e7fe      	b.n	2693e <arch_system_halt+0x10>

00026940 <z_early_memset>:
	(void) memset(dst, c, n);
   26940:	f7fd b96f 	b.w	23c22 <memset>

00026944 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   26944:	f7fd b962 	b.w	23c0c <memcpy>

00026948 <k_heap_init>:
{
   26948:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2694a:	f100 040c 	add.w	r4, r0, #12
   2694e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26952:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   26954:	f7fa bc81 	b.w	2125a <sys_heap_init>

00026958 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   26958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2695c:	b085      	sub	sp, #20
   2695e:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   26962:	4607      	mov	r7, r0
   26964:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   26966:	4650      	mov	r0, sl
   26968:	4621      	mov	r1, r4
{
   2696a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2696c:	f000 fc03 	bl	27176 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   26970:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   26974:	bf08      	it	eq
   26976:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2697a:	4605      	mov	r5, r0
   2697c:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2697e:	bf04      	itt	eq
   26980:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   26984:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   26988:	f107 0a14 	add.w	sl, r7, #20
   2698c:	f04f 0320 	mov.w	r3, #32
   26990:	f3ef 8411 	mrs	r4, BASEPRI
   26994:	f383 8812 	msr	BASEPRI_MAX, r3
   26998:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2699c:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   269a0:	464a      	mov	r2, r9
   269a2:	4641      	mov	r1, r8
   269a4:	4638      	mov	r0, r7
   269a6:	f7fa fbf1 	bl	2118c <sys_heap_aligned_alloc>
   269aa:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   269ac:	f7fa f8b0 	bl	20b10 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   269b0:	9b03      	ldr	r3, [sp, #12]
   269b2:	b13b      	cbz	r3, 269c4 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   269b4:	f384 8811 	msr	BASEPRI, r4
   269b8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   269bc:	4618      	mov	r0, r3
   269be:	b005      	add	sp, #20
   269c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   269c4:	1a28      	subs	r0, r5, r0
   269c6:	eb66 0101 	sbc.w	r1, r6, r1
   269ca:	2801      	cmp	r0, #1
   269cc:	f171 0200 	sbcs.w	r2, r1, #0
   269d0:	dbf0      	blt.n	269b4 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   269d2:	e9cd 0100 	strd	r0, r1, [sp]
   269d6:	465a      	mov	r2, fp
   269d8:	4621      	mov	r1, r4
   269da:	4650      	mov	r0, sl
   269dc:	f7f9 fd2c 	bl	20438 <z_pend_curr>
	__asm__ volatile(
   269e0:	f04f 0320 	mov.w	r3, #32
   269e4:	f3ef 8411 	mrs	r4, BASEPRI
   269e8:	f383 8812 	msr	BASEPRI_MAX, r3
   269ec:	f3bf 8f6f 	isb	sy
	return k;
   269f0:	e7d6      	b.n	269a0 <k_heap_aligned_alloc+0x48>

000269f2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   269f2:	b538      	push	{r3, r4, r5, lr}
   269f4:	4604      	mov	r4, r0
   269f6:	f04f 0320 	mov.w	r3, #32
   269fa:	f3ef 8511 	mrs	r5, BASEPRI
   269fe:	f383 8812 	msr	BASEPRI_MAX, r3
   26a02:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   26a06:	f7fa fb89 	bl	2111c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   26a0a:	f104 000c 	add.w	r0, r4, #12
   26a0e:	f000 fb32 	bl	27076 <z_unpend_all>
   26a12:	b130      	cbz	r0, 26a22 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   26a14:	4629      	mov	r1, r5
   26a16:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   26a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   26a1e:	f7f9 bd6f 	b.w	20500 <z_reschedule>
	__asm__ volatile(
   26a22:	f385 8811 	msr	BASEPRI, r5
   26a26:	f3bf 8f6f 	isb	sy
}
   26a2a:	bd38      	pop	{r3, r4, r5, pc}

00026a2c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26a2c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   26a30:	4313      	orrs	r3, r2
   26a32:	f013 0303 	ands.w	r3, r3, #3
   26a36:	d10c      	bne.n	26a52 <create_free_list+0x26>
	slab->free_list = NULL;
   26a38:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26a3a:	6881      	ldr	r1, [r0, #8]
   26a3c:	4299      	cmp	r1, r3
   26a3e:	d801      	bhi.n	26a44 <create_free_list+0x18>
	return 0;
   26a40:	2000      	movs	r0, #0
   26a42:	4770      	bx	lr
		*(char **)p = slab->free_list;
   26a44:	6941      	ldr	r1, [r0, #20]
   26a46:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   26a48:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   26a4a:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26a4c:	3301      	adds	r3, #1
		p += slab->block_size;
   26a4e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   26a50:	e7f3      	b.n	26a3a <create_free_list+0xe>
		return -EINVAL;
   26a52:	f06f 0015 	mvn.w	r0, #21
}
   26a56:	4770      	bx	lr

00026a58 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   26a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a5a:	4604      	mov	r4, r0
   26a5c:	460d      	mov	r5, r1
	__asm__ volatile(
   26a5e:	f04f 0320 	mov.w	r3, #32
   26a62:	f3ef 8611 	mrs	r6, BASEPRI
   26a66:	f383 8812 	msr	BASEPRI_MAX, r3
   26a6a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   26a6e:	6947      	ldr	r7, [r0, #20]
   26a70:	b97f      	cbnz	r7, 26a92 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   26a72:	f000 faba 	bl	26fea <z_unpend_first_thread>

		if (pending_thread != NULL) {
   26a76:	b160      	cbz	r0, 26a92 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   26a78:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   26a7a:	6142      	str	r2, [r0, #20]
   26a7c:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
   26a80:	f000 fa7c 	bl	26f7c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   26a84:	4631      	mov	r1, r6
   26a86:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   26a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   26a8e:	f7f9 bd37 	b.w	20500 <z_reschedule>
	**(char ***) mem = slab->free_list;
   26a92:	682b      	ldr	r3, [r5, #0]
   26a94:	6962      	ldr	r2, [r4, #20]
   26a96:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   26a98:	682b      	ldr	r3, [r5, #0]
   26a9a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   26a9c:	69a3      	ldr	r3, [r4, #24]
   26a9e:	3b01      	subs	r3, #1
   26aa0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   26aa2:	f386 8811 	msr	BASEPRI, r6
   26aa6:	f3bf 8f6f 	isb	sy
}
   26aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026aac <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26aac:	f3ef 8005 	mrs	r0, IPSR
}
   26ab0:	3800      	subs	r0, #0
   26ab2:	bf18      	it	ne
   26ab4:	2001      	movne	r0, #1
   26ab6:	4770      	bx	lr

00026ab8 <k_thread_name_get>:
}
   26ab8:	3078      	adds	r0, #120	; 0x78
   26aba:	4770      	bx	lr

00026abc <z_impl_k_thread_start>:
	z_sched_start(thread);
   26abc:	f7f9 bd32 	b.w	20524 <z_sched_start>

00026ac0 <z_stack_space_get>:
#ifdef CONFIG_STACK_GROWS_UP
#error "Unsupported configuration for stack analysis"
#endif

int z_stack_space_get(const uint8_t *stack_start, size_t size, size_t *unused_ptr)
{
   26ac0:	b510      	push	{r4, lr}
	size_t unused = 0;
   26ac2:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   26ac4:	428b      	cmp	r3, r1
   26ac6:	d102      	bne.n	26ace <z_stack_space_get+0xe>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
   26ac8:	6013      	str	r3, [r2, #0]

	return 0;
}
   26aca:	2000      	movs	r0, #0
   26acc:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   26ace:	5cc4      	ldrb	r4, [r0, r3]
   26ad0:	2caa      	cmp	r4, #170	; 0xaa
   26ad2:	d1f9      	bne.n	26ac8 <z_stack_space_get+0x8>
			unused++;
   26ad4:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   26ad6:	e7f5      	b.n	26ac4 <z_stack_space_get+0x4>

00026ad8 <z_impl_k_thread_stack_space_get>:

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
   26ad8:	460a      	mov	r2, r1
	return z_stack_space_get((const uint8_t *)thread->stack_info.start,
   26ada:	e9d0 0127 	ldrd	r0, r1, [r0, #156]	; 0x9c
   26ade:	f7ff bfef 	b.w	26ac0 <z_stack_space_get>

00026ae2 <z_pm_save_idle_exit>:
{
   26ae2:	b508      	push	{r3, lr}
	pm_system_resume();
   26ae4:	f7e0 f94c 	bl	6d80 <pm_system_resume>
}
   26ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   26aec:	f7ff be22 	b.w	26734 <sys_clock_idle_exit>

00026af0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   26af0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   26af4:	428b      	cmp	r3, r1
   26af6:	d001      	beq.n	26afc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   26af8:	f7f9 bcbc 	b.w	20474 <z_set_prio>
}
   26afc:	2000      	movs	r0, #0
   26afe:	4770      	bx	lr

00026b00 <z_impl_k_mutex_init>:
{
   26b00:	4603      	mov	r3, r0
	mutex->owner = NULL;
   26b02:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   26b04:	e9c3 0002 	strd	r0, r0, [r3, #8]
   26b08:	e9c3 3300 	strd	r3, r3, [r3]
}
   26b0c:	4770      	bx	lr

00026b0e <queue_insert>:
{
   26b0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26b12:	4699      	mov	r9, r3
   26b14:	4604      	mov	r4, r0
   26b16:	f89d 3020 	ldrb.w	r3, [sp, #32]
   26b1a:	460d      	mov	r5, r1
   26b1c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26b1e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26b22:	f04f 0220 	mov.w	r2, #32
   26b26:	f3ef 8711 	mrs	r7, BASEPRI
   26b2a:	f382 8812 	msr	BASEPRI_MAX, r2
   26b2e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   26b32:	b103      	cbz	r3, 26b36 <queue_insert+0x28>
	return list->tail;
   26b34:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26b36:	4630      	mov	r0, r6
   26b38:	f000 fa57 	bl	26fea <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   26b3c:	b160      	cbz	r0, 26b58 <queue_insert+0x4a>
   26b3e:	2300      	movs	r3, #0
   26b40:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
   26b44:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   26b48:	f000 fa18 	bl	26f7c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   26b4c:	4630      	mov	r0, r6
   26b4e:	4639      	mov	r1, r7
   26b50:	f7f9 fcd6 	bl	20500 <z_reschedule>
		return 0;
   26b54:	2000      	movs	r0, #0
   26b56:	e00c      	b.n	26b72 <queue_insert+0x64>
	if (alloc) {
   26b58:	f1b9 0f00 	cmp.w	r9, #0
   26b5c:	d01b      	beq.n	26b96 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   26b5e:	2108      	movs	r1, #8
   26b60:	f7fa f92a 	bl	20db8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   26b64:	b938      	cbnz	r0, 26b76 <queue_insert+0x68>
	__asm__ volatile(
   26b66:	f387 8811 	msr	BASEPRI, r7
   26b6a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   26b6e:	f06f 000b 	mvn.w	r0, #11
}
   26b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   26b76:	2201      	movs	r2, #1
		anode->data = data;
   26b78:	f8c0 8004 	str.w	r8, [r0, #4]
   26b7c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26b7e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26b80:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   26b84:	b95d      	cbnz	r5, 26b9e <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26b86:	6822      	ldr	r2, [r4, #0]
   26b88:	430a      	orrs	r2, r1
   26b8a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26b8c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   26b8e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26b90:	b96a      	cbnz	r2, 26bae <queue_insert+0xa0>
	list->tail = node;
   26b92:	6060      	str	r0, [r4, #4]
}
   26b94:	e00b      	b.n	26bae <queue_insert+0xa0>
	node->next_and_flags = flags;
   26b96:	f8c8 9000 	str.w	r9, [r8]
}
   26b9a:	4640      	mov	r0, r8
   26b9c:	e7ef      	b.n	26b7e <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26b9e:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   26ba0:	2a03      	cmp	r2, #3
   26ba2:	d810      	bhi.n	26bc6 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26ba4:	6001      	str	r1, [r0, #0]
	return list->tail;
   26ba6:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   26ba8:	b939      	cbnz	r1, 26bba <queue_insert+0xac>
	list->head = node;
   26baa:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   26bae:	2104      	movs	r1, #4
   26bb0:	f104 0010 	add.w	r0, r4, #16
   26bb4:	f000 fc6a 	bl	2748c <z_handle_obj_poll_events>
   26bb8:	e7c8      	b.n	26b4c <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26bba:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26bbc:	f002 0203 	and.w	r2, r2, #3
   26bc0:	4302      	orrs	r2, r0
   26bc2:	600a      	str	r2, [r1, #0]
   26bc4:	e7e5      	b.n	26b92 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26bc6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   26bca:	430a      	orrs	r2, r1
   26bcc:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26bce:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26bd0:	f002 0203 	and.w	r2, r2, #3
   26bd4:	ea40 0302 	orr.w	r3, r0, r2
   26bd8:	602b      	str	r3, [r5, #0]
}
   26bda:	e7e8      	b.n	26bae <queue_insert+0xa0>

00026bdc <z_queue_node_peek>:
{
   26bdc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   26bde:	4604      	mov	r4, r0
   26be0:	b130      	cbz	r0, 26bf0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26be2:	6802      	ldr	r2, [r0, #0]
   26be4:	0793      	lsls	r3, r2, #30
   26be6:	d003      	beq.n	26bf0 <z_queue_node_peek+0x14>
		ret = anode->data;
   26be8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26bea:	b109      	cbz	r1, 26bf0 <z_queue_node_peek+0x14>
			k_free(anode);
   26bec:	f000 fc69 	bl	274c2 <k_free>
}
   26bf0:	4620      	mov	r0, r4
   26bf2:	bd10      	pop	{r4, pc}

00026bf4 <z_impl_k_queue_init>:
	list->head = NULL;
   26bf4:	2300      	movs	r3, #0
	list->tail = NULL;
   26bf6:	e9c0 3300 	strd	r3, r3, [r0]
   26bfa:	f100 0308 	add.w	r3, r0, #8
   26bfe:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   26c02:	f100 0310 	add.w	r3, r0, #16
   26c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   26c0a:	4770      	bx	lr

00026c0c <z_impl_k_queue_cancel_wait>:
{
   26c0c:	b570      	push	{r4, r5, r6, lr}
   26c0e:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26c10:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   26c14:	f04f 0320 	mov.w	r3, #32
   26c18:	f3ef 8611 	mrs	r6, BASEPRI
   26c1c:	f383 8812 	msr	BASEPRI_MAX, r3
   26c20:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26c24:	4628      	mov	r0, r5
   26c26:	f000 f9e0 	bl	26fea <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   26c2a:	b128      	cbz	r0, 26c38 <z_impl_k_queue_cancel_wait+0x2c>
   26c2c:	2200      	movs	r2, #0
   26c2e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   26c32:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   26c34:	f000 f9a2 	bl	26f7c <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   26c38:	f104 0010 	add.w	r0, r4, #16
   26c3c:	2108      	movs	r1, #8
   26c3e:	f000 fc25 	bl	2748c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   26c42:	4631      	mov	r1, r6
   26c44:	4628      	mov	r0, r5
}
   26c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   26c4a:	f7f9 bc59 	b.w	20500 <z_reschedule>

00026c4e <k_queue_append>:
{
   26c4e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   26c50:	2301      	movs	r3, #1
   26c52:	9300      	str	r3, [sp, #0]
   26c54:	2300      	movs	r3, #0
{
   26c56:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26c58:	4619      	mov	r1, r3
   26c5a:	f7ff ff58 	bl	26b0e <queue_insert>
}
   26c5e:	b003      	add	sp, #12
   26c60:	f85d fb04 	ldr.w	pc, [sp], #4

00026c64 <k_queue_prepend>:
{
   26c64:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26c66:	2300      	movs	r3, #0
{
   26c68:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26c6a:	9300      	str	r3, [sp, #0]
   26c6c:	4619      	mov	r1, r3
   26c6e:	f7ff ff4e 	bl	26b0e <queue_insert>
}
   26c72:	b003      	add	sp, #12
   26c74:	f85d fb04 	ldr.w	pc, [sp], #4

00026c78 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   26c78:	6800      	ldr	r0, [r0, #0]
   26c7a:	2100      	movs	r1, #0
   26c7c:	f7ff bfae 	b.w	26bdc <z_queue_node_peek>

00026c80 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   26c80:	b15a      	cbz	r2, 26c9a <z_impl_k_sem_init+0x1a>
   26c82:	428a      	cmp	r2, r1
   26c84:	d309      	bcc.n	26c9a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   26c86:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   26c8a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   26c8e:	e9c0 0000 	strd	r0, r0, [r0]
   26c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   26c96:	2000      	movs	r0, #0
   26c98:	4770      	bx	lr
		return -EINVAL;
   26c9a:	f06f 0015 	mvn.w	r0, #21
}
   26c9e:	4770      	bx	lr

00026ca0 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   26ca0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   26ca2:	2301      	movs	r3, #1
   26ca4:	408b      	lsls	r3, r1
   26ca6:	ea22 0303 	bic.w	r3, r2, r3
   26caa:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   26cac:	fa22 f001 	lsr.w	r0, r2, r1
}
   26cb0:	f000 0001 	and.w	r0, r0, #1
   26cb4:	4770      	bx	lr

00026cb6 <unschedule_locked>:
{
   26cb6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26cb8:	2103      	movs	r1, #3
{
   26cba:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26cbc:	300c      	adds	r0, #12
   26cbe:	f7ff ffef 	bl	26ca0 <flag_test_and_clear>
   26cc2:	4604      	mov	r4, r0
   26cc4:	b118      	cbz	r0, 26cce <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   26cc6:	f105 0010 	add.w	r0, r5, #16
   26cca:	f000 fa08 	bl	270de <z_abort_timeout>
}
   26cce:	4620      	mov	r0, r4
   26cd0:	bd38      	pop	{r3, r4, r5, pc}

00026cd2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   26cd2:	b120      	cbz	r0, 26cde <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   26cd4:	2200      	movs	r2, #0
   26cd6:	4611      	mov	r1, r2
   26cd8:	30c0      	adds	r0, #192	; 0xc0
   26cda:	f000 b9dc 	b.w	27096 <z_sched_wake>
}
   26cde:	4770      	bx	lr

00026ce0 <cancel_async_locked>:
{
   26ce0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   26ce2:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26ce4:	f3c3 0640 	ubfx	r6, r3, #1, #1
   26ce8:	079b      	lsls	r3, r3, #30
{
   26cea:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26cec:	d416      	bmi.n	26d1c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   26cee:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   26cf0:	2102      	movs	r1, #2
   26cf2:	300c      	adds	r0, #12
   26cf4:	f7ff ffd4 	bl	26ca0 <flag_test_and_clear>
   26cf8:	b180      	cbz	r0, 26d1c <cancel_async_locked+0x3c>
	return list->head;
   26cfa:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26cfe:	b16a      	cbz	r2, 26d1c <cancel_async_locked+0x3c>
   26d00:	4294      	cmp	r4, r2
   26d02:	d11d      	bne.n	26d40 <cancel_async_locked+0x60>
	return node->next;
   26d04:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26d06:	b99e      	cbnz	r6, 26d30 <cancel_async_locked+0x50>
   26d08:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
	list->head = node;
   26d0c:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
   26d10:	429c      	cmp	r4, r3
   26d12:	d101      	bne.n	26d18 <cancel_async_locked+0x38>
	list->tail = node;
   26d14:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
	parent->next = child;
   26d18:	2300      	movs	r3, #0
   26d1a:	6023      	str	r3, [r4, #0]
	return *flagp;
   26d1c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   26d1e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   26d22:	bf1e      	ittt	ne
   26d24:	f043 0302 	orrne.w	r3, r3, #2
   26d28:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   26d2a:	f040 0002 	orrne.w	r0, r0, #2
}
   26d2e:	bd70      	pop	{r4, r5, r6, pc}
   26d30:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   26d32:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
   26d36:	4294      	cmp	r4, r2
	list->tail = node;
   26d38:	bf08      	it	eq
   26d3a:	f8c5 60bc 	streq.w	r6, [r5, #188]	; 0xbc
}
   26d3e:	e7eb      	b.n	26d18 <cancel_async_locked+0x38>
	return node->next;
   26d40:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26d42:	6812      	ldr	r2, [r2, #0]
   26d44:	e7db      	b.n	26cfe <cancel_async_locked+0x1e>

00026d46 <work_timeout>:
{
   26d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26d48:	4604      	mov	r4, r0
   26d4a:	f04f 0320 	mov.w	r3, #32
   26d4e:	f3ef 8511 	mrs	r5, BASEPRI
   26d52:	f383 8812 	msr	BASEPRI_MAX, r3
   26d56:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   26d5a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26d5c:	f1a0 0610 	sub.w	r6, r0, #16
   26d60:	2103      	movs	r1, #3
   26d62:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   26d64:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26d66:	f7ff ff9b 	bl	26ca0 <flag_test_and_clear>
   26d6a:	b128      	cbz	r0, 26d78 <work_timeout+0x32>
		queue = dw->queue;
   26d6c:	69a3      	ldr	r3, [r4, #24]
   26d6e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   26d70:	a901      	add	r1, sp, #4
   26d72:	4630      	mov	r0, r6
   26d74:	f7f9 f920 	bl	1ffb8 <submit_to_queue_locked>
	__asm__ volatile(
   26d78:	f385 8811 	msr	BASEPRI, r5
   26d7c:	f3bf 8f6f 	isb	sy
}
   26d80:	b002      	add	sp, #8
   26d82:	bd70      	pop	{r4, r5, r6, pc}

00026d84 <k_work_init>:
{
   26d84:	b538      	push	{r3, r4, r5, lr}
   26d86:	4604      	mov	r4, r0
   26d88:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   26d8a:	2210      	movs	r2, #16
   26d8c:	2100      	movs	r1, #0
   26d8e:	f7fc ff48 	bl	23c22 <memset>
   26d92:	6065      	str	r5, [r4, #4]
}
   26d94:	bd38      	pop	{r3, r4, r5, pc}

00026d96 <k_work_busy_get>:
	__asm__ volatile(
   26d96:	f04f 0220 	mov.w	r2, #32
   26d9a:	f3ef 8311 	mrs	r3, BASEPRI
   26d9e:	f382 8812 	msr	BASEPRI_MAX, r2
   26da2:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   26da6:	68c0      	ldr	r0, [r0, #12]
   26da8:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   26dac:	f383 8811 	msr	BASEPRI, r3
   26db0:	f3bf 8f6f 	isb	sy
}
   26db4:	4770      	bx	lr

00026db6 <z_work_submit_to_queue>:
{
   26db6:	b513      	push	{r0, r1, r4, lr}
   26db8:	9001      	str	r0, [sp, #4]
   26dba:	4608      	mov	r0, r1
	__asm__ volatile(
   26dbc:	f04f 0320 	mov.w	r3, #32
   26dc0:	f3ef 8411 	mrs	r4, BASEPRI
   26dc4:	f383 8812 	msr	BASEPRI_MAX, r3
   26dc8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   26dcc:	a901      	add	r1, sp, #4
   26dce:	f7f9 f8f3 	bl	1ffb8 <submit_to_queue_locked>
	__asm__ volatile(
   26dd2:	f384 8811 	msr	BASEPRI, r4
   26dd6:	f3bf 8f6f 	isb	sy
}
   26dda:	b002      	add	sp, #8
   26ddc:	bd10      	pop	{r4, pc}

00026dde <k_work_submit_to_queue>:
{
   26dde:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   26de0:	f7ff ffe9 	bl	26db6 <z_work_submit_to_queue>
	if (ret > 0) {
   26de4:	1e04      	subs	r4, r0, #0
   26de6:	dd09      	ble.n	26dfc <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   26de8:	f04f 0320 	mov.w	r3, #32
   26dec:	f3ef 8011 	mrs	r0, BASEPRI
   26df0:	f383 8812 	msr	BASEPRI_MAX, r3
   26df4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26df8:	f000 f927 	bl	2704a <z_reschedule_irqlock>
}
   26dfc:	4620      	mov	r0, r4
   26dfe:	bd10      	pop	{r4, pc}

00026e00 <k_work_queue_init>:
{
   26e00:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   26e02:	22d8      	movs	r2, #216	; 0xd8
   26e04:	2100      	movs	r1, #0
   26e06:	f7fc ff0c 	bl	23c22 <memset>
}
   26e0a:	bd08      	pop	{r3, pc}

00026e0c <k_work_init_delayable>:
{
   26e0c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   26e0e:	2230      	movs	r2, #48	; 0x30
{
   26e10:	4604      	mov	r4, r0
   26e12:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   26e14:	2100      	movs	r1, #0
   26e16:	f7fc ff04 	bl	23c22 <memset>
   26e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
   26e1e:	6065      	str	r5, [r4, #4]
   26e20:	60e3      	str	r3, [r4, #12]
}
   26e22:	bd38      	pop	{r3, r4, r5, pc}

00026e24 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   26e24:	f7ff bfb7 	b.w	26d96 <k_work_busy_get>

00026e28 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   26e28:	b538      	push	{r3, r4, r5, lr}
   26e2a:	4604      	mov	r4, r0
   26e2c:	f04f 0320 	mov.w	r3, #32
   26e30:	f3ef 8511 	mrs	r5, BASEPRI
   26e34:	f383 8812 	msr	BASEPRI_MAX, r3
   26e38:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   26e3c:	f7ff ff3b 	bl	26cb6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26e40:	4620      	mov	r0, r4
   26e42:	f7ff ff4d 	bl	26ce0 <cancel_async_locked>
	__asm__ volatile(
   26e46:	f385 8811 	msr	BASEPRI, r5
   26e4a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   26e4e:	bd38      	pop	{r3, r4, r5, pc}

00026e50 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   26e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e52:	4604      	mov	r4, r0
   26e54:	460d      	mov	r5, r1
	__asm__ volatile(
   26e56:	f04f 0320 	mov.w	r3, #32
   26e5a:	f3ef 8611 	mrs	r6, BASEPRI
   26e5e:	f383 8812 	msr	BASEPRI_MAX, r3
   26e62:	f3bf 8f6f 	isb	sy
	return *flagp;
   26e66:	68c3      	ldr	r3, [r0, #12]
   26e68:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   26e6c:	2b00      	cmp	r3, #0
   26e6e:	bf14      	ite	ne
   26e70:	2701      	movne	r7, #1
   26e72:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   26e74:	d105      	bne.n	26e82 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   26e76:	f386 8811 	msr	BASEPRI, r6
   26e7a:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   26e7e:	4638      	mov	r0, r7
   26e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   26e82:	f7ff ff18 	bl	26cb6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26e86:	4620      	mov	r0, r4
   26e88:	f7ff ff2a 	bl	26ce0 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   26e8c:	4629      	mov	r1, r5
   26e8e:	4620      	mov	r0, r4
   26e90:	f7f9 f874 	bl	1ff7c <cancel_sync_locked>
   26e94:	f386 8811 	msr	BASEPRI, r6
   26e98:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   26e9c:	2800      	cmp	r0, #0
   26e9e:	d0ee      	beq.n	26e7e <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   26ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26ea8:	f105 0008 	add.w	r0, r5, #8
   26eac:	f7f8 ff64 	bl	1fd78 <z_impl_k_sem_take>
   26eb0:	e7e5      	b.n	26e7e <k_work_cancel_delayable_sync+0x2e>

00026eb2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   26eb2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26eb6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26eb8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26eba:	2300      	movs	r3, #0
	node->prev = NULL;
   26ebc:	e9c0 3300 	strd	r3, r3, [r0]
}
   26ec0:	4770      	bx	lr

00026ec2 <unpend_thread_no_timeout>:
{
   26ec2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   26ec4:	f7ff fff5 	bl	26eb2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26ec8:	7b43      	ldrb	r3, [r0, #13]
   26eca:	f023 0302 	bic.w	r3, r3, #2
   26ece:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   26ed0:	2300      	movs	r3, #0
   26ed2:	6083      	str	r3, [r0, #8]
}
   26ed4:	bd08      	pop	{r3, pc}

00026ed6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   26ed6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   26eda:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   26ede:	4283      	cmp	r3, r0
		return b2 - b1;
   26ee0:	bf14      	ite	ne
   26ee2:	1ac0      	subne	r0, r0, r3
	return 0;
   26ee4:	2000      	moveq	r0, #0
}
   26ee6:	4770      	bx	lr

00026ee8 <z_thread_timeout>:
{
   26ee8:	b510      	push	{r4, lr}
   26eea:	4601      	mov	r1, r0
	__asm__ volatile(
   26eec:	f04f 0320 	mov.w	r3, #32
   26ef0:	f3ef 8411 	mrs	r4, BASEPRI
   26ef4:	f383 8812 	msr	BASEPRI_MAX, r3
   26ef8:	f3bf 8f6f 	isb	sy
		if (!killed) {
   26efc:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   26f00:	f013 0f28 	tst.w	r3, #40	; 0x28
   26f04:	d10d      	bne.n	26f22 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   26f06:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   26f0a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   26f0c:	b10b      	cbz	r3, 26f12 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   26f0e:	f7ff ffd8 	bl	26ec2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26f12:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   26f16:	f023 0314 	bic.w	r3, r3, #20
   26f1a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   26f1e:	f7f9 f9b3 	bl	20288 <ready_thread>
	__asm__ volatile(
   26f22:	f384 8811 	msr	BASEPRI, r4
   26f26:	f3bf 8f6f 	isb	sy
}
   26f2a:	bd10      	pop	{r4, pc}

00026f2c <add_to_waitq_locked>:
{
   26f2c:	b538      	push	{r3, r4, r5, lr}
   26f2e:	4604      	mov	r4, r0
   26f30:	460d      	mov	r5, r1
	unready_thread(thread);
   26f32:	f7f9 f9dd 	bl	202f0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26f36:	7b63      	ldrb	r3, [r4, #13]
   26f38:	f043 0302 	orr.w	r3, r3, #2
   26f3c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26f3e:	b1e5      	cbz	r5, 26f7a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   26f40:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   26f42:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f44:	429d      	cmp	r5, r3
   26f46:	d109      	bne.n	26f5c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   26f48:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   26f4a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   26f4e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26f50:	606c      	str	r4, [r5, #4]
}
   26f52:	e012      	b.n	26f7a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   26f54:	686a      	ldr	r2, [r5, #4]
   26f56:	4293      	cmp	r3, r2
   26f58:	d0f6      	beq.n	26f48 <add_to_waitq_locked+0x1c>
   26f5a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26f5c:	2b00      	cmp	r3, #0
   26f5e:	d0f3      	beq.n	26f48 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   26f60:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26f64:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   26f68:	428a      	cmp	r2, r1
   26f6a:	d0f3      	beq.n	26f54 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26f6c:	4291      	cmp	r1, r2
   26f6e:	ddf1      	ble.n	26f54 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   26f70:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26f72:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26f76:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26f78:	605c      	str	r4, [r3, #4]
}
   26f7a:	bd38      	pop	{r3, r4, r5, pc}

00026f7c <z_ready_thread>:
{
   26f7c:	b510      	push	{r4, lr}
	__asm__ volatile(
   26f7e:	f04f 0320 	mov.w	r3, #32
   26f82:	f3ef 8411 	mrs	r4, BASEPRI
   26f86:	f383 8812 	msr	BASEPRI_MAX, r3
   26f8a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   26f8e:	f7f9 f97b 	bl	20288 <ready_thread>
	__asm__ volatile(
   26f92:	f384 8811 	msr	BASEPRI, r4
   26f96:	f3bf 8f6f 	isb	sy
}
   26f9a:	bd10      	pop	{r4, pc}

00026f9c <z_unpend_thread_no_timeout>:
{
   26f9c:	b508      	push	{r3, lr}
	__asm__ volatile(
   26f9e:	f04f 0320 	mov.w	r3, #32
   26fa2:	f3ef 8111 	mrs	r1, BASEPRI
   26fa6:	f383 8812 	msr	BASEPRI_MAX, r3
   26faa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26fae:	f7ff ff88 	bl	26ec2 <unpend_thread_no_timeout>
	__asm__ volatile(
   26fb2:	f381 8811 	msr	BASEPRI, r1
   26fb6:	f3bf 8f6f 	isb	sy
}
   26fba:	bd08      	pop	{r3, pc}

00026fbc <z_unpend1_no_timeout>:
{
   26fbc:	b508      	push	{r3, lr}
   26fbe:	4603      	mov	r3, r0
	__asm__ volatile(
   26fc0:	f04f 0220 	mov.w	r2, #32
   26fc4:	f3ef 8111 	mrs	r1, BASEPRI
   26fc8:	f382 8812 	msr	BASEPRI_MAX, r2
   26fcc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26fd0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26fd2:	4283      	cmp	r3, r0
   26fd4:	d007      	beq.n	26fe6 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   26fd6:	b108      	cbz	r0, 26fdc <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   26fd8:	f7ff ff73 	bl	26ec2 <unpend_thread_no_timeout>
	__asm__ volatile(
   26fdc:	f381 8811 	msr	BASEPRI, r1
   26fe0:	f3bf 8f6f 	isb	sy
}
   26fe4:	bd08      	pop	{r3, pc}
   26fe6:	2000      	movs	r0, #0
   26fe8:	e7f8      	b.n	26fdc <z_unpend1_no_timeout+0x20>

00026fea <z_unpend_first_thread>:
{
   26fea:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26fec:	f04f 0320 	mov.w	r3, #32
   26ff0:	f3ef 8511 	mrs	r5, BASEPRI
   26ff4:	f383 8812 	msr	BASEPRI_MAX, r3
   26ff8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26ffc:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26ffe:	42a0      	cmp	r0, r4
   27000:	d00d      	beq.n	2701e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   27002:	b134      	cbz	r4, 27012 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   27004:	4620      	mov	r0, r4
   27006:	f7ff ff5c 	bl	26ec2 <unpend_thread_no_timeout>
   2700a:	f104 0018 	add.w	r0, r4, #24
   2700e:	f000 f866 	bl	270de <z_abort_timeout>
	__asm__ volatile(
   27012:	f385 8811 	msr	BASEPRI, r5
   27016:	f3bf 8f6f 	isb	sy
}
   2701a:	4620      	mov	r0, r4
   2701c:	bd38      	pop	{r3, r4, r5, pc}
   2701e:	2400      	movs	r4, #0
   27020:	e7f7      	b.n	27012 <z_unpend_first_thread+0x28>

00027022 <z_unpend_thread>:
{
   27022:	b510      	push	{r4, lr}
	__asm__ volatile(
   27024:	f04f 0320 	mov.w	r3, #32
   27028:	f3ef 8411 	mrs	r4, BASEPRI
   2702c:	f383 8812 	msr	BASEPRI_MAX, r3
   27030:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   27034:	f7ff ff45 	bl	26ec2 <unpend_thread_no_timeout>
	__asm__ volatile(
   27038:	f384 8811 	msr	BASEPRI, r4
   2703c:	f3bf 8f6f 	isb	sy
}
   27040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27044:	3018      	adds	r0, #24
   27046:	f000 b84a 	b.w	270de <z_abort_timeout>

0002704a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2704a:	4603      	mov	r3, r0
   2704c:	b920      	cbnz	r0, 27058 <z_reschedule_irqlock+0xe>
   2704e:	f3ef 8205 	mrs	r2, IPSR
   27052:	b90a      	cbnz	r2, 27058 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   27054:	f7e0 b914 	b.w	7280 <arch_swap>
   27058:	f383 8811 	msr	BASEPRI, r3
   2705c:	f3bf 8f6f 	isb	sy
}
   27060:	4770      	bx	lr

00027062 <z_reschedule_unlocked>:
	__asm__ volatile(
   27062:	f04f 0320 	mov.w	r3, #32
   27066:	f3ef 8011 	mrs	r0, BASEPRI
   2706a:	f383 8812 	msr	BASEPRI_MAX, r3
   2706e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   27072:	f7ff bfea 	b.w	2704a <z_reschedule_irqlock>

00027076 <z_unpend_all>:
{
   27076:	b538      	push	{r3, r4, r5, lr}
   27078:	4605      	mov	r5, r0
	int need_sched = 0;
   2707a:	2000      	movs	r0, #0
	return list->head == list;
   2707c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2707e:	42a5      	cmp	r5, r4
   27080:	d000      	beq.n	27084 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   27082:	b904      	cbnz	r4, 27086 <z_unpend_all+0x10>
}
   27084:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   27086:	4620      	mov	r0, r4
   27088:	f7ff ffcb 	bl	27022 <z_unpend_thread>
		z_ready_thread(thread);
   2708c:	4620      	mov	r0, r4
   2708e:	f7ff ff75 	bl	26f7c <z_ready_thread>
		need_sched = 1;
   27092:	2001      	movs	r0, #1
   27094:	e7f2      	b.n	2707c <z_unpend_all+0x6>

00027096 <z_sched_wake>:
{
   27096:	b538      	push	{r3, r4, r5, lr}
   27098:	f04f 0320 	mov.w	r3, #32
   2709c:	f3ef 8511 	mrs	r5, BASEPRI
   270a0:	f383 8812 	msr	BASEPRI_MAX, r3
   270a4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   270a8:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   270aa:	42a0      	cmp	r0, r4
   270ac:	d013      	beq.n	270d6 <z_sched_wake+0x40>
		if (thread != NULL) {
   270ae:	b1a4      	cbz	r4, 270da <z_sched_wake+0x44>
   270b0:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
   270b4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   270b6:	4620      	mov	r0, r4
   270b8:	f7ff ff03 	bl	26ec2 <unpend_thread_no_timeout>
   270bc:	f104 0018 	add.w	r0, r4, #24
   270c0:	f000 f80d 	bl	270de <z_abort_timeout>
			ready_thread(thread);
   270c4:	4620      	mov	r0, r4
   270c6:	f7f9 f8df 	bl	20288 <ready_thread>
			ret = true;
   270ca:	2001      	movs	r0, #1
	__asm__ volatile(
   270cc:	f385 8811 	msr	BASEPRI, r5
   270d0:	f3bf 8f6f 	isb	sy
}
   270d4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   270d6:	2000      	movs	r0, #0
   270d8:	e7f8      	b.n	270cc <z_sched_wake+0x36>
   270da:	4620      	mov	r0, r4
   270dc:	e7f6      	b.n	270cc <z_sched_wake+0x36>

000270de <z_abort_timeout>:
{
   270de:	b510      	push	{r4, lr}
	__asm__ volatile(
   270e0:	f04f 0220 	mov.w	r2, #32
   270e4:	f3ef 8411 	mrs	r4, BASEPRI
   270e8:	f382 8812 	msr	BASEPRI_MAX, r2
   270ec:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   270f0:	6803      	ldr	r3, [r0, #0]
   270f2:	b13b      	cbz	r3, 27104 <z_abort_timeout+0x26>
			remove_timeout(to);
   270f4:	f7f9 fc06 	bl	20904 <remove_timeout>
			ret = 0;
   270f8:	2000      	movs	r0, #0
	__asm__ volatile(
   270fa:	f384 8811 	msr	BASEPRI, r4
   270fe:	f3bf 8f6f 	isb	sy
}
   27102:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   27104:	f06f 0015 	mvn.w	r0, #21
   27108:	e7f7      	b.n	270fa <z_abort_timeout+0x1c>

0002710a <z_get_next_timeout_expiry>:
{
   2710a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2710c:	f04f 0320 	mov.w	r3, #32
   27110:	f3ef 8411 	mrs	r4, BASEPRI
   27114:	f383 8812 	msr	BASEPRI_MAX, r3
   27118:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2711c:	f7f9 fbca 	bl	208b4 <next_timeout>
	__asm__ volatile(
   27120:	f384 8811 	msr	BASEPRI, r4
   27124:	f3bf 8f6f 	isb	sy
}
   27128:	bd10      	pop	{r4, pc}

0002712a <z_set_timeout_expiry>:
{
   2712a:	b570      	push	{r4, r5, r6, lr}
   2712c:	4604      	mov	r4, r0
   2712e:	460d      	mov	r5, r1
	__asm__ volatile(
   27130:	f04f 0320 	mov.w	r3, #32
   27134:	f3ef 8611 	mrs	r6, BASEPRI
   27138:	f383 8812 	msr	BASEPRI_MAX, r3
   2713c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   27140:	f7f9 fbb8 	bl	208b4 <next_timeout>
			      || (ticks <= next_to);
   27144:	2801      	cmp	r0, #1
   27146:	dd07      	ble.n	27158 <z_set_timeout_expiry+0x2e>
   27148:	42a0      	cmp	r0, r4
   2714a:	db05      	blt.n	27158 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2714c:	42a0      	cmp	r0, r4
   2714e:	4629      	mov	r1, r5
   27150:	bfa8      	it	ge
   27152:	4620      	movge	r0, r4
   27154:	f7f6 ff2e 	bl	1dfb4 <sys_clock_set_timeout>
	__asm__ volatile(
   27158:	f386 8811 	msr	BASEPRI, r6
   2715c:	f3bf 8f6f 	isb	sy
}
   27160:	bd70      	pop	{r4, r5, r6, pc}

00027162 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   27162:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   27164:	f7f9 fcd4 	bl	20b10 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   27168:	bd08      	pop	{r3, pc}

0002716a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2716a:	f7f9 bcd1 	b.w	20b10 <sys_clock_tick_get>

0002716e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2716e:	b108      	cbz	r0, 27174 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   27170:	f7e0 befc 	b.w	7f6c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   27174:	4770      	bx	lr

00027176 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27176:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2717a:	bf08      	it	eq
   2717c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   27180:	b538      	push	{r3, r4, r5, lr}
   27182:	460c      	mov	r4, r1
   27184:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27186:	d014      	beq.n	271b2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27188:	4308      	orrs	r0, r1
   2718a:	d103      	bne.n	27194 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2718c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   27190:	f7f9 bcbe 	b.w	20b10 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   27194:	f06f 0001 	mvn.w	r0, #1
   27198:	1b40      	subs	r0, r0, r5
   2719a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2719e:	eb63 0101 	sbc.w	r1, r3, r1
   271a2:	2900      	cmp	r1, #0
   271a4:	da04      	bge.n	271b0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   271a6:	f7f9 fcb3 	bl	20b10 <sys_clock_tick_get>
   271aa:	1940      	adds	r0, r0, r5
   271ac:	eb41 0104 	adc.w	r1, r1, r4
}
   271b0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   271b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   271b6:	4601      	mov	r1, r0
   271b8:	e7fa      	b.n	271b0 <sys_clock_timeout_end_calc+0x3a>

000271ba <k_timer_init>:
	timer->status = 0U;
   271ba:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   271bc:	e9c0 1208 	strd	r1, r2, [r0, #32]
   271c0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   271c4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   271c8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   271cc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   271ce:	6343      	str	r3, [r0, #52]	; 0x34
}
   271d0:	4770      	bx	lr

000271d2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   271d2:	b510      	push	{r4, lr}
   271d4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   271d6:	f7ff ff82 	bl	270de <z_abort_timeout>

	if (inactive) {
   271da:	b9b0      	cbnz	r0, 2720a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   271dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   271de:	b10b      	cbz	r3, 271e4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   271e0:	4620      	mov	r0, r4
   271e2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   271e4:	f104 0018 	add.w	r0, r4, #24
   271e8:	f7ff fee8 	bl	26fbc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   271ec:	b168      	cbz	r0, 2720a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   271ee:	f7ff fec5 	bl	26f7c <z_ready_thread>
	__asm__ volatile(
   271f2:	f04f 0320 	mov.w	r3, #32
   271f6:	f3ef 8011 	mrs	r0, BASEPRI
   271fa:	f383 8812 	msr	BASEPRI_MAX, r3
   271fe:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   27202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27206:	f7ff bf20 	b.w	2704a <z_reschedule_irqlock>
   2720a:	bd10      	pop	{r4, pc}

0002720c <add_event>:
{
   2720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2720e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27210:	e9d0 1300 	ldrd	r1, r3, [r0]
   27214:	4288      	cmp	r0, r1
   27216:	4604      	mov	r4, r0
   27218:	d105      	bne.n	27226 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2721a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2721c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   27220:	601d      	str	r5, [r3, #0]
	list->tail = node;
   27222:	6065      	str	r5, [r4, #4]
   27224:	e01d      	b.n	27262 <add_event+0x56>
	if ((pending == NULL) ||
   27226:	2b00      	cmp	r3, #0
   27228:	d0f7      	beq.n	2721a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2722a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2722c:	b100      	cbz	r0, 27230 <add_event+0x24>
   2722e:	3860      	subs	r0, #96	; 0x60
   27230:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   27234:	4639      	mov	r1, r7
   27236:	f7ff fe4e 	bl	26ed6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2723a:	2800      	cmp	r0, #0
   2723c:	dced      	bgt.n	2721a <add_event+0xe>
	return list->head == list;
   2723e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27240:	42b4      	cmp	r4, r6
   27242:	d0ea      	beq.n	2721a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27244:	2e00      	cmp	r6, #0
   27246:	d0e8      	beq.n	2721a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   27248:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2724a:	b101      	cbz	r1, 2724e <add_event+0x42>
   2724c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2724e:	4638      	mov	r0, r7
   27250:	f7ff fe41 	bl	26ed6 <z_sched_prio_cmp>
   27254:	2800      	cmp	r0, #0
   27256:	dd05      	ble.n	27264 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   27258:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2725a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2725e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27260:	6075      	str	r5, [r6, #4]
}
   27262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   27264:	6863      	ldr	r3, [r4, #4]
   27266:	429e      	cmp	r6, r3
   27268:	d0d7      	beq.n	2721a <add_event+0xe>
   2726a:	6836      	ldr	r6, [r6, #0]
   2726c:	e7ea      	b.n	27244 <add_event+0x38>

0002726e <register_events>:
{
   2726e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   27272:	2500      	movs	r5, #0
{
   27274:	468b      	mov	fp, r1
   27276:	4614      	mov	r4, r2
   27278:	461f      	mov	r7, r3
   2727a:	4682      	mov	sl, r0
	int events_registered = 0;
   2727c:	462e      	mov	r6, r5
	event->poller = NULL;
   2727e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   27280:	455d      	cmp	r5, fp
   27282:	db02      	blt.n	2728a <register_events+0x1c>
}
   27284:	4630      	mov	r0, r6
   27286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2728a:	f04f 0320 	mov.w	r3, #32
   2728e:	f3ef 8911 	mrs	r9, BASEPRI
   27292:	f383 8812 	msr	BASEPRI_MAX, r3
   27296:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2729a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2729e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   272a2:	3b01      	subs	r3, #1
   272a4:	2b07      	cmp	r3, #7
   272a6:	d80f      	bhi.n	272c8 <register_events+0x5a>
   272a8:	e8df f003 	tbb	[pc, r3]
   272ac:	0a0e041e 	.word	0x0a0e041e
   272b0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   272b4:	f8da 3010 	ldr.w	r3, [sl, #16]
   272b8:	689b      	ldr	r3, [r3, #8]
   272ba:	b12b      	cbz	r3, 272c8 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   272bc:	2302      	movs	r3, #2
   272be:	e020      	b.n	27302 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   272c0:	f8da 3010 	ldr.w	r3, [sl, #16]
   272c4:	681b      	ldr	r3, [r3, #0]
   272c6:	bb8b      	cbnz	r3, 2732c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   272c8:	bb47      	cbnz	r7, 2731c <register_events+0xae>
   272ca:	7823      	ldrb	r3, [r4, #0]
   272cc:	b333      	cbz	r3, 2731c <register_events+0xae>
	switch (event->type) {
   272ce:	f89a 300d 	ldrb.w	r3, [sl, #13]
   272d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   272d6:	3b01      	subs	r3, #1
   272d8:	2b07      	cmp	r3, #7
   272da:	d830      	bhi.n	2733e <register_events+0xd0>
   272dc:	e8df f003 	tbb	[pc, r3]
   272e0:	282f2833 	.word	0x282f2833
   272e4:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   272e8:	f8da 3010 	ldr.w	r3, [sl, #16]
   272ec:	689b      	ldr	r3, [r3, #8]
   272ee:	2b00      	cmp	r3, #0
   272f0:	d0ea      	beq.n	272c8 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   272f2:	2301      	movs	r3, #1
   272f4:	e005      	b.n	27302 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   272f6:	f8da 3010 	ldr.w	r3, [sl, #16]
   272fa:	6a1b      	ldr	r3, [r3, #32]
   272fc:	2b00      	cmp	r3, #0
   272fe:	d0e3      	beq.n	272c8 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   27300:	2310      	movs	r3, #16
	event->state |= state;
   27302:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   27306:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2730a:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2730e:	430b      	orrs	r3, r1
   27310:	f363 3294 	bfi	r2, r3, #14, #7
   27314:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   27318:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2731c:	f389 8811 	msr	BASEPRI, r9
   27320:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   27324:	3501      	adds	r5, #1
   27326:	f10a 0a14 	add.w	sl, sl, #20
   2732a:	e7a9      	b.n	27280 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2732c:	2304      	movs	r3, #4
   2732e:	e7e8      	b.n	27302 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   27330:	f8da 0010 	ldr.w	r0, [sl, #16]
   27334:	4622      	mov	r2, r4
   27336:	4651      	mov	r1, sl
   27338:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2733a:	f7ff ff67 	bl	2720c <add_event>
	event->poller = poller;
   2733e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   27342:	3601      	adds	r6, #1
   27344:	e7ea      	b.n	2731c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   27346:	f8da 0010 	ldr.w	r0, [sl, #16]
   2734a:	4622      	mov	r2, r4
   2734c:	4651      	mov	r1, sl
   2734e:	e7f4      	b.n	2733a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   27350:	f8da 0010 	ldr.w	r0, [sl, #16]
   27354:	4622      	mov	r2, r4
   27356:	4651      	mov	r1, sl
   27358:	3024      	adds	r0, #36	; 0x24
   2735a:	e7ee      	b.n	2733a <register_events+0xcc>

0002735c <signal_poll_event>:
{
   2735c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   27360:	6884      	ldr	r4, [r0, #8]
{
   27362:	4605      	mov	r5, r0
   27364:	460e      	mov	r6, r1
	if (poller != NULL) {
   27366:	b144      	cbz	r4, 2737a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   27368:	7863      	ldrb	r3, [r4, #1]
   2736a:	2b01      	cmp	r3, #1
   2736c:	d12e      	bne.n	273cc <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2736e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   27372:	f013 0302 	ands.w	r3, r3, #2
   27376:	d10a      	bne.n	2738e <signal_poll_event+0x32>
		poller->is_polling = false;
   27378:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2737a:	68eb      	ldr	r3, [r5, #12]
   2737c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   27380:	4316      	orrs	r6, r2
	event->poller = NULL;
   27382:	2000      	movs	r0, #0
	event->state |= state;
   27384:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   27388:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2738a:	60eb      	str	r3, [r5, #12]
	return retcode;
   2738c:	e03e      	b.n	2740c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2738e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   27392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27396:	bf08      	it	eq
   27398:	f112 0f02 	cmneq.w	r2, #2
   2739c:	d032      	beq.n	27404 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2739e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   273a2:	4640      	mov	r0, r8
   273a4:	f7ff fe3d 	bl	27022 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   273a8:	2e08      	cmp	r6, #8
   273aa:	bf0c      	ite	eq
   273ac:	f06f 0303 	mvneq.w	r3, #3
   273b0:	2300      	movne	r3, #0
   273b2:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   273b4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   273b8:	06db      	lsls	r3, r3, #27
   273ba:	d109      	bne.n	273d0 <signal_poll_event+0x74>
   273bc:	f854 7c48 	ldr.w	r7, [r4, #-72]
   273c0:	b937      	cbnz	r7, 273d0 <signal_poll_event+0x74>
	z_ready_thread(thread);
   273c2:	4640      	mov	r0, r8
   273c4:	f7ff fdda 	bl	26f7c <z_ready_thread>
		poller->is_polling = false;
   273c8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   273ca:	e7d6      	b.n	2737a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   273cc:	2b02      	cmp	r3, #2
   273ce:	d001      	beq.n	273d4 <signal_poll_event+0x78>
		poller->is_polling = false;
   273d0:	2300      	movs	r3, #0
   273d2:	e7d1      	b.n	27378 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   273d4:	7823      	ldrb	r3, [r4, #0]
   273d6:	2b00      	cmp	r3, #0
   273d8:	d0cf      	beq.n	2737a <signal_poll_event+0x1e>
   273da:	f854 7c04 	ldr.w	r7, [r4, #-4]
   273de:	2f00      	cmp	r7, #0
   273e0:	d0f2      	beq.n	273c8 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   273e2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   273e6:	f1a4 0914 	sub.w	r9, r4, #20
   273ea:	f104 0014 	add.w	r0, r4, #20
   273ee:	f7ff fe76 	bl	270de <z_abort_timeout>
		twork->poll_result = 0;
   273f2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   273f6:	4649      	mov	r1, r9
   273f8:	4638      	mov	r0, r7
   273fa:	f7ff fcdc 	bl	26db6 <z_work_submit_to_queue>
		poller->is_polling = false;
   273fe:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   27402:	e7ba      	b.n	2737a <signal_poll_event+0x1e>
		poller->is_polling = false;
   27404:	2300      	movs	r3, #0
   27406:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   27408:	f06f 000a 	mvn.w	r0, #10
}
   2740c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027410 <clear_event_registrations>:
	while (num_events--) {
   27410:	2314      	movs	r3, #20
{
   27412:	b5f0      	push	{r4, r5, r6, r7, lr}
   27414:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   27418:	2400      	movs	r4, #0
	switch (event->type) {
   2741a:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   2741e:	b901      	cbnz	r1, 27422 <clear_event_registrations+0x12>
}
   27420:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   27422:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   27426:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2742a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2742e:	2b08      	cmp	r3, #8
   27430:	f1a0 0714 	sub.w	r7, r0, #20
   27434:	d80c      	bhi.n	27450 <clear_event_registrations+0x40>
   27436:	fa26 f303 	lsr.w	r3, r6, r3
   2743a:	07db      	lsls	r3, r3, #31
   2743c:	d508      	bpl.n	27450 <clear_event_registrations+0x40>
	return node->next != NULL;
   2743e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   27442:	b12b      	cbz	r3, 27450 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   27444:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   27448:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2744a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2744c:	e940 4405 	strd	r4, r4, [r0, #-20]
   27450:	f382 8811 	msr	BASEPRI, r2
   27454:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   27458:	f04f 0320 	mov.w	r3, #32
   2745c:	f3ef 8211 	mrs	r2, BASEPRI
   27460:	f383 8812 	msr	BASEPRI_MAX, r3
   27464:	f3bf 8f6f 	isb	sy
   27468:	3901      	subs	r1, #1
   2746a:	4638      	mov	r0, r7
   2746c:	e7d7      	b.n	2741e <clear_event_registrations+0xe>

0002746e <k_poll_event_init>:
{
   2746e:	b510      	push	{r4, lr}
	event->type = type;
   27470:	0552      	lsls	r2, r2, #21
   27472:	0209      	lsls	r1, r1, #8
   27474:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   27478:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2747c:	430a      	orrs	r2, r1
   2747e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   27480:	2400      	movs	r4, #0
	event->type = type;
   27482:	430a      	orrs	r2, r1
	event->obj = obj;
   27484:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   27488:	6084      	str	r4, [r0, #8]
}
   2748a:	bd10      	pop	{r4, pc}

0002748c <z_handle_obj_poll_events>:
{
   2748c:	4603      	mov	r3, r0
	return list->head == list;
   2748e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   27490:	4283      	cmp	r3, r0
   27492:	d008      	beq.n	274a6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   27494:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27498:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2749a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2749c:	2300      	movs	r3, #0
	node->prev = NULL;
   2749e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   274a2:	f7ff bf5b 	b.w	2735c <signal_poll_event>
}
   274a6:	4770      	bx	lr

000274a8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   274a8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   274aa:	e9c0 0000 	strd	r0, r0, [r0]
   274ae:	6083      	str	r3, [r0, #8]
}
   274b0:	4770      	bx	lr

000274b2 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   274b2:	2300      	movs	r3, #0
   274b4:	6083      	str	r3, [r0, #8]
}
   274b6:	4770      	bx	lr

000274b8 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   274b8:	6883      	ldr	r3, [r0, #8]
   274ba:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   274bc:	68c3      	ldr	r3, [r0, #12]
   274be:	6013      	str	r3, [r2, #0]
}
   274c0:	4770      	bx	lr

000274c2 <k_free>:
	if (ptr != NULL) {
   274c2:	b120      	cbz	r0, 274ce <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   274c4:	1f01      	subs	r1, r0, #4
   274c6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   274ca:	f7ff ba92 	b.w	269f2 <k_heap_free>
}
   274ce:	4770      	bx	lr
